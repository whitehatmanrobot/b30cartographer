by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface change event was not handled by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSingleInterface_NegNoInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Could not find Interface '" + Interface.None + "' on any Server"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Could not find Interface '" + Interface.None + "' on any Server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSingleInterface_NegMultiInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: More than one Server was found exposing Interface '" + TestInterfaces.dummy_interface1A + "' when only one was expected"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: More than one Server was found exposing Interface '" + TestInterfaces.dummy_interface1A + "' when only one was expected"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSingleInterface_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface6 + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterfaceListBySite_PosNoInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterfaceListBySite_PosMultiInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterfaceList_PosCache()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A virtual interface list change has been accepted by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change event was not handled by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_NegNoInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + VirtualInterface.None + "' not present in site id 1"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + VirtualInterface.None + "' not present in site id 1"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_NegNoSite()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + TestVirtualInterfaces.dummy_vinterface1A + "' not present in site id 1000"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + TestVirtualInterfaces.dummy_vinterface1A + "' not present in site id 1000"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_VirtualInterfaceInfo_ToString()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_PosNotNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_PosNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_PosEnvironmentTypeOverride()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_PosSiteOverride()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterface_PosCache()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A virtual interface change has been accepted by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change event was not handled by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterfaceInfoBySite_PosNoInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetVirtualInterfaceInfoBySite_PosMultiInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSetting_NegNoSetting()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Setting '" + TestSettings.configunittest_setting_missing + "' not found in t_settings table in NPDB"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Setting '" + TestSettings.configunittest_setting_missing + "' not found in t_settings table in NPDB"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSetting_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetSetting_PosCache()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A setting change has been accepted by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    //new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    //new AppEntry(EventLogEntryType.Error, 3, "A setting change event was not handled by this component (details below)\n"),
            //    //new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    //new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    //new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    //new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    //new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    //new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    //new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    //new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    //new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A setting change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetMultiSetting_NegNoEnvironment()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetMultiSetting_NegNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetMultiSetting_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetMultiSetting_PosCache()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A multisetting change has been accepted by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change event was not handled by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_NegNoEnvironment()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_NegNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_PosNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_PosNoUnits()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_PosOneUnit()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnitListByServer_PosMultiUnits()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnit_NegNoUnits()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: install unit dummy_install_unit3 not found in npdb"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: install unit dummy_install_unit3 not found in npdb"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnit_PosNotNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInstallUnit_PosNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_NegNoEnvironment()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_NegNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_PosNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_PosNoComponents()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_PosOneComponent()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponentListByServer_PosMultiComponents()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponent_NegNoComponent()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentException: Component.unknown cannot be passed to Config.GetComponent"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentException: Component.unknown cannot be passed to Config.GetComponent"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponent_NegNoUnit()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: component " + TestComponents.dummy_component3 + " not found in npdb"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: component " + TestComponents.dummy_component3 + " not found in npdb"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponent_PosNotNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetComponent_PosNull()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_NegNoEnvironment()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_NegNoServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_PosServer()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_PosNoInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_PosOneInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetInterfaceListByServer_PosMultiInterfaces()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketCount_NegNoInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketCount_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketNum_NegNoInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketNum_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketServer_NegNoInterface()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + Interface.None + ",0,0) did not return any results!  Check npdb.t_interface_buckets."),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + Interface.None + ",0,0) did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketServer_NegNoBucket()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + TestInterfaces.dummy_interface4 + ",0,1234) did not return any results!  Check npdb.t_interface_buckets."),
            //    // BUGBUG: 35018
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + TestInterfaces.dummy_interface4 + ",0,1234) did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketServer_BucketServer_ToString()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketServer_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetBucketServer_PosNext()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetTitleBucketServer_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetTitleBucketServer_PosNext()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GetTitleBucketServer_PosCache()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change event was not handled by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCPP),
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 100 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
            //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change handler threw an exception! (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_CompleteMigration_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_CompleteTitleMigration_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_GameConfigChange_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A game config change handler threw an exception! (details below)"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_LiveTitleConfigChange_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
            //    new AppEntry(EventLogEntryType.Error, 3, "A game config change handler threw an exception! (details below)"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_XdelaySettingsChange_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An xdelay settings change handler threw an exception! (details below)"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        [TestCase]
        public void CPP_XrlMappingsChange_Pos()
        {
            CPP_Base();

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
            //    new AppEntry(EventLogEntryType.Error, 3, "An xrl mappings change handler threw an exception! (details below)"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }

        //  This case does not use CPP_Base(), because we need to pass the IP address of NPDB on the command line instead of the server name.
        [TestCase]
        public void CPP_NpdbServer_Pos()
        {
            CheckReady();

            ProcessStartInfo configtlbtestProcessInfo = new ProcessStartInfo();
            Process configtlbtestProcess = new Process();

            StackFrame sf = new StackFrame(0);
            MethodBase methodBase = sf.GetMethod();

            // Start configtlbtest
            configtlbtestProcessInfo.FileName = "ConfigTlbTest.exe";
            configtlbtestProcessInfo.Arguments = _npdbServerIp + " " + _npdbEnvironment + " " + _testComponentCPP + "  " + methodBase.Name;
            configtlbtestProcessInfo.UseShellExecute = false;
            configtlbtestProcessInfo.RedirectStandardError = true;
            configtlbtestProcessInfo.CreateNoWindow = true;
            configtlbtestProcess.StartInfo = configtlbtestProcessInfo;
            configtlbtestProcess.Start();

            // Get any standard error output
            string configtlbtestError = configtlbtestProcess.StandardError.ReadToEnd();

            // Get the exit code
            int configtlbtestExitCode = configtlbtestProcess.ExitCode;

            if (0 != configtlbtestExitCode)
            {
                TextWriter errorWriter = Console.Error;

                string[] configtlbtestErrorLines = ParseStandardError(configtlbtestError);
                foreach (string configtlbtestErrorLine in configtlbtestErrorLines)
                {
                    errorWriter.WriteLine(configtlbtestErrorLine);
                }
                throw new Exception(methodBase.Name + " failed: (0x" + configtlbtestExitCode.ToString("X") + ")");
            }

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CPP_AppEntries, appEntries));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\config\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\config\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_configdevtest_none_12.4.56.0_none_1099dbbf5cec3640
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=configdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.manifest
XP_MANIFEST_PATH=manifests\msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.cat
XP_CATALOG_PATH=manifests\msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.cat
XP_PAYLOAD_PATH=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=configdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\config\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_configdevtest_none_12.4.56.0_none_1099dbbf5cec3640
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=configdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.manifest
XP_MANIFEST_PATH=manifests\msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.cat
XP_CATALOG_PATH=manifests\msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488.cat
XP_PAYLOAD_PATH=msil_configdevtest_no-public-key_12.4.56.0_x-ww_1115f488
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=configdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\configtlb\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
// ConfigTlbTest.pch will be the pre-compiled header
// stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\configtlb\configtlbtest.cpp ===
#include "stdafx.h"

#define WIDEN2(x) L ## x
#define WIDEN(x) WIDEN2(x)
#define __WFILE__ WIDEN(__FILE__)

#define Component_dummy_component1 CComBSTR(L"dummy_component1")
#define Component_dummy_component2 CComBSTR(L"dummy_component2")
#define Component_dummy_component3 CComBSTR(L"dummy_component3")
#define Component_dummy_component4 CComBSTR(L"dummy_component4")
#define Component_dummy_component5 CComBSTR(L"dummy_component5")
#define Component_dummy_component11 CComBSTR(L"dummy_component11")
#define Component_dummy_component12 CComBSTR(L"dummy_component12")
#define Component_dummy_component13 CComBSTR(L"dummy_component13")
#define Component_dummy_component14 CComBSTR(L"dummy_component14")
#define Component_dummy_component15 CComBSTR(L"dummy_component15")
#define Component_dummy_component16 CComBSTR(L"dummy_component16")
#define Component_dummy_component17 CComBSTR(L"dummy_component17")

#define Interface_dummy_interface1A CComBSTR(L"dummy_interface1A")
#define Interface_dummy_interface1B CComBSTR(L"dummy_interface1B")
#define Interface_dummy_interface1C CComBSTR(L"dummy_interface1C")
#define Interface_dummy_interface1D CComBSTR(L"dummy_interface1D")
#define Interface_dummy_interface1E CComBSTR(L"dummy_interface1E")
#define Interface_dummy_interface1F CComBSTR(L"dummy_interface1F")
#define Interface_dummy_interface1G CComBSTR(L"dummy_interface1G")
#define Interface_dummy_interface2A CComBSTR(L"dummy_interface2A")
#define Interface_dummy_interface2B CComBSTR(L"dummy_interface2B")
#define Interface_dummy_interface2C CComBSTR(L"dummy_interface2C")
#define Interface_dummy_interface2D CComBSTR(L"dummy_interface2D")
#define Interface_dummy_interface2E CComBSTR(L"dummy_interface2E")
#define Interface_dummy_interface2F CComBSTR(L"dummy_interface2F")
#define Interface_dummy_interface2G CComBSTR(L"dummy_interface2G")
#define Interface_dummy_interface3A CComBSTR(L"dummy_interface3A")
#define Interface_dummy_interface3B CComBSTR(L"dummy_interface3B")
#define Interface_dummy_interface4 CComBSTR(L"dummy_interface4")
#define Interface_dummy_interface5 CComBSTR(L"dummy_interface5")
#define Interface_dummy_interface6 CComBSTR(L"dummy_interface6")

#define VirtualInterface_dummy_vinterface1A CComBSTR(L"dummy_vinterface1A")
#define VirtualInterface_dummy_vinterface1B CComBSTR(L"dummy_vinterface1B")
#define VirtualInterface_dummy_vinterface1C CComBSTR(L"dummy_vinterface1C")
#define VirtualInterface_dummy_vinterface1D CComBSTR(L"dummy_vinterface1D")
#define VirtualInterface_dummy_vinterface1E CComBSTR(L"dummy_vinterface1E")
#define VirtualInterface_dummy_vinterface1F CComBSTR(L"dummy_vinterface1F")
#define VirtualInterface_dummy_vinterface1G CComBSTR(L"dummy_vinterface1G")
#define VirtualInterface_dummy_vinterface2A CComBSTR(L"dummy_vinterface2A")
#define VirtualInterface_dummy_vinterface2B CComBSTR(L"dummy_vinterface2B")
#define VirtualInterface_dummy_vinterface2C CComBSTR(L"dummy_vinterface2C")
#define VirtualInterface_dummy_vinterface2D CComBSTR(L"dummy_vinterface2D")
#define VirtualInterface_dummy_vinterface2E CComBSTR(L"dummy_vinterface2E")
#define VirtualInterface_dummy_vinterface2F CComBSTR(L"dummy_vinterface2F")
#define VirtualInterface_dummy_vinterface2G CComBSTR(L"dummy_vinterface2G")
#define VirtualInterface_dummy_vinterface5 CComBSTR(L"dummy_vinterface5")

#define Setting_configunittest_setting1 CComBSTR(L"configunittest_setting1")
#define Setting_configunittest_setting2 CComBSTR(L"configunittest_setting2")
#define Setting_configunittest_setting3 CComBSTR(L"configunittest_setting3")
#define Setting_configunittest_setting4 CComBSTR(L"configunittest_setting4")
#define Setting_configunittest_setting5 CComBSTR(L"configunittest_setting5")
#define Setting_configunittest_setting11 CComBSTR(L"configunittest_setting11")
#define Setting_configunittest_setting12 CComBSTR(L"configunittest_setting12")
#define Setting_configunittest_setting13 CComBSTR(L"configunittest_setting13")
#define Setting_configunittest_setting14 CComBSTR(L"configunittest_setting14")
#define Setting_configunittest_setting15 CComBSTR(L"configunittest_setting15")
#define Setting_configunittest_setting16 CComBSTR(L"configunittest_setting16")
#define Setting_configunittest_setting17 CComBSTR(L"configunittest_setting17")
#define Setting_configunittest_setting_missing CComBSTR(L"configunittest_setting_missing")

#define MultiSetting_configunittest_multisetting1 CComBSTR(L"configunittest_multisetting1")
#define MultiSetting_configunittest_multisetting2 CComBSTR(L"configunittest_multisetting2")
#define MultiSetting_configunittest_multisetting3 CComBSTR(L"configunittest_multisetting3")
#define MultiSetting_configunittest_multisetting4 CComBSTR(L"configunittest_multisetting4")
#define MultiSetting_configunittest_multisetting5 CComBSTR(L"configunittest_multisetting5")
#define MultiSetting_configunittest_multisetting11 CComBSTR(L"configunittest_multisetting11")
#define MultiSetting_configunittest_multisetting12 CComBSTR(L"configunittest_multisetting12")
#define MultiSetting_configunittest_multisetting13 CComBSTR(L"configunittest_multisetting13")
#define MultiSetting_configunittest_multisetting14 CComBSTR(L"configunittest_multisetting14")
#define MultiSetting_configunittest_multisetting15 CComBSTR(L"configunittest_multisetting15")
#define MultiSetting_configunittest_multisetting16 CComBSTR(L"configunittest_multisetting16")
#define MultiSetting_configunittest_multisetting17 CComBSTR(L"configunittest_multisetting17")
#define MultiSetting_configunittest_multisetting_missing CComBSTR(L"configunittest_multisetting_missing")


CComPtr<IConfig>  g_pConfig = NULL;

CComBSTR          g_bsNpdbServer = CComBSTR(NULL);
CComBSTR          g_bsNpdbDatabase = CComBSTR(NULL);
CComBSTR          g_bsNpdbEnvironment = CComBSTR(NULL);
CComBSTR          g_bsComponent = CComBSTR(NULL);
CComBSTR          g_bsServer = CComBSTR(L"DUMMY_SERVER1");



HRESULT
CompareSafeArrayToBSTR(
    SAFEARRAY  *pSafeArray,
    CComBSTR   *pBSTR,
    long       lBSTRElements
)
{
    HRESULT   hResult = S_OK;
    long      lSafeArrayElements = 0;
    CComBSTR  bsSafeArrayElement = CComBSTR(NULL);

    // get the number of elements in the safearray
    hResult = SafeArrayGetUBound(pSafeArray, 1, &lSafeArrayElements);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // compare the number of elements
    if (lBSTRElements != (lSafeArrayElements + 1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSafeArrayElements (%u)\n", __WFILE__, __LINE__, lBSTRElements, lSafeArrayElements + 1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    for (long lIndex = 0; lIndex <= lSafeArrayElements; lIndex++) {
        bsSafeArrayElement.Empty();
        hResult = SafeArrayGetElement(pSafeArray, &lIndex, (void*)&bsSafeArrayElement);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            goto FunctionExit;
        }

        if (pBSTR[lIndex] != bsSafeArrayElement) {
            fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != pSafeArray[%u] (\"%s\")\n", __WFILE__, __LINE__, pBSTR[0], lIndex, bsSafeArrayElement);
            hResult = E_FAIL;
            goto FunctionExit;
        }
    }

    hResult = S_OK;

FunctionExit:
    bsSafeArrayElement.Empty();

    return hResult;
}



HRESULT
CompareSafeArrayToVirtualInterface(
    SAFEARRAY         *pSafeArray,
    CComBSTR  *pVirtualInterfaces,
    long              lVirtualInterfacesElements
)
{
    HRESULT           hResult = S_OK;
    long              lSafeArrayElements = 0;
    CComBSTR  VirtualInterfaceSafeArrayElement = VirtualInterface_None;

    // get the number of elements in the safearray
    hResult = SafeArrayGetUBound(pSafeArray, 1, &lSafeArrayElements);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // compare the number of elements
    if (lVirtualInterfacesElements != (lSafeArrayElements + 1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSafeArrayElements (%u)\n", __WFILE__, __LINE__, lVirtualInterfacesElements, lSafeArrayElements + 1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    for (long lIndex = 0; lIndex <= lSafeArrayElements; lIndex++) {
        VirtualInterfaceSafeArrayElement = VirtualInterface_None;
        hResult = SafeArrayGetElement(pSafeArray, &lIndex, (void*)&VirtualInterfaceSafeArrayElement);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            goto FunctionExit;
        }

        if (pVirtualInterfaces[lIndex] != VirtualInterfaceSafeArrayElement) {
            fwprintf(stderr, L"FAIL (%s @ %u): %u != pSafeArray[%u] (%u)\n", __WFILE__, __LINE__, pVirtualInterfaces[0], lIndex, VirtualInterfaceSafeArrayElement);
            hResult = E_FAIL;
            goto FunctionExit;
        }
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}



HRESULT
CompareSafeArrayToInstallUnit(
    SAFEARRAY    *pSafeArray,
    CComBSTR     *pInstallUnits,
    long         lInstallUnitsElements
)
{
    HRESULT      hResult = S_OK;
    long         lSafeArrayElements = 0;
    CComBSTR  InstallUnitSafeArrayElement = "";

    // get the number of elements in the safearray
    hResult = SafeArrayGetUBound(pSafeArray, 1, &lSafeArrayElements);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // compare the number of elements
    if (lInstallUnitsElements != (lSafeArrayElements + 1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSafeArrayElements (%u)\n", __WFILE__, __LINE__, lInstallUnitsElements, lSafeArrayElements + 1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    for (long lIndex = 0; lIndex <= lSafeArrayElements; lIndex++) {
        InstallUnitSafeArrayElement = "";
        hResult = SafeArrayGetElement(pSafeArray, &lIndex, (void*)&InstallUnitSafeArrayElement);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            goto FunctionExit;
        }

        if (pInstallUnits[lIndex] != InstallUnitSafeArrayElement) {
            fwprintf(stderr, L"FAIL (%s @ %u): %u != pSafeArray[%u] (%u)\n", __WFILE__, __LINE__, pInstallUnits[0], lIndex, InstallUnitSafeArrayElement);
            hResult = E_FAIL;
            goto FunctionExit;
        }
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CompareSafeArrayToComponent(
    SAFEARRAY  *pSafeArray,
    CComBSTR  *pComponents,
    long       lComponentElements
)
{
    HRESULT    hResult = S_OK;
    long       lSafeArrayElements = 0;
    CComBSTR  ComponentSafeArrayElement = Component_unknown;

    // get the number of elements in the safearray
    hResult = SafeArrayGetUBound(pSafeArray, 1, &lSafeArrayElements);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // compare the number of elements
    if (lComponentElements != (lSafeArrayElements + 1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSafeArrayElements (%u)\n", __WFILE__, __LINE__, lComponentElements, lSafeArrayElements + 1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    for (long lIndex = 0; lIndex <= lSafeArrayElements; lIndex++) {
        ComponentSafeArrayElement = Component_unknown;
        hResult = SafeArrayGetElement(pSafeArray, &lIndex, (void*)&ComponentSafeArrayElement);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            goto FunctionExit;
        }

        if (pComponents[lIndex] != ComponentSafeArrayElement) {
            fwprintf(stderr, L"FAIL (%s @ %u): %u != pSafeArray[%u] (%u)\n", __WFILE__, __LINE__, pComponents[0], lIndex, ComponentSafeArrayElement);
            hResult = E_FAIL;
            goto FunctionExit;
        }
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CompareSafeArrayToInterface(
    SAFEARRAY  *pSafeArray,
    CComBSTR   *pInterfaces,
    long       lInterfaceElements
)
{
    HRESULT    hResult = S_OK;
    long       lSafeArrayElements = 0;
    CComBSTR  InterfaceSafeArrayElement = Interface_None;

    // get the number of elements in the safearray
    hResult = SafeArrayGetUBound(pSafeArray, 1, &lSafeArrayElements);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // compare the number of elements
    if (lInterfaceElements != (lSafeArrayElements + 1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSafeArrayElements (%u)\n", __WFILE__, __LINE__, lInterfaceElements, lSafeArrayElements + 1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    for (long lIndex = 0; lIndex <= lSafeArrayElements; lIndex++) {
        InterfaceSafeArrayElement = Interface_None;
        hResult = SafeArrayGetElement(pSafeArray, &lIndex, (void*)&InterfaceSafeArrayElement);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            goto FunctionExit;
        }

        if (pInterfaces[lIndex] != InterfaceSafeArrayElement) {
            fwprintf(stderr, L"FAIL (%s @ %u): %u != pSafeArray[%u] (%u)\n", __WFILE__, __LINE__, pInterfaces[0], lIndex, InterfaceSafeArrayElement);
            hResult = E_FAIL;
            goto FunctionExit;
        }
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}



class CConfigListener : public CConfigListenerBase
{

public:
    // public members to control the behavior of the IConfigListener methods
    BOOL              m_ServerListChange_fFired;
    VARIANT_BOOL      m_ServerListChange_fVeto;
    BOOL              m_ServerListChange_fThrow;
    CComBSTR          m_ServerListChange_Interface;
    CComBSTR          *m_ServerListChange_bsValueOld;
    long              m_ServerListChange_lValueOld;
    CComBSTR          *m_ServerListChange_bsValueNew;
    long              m_ServerListChange_lValueNew;

    BOOL              m_InterfaceChange_fFired;
    VARIANT_BOOL      m_InterfaceChange_fVeto;
    BOOL              m_InterfaceChange_fThrow;
    WCHAR             *m_InterfaceChange_Server;
    CComBSTR          m_InterfaceChange_Interface;
    WCHAR             *m_InterfaceChange_ValueOld;
    WCHAR             *m_InterfaceChange_ValueNew;

    BOOL              m_VirtualInterfaceListChange_fFired;
    VARIANT_BOOL      m_VirtualInterfaceListChange_fVeto;
    BOOL              m_VirtualInterfaceListChange_fThrow;
    long              m_VirtualInterfaceListChange_lSiteId;
    CComBSTR  *m_VirtualInterfaceListChange_ValueOld;
    long              m_VirtualInterfaceListChange_lValueOld;
    CComBSTR  *m_VirtualInterfaceListChange_ValueNew;
    long              m_VirtualInterfaceListChange_lValueNew;

    BOOL              m_VirtualInterfaceChange_fFired;
    VARIANT_BOOL      m_VirtualInterfaceChange_fVeto;
    BOOL              m_VirtualInterfaceChange_fThrow;
    long              m_VirtualInterfaceChange_lSiteId;
    CComBSTR  m_VirtualInterfaceChange_VirtualInterface;
    WCHAR             *m_VirtualInterfaceChange_ValueOld;
    WCHAR             *m_VirtualInterfaceChange_ValueNew;

    BOOL              m_SettingChange_fFired;
    VARIANT_BOOL      m_SettingChange_fVeto;
    BOOL              m_SettingChange_fThrow;
    long              m_SettingChange_lSiteId;
    WCHAR             *m_SettingChange_Server;
    CComBSTR         m_SettingChange_Component;
    CComBSTR           m_SettingChange_Setting;
    WCHAR             *m_SettingChange_ValueOld;
    WCHAR             *m_SettingChange_ValueNew;

    BOOL              m_MultiSettingChange_fFired;
    VARIANT_BOOL      m_MultiSettingChange_fVeto;
    BOOL              m_MultiSettingChange_fThrow;
    long              m_MultiSettingChange_lSiteId;
    WCHAR             *m_MultiSettingChange_Server;
    CComBSTR         m_MultiSettingChange_Component;
    CComBSTR      m_MultiSettingChange_MultiSetting;
    CComBSTR          *m_MultiSettingChange_bsValueOld;
    long              m_MultiSettingChange_lValueOld;
    CComBSTR          *m_MultiSettingChange_bsValueNew;
    long              m_MultiSettingChange_lValueNew;

    BOOL              m_InterfaceBucketChange_fFired;
    VARIANT_BOOL      m_InterfaceBucketChange_fVeto;
    BOOL              m_InterfaceBucketChange_fThrow;
    unsigned long     m_InterfaceBucketChange_ulTitleId;
    unsigned long     m_InterfaceBucketChange_ulBucket;
    CComBSTR          m_InterfaceBucketChange_Interface;
    WCHAR             *m_InterfaceBucketChange_ValueOld;
    WCHAR             *m_InterfaceBucketChange_ValueNew;

    BOOL              m_GameConfigChange_fFired;
    BOOL              m_GameConfigChange_fThrow;

    BOOL              m_XdelaySettingsChange_fFired;
    BOOL              m_XdelaySettingsChange_fThrow;

    BOOL              m_XrlMappingsChange_fFired;
    BOOL              m_XrlMappingsChange_fThrow;

    HRESULT           m_hrChange;

    CConfigListener() {
        m_ServerListChange_fFired = FALSE;
        m_ServerListChange_fVeto = VARIANT_FALSE;
        m_ServerListChange_fThrow = FALSE;
        m_ServerListChange_Interface = Interface_None;
        m_ServerListChange_bsValueOld = NULL;
        m_ServerListChange_lValueOld = 0;
        m_ServerListChange_bsValueNew = NULL;
        m_ServerListChange_lValueNew = 0;

        m_InterfaceChange_fFired = FALSE;
        m_InterfaceChange_fVeto = VARIANT_FALSE;
        m_InterfaceChange_fThrow = FALSE;
        m_InterfaceChange_Server = NULL;
        m_InterfaceChange_Interface = Interface_None;
        m_InterfaceChange_ValueOld = NULL;
        m_InterfaceChange_ValueNew = NULL;

        m_VirtualInterfaceListChange_fFired = FALSE;
        m_VirtualInterfaceListChange_fVeto = VARIANT_FALSE;
        m_VirtualInterfaceListChange_fThrow = FALSE;
        m_VirtualInterfaceListChange_lSiteId = 0;
        m_VirtualInterfaceListChange_ValueOld = NULL;
        m_VirtualInterfaceListChange_lValueOld = 0;
        m_VirtualInterfaceListChange_ValueNew = NULL;
        m_VirtualInterfaceListChange_lValueNew = 0;

        m_VirtualInterfaceChange_fFired = FALSE;
        m_VirtualInterfaceChange_fVeto = VARIANT_FALSE;
        m_VirtualInterfaceChange_fThrow = FALSE;
        m_VirtualInterfaceChange_lSiteId = 0;
        m_VirtualInterfaceChange_VirtualInterface = VirtualInterface_None;
        m_VirtualInterfaceChange_ValueOld = NULL;
        m_VirtualInterfaceChange_ValueNew = NULL;

        m_SettingChange_fFired = FALSE;
        m_SettingChange_fVeto = VARIANT_FALSE;
        m_SettingChange_fThrow = FALSE;
        m_SettingChange_lSiteId = 0;
        m_SettingChange_Server = NULL;
        m_SettingChange_Component = Component_unknown;
        m_SettingChange_Setting = Setting_configunittest_setting_missing;
        m_SettingChange_ValueOld = NULL;
        m_SettingChange_ValueNew = NULL;

        m_MultiSettingChange_fFired = FALSE;
        m_MultiSettingChange_fVeto = VARIANT_FALSE;
        m_MultiSettingChange_fThrow = FALSE;
        m_MultiSettingChange_lSiteId = 0;
        m_MultiSettingChange_Server = NULL;
        m_MultiSettingChange_Component = Component_unknown;
        m_MultiSettingChange_MultiSetting = MultiSetting_configunittest_multisetting_missing;
        m_MultiSettingChange_bsValueOld = NULL;
        m_MultiSettingChange_lValueOld = 0;
        m_MultiSettingChange_bsValueNew = NULL;
        m_MultiSettingChange_lValueNew = 0;

        m_InterfaceBucketChange_fFired = FALSE;
        m_InterfaceBucketChange_fVeto = VARIANT_FALSE;
        m_InterfaceBucketChange_fThrow = FALSE;
        m_InterfaceBucketChange_ulTitleId = 0;
        m_InterfaceBucketChange_ulBucket = 0;
        m_InterfaceBucketChange_Interface = Interface_None;
        m_InterfaceBucketChange_ValueOld = NULL;
        m_InterfaceBucketChange_ValueNew = NULL;

        m_GameConfigChange_fFired = FALSE;
        m_GameConfigChange_fThrow = FALSE;

        m_XdelaySettingsChange_fFired = FALSE;
        m_XdelaySettingsChange_fThrow = FALSE;

        m_XrlMappingsChange_fFired = FALSE;
        m_XrlMappingsChange_fThrow = FALSE;

        m_hrChange = S_OK;
    };

    virtual HRESULT __stdcall ServerListChange (
        /*[in]*/ struct IServerListChangeEventArgs * e)
    {
        // initial return code
        HRESULT    hResult = S_OK;
        CComBSTR   bsEnvironmentChange = CComBSTR(NULL);
        CComBSTR   InterfaceChange = Interface_None;
        SAFEARRAY  *pValueOld = NULL;
        SAFEARRAY  *pValueNew = NULL;

        m_ServerListChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto ServerListChangeExit;
        }

        hResult = e->get_Interface(&InterfaceChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange e->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

        if (m_ServerListChange_Interface != InterfaceChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange \"%s\" != InterfaceChange (\"%s\")\n", __WFILE__, __LINE__, m_ServerListChange_Interface, InterfaceChange);
            m_hrChange = E_FAIL;
            goto ServerListChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

        hResult = CompareSafeArrayToBSTR(pValueOld, m_ServerListChange_bsValueOld, m_ServerListChange_lValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::ServerListChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

        hResult = CompareSafeArrayToBSTR(pValueNew, m_ServerListChange_bsValueNew, m_ServerListChange_lValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto ServerListChangeExit;
        }

ServerListChangeExit:
        bsEnvironmentChange.Empty();

        if (NULL != pValueOld) {
            SafeArrayDestroy(pValueOld);
        }

        if (NULL != pValueNew) {
            SafeArrayDestroy(pValueNew);
        }

        if (VARIANT_TRUE == m_ServerListChange_fVeto) {
            g_pConfig->VetoServerListChange();
        }

        if (TRUE == m_ServerListChange_fThrow) {
            throw L"ServerListChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall InterfaceChange (
        /*[in]*/ struct IInterfaceChangeEventArgs * e)
    {
        // initial return code
        HRESULT         hResult = S_OK;
        CComBSTR        bsEnvironmentChange = CComBSTR(NULL);
        CComBSTR        bsServerChange = CComBSTR(NULL);
        CComBSTR        InterfaceChange = Interface_None;
        IInterfaceInfo  *pValueOld = NULL;
        CComBSTR        bsValueOld = CComBSTR(NULL);
        IInterfaceInfo  *pValueNew = NULL;
        CComBSTR        bsValueNew = CComBSTR(NULL);

        m_InterfaceChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto InterfaceChangeExit;
        }

        bsServerChange.Empty();
        hResult = e->get_Server(&bsServerChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange e->get_Server failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        if (0 != wcscmp(m_InterfaceChange_Server, bsServerChange)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange \"%s\" != bsServerChange (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceChange_Server, bsServerChange);
            m_hrChange = E_FAIL;
            goto InterfaceChangeExit;
        }

        hResult = e->get_Interface(&InterfaceChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange e->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        if (m_InterfaceChange_Interface != InterfaceChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange \"%s\" != InterfaceChange (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceChange_Interface, InterfaceChange);
            m_hrChange = E_FAIL;
            goto InterfaceChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        hResult = pValueOld->get_ToString(&bsValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange pValueOld->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        if (0 != wcscmp(m_InterfaceChange_ValueOld, bsValueOld)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange \"%s\" != bsValueOld (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceChange_ValueOld, bsValueOld);
            m_hrChange = E_FAIL;
            goto InterfaceChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        hResult = pValueNew->get_ToString(&bsValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange pValueNew->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceChangeExit;
        }

        if (0 != wcscmp(m_InterfaceChange_ValueNew, bsValueNew)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceChange \"%s\" != bsValueNew (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceChange_ValueNew, bsValueNew);
            m_hrChange = E_FAIL;
            goto InterfaceChangeExit;
        }

InterfaceChangeExit:
        bsEnvironmentChange.Empty();
        bsServerChange.Empty();
        bsValueOld.Empty();
        bsValueNew.Empty();

        if (NULL != pValueOld) {
            pValueOld->Release();
        }

        if (NULL != pValueNew) {
            pValueNew->Release();
        }

        if (VARIANT_TRUE == m_InterfaceChange_fVeto) {
            g_pConfig->VetoInterfaceChange();
        }

        if (TRUE == m_InterfaceChange_fThrow) {
            throw L"InterfaceChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall VirtualInterfaceListChange (
        /*[in]*/ struct IVirtualInterfaceListChangeEventArgs * e)
    {
        // initial return code
        HRESULT         hResult = S_OK;
        CComBSTR        bsEnvironmentChange = CComBSTR(NULL);
        long            lSiteIdChange = 0;
        SAFEARRAY       *pValueOld = NULL;
        SAFEARRAY       *pValueNew = NULL;

        m_VirtualInterfaceListChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceListChangeExit;
        }

        hResult = e->get_SiteId(&lSiteIdChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange e->get_SiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

        if (m_VirtualInterfaceListChange_lSiteId != lSiteIdChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange \"%u\" != lSiteIdChange (\"%s\")\n", __WFILE__, __LINE__, m_VirtualInterfaceListChange_lSiteId, lSiteIdChange);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceListChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

        hResult = CompareSafeArrayToVirtualInterface(pValueOld, m_VirtualInterfaceListChange_ValueOld, m_VirtualInterfaceListChange_lValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceListChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

        hResult = CompareSafeArrayToVirtualInterface(pValueNew, m_VirtualInterfaceListChange_ValueNew, m_VirtualInterfaceListChange_lValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto VirtualInterfaceListChangeExit;
        }

VirtualInterfaceListChangeExit:
        bsEnvironmentChange.Empty();

        if (NULL != pValueOld) {
            SafeArrayDestroy(pValueOld);
        }

        if (NULL != pValueNew) {
            SafeArrayDestroy(pValueNew);
        }

        if (VARIANT_TRUE == m_VirtualInterfaceListChange_fVeto) {
            g_pConfig->VetoVirtualInterfaceListChange();
        }

        if (TRUE == m_VirtualInterfaceListChange_fThrow) {
            throw L"VirtualInterfaceListChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall VirtualInterfaceChange (
        /*[in]*/ struct IVirtualInterfaceChangeEventArgs * e)
    {
        // initial return code
        HRESULT                hResult = S_OK;
        CComBSTR               bsEnvironmentChange = CComBSTR(NULL);
        long                   lSiteIdChange = 0;
        CComBSTR       VirtualInterfaceChange = VirtualInterface_None;
        IVirtualInterfaceInfo  *pValueOld = NULL;
        CComBSTR               bsValueOld = CComBSTR(NULL);
        IVirtualInterfaceInfo  *pValueNew = NULL;
        CComBSTR               bsValueNew = CComBSTR(NULL);

        m_VirtualInterfaceChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceChangeExit;
        }

        hResult = e->get_SiteId(&lSiteIdChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange e->get_SiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        if (m_VirtualInterfaceChange_lSiteId != lSiteIdChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange \"%u\" != lSiteIdChange (\"%s\")\n", __WFILE__, __LINE__, m_VirtualInterfaceChange_lSiteId, lSiteIdChange);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceChangeExit;
        }

        hResult = e->get_VirtualInterface(&VirtualInterfaceChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange e->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        if (m_VirtualInterfaceChange_VirtualInterface != VirtualInterfaceChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange \"%s\" != VirtualInterfaceChange (\"%s\")\n", __WFILE__, __LINE__, m_VirtualInterfaceChange_VirtualInterface, VirtualInterfaceChange);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        hResult = pValueOld->get_ToString(&bsValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange pValueOld->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        if (0 != wcscmp(m_VirtualInterfaceChange_ValueOld, bsValueOld)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange \"%s\" != bsValueOld (\"%s\")\n", __WFILE__, __LINE__, m_VirtualInterfaceChange_ValueOld, bsValueOld);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        hResult = pValueNew->get_ToString(&bsValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange pValueNew->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto VirtualInterfaceChangeExit;
        }

        if (0 != wcscmp(m_VirtualInterfaceChange_ValueNew, bsValueNew)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::VirtualInterfaceChange \"%s\" != bsValueNew (\"%s\")\n", __WFILE__, __LINE__, m_VirtualInterfaceChange_ValueNew, bsValueNew);
            m_hrChange = E_FAIL;
            goto VirtualInterfaceChangeExit;
        }

VirtualInterfaceChangeExit:
        bsEnvironmentChange.Empty();
        bsValueOld.Empty();
        bsValueNew.Empty();

        if (NULL != pValueOld) {
            pValueOld->Release();
        }

        if (NULL != pValueNew) {
            pValueNew->Release();
        }

        if (VARIANT_TRUE == m_VirtualInterfaceChange_fVeto) {
            g_pConfig->VetoVirtualInterfaceChange();
        }

        if (TRUE == m_VirtualInterfaceChange_fThrow) {
            throw L"VirtualInterfaceChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall SettingChange (
        /*[in]*/ struct ISettingChangeEventArgs * e)
    {
        // initial return code
        HRESULT                hResult = S_OK;
        CComBSTR               bsEnvironmentChange = CComBSTR(NULL);
        long                   lSiteIdChange = 0;
        CComBSTR               bsServerChange = CComBSTR(NULL);
        CComBSTR              ComponentChange = Component_unknown;
        CComBSTR                SettingChange = Setting_configunittest_setting_missing;
        CComBSTR               bsValueOld = CComBSTR(NULL);
        CComBSTR               bsValueNew = CComBSTR(NULL);

        m_SettingChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_SiteId(&lSiteIdChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_SiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (m_SettingChange_lSiteId != lSiteIdChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%u\" != lSiteIdChange (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_lSiteId, lSiteIdChange);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_Server(&bsServerChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_Server failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (0 != wcscmp(m_SettingChange_Server, bsServerChange)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != bsServerChange (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_Server, bsServerChange);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_Component(&ComponentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_Component failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (m_SettingChange_Component != ComponentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != ComponentChange (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_Component, ComponentChange);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_Setting(&SettingChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_Setting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (m_SettingChange_Setting != SettingChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != SettingChange (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_Setting, SettingChange);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_ValueOld(&bsValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (0 != wcscmp(m_SettingChange_ValueOld, bsValueOld)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != bsValueOld (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_ValueOld, bsValueOld);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

        hResult = e->get_ValueNew(&bsValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto SettingChangeExit;
        }

        if (0 != wcscmp(m_SettingChange_ValueNew, bsValueNew)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::SettingChange \"%s\" != bsValueNew (\"%s\")\n", __WFILE__, __LINE__, m_SettingChange_ValueNew, bsValueNew);
            m_hrChange = E_FAIL;
            goto SettingChangeExit;
        }

SettingChangeExit:
        bsEnvironmentChange.Empty();
        bsServerChange.Empty();
        bsValueOld.Empty();
        bsValueNew.Empty();

        if (VARIANT_TRUE == m_SettingChange_fVeto) {
            g_pConfig->VetoSettingChange();
        }

        if (TRUE == m_SettingChange_fThrow) {
            throw L"SettingChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall MultiSettingChange (
        /*[in]*/ struct IMultiSettingChangeEventArgs * e)
    {
        // initial return code
        HRESULT                hResult = S_OK;
        CComBSTR               bsEnvironmentChange = CComBSTR(NULL);
        long                   lSiteIdChange = 0;
        CComBSTR               bsServerChange = CComBSTR(NULL);
        CComBSTR              ComponentChange = Component_unknown;
        CComBSTR           MultiSettingChange = MultiSetting_configunittest_multisetting_missing;
        SAFEARRAY              *pValueOld = NULL;
        SAFEARRAY              *pValueNew = NULL;

        m_MultiSettingChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_SiteId(&lSiteIdChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_SiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        if (m_MultiSettingChange_lSiteId != lSiteIdChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange \"%u\" != lSiteIdChange (\"%s\")\n", __WFILE__, __LINE__, m_MultiSettingChange_lSiteId, lSiteIdChange);
            m_hrChange = E_FAIL;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_Server(&bsServerChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_Server failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        if (0 != wcscmp(m_MultiSettingChange_Server, bsServerChange)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange \"%s\" != bsServerChange (\"%s\")\n", __WFILE__, __LINE__, m_MultiSettingChange_Server, bsServerChange);
            m_hrChange = E_FAIL;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_Component(&ComponentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_Component failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        if (m_MultiSettingChange_Component != ComponentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange \"%s\" != ComponentChange (\"%s\")\n", __WFILE__, __LINE__, m_MultiSettingChange_Component, ComponentChange);
            m_hrChange = E_FAIL;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_MultiSetting(&MultiSettingChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_MultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        if (m_MultiSettingChange_MultiSetting != MultiSettingChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange \"%s\" != MultiSettingChange (\"%s\")\n", __WFILE__, __LINE__, m_MultiSettingChange_MultiSetting, MultiSettingChange);
            m_hrChange = E_FAIL;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        hResult = CompareSafeArrayToBSTR(pValueOld, m_MultiSettingChange_bsValueOld, m_MultiSettingChange_lValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::MultiSettingChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

        hResult = CompareSafeArrayToBSTR(pValueNew, m_MultiSettingChange_bsValueNew, m_MultiSettingChange_lValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, m_hrChange);
            m_hrChange = hResult;
            goto MultiSettingChangeExit;
        }

MultiSettingChangeExit:
        bsEnvironmentChange.Empty();
        bsServerChange.Empty();

        if (NULL != pValueOld) {
            SafeArrayDestroy(pValueOld);
        }

        if (NULL != pValueNew) {
            SafeArrayDestroy(pValueNew);
        }

        if (VARIANT_TRUE == m_MultiSettingChange_fVeto)
        {
            g_pConfig->VetoMultiSettingChange();
        }

        if (TRUE == m_MultiSettingChange_fThrow) {
            throw L"MultiSettingChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall InterfaceBucketChange (
        /*[in]*/ struct IInterfaceBucketChangeEventArgs * e)
    {
        // initial return code
        HRESULT                hResult = S_OK;
        CComBSTR               bsEnvironmentChange = CComBSTR(NULL);
        unsigned long          ulTitleIdChange = 0;
        unsigned long          ulBucketChange = 0;
        CComBSTR               InterfaceChange = Interface_None;
        IBucketServer          *pValueOld = NULL;
        CComBSTR               bsValueOld = CComBSTR(NULL);
        IBucketServer          *pValueNew = NULL;
        CComBSTR               bsValueNew = CComBSTR(NULL);

        m_InterfaceBucketChange_fFired = TRUE;

        // check that the event args are as expected
        bsEnvironmentChange.Empty();
        hResult = e->get_Environment(&bsEnvironmentChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (g_bsNpdbEnvironment != bsEnvironmentChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%s\" != bsEnvironmentChange (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironmentChange);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

        hResult = e->get_TitleId(&ulTitleIdChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_TitleId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (m_InterfaceBucketChange_ulTitleId != ulTitleIdChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%u\" != lTitleIdChange (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceBucketChange_ulTitleId, ulTitleIdChange);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

        hResult = e->get_Bucket(&ulBucketChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_Bucket failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (m_InterfaceBucketChange_ulBucket != ulBucketChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%u\" != lBucketChange (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceBucketChange_ulBucket, ulBucketChange);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

        hResult = e->get_Interface(&InterfaceChange);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (m_InterfaceBucketChange_Interface != InterfaceChange) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%s\" != InterfaceChange (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceBucketChange_Interface, InterfaceChange);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

        hResult = e->get_ValueOld(&pValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        hResult = pValueOld->get_ToString(&bsValueOld);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange pValueOld->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (0 != wcscmp(m_InterfaceBucketChange_ValueOld, bsValueOld)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%s\" != bsValueOld (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceBucketChange_ValueOld, bsValueOld);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

        hResult = e->get_ValueNew(&pValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange e->get_ValueOld failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        hResult = pValueNew->get_ToString(&bsValueNew);
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange pValueNew->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
            m_hrChange = hResult;
            goto InterfaceBucketChangeExit;
        }

        if (0 != wcscmp(m_InterfaceBucketChange_ValueNew, bsValueNew)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CConfigListener::InterfaceBucketChange \"%s\" != bsValueNew (\"%s\")\n", __WFILE__, __LINE__, m_InterfaceBucketChange_ValueNew, bsValueNew);
            m_hrChange = E_FAIL;
            goto InterfaceBucketChangeExit;
        }

InterfaceBucketChangeExit:
        bsEnvironmentChange.Empty();
        bsValueOld.Empty();
        bsValueNew.Empty();

        if (NULL != pValueOld) {
            pValueOld->Release();
        }

        if (NULL != pValueNew) {
            pValueNew->Release();
        }

        if (VARIANT_TRUE == m_InterfaceBucketChange_fVeto) {
            g_pConfig->VetoInterfaceBucketChange();
        }

        if (TRUE == m_InterfaceBucketChange_fThrow) {
            throw L"InterfaceBucketChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall GameConfigChange ( )
    {
        m_GameConfigChange_fFired = TRUE;

        if (TRUE == m_GameConfigChange_fThrow) {
            throw L"GameConfigChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall XdelaySettingsChange ( )
    {
        m_XdelaySettingsChange_fFired = TRUE;

        if (TRUE == m_XdelaySettingsChange_fThrow) {
            throw L"XdelaySettingsChange: Throw Exception";
        }

        return S_OK;
    }

    virtual HRESULT __stdcall XrlMappingsChange ( )
    {
        m_XrlMappingsChange_fFired = TRUE;

        if (TRUE == m_XrlMappingsChange_fThrow) {
            throw L"XrlMappingsChange: Throw Exception";
        }

        return S_OK;
    }
};

// Create config listener instance
CComObjectNoLock<CConfigListener>  *g_pConfigListener = new CComObjectNoLock<CConfigListener>();
CComQIPtr<IConfigListener>         g_pIConfigListener(g_pConfigListener);



HRESULT
RunSql(
    WCHAR  *sqlCommand
)
{
    HRESULT  hResult = S_OK;

    STARTUPINFOW  si;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);

    PROCESS_INFORMATION  pi;
    ZeroMemory(&pi, sizeof(pi));

    if (0 == CreateProcessW(L"osql.exe", sqlCommand, NULL, NULL, FALSE, NORMAL_PRIORITY_CLASS, NULL, NULL, &si, &pi)) {
        DWORD  dwErrorCode = GetLastError();
        fwprintf(stderr, L"FAIL (%s @ %u): CreateProcess failed (0x%08x)\n", __WFILE__, __LINE__, dwErrorCode);
        hResult = HRESULT_FROM_WIN32(dwErrorCode);
        goto FunctionExit;
    }

    DWORD  dwWaitResult = WaitForSingleObject(pi.hProcess, 60000);
    if (WAIT_OBJECT_0 != dwWaitResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): WaitForSingleObject failed (0x%08x)\n", __WFILE__, __LINE__, dwWaitResult);
        hResult = E_FAIL;
    }

    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);

FunctionExit:
    return hResult;
}



HRESULT
CPP_Component_Pos()
{
    HRESULT    hResult = S_OK;
    CComBSTR  ComponentVal = Component_unknown;

    hResult = g_pConfig->get_Component(&ComponentVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_Component failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (Component_unknown != ComponentVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Component_unknown != ComponentVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_ComponentName_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsComponent = CComBSTR(NULL);

    bsComponent.Empty();
    hResult = g_pConfig->get_ComponentName(&bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (g_bsComponent != bsComponent) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsComponent (\"%s\")\n", __WFILE__, __LINE__, g_bsComponent, bsComponent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    bsComponent.Empty();

    return hResult;
}

HRESULT
CPP_ComponentToString_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsComponent = CComBSTR(NULL);

    bsComponent.Empty();
    hResult = g_pConfig->ComponentToString(Component_unknown, &bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->ComponentToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"unknown", bsComponent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsComponent (\"%s\")\n", __WFILE__, __LINE__, L"unknown", bsComponent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    bsComponent.Empty();

    return hResult;
}

HRESULT
CPP_Environment_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsEnvironment = CComBSTR(NULL);

    bsEnvironment.Empty();
    hResult = g_pConfig->get_Environment(&bsEnvironment);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_Environment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (g_bsNpdbEnvironment != bsEnvironment) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsEnvironment (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbEnvironment, bsEnvironment);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    bsEnvironment.Empty();

    return hResult;
}

HRESULT
CPP_Server_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsServer = CComBSTR(NULL);

    bsServer.Empty();
    hResult = g_pConfig->get_Server(&bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_Server failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(g_bsServer, bsServer)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServer (\"%s\")\n", __WFILE__, __LINE__, g_bsServer, bsServer);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    bsServer.Empty();

    return hResult;
}

HRESULT
CPP_SiteId_Pos()
{
    HRESULT  hResult = S_OK;
    long     lSiteId = 0;

    hResult = g_pConfig->get_SiteId(&lSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_SiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (1001 != lSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSiteId (%u)\n", __WFILE__, __LINE__, 1001, lSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_GetServerListByInterface_None()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pServerList = NULL;
    long       lServerList = 0;

    hResult = g_pConfig->GetServerListByInterface(Interface_None, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pServerList, 1, &lServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lServerList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServerList (%u)\n", __WFILE__, __LINE__, -1, lServerList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pServerList) {
        SafeArrayDestroy(pServerList);
    }

    return hResult;
}

HRESULT
CPP_GetServerListByInterface_PosSingleServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pServerList = NULL;
    CComBSTR   bsServers[1] = { g_bsNpdbServer };

    hResult = g_pConfig->GetServerListByInterface(Interface_npdb, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers, 1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pServerList) {
        SafeArrayDestroy(pServerList);
    }

    bsServers[0].Empty();

    return hResult;
}

HRESULT
CPP_GetServerListByInterface_PosMultiServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pServerList = NULL;
    CComBSTR   bsServers[2] = { g_bsServer, CComBSTR(L"DUMMY_SERVER2") };

    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface1A, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pServerList) {
        SafeArrayDestroy(pServerList);
    }

    bsServers[0].Empty();
    bsServers[1].Empty();

    return hResult;
}

HRESULT
CPP_GetServerListByInterface_PosCache()
{
    HRESULT    hResult = S_OK;
    CComBSTR   bsServers_5A_5B[2] = { CComBSTR(L"DUMMY_SERVER5A"), CComBSTR(L"DUMMY_SERVER5B") };
    CComBSTR   bsServers_5A[1]    = { CComBSTR(L"DUMMY_SERVER5A") };
    SAFEARRAY  *pServerList = NULL;
    WCHAR      sqlCommand[1024];

    // register a ServerListChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_ServerListChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_ServerListChange_fThrow = FALSE;

    // set m_ServerListChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_ServerListChange_fFired = FALSE;

    // set DUMMY_SERVER5B to offline
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'offline' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the server list change handler did NOT fire
    // DUMMY_SERVER5B should NOT be in any cached server list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_ServerListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_ServerListChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read the server list for dummy_interface5
    // which will load server list information into the cache
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A, 1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // save our expectations for the handler to check
    g_pConfigListener->m_ServerListChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_ServerListChange_bsValueOld = bsServers_5A;
    g_pConfigListener->m_ServerListChange_lValueOld = 1;
    g_pConfigListener->m_ServerListChange_bsValueNew = bsServers_5A_5B;
    g_pConfigListener->m_ServerListChange_lValueNew = 2;
    g_pConfigListener->m_ServerListChange_fFired = FALSE;

    // set DUMMY_SERVER5B back to online
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'online' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_ServerListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_ServerListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): ServerListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the list for dummy_interface5
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A_5B, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // reject changes
    g_pConfigListener->m_ServerListChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_ServerListChange_fThrow = FALSE;

    // save our expectations for the handler to check
    g_pConfigListener->m_ServerListChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_ServerListChange_bsValueOld = bsServers_5A_5B;
    g_pConfigListener->m_ServerListChange_lValueOld = 2;
    g_pConfigListener->m_ServerListChange_bsValueNew = bsServers_5A;
    g_pConfigListener->m_ServerListChange_lValueNew = 1;
    g_pConfigListener->m_ServerListChange_fFired = FALSE;

    // set DUMMY_SERVER5B back to offline
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'offline' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_ServerListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_ServerListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): ServerListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the list for dummy_interface5
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A_5B, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // get the list again to read it into the cache
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A, 1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // set DUMMY_SERVER5B back to online
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'online' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the list, and confirm that it has NOT changed,
    // since no handler was registered
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A, 1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a ServerListChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_ServerListChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_ServerListChange_fThrow = TRUE;

    // save our expectations for the handler to check
    g_pConfigListener->m_ServerListChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_ServerListChange_bsValueOld = bsServers_5A_5B;
    g_pConfigListener->m_ServerListChange_lValueOld = 2;
    g_pConfigListener->m_ServerListChange_bsValueNew = bsServers_5A;
    g_pConfigListener->m_ServerListChange_lValueNew = 1;
    g_pConfigListener->m_ServerListChange_fFired = FALSE;

    // get the list again to read it into the cache
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A_5B, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    // set DUMMY_SERVER5B back to offline
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'offline' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_ServerListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_ServerListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): ServerListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // get the list, and confirm that it has NOT changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetServerListByInterface(Interface_dummy_interface5, &pServerList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetServerListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pServerList, bsServers_5A_5B, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pServerList);
    pServerList = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pServerList) {
        SafeArrayDestroy(pServerList);
    }

    bsServers_5A_5B[0].Empty();
    bsServers_5A_5B[1].Empty();
    bsServers_5A[0].Empty();

    // set DUMMY_SERVER5B back to online
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_servers set vc_server_state = 'online' where vc_server = 'DUMMY_SERVER5B' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetInterface_NegInvalidParam()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;

    hResult = g_pConfig->GetInterface(NULL, Interface_dummy_interface1A, &pInterfaceInfo);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetInterface_NegNoServer()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;

    hResult = g_pConfig->GetInterface(CComBSTR(L"not_a_valid_server"), Interface_dummy_interface1A, &pInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetInterface_NegNoInterface()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;

    hResult = g_pConfig->GetInterface(g_bsServer, Interface_xcbk, &pInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetInterface_InterfaceInfo_SqlConnectionString()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);
    WCHAR           SqlConnectionString[1024];

    // a sql connection string will be built if:
    //   protocol = sql
    //   ip address is non-null
    //   dbname is non-null
    //
    // this test:
    //   verifies a valid sqlconnection string is generated when protocol = sql, ip and dbname are non-null
    //   verifies a null sqlconnection string is generated when protocol = sql, ip is non-null, and dbname is null
    //
    // it is not possible to specify an interface where protocol = sql, dbname is non-null, and ip is null
    // as there is a restriction on t_server_nics where ip cannot be null
    //
    // it is not possible to specify an interface where protocol is null
    // as there is a restriction on t_interfaces where protocol cannot be null
    //
    // this test does not check when protocol is non-null but not sql
    // since that case is covered by other GetInterface tests below

    // 3A has uses protocol = sql, ip and dbname are non-null, so this will build a valid sqlconnectionstring
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface3A, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface3A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface3A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"sql", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"sql", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 5, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 101, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (15000 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 15000, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 101, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_101", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_101", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3A_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3A_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    swprintf(SqlConnectionString, L"Data Source=1.1.1.1;Initial Catalog=dummy_interface3A_dbname;Integrated Security=SSPI;Connect Timeout=15;Application Name=%s", g_bsComponent);
    if (0 != wcscmp(SqlConnectionString, bsSqlConnection)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSqlConnection (\"%s\")\n", __WFILE__, __LINE__, SqlConnectionString, bsSqlConnection);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // 3B has uses protocol = sql, ip is non-null, but dbname is null, so this will build null sqlconnectionstring
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface3B, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface3B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface3B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"sql", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"sql", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 5, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3B_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3B_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 101, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3B_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3B_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (15000 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 15000, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 101, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_101", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_101", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface3B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface3B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_InterfaceInfo_ToString()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        bsInterfaceInfo = CComBSTR(NULL);
    WCHAR           InterfaceInfoString[1024];

    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1A, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoString, L"{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1}");
    if (0 != wcscmp(InterfaceInfoString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetInterface_PosNotNull()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1A, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 5, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 101, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 5, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 101, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_101", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_101", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1A_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1A_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_PosNull()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2A, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsShareName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_EnvironmentTypeOverride_Pos()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    // 1B has a non-null set of override values, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1B, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1001 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1001, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1010 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1010, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1B_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1B_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (102 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 102, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1005 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1005, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (102 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 102, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_102", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_102", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 1C has a null set of overrides, so we should get the original values
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1C, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 21, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (25 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 25, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (103 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 103, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (20 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 20, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (103 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 103, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_103", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_103", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1C_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1C_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2B has a non-null set of override values, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2B, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1031 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1031, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1040 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1040, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1020 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1020, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2C has a null set of overrides, so we should get the original values, which were null
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2C, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsShareName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_EnvironmentOverride_Pos()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    // 1D has a non-null set of override values at the environment level, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1D, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1101 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1101, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1110 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1110, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1D_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1D_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (104 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 104, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_1D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_1D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_1D_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_1D_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_1D_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_1D_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1105 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1105, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (104 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 104, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_104", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_104", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_1D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_1D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_1D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_1D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 1E has a null set of overrides at both the environment type and environment level, so we should get the original values
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1E, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (41 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 41, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (45 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 45, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (105 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 105, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (30 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 30, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (105 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 105, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_105", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_105", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1E_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1E_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2D has a non-null set of override values at the environment level, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2D, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1121 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1121, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1130 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1130, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_2D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_2D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_2D_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_2D_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_2D_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_2D_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1115 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1115, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_2D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_2D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_override_2D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_override_2D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2E has a null set of overrides at both the environment and environment type level, so we should get the original values, which were null
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2E, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsShareName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_ServerOverride_Pos()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    // 1F has a non-null set of override values at the server level, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1F, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1F != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1F != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1301 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1301, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1310 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1310, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1F_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1F_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (106 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 106, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_1F_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"server_override_1F_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_1F_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"server_override_1F_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_1F_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"server_override_1F_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1205 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1205, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (106 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 106, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_106", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_106", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_1F_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"server_override_1F_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_1F_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"server_override_1F_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 1G has a null set of overrides at the environment type, environment, and server level, so we should get the original values
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface1G, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1G != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface1G != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (61 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 61, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (65 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 65, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_vsite", bsVSite)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_vsite", bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (107 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 107, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (40 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 40, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (107 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 107, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_107", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_107", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_username", bsUserName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n" L"dummy_username", bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_interface1G_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_interface1G_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2F has a non-null set of override values at the server level, so we should get the overrides
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2F, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2F != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2F != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1311 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1311, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1320 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1320, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_2F_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"server_override_2F_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_2F_dbname", bsDBName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, L"server_override_2F_dbname", bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_2F_sharename", bsShareName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, L"server_override_2F_sharename", bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1210 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1210, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_2F_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"server_override_2F_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"server_override_2F_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"server_override_2F_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // 2G has a null set of overrides at the environment type, environment, and server level, so we should get the original values, which were null
    hResult = g_pConfig->GetInterface(g_bsServer, Interface_dummy_interface2G, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2G != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface2G != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"255.255.255.0", bsIPNetMask)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, L"255.255.255.0", bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0xFFFFFF00 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0xFFFFFF00, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.0.0.1", bsIPDefaultGateway)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, L"1.0.0.1", bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01000001 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0x01000001, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsShareName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"01:01:01:01:00:00", bsMac)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, L"01:01:01:01:00:00", bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.1", bsSgIpAddressBegin)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.1", bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000001 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.0.255", bsSgIpAddressEnd)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, L"10.0.0.255", bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A0000FF != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0x0A000001, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 101, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (199 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 199, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.0.10.1", bsWiretapIpAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.0.10.1", bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A000A01 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0x0A000A01, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, -1, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetInterface_PosCache()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        bsInterfaceInfo = CComBSTR(NULL);
    WCHAR           InterfaceInfoOldString[1024];
    WCHAR           InterfaceInfoNewString[1024];
    WCHAR           sqlCommand[1024];

    // register a InterfaceChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceChange_fThrow = FALSE;

    // set m_InterfaceChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_InterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_interface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1a' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the interface change handler did NOT fire
    // dummy_interface5 should NOT be in any cached interface list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_InterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_InterfaceChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read the interface for dummy_interface5
    // which will load interface info into the cache
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoOldString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1a,dummy_interface5_info2,DUMMY_SERVER5A}");
    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // save our expectations for the handler to check
    swprintf(InterfaceInfoNewString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A}");
    g_pConfigListener->m_InterfaceChange_Server = L"DUMMY_SERVER5A";
    g_pConfigListener->m_InterfaceChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_InterfaceChange_ValueOld = InterfaceInfoOldString;
    g_pConfigListener->m_InterfaceChange_ValueNew = InterfaceInfoNewString;
    g_pConfigListener->m_InterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_interface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1b' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the interface for dummy_interface5
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoNewString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoNewString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // reject changes
    g_pConfigListener->m_InterfaceChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_InterfaceChange_fThrow = FALSE;

    // save our expectations for the handler to check
    swprintf(InterfaceInfoOldString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A}");
    swprintf(InterfaceInfoNewString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A}");
    g_pConfigListener->m_InterfaceChange_Server = L"DUMMY_SERVER5A";
    g_pConfigListener->m_InterfaceChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_InterfaceChange_ValueOld = InterfaceInfoOldString;
    g_pConfigListener->m_InterfaceChange_ValueNew = InterfaceInfoNewString;
    g_pConfigListener->m_InterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_interface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1c' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the interface for dummy_interface5
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // get the interface again to read it into the cache
    swprintf(InterfaceInfoOldString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A}");
    swprintf(InterfaceInfoNewString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}");
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // update the info1 column of dummy_interface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1d' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the interface, and confirm that it has NOT changed,
    // since no handler was registered
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a InterfaceChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceChange_fThrow = TRUE;

    // save our expectations for the handler to check
    swprintf(InterfaceInfoOldString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}");
    swprintf(InterfaceInfoNewString, L"{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1e,dummy_interface5_info2,DUMMY_SERVER5A}");
    g_pConfigListener->m_InterfaceChange_Server = L"DUMMY_SERVER5A";
    g_pConfigListener->m_InterfaceChange_Interface = Interface_dummy_interface5;
    g_pConfigListener->m_InterfaceChange_ValueOld = InterfaceInfoOldString;
    g_pConfigListener->m_InterfaceChange_ValueNew = InterfaceInfoNewString;
    g_pConfigListener->m_InterfaceChange_fFired = FALSE;

    // get the interface again to read it into the cache
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    // update the info1 column of dummy_interface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1e' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // get the interface, and confirm that it has NOT changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetInterface(CComBSTR(L"DUMMY_SERVER5A"), Interface_dummy_interface5, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsInterfaceInfo.Empty();
    hResult = pInterfaceInfo->get_ToString(&bsInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(InterfaceInfoOldString, bsInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoOldString, bsInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pInterfaceInfo->Release();
    pInterfaceInfo = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsInterfaceInfo.Empty();

    // set dummy_interface5 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interfaces set vc_info1 = 'dummy_interface5_info1' where vc_interface = 'dummy_interface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetSingleInterface_NegNoInterface()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;

    hResult = g_pConfig->GetSingleInterface(Interface_None, &pInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSingleInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetSingleInterface_NegMultiInterface()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;

    hResult = g_pConfig->GetSingleInterface(Interface_dummy_interface1A, &pInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSingleInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetSingleInterface_Pos()
{
    HRESULT         hResult = S_OK;
    IInterfaceInfo  *pInterfaceInfo = NULL;
    CComBSTR        InterfaceVal = Interface_None;
    CComBSTR        bsProtocol = CComBSTR(NULL);
    CComBSTR        bsIPAddress = CComBSTR(NULL);
    unsigned long   ulIPAddress = 0;
    CComBSTR        bsIPNetMask = CComBSTR(NULL);
    unsigned long   ulIPNetMask = 0;
    CComBSTR        bsIPDefaultGateway = CComBSTR(NULL);
    unsigned long   ulIPDefaultGateway = 0;
    long            lPort = 0;
    long            lPortEnd = 0;
    CComBSTR        bsVSite = CComBSTR(NULL);
    long            lVSiteId = 0;
    CComBSTR        bsVDir = CComBSTR(NULL);
    CComBSTR        bsDBName = CComBSTR(NULL);
    CComBSTR        bsShareName = CComBSTR(NULL);
    long            lTimeout = 0;
    long            lServiceId = 0;
    CComBSTR        bsServiceName = CComBSTR(NULL);
    CComBSTR        bsMac = CComBSTR(NULL);
    CComBSTR        bsSgIpAddressBegin = CComBSTR(NULL);
    unsigned long   ulSgIpAddressBegin = 0;
    CComBSTR        bsSgIpAddressEnd = CComBSTR(NULL);
    unsigned long   ulSgIpAddressEnd = 0;
    long            lSgPortBegin = 0;
    long            lSgPortEnd = 0;
    VARIANT_BOOL    fNeedSGInfo = 0;
    CComBSTR        bsWiretapIpAddress = CComBSTR(NULL);
    unsigned long   ulWiretapIpAddress = 0;
    VARIANT_BOOL    fNicDisabled = 0;
    CComBSTR        bsUserName = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsSqlConnection = CComBSTR(NULL);

    hResult = g_pConfig->GetSingleInterface(Interface_dummy_interface6, &pInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface6 != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_interface6 != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.6.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.6.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01060101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01060101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPNetMask.Empty();
    hResult = pInterfaceInfo->get_IPNetMaskString(&bsIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMask failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPNetMask (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPNetMaskDword(&ulIPNetMask);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPNetMaskDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPNetMask) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPNetMask (%u)\n", __WFILE__, __LINE__, 0, ulIPNetMask);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPDefaultGateway.Empty();
    hResult = pInterfaceInfo->get_IPDefaultGatewayString(&bsIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPDefaultGateway (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_IPDefaultGatewayDword(&ulIPDefaultGateway);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_IPDefaultGatewayDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPDefaultGateway) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPDefaultGateway (%u)\n", __WFILE__, __LINE__, 0, ulIPDefaultGateway);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (81 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 81, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVSite.Empty();
    hResult = pInterfaceInfo->get_VSite(&bsVSite);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVSite) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVSite (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVSite);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_VSiteId(&lVSiteId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VSiteId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lVSiteId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVSiteId (%u)\n", __WFILE__, __LINE__, 0, lVSiteId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsDBName.Empty();
    hResult = pInterfaceInfo->get_DBName(&bsDBName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_DBName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsDBName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsDBName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsDBName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsShareName.Empty();
    hResult = pInterfaceInfo->get_Sharename(&bsShareName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ShareName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsShareName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsShareName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsShareName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsMac.Empty();
    hResult = pInterfaceInfo->get_Mac(&bsMac);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Mac failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsMac) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsMac (\"%s\")\n", __WFILE__, __LINE__, NULL, bsMac);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressBegin.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressBeginString(&bsSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBeginString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressBegin (\"%s\")\n", __WFILE__, __LINE__, NULL, bsSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressBeginDword(&ulSgIpAddressBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulSgIpAddressBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressBegin (%u)\n", __WFILE__, __LINE__, 0, ulSgIpAddressBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSgIpAddressEnd.Empty();
    hResult = pInterfaceInfo->get_SgIpAddressEndString(&bsSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEndString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsSgIpAddressEnd (\"%s\")\n", __WFILE__, __LINE__, NULL, bsSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgIpAddressEndDword(&ulSgIpAddressEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgIpAddressEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulSgIpAddressEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulSgIpAddressEnd (%u)\n", __WFILE__, __LINE__, 0, ulSgIpAddressEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortBegin(&lSgPortBegin);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortBegin failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lSgPortBegin) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortBegin (%u)\n", __WFILE__, __LINE__, 0, lSgPortBegin);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_SgPortEnd(&lSgPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SgPortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lSgPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lSgPortEnd (%u)\n", __WFILE__, __LINE__, 0, lSgPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWiretapIpAddress.Empty();
    hResult = pInterfaceInfo->get_WiretapIpAddressString(&bsWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressString failed (\"%s\")\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWiretapIpAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_WiretapIpAddressDword(&ulWiretapIpAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_WiretapIpAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulWiretapIpAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulWiretapIpAddress (%u)\n", __WFILE__, __LINE__, 0, ulWiretapIpAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInterfaceInfo->get_NicDisabled(&fNicDisabled);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_NicDisabled failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNicDisabled) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNicDisabled (%u)\n", __WFILE__, __LINE__, 0, fNicDisabled);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsUserName.Empty();
    hResult = pInterfaceInfo->get_Username(&bsUserName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_UserName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsUserName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUserName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUserName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsPassword.Empty();
    hResult = pInterfaceInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsSqlConnection.Empty();
    hResult = pInterfaceInfo->get_SqlConnectionString(&bsSqlConnection);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfo->get_SqlConnectionString did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceInfo) {
        pInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsIPNetMask.Empty();
    bsIPDefaultGateway.Empty();
    bsVSite.Empty();
    bsVDir.Empty();
    bsDBName.Empty();
    bsServiceName.Empty();
    bsMac.Empty();
    bsSgIpAddressBegin.Empty();
    bsSgIpAddressEnd.Empty();
    bsWiretapIpAddress.Empty();
    bsUserName.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();
    bsSqlConnection.Empty();

    return hResult;
}

HRESULT
CPP_GetVirtualInterfaceListBySite_PosNoInterfaces()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pVirtualInterfaceList = NULL;
    long       lVirtualInterfaceList = 0;

    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(0, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListBySite_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pVirtualInterfaceList, 1, &lVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lVirtualInterfaceList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVirtualInterfaceList (%u)\n", __WFILE__, __LINE__, -1, lVirtualInterfaceList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceList) {
        SafeArrayDestroy(pVirtualInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterfaceListBySite_PosMultiInterfaces()
{
    HRESULT           hResult = S_OK;
    SAFEARRAY         *pVirtualInterfaceList = NULL;
    CComBSTR  pVirtualInterfaces[] = { VirtualInterface_dummy_vinterface1A,
                                               VirtualInterface_dummy_vinterface1B,
                                               VirtualInterface_dummy_vinterface1C,
                                               VirtualInterface_dummy_vinterface1D,
                                               VirtualInterface_dummy_vinterface1E,
                                               VirtualInterface_dummy_vinterface2A,
                                               VirtualInterface_dummy_vinterface2B,
                                               VirtualInterface_dummy_vinterface2C,
                                               VirtualInterface_dummy_vinterface2D,
                                               VirtualInterface_dummy_vinterface2E,
                                               VirtualInterface_dummy_vinterface5 };

    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListBySite_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterfaces, sizeof(pVirtualInterfaces) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceList) {
        SafeArrayDestroy(pVirtualInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterfaceList_PosCache()
{
    HRESULT           hResult = S_OK;
    CComBSTR  pVirtualInterface_w_5[] = {  VirtualInterface_dummy_vinterface1A,
                                                   VirtualInterface_dummy_vinterface1B,
                                                   VirtualInterface_dummy_vinterface1C,
                                                   VirtualInterface_dummy_vinterface1D,
                                                   VirtualInterface_dummy_vinterface1E,
                                                   VirtualInterface_dummy_vinterface2A,
                                                   VirtualInterface_dummy_vinterface2B,
                                                   VirtualInterface_dummy_vinterface2C,
                                                   VirtualInterface_dummy_vinterface2D,
                                                   VirtualInterface_dummy_vinterface2E,
                                                   VirtualInterface_dummy_vinterface5  };
    CComBSTR  pVirtualInterface_wo_5[] = { VirtualInterface_dummy_vinterface1A,
                                                   VirtualInterface_dummy_vinterface1B,
                                                   VirtualInterface_dummy_vinterface1C,
                                                   VirtualInterface_dummy_vinterface1D,
                                                   VirtualInterface_dummy_vinterface1E,
                                                   VirtualInterface_dummy_vinterface2A,
                                                   VirtualInterface_dummy_vinterface2B,
                                                   VirtualInterface_dummy_vinterface2C,
                                                   VirtualInterface_dummy_vinterface2D,
                                                   VirtualInterface_dummy_vinterface2E };
    SAFEARRAY          *pVirtualInterfaceList = NULL;
    WCHAR              sqlCommand[1024];

    // register a VirtualInterfaceListChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_VirtualInterfaceListChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_VirtualInterfaceListChange_fThrow = FALSE;

    // set m_VirtualInterfaceListChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_VirtualInterfaceListChange_fFired = FALSE;

    // remove virtual interface 5 from the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_site_virtual_interface_ips where vc_virtual_interface = 'dummy_vinterface5' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the virtual interface change handler did NOT fire
    // DUMMY_SERVER5B should NOT be in any cached server list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_VirtualInterfaceListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_VirtualInterfaceListChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read the virtual interface list for site 1001
    // which will load virtual interface list into the cache
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_wo_5, sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // save our expectations for the handler to check
    g_pConfigListener->m_VirtualInterfaceListChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceListChange_ValueOld = pVirtualInterface_wo_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueOld = sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_ValueNew = pVirtualInterface_w_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueNew = sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_fFired = FALSE;

    // add virtual interface 5 back to the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) values ('%s', 1001, 'dummy_vinterface5', '1.5.1.1')\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the virtual interface list for site 1001
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_w_5, sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // reject changes
    g_pConfigListener->m_VirtualInterfaceListChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_VirtualInterfaceListChange_fThrow = FALSE;

    // save our expectations for the handler to check
    g_pConfigListener->m_VirtualInterfaceListChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceListChange_ValueOld = pVirtualInterface_w_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueOld = sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_ValueNew = pVirtualInterface_wo_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueNew = sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_fFired = FALSE;

    // remove virtual interface 5 from the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_site_virtual_interface_ips where vc_virtual_interface = 'dummy_vinterface5' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the virtual interface list for site 1001
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_w_5, sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // read the virtual interface list for site 1001
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_wo_5, sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // add virtual interface 5 back to the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) values ('%s', 1001, 'dummy_vinterface5', '1.5.1.1')\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the list, and confirm that it has NOT changed,
    // since no handler was registered
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_wo_5, sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a VirtualInterfaceListChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_VirtualInterfaceListChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_VirtualInterfaceListChange_fThrow = TRUE;

    // save our expectations for the handler to check
    g_pConfigListener->m_VirtualInterfaceListChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceListChange_ValueOld = pVirtualInterface_w_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueOld = sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_ValueNew = pVirtualInterface_wo_5;
    g_pConfigListener->m_VirtualInterfaceListChange_lValueNew = sizeof(pVirtualInterface_wo_5) / sizeof(CComBSTR);
    g_pConfigListener->m_VirtualInterfaceListChange_fFired = FALSE;

    // get the list again to read it into the cache
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_w_5, sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    // remove virtual interface 5 from the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_site_virtual_interface_ips where vc_virtual_interface = 'dummy_vinterface5' and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceListChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceListChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceListChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // get the list, and confirm that it has NOT changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetVirtualInterfaceListBySite_2(1001, &pVirtualInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceListByInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToVirtualInterface(pVirtualInterfaceList, pVirtualInterface_w_5, sizeof(pVirtualInterface_w_5) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pVirtualInterfaceList);
    pVirtualInterfaceList = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pVirtualInterfaceList) {
        SafeArrayDestroy(pVirtualInterfaceList);
    }

    // add virtual interface 5 back to the site
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) values ('%s', 1001, 'dummy_vinterface5', '1.5.1.1')\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_NegNoInterface()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;

    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_None, 1, &pVirtualInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_NegNoSite()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;

    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1A, 1000, &pVirtualInterfaceInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_VirtualInterfaceInfo_ToString()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR               bsVirtualInterfaceInfo = CComBSTR(NULL);
    WCHAR                  VirtualInterfaceInfoString[1024];

    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1A, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(VirtualInterfaceInfoString, L"{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2}");
    if (0 != wcscmp(VirtualInterfaceInfoString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_PosNotNull()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR       VirtualInterfaceVal = VirtualInterface_None;
    CComBSTR               InterfaceVal = Interface_None;
    CComBSTR               bsProtocol = CComBSTR(NULL);
    CComBSTR               bsIPAddress = CComBSTR(NULL);
    unsigned long          ulIPAddress = 0;
    long                   lPort = 0;
    long                   lPortEnd = 0;
    CComBSTR               bsVDir = CComBSTR(NULL);
    long                   lTimeout = 0;
    CComBSTR               bsWebstoreApp = CComBSTR(NULL);
    long                   lServiceId = 0;
    CComBSTR               bsServiceName = CComBSTR(NULL);
    VARIANT_BOOL           fNeedSGInfo = 0;
    long                   lInternetPort = 0;
    long                   lInternetPortEnd = 0;
    CComBSTR               bsInfo1 = CComBSTR(NULL);
    CComBSTR               bsInfo2 = CComBSTR(NULL);

    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1A, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1A != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1A != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (6 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 6, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 10, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 5, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 101, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_101", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_101", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsVDir.Empty();
    bsWebstoreApp.Empty();
    bsServiceName.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_PosNull()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR       VirtualInterfaceVal = VirtualInterface_None;
    CComBSTR               InterfaceVal = Interface_None;
    CComBSTR               bsProtocol = CComBSTR(NULL);
    CComBSTR               bsIPAddress = CComBSTR(NULL);
    unsigned long          ulIPAddress = 0;
    long                   lPort = 0;
    long                   lPortEnd = 0;
    CComBSTR               bsVDir = CComBSTR(NULL);
    long                   lTimeout = 0;
    CComBSTR               bsWebstoreApp = CComBSTR(NULL);
    long                   lServiceId = 0;
    CComBSTR               bsServiceName = CComBSTR(NULL);
    VARIANT_BOOL           fNeedSGInfo = 0;
    long                   lInternetPort = 0;
    long                   lInternetPortEnd = 0;
    CComBSTR               bsInfo1 = CComBSTR(NULL);
    CComBSTR               bsInfo2 = CComBSTR(NULL);

    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface2A, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2A != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2A != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsVDir.Empty();
    bsWebstoreApp.Empty();
    bsServiceName.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_PosEnvironmentTypeOverride()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR       VirtualInterfaceVal = VirtualInterface_None;
    CComBSTR               InterfaceVal = Interface_None;
    CComBSTR               bsProtocol = CComBSTR(NULL);
    CComBSTR               bsIPAddress = CComBSTR(NULL);
    unsigned long          ulIPAddress = 0;
    long                   lPort = 0;
    long                   lPortEnd = 0;
    CComBSTR               bsVDir = CComBSTR(NULL);
    long                   lTimeout = 0;
    CComBSTR               bsWebstoreApp = CComBSTR(NULL);
    long                   lServiceId = 0;
    CComBSTR               bsServiceName = CComBSTR(NULL);
    VARIANT_BOOL           fNeedSGInfo = 0;
    long                   lInternetPort = 0;
    long                   lInternetPortEnd = 0;
    CComBSTR               bsInfo1 = CComBSTR(NULL);
    CComBSTR               bsInfo2 = CComBSTR(NULL);

    // dummy_vinterface1B - override with non-NULL at environment type level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1B, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1B != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1B != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.2", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.2", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010102 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010102, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1401 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1401, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1410 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1410, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1305 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1305, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (102 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 102, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_102", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_102", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 11006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 11010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1C - override with NULL at environment type level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1C, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1C != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1C != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.3", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.3", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010103 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010103, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (26 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 26, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (30 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 30, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (15 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 15, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (103 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 103, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_103", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_103", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10026 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10026, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10030 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10030, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2B - override with non-NULL at environment type level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface2B, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2B != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2B != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1421 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1421, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1430 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1430, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1315 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1315, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11026 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 11026, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11030 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 11030, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2C - override with NULL at environment type level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface2C, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2C != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2C != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsVDir.Empty();
    bsWebstoreApp.Empty();
    bsServiceName.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_PosSiteOverride()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR       VirtualInterfaceVal = VirtualInterface_None;
    CComBSTR               InterfaceVal = Interface_None;
    CComBSTR               bsProtocol = CComBSTR(NULL);
    CComBSTR               bsIPAddress = CComBSTR(NULL);
    unsigned long          ulIPAddress = 0;
    long                   lPort = 0;
    long                   lPortEnd = 0;
    CComBSTR               bsVDir = CComBSTR(NULL);
    long                   lTimeout = 0;
    CComBSTR               bsWebstoreApp = CComBSTR(NULL);
    long                   lServiceId = 0;
    CComBSTR               bsServiceName = CComBSTR(NULL);
    VARIANT_BOOL           fNeedSGInfo = 0;
    long                   lInternetPort = 0;
    long                   lInternetPortEnd = 0;
    CComBSTR               bsInfo1 = CComBSTR(NULL);
    CComBSTR               bsInfo2 = CComBSTR(NULL);

    // dummy_vinterface1D - override with non-NULL at environment type and site level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1D, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1D != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1D != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.4", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.4", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010104 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010104, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1501 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1501, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1510 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1510, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1405 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1405, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (104 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 104, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_104", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_104", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 21006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 21010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1E - override with NULL at environment type and site level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface1E, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1E != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1E != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.5", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.5", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010105 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010105, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (46 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 46, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (50 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 50, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (25 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 25, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (105 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 105, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_105", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_105", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10046 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10046, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10050 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10050, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2D - override with non-NULL at environment type and site level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface2D, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2D != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2D != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1511 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1511, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1520 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1520, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1410 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1410, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21016 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 21016, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21020 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 21020, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2E - override with NULL at environment type and site level
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface2E, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2E != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2E != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsVDir.Empty();
    bsWebstoreApp.Empty();
    bsServiceName.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetVirtualInterface_PosCache()
{
    HRESULT                hResult = S_OK;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    CComBSTR               bsVirtualInterfaceInfo = CComBSTR(NULL);
    WCHAR                  VirtualInterfaceInfoOldString[1024];
    WCHAR                  VirtualInterfaceInfoNewString[1024];
    WCHAR                  sqlCommand[1024];

    // register a VirtualInterfaceChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_VirtualInterfaceChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_VirtualInterfaceChange_fThrow = FALSE;

    // set m_VirtualInterfaceChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_VirtualInterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_vinterface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1a' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the virtual interface change handler did NOT fire
    // dummy_vinterface5 should NOT be in the cache
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_VirtualInterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_VirtualInterfaceChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read the virtual interface for dummy_vinterface5
    // which will load virtual interface info into the cache
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(VirtualInterfaceInfoOldString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1a,dummy_vinterface5_info2}");
    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // save our expectations for the handler to check
    swprintf(VirtualInterfaceInfoNewString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2}");
    g_pConfigListener->m_VirtualInterfaceChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceChange_VirtualInterface = VirtualInterface_dummy_vinterface5;
    g_pConfigListener->m_VirtualInterfaceChange_ValueOld = VirtualInterfaceInfoOldString;
    g_pConfigListener->m_VirtualInterfaceChange_ValueNew = VirtualInterfaceInfoNewString;
    g_pConfigListener->m_VirtualInterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_vinterface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1b' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the virtual interface for dummy_vinterface5
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoNewString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoNewString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // reject changes
    g_pConfigListener->m_VirtualInterfaceChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_VirtualInterfaceChange_fThrow = FALSE;

    // save our expectations for the handler to check
    swprintf(VirtualInterfaceInfoOldString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2}");
    swprintf(VirtualInterfaceInfoNewString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2}");
    g_pConfigListener->m_VirtualInterfaceChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceChange_VirtualInterface = VirtualInterface_dummy_vinterface5;
    g_pConfigListener->m_VirtualInterfaceChange_ValueOld = VirtualInterfaceInfoOldString;
    g_pConfigListener->m_VirtualInterfaceChange_ValueNew = VirtualInterfaceInfoNewString;
    g_pConfigListener->m_VirtualInterfaceChange_fFired = FALSE;

    // update the info1 column of dummy_vinterface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1c' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read the virtual interface for dummy_vinterface5
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // get the virtual interface again to read it into the cache
    swprintf(VirtualInterfaceInfoOldString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2}");
    swprintf(VirtualInterfaceInfoNewString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2}");
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // update the info1 column of dummy_vinterface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1d' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the virtual interface, and confirm that it has NOT changed,
    // since no handler was registered
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a VirtualInterfaceChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_VirtualInterfaceChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_VirtualInterfaceChange_fThrow = TRUE;

    // save our expectations for the handler to check
    swprintf(VirtualInterfaceInfoOldString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2}");
    swprintf(VirtualInterfaceInfoNewString, L"{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1e,dummy_vinterface5_info2}");
    g_pConfigListener->m_VirtualInterfaceChange_lSiteId = 1001;
    g_pConfigListener->m_VirtualInterfaceChange_VirtualInterface = VirtualInterface_dummy_vinterface5;
    g_pConfigListener->m_VirtualInterfaceChange_ValueOld = VirtualInterfaceInfoOldString;
    g_pConfigListener->m_VirtualInterfaceChange_ValueNew = VirtualInterfaceInfoNewString;
    g_pConfigListener->m_VirtualInterfaceChange_fFired = FALSE;

    // get the virtual interface again to read it into the cache
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // update the info1 column of dummy_vinterface5
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1e' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_VirtualInterfaceChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_VirtualInterfaceChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterfaceChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // get the virtual interface, and confirm that it has NOT changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetVirtualInterface(VirtualInterface_dummy_vinterface5, 1001, &pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetVirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsVirtualInterfaceInfo.Empty();
    hResult = pVirtualInterfaceInfo->get_ToString(&bsVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVirtualInterfaceInfo (\"%s\")\n", __WFILE__, __LINE__, VirtualInterfaceInfoOldString, bsVirtualInterfaceInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsVirtualInterfaceInfo.Empty();

    // set dummy_vinterface5 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_virtual_interfaces set vc_info1 = 'dummy_vinterface5_info1' where vc_virtual_interface = 'dummy_vinterface5'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetVirtualInterfaceInfoBySite_PosNoInterfaces()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pVirtualInterfaceInfoList = NULL;
    long       lVirtualInterfaceInfoList = 0;

    hResult = g_pConfig->GetVirtualInterfaceInfoBySite_2(0, &pVirtualInterfaceInfoList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceInfoBySite_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pVirtualInterfaceInfoList, 1, &lVirtualInterfaceInfoList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lVirtualInterfaceInfoList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVirtualInterfaceInfoList (%u)\n", __WFILE__, __LINE__, -1, lVirtualInterfaceInfoList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfoList) {
        SafeArrayDestroy(pVirtualInterfaceInfoList);
    }

    return hResult;
}

HRESULT
CPP_GetVirtualInterfaceInfoBySite_PosMultiInterfaces()
{
    HRESULT                hResult = S_OK;
    SAFEARRAY              *pVirtualInterfaceInfoList = NULL;
    long                   lVirtualInterfaceInfoList = 0;
    IVirtualInterfaceInfo  *pVirtualInterfaceInfo = NULL;
    long                   lVirtualInterfaceInfoListIndex = 0;
    CComBSTR       VirtualInterfaceVal = VirtualInterface_None;
    CComBSTR               InterfaceVal = Interface_None;
    CComBSTR               bsProtocol = CComBSTR(NULL);
    CComBSTR               bsIPAddress = CComBSTR(NULL);
    unsigned long          ulIPAddress = 0;
    long                   lPort = 0;
    long                   lPortEnd = 0;
    CComBSTR               bsVDir = CComBSTR(NULL);
    long                   lTimeout = 0;
    CComBSTR               bsWebstoreApp = CComBSTR(NULL);
    long                   lServiceId = 0;
    CComBSTR               bsServiceName = CComBSTR(NULL);
    VARIANT_BOOL           fNeedSGInfo = 0;
    long                   lInternetPort = 0;
    long                   lInternetPortEnd = 0;
    CComBSTR               bsInfo1 = CComBSTR(NULL);
    CComBSTR               bsInfo2 = CComBSTR(NULL);

    hResult = g_pConfig->GetVirtualInterfaceInfoBySite_2(1001, &pVirtualInterfaceInfoList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetVirtualInterfaceInfoBySite_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pVirtualInterfaceInfoList, 1, &lVirtualInterfaceInfoList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (10 != lVirtualInterfaceInfoList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lVirtualInterfaceInfoList (%u)\n", __WFILE__, __LINE__, -1, lVirtualInterfaceInfoList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1A - no override
    lVirtualInterfaceInfoListIndex = 0;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1A != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1A != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (6 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 6, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 10, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (5 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 5, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (101 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 101, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_101", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_101", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1A_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1A_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pVirtualInterfaceInfo->Release();
    pVirtualInterfaceInfo = NULL;

    // dummy_vinterface1B - override with non-NULL at environment type level
    lVirtualInterfaceInfoListIndex = 1;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1B != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1B != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.2", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.2", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010102 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010102, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1401 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1401, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1410 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1410, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1305 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1305, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (102 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 102, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_102", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_102", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 11006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 11010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_1B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_1B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1C - override with NULL at environment type level
    lVirtualInterfaceInfoListIndex = 2;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1C != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1C != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.3", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.3", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010103 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010103, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (26 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 26, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (30 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 30, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (15 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 15, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (103 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 103, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_103", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_103", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10026 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10026, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10030 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10030, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1C_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1C_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1D - override with non-NULL at environment type and site level
    lVirtualInterfaceInfoListIndex = 3;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1D != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1D != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.4", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.4", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010104 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010104, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1501 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1501, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1510 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1510, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1405 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1405, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (104 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 104, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_104", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_104", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21006 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 21006, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21010 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 21010, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_1D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_1D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface1E - override with NULL at environment type and site level
    lVirtualInterfaceInfoListIndex = 4;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface1E != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface1E != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface1E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface1E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"10.1.1.5", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"10.1.1.5", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x0A010105 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x0A010105, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (46 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 46, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (50 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 50, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (25 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 25, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (105 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 105, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_105", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_105", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10046 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10046, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10050 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10050, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface1E_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface1E_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2A
    lVirtualInterfaceInfoListIndex = 5;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2A != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2A != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2A != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2A != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2B - override with non-NULL at environment type level
    lVirtualInterfaceInfoListIndex = 6;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2B != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2B != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2B != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2B != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1421 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1421, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1430 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1430, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1315 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1315, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11026 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 11026, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (11030 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 11030, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"environment_type_override_2B_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"environment_type_override_2B_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2C - override with NULL at environment type level
    lVirtualInterfaceInfoListIndex = 7;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2C != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2C != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2C != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2C != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2D - override with non-NULL at environment type and site level
    lVirtualInterfaceInfoListIndex = 8;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2D != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2D != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2D != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2D != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1511 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 1511, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1520 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 1520, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (1410 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 1410, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21016 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 21016, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (21020 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 21020, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site_override_2D_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"site_override_2D_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface2E - override with NULL at environment type and site level
    lVirtualInterfaceInfoListIndex = 9;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface2E != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface2E != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface2E != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface2E != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, NULL, bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 0, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 0, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsVDir) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, NULL, bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 0, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsWebstoreApp) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, NULL, bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 0, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsServiceName) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, NULL, bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, 0, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 0, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 0, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // dummy_vinterface5
    lVirtualInterfaceInfoListIndex = 10;
    pVirtualInterfaceInfo = NULL;
    hResult = SafeArrayGetElement(pVirtualInterfaceInfoList, &lVirtualInterfaceInfoListIndex, (void*)&pVirtualInterfaceInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetElement failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_VirtualInterface(&VirtualInterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VirtualInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (VirtualInterface_dummy_vinterface5 != VirtualInterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): VirtualInterface_dummy_vinterface5 != VirtualInterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Interface(&InterfaceVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Interface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (Interface_dummy_interface5 != InterfaceVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): Interface_dummy_vinterface5 != InterfaceVal\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsProtocol.Empty();
    hResult = pVirtualInterfaceInfo->get_Protocol(&bsProtocol);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Protocol failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"http", bsProtocol)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsProtocol (\"%s\")\n", __WFILE__, __LINE__, L"http", bsProtocol);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsIPAddress.Empty();
    hResult = pVirtualInterfaceInfo->get_IPAddressString(&bsIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"1.5.1.1", bsIPAddress)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsIPAddress (\"%s\")\n", __WFILE__, __LINE__, L"1.5.1.1", bsIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_IPAddressDword(&ulIPAddress);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_IPAddressDword failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0x01050101 != ulIPAddress) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lIPAddress (%u)\n", __WFILE__, __LINE__, 0x01050101, ulIPAddress);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Port(&lPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Port failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (76 != lPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPort (%u)\n", __WFILE__, __LINE__, 76, lPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_PortEnd(&lPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (80 != lPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lPortEnd (%u)\n", __WFILE__, __LINE__, 80, lPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsVDir.Empty();
    hResult = pVirtualInterfaceInfo->get_VDir(&bsVDir);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_VDir failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface5_vdir", bsVDir)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsVDir (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface5_vdir", bsVDir);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_Timeout(&lTimeout);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Timeout failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (40 != lTimeout) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lTimeout (%u)\n", __WFILE__, __LINE__, 40, lTimeout);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsWebstoreApp.Empty();
    hResult = pVirtualInterfaceInfo->get_WebstoreApp(&bsWebstoreApp);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_WebstoreApp failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface5_webstore_app", bsWebstoreApp)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsWebstoreApp(\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface5_webstore_app", bsWebstoreApp);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_ServiceId(&lServiceId);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceId failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (108 != lServiceId) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lServiceId (%u)\n", __WFILE__, __LINE__, 108, lServiceId);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsServiceName.Empty();
    hResult = pVirtualInterfaceInfo->get_ServiceName(&bsServiceName);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_ServiceName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"SERVICE_108", bsServiceName)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServiceName (\"%s\")\n", __WFILE__, __LINE__, L"SERVICE_108", bsServiceName);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_NeedSGInfo(&fNeedSGInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_NeedSGInfo failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (-1 != fNeedSGInfo) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != fNeedSGInfo (%u)\n", __WFILE__, __LINE__, -1, fNeedSGInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPort(&lInternetPort);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_InternetPort failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10076 != lInternetPort) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPort (%u)\n", __WFILE__, __LINE__, 10076, lInternetPort);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pVirtualInterfaceInfo->get_InternetPortEnd(&lInternetPortEnd);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_PortInternetEnd failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (10080 != lInternetPortEnd) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInternetPortEnd (%u)\n", __WFILE__, __LINE__, 10080, lInternetPortEnd);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo1.Empty();
    hResult = pVirtualInterfaceInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface5_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface5_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsInfo2.Empty();
    hResult = pVirtualInterfaceInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pVirtualInterfaceInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"dummy_vinterface5_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_vinterface5_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pVirtualInterfaceInfoList) {
        SafeArrayDestroy(pVirtualInterfaceInfoList);
    }

    if (NULL != pVirtualInterfaceInfo) {
        pVirtualInterfaceInfo->Release();
    }

    bsProtocol.Empty();
    bsIPAddress.Empty();
    bsVDir.Empty();
    bsWebstoreApp.Empty();
    bsServiceName.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetSetting_NegNoSetting()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);

    hResult = g_pConfig->GetSetting(Setting_configunittest_setting_missing, &bsValue);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    bsValue.Empty();

    return hResult;
}

HRESULT
CPP_GetSetting_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);

    // configunittest_setting1 will match an override at site and server
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1001, server dummy_server1, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1001, server dummy_server1, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    // check 1 1 1 (site, server, component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1001, g_bsServer, Component_dummy_component1, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1001, server dummy_server1, component dummy_component1", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1001, server dummy_server1, component dummy_component1", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 1 1 0 (site, server, all component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1001, g_bsServer, Component_unknown, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1001, server dummy_server1, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1001, server dummy_server1, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 1 0 1 (site, all server, component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1001, CComBSTR(L"not_a_valid_server"), Component_dummy_component1, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1001, ALL servers, component dummy_component1", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1001, ALL servers, component dummy_component1", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 1 0 0 (site, all server, all component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1001, CComBSTR(L"not_a_valid_server"), Component_unknown, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1001, ALL servers, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1001, ALL servers, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 0 1 1 (all site, server, component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_dummy_component1, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, server dummy_server1, component dummy_component1", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, server dummy_server1, component dummy_component1", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 0 1 0 (all site, server, all component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_unknown, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, server dummy_server1, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, server dummy_server1, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 0 0 1 (all site, all server, component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"not_a_valid_server"), Component_dummy_component1, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, ALL servers, component dummy_component1", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, ALL servers, component dummy_component1", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // check 0 0 0 (all site, all server, all component)
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"not_a_valid_server"), Component_unknown, Setting_configunittest_setting1, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, ALL servers, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, ALL servers, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting2 will match an override at environment type
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting2, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting2_environment_type_override_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting2_environment_type_override_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(CComBSTR(L"not_a_valid_environment"), 1, g_bsServer, Component_unknown, Setting_configunittest_setting2, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_ failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting2_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting2_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting3 has no overrides
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting3, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting3_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting3_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // configunittest_setting4 has no overrides
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting4_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // configunittest_setting5 has no overrides
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting5, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting5_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting5_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // configunittest_setting11 has an override for site = 1011, server = DUMMY_SERVER11, component = dummy_component11
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting11, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting11_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting11_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component11, Setting_configunittest_setting11, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting11_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting11_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1011, CComBSTR(L"dummy_server11"), Component_dummy_component11, Setting_configunittest_setting11, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1011, server dummy_server11, component dummy_component11", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1011, server dummy_server11, component dummy_component11", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting12 has an override for site = -1, server = DUMMY_SERVER12, component = dummy_component12
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting12, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting12_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting12_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component12, Setting_configunittest_setting12, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting12_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting12_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"dummy_server12"), Component_dummy_component12, Setting_configunittest_setting12, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, server dummy_server12, component dummy_component12", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, server dummy_server12, component dummy_component12", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting13 has an override for site = 1013, server = ALL, component = dummy_component13
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting13, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting13_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting13_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component13, Setting_configunittest_setting13, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting13_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting13_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1013, g_bsServer, Component_dummy_component13, Setting_configunittest_setting13, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1013, ALL servers, component dummy_component13", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1013, ALL servers, component dummy_component13", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting14 has an override for site = 1014, server = DUMMY_SERVER14, component = ALL
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting14, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting14_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting14_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_unknown, Setting_configunittest_setting14, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting14_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting14_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1014, CComBSTR(L"dummy_server14"), Component_unknown, Setting_configunittest_setting14, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1014, server dummy_server14, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1014, server dummy_server14, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting15 has an override for site = -1, server = ALL, component = dummy_component15
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting15, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting15_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting15_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component15, Setting_configunittest_setting15, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, ALL servers, component dummy_component15", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, ALL servers, component dummy_component15", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_dummy_component15, Setting_configunittest_setting15, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, ALL servers, component dummy_component15", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, ALL servers, component dummy_component15", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting16 has an override for site = -1, server = DUMMY_SERVER16, component = ALL
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting16, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting16_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting16_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component16, Setting_configunittest_setting16, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting16_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting16_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"dummy_server16"), Component_unknown, Setting_configunittest_setting16, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"ALL sites, server dummy_server16, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"ALL sites, server dummy_server16, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    // configunittest_setting17 has an override for site = 1017, server = ALL, component = ALL
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting17, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting17_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting17_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    /*
    bsValue.Empty();
    hResult = g_pConfig->GetSetting_2(Component_dummy_component17, Setting_configunittest_setting17, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"configunittest_setting17_default_value", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting17_default_value", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    bsValue.Empty();
    hResult = g_pConfig->GetSetting_3(g_bsNpdbEnvironment, 1017, g_bsServer, Component_unknown, Setting_configunittest_setting17, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetSetting_3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    if (0 != wcscmp(L"site 1017, ALL servers, ALL components", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"site 1017, ALL servers, ALL components", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }
    */

    hResult = S_OK;

FunctionExit:
    bsValue.Empty();

    return hResult;
}

HRESULT
CPP_GetSetting_PosCache()
{
    HRESULT    hResult = S_OK;
    CComBSTR   bsValue = CComBSTR(NULL);
    WCHAR      sqlCommand[1024];

    hResult = g_pConfig->RegisterDynamicSetting(Setting_configunittest_setting4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->RegisterDynamicSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a SettingChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_SettingChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_SettingChange_fThrow = FALSE;

    // set m_SettingChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_SettingChange_fFired = FALSE;

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_a' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the setting handler did NOT fire
    // setting should NOT be in any cached setting list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_SettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_SettingChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read configunittest_setting4
    // which will load setting into the cache
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_a", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_a", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // save our expectations for the handler to check
    g_pConfigListener->m_SettingChange_lSiteId = 1001;
    g_pConfigListener->m_SettingChange_Server = g_bsServer;
    g_pConfigListener->m_SettingChange_Component = Component_unknown;
    g_pConfigListener->m_SettingChange_Setting = Setting_configunittest_setting4;
    g_pConfigListener->m_SettingChange_ValueOld = L"configunittest_setting4_default_value_a";
    g_pConfigListener->m_SettingChange_ValueNew = L"configunittest_setting4_default_value_b";
    g_pConfigListener->m_SettingChange_fFired = FALSE;

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_b' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_SettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_SettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_setting4
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_b", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_b", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // reject changes
    g_pConfigListener->m_SettingChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_SettingChange_fThrow = FALSE;

    // save our expectations for the handler to check
    g_pConfigListener->m_SettingChange_lSiteId = 1001;
    g_pConfigListener->m_SettingChange_Server = g_bsServer;
    g_pConfigListener->m_SettingChange_Component = Component_unknown;
    g_pConfigListener->m_SettingChange_Setting = Setting_configunittest_setting4;
    g_pConfigListener->m_SettingChange_ValueOld = L"configunittest_setting4_default_value_b";
    g_pConfigListener->m_SettingChange_ValueNew = L"configunittest_setting4_default_value_c";
    g_pConfigListener->m_SettingChange_fFired = FALSE;

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_c' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_SettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_SettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_setting4,
    // confirm that it has NOT changed,
    // since reject handler rejected the change
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_b", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_c", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

/*  setting.cs now has a global handler that will accept changes - commenting this out until changed
    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // read configunittest_setting4
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_c", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_c", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_d' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the list, and confirm that it has NOT changed,
    // since no handler was registered
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_c", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_c", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();
*/

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_d' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a SettingChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_SettingChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_SettingChange_fThrow = TRUE;

    // save our expectations for the handler to check
    g_pConfigListener->m_SettingChange_lSiteId = 1001;
    g_pConfigListener->m_SettingChange_Server = g_bsServer;
    g_pConfigListener->m_SettingChange_Component = Component_unknown;
    g_pConfigListener->m_SettingChange_Setting = Setting_configunittest_setting4;
    g_pConfigListener->m_SettingChange_ValueOld = L"configunittest_setting4_default_value_d";
    g_pConfigListener->m_SettingChange_ValueNew = L"configunittest_setting4_default_value_e";
    g_pConfigListener->m_SettingChange_fFired = FALSE;

    // read configunittest_setting4
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_d", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_d", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // update the value of configunittest_setting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value_e' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_SettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_SettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_setting4 again and confirm that it has not changed,
    // since throw handler did not accept the change
    bsValue.Empty();
    hResult = g_pConfig->GetSetting(Setting_configunittest_setting4, &bsValue);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"configunittest_setting4_default_value_d", bsValue)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsValue (\"%s\")\n", __WFILE__, __LINE__, L"configunittest_setting4_default_value_d", bsValue);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    bsValue.Empty();

    // set configunittest_setting4 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_settings set vc_value = 'configunittest_setting4_default_value' where vc_setting = 'configunittest_setting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetMultiSetting_NegNoEnvironment()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(NULL, 1001, g_bsServer, Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pValues) {
        SafeArrayDestroy(pValues);
    }

    return hResult;
}

HRESULT
CPP_GetMultiSetting_NegNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1001, NULL, Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pValues) {
        SafeArrayDestroy(pValues);
    }

    return hResult;
}

HRESULT
CPP_GetMultiSetting_Pos()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pValues = NULL;
    CComBSTR   bsValues[2] = { CComBSTR(NULL), CComBSTR(NULL) };

    // configunittest_multisetting_missing will not return any values
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting_missing, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 0);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting1 will match an override at site and server
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1001, server dummy_server1, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1001, server dummy_server1, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 1 1 1 (site, server, component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1001, g_bsServer, Component_dummy_component1, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1001, server dummy_server1, component dummy_component1 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1001, server dummy_server1, component dummy_component1 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 1 1 0 (site, server, all component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1001, g_bsServer, Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1001, server dummy_server1, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1001, server dummy_server1, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 1 0 1 (site, all server, component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1001, CComBSTR(L"not_a_valid_server"), Component_dummy_component1, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1001, ALL servers, component dummy_component1 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1001, ALL servers, component dummy_component1 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 1 0 0 (site, all server, all component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1001, CComBSTR(L"not_a_valid_server"), Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1001, ALL servers, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1001, ALL servers, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 0 1 1 (all site, server, component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_dummy_component1, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, server dummy_server1, component dummy_component1 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, server dummy_server1, component dummy_component1 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 0 1 0 (all site, server, all component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, server dummy_server1, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, server dummy_server1, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 0 0 1 (all site, all server, component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"not_a_valid_server"), Component_dummy_component1, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, ALL servers, component dummy_component1 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, ALL servers, component dummy_component1 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // check 0 0 0 (all site, all server, all component)
    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"not_a_valid_server"), Component_unknown, MultiSetting_configunittest_multisetting1, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, ALL servers, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, ALL servers, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting2 will match an override at environment type
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting2, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting2_environment_type_override_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting2_environment_type_override_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(CComBSTR(L"not_a_valid_environment"), 1, g_bsServer, Component_unknown, MultiSetting_configunittest_multisetting2, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting2_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting2_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting3 has no overrides
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting3, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting3_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting3_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting4 has no overrides
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting4_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting4_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting5 has no overrides
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting5, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting5_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting5_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting11 has an override for site = 1011, server = dummy_server11, component = dummy_component11
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting11, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting11_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting11_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component11, MultiSetting_configunittest_multisetting11, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting11_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting11_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1011, CComBSTR(L"dummy_server11"), Component_dummy_component11, MultiSetting_configunittest_multisetting11, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1011, server dummy_server11, component dummy_component11 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1011, server dummy_server11, component dummy_component11 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting12 has an override for site = -1, server = dummy_server12, component = dummy_component12
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting12, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting12_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting12_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component12, MultiSetting_configunittest_multisetting12, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting12_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting12_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"dummy_server12"), Component_dummy_component12, MultiSetting_configunittest_multisetting12, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, server dummy_server12, component dummy_component12 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, server dummy_server12, component dummy_component12 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting13 has an override for site = 1013, server = ALL, component = dummy_component13
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting13, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting13_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting13_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component13, MultiSetting_configunittest_multisetting13, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting13_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting13_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1013, g_bsServer, Component_dummy_component13, MultiSetting_configunittest_multisetting13, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1013, ALL servers, component dummy_component13 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1013, ALL servers, component dummy_component13 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting14 has an override for site = 1014, server = dummy_server14, component = ALL
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting14, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting14_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting14_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component14, MultiSetting_configunittest_multisetting14, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting14_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting14_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1014, CComBSTR(L"dummy_server14"), Component_unknown, MultiSetting_configunittest_multisetting14, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1014, server dummy_server14, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1014, server dummy_server14, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting15 has an override for site = -1, server = ALL, component = dummy_component15
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting15, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting15_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting15_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component15, MultiSetting_configunittest_multisetting15, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, ALL servers, component dummy_component15 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, ALL servers, component dummy_component15 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, g_bsServer, Component_dummy_component15, MultiSetting_configunittest_multisetting15, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, ALL servers, component dummy_component15 : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, ALL servers, component dummy_component15 : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting16 has an override for site = -1, server = dummy_server16, component = ALL
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting16, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting16_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting16_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component16, MultiSetting_configunittest_multisetting16, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting16_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting16_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, -1, CComBSTR(L"dummy_server16"), Component_unknown, MultiSetting_configunittest_multisetting16, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"ALL sites, server dummy_server16, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"ALL sites, server dummy_server16, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    // configunittest_multisetting17 has an override for site = 1017, server = ALL, component = ALL
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting17, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting17_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting17_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_2(Component_dummy_component17, MultiSetting_configunittest_multisetting17, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_2 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"configunittest_multisetting17_default_value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"configunittest_multisetting17_default_value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = g_pConfig->GetMultiSetting_3(g_bsNpdbEnvironment, 1017, g_bsServer, Component_unknown, MultiSetting_configunittest_multisetting17, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetMultiSetting_3 failed (0x%08x)\n", hResult);
        goto FunctionExit;
    }
    bsValues[0].Empty();
    bsValues[0] = CComBSTR(L"site 1017, ALL servers, ALL components : value1");
    bsValues[1].Empty();
    bsValues[1] = CComBSTR(L"site 1017, ALL servers, ALL components : value2");
    hResult = CompareSafeArrayToBSTR(pValues, bsValues, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = S_OK;

FunctionExit:
    if (NULL != pValues) {
        SafeArrayDestroy(pValues);
    }

    bsValues[0].Empty();
    bsValues[1].Empty();

    return hResult;
}

HRESULT
CPP_GetMultiSetting_PosCache()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pValues = NULL;
    CComBSTR   bsValuesOld[2] = { CComBSTR(NULL), CComBSTR(NULL) };
    CComBSTR   bsValuesNew[2] = { CComBSTR(NULL), CComBSTR(NULL) };
    WCHAR      sqlCommand[1024];

    // register a MultiSettingChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_MultiSettingChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_MultiSettingChange_fThrow = FALSE;

    // set m_MultiSettingChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_MultiSettingChange_fFired = FALSE;

    // update the value of configunittest_multisetting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) + 'a' where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the multisetting handler did NOT fire
    // multisetting should NOT be in any cached multisetting list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_MultiSettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_MultiSettingChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read configunittest_multisetting4
    // which will load multisetting into the cache
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsValuesOld[0].Empty();
    bsValuesOld[0] = CComBSTR(L"configunittest_multisetting4_default_value1a");
    bsValuesOld[1].Empty();
    bsValuesOld[1] = CComBSTR(L"configunittest_multisetting4_default_value2a");
    hResult = CompareSafeArrayToBSTR(pValues, bsValuesOld, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // save our expectations for the handler to check
    bsValuesNew[0].Empty();
    bsValuesNew[0] = CComBSTR(L"configunittest_multisetting4_default_value1b");
    bsValuesNew[1].Empty();
    bsValuesNew[1] = CComBSTR(L"configunittest_multisetting4_default_value2b");
    g_pConfigListener->m_MultiSettingChange_lSiteId = 1001;
    g_pConfigListener->m_MultiSettingChange_Server = g_bsServer;
    g_pConfigListener->m_MultiSettingChange_Component = Component_unknown;
    g_pConfigListener->m_MultiSettingChange_MultiSetting = MultiSetting_configunittest_multisetting4;
    g_pConfigListener->m_MultiSettingChange_bsValueOld = bsValuesOld;
    g_pConfigListener->m_MultiSettingChange_lValueOld = 2;
    g_pConfigListener->m_MultiSettingChange_bsValueNew = bsValuesNew;
    g_pConfigListener->m_MultiSettingChange_lValueNew = 2;
    g_pConfigListener->m_MultiSettingChange_fFired = FALSE;

    // update the value of configunittest_multisetting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) + 'b' where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_MultiSettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_MultiSettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): MultiSettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_multisetting4
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesNew, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // reject changes
    g_pConfigListener->m_MultiSettingChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_MultiSettingChange_fThrow = FALSE;

    // save our expectations for the handler to check
    bsValuesOld[0].Empty();
    bsValuesOld[0] = CComBSTR(L"configunittest_multisetting4_default_value1b");
    bsValuesOld[1].Empty();
    bsValuesOld[1] = CComBSTR(L"configunittest_multisetting4_default_value2b");
    bsValuesNew[0].Empty();
    bsValuesNew[0] = CComBSTR(L"configunittest_multisetting4_default_value1c");
    bsValuesNew[1].Empty();
    bsValuesNew[1] = CComBSTR(L"configunittest_multisetting4_default_value2c");
    g_pConfigListener->m_MultiSettingChange_lSiteId = 1001;
    g_pConfigListener->m_MultiSettingChange_Server = g_bsServer;
    g_pConfigListener->m_MultiSettingChange_Component = Component_unknown;
    g_pConfigListener->m_MultiSettingChange_MultiSetting = MultiSetting_configunittest_multisetting4;
    g_pConfigListener->m_MultiSettingChange_bsValueOld = bsValuesOld;
    g_pConfigListener->m_MultiSettingChange_lValueOld = 2;
    g_pConfigListener->m_MultiSettingChange_bsValueNew = bsValuesNew;
    g_pConfigListener->m_MultiSettingChange_lValueNew = 2;
    g_pConfigListener->m_MultiSettingChange_fFired = FALSE;

    // update the value of configunittest_multisetting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) + 'c' where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_MultiSettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_MultiSettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): MultiSettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_multisetting4,
    // confirm that it has NOT changed,
    // since reject handler rejected the change
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesOld, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // read configunittest_multisetting4
    bsValuesOld[0].Empty();
    bsValuesOld[0] = CComBSTR(L"configunittest_multisetting4_default_value1c");
    bsValuesOld[1].Empty();
    bsValuesOld[1] = CComBSTR(L"configunittest_multisetting4_default_value2c");
    bsValuesNew[0].Empty();
    bsValuesNew[0] = CComBSTR(L"configunittest_multisetting4_default_value1d");
    bsValuesNew[1].Empty();
    bsValuesNew[1] = CComBSTR(L"configunittest_multisetting4_default_value2d");
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesOld, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // update the value of configunittest_multisetting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) + 'd' where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // get the list, and confirm that it has changed,
    // since no handler was registered
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesNew, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a MultiSettingChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_MultiSettingChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_MultiSettingChange_fThrow = TRUE;

    // save our expectations for the handler to check
    bsValuesOld[0].Empty();
    bsValuesOld[0] = CComBSTR(L"configunittest_multisetting4_default_value1d");
    bsValuesOld[1].Empty();
    bsValuesOld[1] = CComBSTR(L"configunittest_multisetting4_default_value2d");
    bsValuesNew[0].Empty();
    bsValuesNew[0] = CComBSTR(L"configunittest_multisetting4_default_value1e");
    bsValuesNew[1].Empty();
    bsValuesNew[1] = CComBSTR(L"configunittest_multisetting4_default_value2e");
    g_pConfigListener->m_MultiSettingChange_lSiteId = 1001;
    g_pConfigListener->m_MultiSettingChange_Server = g_bsServer;
    g_pConfigListener->m_MultiSettingChange_Component = Component_unknown;
    g_pConfigListener->m_MultiSettingChange_MultiSetting = MultiSetting_configunittest_multisetting4;
    g_pConfigListener->m_MultiSettingChange_bsValueOld = bsValuesOld;
    g_pConfigListener->m_MultiSettingChange_lValueOld = 2;
    g_pConfigListener->m_MultiSettingChange_bsValueNew = bsValuesNew;
    g_pConfigListener->m_MultiSettingChange_lValueNew = 2;
    g_pConfigListener->m_MultiSettingChange_fFired = FALSE;

    // read configunittest_multisetting4
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesOld, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    // update the value of configunittest_multisetting4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) + 'e' where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_MultiSettingChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_MultiSettingChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): MultiSettingChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read configunittest_multisetting4 again and confirm that it has not changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetMultiSetting(MultiSetting_configunittest_multisetting4, &pValues);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetMultiSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToBSTR(pValues, bsValuesOld, 2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToBSTR failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    SafeArrayDestroy(pValues);
    pValues = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pValues) {
        SafeArrayDestroy(pValues);
        pValues = NULL;
    }

    bsValuesOld[0].Empty();
    bsValuesOld[1].Empty();
    bsValuesNew[0].Empty();
    bsValuesNew[1].Empty();

    // set configunittest_multisetting4 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_multisettings set vc_value = SUBSTRING(vc_value,1,43) where vc_multisetting = 'configunittest_multisetting4'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_NegNoEnvironment()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInstallUnitList = NULL;

    hResult = g_pConfig->GetInstallUnitListByServer_2(NULL, g_bsServer, &pInstallUnitList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer_2 did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_NegNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInstallUnitList = NULL;

    hResult = g_pConfig->GetInstallUnitListByServer(NULL, &pInstallUnitList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_PosNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInstallUnitList = NULL;
    long       lInstallUnitList = 0;

    hResult = g_pConfig->GetInstallUnitListByServer(CComBSTR(L"not_a_valid_server"), &pInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pInstallUnitList, 1, &lInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lInstallUnitList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInstallUnitList (%u)\n", __WFILE__, __LINE__, -1, lInstallUnitList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_PosNoUnits()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInstallUnitList = NULL;
    long       lInstallUnitList = 0;

    hResult = g_pConfig->GetInstallUnitListByServer(CComBSTR(L"DUMMY_SERVER_no_interfaces"), &pInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pInstallUnitList, 1, &lInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lInstallUnitList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInstallUnitList (%u)\n", __WFILE__, __LINE__, -1, lInstallUnitList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_PosOneUnit()
{
    HRESULT      hResult = S_OK;
    SAFEARRAY    *pInstallUnitList = NULL;
    CComBSTR     pInstallUnits[] = { "dummy_install_unit1" };

    hResult = g_pConfig->GetInstallUnitListByServer(CComBSTR(L"DUMMY_SERVER6"), &pInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToInstallUnit(pInstallUnitList, pInstallUnits, sizeof(pInstallUnits) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToInstallUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnitListByServer_PosMultiUnits()
{
    HRESULT      hResult = S_OK;
    SAFEARRAY    *pInstallUnitList = NULL;
    CComBSTR     pInstallUnits[] = { "dummy_install_unit1", "dummy_install_unit2" };

    hResult = g_pConfig->GetInstallUnitListByServer(g_bsServer, &pInstallUnitList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnitListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToInstallUnit(pInstallUnitList, pInstallUnits, sizeof(pInstallUnits) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToInstallUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitList) {
        SafeArrayDestroy(pInstallUnitList);
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnit_NegNoUnits()
{
    HRESULT           hResult = S_OK;
    IInstallUnitInfo  *pInstallUnitInfo = NULL;

    hResult = g_pConfig->GetInstallUnit(CComBSTR("dummy_install_unit3"), &pInstallUnitInfo);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnit did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitInfo) {
        pInstallUnitInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetInstallUnit_PosNotNull()
{
    HRESULT           hResult = S_OK;
    IInstallUnitInfo  *pInstallUnitInfo = NULL;
    CComBSTR          bsInfo1 = CComBSTR(NULL);
    CComBSTR          bsInfo2 = CComBSTR(NULL);
    CComBSTR          bsInfo3 = CComBSTR(NULL);
    CComBSTR          bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetInstallUnit(CComBSTR("dummy_install_unit1"), &pInstallUnitInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy1_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy1_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy1_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy1_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy1_info3", bsInfo3)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, L"dummy1_info3", bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info4 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy1_info4", bsInfo4)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, L"dummy1_info4", bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitInfo) {
        pInstallUnitInfo->Release();
    }

    bsInfo1.Empty();
    bsInfo2.Empty();
    bsInfo3.Empty();
    bsInfo4.Empty();

    return hResult;
}

HRESULT
CPP_GetInstallUnit_PosNull()
{
    HRESULT           hResult = S_OK;
    IInstallUnitInfo  *pInstallUnitInfo = NULL;
    CComBSTR          bsInfo1 = CComBSTR(NULL);
    CComBSTR          bsInfo2 = CComBSTR(NULL);
    CComBSTR          bsInfo3 = CComBSTR(NULL);
    CComBSTR          bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetInstallUnit(CComBSTR("dummy_install_unit2"), &pInstallUnitInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInstallUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info3 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo3) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pInstallUnitInfo->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInstallUnitInfo->get_Info4 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo4) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInstallUnitInfo) {
        pInstallUnitInfo->Release();
    }

    bsInfo1.Empty();
    bsInfo2.Empty();
    bsInfo3.Empty();
    bsInfo4.Empty();

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_NegNoEnvironment()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;

    hResult = g_pConfig->GetComponentListByServer_2(NULL, g_bsServer, &pComponentList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer_2 did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_NegNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;

    hResult = g_pConfig->GetComponentListByServer(NULL, &pComponentList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_PosNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;
    long       lComponentList = 0;

    hResult = g_pConfig->GetComponentListByServer(CComBSTR(L"not_a_valid_server"), &pComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pComponentList, 1, &lComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lComponentList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lComponentList (%u)\n", __WFILE__, __LINE__, -1, lComponentList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_PosNoComponents()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;
    long       lComponentList = 0;

    hResult = g_pConfig->GetComponentListByServer(CComBSTR(L"DUMMY_SERVER_no_interfaces"), &pComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pComponentList, 1, &lComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lComponentList) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lComponentList (%u)\n", __WFILE__, __LINE__, -1, lComponentList);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_PosOneComponent()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;
    CComBSTR  pComponents[] = { Component_dummy_component1 };

    hResult = g_pConfig->GetComponentListByServer(CComBSTR(L"DUMMY_SERVER6"), &pComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToComponent(pComponentList, pComponents, sizeof(pComponents) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponentListByServer_PosMultiComponents()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pComponentList = NULL;
    CComBSTR  pComponents[] = { Component_dummy_component1, Component_dummy_component2 };

    hResult = g_pConfig->GetComponentListByServer(g_bsServer, &pComponentList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponentListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToComponent(pComponentList, pComponents, sizeof(pComponents) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentList) {
        SafeArrayDestroy(pComponentList);
    }

    return hResult;
}

HRESULT
CPP_GetComponent_NegNoComponent()
{
    HRESULT         hResult = S_OK;
    IComponentInfo  *pComponentInfo = NULL;

    hResult = g_pConfig->GetComponent(Component_unknown, &pComponentInfo);
    if (0x80070057 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponent did not return 0x80070057 (ArgumentException)\n", __WFILE__, __LINE__);
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentInfo) {
        pComponentInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetComponent_NegNoUnit()
{
    HRESULT         hResult = S_OK;
    IComponentInfo  *pComponentInfo = NULL;

    hResult = g_pConfig->GetComponent(Component_dummy_component3, &pComponentInfo);
    if (E_INVALIDARG != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponent did not return E_INVALIDARG\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentInfo) {
        pComponentInfo->Release();
    }

    return hResult;
}

HRESULT
CPP_GetComponent_PosNotNull()
{
    HRESULT         hResult = S_OK;
    IComponentInfo  *pComponentInfo = NULL;
    CComBSTR       ComponentVal = Component_unknown;
    CComBSTR        bsExecutable = CComBSTR(NULL);
    Installer       InstallerVal = Installer_unspecified;
    CComBSTR        bsUsername = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);

    hResult = g_pConfig->GetComponent(Component_dummy_component1, &pComponentInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Component(&ComponentVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Component failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (Component_unknown != ComponentVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ComponentVal (%u)\n", __WFILE__, __LINE__, Component_unknown, ComponentVal);
    }

    hResult = pComponentInfo->get_Executable(&bsExecutable);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Executable failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_component1_executable", bsExecutable)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsExecutable (\"%s\")\n", __WFILE__, __LINE__, L"dummy_component1_executable", bsExecutable);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Installer(&InstallerVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Installer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (Installer_installutil != InstallerVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != InstallerVal (%u)\n", __WFILE__, __LINE__, Installer_installutil, InstallerVal);
    }

    hResult = pComponentInfo->get_Username(&bsUsername);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Username failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_username", bsUsername)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUsername (\"%s\")\n", __WFILE__, __LINE__, L"dummy_username", bsUsername);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_password", bsPassword)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, L"dummy_password", bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_component1_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_component1_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_component1_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_component1_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentInfo) {
        pComponentInfo->Release();
    }

    bsExecutable.Empty();
    bsUsername.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetComponent_PosNull()
{
    HRESULT         hResult = S_OK;
    IComponentInfo  *pComponentInfo = NULL;
    CComBSTR       ComponentVal = Component_unknown;
    CComBSTR        bsExecutable = CComBSTR(NULL);
    Installer       InstallerVal = Installer_unspecified;
    CComBSTR        bsUsername = CComBSTR(NULL);
    CComBSTR        bsPassword = CComBSTR(NULL);
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);

    hResult = g_pConfig->GetComponent(Component_dummy_component2, &pComponentInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Component(&ComponentVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Component failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (Component_unknown != ComponentVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ComponentVal (%u)\n", __WFILE__, __LINE__, Component_unknown, ComponentVal);
    }

    hResult = pComponentInfo->get_Executable(&bsExecutable);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Executable failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsExecutable) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsExecutable (\"%s\")\n", __WFILE__, __LINE__, NULL, bsExecutable);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Installer(&InstallerVal);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Installer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (Installer_unspecified != InstallerVal) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != InstallerVal (%u)\n", __WFILE__, __LINE__, Installer_installutil, InstallerVal);
    }

    hResult = pComponentInfo->get_Username(&bsUsername);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Username failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsUsername) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsUsername (\"%s\")\n", __WFILE__, __LINE__, NULL, bsUsername);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Password(&bsPassword);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Password failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsPassword) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsPassword (\"%s\")\n", __WFILE__, __LINE__, NULL, bsPassword);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Info1 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo1) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pComponentInfo->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pComponentInfo->get_Info2 failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (bsInfo2) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, NULL, bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pComponentInfo) {
        pComponentInfo->Release();
    }

    bsExecutable.Empty();
    bsUsername.Empty();
    bsPassword.Empty();
    bsInfo1.Empty();
    bsInfo2.Empty();

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_NegNoEnvironment()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;

    hResult = g_pConfig->GetInterfaceListByServer_2(NULL, g_bsServer, &pInterfaceList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer_2 did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_NegNoServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;

    hResult = g_pConfig->GetInterfaceListByServer(NULL, &pInterfaceList);
    if (0x80004003 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer did not return 0x80004003 (ArgumentNullException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_PosServer()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;
    long       lInterfaces = 0;

    hResult = g_pConfig->GetInterfaceListByServer(CComBSTR(L"not_a_valid_server"), &pInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pInterfaceList, 1, &lInterfaces);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lInterfaces) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInterfaces (%u)\n", __WFILE__, __LINE__, -1, lInterfaces);
        hResult = E_FAIL;
        goto FunctionExit;
    }

   hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_PosNoInterfaces()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;
    long       lInterfaces = 0;

    hResult = g_pConfig->GetInterfaceListByServer(CComBSTR(L"DUMMY_SERVER_no_interfaces"), &pInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = SafeArrayGetUBound(pInterfaceList, 1, &lInterfaces);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): SafeArrayGetUBound failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (-1 != lInterfaces) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != lInterfaces (%u)\n", __WFILE__, __LINE__, -1, lInterfaces);
        hResult = E_FAIL;
        goto FunctionExit;
    }

   hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_PosOneInterface()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;
    CComBSTR   pInterfaces[] = { Interface_dummy_interface6 };

    hResult = g_pConfig->GetInterfaceListByServer(CComBSTR(L"DUMMY_SERVER6"), &pInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToInterface(pInterfaceList, pInterfaces, sizeof(pInterfaces) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

   hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetInterfaceListByServer_PosMultiInterfaces()
{
    HRESULT    hResult = S_OK;
    SAFEARRAY  *pInterfaceList = NULL;
    CComBSTR   pInterfaces[] = { Interface_dummy_interface1A,
                                 Interface_dummy_interface1B,
                                 Interface_dummy_interface1C,
                                 Interface_dummy_interface1D,
                                 Interface_dummy_interface1E,
                                 Interface_dummy_interface1F,
                                 Interface_dummy_interface1G,
                                 Interface_dummy_interface2A,
                                 Interface_dummy_interface2B,
                                 Interface_dummy_interface2C,
                                 Interface_dummy_interface2D,
                                 Interface_dummy_interface2E,
                                 Interface_dummy_interface2F,
                                 Interface_dummy_interface2G,
                                 Interface_dummy_interface3A,
                                 Interface_dummy_interface3B };

    hResult = g_pConfig->GetInterfaceListByServer(g_bsServer, &pInterfaceList);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetInterfaceListByServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = CompareSafeArrayToInterface(pInterfaceList, pInterfaces, sizeof(pInterfaces) / sizeof(CComBSTR));
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CompareSafeArrayToInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

   hResult = S_OK;

FunctionExit:
    if (NULL != pInterfaceList) {
        SafeArrayDestroy(pInterfaceList);
    }

    return hResult;
}

HRESULT
CPP_GetBucketCount_NegNoInterface()
{
    HRESULT        hResult = S_OK;
    unsigned long  ulCount = 0;

    hResult = g_pConfig->GetBucketCount(Interface_None, &ulCount);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketCount did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_GetBucketCount_Pos()
{
    HRESULT        hResult = S_OK;
    unsigned long  ulCount = 0;

    hResult = g_pConfig->GetBucketCount(Interface_dummy_interface4, &ulCount);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketCount failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (6 != ulCount) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulCount (%u)\n", __WFILE__, __LINE__, hResult, 6, ulCount);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_GetBucketNum_NegNoInterface()
{
    HRESULT        hResult = S_OK;
    unsigned long  ulNum = 0;

    hResult = g_pConfig->GetBucketNum(Interface_None, 1234, &ulNum);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketNum did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_GetBucketNum_Pos()
{
    HRESULT        hResult = S_OK;
    unsigned long  ulNum = 0;

    hResult = g_pConfig->GetBucketNum(Interface_dummy_interface4, 1234, &ulNum);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketCount failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (4 != ulNum) {
        fwprintf(stderr, L"FAIL (%s @ %u): %u != ulNum (%u)\n", __WFILE__, __LINE__, hResult, 4, ulNum);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    return hResult;
}

HRESULT
CPP_GetBucketServer_NegNoInterface()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;

    hResult = g_pConfig->GetBucketServer(Interface_None, 0, &pBucketServer);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetBucketServer_NegNoBucket()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;

    hResult = g_pConfig->GetBucketServer(Interface_dummy_interface4, 1234, &pBucketServer);
    if (0x80131600 != hResult) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer did not return 0x80131600 (ApplicationException)\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetBucketServer_BucketServer_ToString()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;
    CComBSTR       bsBucketServer = CComBSTR(NULL);
    WCHAR          BucketServerString[1024];

    hResult = g_pConfig->GetBucketServer(Interface_dummy_interface4, 0, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pBucketServer->get_ToString(&bsBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(BucketServerString, L"{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4}");
    if (0 != wcscmp(BucketServerString, bsBucketServer)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServer (\"%s\")\n", __WFILE__, __LINE__, BucketServerString, bsBucketServer);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetBucketServer_Pos()
{
    HRESULT         hResult = S_OK;
    IBucketServer   *pBucketServer = NULL;
    IInterfaceInfo  *pInterfaceInfoCurrent = NULL;
    CComBSTR        bsInterfaceInfoCurrent = CComBSTR(NULL);
    WCHAR           InterfaceInfoCurrentString[1024];
    CComBSTR        bsServerNameCurrent = CComBSTR(NULL);
    IInterfaceInfo  *pInterfaceInfoNext = NULL;
    CComBSTR        bsInterfaceInfoNext = CComBSTR(NULL);
    WCHAR           InterfaceInfoNextString[1024];
    CComBSTR        bsServerNameNext = CComBSTR(NULL);
    DATE            NextServerStart = NULL;
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsInfo3 = CComBSTR(NULL);
    CComBSTR        bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetBucketServer(Interface_dummy_interface4, 0, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServer(&pInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoCurrent->get_ToString(&bsInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoCurrent->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoCurrentString, L"{dummy_interface4,http,101.0.0.1,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER1}");
    if (0 != wcscmp(InterfaceInfoCurrentString, bsInterfaceInfoCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoCurrent (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoCurrentString, bsInterfaceInfoCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServerName(&bsServerNameCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER1", bsServerNameCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameCurrent (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER1", bsServerNameCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServer(&pInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoNext->get_ToString(&bsInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoNext->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoNextString, L"{dummy_interface4,http,101.0.0.1,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER1}");
    if (0 != wcscmp(InterfaceInfoNextString, bsInterfaceInfoNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoNext (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoNextString, bsInterfaceInfoNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerName(&bsServerNameNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER1", bsServerNameNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameNext (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER1", bsServerNameNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerStart(&NextServerStart);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerStart failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (77068.049305555556 != NextServerStart) {
        fwprintf(stderr, L"FAIL (%s @ %u): %f != NextServerStart (%f)\n", __WFILE__, __LINE__, 77068.049305555556, NextServerStart);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket1_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket1_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket1_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket1_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket1_info3", bsInfo3)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket1_info3", bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket1_info4", bsInfo4)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket1_info4", bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetBucketServer_PosNext()
{
    HRESULT         hResult = S_OK;
    IBucketServer   *pBucketServer = NULL;
    IInterfaceInfo  *pInterfaceInfoCurrent = NULL;
    CComBSTR        bsInterfaceInfoCurrent = CComBSTR(NULL);
    WCHAR           InterfaceInfoCurrentString[1024];
    CComBSTR        bsServerNameCurrent = CComBSTR(NULL);
    IInterfaceInfo  *pInterfaceInfoNext = NULL;
    CComBSTR        bsInterfaceInfoNext = CComBSTR(NULL);
    WCHAR           InterfaceInfoNextString[1024];
    CComBSTR        bsServerNameNext = CComBSTR(NULL);
    DATE            NextServerStart = NULL;
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsInfo3 = CComBSTR(NULL);
    CComBSTR        bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetBucketServer(Interface_dummy_interface4, 3, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServer(&pInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoCurrent->get_ToString(&bsInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoCurrent->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoCurrentString, L"{dummy_interface4,http,101.0.0.1,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER1}");
    if (0 != wcscmp(InterfaceInfoCurrentString, bsInterfaceInfoCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoCurrent (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoCurrentString, bsInterfaceInfoCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServerName(&bsServerNameCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER1", bsServerNameCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameCurrent (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER1", bsServerNameCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServer(&pInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoNext->get_ToString(&bsInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoNext->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoNextString, L"{dummy_interface4,http,101.0.0.4,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER4}");
    if (0 != wcscmp(InterfaceInfoNextString, bsInterfaceInfoNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoNext (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoNextString, bsInterfaceInfoNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerName(&bsServerNameNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER4", bsServerNameNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameNext (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER4", bsServerNameNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerStart(&NextServerStart);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerStart failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (77068.049305555556 != NextServerStart) {
        fwprintf(stderr, L"FAIL (%s @ %u): %f != NextServerStart (%f)\n", __WFILE__, __LINE__, 77068.049305555556, NextServerStart);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket4_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket4_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket4_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket4_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket4_info3", bsInfo3)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket4_info3", bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket4_info4", bsInfo4)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket4_info4", bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetTitleBucketServer_Pos()
{
    HRESULT         hResult = S_OK;
    IBucketServer   *pBucketServer = NULL;
    IInterfaceInfo  *pInterfaceInfoCurrent = NULL;
    CComBSTR        bsInterfaceInfoCurrent = CComBSTR(NULL);
    WCHAR           InterfaceInfoCurrentString[1024];
    CComBSTR        bsServerNameCurrent = CComBSTR(NULL);
    IInterfaceInfo  *pInterfaceInfoNext = NULL;
    CComBSTR        bsInterfaceInfoNext = CComBSTR(NULL);
    WCHAR           InterfaceInfoNextString[1024];
    CComBSTR        bsServerNameNext = CComBSTR(NULL);
    DATE            NextServerStart = NULL;
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsInfo3 = CComBSTR(NULL);
    CComBSTR        bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServer(&pInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoCurrent->get_ToString(&bsInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoCurrent->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoCurrentString, L"{dummy_interface4,http,101.0.0.2,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER2}");
    if (0 != wcscmp(InterfaceInfoCurrentString, bsInterfaceInfoCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoCurrent (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoCurrentString, bsInterfaceInfoCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServerName(&bsServerNameCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER2", bsServerNameCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameCurrent (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER2", bsServerNameCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServer(&pInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoNext->get_ToString(&bsInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoNext->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoNextString, L"{dummy_interface4,http,101.0.0.2,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER2}");
    if (0 != wcscmp(InterfaceInfoNextString, bsInterfaceInfoNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoNext (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoNextString, bsInterfaceInfoNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerName(&bsServerNameNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER2", bsServerNameNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameNext (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER2", bsServerNameNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerStart(&NextServerStart);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerStart failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (77068.049305555556 != NextServerStart) {
        fwprintf(stderr, L"FAIL (%s @ %u): %f != NextServerStart (%f)\n", __WFILE__, __LINE__, 77068.049305555556, NextServerStart);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket2_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket2_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket2_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket2_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket2_info3", bsInfo3)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket2_info3", bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket2_info4", bsInfo4)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket2_info4", bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetTitleBucketServer_PosNext()
{
    HRESULT         hResult = S_OK;
    IBucketServer   *pBucketServer = NULL;
    IInterfaceInfo  *pInterfaceInfoCurrent = NULL;
    CComBSTR        bsInterfaceInfoCurrent = CComBSTR(NULL);
    WCHAR           InterfaceInfoCurrentString[1024];
    CComBSTR        bsServerNameCurrent = CComBSTR(NULL);
    IInterfaceInfo  *pInterfaceInfoNext = NULL;
    CComBSTR        bsInterfaceInfoNext = CComBSTR(NULL);
    WCHAR           InterfaceInfoNextString[1024];
    CComBSTR        bsServerNameNext = CComBSTR(NULL);
    DATE            NextServerStart = NULL;
    CComBSTR        bsInfo1 = CComBSTR(NULL);
    CComBSTR        bsInfo2 = CComBSTR(NULL);
    CComBSTR        bsInfo3 = CComBSTR(NULL);
    CComBSTR        bsInfo4 = CComBSTR(NULL);

    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 4, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): g_pConfig->GetBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServer(&pInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoCurrent->get_ToString(&bsInterfaceInfoCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoCurrent->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoCurrentString, L"{dummy_interface4,http,101.0.0.2,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER2}");
    if (0 != wcscmp(InterfaceInfoCurrentString, bsInterfaceInfoCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoCurrent (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoCurrentString, bsInterfaceInfoCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_CurrentServerName(&bsServerNameCurrent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_CurrentServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER2", bsServerNameCurrent)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameCurrent (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER2", bsServerNameCurrent);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServer(&pInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    hResult = pInterfaceInfoNext->get_ToString(&bsInterfaceInfoNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pInterfaceInfoNext->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(InterfaceInfoNextString, L"{dummy_interface4,http,101.0.0.5,<null>,<null>,0,0,<null>,0,<null>,<null>,<null>,0,0,<null>,<null>,<null>,<null>,0,0,False,<null>,<null>,<null>,<null>,False,<null>,<null>,<null>,<null>,DUMMY_BUCKET_SERVER5}");
    if (0 != wcscmp(InterfaceInfoNextString, bsInterfaceInfoNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInterfaceInfoNext (\"%s\")\n", __WFILE__, __LINE__, InterfaceInfoNextString, bsInterfaceInfoNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerName(&bsServerNameNext);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"DUMMY_BUCKET_SERVER5", bsServerNameNext)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsServerNameNext (\"%s\")\n", __WFILE__, __LINE__, L"DUMMY_BUCKET_SERVER5", bsServerNameNext);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_NextServerStart(&NextServerStart);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerStart failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (77068.049305555556 != NextServerStart) {
        fwprintf(stderr, L"FAIL (%s @ %u): %f != NextServerStart (%f)\n", __WFILE__, __LINE__, 77068.049305555556, NextServerStart);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info1(&bsInfo1);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket5_info1", bsInfo1)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo1 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket5_info1", bsInfo1);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info2(&bsInfo2);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket5_info2", bsInfo2)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo2 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket5_info2", bsInfo2);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info3(&bsInfo3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket5_info3", bsInfo3)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo3 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket5_info3", bsInfo3);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = pBucketServer->get_Info4(&bsInfo4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_NextServerName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(L"dummy_bucket5_info4", bsInfo4)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsInfo4 (\"%s\")\n", __WFILE__, __LINE__, L"dummy_bucket5_info4", bsInfo4);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    return hResult;
}

HRESULT
CPP_GetTitleBucketServer_PosCache()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;
    CComBSTR       bsBucketServerInfo = CComBSTR(NULL);
    WCHAR          BucketServerInfoOldString[1024];
    WCHAR          BucketServerInfoNewString[1024];
    WCHAR          sqlCommand[1024];

    // register a InterfaceBucketChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceBucketChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceBucketChange_fThrow = FALSE;

    // set m_InterfaceBucketChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // update the info1 column of title 1234 bucket 1 for dummy_interface4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1a' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the interface bucket change handler did NOT fire
    // DUMMY_SERVER5B should NOT be in any cached interface bucket list
    // and therefore no handlers should've been called
    if (FALSE != g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_InterfaceBucketChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // now read title 1234 bucket 1 for dummy_interface4
    // which will load interface bucket into the cache
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1a,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // save our expectations for the handler to check
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    g_pConfigListener->m_InterfaceBucketChange_ulTitleId = 1234;
    g_pConfigListener->m_InterfaceBucketChange_ulBucket = 1;
    g_pConfigListener->m_InterfaceBucketChange_Interface = Interface_dummy_interface4;
    g_pConfigListener->m_InterfaceBucketChange_ValueOld = BucketServerInfoOldString;
    g_pConfigListener->m_InterfaceBucketChange_ValueNew = BucketServerInfoNewString;
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // update the info1 column of title 1234 bucket 1 for dummy_interface4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1b' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceBucketChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceBucketChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read title 1234 bucket 1 for dummy_interface4
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoNewString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoNewString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // reject changes
    g_pConfigListener->m_InterfaceBucketChange_fVeto = VARIANT_TRUE;
    g_pConfigListener->m_InterfaceBucketChange_fThrow = FALSE;

    // save our expectations for the handler to check
    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    g_pConfigListener->m_InterfaceBucketChange_ulTitleId = 1234;
    g_pConfigListener->m_InterfaceBucketChange_ulBucket = 1;
    g_pConfigListener->m_InterfaceBucketChange_Interface = Interface_dummy_interface4;
    g_pConfigListener->m_InterfaceBucketChange_ValueOld = BucketServerInfoOldString;
    g_pConfigListener->m_InterfaceBucketChange_ValueNew = BucketServerInfoNewString;
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // update the info1 column of title 1234 bucket 1 for dummy_interface4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1c' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceBucketChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceBucketChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read title 1234 bucket 1 for dummy_interface4
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // unregister the handler
    hResult = g_pConfig->putref_ConfigListener(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // get title 1234 bucket 1 for dummy_interface4 again to read it into the cache
    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // update the info1 column of title 1234 bucket 1 for dummy_interface4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1d' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
    // since no handler was registered
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // discard all cached values to reset the cache
    g_pConfig->DiscardCachedValues();

    // Set component name
    hResult = g_pConfig->put_ComponentName(g_bsComponent);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // register a InterfaceBucketChange handler and throw changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceBucketChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceBucketChange_fThrow = TRUE;

    // save our expectations for the handler to check
    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1e,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}");
    g_pConfigListener->m_InterfaceBucketChange_ulTitleId = 1234;
    g_pConfigListener->m_InterfaceBucketChange_ulBucket = 1;
    g_pConfigListener->m_InterfaceBucketChange_Interface = Interface_dummy_interface4;
    g_pConfigListener->m_InterfaceBucketChange_ValueOld = BucketServerInfoOldString;
    g_pConfigListener->m_InterfaceBucketChange_ValueNew = BucketServerInfoNewString;
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;


    // get title 1234 bucket 1 for dummy_interface4 again to read it into the cache
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // update the info1 column of title 1234 bucket 1 for dummy_interface4
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1e' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceBucketChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceBucketChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
    // since throw handler did not accept the change
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 1, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    bsBucketServerInfo.Empty();

    // set the dummy_interface4 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_info1 = 'dummy_bucket2_info1' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 1 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_CompleteMigration_Pos()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;
    CComBSTR       bsBucketServerInfo = CComBSTR(NULL);
    WCHAR          BucketServerInfoOldString[1024];
    WCHAR          BucketServerInfoNewString[1024];
    WCHAR          sqlCommand[1024];

    // register a InterfaceBucketChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceBucketChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceBucketChange_fThrow = FALSE;

    // set m_InterfaceBucketChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // now read bucket 3 for dummy_interface4
    // which will load interface bucket into the cache
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 0, 3, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4}");
    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // save our expectations for the handler to check
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER4,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4}");
    g_pConfigListener->m_InterfaceBucketChange_ulTitleId = 0;
    g_pConfigListener->m_InterfaceBucketChange_ulBucket = 3;
    g_pConfigListener->m_InterfaceBucketChange_Interface = Interface_dummy_interface4;
    g_pConfigListener->m_InterfaceBucketChange_ValueOld = BucketServerInfoOldString;
    g_pConfigListener->m_InterfaceBucketChange_ValueNew = BucketServerInfoNewString;
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // complete migration
    hResult = g_pConfig->CompleteMigration(Interface_dummy_interface4, 3);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->CompleteMigration failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceBucketChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceBucketChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read bucket 3 for dummy_interface4
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 0, 3, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoNewString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoNewString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    bsBucketServerInfo.Empty();

    // set the dummy_interface4 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_server = 'DUMMY_BUCKET_SERVER1' where vc_interface = 'dummy_interface4' and i_title_id = 0 and i_bucket = 3 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_CompleteTitleMigration_Pos()
{
    HRESULT        hResult = S_OK;
    IBucketServer  *pBucketServer = NULL;
    CComBSTR       bsBucketServerInfo = CComBSTR(NULL);
    WCHAR          BucketServerInfoOldString[1024];
    WCHAR          BucketServerInfoNewString[1024];
    WCHAR          sqlCommand[1024];

    // register a InterfaceBucketChange handler and accept changes
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    g_pConfigListener->m_InterfaceBucketChange_fVeto = VARIANT_FALSE;
    g_pConfigListener->m_InterfaceBucketChange_fThrow = FALSE;

    // set m_InterfaceBucketChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // now read bucket 3 for dummy_interface4
    // which will load interface bucket into the cache
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 4, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    swprintf(BucketServerInfoOldString, L"{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4}");
    if (0 != wcscmp(BucketServerInfoOldString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoOldString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    // save our expectations for the handler to check
    swprintf(BucketServerInfoNewString, L"{dummy_interface4,DUMMY_BUCKET_SERVER5,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4}");
    g_pConfigListener->m_InterfaceBucketChange_ulTitleId = 1234;
    g_pConfigListener->m_InterfaceBucketChange_ulBucket = 4;
    g_pConfigListener->m_InterfaceBucketChange_Interface = Interface_dummy_interface4;
    g_pConfigListener->m_InterfaceBucketChange_ValueOld = BucketServerInfoOldString;
    g_pConfigListener->m_InterfaceBucketChange_ValueNew = BucketServerInfoNewString;
    g_pConfigListener->m_InterfaceBucketChange_fFired = FALSE;

    // complete migration
    hResult = g_pConfig->CompleteTitleMigration(Interface_dummy_interface4, 1234, 4);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->CompleteMigration failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // check that the handler fired
    if (FALSE == g_pConfigListener->m_InterfaceBucketChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): m_InterfaceBucketChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    if (FAILED(g_pConfigListener->m_hrChange)) {
        fwprintf(stderr, L"FAIL (%s @ %u): InterfaceBucketChange returned an error (0x%08x)\n", __WFILE__, __LINE__, g_pConfigListener->m_hrChange);
        hResult = g_pConfigListener->m_hrChange;
        goto FunctionExit;
    }

    // read bucket 3 for dummy_interface4
    hResult = g_pConfig->GetTitleBucketServer(Interface_dummy_interface4, 1234, 4, &pBucketServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->GetTitleBucketServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    bsBucketServerInfo.Empty();
    hResult = pBucketServer->get_ToString(&bsBucketServerInfo);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pBucketServer->get_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (0 != wcscmp(BucketServerInfoNewString, bsBucketServerInfo)) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsBucketServerInfo (\"%s\")\n", __WFILE__, __LINE__, BucketServerInfoNewString, bsBucketServerInfo);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    pBucketServer->Release();
    pBucketServer = NULL;

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    if (NULL != pBucketServer) {
        pBucketServer->Release();
    }

    bsBucketServerInfo.Empty();

    // set the dummy_interface4 back
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"update t_interface_buckets set vc_server = 'DUMMY_BUCKET_SERVER2' where vc_interface = 'dummy_interface4' and i_title_id = 1234 and i_bucket = 4 and vc_environment = '%s'\"", g_bsNpdbServer, g_bsNpdbDatabase, g_bsNpdbEnvironment);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_GameConfigChange_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);
    WCHAR     sqlCommand[1024];

    // force commonconfig to query db, get the latest change id, and start the refresh timer
    g_pConfig->GetSetting(Setting_config_cacheRefreshInterval, &bsValue);

    g_pConfigListener->m_GameConfigChange_fThrow = FALSE;

    // set m_GameConfigChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_GameConfigChange_fFired = FALSE;

    // insert row into t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_gameconfig_1.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler did NOT fire
    if (FALSE != g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // register a GameConfigChange handler
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // insert row into t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_gameconfig_2.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler fired
    if (FALSE == g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    g_pConfigListener->m_GameConfigChange_fThrow = TRUE;

    // delete row from t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_game_config where i_title_id = 0xFFFF00005\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler fired
    if (FALSE == g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    bsValue.Empty();

    // delete row from t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_game_config where i_title_id = 0xFFFF0005 or i_title_id = 0xFFFF0004\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_LiveTitleConfigChange_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);
    WCHAR     sqlCommand[1024];

    // insert row into t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_gameconfig_1.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // insert row into t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_gameconfig_2.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // force commonconfig to query db, get the latest change id, and start the refresh timer
    g_pConfig->GetSetting(Setting_config_cacheRefreshInterval, &bsValue);

    g_pConfigListener->m_GameConfigChange_fThrow = FALSE;

    // set m_GameConfigChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_GameConfigChange_fFired = FALSE;

    // insert row into t_live_title_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_titleconfig_1.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler did NOT fire
    if (FALSE != g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // register a GameConfigChange handler
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // insert row into t_live_title_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -i npdb_config_add_titleconfig_2.sql", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler fired
    if (FALSE == g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    g_pConfigListener->m_GameConfigChange_fThrow = TRUE;

    // delete row from t_live_title_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_live_title_config where i_title_id = 0xFFFF00005\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the game config handler fired
    if (FALSE == g_pConfigListener->m_GameConfigChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_GameConfigChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    bsValue.Empty();

    // delete row from t_live_title_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_live_title_config where i_title_id = 0xFFFF0005 or i_title_id = 0xFFFF0004\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    // delete row from t_game_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_game_config where i_title_id = 0xFFFF0005 or i_title_id = 0xFFFF0004\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_XdelaySettingsChange_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);
    WCHAR     sqlCommand[1024];

    // force commonconfig to query db, get the latest change id, and start the refresh timer
    g_pConfig->GetSetting(Setting_config_cacheRefreshInterval, &bsValue);

    g_pConfigListener->m_XdelaySettingsChange_fThrow = FALSE;

    // set m_XdelaySettingsChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_XdelaySettingsChange_fFired = FALSE;

    // insert row into t_xdelay_settings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_xdelay_settings select 'dummy_component1',0xFFFF0004,'request1',5000,5000\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config change handler did NOT fire
    if (FALSE != g_pConfigListener->m_XdelaySettingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XdelaySettingsChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // register a XdelaySettingsChange handler
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // insert row into t_xdelay_settings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_xdelay_settings select 'dummy_component1',0xFFFF0005,'request2',5000,5000\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config handler fired
    if (FALSE == g_pConfigListener->m_XdelaySettingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XdelaySettingsChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    g_pConfigListener->m_XdelaySettingsChange_fThrow = TRUE;

    // delete row from t_live_title_config
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_xdelay_settings where vc_component = 'dummy_component1' and i_title_id = 0xFFFF00005\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config handler fired
    if (FALSE == g_pConfigListener->m_XdelaySettingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XdelaysSettingsChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    bsValue.Empty();

    // delete row from t_xdelay_settings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_xdelay_settings where vc_component = 'dummy_component1'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_XrlMappingsChange_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsValue = CComBSTR(NULL);
    WCHAR     sqlCommand[1024];

    // force commonconfig to query db, get the latest change id, and start the refresh timer
    g_pConfig->GetSetting(Setting_config_cacheRefreshInterval, &bsValue);

    g_pConfigListener->m_XrlMappingsChange_fThrow = FALSE;

    // set m_XrlMappingsChange_fFired to false, so we can confirm the handler is called
    g_pConfigListener->m_XrlMappingsChange_fFired = FALSE;

    // insert row into t_xrl_virtual_interface_mappings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_xrl_virtual_interface_mappings select 'xrlA','dummy_vinterface1A',1,2,3,4,5,6,7,8,9,10,11,'xblob_test'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config change handler did NOT fire
    if (FALSE != g_pConfigListener->m_XrlMappingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XrlMappingsChange_fFired is not FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    // register a XrlMappingsChange handler
    hResult = g_pConfig->putref_ConfigListener(g_pIConfigListener);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->putref_ConfigListener failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    // insert row into t_xrl_virtual_interface_mappings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"insert into t_xrl_virtual_interface_mappings select 'xrlB','dummy_vinterface1A',1,2,3,4,5,6,7,8,9,10,11,'xblob_test'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config handler fired
    if (FALSE == g_pConfigListener->m_XrlMappingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XrlMappingsChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    g_pConfigListener->m_XrlMappingsChange_fThrow = TRUE;

    // delete row from t_xrl_virtual_interface_mappings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_xrl_virtual_interface_mappings where vc_xrl = 'xrlA'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    hResult = RunSql(sqlCommand);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): RunSql failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }
    g_pConfig->CheckForUpdates();

    // make sure the config handler fired
    if (FALSE == g_pConfigListener->m_XrlMappingsChange_fFired) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfigListener->m_XrlMappingsChange_fFired is FALSE\n", __WFILE__, __LINE__);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:
    // unregister the handler
    g_pConfig->putref_ConfigListener(NULL);

    bsValue.Empty();

    // delete row from t_xrl_virtual_interface_mappings
    swprintf(sqlCommand, L"osql.exe -E -S %s -d %s -Q \"delete t_xrl_virtual_interface_mappings where vc_xrl = 'xrlA' or vc_xrl = 'xrlB'\"", g_bsNpdbServer, g_bsNpdbDatabase);
    RunSql(sqlCommand);

    return hResult;
}

HRESULT
CPP_NpdbServer_Pos()
{
    HRESULT   hResult = S_OK;
    CComBSTR  bsNpdbServer;

    hResult = g_pConfig->get_NpdbServer(&bsNpdbServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->get_NpdbServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto FunctionExit;
    }

    if (g_bsNpdbServer != bsNpdbServer) {
        fwprintf(stderr, L"FAIL (%s @ %u): \"%s\" != bsNpdbServer (\"%s\")\n", __WFILE__, __LINE__, g_bsNpdbServer, bsNpdbServer);
        hResult = E_FAIL;
        goto FunctionExit;
    }

    hResult = S_OK;

FunctionExit:

    return hResult;
}


int __cdecl wmain(INT argc, WCHAR *argv[])
{
    HRESULT  hResult = S_OK;



    // Check calling process
    HANDLE  hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hSnapShot) {
        DWORD  dwErrorCode = GetLastError();
        fwprintf(stderr, L"FAIL (%s @ %u): CreateToolhelp32Snapshot failed (0x%08x)\n", __WFILE__, __LINE__, dwErrorCode);
        return HRESULT_FROM_WIN32(dwErrorCode);
    }

    DWORD           dwProcessId = GetCurrentProcessId();
    DWORD           dwParentProcessId = 0;
    PROCESSENTRY32  ProcessEntry;
    PROCESSENTRY32  ParentProcessEntry;
    BOOL            fContinue = FALSE;

    ZeroMemory(&ParentProcessEntry, sizeof(ParentProcessEntry));

    // Enumerate each process to find the current process
    ZeroMemory(&ProcessEntry, sizeof(ProcessEntry));
    ProcessEntry.dwSize = sizeof(ProcessEntry);
    fContinue = Process32First(hSnapShot, &ProcessEntry);
    while (TRUE == fContinue) {
        if (ProcessEntry.th32ProcessID == dwProcessId) {
            dwParentProcessId = ProcessEntry.th32ParentProcessID;
            break;
        }

        ZeroMemory(&ProcessEntry, sizeof(ProcessEntry));
        ProcessEntry.dwSize = sizeof(ProcessEntry);
        fContinue = Process32Next(hSnapShot, &ProcessEntry);
    }

    // Enumerate each process to find the parent process
    ZeroMemory(&ProcessEntry, sizeof(ProcessEntry));
    ProcessEntry.dwSize = sizeof(ProcessEntry);
    fContinue = Process32First(hSnapShot, &ProcessEntry);
    while (TRUE == fContinue) {
        if (ProcessEntry.th32ProcessID == dwParentProcessId) {
            CopyMemory(&ParentProcessEntry, &ProcessEntry, sizeof(ParentProcessEntry));
            break;
        }

        ZeroMemory(&ProcessEntry, sizeof(ProcessEntry));
        ProcessEntry.dwSize = sizeof(ProcessEntry);
        fContinue = Process32Next(hSnapShot, &ProcessEntry);
    }

    // Check command line parameters
    if (5 != argc) {
        fwprintf(stderr, L"FAIL (%s @ %u): Command Line Parameters not as expected\n", __WFILE__, __LINE__);
        fwprintf(stderr, L"\n", __WFILE__, __LINE__);
        fwprintf(stderr, L"ConfigTlbTest.exe <NPDB Server> <Environment> <Component> <TestCase>\n", __WFILE__, __LINE__);
        return E_FAIL;
    }

    // command line parameters that indicate component, environment, server name, and test case
    g_bsNpdbServer = CComBSTR(argv[1]);
    g_bsNpdbDatabase = CComBSTR(L"npdb"); //temporary, should be passed on command line eventually
    g_bsNpdbEnvironment = CComBSTR(argv[2]);
    g_bsComponent = CComBSTR(argv[3]);

    CComBSTR  bsTestCase = CComBSTR(argv[4]);



    // Initialize COM
    hResult = CoInitialize(NULL);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): CoInitialize failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto ProcessExit;
    }



    // Create config instance
    hResult = g_pConfig.CoCreateInstance(__uuidof(ConfigInterop));
    if (FAILED(hResult)) {
        if (0x80040154 == hResult) {
            fwprintf(stderr, L"FAIL (%s @ %u): CoCreateInstance returned REGDB_E_CLASSNOTREG: ConfigInterop not registered.\n", __WFILE__, __LINE__);
            fwprintf(stderr, L"Check CommonConfig.dll, CommonConfig.manifest, and ConfigTlbTest.exe.manifest.\n", __WFILE__, __LINE__);
        }
        else {
            fwprintf(stderr, L"FAIL (%s @ %u): CoCreateInstance failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }

        goto ProcessExit;
    }


    // enable xmgmt logging.  This includes calls to DiscardCachedValues() and
    // put_ComponentName().
    g_xomcentral.Init("ConfigTlbTest");

    //hResult = g_pConfig->DiscardCachedValues();
 //   if (FAILED(hResult)) {
 //       fwprintf(stderr, L"FAIL (%s @ %u): pConfig->DiscardCachedValues failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
 //       goto ProcessExit;
 //   }

    //// Set component name
 //   hResult = g_pConfig->put_ComponentName(g_bsComponent);
 //   if (FAILED(hResult)) {
 //       fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ComponentName failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
 //       goto ProcessExit;
 //   }

    // Set server name
    hResult = g_pConfig->put_ServerSet_TestOnly_DoNotUse(g_bsServer);
    if (FAILED(hResult)) {
        fwprintf(stderr, L"FAIL (%s @ %u): pConfig->put_ServerSet_TestOnly_DoNotUse failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        goto ProcessExit;
    }



    // Find the test case
    if (0 == wcscmp(L"CPP_Component_Pos", bsTestCase)) {
        hResult = CPP_Component_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_Component_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_ComponentName_Pos", bsTestCase)) {
        hResult = CPP_ComponentName_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_ComponentName_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_ComponentToString_Pos", bsTestCase)) {
        hResult = CPP_ComponentToString_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_ComponentToString_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_Environment_Pos", bsTestCase)) {
        hResult = CPP_Environment_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_Environment_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_Server_Pos", bsTestCase)) {
        hResult = CPP_Server_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_Server_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_SiteId_Pos", bsTestCase)) {
        hResult = CPP_SiteId_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_SiteId_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetServerListByInterface_None", bsTestCase)) {
        hResult = CPP_GetServerListByInterface_None();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetServerListByInterface_None failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetServerListByInterface_PosSingleServer", bsTestCase)) {
        hResult = CPP_GetServerListByInterface_PosSingleServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetServerListByInterface_PosSingleServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetServerListByInterface_PosMultiServer", bsTestCase)) {
        hResult = CPP_GetServerListByInterface_PosMultiServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetServerListByInterface_PosMultiServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetServerListByInterface_PosCache", bsTestCase)) {
        hResult = CPP_GetServerListByInterface_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetServerListByInterface_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_NegInvalidParam", bsTestCase)) {
        hResult = CPP_GetInterface_NegInvalidParam();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_NegInvalidParam failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_NegNoServer", bsTestCase)) {
        hResult = CPP_GetInterface_NegNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_NegNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetInterface_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_InterfaceInfo_SqlConnectionString", bsTestCase)) {
        hResult = CPP_GetInterface_InterfaceInfo_SqlConnectionString();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_InterfaceInfo_SqlConnectionString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_InterfaceInfo_ToString", bsTestCase)) {
        hResult = CPP_GetInterface_InterfaceInfo_ToString();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_InterfaceInfo_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_PosNotNull", bsTestCase)) {
        hResult = CPP_GetInterface_PosNotNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_PosNotNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_PosNull", bsTestCase)) {
        hResult = CPP_GetInterface_PosNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_PosNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_EnvironmentTypeOverride_Pos", bsTestCase)) {
        hResult = CPP_GetInterface_EnvironmentTypeOverride_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_EnvironmentTypeOverride_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_EnvironmentOverride_Pos", bsTestCase)) {
        hResult = CPP_GetInterface_EnvironmentOverride_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_EnvironmentOverride_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_ServerOverride_Pos", bsTestCase)) {
        hResult = CPP_GetInterface_ServerOverride_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_ServerOverride_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterface_PosCache", bsTestCase)) {
        hResult = CPP_GetInterface_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterface_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetSingleInterface_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetSingleInterface_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSingleInterface_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetSingleInterface_NegMultiInterface", bsTestCase)) {
        hResult = CPP_GetSingleInterface_NegMultiInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSingleInterface_NegMultiInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetSingleInterface_Pos", bsTestCase)) {
        hResult = CPP_GetSingleInterface_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSingleInterface_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterfaceListBySite_PosNoInterfaces", bsTestCase)) {
        hResult = CPP_GetVirtualInterfaceListBySite_PosNoInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterfaceListBySite_PosNoInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterfaceListBySite_PosMultiInterfaces", bsTestCase)) {
        hResult = CPP_GetVirtualInterfaceListBySite_PosMultiInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterfaceListBySite_PosMultiInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterfaceList_PosCache", bsTestCase)) {
        hResult = CPP_GetVirtualInterfaceList_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterfaceList_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_NegNoSite", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_NegNoSite();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_NegNoSite failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_VirtualInterfaceInfo_ToString", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_VirtualInterfaceInfo_ToString();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_VirtualInterfaceInfo_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_PosNotNull", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_PosNotNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_PosNotNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_PosNull", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_PosNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_PosNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_PosEnvironmentTypeOverride", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_PosEnvironmentTypeOverride();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_PosEnvironmentTypeOverride failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_PosSiteOverride", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_PosSiteOverride();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_PosSiteOverride failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterface_PosCache", bsTestCase)) {
        hResult = CPP_GetVirtualInterface_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterface_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterfaceInfoBySite_PosNoInterfaces", bsTestCase)) {
        hResult = CPP_GetVirtualInterfaceInfoBySite_PosNoInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterfaceInfoBySite_PosNoInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetVirtualInterfaceInfoBySite_PosMultiInterfaces", bsTestCase)) {
        hResult = CPP_GetVirtualInterfaceInfoBySite_PosMultiInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetVirtualInterfaceInfoBySite_PosMultiInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetSetting_NegNoSetting", bsTestCase)) {
        hResult = CPP_GetSetting_NegNoSetting();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSetting_NegNoSetting failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }
   
    if (0 == wcscmp(L"CPP_GetSetting_Pos", bsTestCase)) {
        hResult = CPP_GetSetting_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSetting_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetSetting_PosCache", bsTestCase)) {
        hResult = CPP_GetSetting_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetSetting_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetMultiSetting_NegNoEnvironment", bsTestCase)) {
        hResult = CPP_GetMultiSetting_NegNoEnvironment();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetMultiSetting_NegNoEnvironment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetMultiSetting_NegNoServer", bsTestCase)) {
        hResult = CPP_GetMultiSetting_NegNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetMultiSetting_NegNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetMultiSetting_Pos", bsTestCase)) {
        hResult = CPP_GetMultiSetting_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetMultiSetting_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetMultiSetting_PosCache", bsTestCase)) {
        hResult = CPP_GetMultiSetting_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetMultiSetting_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_NegNoEnvironment", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_NegNoEnvironment();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_NegNoEnvironment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_NegNoServer", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_NegNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_NegNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_PosNoServer", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_PosNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_PosNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_PosNoUnits", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_PosNoUnits();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_PosNoUnits failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_PosOneUnit", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_PosOneUnit();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_PosOneUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnitListByServer_PosMultiUnits", bsTestCase)) {
        hResult = CPP_GetInstallUnitListByServer_PosMultiUnits();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnitListByServer_PosMultiUnits failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnit_NegNoUnits", bsTestCase)) {
        hResult = CPP_GetInstallUnit_NegNoUnits();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnit_NegNoUnits failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnit_PosNotNull", bsTestCase)) {
        hResult = CPP_GetInstallUnit_PosNotNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnit_PosNotNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInstallUnit_PosNull", bsTestCase)) {
        hResult = CPP_GetInstallUnit_PosNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInstallUnit_PosNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_NegNoEnvironment", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_NegNoEnvironment();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_NegNoEnvironment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_NegNoServer", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_NegNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_NegNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_PosNoServer", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_PosNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_PosNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_PosNoComponents", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_PosNoComponents();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_PosNoComponents failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_PosOneComponent", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_PosOneComponent();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_PosOneComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponentListByServer_PosMultiComponents", bsTestCase)) {
        hResult = CPP_GetComponentListByServer_PosMultiComponents();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponentListByServer_PosMultiComponents failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponent_NegNoComponent", bsTestCase)) {
        hResult = CPP_GetComponent_NegNoComponent();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponent_NegNoComponent failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponent_NegNoUnit", bsTestCase)) {
        hResult = CPP_GetComponent_NegNoUnit();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponent_NegNoUnit failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponent_PosNotNull", bsTestCase)) {
        hResult = CPP_GetComponent_PosNotNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponent_PosNotNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetComponent_PosNull", bsTestCase)) {
        hResult = CPP_GetComponent_PosNull();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetComponent_PosNull failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_NegNoEnvironment", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_NegNoEnvironment();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_NegNoEnvironment failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_NegNoServer", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_NegNoServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_NegNoServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_PosServer", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_PosServer();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_PosServer failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_PosNoInterfaces", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_PosNoInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_PosNoInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_PosOneInterface", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_PosOneInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_PosOneInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetInterfaceListByServer_PosMultiInterfaces", bsTestCase)) {
        hResult = CPP_GetInterfaceListByServer_PosMultiInterfaces();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetInterfaceListByServer_PosMultiInterfaces failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketCount_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetBucketCount_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketCount_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketCount_Pos", bsTestCase)) {
        hResult = CPP_GetBucketCount_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketCount_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketNum_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetBucketNum_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketNum_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketNum_Pos", bsTestCase)) {
        hResult = CPP_GetBucketNum_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketNum_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketServer_NegNoInterface", bsTestCase)) {
        hResult = CPP_GetBucketServer_NegNoInterface();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketServer_NegNoInterface failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketServer_NegNoBucket", bsTestCase)) {
        hResult = CPP_GetBucketServer_NegNoBucket();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketServer_NegNoBucket failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketServer_BucketServer_ToString", bsTestCase)) {
        hResult = CPP_GetBucketServer_BucketServer_ToString();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketServer_BucketServer_ToString failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketServer_Pos", bsTestCase)) {
        hResult = CPP_GetBucketServer_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketServer_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetBucketServer_PosNext", bsTestCase)) {
        hResult = CPP_GetBucketServer_PosNext();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetBucketServer_PosNext failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetTitleBucketServer_Pos", bsTestCase)) {
        hResult = CPP_GetTitleBucketServer_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetTitleBucketServer_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetTitleBucketServer_PosNext", bsTestCase)) {
        hResult = CPP_GetTitleBucketServer_PosNext();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetTitleBucketServer_PosNext failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GetTitleBucketServer_PosCache", bsTestCase)) {
        hResult = CPP_GetTitleBucketServer_PosCache();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GetTitleBucketServer_PosCache failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_CompleteMigration_Pos", bsTestCase)) {
        hResult = CPP_CompleteMigration_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_CompleteMigration_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_CompleteTitleMigration_Pos", bsTestCase)) {
        hResult = CPP_CompleteTitleMigration_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_CompleteTitleMigration_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_GameConfigChange_Pos", bsTestCase)) {
        hResult = CPP_GameConfigChange_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_GameConfigChange_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_LiveTitleConfigChange_Pos", bsTestCase)) {
        hResult = CPP_LiveTitleConfigChange_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_LiveTitleConfigChange_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_XdelaySettingsChange_Pos", bsTestCase)) {
        hResult = CPP_XdelaySettingsChange_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_XdelaySettingsChange_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_XrlMappingsChange_Pos", bsTestCase)) {
        hResult = CPP_XrlMappingsChange_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_XrlMappingsChange_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    if (0 == wcscmp(L"CPP_NpdbServer_Pos", bsTestCase)) {
        hResult = CPP_NpdbServer_Pos();
        if (FAILED(hResult)) {
            fwprintf(stderr, L"FAIL (%s @ %u): CPP_XrlMappingsChange_Pos failed (0x%08x)\n", __WFILE__, __LINE__, hResult);
        }
        goto ProcessExit;
    }

    fwprintf(stderr, L"FAIL (%s @ %u): Test case was not found\n", __WFILE__, __LINE__);
    hResult = E_FAIL;

ProcessExit:
    // disable xmgmt logging
    g_xomcentral.Term();

    return hResult;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\configtlb\StdAfx.h ===
// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#pragma once

#include <windows.h>
#include <stdio.h>
#include <atlbase.h>
#include <atlcom.h>
#include <atlcomtime.h>
#include <tlhelp32.h>
#include <xmgmt.h>
#include <ConfigListener.h>
#include <commonconfig.h>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\configtlb\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_configtlbtest_none_12.4.56.0_none_234e46ef3b2d88bc
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=configtlbtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.manifest
XP_MANIFEST_PATH=manifests\x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.cat
XP_CATALOG_PATH=manifests\x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.cat
XP_PAYLOAD_PATH=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\configtlb\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_configtlbtest_none_12.4.56.0_none_234e46ef3b2d88bc
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=configtlbtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.manifest
XP_MANIFEST_PATH=manifests\x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.cat
XP_CATALOG_PATH=manifests\x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230.cat
XP_PAYLOAD_PATH=x86_configtlbtest_no-public-key_12.4.56.0_x-ww_6ee78230
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\ConnectionSettingsPerf.cs ===
using System;
using System.Data.SqlClient;
using System.Threading;
using System.Diagnostics;
using xonline.common.config;
using xonline.common.diagnostics;
using System.Net;

using ServerTestFramework;
using ServerTestFramework.Utilities;

//You can not have more than one root node.  Previously this assembly had two TestSuites (which is invalid).  Now that TestSuite is gone, having a single root declared is enforced.  Neither of these classes actually do anything at the moment, so I've picked the other one.
//[assembly: RootNode(typeof(xonline.common.test.ConnnectionStringPerf))]

namespace xonline.common.test
{
    /// <summary>
    ///      <TestSuite>SQL Connnection String configuration parameter testing</TestSuite>
    ///        <Tester>Jon Fleming</Tester>
    ///        <Developer>Stephane Plante</Developer>
    ///        <PM>Jason Ronald</PM>
    /// </summary>
    /// <remarks>
    ///        <Goal>Confirm that connection parameters found in SQL connection strings actually do something</Goal>
    ///        <NonGoal>The basic infrastructure of the configuration parameter storage is not tested here.</NonGoal>
    ///        <Description>
    ///                <p>
    ///                        Lots of interesting tests.
    ///                </p>
    ///      </Description>
    /// </remarks>
    public class ConnnectionStringPerf : TestNode
    {

    }

    /// <HighLevel>
    ///       [This suite confirms that the new configuration parameters for SQL connection strings take affect as observed in perf counters.] 
    /// </HighLevel>
    /// <Goals>
    ///       [Confirm that adding rows to the new SQL Connection String parameter table affects the way connections are made to the SQL server.]
    /// </Goals>
    /// <NonGoals>
    ///       [Basic unit testing is not a part of this suite.]
    /// </NonGoals>
    /// <Implementation>
    ///       [See Test Plan for Connection Pool Configurtation Settings]
    /// </Implementation>
    [TestGroup]
    public class ConnnectionStringEfficacy : TestNode
    {
        internal string _testServer;
        internal string _szConnectionString;
        internal const string _szComponent = "npdb";
        internal const string _szInterface = "npdb";

        internal const string _perfCategory = ".NET Data Provider for SqlServer";
        internal const string _perfNumPools = "NumberOfActiveConnectionPools";
        internal const string _perfNumPooledConnections = "NumberOfPooledConnections";
        internal const string _perfNumActiveConnections = "NumberOfActiveConnections";
        internal const string _perfNumFreeConnections = "NumberOfFreeConnections";
        internal const string _perfNumConnsPerSec = "SoftConnectsPerSecond";
        internal const string _perfNumDisconnsPerSec = "SoftDisconnectsPerSecond";

        int _numCurrentThreads = 0;
        int _numThreads = 0;
        int _duration = 0;

        /// <summary>
        ///       [Test a valid connection string]
        /// </summary>
        /// <remarks>
        ///    <description>
        ///            [This is a happy path test case.]
        ///     </desription>
        ///     <scenarios>
        ///             [This test is for original implementation and regression]
        ///     </scenarios>
        ///     <section name="Notes">
        ///             [None.]
        ///     </section>
        ///     <dependencies>
        ///             [NPDB database is required.]
        /// 
        ///     Also note that the following settings must exist in the <configuration> section of the stfgui.exe.config file,
        ///     in order to enable the off-by-default "NumberOfActiveConnections" performance counter (among others).  
        ///     The automated test does not depend on these counters, but they are useful for manual troubleshooting.
        /// 
        ///     See http://msdn.microsoft.com/en-us/library/ms254503.aspx for details on these performance counters.
        /// 
        ///     <system.diagnostics>
	    ///         <switches>
		///             <add name="ConnectionPoolPerformanceCounterDetail" value="4"/>
	    ///         </switches>
        ///     </system.diagnostics>
        /// 
        ///     </dependencies>
        /// </remarks>
        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Confirm that 10 Connections are created")]
        public void CheckConnectionString1()
        {
            // straight up easy case where we expect 10 connections to be created
            StressConnectionString(
                0, // minPoolSize = 0
                100, // maxPoolSize = 100
                20000, // connection timeout = 20 seconds
                30000, // load balance timeout = 30 seconds
                10, // number of connections = 10
                10 // duration of connections = 10 seconds
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Confirm that 20 connections are created, 10 being empty.")]
        public void CheckConnectionString2()
        {
            // Set the minimum number of connections to 20, and make sure that many are created.
            StressConnectionString(
                20, // minPoolSize = 0
                100, // maxPoolSize = 100
                20000, // connection timeout = 20 seconds
                30000, // load balance timeout = 30 seconds
                10, // number of connections = 10
                10 // duration of connections = 10 seconds
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Confirm that connections in pools are recycled (balanced) after 5 seconds.")]
        public void CheckConnectionString3()
        {
            // attempt to put 15 connections into a 10 connection pool, destroy opened connections 3 seconds after closing
            // Note that the load balance timeout will only trigger if the balance timeout is the less than the connection duration.
            StressConnectionString(
                0, // minPoolSize = 0
                10, // maxPoolSize = 10
                10000, // connection timeout = 10 seconds
                5000, // load balance timeout = 5 seconds
                15, // number of connections = 15
                7 // duration of connections = 6 seconds
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Confirm that 5 connections are at first denied due to max pool size, but then accepted")]
        public void CheckConnectionString4()
        {
            // Limit connection pool to 10 connections, but create 15.  
            // Make sure the connection timeout (20 seconds) is longer than the connection duration (10 seconds).
            StressConnectionString(
                0, // minPoolSize = 0
                10, // maxPoolSize = 10
                20000, // connection timeout = 20 seconds
                30000, // load balance timeout = 30 seconds
                15, // number of connections = 15
                10 // duration of connections = 10 seconds
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Confirm that connections timeout after 5 seconds.")]
        public void CheckConnectionString5()
        {
            // attempt to create 15 connections where only 10 are allowed.  Expect exception after timeout expires.
            StressConnectionString(
                0, // minPoolSize = 0
                10, // maxPoolSize = 100
                5000, // connection timeout = 5 seconds
                30000, // load balance timeout = 30 seconds
                15, // number of connections = 10
                10, // duration of connections = 10 seconds
                true // expect premature bailout
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("Connection timeout exactly equals connection duration.")]
        public void CheckConnectionString6()
        {
            // Set the minimum number of connections to 20, and make sure that many are created.
            StressConnectionString(
                0, // minPoolSize = 0
                100, // maxPoolSize = 100
                10000, // connection timeout = 20 seconds
                20000, // load balance timeout = 30 seconds
                10, // number of connections = 10
                10 // duration of connections = 10 seconds
                );
        }

        [TestCase, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(3), Description("No load balance timeout specified.")]
        public void CheckConnectionString7()
        {
            // Set the minimum number of connections to 20, and make sure that many are created.
            StressConnectionString(
                0, // minPoolSize = 0
                10, // maxPoolSize = 100
                15000, // connection timeout = 20 seconds
                0, // load balance timeout = 30 seconds
                15, // number of connections = 10
                10 // duration of connections = 10 seconds
                );
        }
 
        public void StressConnectionString(int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout, int numConnections, int duration)
        {
            StressConnectionString(minPoolSize, maxPoolSize, connTimeout, balanceTimeout, numConnections, duration, false);
        }

        public void StressConnectionString(int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout, int numConnections, int duration, bool bExpectFailure)
        {
            string szComponent = _szComponent;
            string szInterface = _szInterface;
            string szEnvironment = Config.Environment;

            // Get the name of the NPDB server (it's stored locally as an IP address)
            IPHostEntry ipHost = Dns.GetHostEntry(Config.NpdbServer);
            _testServer = ipHost.HostName;

            // remove the ".redmond.microsoft.com"
            int cutpoint = _testServer.IndexOf('.');
            if (cutpoint > 0)
                _testServer = _testServer.Substring(0, cutpoint);

            // rteset the thread counter
            _numCurrentThreads = 0;

            Global.RO.Info("Found NPDB server at {0}, {1}", Config.NpdbServer, _testServer);

            Config.ComponentName = szComponent;

            // remove old just to be sure
            RemoveConnectionSetting(szComponent, szInterface, szEnvironment);

            // set the server
            Config.ServerSet_TestOnly_DoNotUse = _testServer;

            try
            {
                // add a row to the connection config setting table
                AddConnectionSetting(szComponent, szInterface, szEnvironment, minPoolSize, maxPoolSize, connTimeout, balanceTimeout);

                Global.RO.Info("Set: MinPool {0}, MaxPool {1}, ConnectionTimeout {2}, LoadBalanceTimeout {3}",
                    minPoolSize, maxPoolSize, connTimeout, balanceTimeout);

                // Calling this function should trigger the callbacks
                Config.CheckForUpdates();

                bool bOK = Config.CheckServerConfiguration(szEnvironment, _testServer, szComponent);

                Assert.IsTrue(bOK, "Server is not properly configured");

                IInterfaceInfo interfaceInfo = Config.GetInterface(szEnvironment, _testServer, szInterface);

                Global.RO.Info("Using: MinPool {0}, MaxPool {1}, ConnectionTimeout {2}, LoadBalanceTimeout {3}",
                    interfaceInfo.MinConnectionPoolSize, interfaceInfo.MaxConnectionPoolSize, interfaceInfo.ConnectionTimeout, interfaceInfo.LoadBalanceTimeout);

                _szConnectionString = interfaceInfo.SqlConnectionString;
                Global.RO.Info("Connection String: '{0}'", _szConnectionString);

                _numThreads = numConnections;
                _duration = duration;

                string szInstanceName = Process.GetCurrentProcess().ProcessName + "[" + Process.GetCurrentProcess().Id + "]";

                Global.RO.Debug("Getting SQL Connection performance counters for {0}", szInstanceName);

                PerformanceCounter pcNumPools = new PerformanceCounter(_perfCategory, _perfNumPools, szInstanceName, true);
                PerformanceCounter pcNumConns = new PerformanceCounter(_perfCategory, _perfNumPooledConnections, szInstanceName, true);
                PerformanceCounter pcNumActiveConns = new PerformanceCounter(_perfCategory, _perfNumActiveConnections, szInstanceName, true);
                PerformanceCounter pcNumFreeConns = new PerformanceCounter(_perfCategory, _perfNumFreeConnections, szInstanceName, true);
                PerformanceCounter pcNumConnsPerSec = new PerformanceCounter(_perfCategory, _perfNumConnsPerSec, szInstanceName, true);
                PerformanceCounter pcNumDisconnsPerSec = new PerformanceCounter(_perfCategory, _perfNumDisconnsPerSec, szInstanceName, true);

                float numPoolsB4 = pcNumPools.RawValue;
                float numPooledConnsB4 = pcNumConns.NextValue();
                float numActiveConnsB4 = pcNumActiveConns.NextValue();
                float numFreeConnsB4 = pcNumFreeConns.NextValue();

                Global.RO.Info("Before thread creation:  NumPools {0} NumPooledConnections {1} NumActiveConnections {2} NumFreeConnections {3}", 
                    numPoolsB4, numPooledConnsB4, numActiveConnsB4, numFreeConnsB4);

                // Spawn a bunch of SQL connection threads
                Thread lastThread = new Thread(SQLConnectionThread);
                lastThread.Start();

                for (int i = 1; i < _numThreads; i++)
                {
                    // spin up a new connection thread
                    lastThread = new Thread(SQLConnectionThread);
                    lastThread.Start();
                }

                // wait for a second so that threads can establish their connections
                Thread.Sleep(1000);

                float numPools = pcNumPools.NextValue();
                float numPooledConns = pcNumConns.NextValue();
                float numActiveConns = pcNumActiveConns.NextValue();
                float numFreeConns = pcNumFreeConns.NextValue();
                float numConnsPerSec = pcNumConnsPerSec.NextValue();
                float numDisconnsPerSec = pcNumDisconnsPerSec.NextValue();

                float numNewConnections = numPooledConns - numPooledConnsB4;

                // Make sure the minimum number of connections are created.
                Assert.IsTrue(numNewConnections >= minPoolSize, "Did not create the minimum number of connections");

                // Make sure the requested number of connections are created.
                if ((maxPoolSize < numConnections) && (numConnections < maxPoolSize))
                    Assert.IsTrue(numNewConnections == numConnections, "Did not create the requested number of connections");

                // make sure that number of created connections does not exceed maximum.
                if (numConnections >= maxPoolSize)
                    Assert.IsTrue(numNewConnections == maxPoolSize, "Did not create the requested number (max) of connections");

                // Wait for the last thread to pack it up
                int numSeconds = 0;
                while (lastThread.IsAlive)
                {
                    Global.RO.Debug("{0} seconds after thread creation:  NumPools {1} NumPooledConnections {2} NumActiveConnections {3} NumFreeConnections {4} ConnsPerSec {5} DisconnsPerSec {6}",
                        numSeconds, numPools, numPooledConns, numActiveConns, numFreeConns, numConnsPerSec, numDisconnsPerSec);
                    numPools = pcNumPools.NextValue();
                    numPooledConns = pcNumConns.NextValue();
                    numActiveConns = pcNumActiveConns.NextValue();
                    numFreeConns = pcNumFreeConns.NextValue();
                    numConnsPerSec = pcNumConnsPerSec.NextValue();
                    numDisconnsPerSec = pcNumDisconnsPerSec.NextValue();
                    Thread.Sleep(1000);
                    numSeconds++;
                }

                if (bExpectFailure)
                {
                    Assert.IsTrue((numSeconds < duration), "Expected test to bail early but did not");
                }

                // refresh counters one last time
                numPools = pcNumPools.NextValue();
                numPooledConns = pcNumConns.NextValue();
                numActiveConns = pcNumActiveConns.NextValue();
                numFreeConns = pcNumFreeConns.NextValue();
                numConnsPerSec = pcNumConnsPerSec.NextValue();
                numDisconnsPerSec = pcNumDisconnsPerSec.NextValue();
                Global.RO.Info("After thread completion:  NumPools {0} NumPooledConnections {1} NumActiveConnections {2} NumFreeConnections {3} ConnsPerSec {4} DisconnsPerSec {5}",
                    numPools, numPooledConns, numActiveConns, numFreeConns, numConnsPerSec, numDisconnsPerSec);
            }
            finally
            {
                // delete the row to the connection config setting table
                RemoveConnectionSetting(szComponent, szInterface, szEnvironment);

                // Calling this function should clear the cache containing the connection strings
                Config.DiscardCachedValues();

                // clear the connection pools
                SqlConnection.ClearAllPools();
            }
        }

        // Helper thread to establish a SQL connection and get some traffic going
        public void SQLConnectionThread()
        {
            int numThread = _numCurrentThreads++;
            Global.RO.Debug("Starting thread {0}.", numThread);
            try
            {
                // test new connection string to ensure it successfully connects
                SqlConnection sqlConnection = new SqlConnection(_szConnectionString);
                sqlConnection.Open();

                int numLoops = _duration;

                for (int i = 0; i < numLoops; i++)
                {
                    using (SqlCommand sqlCommand = sqlConnection.CreateCommand())
                    {
                        // create a bogus query that is different from the last one
                        sqlCommand.CommandText = String.Format(@"select * from  t_component_interface_connection_settings where i_connection_timeout = '{0}'", i);
                        SqlDataReader reader = sqlCommand.ExecuteReader();
                        reader.Read();
                        // leave reader open for one second
                        Thread.Sleep(1000);
                        reader.Close();
                    }
                }
                sqlConnection.Close();
            }

            catch (Exception e)
            {
                Global.RO.Warn("Thread {0} had Exception: {1}", numThread, e.Message);
            }

            Global.RO.Debug("Ending thread {0}.", numThread);
            _numCurrentThreads--;
        }

        public void RemoveConnectionSetting(string szComponent, string szInterface, string szEnvironment)
        {
            using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
            {
                cxn.Open();

                using(SqlCommand sqlCommand = cxn.CreateCommand())
                {
                    sqlCommand.CommandText = String.Format(@"delete t_component_interface_connection_settings where vc_environment = '{0}' and vc_component = '{1}' and vc_target_interface = '{2}'", 
                        szEnvironment, szComponent, szInterface);
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        public void AddConnectionSetting(string szComponent, string szInterface, string szEnvironment, int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout)
        {
            using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
            {
                cxn.Open();

                using(SqlCommand sqlCommand = cxn.CreateCommand())
                {
                    try
                    {
                        sqlCommand.CommandText = String.Format(@"Insert into t_component_interface_connection_settings values('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}')",
                            szEnvironment, szComponent, szInterface, minPoolSize, maxPoolSize, balanceTimeout, connTimeout);
                        sqlCommand.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        // if the insert fails, throw the exception up to the calling context.
                        throw (e);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.connectionsettings_none_12.4.56.0_none_bdfc9fb613e58418
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.connectionsettings
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.connectionsettings,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.connectionsettings_none_12.4.56.0_none_bdfc9fb613e58418
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.connectionsettings
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.connectionsettings_no-public-key_12.4.56.0_x-ww_07a38cc0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.connectionsettings,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\connectionsetting\ConnectionSettingsTest.cs ===
using System;
using System.Data.SqlClient;
using System.Threading;
using xonline.common.config;
using xonline.common.diagnostics;
using System.Net;

using ServerTestFramework;
using ServerTestFramework.Utilities;

[assembly: RootNode(typeof(xonline.common.test.ConnnectionStringTests))]

namespace xonline.common.test
{
    /// <summary>
    ///      <TestSuite>SQL Connnection String configuration parameter testing</TestSuite>
    ///        <Tester>Jon Fleming</Tester>
    ///        <Developer>Stephane Plante</Developer>
    ///        <PM>Jason Ronald</PM>
    /// </summary>
    /// <remarks>
    ///        <Goal>Confirm that connection parameters are properly found in connection strings</Goal>
    ///        <NonGoal>The efficacy of the new parameters are not tested.</NonGoal>
    ///        <Description>
    ///                <p>
    ///                        Lots of interesting tests.
    ///                </p>
    ///      </Description>
    /// </remarks>
    public class ConnnectionStringTests : TestNode
    {

    }

    /// <HighLevel>
    ///       [This suite confirms that the new configuration parameters for SQL connection strings (stored in NPDB) are appropriately propagated.] 
    /// </HighLevel>
    /// <Goals>
    ///       [Confirm that adding configuration rows to the new table are used by conneciton strings.]
    /// </Goals>
    /// <NonGoals>
    ///       [Efficacy of these new parameters are not part of this test suite.]
    /// </NonGoals>
    /// <Implementation>
    ///       [See Test Plan for Connection Pool Configurtation Settings]
    /// </Implementation>
    [TestGroup]
    public class ConnnectionStringVerification : TestNode
    {
        internal string _testServer;
        internal const string _szComponent = "npdb";
        internal const string _szInterface = "npdb";

        /// <summary>
        ///       [Primary Key integrity: Component column]
        /// </summary>
        /// <remarks>
        ///    <description>
        ///            [Make sure that it is not possible to add a row to the table if a primary key is not found in a dependent table.]
        ///     </desription>
        ///     <scenarios>
        ///             [This test is for original implementation and regression]
        ///     </scenarios>
        ///     <section name="Notes">
        ///             [None.]
        ///     </section>
        ///     <dependencies>
        ///             [NPDB database is required.]
        ///     </dependencies>
        /// </remarks>
        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that we cannot add a row if the component key does not exist in NPDB.")]
        public void AddBadComponent()
        {
            string szComponent = "YumYum";
            string szInterface = _szInterface;
            string szEnvironment = Config.Environment;

            try
            {
                AddConnectionSetting(szComponent, szInterface, szEnvironment, 0, 10, 20, 20); 
            }
            catch
            {
                // do nothing:  expected an error.  
                return;
            }

            // If no exception was thrown, well, that's a problem.  
            Assert.IsTrue(false, "Added a bad database entry");
        }

        /// <summary>
        ///       [Primary Key integrity: Integrity column]
        /// </summary>
        /// <remarks>
        ///    <description>
        ///            [Make sure that it is not possible to add a row to the table if a primary key is not found in a dependent table.]
        ///     </desription>
        ///     <scenarios>
        ///             [This test is for original implementation and regression]
        ///     </scenarios>
        ///     <section name="Notes">
        ///             [None.]
        ///     </section>
        ///     <dependencies>
        ///             [NPDB database is required.]
        ///     </dependencies>
        /// </remarks>
        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that we cannot add a row if the interface key does not exist in NPDB.")]
        public void AddBadInterface()
        {
            string szComponent = _szComponent;
            string szInterface = "YumYum";
            string szEnvironment = Config.Environment;

            try
            {
                AddConnectionSetting(szComponent, szInterface, szEnvironment, 0, 10, 20, 20);
            }
            catch
            {
                // do nothing:  expected an error.  
                return;
            }

            // If no exception was thrown, well, that's a problem.  
            Assert.IsTrue(false, "Added a bad database entry");
        }

        /// <summary>
        ///       [Primary Key integrity: Environment column]
        /// </summary>
        /// <remarks>
        ///    <description>
        ///            [Make sure that it is not possible to add a row to the table if a primary key is not found in a dependent table.]
        ///     </desription>
        ///     <scenarios>
        ///             [This test is for original implementation and regression]
        ///     </scenarios>
        ///     <section name="Notes">
        ///             [None.]
        ///     </section>
        ///     <dependencies>
        ///             [NPDB database is required.]
        ///     </dependencies>
        /// </remarks>
        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that we cannot add a row if the environment key does not exist in NPDB.")]
        public void AddBadEnvironment()
        {
            string szComponent = _szComponent;
            string szInterface = _szInterface;
            string szEnvironment = "YumYum";

            try
            {
                AddConnectionSetting(szComponent, szInterface, szEnvironment, 0, 10, 20, 20);
            }
            catch
            {
                // do nothing:  expected an error.  
                return;
            }

            // If no exception was thrown, well, that's a problem.  
            Assert.IsTrue(false, "Added a bad database entry");
        }

        /// <summary>
        ///       [Test a valid connection string]
        /// </summary>
        /// <remarks>
        ///    <description>
        ///            [This is a happy path test case.]
        ///     </desription>
        ///     <scenarios>
        ///             [This test is for original implementation and regression]
        ///     </scenarios>
        ///     <section name="Notes">
        ///             [None.]
        ///     </section>
        ///     <dependencies>
        ///             [NPDB database is required.]
        ///     </dependencies>
        /// </remarks>
        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that connection strings are correct with normal parameters.")]
        public void CheckConnectionString1()
        {
            CheckConnectionString(10, 100, 20000, 30000);
        }

        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that connection strings are correct with allowable null parameters.")]
        public void CheckConnectionString2()
        {
            CheckConnectionString(0, 100, 0, 0);
        }

        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that a zero max pool size is not allowed.")]
        public void CheckConnectionString3()
        {
            CheckConnectionString(0, 0, 0, 0, true);
        }

        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that negative connection strings are invalid.")]
        public void CheckConnectionString4()
        {
            CheckConnectionString(-1, -10, -20000, 0, true);
        }

        [TestCase, Owner("mattfl"), TestFrequency("Daily"), TestCasePriority(1), Description("Confirm that reversed min/max strings are invalid.")]
        public void CheckConnectionString5()
        {
            CheckConnectionString(100, 50, 20000, 40000, true);
        }

        // need a member variable to tell the InterfaceChange handlers what event args to expect
        private InterfaceChangeEventArgs _interfaceChangeEventArgs;

        private bool _interfaceChangeFired;
        private bool _refreshChangeFired;

        // callback for config refresh event (used only by test code)
        public void OnMyNpdbRefreshSetting(NpdbRefreshTypes npdbRefreshType)
        {
            

            // Config update should trigger a refresh interfaces
            if (npdbRefreshType != NpdbRefreshTypes.REFRESH_INTERFACES)
            {
                _refreshChangeFired = true;
            }
        }

        // callback for config interface change event
        public void OnMyInterfaceChange(
            object sender,
            InterfaceChangeEventArgs e)
        {
            _interfaceChangeFired = true;
            
            string eEnvironment = null;
            string eServer = null;
            string eInterface = Interface.None;
            IInterfaceInfo eValueOld = null;
            IInterfaceInfo eValueNew = null;
            bool fUnexpected = false;

            if (0 != String.Compare(_interfaceChangeEventArgs.Environment, e.Environment))
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (0 != String.Compare(_interfaceChangeEventArgs.Server, e.Server))
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_interfaceChangeEventArgs.Interface != e.Interface)
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_interfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString()))
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_interfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString()))
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            // if the results are different than expected, update the global event args struct with new data.
            if (fUnexpected)
            {
                _interfaceChangeEventArgs
                    = new InterfaceChangeEventArgs(
                    eEnvironment,
                    eServer,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }
        }

        public void CheckConnectionString(int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout)
        {
            CheckConnectionString(minPoolSize, maxPoolSize, connTimeout, balanceTimeout, false);
        }

        public void CheckConnectionString(int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout, bool shouldFail)
        {
            string szComponent = _szComponent;
            string szInterface = _szInterface;
            string szEnvironment = Config.Environment;

            // Get the name of the NPDB server (it's stored locally as an IP address)
            IPHostEntry ipHost = Dns.GetHostEntry(Config.NpdbServer);
            _testServer = ipHost.HostName;

            Global.RO.Debug("Full NPDB server path is {0}, {1}", Config.NpdbServer, _testServer);

            // remove the ".redmond.microsoft.com"
            int cutpoint = _testServer.IndexOf('.');
            if (cutpoint > 0)
                _testServer = _testServer.Substring(0, cutpoint);

            Global.RO.Debug("Abbreviated NPDB server name is {0}",  _testServer);

            Config.ComponentName = szComponent;

            // remove old just to be sure  @@jonflem:  should probably save and restore these settings.
            RemoveConnectionSetting(szComponent, szInterface, szEnvironment);

            // set the server
            Config.ServerSet_TestOnly_DoNotUse = _testServer;

            // read an interface to trigger cache creation
            IInterfaceInfo interfaceInfo = Config.GetInterface(szEnvironment, _testServer, szInterface);

            // build our expected interface info objects
            InterfaceInfo interfaceInfo_Old = new InterfaceInfo();
            InterfaceInfo interfaceInfo_New = new InterfaceInfo();

            interfaceInfo_Old = (InterfaceInfo)interfaceInfo;

            // set the variables for the expected change
            interfaceInfo_New.MaxConnectionPoolSize = maxPoolSize;
            interfaceInfo_New.MinConnectionPoolSize = minPoolSize;
            interfaceInfo_New.ConnectionTimeout = connTimeout;
            interfaceInfo_New.LoadBalanceTimeout = balanceTimeout;

            //Call GetInterface to validate
            bool matched = CheckInterfaceOnServer(szEnvironment, _testServer, szInterface);

            // create the expected variable list
            _interfaceChangeEventArgs = new InterfaceChangeEventArgs(
                    szEnvironment,
                    _testServer,
                    interfaceInfo_Old.Interface,
                    interfaceInfo_Old,
                    interfaceInfo_New);

            _interfaceChangeFired = false;
            _refreshChangeFired = false;

            // read an empty server list to trigger cache creation
            Config.GetServerListByInterface(Interface.None);

            try
            {
                // add the callbacks for config change events
                Config.InterfaceChange += OnMyInterfaceChange;
                Config._npdbRefreshNotification += OnMyNpdbRefreshSetting;

                // add a row to the connection config setting table
                AddConnectionSetting(szComponent, szInterface, szEnvironment, minPoolSize, maxPoolSize, connTimeout, balanceTimeout);

                // Calling this function should trigger the callbacks
                Config.CheckForUpdates();

                bool bOK = Config.CheckServerConfiguration(szEnvironment, _testServer, szComponent);

                Assert.IsTrue(bOK, "Server is not properly configured");
                Assert.IsTrue(_refreshChangeFired, "Refresh did not fire.");
                Assert.IsTrue(_interfaceChangeFired, "Interface Change event did not fire.");

                Global.RO.Info("Set: MaxPool {0}, MinPool {1}, ConnectionTimeout {2}, LoadBalanceTimeout {3}",
                    maxPoolSize, minPoolSize, connTimeout, balanceTimeout);

                Global.RO.Info("Result: MaxPool {0}, MinPool {1}, ConnectionTimeout {2}, LoadBalanceTimeout {3}",
                    _interfaceChangeEventArgs.ValueNew.MaxConnectionPoolSize, _interfaceChangeEventArgs.ValueNew.MinConnectionPoolSize,
                    _interfaceChangeEventArgs.ValueNew.ConnectionTimeout, _interfaceChangeEventArgs.ValueNew.LoadBalanceTimeout);

                Assert.AreEqual(_interfaceChangeEventArgs.ValueNew.MaxConnectionPoolSize, maxPoolSize, " Maximum Pool Size is unexpected.");
                Assert.AreEqual(_interfaceChangeEventArgs.ValueNew.MinConnectionPoolSize, minPoolSize, " Minimum Pool Size is unexpected.");
                Assert.AreEqual(_interfaceChangeEventArgs.ValueNew.ConnectionTimeout, connTimeout, " Connection Timeout is unexpected.");
                Assert.AreEqual(_interfaceChangeEventArgs.ValueNew.LoadBalanceTimeout, balanceTimeout, " Load Balance Timeout is unexpected.");

                // if shouldFail is true, expect connection string config settings to throw an exception
                if (!shouldFail)
                {
                        // test new connection string to ensure it successfully connects
                        string szConnectionString = _interfaceChangeEventArgs.ValueNew.SqlConnectionString;
                        Global.RO.Info("Testing SQL Connection String '{0}'", szConnectionString);
                        SqlConnection sqlConnection = new SqlConnection(szConnectionString);
                        sqlConnection.Open();
                        sqlConnection.Close();
                }
                else
                {
                        // expect wonky connection string to fail parsing
                        try
                        {
                            string szConnectionString = _interfaceChangeEventArgs.ValueNew.SqlConnectionString;
                            // if wonky connection string passed parsing, make sure it fails to connect
                            try
                            {
                                Global.RO.Info("Testing Invalid SQL Connection String '{0}'", szConnectionString);
                                SqlConnection sqlConnection = new SqlConnection(szConnectionString);
                                sqlConnection.Open();
                                Assert.IsTrue(false, "Invalid SQL Connection string passed verification");
                            }
                            catch
                            {
                                Global.RO.Info("SQL Connection string failed as expected: '{0}'", szConnectionString);
                            }
                        }
                        catch
                        {
                            // do nothing
                            Global.RO.Info("Captured an invalid SQL connection string.");
                        }
                }
            }
            finally
            {
                // remove the callbacks
                Config.InterfaceChange -= OnMyInterfaceChange;
                Config._npdbRefreshNotification -= OnMyNpdbRefreshSetting;

                // delete the row to the connection config setting table
                RemoveConnectionSetting(szComponent, szInterface, szEnvironment);
            }
        }

        private static bool CheckInterfaceOnServer(string environment, string server, string anInterface)
        {
            string[] interfaces = Config.GetInterfaceListByServer(environment, server);

            foreach (string iface in interfaces)
            {
                if (String.Equals(iface, anInterface, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
            return false;
        }

        public void RemoveConnectionSetting(string szComponent, string szInterface, string szEnvironment)
        {
            using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
            {
                cxn.Open();

                using(SqlCommand sqlCommand = cxn.CreateCommand())
                {
                    sqlCommand.CommandText = String.Format(@"delete t_component_interface_connection_settings where vc_environment = '{0}' and vc_component = '{1}' and vc_target_interface = '{2}'", 
                        szEnvironment, szComponent, szInterface);
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        public void AddConnectionSetting(string szComponent, string szInterface, string szEnvironment, int minPoolSize, int maxPoolSize, int connTimeout, int balanceTimeout)
        {
            using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
            {
                cxn.Open();

                using(SqlCommand sqlCommand = cxn.CreateCommand())
                {
                    try
                    {
                        sqlCommand.CommandText = String.Format(@"Insert into t_component_interface_connection_settings values('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}')",
                            szEnvironment, szComponent, szInterface, minPoolSize, maxPoolSize, balanceTimeout, connTimeout);
                        sqlCommand.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        // if the insert fails, throw the exception up to the calling context.
                        throw (e);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\EtxFingerprint.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Xml.Schema;
using System.Text;
using System.Threading;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.config;
using xonline.common.core.etx;
using xonline.common.sql.sqlclient;
using xonline.common.utilities2;

namespace xonline.common.core.test
{
    [TestGroup, DVT, Owner("jojohn")]
    public class EtxFingerprintDVT
    {
        #region SingletonsAvailable Unit Tests

        [TestCase, Description("Validates that the FingerprintAlgorithm singletons are available.")]
        public void SingletonsAvailable()
        {
            XAssert.AssertTrue(null != FingerprintAlgorithm.MD5Event, "FingerprintAlgorithm.MD5Event");
            XAssert.AssertTrue(null != FingerprintAlgorithm.SequentialEvent, "FingerprintAlgorithm.SequentialEvent");
            XAssert.AssertTrue(null != FingerprintAlgorithm.SequentialProducer, "FingerprintAlgorithm.SequentialProducer");
        }

        #endregion

        #region NullParameterValidation Unit Tests

        [TestCase, Description("Fingerprint algorithm must fail validation on null parameters.")]
        public void MD5Event_NullParameterValidation()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();

            XAssert.AssertException(() => { algorithm.ValidateParameters(null); }, "{0}.ValidateParameters(null)", algorithm.GetType().Name);
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on null parameters.")]
        public void SequentialEvent_NullParameterValidation()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();

            XAssert.AssertException(() => { algorithm.ValidateParameters(null); }, "{0}.ValidateParameters(null)", algorithm.GetType().Name);
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on null parameters.")]
        public void SequentialProducer_NullParameterValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();

            XAssert.AssertException(() => { algorithm.ValidateParameters(null); }, "{0}.ValidateParameters(null)", algorithm.GetType().Name);
        }

        #endregion

        #region InsufficientParameterValidation Unit Tests

        [TestCase, Description("Fingerprint algorithm must fail validation on parameters with insufficient data.")]
        public void MD5Event_InsufficientParameterValidation()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();
            var parameter = new EtxMD5EventFingerprintAlgorithm.AlgorithmParameters();

            XAssert.AssertException(() => { algorithm.ValidateParameters(parameter); }, "{0}.ValidateParameters(insufficient)", algorithm.GetType().Name);
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on parameters with insufficient data.")]
        public void SequentialEvent_InsufficientParameterValidation()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();
            var parameter = new SequentialEventFingerprintAlgorithm.AlgorithmParameters();

            XAssert.AssertException(() => { algorithm.ValidateParameters(parameter); }, "{0}.ValidateParameters(insufficient)", algorithm.GetType().Name);
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on parameters with insufficient data.")]
        public void SequentialProducer_InsufficientParameterValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();
            var parameter = new SequentialProducerFingerprintAlgorithm.AlgorithmParameters();

            XAssert.AssertException(() => { algorithm.ValidateParameters(parameter); }, "{0}.ValidateParameters(insufficient)", algorithm.GetType().Name);
        }

        #endregion

        #region ValidParameterValidation Unit Tests

        [TestCase, Description("Fingerprint algorithm must pass validation on parameters with sufficient data.")]
        public void MD5Event_ValidParameterValidation()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();
            var parameter = new EtxMD5EventFingerprintAlgorithm.AlgorithmParameters();

            parameter.Event = new Event(0, "event");

            algorithm.ValidateParameters(parameter);
        }

        [TestCase, Description("Fingerprint algorithm must pass validation on parameters with sufficient data.")]
        public void SequentialEvent_ValidParameterValidation()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();
            var parameter = new SequentialEventFingerprintAlgorithm.AlgorithmParameters();

            parameter.EventName = "event";
            parameter.ProducerSymbol = "producer";
            parameter.Sequence = 0;

            algorithm.ValidateParameters(parameter);
        }

        [TestCase, Description("Fingerprint algorithm must pass validation on parameters with sufficient data.")]
        public void SequentialProducer_ValidParameterValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();
            var parameter = new SequentialProducerFingerprintAlgorithm.AlgorithmParameters();

            parameter.ProducerSymbol = "producer";
            parameter.Sequence = 0;

            algorithm.ValidateParameters(parameter);
        }

        #endregion

        #region GenerateFingerprint Unit Tests

        [TestCase, Description("Generating a fingerprint.")]
        public void MD5Event_GenerateFingerprint()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();
            var parameter = new EtxMD5EventFingerprintAlgorithm.AlgorithmParameters();

            parameter.Event = new Event(0, "event");

            algorithm.GenerateFingerprint(parameter);
        }

        [TestCase, Description("Generating a fingerprint.")]
        public void SequentialEvent_GenerateFingerprint()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();
            var parameter = new SequentialEventFingerprintAlgorithm.AlgorithmParameters();

            parameter.EventName = "event";
            parameter.ProducerSymbol = "producer";
            parameter.Sequence = 0;

            algorithm.GenerateFingerprint(parameter);
        }

        [TestCase, Description("Generating a fingerprint.")]
        public void SequentialProducer_GenerateFingerprint()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();
            var parameter = new SequentialProducerFingerprintAlgorithm.AlgorithmParameters();

            parameter.ProducerSymbol = "producer";
            parameter.Sequence = 0;

            algorithm.GenerateFingerprint(parameter);
        }

        #endregion

        #region CaseInsensitiveFingerprintGeneration Unit Tests

        [TestCase, Description("Verifies that the named base fingerprint algorithms are case insensitive")]
        public void SequentialEvent_CaseInsensitiveFingerprintGeneration()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();

            XAssert.AssertEquals(
                algorithm.GenerateFingerprint("producer", "event", 0),
                algorithm.GenerateFingerprint("PRODUCER", "EVENT", 0),
                "Fingerprint");
        }

        [TestCase, Description("Verifies that the named base fingerprint algorithms are case insensitive")]
        public void SequentialProducer_CaseInsensitiveFingerprintGeneration()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();

            XAssert.AssertEquals(
                algorithm.GenerateFingerprint("producer", 0),
                algorithm.GenerateFingerprint("PRODUCER", 0),
                "Fingerprint");
        }

        #endregion

        #region PreambleValidation Unit Tests

        [TestCase, Description("Verfies the fingerprint preamble")]
        public void SequentialEvent_PreambleValidation()
        {
            var algorithm   = new SequentialEventFingerprintAlgorithm();
            var fingerprint = algorithm.GenerateFingerprint("producer", "event", 0);
            var expected    = new List<byte>();

            expected.Add(0x45); // E
            expected.Add(0x54); // T
            expected.AddRange(BitConverter.GetBytes(algorithm.Version));

            XAssert.AssertEquals(
                (Blob)expected.ToArray(),
                (Blob)((byte[])fingerprint).Take(4).ToArray(),
                "Preamble");
        }

        [TestCase, Description("Verfies the fingerprint preamble")]
        public void SequentialProducer_PreambleValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();
            var fingerprint = algorithm.GenerateFingerprint("producer", 0);
            var expected = new List<byte>();

            expected.Add(0x45); // E
            expected.Add(0x54); // T
            expected.AddRange(BitConverter.GetBytes(algorithm.Version));

            XAssert.AssertEquals(
                (Blob)expected.ToArray(),
                (Blob)((byte[])fingerprint).Take(4).ToArray(),
                "Preamble");
        }

        #endregion

        #region SequenceValidation Unit Tests

        [TestCase, Description("Verfies the fingerprint sequence number")]
        public void SequentialEvent_SequenceValidation()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();
            var fingerprint = algorithm.GenerateFingerprint("producer", "event", 1234);
            var expected = BitConverter.GetBytes((ushort)1234);

            XAssert.AssertEquals(
                (Blob)expected,
                (Blob)((byte[])fingerprint).Skip(12).Take(2).ToArray(),
                "Sequence");
        }

        [TestCase, Description("Verfies the fingerprint sequence number")]
        public void SequentialProducer_SequenceValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();
            var fingerprint = algorithm.GenerateFingerprint("producer", 1234);
            var expected = BitConverter.GetBytes((ushort)1234);

            XAssert.AssertEquals(
                (Blob)expected,
                (Blob)((byte[])fingerprint).Skip(12).Take(2).ToArray(),
                "Sequence");
        }

        #endregion

        #region LengthValidation Unit Tests

        [TestCase, Description("Verifies the fingerprint length")]
        public void MD5Event_LengthValidation()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();

            XAssert.AssertEquals(16, algorithm.GenerateFingerprint(new Event(0, "event")).Length, "Fingerprint.Length");
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on null parameters.")]
        public void SequentialEvent_LengthValidation()
        {
            var algorithm = new SequentialEventFingerprintAlgorithm();

            XAssert.AssertEquals(14, algorithm.GenerateFingerprint("producer", "event", 0).Length, "Fingerprint.Length");
        }

        [TestCase, Description("Fingerprint algorithm must fail validation on null parameters.")]
        public void SequentialProducer_LengthValidation()
        {
            var algorithm = new SequentialProducerFingerprintAlgorithm();

            XAssert.AssertEquals(14, algorithm.GenerateFingerprint("producer", 0).Length, "Fingerprint.Length");
        }

        #endregion

        #region AlgorithmLegacyEquivalenceCheck Unit Test

        [TestCase, Description("Verifies that the MD5Event algorithm is equivalent with the hashing algorithm introduced in Berlin")]
        public void MD5Event_AlgorithmLegacyEquivalenceCheck()
        {
            var algorithm = new EtxMD5EventFingerprintAlgorithm();
            var xml = // event pulled from npdb that was generated with the berlin algorithm
                @"
                <event id='F7C32030D67FAB3EC3CFAFA90EB346FC' value='8' index='7' symbol='DashAppSpinnerShow' category='Standard' logstringid='DASHAPPSPS' header='2' owners='MagnumCI'>
                  <description>Showing DashApp load spinner</description>
                  <datafields>
                    <data ordinal='1' name='AppName' inType='AnsiString' outType='String' />
                    <data ordinal='2' name='ConsoleId' inType='Binary' autovalue='ConsoleId' autovaluecreator='LocalConsumer' outType='ConsoleId' />
                    <data ordinal='3' name='LogonId' inType='UInt32' autovalue='LogonId' autovaluecreator='LocalConsumer' deprecated='1' outType='HexNumber' />
                    <data ordinal='4' name='ClientTimestamp' inType='UInt64' autovalue='Timestamp' autovaluecreator='LocalConsumer' outType='DateTime' />
                    <data ordinal='5' name='FlowToken' inType='UInt64' autovalue='FlowToken' autovaluecreator='LocalConsumer' outType='FlowToken' />
                    <data ordinal='6' name='PrimarySgNonce' inType='UInt64' autovalue='PrimarySgNonce' autovaluecreator='LocalConsumer' outType='HexNumber' />
                    <data ordinal='7' name='WebRepGroupId' inType='UInt32' autovalue='WebRepGroupId' autovaluecreator='LocalConsumer' outType='HexNumber' />
                    <data ordinal='8' name='FlashVersion' inType='UInt32' autovalue='SystemVersion' autovaluecreator='LocalConsumer' outType='XexVersion' />
                    <data ordinal='9' name='AppId' inType='UInt64' outType='HexNumber' />
                    <data ordinal='10' name='SessionId' inType='UInt32' outType='HexNumber' />
                  </datafields>
                </event>";
            var element = XElement.Parse(xml);
            var evt = new Event(element);

            XAssert.AssertEquals(evt.Fingerprint, algorithm.GenerateFingerprint(evt), "Fingerprint");
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\TestXDateTime.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Diagnostics;

using ServerTestFramework;
using ServerTestFramework.LiveService;

using xonline.common.service;

namespace xonline.common.core.test
{
	[TestGroup, DVT, Owner("kgoodier")]
	public class XDateTimeDVT
	{
        [TestCase]
        public void Format()
        {
            string dtStr = "2001/02/03 04:05:06.789";
            DateTime dt = DateTime.Parse(dtStr);
            string xdtStr = XDateTime.ToString(dt);
            string dtStr2 = dt.ToString("yyyy/MM/dd HH:mm:ss.fff");

            XAssert.AssertEquals<string>(dtStr, xdtStr, "ToString of DateTime {0}", dt.ToString());
            XAssert.AssertEquals<string>(dtStr, dtStr2, "Ensure formatter is the same");
        }

        [TestCase]
        public void Faster()
        {
            int i = 0;
            DateTime dtStart;
            TimeSpan elapsedOld;
            TimeSpan elapsedNew;

            dtStart = DateTime.UtcNow;
            for (i = 0; i < 100000; i++)
            {
                string str = DateTime.UtcNow.ToString("yyyy/MM/dd HH:mm:ss.fff");
            }
            elapsedOld = DateTime.UtcNow - dtStart;
            Global.RO.Info("100000 iterations of DateTime.ToString() completed in {0} ms", elapsedOld.TotalMilliseconds);

            dtStart = DateTime.UtcNow;
            for (i = 0; i < 100000; i++)
            {
                string str = XDateTime.ToString(DateTime.UtcNow);
            }
            elapsedNew = DateTime.UtcNow - dtStart;
            Global.RO.Info("100000 iterations of XDateTime.ToString() completed in {0} ms", elapsedNew.TotalMilliseconds);

            XAssert.AssertTrue(elapsedNew.TotalMilliseconds <= elapsedOld.TotalMilliseconds, "Old elapsed {0} ms not longer than New elapsed {1} ms", elapsedOld.TotalMilliseconds, elapsedNew.TotalMilliseconds);
        }

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\EtxLoader.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Xml.Schema;
using System.Text;
using System.Threading;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.config;
using xonline.common.core.etx;
using xonline.common.sql.sqlclient;
using xonline.common.utilities2;

namespace xonline.common.core.test
{
    [TestGroup, DVT, Owner("jojohn")]
	public class EtxLoaderDVT
	{
        public readonly static EtxManifest DefaultManifest = new EtxManifest();
        public readonly static EtxManifest HeadedManifest  = new EtxManifest();
        public readonly static Producer    DefaultProducer = new Producer("BugTroubleshooter", Blob.Parse("8883acbb26704934b0e231a27522a54f")) { Description = "A Bug Troubleshooter" };
        public readonly static Producer    DefaultProducer2= new Producer("BugTroublemaker", Blob.Parse("5f3a0dd04d8a4379b3f63952ae23dd75")) { Description = "A Bug Troublemaker" };
        public readonly static Producer    DefaultProducer3= new Producer("AddProducer", Blob.Parse("af5f4861a86d422596e9e1f03579cfe0")) { Description = "Add this later" };
        public readonly static Producer    HeadedProducer1 = new Producer("ProducerWithHeaders", Blob.Parse("8d66d09c0d5944009dc10fa986b6bf7f")) { Description = "This Producers Description 1" };
        public readonly static Producer    HeadedProducer2 = new Producer("ProducerWithHeaders", Blob.Parse("d253bbf23a144a038de024e7162af1ac")) { Description = "This Producers Description 2" };
        public readonly static Event       DefaultEvent    = new Event(0, "MissingSemicolan") { Category = EventCategory.Standard, Description = "Missing Semi-colan", LogStringId = "MSC", OmnitureArea = "CodeDefects" };
        public readonly static Event       DefaultEvent2   = new Event(1, "InfiniteLoop") { Category = EventCategory.Standard, Description = "Infinite Loop", Deprecated = true, LogStringId = "IL", OmnitureArea = "CodeDefects" };
        public readonly static Event       DefaultEvent3   = new Event(0, "DivideByZero") { Category = EventCategory.Standard, Description = "Divided By Zero", Deprecated = true, LogStringId = "DIV", OmnitureArea = "CodeDefects", HeaderVersion = 1 };
        public readonly static Event       DefaultHeader1  = new Event(1, "Header1");
        public readonly static Event       DefaultHeader2  = new Event(2, "Header2");
        public readonly static Event       HeadedEvent1    = new Event(0, "EventHead") { Category = EventCategory.Standard, Description = "EventHead Description", Deprecated = true, LogStringId = "EH", OmnitureArea = "Your Face!!", HeaderVersion = 1 };
        public readonly static Event       HeadedEvent2    = new Event(1, "EventHead1") { Category = EventCategory.Standard, Description = "EventHead1 Description", Deprecated = true, LogStringId = "EH1", OmnitureArea = "Shakuras", HeaderVersion = 2 };
        public readonly static Event       HeadedEvent3    = new Event(0, "EventHead2") { Category = EventCategory.Standard, Description = "EventHead2 Description", Deprecated = true, LogStringId = "EH2", OmnitureArea = "Pi-R-Squared", HeaderVersion = 1 };
        public readonly static Event       HeadedEvent4    = new Event(1, "EventHead3") { Category = EventCategory.Standard, Description = "EventHead3 Description", Deprecated = true, LogStringId = "EH3", OmnitureArea = "Earth", HeaderVersion = 2 };
        

        public readonly static Event       _157838Header_SuperSet   = new Event(128, "SuperSet") { Category = EventCategory.Standard, Description = "SuperSet Description", Deprecated = true, LogStringId = "EH3", OmnitureArea = "Earth", HeaderVersion = 128 };
        public readonly static Event       _157838Header_SubSet     = new Event(129, "SubSet") { Category = EventCategory.Standard, Description = "Subset Description", Deprecated = true, LogStringId = "EH4", OmnitureArea = "Wind", HeaderVersion = 129 };
        public readonly static Producer    _157838Producer          = new Producer("Regression 157838", Blob.Parse("fdf525f4cd9a4cb8b06d3dcdf692217f")) { Description = "A Bug Regression Test" };
        public readonly static Event       _157838Event             = new Event(0, "REG") { Category=EventCategory.Clickstream, HeaderVersion=(byte)_157838Header_SuperSet.Ordinal, LogStringId="LSI", OmnitureArea="OMNIA" };

        public readonly static Event       _160972Event             = new Event(1, "TheEvent") { Category = EventCategory.Standard, Description = "I Pity tha foo'", LogStringId = "TH", OmnitureArea = "FroHawk", HeaderVersion = 123 };
        public readonly static Producer    _160972Producer          = new Producer("Regression 160972", Blob.Parse("8d69036a5e5140ae947a710b00e693f0")) { Description = "A Bug Regression Test" };

        static EtxLoaderDVT()
        {
            //if (Config.DataProvider is NullDataProvider)
            //{
            //    Config.DefaultInstance = ConfigInstance.Create();
            //}

            DefaultProducer.Events.Add(DefaultEvent);
            DefaultProducer.Events.Add(DefaultEvent2);

            DefaultProducer2.Events.Add(DefaultEvent);
            DefaultProducer2.Events.Add(DefaultEvent2);
            
            DefaultProducer3.Events.Add(DefaultEvent3);

            DefaultManifest.Producers.Add(DefaultProducer);
            DefaultManifest.Producers.Add(DefaultProducer2);

            HeadedManifest.Producers.Add(HeadedProducer1);
            HeadedManifest.Producers.Add(HeadedProducer2);

            DefaultHeader1.DataFields.Add(new DataField(0, "Pirate") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            DefaultHeader1.DataFields.Add(new DataField(1, "Ninja") { AutoValue = AutoValues.FamilySettings, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.AnsiString, OutType = OutputType.HexNumber });

            DefaultHeader2.DataFields.Add(new DataField(0, "Zealot") { AutoValue = AutoValues.CultureId, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            DefaultHeader2.DataFields.Add(new DataField(1, "Zergling") { AutoValue = AutoValues.ConsoleId, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.AnsiString, OutType = OutputType.HexNumber });

            HeadedProducer1.Events.Add(HeadedEvent1);
            HeadedProducer1.Events.Add(HeadedEvent2);

            HeadedProducer2.Events.Add(HeadedEvent3);
            HeadedProducer2.Events.Add(HeadedEvent4);

            HeadedEvent1.DataFields.Add(new DataField(0, "SCV") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            HeadedEvent2.DataFields.Add(new DataField(0, "Probe") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            HeadedEvent3.DataFields.Add(new DataField(0, "Drone") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            HeadedEvent4.DataFields.Add(new DataField(0, "Mule") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });

            _157838Header_SuperSet.DataFields.Add(new DataField(0, "SCV") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });
            _157838Header_SuperSet.DataFields.Add(new DataField(1, "Probe") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });

            _157838Header_SubSet.DataFields.Add(new DataField(0, "SCV") { AutoValue = AutoValues.FlowToken, AutoValueCreator = AutoValueCreators.LiveService, InType = DataFieldType.UInt64, OutType = OutputType.HexNumber });

            _157838Producer.Events.Add(_157838Event);

            _160972Producer.Events.Add(_160972Event);
        }

        private SqlClient CreateTransactionSqlClient()
        {
            SqlClient connection = new SqlClient(Interface.npdb);

            connection.Command.CommandTimeout = 15;
            connection.Command.Transaction = connection.Command.Connection.BeginTransaction(IsolationLevel.ReadCommitted);

            // move the box to a known state.
            connection.Command.CommandText = @"
DELETE FROM t_etx_producer_event_mappings where vb_producer_fingerprint != 0x00
DELETE FROM t_etx_manifest_events where vc_symbol not like 'ServiceHeader%'
DELETE FROM t_etx_manifest_producers WHERE vb_producer_fingerprint != 0x00
";
            connection.Command.CommandType = CommandType.Text;

            connection.ExecuteNonQuery();

            return connection;
        }

        private SqlClient UploadHeaderDefinition(Event eventDefinition)
        {
            SqlClient connection;

            connection = null;

            try
            {
                connection = CreateTransactionSqlClient();

                return UploadHeaderDefinition(connection, eventDefinition);
            }
            catch
            {
                if (null != connection)
                {
                    connection.Dispose();
                }

                throw;
            }
        }

        private SqlClient UploadHeaderDefinition(SqlClient connection, Event eventDefinition)
        {
            EtxLoader.NPDB.UploadHeaderDefinition(connection, (byte)eventDefinition.Value, eventDefinition);
            EtxLoader.NPDB.HeaderDefinitionCache.Clear();

            return connection;
        }

        private SqlClient UploadProducer(Producer producer)
        {
            SqlClient connection;

            connection = null;

            try
            {
                connection = CreateTransactionSqlClient();

                return UploadProducer(connection, producer);
            }
            catch
            {
                if (null != connection)
                {
                    connection.Dispose();
                }

                throw;
            }
        }

        private SqlClient UploadProducer(SqlClient connection, Producer producer)
        {
            EtxLoader.NPDB.UploadProducer(connection, producer);

            return connection;
        }

        private void EventEquals(Event expected, Event actual)
        {            
            XAssert.AssertEquals(expected.Ordinal, actual.Ordinal, "Event.Ordinal");
            XAssert.AssertEquals(expected.Category, actual.Category, "Event.Category");
            XAssert.AssertEquals(expected.Deprecated, actual.Deprecated, "Event.Deprecated");
            XAssert.AssertEquals(expected.Description, actual.Description, "Event.Description");
            XAssert.AssertEquals(expected.LogStringId, actual.LogStringId, "Event.LogStringId");
            XAssert.AssertEquals(expected.OmnitureArea, actual.OmnitureArea, "Event.OmnitureArea");
            XAssert.AssertEquals(expected.Symbol, actual.Symbol, "Event.Symbol");
            XAssert.AssertEquals(expected.Fingerprint, actual.Fingerprint, "Event.Fingerprint");
        }

        private void EventEquals(Event expected, Event actual, Event header)
        {
            EventEquals(expected, actual);

            // For a header defintion, "Value" is the "HeaderVersion".
            XAssert.AssertEquals(header.Value, actual.HeaderVersion, "HeaderVersion");
            XAssert.AssertTrue(actual.HeaderVersion != 0, "actualEvent.HeaderVersion != 0");
            XAssert.AssertEquals(header.DataFields.Count, actual.HeaderFields.Count, "Event.HeaderFields.Count");

            foreach (DataField field in header.DataFields)
            {
                XAssert.AssertTrue(actual.HeaderFields.Ordinals.Contains(field.Ordinal), "Contains(Event.HeaderFields.Ordinal[{0}])", field.Ordinal);
                XAssert.AssertEquals(field, actual.HeaderFields.Ordinals[field.Ordinal], "Event.HeaderFields.Ordinal[{0}]", field.Ordinal);
            }
        }

        [TestCase, Description("Empty result set from normalization producer sproc.")]
        public void _Regression_160832()
        {
            using (SqlClient connection = UploadProducer(_160972Producer))
            {
                try
                {
                    var manifest = new EtxManifest();
                    DateTime minProducer = SqlDateTime.MinValue.Value; // yields all producers
                    DateTime minEvent= SqlDateTime.MaxValue.Value; // yields no events
                    Blob[] removed;

                    // this used to blow up
                    EtxLoader.NPDB.GetManifestDelta(connection, manifest, ProducerFetchMode.Normalized, ref minProducer, ref minEvent, out removed);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase, Description("Empty producers are not valid for ingestion.")]
        public void _Regression_160409()
        {
            Producer producer;
            XmlSerializer serializer;
            StringBuilder sb;

            producer = new Producer("NoElements", Blob.Parse("0x01234"));
            serializer = new XmlSerializer(typeof(Producer));

            sb = new StringBuilder();

            using (XmlWriter writer = XmlWriter.Create(sb))
            {
                //serialize producer with no elements
                serializer.Serialize(writer, producer);
            }

            using (StringReader sr = new StringReader(sb.ToString()))
            {
                using (XmlReader xr = EtxLoader.NPDB.CreateValidatingReader(sr))
                {
                    try
                    {
                        while (xr.Read()) ;
                    }
                    catch (XmlSchemaException e)
                    {
                        Global.RO.Info("XmlSchemaException occurred as expected: {0}", e.Message);

                        return;
                    }
                }
            }

            XAssert.AssertFail("XmlSchemaException was not thrown as expected.");
        }

        [TestCase, Description("Single invalid header version blocking etx manifest consumption.  Instead an event is fired and the header version is reset to 0 locally.")]
        public void _Regression_160972()
        {
            using (SqlClient connection = UploadProducer(_160972Producer))
            {
                try
                {
                    var producer = EtxLoader.NPDB.GetProducer(connection, _160972Producer.Fingerprint, ProducerFetchMode.Normalized);

                    XAssert.AssertEquals(0, producer.Events.Fingerprints[_160972Event.Fingerprint].HeaderVersion, "Event.HeaderVersion");
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase, Description("Producer merge not recognizing change when new header field definition is a subset of the orginal")]
        public void _Regression_157838()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(_157838Header_SuperSet), _157838Header_SubSet), _157838Producer))
            {
                try
                {
                    var producer = EtxLoader.NPDB.GetProducer(connection, _157838Producer.Fingerprint, ProducerFetchMode.Normalized);


                    EventEquals(
                        _157838Event,
                        producer.Events.First(e => e.Fingerprint == _157838Event.Fingerprint),
                        _157838Header_SuperSet);

                    connection.Command.CommandText = string.Format("UPDATE t_etx_producer_event_mappings SET i_event_header_version = {0} WHERE vb_producer_fingerprint=0x{1}", _157838Header_SubSet.Ordinal, _157838Producer.Fingerprint);
                    connection.Command.CommandType = CommandType.Text;

                    connection.ExecuteNonQuery();

                    var producer2 = EtxLoader.NPDB.GetProducer(connection, _157838Producer.Fingerprint, ProducerFetchMode.Normalized);

                    producer.Merge(producer2);

                    EventEquals(
                        _157838Event,
                        producer.Events.First(e => e.Fingerprint == _157838Event.Fingerprint),
                        _157838Header_SubSet);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void UploadHeaderDefinition()
        {
            using (SqlClient connection = UploadHeaderDefinition(DefaultHeader1))
            {
                try
                {
                    Event event1;

                    EtxLoader.NPDB.UploadHeaderDefinition(connection, (byte)DefaultHeader1.Value, DefaultHeader1);

                    event1 = EtxLoader.NPDB.GetHeaderDefinition(connection, (byte)DefaultHeader1.Value);

                    XAssert.AssertEquals(
                        DefaultHeader1.CalculateFingerprint(),
                        event1.CalculateFingerprint(),
                        "Header.CalculatedFingerprint");
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetHeaderDefinitions()
        {
            using (SqlClient connection = UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2))
            {

                try
                {
                    List<Event> headers;

                    headers = new List<Event>(EtxLoader.NPDB.GetHeaderDefinitions(connection));

                    XAssert.AssertTrue(headers.Count >= 2, "Headers.Count");
                    
                    XAssert.AssertTrue(
                        headers.Exists(h => h.CalculateFingerprint() == DefaultHeader1.CalculateFingerprint()),
                        "Headers Contains Header1 [{0}]",
                        DefaultHeader1.CalculateFingerprint());

                    XAssert.AssertTrue(
                        headers.Exists(h => h.CalculateFingerprint() == DefaultHeader2.CalculateFingerprint()),
                        "Headers Contains Header2 [{0}]",
                        DefaultHeader2.CalculateFingerprint());
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void UploadManifest()
        {
            using (SqlClient connection = CreateTransactionSqlClient())
            {
                try
                {
                    EtxLoader.NPDB.UploadManifest(connection, DefaultManifest);

                    var producer = EtxLoader.NPDB.GetProducer(connection, DefaultProducer.Fingerprint, ProducerFetchMode.Normalized);

                    EventEquals(
                        DefaultEvent,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEvent()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    EventEquals(
                        DefaultEvent,
                        EtxLoader.NPDB.GetEvent(connection, DefaultEvent.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEvent_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1))
            {
                try
                {
                    Event e;

                    EventEquals(
                        HeadedEvent1,
                        e = EtxLoader.NPDB.GetEvent(connection, HeadedEvent1.Fingerprint),
                        DefaultHeader1);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEvent_WithDefaultHeader()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    // etx_default_header_version determines the default version.
                    byte defaultHeaderVersion = (byte)Config.GetIntSetting(Setting.etx_default_header_version);
                    Event headerEvent = EtxLoader.NPDB.GetHeaderDefinition(connection, defaultHeaderVersion);

                    EventEquals(
                        DefaultEvent,
                        EtxLoader.NPDB.GetEvent(connection, DefaultEvent.Fingerprint),
                        headerEvent);

                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEvents()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEvents(connection, DefaultProducer.Events.Fingerprints);

                    EventEquals(
                        DefaultEvent,
                        events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEvents_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEvents(connection, HeadedProducer1.Events.Fingerprints);

                    EventEquals(
                        HeadedEvent1,
                        events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint),
                        DefaultHeader2);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEventVersionsByLogStringId()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEventVersionsByLogStringId(connection, DefaultEvent.LogStringId);

                    EventEquals(
                        DefaultEvent,
                        events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEventVersionsByLogStringId_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(DefaultHeader1), HeadedProducer1))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEventVersionsByLogStringId(connection, HeadedEvent1.LogStringId);

                    EventEquals(
                        HeadedEvent1,
                        events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEventVersionsBySymbol()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEventVersionsBySymbol(connection, DefaultEvent.Symbol);

                    EventEquals(
                        DefaultEvent,
                        events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetEventVersionsBySymbol_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(DefaultHeader1), HeadedProducer1))
            {
                try
                {
                    var events = EtxLoader.NPDB.GetEventVersionsBySymbol(connection, HeadedEvent1.Symbol);

                    EventEquals(
                        HeadedEvent1,
                        events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducer_Normalized()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    var producer = EtxLoader.NPDB.GetProducer(connection, DefaultProducer.Fingerprint, ProducerFetchMode.Normalized);

                    EventEquals(
                        DefaultEvent,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducer_Normalized_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1))
            {
                try
                {
                    var producer = EtxLoader.NPDB.GetProducer(connection, HeadedProducer1.Fingerprint, ProducerFetchMode.Normalized);

                    EventEquals(
                        HeadedEvent1,
                        producer.Events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        producer.Events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducer_Raw()
        {
            using (SqlClient connection = UploadProducer(DefaultProducer))
            {
                try
                {
                    var producer = EtxLoader.NPDB.GetProducer(connection, DefaultProducer.Fingerprint, ProducerFetchMode.Raw);

                    EventEquals(
                        DefaultEvent,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        producer.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducers_Normalized()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2))
            {
                try
                {
                    var producers = EtxLoader.NPDB.GetProducers(connection, DefaultManifest.Producers.Fingerprints, ProducerFetchMode.Normalized);
                    var prod1 = producers.First(p => p.Fingerprint == DefaultProducer.Fingerprint);
                    var prod2 = producers.First(p => p.Fingerprint == DefaultProducer2.Fingerprint);

                    XAssert.AssertEquals(DefaultProducer.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(DefaultProducer.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(DefaultProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(DefaultProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        DefaultEvent,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));

                    EventEquals(
                        DefaultEvent,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducers_Normalized_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1), HeadedProducer2))
            {
                try
                {
                    var producers = EtxLoader.NPDB.GetProducers(connection, HeadedManifest.Producers.Fingerprints, ProducerFetchMode.Normalized);
                    var prod1 = producers.First(p => p.Fingerprint == HeadedProducer1.Fingerprint);
                    var prod2 = producers.First(p => p.Fingerprint == HeadedProducer2.Fingerprint);

                    XAssert.AssertEquals(HeadedProducer1.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(HeadedProducer1.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(HeadedProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(HeadedProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        HeadedEvent1,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint),
                        DefaultHeader2);

                    EventEquals(
                        HeadedEvent3,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent3.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent4,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent4.Fingerprint),
                        DefaultHeader2);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducers_Raw()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2))
            {
                try
                {
                    var producers = EtxLoader.NPDB.GetProducers(connection, DefaultManifest.Producers.Fingerprints, ProducerFetchMode.Raw);
                    var prod1 = producers.First(p => p.Fingerprint == DefaultProducer.Fingerprint);
                    var prod2 = producers.First(p => p.Fingerprint == DefaultProducer2.Fingerprint);

                    XAssert.AssertEquals(DefaultProducer.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(DefaultProducer.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(DefaultProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(DefaultProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        DefaultEvent,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));

                    EventEquals(
                        DefaultEvent,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducerVersionsBySymbol()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2))
            {
                try
                {
                    var producers = EtxLoader.NPDB.GetProducerVersionsBySymbol(connection, DefaultProducer.Symbol, ProducerFetchMode.Normalized);
                    var prod = producers.First(p => p.Fingerprint == DefaultProducer.Fingerprint);

                    XAssert.AssertEquals(DefaultProducer.Symbol, prod.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(DefaultProducer.Description, prod.Description, "Producer.Description");

                    EventEquals(
                        DefaultEvent,
                        prod.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetProducerVersionsBySymbol_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1), HeadedProducer2))
            {
                try
                {
                    var producers = EtxLoader.NPDB.GetProducerVersionsBySymbol(connection, HeadedProducer1.Symbol, ProducerFetchMode.Normalized);
                    var prod = producers.First(p => p.Fingerprint == HeadedProducer1.Fingerprint);

                    XAssert.AssertEquals(HeadedProducer1.Symbol, prod.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(HeadedProducer1.Description, prod.Description, "Producer.Description");

                    EventEquals(
                        HeadedEvent1,
                        prod.Events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        prod.Events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint),
                        DefaultHeader2);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetManifest()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2))
            {
                try
                {
                    DateTime newp, newe;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, ProducerFetchMode.Normalized, out newp, out newe);
                    var prod1 = manifest.Producers.First(p => p.Fingerprint == DefaultProducer.Fingerprint);
                    var prod2 = manifest.Producers.First(p => p.Fingerprint == DefaultProducer2.Fingerprint);

                    XAssert.AssertEquals(DefaultProducer.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(DefaultProducer.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(DefaultProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(DefaultProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        DefaultEvent,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));

                    EventEquals(
                        DefaultEvent,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetManifest_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1), HeadedProducer2))
            {
                try
                {
                    DateTime newp, newe;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, ProducerFetchMode.Normalized, out newp, out newe);
                    var prod1 = manifest.Producers.First(p => p.Fingerprint == HeadedProducer1.Fingerprint);
                    var prod2 = manifest.Producers.First(p => p.Fingerprint == HeadedProducer2.Fingerprint);

                    XAssert.AssertEquals(HeadedProducer1.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(HeadedProducer1.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(HeadedProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(HeadedProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        HeadedEvent1,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint),
                        DefaultHeader2);

                    EventEquals(
                        HeadedEvent3,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent3.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent4,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent4.Fingerprint),
                        DefaultHeader2);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetManifest_ViaFingerprints()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2))
            {
                try
                {
                    DateTime newp, newe;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, DefaultManifest.Producers.Fingerprints, ProducerFetchMode.Normalized, out newp, out newe);
                    var prod1 = manifest.Producers.First(p => p.Fingerprint == DefaultProducer.Fingerprint);
                    var prod2 = manifest.Producers.First(p => p.Fingerprint == DefaultProducer2.Fingerprint);

                    XAssert.AssertEquals(DefaultProducer.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(DefaultProducer.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(DefaultProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(DefaultProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        DefaultEvent,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod1.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));

                    EventEquals(
                        DefaultEvent,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent.Fingerprint));

                    EventEquals(
                        DefaultEvent2,
                        prod2.Events.First(e => e.Fingerprint == DefaultEvent2.Fingerprint));
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetManifest_ViaFingerprints_WithHeader()
        {
            using (SqlClient connection = UploadProducer(UploadProducer(UploadHeaderDefinition(UploadHeaderDefinition(DefaultHeader1), DefaultHeader2), HeadedProducer1), HeadedProducer2))
            {
                try
                {
                    DateTime newp, newe;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, HeadedManifest.Producers.Fingerprints, ProducerFetchMode.Normalized, out newp, out newe);
                    var prod1 = manifest.Producers.First(p => p.Fingerprint == HeadedProducer1.Fingerprint);
                    var prod2 = manifest.Producers.First(p => p.Fingerprint == HeadedProducer2.Fingerprint);

                    XAssert.AssertEquals(HeadedProducer1.Symbol, prod1.Symbol, "Producer.Symbol");
                    XAssert.AssertEquals(HeadedProducer1.Description, prod1.Description, "Producer.Description");

                    XAssert.AssertEquals(HeadedProducer2.Symbol, prod2.Symbol, "Producer2.Symbol");
                    XAssert.AssertEquals(HeadedProducer2.Description, prod2.Description, "Producer2.Description");

                    EventEquals(
                        HeadedEvent1,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent1.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent2,
                        prod1.Events.First(e => e.Fingerprint == HeadedEvent2.Fingerprint),
                        DefaultHeader2);

                    EventEquals(
                        HeadedEvent3,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent3.Fingerprint),
                        DefaultHeader1);

                    EventEquals(
                        HeadedEvent4,
                        prod2.Events.First(e => e.Fingerprint == HeadedEvent4.Fingerprint),
                        DefaultHeader2);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void GetManifestDelta()
        {
            using (SqlClient connection = UploadHeaderDefinition(UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2), DefaultHeader1))
            {
                try
                {
                    DateTime newp, newe;
                    Blob[] removed;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, ProducerFetchMode.Normalized, out newp, out newe);

                    Thread.Sleep(200);

                    using (SqlCommand command = connection.Command.Connection.CreateCommand())
                    {
                        command.Transaction = connection.Command.Transaction;

                        command.CommandText = string.Format("DELETE FROM t_etx_producer_event_mappings WHERE vb_producer_fingerprint = 0x{0}\n", DefaultProducer2.Fingerprint);
                        command.CommandText += string.Format("DELETE FROM t_etx_manifest_producers WHERE vb_producer_fingerprint = 0x{0}\n", DefaultProducer2.Fingerprint);
                        command.CommandType = CommandType.Text;

                        command.ExecuteNonQuery();
                    }

                    UploadProducer(connection, DefaultProducer3);

                    var delta = EtxLoader.NPDB.GetManifestDelta(connection, manifest, ProducerFetchMode.Normalized, ref newp, ref newe, out removed);

                    XAssert.AssertEquals(1, removed.Length, "Removed.Length");
                    XAssert.AssertEquals(DefaultProducer2.Fingerprint, removed[0], "Removed[0]");

                    XAssert.AssertEquals(1, delta.Producers.Count, "Delta.Producers.Count");

                    var prod = delta.Producers.First(p => p.Fingerprint == DefaultProducer3.Fingerprint);

                    EventEquals(
                        DefaultEvent3,
                        prod.Events.First(e => e.Fingerprint == DefaultEvent3.Fingerprint),
                        DefaultHeader1);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }

        [TestCase]
        public void UpdateManifest()
        {
            using (SqlClient connection = UploadHeaderDefinition(UploadProducer(UploadProducer(DefaultProducer), DefaultProducer2), DefaultHeader1))
            {
                try
                {
                    DateTime newp, newe;

                    var manifest = EtxLoader.NPDB.GetManifest(connection, ProducerFetchMode.Normalized, out newp, out newe);

                    Thread.Sleep(200);

                    using (SqlCommand command = connection.Command.Connection.CreateCommand())
                    {
                        command.Transaction = connection.Command.Transaction;

                        command.CommandText = string.Format("DELETE FROM t_etx_producer_event_mappings WHERE vb_producer_fingerprint = 0x{0}\n", DefaultProducer2.Fingerprint);
                        command.CommandText += string.Format("DELETE FROM t_etx_manifest_producers WHERE vb_producer_fingerprint = 0x{0}\n", DefaultProducer2.Fingerprint);
                        command.CommandType = CommandType.Text;

                        command.ExecuteNonQuery();
                    }

                    UploadProducer(connection, DefaultProducer3);

                    XAssert.AssertEquals(
                        true,
                        EtxLoader.NPDB.UpdateManifest(connection, manifest, ProducerFetchMode.Normalized, ref newp, ref newe),
                        "UpdateManifest");

                    XAssert.AssertEquals(false, manifest.Producers.Fingerprints.Contains(DefaultProducer2.Fingerprint), "Producer[{0}]", DefaultProducer2.Fingerprint);
                    XAssert.AssertEquals(true, manifest.Producers.Fingerprints.Contains(DefaultProducer3.Fingerprint), "Producer[{0}]", DefaultProducer3.Fingerprint);

                    EventEquals(
                        DefaultEvent3,
                        manifest.Producers.Fingerprints[DefaultProducer3.Fingerprint].Events.First(e => e.Fingerprint == DefaultEvent3.Fingerprint),
                        DefaultHeader1);
                }
                finally
                {
                    // clean up - dont commit changes to db
                    connection.RollbackTransaction();
                }
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\XAssert.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.Text;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.core.etx;

namespace xonline.common.core.test
{
    public static class XAssert
    {
        private static string SerializeXml(IXmlSerializable obj)
        {
            XmlSerializer serializer;

            serializer = new XmlSerializer(obj.GetType());

            using (MemoryStream ms = new MemoryStream())
            {
                using (StreamWriter sw = new StreamWriter(ms))
                {
                    using (XmlWriter writer = XmlWriter.Create(sw))
                    {
                        serializer.Serialize(writer, obj);
                    }

                    ms.Position = 0;

                    return Encoding.UTF8.GetString(ms.ToArray());
                }
            }
        }

        public static void AssertSerializationStructureExtended(IXmlSerializable obj, Func<TextReader, XmlReader> readerCreator, Func<Func<XmlReader, XDocument>, XmlReader, XDocument> deserializationContainer, XDocument expectedFormat, string format, params object[] args)
        {
            XmlSerializer serializer;
            XDocument actual;

            serializer = new XmlSerializer(obj.GetType());
            actual = null;

            using (XmlReader reader = readerCreator(new StringReader(SerializeXml(obj))))
            {
                actual = deserializationContainer(arg => XDocument.Load(arg, LoadOptions.None), reader);

                if (!XDocument.DeepEquals(expectedFormat, actual))
                {
                    string message = string.Format(
                        "XmlSerialization did not match: {0}.\nEXPECTED:\n{1}\nACTUAL:\n{2}",
                        string.Format(format, args),
                        expectedFormat,
                        actual);

                    AssertFail(message);
                }
            }
        }

        public static void AssertEtxSerializationStructure(IXmlSerializable obj, XDocument expectedFormat, string format, params object[] args)
        {
            AssertSerializationStructureExtended(
                obj,
                sr => XmlReader.Create(sr, EtxLoader.NPDB.DownloadValidationSettings()),
                (func, reader) => 
                {
                    try
                    {
                        return func(reader);
                    }
                    catch (XmlSchemaValidationException e)
                    {
                        string message;

                        message = string.Format("XElement validated failed at ({0}, {1}): {2}\nXML:\n{3}\n",
                            e.LineNumber,
                            e.LinePosition,
                            e.Message,
                            SerializeXml(obj));

                        AssertFail(message);

                        return null; // code not reachable
                    }
                },
                expectedFormat,
                format,
                args);
        }

        public static void AssertSerializationStructure(IXmlSerializable obj, XDocument expectedFormat, string format, params object[] args)
        {
            AssertSerializationStructureExtended(
                obj,
                sr => XmlReader.Create(sr),
                (func, reader) => func(reader),
                expectedFormat,
                format,
                args);
        }

        public static void AssertEquals<T>(T a, T b, string format, params object[] args)
        {
            string message;

            message = string.Format(
                "error {2} {0} != {1}", a, b, string.Format(format, args));

            if (null == a)
            {
                if (null != b)
                {
                    AssertFail(message);
                }
            }
            else
            {
                if (!a.Equals(b))
                {
                    AssertFail(message);
                }
            }
        }

        public static void AssertTrue(bool item, string format, params object[] args)
        {
            if (!item)
            {
                AssertFail(string.Format("error not true {0}", string.Format(format, args)));
            }
        }

        public static void AssertPresent<K, T>(IDictionary<K, T> dictionary, K key, string format, params object[] args)
        {
            if (!dictionary.ContainsKey(key))
            {
                AssertFail(string.Format("error {1} : item '{0}' not found in dictionary.", key, string.Format(format, args)));
            }
        }

        public static void AssertPresent<T>(IEnumerable<T> collection, Func<T, bool> predicate, string format, params object[] args)
        {
            if (!collection.Any(predicate))
            {
                AssertFail(string.Format("error {0} : item could not be found in collection.", string.Format(format, args)));
            }
        }

        public static void AssertException(Action action, string format, params object[] args)
        {
            AssertException<Exception>(action, format, args);
        }

        public static void AssertException<E>(Action action, string format, params object[] args) where E : Exception
        {
            try
            {
                action();
            }
            catch (Exception e)
            {
                if (e is E)
                {
                    return;
                }

                AssertFail("error {0} : exception of the wrong type ({1}) thrown.", string.Format(format, args), e.GetType().Name);
            }

            AssertFail("error {0} : did not result in an exception being thrown.", string.Format(format, args));
        }

        public static void AssertFail(string format, params object[] args)
        {
            AssertFail(string.Format(format, args));   
        }

        public static void AssertFail(string message)
        {
            Global.RO.Error(message);

            throw new StfException("ASSERTION FAILED!!!11One");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\EtxManifestDVT.cs ===
using System;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using System.Xml;
using System.Text;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.utilities2;
using xonline.common.core.etx;

namespace xonline.common.core.test
{
    [TestGroup, DVT, Owner("jojohn")]
    public class EtxManifestDVT : TestNode
    {
        [TestGroup, DVT, Owner("jojohn")]
        public class Regressions
        {
            [TestCase(138100)]
            public void R138100_ProducerMerge()
            {
                Producer lhs, rhs;

                lhs = new Producer("producer", Blob.Parse("af9a2690194940f69da56ca9f73ed91a")) { Description = "crusty description" };
                rhs = new Producer("producer", Blob.Parse("af9a2690194940f69da56ca9f73ed91a")) { Description = "new description" };

                lhs.Events.Add(new Event(0, "event") { Description = "old description" });
                rhs.Events.Add(new Event(0, "event") { Description = "new description" });

                lhs.Merge(rhs);

                XAssert.AssertEquals("new description", lhs.Description, "Producer.Description");
                XAssert.AssertEquals("new description", lhs.Events.Ordinals[0].Description, "Producer.Events[0].Description");
            }

            [TestCase(138100)]
            public void R138100_EventMerge()
            {
                Producer producer;
                Event lhs, rhs;

                producer = new Producer("producer", Blob.Parse("9703f778cc16465ab3b4b56ab2ba2749"));
                lhs = new Event(0, "event") { Description = "crusty description", LogStringId = "crusty-id" };
                rhs = new Event(0, "event") { Description = "new description", LogStringId = "crusty-id" };

                lhs.Merge(rhs);

                XAssert.AssertEquals("new description", lhs.Description, "Event.Description");
            }

            [TestCase(146197)]
            public void R146197_ManifestMerge()
            {
                EtxManifest lhs, rhs;

                lhs = new EtxManifest();
                rhs = new EtxManifest();

                lhs.Producers.Add(new Producer("Symbol", Blob.Parse("e5498d7ab1a64c2aa83390f01d4aa2fb")));
                rhs.Producers.Add(new Producer("lobmyS", Blob.Parse("e5498d7ab1a64c2aa83390f01d4aa2fb")));

                try
                {
                    lhs.Merge(rhs);
                    XAssert.AssertFail("Merge did not fail.");
                }
                catch
                {
                    
                }
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Serialize
        {
            public static readonly EtxManifest defaultManifest = new EtxManifest();

            public static readonly Producer defaultProducer = new Producer("XblConfig", Blob.Parse("9f592e103bb645c5b13d17e86338ee02"))
            {
                Description = "Producer"
            };

            public static readonly Event defaultEvent = new Event(1, "Event")
            {
                Description = "Another Event",
                LogStringId = "LS-Event",
                Category = EventCategory.Standard
            };

            public static readonly DataField defaultDataField = new DataField(1, "default")
            {
                InType = DataFieldType.Float,
                AutoValue = AutoValues.SystemVersion,
                AutoValueCreator = AutoValueCreators.LiveService,
                Deprecated = true,
                OmnitureVar = "Events",
                OutType = OutputType.Float
            };

            [TestCase]
            public void DataField_Complete()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),
                        new XAttribute("name", "default"),
                        new XAttribute("inType", DataFieldType.Float.ToString()),
                        new XAttribute("autovalue", AutoValues.SystemVersion),
                        new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                        new XAttribute("deprecated", 1),
                        new XAttribute("omniturevar", "Events"),
                        new XAttribute("outType", OutputType.Float.ToString())
                    )
                );

                item = defaultDataField;

                XAssert.AssertEtxSerializationStructure(item, expected, "DataField");
            }

            [TestCase]
            public void DataField_Minimal()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),
                        new XAttribute("name", "default"),
                        new XAttribute("inType", DataFieldType.Float.ToString()),
                        new XAttribute("outType", OutputType.Float.ToString())
                    )
                );

                item = new DataField(1, "default")
                {
                    InType = DataFieldType.Float,
                    AutoValue = null,
                    AutoValueCreator = null,
                    Deprecated = false,
                    OmnitureVar = null,
                    OutType = OutputType.Float
                };

                XAssert.AssertEtxSerializationStructure(item, expected, "DataField");
            }

            [TestCase]
            public void Event_Empty()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("id", defaultEvent.Fingerprint),
                        new XAttribute("value", 1),
                        new XAttribute("index", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "0"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields")
                    )
                );

                item = defaultEvent;

                XAssert.AssertEtxSerializationStructure(item, expected, "Event");
            }

            [TestCase]
            public void Event_Minimal()
            {
                XDocument expected;
                Event item;

                item = new Event(1, "Event") { LogStringId = "LS", Category = EventCategory.Standard };

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("id", item.Fingerprint),
                        new XAttribute("value", 1),
                        new XAttribute("index", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS"),
                        new XAttribute("header", "0"),
                        new XElement("datafields")
                    )
                );

                XAssert.AssertEtxSerializationStructure(item, expected, "Event");
            }

            [TestCase]
            public void Event_WithDataFields()
            {
                XDocument expected;
                XElement metadata;
                Event item;

                metadata = new XElement("metadata",
                    new XElement("data", "\n \n text \n \n foo"),
                    new XElement("a", "b (ha! one up'ed)"));

                item = new Event(1, "Event")
                {
                    Description = "Another Event",
                    LogStringId = "LS-Event",
                    HeaderVersion = 32,
                    Category = EventCategory.Standard,
                    Owners = "jojohn",
                    Metadata = metadata
                };

                item.DataFields.Add(defaultDataField);
                item.DataFields.Add(
                    new DataField(2, "Two")
                    {
                        InType = DataFieldType.Int16,
                        AutoValue = AutoValues.LogonId,
                        AutoValueCreator = AutoValueCreators.LiveService,
                        Deprecated = false,
                        OmnitureVar = "PageNum",
                        OutType = OutputType.Number
                    }
                );

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("id", item.Fingerprint),
                        new XAttribute("value", 1),
                        new XAttribute("index", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "32"),
                        new XAttribute("owners", "jojohn"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields",
                            new XElement("data",
                                new XAttribute("ordinal", 1),
                                new XAttribute("name", "default"),
                                new XAttribute("inType", DataFieldType.Float.ToString()),
                                new XAttribute("autovalue", AutoValues.SystemVersion),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 1),
                                new XAttribute("omniturevar", "Events"),
                                new XAttribute("outType", OutputType.Float.ToString())
                            ),
                            new XElement("data",
                                new XAttribute("ordinal", 2),
                                new XAttribute("name", "Two"),
                                new XAttribute("inType", DataFieldType.Int16.ToString()),
                                new XAttribute("autovalue", AutoValues.LogonId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("omniturevar", "PageNum"),
                                new XAttribute("outType", OutputType.Number.ToString())
                            )
                        ),
                        metadata
                    )
                );

                XAssert.AssertEtxSerializationStructure(item, expected, "Event");
            }

            [TestCase]
            public void Event_WithHeaderFields()
            {
                XDocument expected;
                Event item;

                item = new Event(1, "Event")
                {
                    Description = "Another Event",
                    LogStringId = "LS-Event",
                    HeaderVersion = 32,
                    Category = EventCategory.Standard
                };

                item.HeaderFields.Add(
                    new DataField(1, "One")
                    {
                        InType = DataFieldType.Binary,
                        AutoValue = AutoValues.ConsoleId,
                        AutoValueCreator = AutoValueCreators.LiveService,
                        Deprecated = false,
                        OutType = OutputType.ConsoleId,
                        OmnitureVar = "Events"
                    }
                );

                item.HeaderFields.Add(
                    new DataField(2, "Two")
                    {
                        InType = DataFieldType.Int16,
                        AutoValue = AutoValues.LogonId,
                        AutoValueCreator = AutoValueCreators.LiveService,
                        Deprecated = false,
                        OmnitureVar = "PageNum",
                        OutType = OutputType.Number,
                    }
                );

                item.DataFields.Add(
                    new DataField(1, "Three")
                    {
                        InType = DataFieldType.Double,
                        AutoValue = AutoValues.CallSiteVersion,
                        AutoValueCreator = AutoValueCreators.LiveService,
                        Deprecated = false,
                        OmnitureVar = "PageNum",
                        OutType = OutputType.Float,
                    }
                );

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("id", item.Fingerprint),
                        new XAttribute("value", 1),
                        new XAttribute("index", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "32"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields",
                            new XElement("data",
                                new XAttribute("header", 1),
                                new XAttribute("ordinal", 1),
                                new XAttribute("name", "One"),
                                new XAttribute("inType", DataFieldType.Binary.ToString()),
                                new XAttribute("autovalue", AutoValues.ConsoleId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("omniturevar", "Events"),
                                new XAttribute("outType", "ConsoleId")
                            ),
                            new XElement("data",
                                new XAttribute("header", 1),
                                new XAttribute("ordinal", 2),
                                new XAttribute("name", "Two"),
                                new XAttribute("inType", DataFieldType.Int16.ToString()),
                                new XAttribute("autovalue", AutoValues.LogonId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("omniturevar", "PageNum"),
                                new XAttribute("outType", OutputType.Number)
                            ),
                            new XElement("data",
                                new XAttribute("ordinal", 3),
                                new XAttribute("name", "Three"),
                                new XAttribute("inType", DataFieldType.Double.ToString()),
                                new XAttribute("autovalue", AutoValues.CallSiteVersion),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("omniturevar", "PageNum"),
                                new XAttribute("outType", OutputType.Float)
                            )
                        )
                    )
                );

                XAssert.AssertEtxSerializationStructure(item, expected, "Event");
            }

            [TestCase]
            public void Producer_Empty()
            {
                XDocument expected;
                Producer item;

                expected = new XDocument(
                    new XElement("producer",
                        new XAttribute("symbol", "XblConfig"),
                        new XAttribute("id", defaultProducer.Fingerprint),
                        new XElement("description", "Producer"),
                        new XElement("events")
                    )
                );

                item = defaultProducer;
                
                // not a valid etx manifest without events
                XAssert.AssertSerializationStructure(item, expected, "Producer");
            }

            [TestCase]
            public void Producer_WithEvents()
            {
                XDocument expected;
                Producer item;
                Event e2;
                Blob fingerprint;
                XElement metadata;

                metadata = new XElement("metadata",
                    new XElement("data", "\n \n text \n \n foo"),
                    new XElement("a", "b (ha! one up'ed)"));

                fingerprint = Blob.Parse("46b18040695a466580c68056f1f51358");

                item = new Producer("XblConfig", fingerprint)
                {
                    Description = "Producer",
                    Owners = "jojohn",
                    Metadata = metadata
                };

                item.Events.Add(defaultEvent);
                item.Events.Add(
                    e2 = new Event(2, "Explosion")
                    {
                        Description = "Something Exploded",
                        LogStringId = "LS-Explosion",
                        Category = EventCategory.Standard
                    }
                );

                expected = new XDocument(
                    new XElement("producer",
                        new XAttribute("symbol", "XblConfig"),
                        new XAttribute("id", fingerprint),
                        new XAttribute("owners", "jojohn"),
                        new XElement("description", "Producer"),
                        new XElement("events",
                            new XElement("event",
                                new XAttribute("id", defaultEvent.Fingerprint),
                                new XAttribute("value", 1),
                                new XAttribute("index", 1),
                                new XAttribute("symbol", "Event"),
                                new XAttribute("category", EventCategory.Standard),
                                new XAttribute("logstringid", "LS-Event"),
                                new XAttribute("header", "0"),
                                new XElement("description", "Another Event"),
                                new XElement("datafields")
                            ),
                            new XElement("event",
                                new XAttribute("id", e2.Fingerprint),
                                new XAttribute("value", 2),
                                new XAttribute("index", 2),
                                new XAttribute("symbol", "Explosion"),
                                new XAttribute("category", EventCategory.Standard),
                                new XAttribute("logstringid", "LS-Explosion"),
                                new XAttribute("header", "0"),
                                new XElement("description", "Something Exploded"),
                                new XElement("datafields")
                            )
                        ),
                        metadata
                    )
                );

                XAssert.AssertEtxSerializationStructure(item, expected, "Producer");
            }

            [TestCase]
            public void Manifest_Empty()
            {
                XDocument expected;
                EtxManifest item;

                expected = new XDocument(
                    new XElement("etxmanifest",
                        new XAttribute(XNamespace.Xmlns + "win", "http://manifests.microsoft.com/win/2004/08/windows/events"),
                        new XAttribute(XNamespace.Xmlns + "xs", "http://www.w3.org/2001/XMLSchema"),
                        new XElement("instrumentation",
                            new XElement("globaleventproducers")
                        )
                    )
                );

                item = defaultManifest;

                XAssert.AssertEtxSerializationStructure(item, expected, "Manifest");
            }

            [TestCase]
            public void Manifest_NonEmpty()
            {
                XDocument expected;
                EtxManifest item;
                Blob fp;

                fp = Blob.Parse("1d53310deebb4a14ba3b85e6013aa1e7");

                expected = new XDocument(
                    new XElement("etxmanifest",
                        new XAttribute(XNamespace.Xmlns + "win", "http://manifests.microsoft.com/win/2004/08/windows/events"),
                        new XAttribute(XNamespace.Xmlns + "xs", "http://www.w3.org/2001/XMLSchema"),
                        new XElement("instrumentation",
                            new XElement("globaleventproducers",
                                new XElement("producer",
                                    new XAttribute("symbol", "Me"),
                                    new XAttribute("id", fp),
                                    new XElement("description", "It's Me!"),
                                    new XElement("events")
                                ),
                                new XElement("producer",
                                    new XAttribute("symbol", "XblConfig"),
                                    new XAttribute("id", defaultProducer.Fingerprint),
                                    new XElement("description", "Producer"),
                                    new XElement("events")
                                )
                            )
                        )
                    )
                );

                item = new EtxManifest();
                item.Producers.Add(defaultProducer);
                item.Producers.Add(new Producer("Me", fp) { Description = "It's Me!" });

                // not a valid etx manifest without events
                XAssert.AssertSerializationStructure(item, expected, "Manifest");
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Deserialize
        {
            [TestCase]
            public void DataField_Complete()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),
                        new XAttribute("name", "default"),
                        new XAttribute("inType", DataFieldType.Float.ToString()),
                        new XAttribute("autovalue", AutoValues.SystemVersion),
                        new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                        new XAttribute("deprecated", 1),
                        new XAttribute("omniturevar", "Events"),
                        new XAttribute("outType", "String")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new DataField(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "DataField.Ordinal");
                    XAssert.AssertEquals(item.Name, "default", "DataField.Name");
                    XAssert.AssertEquals(item.InType, DataFieldType.Float, "DataField.InType");
                    XAssert.AssertEquals(item.AutoValue, AutoValues.SystemVersion, "DataField.AutoValue");
                    XAssert.AssertEquals(item.AutoValueCreator, AutoValueCreators.LiveService, "DataField.AutoValueCreators");
                    XAssert.AssertEquals(item.Deprecated, true, "DataField.Deprecated");
                    XAssert.AssertEquals(item.OmnitureVar, "Events", "DataField.OminitureVar");
                    XAssert.AssertEquals(item.OutType, OutputType.String, "DataField.OutType");
                }
            }

            [TestCase]
            public void DataField_InvalidInTypeAndAutoValue()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),
                        new XAttribute("name", "TriumpCard"),
                        new XAttribute("inType", "Electricity"),
                        new XAttribute("autovalue", "Lightning Bolt"),
                        new XAttribute("autovaluecreator", "Zeus"),
                        new XAttribute("outType", "FlowToken"),
                        new XText("")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new DataField(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "DataField.Ordinal");
                    XAssert.AssertEquals(item.Name, "TriumpCard", "DataField.Name");
                    XAssert.AssertEquals(item.InType, DataFieldType.Unknown, "DataField.InType");
                    XAssert.AssertEquals(item.AutoValue, null, "DataField.AutoValue");
                    XAssert.AssertEquals(item.AutoValueCreator, null, "DataField.AutoValueCreators");
                    XAssert.AssertEquals(item.OutType, OutputType.FlowToken, "DataField.OutType");
                }

                // Verify that the original values were preserved
                XAssert.AssertEtxSerializationStructure(item, expected, "DataField");
            }

            [TestCase]
            public void DataField_InvalidOutType()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),                        
                        new XAttribute("name", "TriumpCard"),
                        new XAttribute("inType", "Float"),
                        new XAttribute("autovalue", "Lightning Bolt"),
                        new XAttribute("autovaluecreator", "Zeus"),
                        new XAttribute("outType", "Ashes"),
                        new XText("")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new DataField(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "DataField.Ordinal");
                    XAssert.AssertEquals(item.Name, "TriumpCard", "DataField.Name");
                    XAssert.AssertEquals(item.InType, DataFieldType.Float, "DataField.InType");
                    XAssert.AssertEquals(item.AutoValue, null, "DataField.AutoValue");
                    XAssert.AssertEquals(item.AutoValueCreator, null, "DataField.AutoValueCreators");
                    XAssert.AssertEquals(item.OutType, OutputType.Float, "DataField.OutType");
                }

                // Verify that the original values were preserved
                XAssert.AssertEtxSerializationStructure(item, expected, "DataField");
            }

            [TestCase]
            public void DataField_Minimal()
            {
                XDocument expected;
                DataField item;

                expected = new XDocument(
                    new XElement("data",
                        new XAttribute("ordinal", 1),
                        new XAttribute("name", "default"),
                        new XAttribute("inType", DataFieldType.Float.ToString())
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new DataField(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "DataField.Ordinal");
                    XAssert.AssertEquals(item.Name, "default", "DataField.Name");
                    XAssert.AssertEquals(item.InType, DataFieldType.Float, "DataField.InType");
                    XAssert.AssertEquals(item.AutoValue, null, "DataField.AutoValue");
                    XAssert.AssertEquals(item.AutoValueCreator, null, "DataField.AutoValueCreators");
                    XAssert.AssertEquals(item.Deprecated, false, "DataField.Deprecated");
                    XAssert.AssertEquals(item.OmnitureVar, null, "DataField.OminitureVar");
                }
            }

            [TestCase]
            public void Event_Empty()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("value", 1),
                        new XAttribute("id", "12345678123456781234567812345678"),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("omniturearea", "Area"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Event(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                    XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                    XAssert.AssertEquals(item.LogStringId, "LS-Event", "Event.LogStringId");
                    XAssert.AssertEquals(item.Description, "Another Event", "Event.Description");
                    XAssert.AssertEquals(item.Category, EventCategory.Standard, "Event.Category");
                    XAssert.AssertEquals(item.OmnitureArea, "Area", "Event.OmnitureArea");
                    XAssert.AssertEquals(item.DataFields.Count, 0, "Event.DataFields.Count");
                }
            }

            [TestCase]
            public void Event_InvalidEnums()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("id", "12345678123456781234567812345678"),
                        new XAttribute("value", 1),
                        new XAttribute("index", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", "Ridiculous!"),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "0"),
                        new XAttribute("owners", "jojohn"),
                        new XElement("datafields")
                    )
                );


                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Event(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                    XAssert.AssertEquals(item.Owners, "jojohn", "Event.Owners");
                    XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                    XAssert.AssertEquals(item.LogStringId, "LS-Event", "Event.LogStringId");
                    XAssert.AssertEquals(item.Category, EventCategory.Invalid, "Event.Category");
                    XAssert.AssertEquals(item.DataFields.Count, 0, "Event.DataFields.Count");
                }

                // Verify that the original values were preserved
                XAssert.AssertEtxSerializationStructure(item, expected, "Event");
            }

            [TestCase]
            public void Event_Minimal()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("value", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XElement("datafields")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Event(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                    XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                    XAssert.AssertEquals(item.LogStringId, null, "Event.LogStringId");
                    XAssert.AssertEquals(item.Description, null, "Event.Description");
                    XAssert.AssertEquals(item.Category, EventCategory.Standard, "Event.Category");
                    XAssert.AssertEquals(item.OmnitureArea, null, "Event.OmnitureArea");
                    XAssert.AssertEquals(item.DataFields.Count, 0, "Event.DataFields.Count");
                }
            }

            [TestCase]
            public void Event_WithDataFields()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("value", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "32"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields",
                            new XElement("data",
                                new XAttribute("ordinal", 1),
                                new XAttribute("name", "default"),
                                new XAttribute("inType", DataFieldType.Float.ToString()),
                                new XAttribute("autovalue", AutoValues.SystemVersion),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 1),
                                new XAttribute("omniturevar", "Events")
                            ),
                            new XElement("data",
                                new XAttribute("ordinal", 2),
                                new XAttribute("name", "Two"),
                                new XAttribute("inType", DataFieldType.Int16.ToString()),
                                new XAttribute("autovalue", AutoValues.LogonId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 0),
                                new XAttribute("omniturevar", "PageNum")
                            )
                        )
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Event(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                    XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                    XAssert.AssertEquals(item.LogStringId, "LS-Event", "Event.LogStringId");
                    XAssert.AssertEquals(item.Category, EventCategory.Standard, "Event.Category");
                    XAssert.AssertEquals(item.OmnitureArea, null, "Event.OmnitureArea");
                    XAssert.AssertEquals(item.Description, "Another Event", "Event.Description");
                    XAssert.AssertEquals(item.HeaderVersion, 32, "Event.HeaderVersion");
                    XAssert.AssertEquals(item.DataFields.Count, 2, "Event.DataFields.Count");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Ordinal, 1ul, "Event.DataFields[1].Ordinal");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Name, "default", "Event.DataFields[1].Name");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].InType, DataFieldType.Float, "Event.DataFields[1].InType");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValue, AutoValues.SystemVersion, "Event.DataFields[1].AutoValue");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValueCreator, AutoValueCreators.LiveService, "Event.DataFields[1].AutoValueCreators");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Deprecated, true, "DataField.Deprecated");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].OmnitureVar, "Events", "DataField.OminitureVar");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].Ordinal, 2ul, "Event.DataFields[2].Ordinal");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].Name, "Two", "Event.DataFields[2].Name");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].InType, DataFieldType.Int16, "Event.DataFields[2].InType");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].AutoValue, AutoValues.LogonId, "Event.DataFields[2].AutoValue");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].AutoValueCreator, AutoValueCreators.LiveService, "Event.DataFields[2].AutoValueCreators");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].Deprecated, false, "DataField.Deprecated");
                    XAssert.AssertEquals(item.DataFields.Ordinals[2].OmnitureVar, "PageNum", "DataField.OminitureVar");
                }
            }

            [TestCase]
            public void Event_WithHeaderFields()
            {
                XDocument expected;
                Event item;

                expected = new XDocument(
                    new XElement("event",
                        new XAttribute("value", 1),
                        new XAttribute("symbol", "Event"),
                        new XAttribute("category", EventCategory.Standard),
                        new XAttribute("logstringid", "LS-Event"),
                        new XAttribute("header", "32"),
                        new XElement("description", "Another Event"),
                        new XElement("datafields",
                            new XElement("data",
                                new XAttribute("ordinal", 1),
                                new XAttribute("name", "default"),
                                new XAttribute("inType", DataFieldType.Float.ToString()),
                                new XAttribute("autovalue", AutoValues.SystemVersion),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 1),
                                new XAttribute("omniturevar", "Events"),
                                new XAttribute("header", "1")
                            ),
                            new XElement("data",
                                new XAttribute("ordinal", 2),
                                new XAttribute("name", "Two"),
                                new XAttribute("inType", DataFieldType.Int16.ToString()),
                                new XAttribute("autovalue", AutoValues.LogonId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 0),
                                new XAttribute("omniturevar", "PageNum"),
                                new XAttribute("header", "1")
                            ),
                            new XElement("data",
                                new XAttribute("ordinal", 3),
                                new XAttribute("name", "Three"),
                                new XAttribute("inType", DataFieldType.Double.ToString()),
                                new XAttribute("autovalue", AutoValues.CultureId),
                                new XAttribute("autovaluecreator", AutoValueCreators.LiveService),
                                new XAttribute("deprecated", 0),
                                new XAttribute("omniturevar", "PageNum")
                            )
                        )
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Event(xr);

                    XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                    XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                    XAssert.AssertEquals(item.LogStringId, "LS-Event", "Event.LogStringId");
                    XAssert.AssertEquals(item.Category, EventCategory.Standard, "Event.Category");
                    XAssert.AssertEquals(item.OmnitureArea, null, "Event.OmnitureArea");
                    XAssert.AssertEquals(item.Description, "Another Event", "Event.Description");
                    XAssert.AssertEquals(item.HeaderVersion, 32, "Event.HeaderVersion");
                    XAssert.AssertEquals(item.HeaderFields.Count, 2, "Event.HeaderFields.Count");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].Ordinal, 1ul, "Event.HeaderFields[1].Ordinal");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].Name, "default", "Event.HeaderFields[1].Name");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].InType, DataFieldType.Float, "Event.HeaderFields[1].InType");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].AutoValue, AutoValues.SystemVersion, "Event.HeaderFields[1].AutoValue");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].AutoValueCreator, AutoValueCreators.LiveService, "Event.HeaderFields[1].AutoValueCreators");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].Deprecated, true, "DataField.Deprecated");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[1].OmnitureVar, "Events", "DataField.OminitureVar");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].Ordinal, 2ul, "Event.HeaderFields[2].Ordinal");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].Name, "Two", "Event.HeaderFields[2].Name");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].InType, DataFieldType.Int16, "Event.HeaderFields[2].InType");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].AutoValue, AutoValues.LogonId, "Event.HeaderFields[2].AutoValue");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].AutoValueCreator, AutoValueCreators.LiveService, "Event.HeaderFields[2].AutoValueCreators");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].Deprecated, false, "DataField.Deprecated");
                    XAssert.AssertEquals(item.HeaderFields.Ordinals[2].OmnitureVar, "PageNum", "DataField.OminitureVar");
                    XAssert.AssertEquals(item.DataFields.Count, 1, "Event.DataFields.Count");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Ordinal, 1ul, "Event.DataFields[1].Ordinal");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Name, "Three", "Event.DataFields[1].Name");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].InType, DataFieldType.Double, "Event.DataFields[1].InType");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValue, AutoValues.CultureId, "Event.DataFields[1].AutoValue");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValueCreator, AutoValueCreators.LiveService, "Event.DataFields[1].AutoValueCreators");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].Deprecated, false, "DataField.Deprecated");
                    XAssert.AssertEquals(item.DataFields.Ordinals[1].OmnitureVar, "PageNum", "DataField.OminitureVar");
                }
            }

            [TestCase]
            public void Producer_Empty()
            {
                XDocument expected;
                Producer item;
                Blob fingerprint;

                fingerprint = Blob.Parse("c13f5b8d4f7e4fddb74a2588fe40b9a6");

                expected = new XDocument(
                    new XElement("producer",
                        new XAttribute("symbol", "XblConfig"),
                        new XAttribute("owners", "jojohn"),
                        new XAttribute("id", fingerprint),
                        new XElement("description", "Producer"),
                        new XElement("events")
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Producer(xr);

                    XAssert.AssertEquals(item.Symbol, "XblConfig", "Producer.Symbol");
                    XAssert.AssertEquals(item.Owners, "jojohn", "Producers.Owners");
                    XAssert.AssertEquals(item.Fingerprint, fingerprint, "Producer.Fingerprint");
                    XAssert.AssertEquals(item.Description, "Producer", "Producer.Description");
                    XAssert.AssertEquals(item.Events.Count, 0, "Producer.Events.Count");
                }
            }

            [TestCase]
            public void Producer_WithEvents()
            {
                XDocument expected;
                Producer item;
                Blob fingerprint;

                fingerprint = Blob.Parse("e831a00d36354793a88323e5f8c395d1");

                expected = new XDocument(
                    new XElement("producer",
                        new XAttribute("symbol", "XblConfig"),
                        new XAttribute("id", fingerprint),
                        new XElement("description", "Producer"),
                        new XElement("events",
                            new XElement("event",
                                new XAttribute("value", 1),
                                new XAttribute("symbol", "Event"),
                                new XAttribute("category", EventCategory.Standard),
                                new XAttribute("logstringid", "LS-Event"),
                                new XElement("description", "Another Event"),
                                new XElement("datafields")
                            ),
                            new XElement("event",
                                new XAttribute("value", 2),
                                new XAttribute("symbol", "Explosion"),
                                new XAttribute("category", EventCategory.OfflineClickstream),
                                new XAttribute("logstringid", "LS-Explosion"),
                                new XElement("description", "Something Exploded"),
                                new XElement("datafields")
                            )
                        )
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new Producer(xr);

                    XAssert.AssertEquals(item.Symbol, "XblConfig", "Producer.Symbol");
                    XAssert.AssertEquals(item.Fingerprint, fingerprint, "Producer.Fingerprint");
                    XAssert.AssertEquals(item.Description, "Producer", "Producer.Description");
                    XAssert.AssertEquals(item.Events.Count, 2, "Producer.Events.Count");
                    XAssert.AssertEquals(item.Events.Ordinals[0].Ordinal, 0ul, "Producer.Events[1].Ordinal");
                    XAssert.AssertEquals(item.Events.Ordinals[0].Symbol, "Event", "Producer.Events[1].Symbol");
                    XAssert.AssertEquals(item.Events.Ordinals[0].Category, EventCategory.Standard, "Producer.Events[1].Category");
                    XAssert.AssertEquals(item.Events.Ordinals[0].OmnitureArea, null, "Producer.Events[1].OmnitureArea");
                    XAssert.AssertEquals(item.Events.Ordinals[0].LogStringId, "LS-Event", "Producer.Events[1].LogStringId");
                    XAssert.AssertEquals(item.Events.Ordinals[0].Description, "Another Event", "Producer.Events[1].Description");
                    XAssert.AssertEquals(item.Events.Ordinals[0].DataFields.Count, 0, "Producer.Events[1].DataFields.Count");
                    XAssert.AssertEquals(item.Events.Ordinals[1].Ordinal, 1ul, "Producer.Events[2].Ordinal");
                    XAssert.AssertEquals(item.Events.Ordinals[1].Symbol, "Explosion", "Producer.Events[2].Symbol");
                    XAssert.AssertEquals(item.Events.Ordinals[1].Category, EventCategory.OfflineClickstream, "Producer.Events[2].Category");
                    XAssert.AssertEquals(item.Events.Ordinals[1].OmnitureArea, null, "Producer.Events[2].OmnitureArea");
                    XAssert.AssertEquals(item.Events.Ordinals[1].LogStringId, "LS-Explosion", "Producer.Events[2].LogStringId");
                    XAssert.AssertEquals(item.Events.Ordinals[1].Description, "Something Exploded", "Producer.Events[2].Description");
                    XAssert.AssertEquals(item.Events.Ordinals[1].DataFields.Count, 0, "Producer.Events[2].DataFields.Count");
                }
            }

            [TestCase]
            public void Manifest_Empty()
            {
                XDocument expected;
                EtxManifest item;

                expected = new XDocument(
                    new XElement("etxmanifest",
                        new XAttribute(XNamespace.Xmlns + "win", "http://manifests.microsoft.com/win/2004/08/windows/events"),
                        new XAttribute(XNamespace.Xmlns + "xs", "http://www.w3.org/2001/XMLSchema"),
                        new XElement("instrumentation",
                            new XElement("globaleventproducers")
                        )
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new EtxManifest(xr);

                    XAssert.AssertEquals(item.Producers.Count, 0, "Manifest.Producers.Count");
                }
            }

            [TestCase]
            public void Manifest_NonEmpty()
            {
                XDocument expected;
                EtxManifest item;
                Blob a, b;

                a = Blob.Parse("2b4fa0db46ae46c08eac50e291393ab5");
                b = Blob.Parse("5e70ded01b1d4e6daa079bf9240edf0e");

                expected = new XDocument(
                    new XElement("etxmanifest",
                        new XAttribute(XNamespace.Xmlns + "win", "http://manifests.microsoft.com/win/2004/08/windows/events"),
                        new XAttribute(XNamespace.Xmlns + "xs", "http://www.w3.org/2001/XMLSchema"),
                        new XElement("instrumentation",
                            new XElement("globaleventproducers",
                                new XElement("producer",
                                    new XAttribute("symbol", "XblConfig"),
                                    new XAttribute("id", a),
                                    new XElement("description", "Producer"),
                                    new XElement("events")
                                ),
                                new XElement("producer",
                                    new XAttribute("symbol", "Me"),
                                    new XAttribute("id", b),
                                    new XElement("description", "It's Me!"),
                                    new XElement("events")
                                )
                            )
                        )
                    )
                );

                using (XmlReader xr = expected.CreateReader())
                {
                    item = new EtxManifest(xr);

                    XAssert.AssertEquals(item.Producers.Count, 2, "Manifest.Producers.Count");
                    XAssert.AssertEquals(item.Producers.Fingerprints[a].Symbol, "XblConfig", "Manifest.Producers[{0}].Symbol", a);
                    XAssert.AssertEquals(item.Producers.Fingerprints[a].Fingerprint, a, "Manifest.Producers[{0}].Fingerprint", a);
                    XAssert.AssertEquals(item.Producers.Fingerprints[a].Description, "Producer", "Manifest.Producers[{0}].Description", a);
                    XAssert.AssertEquals(item.Producers.Fingerprints[a].Events.Count, 0, "Manifest.Producers[{0}].Events.Count", a);
                    XAssert.AssertEquals(item.Producers.Fingerprints[b].Symbol, "Me", "Manifest.Producers[{0}].Symbol", b);
                    XAssert.AssertEquals(item.Producers.Fingerprints[b].Fingerprint, b, "Manifest.Producers[{0}].Fingerprint", b);
                    XAssert.AssertEquals(item.Producers.Fingerprints[b].Description, "It's Me!", "Manifest.Producers[{0}].Description", b);
                    XAssert.AssertEquals(item.Producers.Fingerprints[b].Events.Count, 0, "Manifest.Producers[{0}].Events.Count", b);
                }
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Merging
        {
            [TestGroup, DVT, Owner("jojohn")]
            [CompoundCase("Event", "xonline.common.core.etx.Event", "<event value='1' symbol='Food' category='Standard'><description>WTF is Juice!</description><datafields><data ordinal='1' name='foo' inType='Float' autoordinal='ConsoleId' autovaluecreator='LiveService' omniturevar='PageNum' deprecated='0' outType='String' /><data ordinal='2' name='bar' inType='Int32' autoordinal='MachineId' autovaluecreator='LiveService' outType='DateTime' /></datafields></event>")]
            [CompoundCase("Producer", "xonline.common.core.etx.Producer", "<producer symbol='A' id='ffffffffffffffffffffffffffffffff'><description>A is for apple</description><events><event value='1' symbol='Food' category='Standard'><description>WTF is Juice!</description><datafields><data ordinal='1' name='foo' inType='Float' autoordinal='ConsoleId' autovaluecreator='LiveService' /><data ordinal='2' name='bar' inType='Int32' autoordinal='MachineId' autovaluecreator='LiveService' /></datafields></event><event value='2' symbol='Places' category='Standard'><description>Where in the world is Carmen Sandiago?</description><datafields><data ordinal='3' name='x' inType='UInt32' autoordinal='FirstCountryId' autovaluecreator='LiveService' /><data ordinal='4' name='yy' inType='Binary' autoordinal='WebRepGroupId' autovaluecreator='LiveService' /></datafields></event></events></producer>")]
            [CompoundCase("Manifest", "xonline.common.core.etx.EtxManifest", "<etxmanifest xmlns:win='http://manifests.microsoft.com/win/2004/08/windows/events' xmlns:xs='http://www.w3.org/2001/XMLSchema'><instrumentation><globaleventproducers><producer symbol='NuiTroubleMaker' id='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'><description>A is for apple</description><events><event value='1' symbol='Food' category='Standard'><description>WTF is Juice!</description><datafields><data ordinal='1' name='foo' inType='Float' autoordinal='ConsoleId' autovaluecreator='LiveService' /><data ordinal='2' name='bar' inType='Int32' autoordinal='MachineId' autovaluecreator='LiveService' /></datafields></event><event value='2' symbol='Places' category='Standard'><description>Where in the world is Carmen Sandiago?</description><datafields><data ordinal='3' name='x' inType='UInt32' autoordinal='FirstCountryId' autovaluecreator='LiveService' /><data ordinal='4' name='yy' inType='Binary' autoordinal='WebRepGroupId' autovaluecreator='LiveService' /></datafields></event></events></producer><producer symbol='NuiTroubleShooter' id='bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'><description>B is for biscuit</description><events><event value='1' symbol='Food' category='Standard'><description>WTF is Juice!</description><datafields><data ordinal='1' name='foo' inType='Float' autoordinal='ConsoleId' autovaluecreator='LiveService' /><data ordinal='2' name='bar' inType='Int32' autoordinal='MachineId' autovaluecreator='LiveService' /></datafields></event><event value='2' symbol='Places' category='Standard'><description>Where in the world is Carmen Sandiago?</description><datafields><data ordinal='3' name='x' inType='UInt32' autoordinal='FirstCountryId' autovaluecreator='LiveService' /><data ordinal='4' name='yy' inType='Binary' autoordinal='WebRepGroupId' autovaluecreator='LiveService' /></datafields></event></events></producer></globaleventproducers></instrumentation></etxmanifest>")]
            public class Identity : TestBase
            {
                [TestCase]
                public void UnmodifiedByMerge()
                {
                    Type type;
                    SchemaObject item;

                    type = typeof(SchemaObject).Assembly.GetType((string)MyValues[0]);

                    using (StringReader sr = new StringReader((string)MyValues[1]))
                    {
                        using (XmlReader xr = XmlReader.Create(sr))
                        {
                            if (type == typeof(Event))
                            {
                                item = new Event(xr);
                            }
                            else if (type == typeof(Producer))
                            {
                                item = new Producer(xr);
                            }
                            else if (type == typeof(EtxManifest))
                            {
                                item = new EtxManifest(xr);
                            }
                            else
                            {
                                throw new InvalidOperationException("Unexpected type: " + (string)MyValues[0]);
                            }
                        }
                    }

                    // merging with self should always result in nothing being altered
                    XAssert.AssertEquals(
                        (bool)type.GetMethod("Merge").Invoke(item, new object[] { item }), 
                        false, 
                        type.Name + ".Merge(self)");
                }
            }

            [TestCase]
            public void Event_Merge()
            {
                Event item;
                Event merg;

                item = new Event(1, "Event")
                {
                    Description = "Another Event",
                    LogStringId = "LS-Event",
                };

                merg = new Event(1, "Event")
                {
                    Description = "Merged Another Event",
                    LogStringId = "LS-Event",
                };

                item.DataFields.Add(new DataField(1, "one") { InType = DataFieldType.UInt64 });
                merg.DataFields.Add(new DataField(1, "one") { InType = DataFieldType.UInt64 });

                XAssert.AssertEquals(item.Merge(merg), true, "Event.Merge()");

                XAssert.AssertEquals(item.Ordinal, 1ul, "Event.Ordinal");
                XAssert.AssertEquals(item.Symbol, "Event", "Event.Symbol");
                XAssert.AssertEquals(item.LogStringId, "LS-Event", "Event.LogStringId");
                XAssert.AssertEquals(item.Description, "Merged Another Event", "Event.Description");
                XAssert.AssertEquals(item.DataFields.Count, 1, "Event.DataFields.Count");
                XAssert.AssertEquals(item.DataFields.Ordinals[1].Ordinal, 1ul, "Event.DataFields[1].Ordinal");
                XAssert.AssertEquals(item.DataFields.Ordinals[1].Name, "one", "Event.DataFields[1].Name");
                XAssert.AssertEquals(item.DataFields.Ordinals[1].InType, DataFieldType.UInt64, "Event.DataFields[1].InType");
                XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValue, null, "Event.DataFields[1].AutoValue");
                XAssert.AssertEquals(item.DataFields.Ordinals[1].AutoValueCreator, null, "Event.DataFields[1].AutoValueCreator");
            }

            [TestCase]
            public void Producer_Merge()
            {
                Producer item;
                Producer merg;
                Blob a;

                a = Blob.Parse("e4deab59d84f47ad8448c92a642b680a");
                item = new Producer("A", a) { Description = "A Description" };
                merg = new Producer("A", a) { Description = "New Description" };

                item.Events.Add(new Event(1, "one") { LogStringId = "LS-one", Description = "one Description" });
                merg.Events.Add(new Event(1, "one") { LogStringId = "LS-one", Description = "one Description" });

                XAssert.AssertEquals(item.Merge(merg), true, "Producer.Merge()");

                XAssert.AssertEquals(item.Symbol, "A", "Producer.Symbol");
                XAssert.AssertEquals(item.Description, "New Description", "Producer.Description");
                XAssert.AssertEquals(item.Events.Count, 1, "Producer.Events.Count");
                XAssert.AssertEquals(item.Events.Ordinals[1].Ordinal, 1ul, "Producer.Events[1].Ordinal");
                XAssert.AssertEquals(item.Events.Ordinals[1].Symbol, "one", "Producer.Events[1].Symbol");
                XAssert.AssertEquals(item.Events.Ordinals[1].LogStringId, "LS-one", "Producer.Events[1].LogStringId");
                XAssert.AssertEquals(item.Events.Ordinals[1].Description, "one Description", "Producer.Events[1].Description");
                XAssert.AssertEquals(item.Events.Ordinals[1].DataFields.Count, 0, "Producer.Events[1].DataFields.Count");
            }

            [TestCase]
            public void Manifest_Merge()
            {
                EtxManifest item;
                EtxManifest merg;

                Blob a, b;

                item = new EtxManifest();
                merg = new EtxManifest();

                a = Blob.Parse("6605dc8e8ee44051972aef8b0adc5886");
                b = Blob.Parse("94883c45e0e94e2a8d88f497d55c1528");

                item.Producers.Add(new Producer("A", a) { Description = "A Description" });
                merg.Producers.Add(new Producer("B", b) { Description = "B Description" });

                XAssert.AssertEquals(item.Merge(merg), true, "Manifest.Merge()");

                XAssert.AssertEquals(item.Producers.Count, 2, "Manifest.Producers.Count");
                XAssert.AssertEquals(item.Producers.Fingerprints[a].Symbol, "A", "Manifest.Producers[{0}].Symbol", a);
                XAssert.AssertEquals(item.Producers.Fingerprints[a].Description, "A Description", "Manifest.Producers[{0}].Description", a);
                XAssert.AssertEquals(item.Producers.Fingerprints[a].Events.Count, 0, "Manifest.Producers[{0}].Events.Count", a);
                XAssert.AssertEquals(item.Producers.Fingerprints[b].Symbol, "B", "Manifest.Producers[{0}].Symbol", b);
                XAssert.AssertEquals(item.Producers.Fingerprints[b].Description, "B Description", "Manifest.Producers[{0}].Description", b);
                XAssert.AssertEquals(item.Producers.Fingerprints[b].Events.Count, 0, "Manifest.Producers[{0}].Events.Count", b);
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Enumerations
        {
            [TestGroup, DVT, Owner("jojohn")]
            [CompoundCase("CallSiteSequenceId", "CallSiteSequenceId")]
            [CompoundCase("CallSiteVersion", "CallSiteVersion")]
            [CompoundCase("Callstack", "Callstack")]
            [CompoundCase("ConsoleId", "ConsoleId")]
            [CompoundCase("ConsumerSequenceId", "ConsumerSequenceId")]
            [CompoundCase("CountryId", "CountryId")]
            [CompoundCase("CultureId", "CultureId")]
            [CompoundCase("FamilySettings", "FamilySettings")]
            [CompoundCase("FlowToken", "FlowToken")]
            [CompoundCase("FreeStorageSize", "FreeStorageSize")]
            [CompoundCase("GameMovieAndTvRatings", "GameMovieAndTvRatings")]
            [CompoundCase("Ipv4Address", "Ipv4Address")]
            [CompoundCase("LanguageId", "LanguageId")]
            [CompoundCase("LogonId", "LogonId")]
            [CompoundCase("LogStringId", "LogStringId")]
            [CompoundCase("MachineId", "MachineId")]
            [CompoundCase("MembershipType", "MembershipType")]
            [CompoundCase("OmnitureArea", "OmnitureArea")]
            [CompoundCase("PlayTimerSettings", "PlayTimerSettings")]
            [CompoundCase("PrimarySgNonce", "PrimarySgNonce")]
            [CompoundCase("Processor", "Processor")]
            [CompoundCase("ProcessType", "ProcessType")]
            [CompoundCase("ProfileCounts", "ProfileCounts")]
            [CompoundCase("SystemVersion", "SystemVersion")]
            [CompoundCase("SystemSettings", "SystemSettings")]
            [CompoundCase("ThreadId", "ThreadId")]
            [CompoundCase("Timestamp", "Timestamp")]
            [CompoundCase("TimeZone", "TimeZone")]
            [CompoundCase("TitleId", "TitleId")]
            [CompoundCase("TitleVersion", "TitleVersion")]
            [CompoundCase("TotalStorageSize", "TotalStorageSize")]
            [CompoundCase("VideoInfo", "VideoInfo")]
            [CompoundCase("VisitorId", "VisitorId")]
            [CompoundCase("WebRepGroupId", "WebRepGroupId")]
            [CompoundCase("XuidFromUserIndex", "XuidFromUserIndex")]
            public class AutoValuesEnum : TestBase
            {
                [TestCase]
                public void Exists()
                {
                    // will throw an exception if not present
                    Enum.Parse(typeof(AutoValues), (string)MyValues[0]);
                }
            }

            [TestGroup, DVT, Owner("jojohn")]
            [CompoundCase("LogMacro", "LogMacro")]
            [CompoundCase("LocalConsumer", "LocalConsumer")]
            [CompoundCase("LiveUploaderDynamic", "LiveUploaderDynamic")]
            [CompoundCase("LiveService", "LiveService")]
            public class AutoValueCreatorsEnum : TestBase
            {
                [TestCase]
                public void Exists()
                {
                    Enum.Parse(typeof(AutoValueCreators), (string)MyValues[0]);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\TestXomDictionary.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Diagnostics;

using ServerTestFramework;
using ServerTestFramework.LiveService;

using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.common.core.test
{
    [TestGroup, DVT, Owner("kgoodier")]
    public class XomDictionaryDVT
    {
        [TestCase]
        public void CaseSensitivity()
        {
            XomDictionary<int> dict = new XomDictionary<int>();

            dict.Add("foo", 1);
            dict.Add("BAR", 2);

            XAssert.AssertTrue(dict["foo"] == 1, "look for \"foo\"");
            XAssert.AssertTrue(dict["BAR"] == 2, "look for \"BAR\"");
            XAssert.AssertTrue(dict["Foo"] == 1, "look for \"Foo\"");
            XAssert.AssertTrue(dict["Bar"] == 2, "look for \"Bar\"");
        }

        [TestCase]
        public void ForEach()
        {
            XomDictionary<int> dict = new XomDictionary<int>();

            dict.Add("foo", 1);
            dict.Add("BAR", 2);
            dict.Add("aardvark", 3);

            int idx = 0;
            dict.ForEach(delegate(int i)
            {
                switch (idx)
                {
                case 0:
                    XAssert.AssertTrue(i == 1, "index {0}, value={1}", idx, i);
                    break;
                case 1:
                    XAssert.AssertTrue(i == 2, "index {0}, value={1}", idx, i);
                    break;
                case 2:
                    XAssert.AssertTrue(i == 3, "index {0}, value={1}", idx, i);
                    break;
                default:
                    XAssert.AssertTrue(false, "too many items! index {0}, value={1}", idx, i);
                    break;
                }
                idx++;
            });

        }

        [TestCase]
        public void ForEachSorted()
        {
            XomDictionary<int> dict = new XomDictionary<int>();

            dict.Add("foo", 1);
            dict.Add("BAR", 2);
            dict.Add("aardvark", 3);

            // Should be: aardvark(3), bar(2), foo(1)

            int idx = 0;
            dict.SortedForEach(delegate(int i)
            {
                switch (idx)
                {
                    case 0:
                        XAssert.AssertTrue(i == 3, "index {0}, value={1}", idx, i);
                        break;
                    case 1:
                        XAssert.AssertTrue(i == 2, "index {0}, value={1}", idx, i);
                        break;
                    case 2:
                        XAssert.AssertTrue(i == 1, "index {0}, value={1}", idx, i);
                        break;
                    default:
                        XAssert.AssertTrue(false, "too many items! index {0}, value={1}", idx, i);
                        break;
                }
                idx++;
            });

        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\XomFileTarget.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Text;
using System.Threading;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.config;
using xonline.common.core.etx;
using xonline.common.sql.sqlclient;
using xonline.common.utilities2;
using xonline.common.mgmt;

namespace xonline.common.core.test
{
    public class XomFileTargetFixed : XomFileTarget
    {

        public void RescheduleTimer(int rotationDelayInSeconds)
        {
            LazyCreateFile(false);
            ScheduleRotation(rotationDelayInSeconds);
        }

        public void SetCurrentTime(DateTime now)
        {
            _Now = now;
        }

        private DateTime _Now = DateTime.Now;

        protected override DateTime CurrentTime
        {
            get { return _Now; }
        }

        public XomFileTargetFixed( string[,] parameters )
            : base(parameters)
        {
        }
        
    }


    [TestGroup, DVT, Owner("jojohn")]
    public class XomFileTargetDVT
    {
        [TestCase]
        public void DeleteEmptyLogFile()
        {
            XomFileTarget target;
            string parameters;
            string path;

            path = Path.GetTempPath();
            path = Path.Combine(Path.GetTempPath(), "XomFileTargetDVT\\" + Guid.NewGuid().ToString() + "\\");

            parameters = "Prefix=#PATH#;RotationTime=15;RotationSize=1000000000;DeleteEmpty=true";

            Global.RO.Info("XomFileTarget output path: {0}", path);

            target = new XomFileTarget(ConfigUtil.GetParams(parameters.Replace("#PATH#", path)));

            target.LazyCreateFile(false);
            target.Close();

            XAssert.AssertEquals(0, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
        }

        [TestCase]
        public void PreserveEmptyLogFile()
        {
            XomFileTarget target;
            string parameters;
            string path;

            path = Path.GetTempPath();
            path = Path.Combine(Path.GetTempPath(), "XomFileTargetDVT\\" + Guid.NewGuid().ToString() + "\\");

            parameters = "Prefix=#PATH#.;RotationTime=15;RotationSize=1000000000;DeleteEmpty=false";

            Global.RO.Info("XomFileTarget output path: {0}", path);

            target = new XomFileTarget(ConfigUtil.GetParams(parameters.Replace("#PATH#", path)));

            target.LazyCreateFile(false);
            target.Close();

            XAssert.AssertEquals(1, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
        }

        [TestCase]
        public void PreserveNonEmptyLogFile()
        {
            XomFileTarget target;
            string parameters;
            string path;

            path = Path.GetTempPath();
            path = Path.Combine(Path.GetTempPath(), "XomFileTargetDVT\\" + Guid.NewGuid().ToString() + "\\");

            parameters = "Prefix=#PATH#;RotationTime=15;RotationSize=1000000000;DeleteEmpty=true";

            Global.RO.Info("XomFileTarget output path: {0}", path);

            target = new XomFileTarget(ConfigUtil.GetParams(parameters.Replace("#PATH#", path)));

            target.Log(XomLogTargetContext.Empty, "areaIgnored", 0, 0, new byte[0], "some|log|text", null);
            target.Close();

            XAssert.AssertEquals(1, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
        }

        [TestCase]
        public void AutomaticRollover()
        {
            XomFileTarget target;
            string parameters;
            string path;

            path = Path.GetTempPath();
            path = Path.Combine(Path.GetTempPath(), "XomFileTargetDVT\\" + Guid.NewGuid().ToString() + "\\");

            parameters = "Prefix=#PATH#;RotationTime=1;RotationSize=1000000000;DeleteEmpty=true";

            Global.RO.Info("XomFileTarget output path: {0} (1 minute rotation)", path);

            target = new XomFileTarget(ConfigUtil.GetParams(parameters.Replace("#PATH#", path)));

            target.Log(XomLogTargetContext.Empty, "areaIgnored", 0, 0, new byte[0], "some|log|text", null);
            XAssert.AssertEquals(1, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
            string file1 = Directory.GetFiles(path)[0];
            Global.RO.Debug(file1);

            // 60 second rollover, XomFileTarget has 30 second delay after that, and 1 
            // second for us.
            int sleepTimeMs = 60000 + 30000 + 1000;
            Global.RO.Debug("Sleeping for {0} ms...", sleepTimeMs);
            Thread.Sleep(sleepTimeMs);

            // At this point, file1 should still exist, and there is a file2
            XAssert.AssertEquals(2, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
            XAssert.AssertTrue(File.Exists(file1), "file1 exists");
            string file2 = Directory.GetFiles(path)[1];
            Global.RO.Debug(file2);
            Global.RO.Debug("Sleeping for {0} ms...", sleepTimeMs);
            Thread.Sleep(sleepTimeMs);

            // At this point, file1 should still exist, file2 is gone, and there is a 
            // file3
            XAssert.AssertEquals(2, Directory.GetFiles(path).Count(), "Directory({0}).Files.Count", path);
            string file3 = Directory.GetFiles(path)[1];
            Global.RO.Debug(file3);
            XAssert.AssertTrue(File.Exists(file1), "file1 exists");
            XAssert.AssertTrue(!File.Exists(file2), "file2 does not exist");
            XAssert.AssertTrue(file2 != file3, "file2 != file3");

        }

        private void ShowFilesInPath(string path)
        {
            Global.RO.Debug("Found files:");
            foreach (string f in Directory.GetFiles(path, "*", SearchOption.AllDirectories))
            {
                Global.RO.Debug("  " + f);
            }
        }

        [TestCase]
        public void MidnightRollover()
        {
            XomFileTargetFixed target;
            string parameters;
            string path;

            path = Path.GetTempPath();
            path = Path.Combine(Path.GetTempPath(), "XomFileTargetDVT\\" + Guid.NewGuid().ToString());

            parameters = "Prefix=#PATH#\\#YEAR#\\#MONTH#\\#DAY#\\foo.;RotationTime=60;RotationSize=1000000000;DeleteEmpty=true";

            Global.RO.Info("XomFileTarget output path: {0} (60 minute rotation)", path);

            target = new XomFileTargetFixed(ConfigUtil.GetParams(parameters.Replace("#PATH#", path)));

            // Write one log at 10pm
            DateTime now = DateTime.Parse("2021/04/05 22:01:02.000");
            target.SetCurrentTime(now);
            target.Log(XomLogTargetContext.Empty, "areaIgnored", 0, 0, new byte[0], "witching|hour", null);

            // Verify file exists
            string expectedFile1 = path + "\\2021\\4\\5\\foo.210405220001.log";
            ShowFilesInPath(path);
            XAssert.AssertTrue(File.Exists(expectedFile1), expectedFile1);

            // Advance to just before hour rollover time
            now = DateTime.Parse("2021/04/05 22:59:59.000");
            target.SetCurrentTime(now);
            target.RescheduleTimer(3);
            target.SetCurrentTime(now.AddSeconds(3.1));
            Global.RO.Debug("Waiting 4 seconds for rollover timer"); 
            Thread.Sleep(5000);  // just a bit over

            // Verify new file exists even though we haven't written yet
            string expectedFile2 = path + "\\2021\\4\\5\\foo.210405230001.log";
            ShowFilesInPath(path);
            XAssert.AssertTrue(File.Exists(expectedFile1), expectedFile1);
            XAssert.AssertTrue(File.Exists(expectedFile2), expectedFile2);

            // Advance another hour to just before midnight
            now = DateTime.Parse("2021/04/05 23:59:59.000");
            target.SetCurrentTime(now);
            target.RescheduleTimer(3);
            target.SetCurrentTime(now.AddSeconds(3.1));
            Global.RO.Debug("Waiting 4 seconds for rollover timer");
            Thread.Sleep(5000);  // just a bit over

            // Verify new file exists even though we haven't written yet
            string expectedFile3 = path + "\\2021\\4\\6\\foo.210406000001.log";
            ShowFilesInPath(path);
            XAssert.AssertTrue(File.Exists(expectedFile1), expectedFile1);
            XAssert.AssertTrue(!File.Exists(expectedFile2), expectedFile2);
            XAssert.AssertTrue(File.Exists(expectedFile3), expectedFile3);

            // Write to file, make sure nothing has changed
            target.Log(XomLogTargetContext.Empty, "areaIgnored", 0, 0, new byte[0], "after|witching|hour", null);
            ShowFilesInPath(path);
            XAssert.AssertTrue(File.Exists(expectedFile1), expectedFile1);
            XAssert.AssertTrue(!File.Exists(expectedFile2), expectedFile2);
            XAssert.AssertTrue(File.Exists(expectedFile3), expectedFile3);

            // Advance one month and one day
            now = DateTime.Parse("2021/05/06 23:01:02.000");
            target.SetCurrentTime(now);
            target.RescheduleTimer(30);
            target.Log(XomLogTargetContext.Empty, "areaIgnored", 0, 0, new byte[0], "way|after|witching|hour", null);

            // Verify new file exists and old ones still do too
            string expectedFile4 = path + "\\2021\\5\\6\\foo.210506230001.log";
            ShowFilesInPath(path);
            XAssert.AssertTrue(File.Exists(expectedFile1), expectedFile1);
            XAssert.AssertTrue(!File.Exists(expectedFile2), expectedFile2);
            XAssert.AssertTrue(File.Exists(expectedFile3), expectedFile3);
            XAssert.AssertTrue(File.Exists(expectedFile4), expectedFile4);

        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\MultiKeyCollectionDVT.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Xml;
using System.Text;
using System.Diagnostics;
using System.Reflection;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.core.etx;
using xonline.common.utilities2;

namespace xonline.common.core.test
{
    using Mkc = MultiKeyCollection<MkcTestDescriptor, MkcTestValue>;
    using MkcOptions = MultiKeyCollectionOptions<MkcTestDescriptor>;
    using KdString = KeyDescriptor<MkcTestDescriptor, string, MkcTestValue>;
    using KdInt = KeyDescriptor<MkcTestDescriptor, int, MkcTestValue>;
    using KdIface = IKeyDescriptor<MkcTestDescriptor, MkcTestValue>;

    public enum MkcTestDescriptor
    {
        Key1,
        Key2,
        Key3,
        Missing
    }

    public class MkcTestValue
    {
        public string Key1 { get; set; }
        public string Key2 { get; set; }
        public int    Key3 { get; set; }
    }

    [TestGroup, DVT, Owner("jojohn")]
	public class MultiKeyCollectionDVT
	{
        [TestGroup, DVT, Owner("jojohn")]
        public class RegressionTests
        {
            [TestCase(146203)]
            public void R146203_ProducerMerge()
            {
                Mkc target;

                target = new Mkc(new KdString(MkcTestDescriptor.Key1, v => v.Key1));

                target.Add(new MkcTestValue() { Key1 = "Foo", Key2 = "11111", Key3 = 11111 });
                target.Add(new MkcTestValue() { Key1 = "Boo", Key2 = "22222", Key3 = 22222 });

                target[MkcTestDescriptor.Key1, "Foo"].Key1 = "ooF";
                target[MkcTestDescriptor.Key1, "Boo"].Key1 = null;

                target.Remove(target[MkcTestDescriptor.Key1, "Foo"]);
                target.Remove(target[MkcTestDescriptor.Key1, "Boo"]);

                XAssert.AssertEquals(0, target.Count, "Target");
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Constructors
        {
            [TestCase]
            public void Constructor1()
            {
                Mkc target;

                target = new Mkc(new KdString(MkcTestDescriptor.Key1, v => v.Key1));

                XAssert.AssertEquals(1, target.Descriptors.Count(), "Descriptors.Count");
            }

            [TestCase]
            public void Constructor2()
            {
                List<KdIface> list;
                Mkc target;

                list = new List<KdIface>();
                list.Add(new KdString(MkcTestDescriptor.Key1, v => v.Key1));

                target = new Mkc(list);

                XAssert.AssertEquals(1, target.Descriptors.Count(), "Descriptors.Count");
            }

            [TestCase]
            public void Constructor3()
            {
                MkcOptions options;
                Mkc target;

                options = new MkcOptions();
                target = new Mkc(options, new KdString(MkcTestDescriptor.Key1, v => v.Key1));

                XAssert.AssertEquals(1, target.Descriptors.Count(), "Descriptors.Count");
            }

            [TestCase]
            public void Constructor4()
            {
                MkcOptions options;
                List<KdIface> list;
                Mkc target;

                list = new List<KdIface>();
                list.Add(new KdString(MkcTestDescriptor.Key1, v => v.Key1));

                options = new MkcOptions();
                target = new Mkc(options, list);

                XAssert.AssertEquals(1, target.Descriptors.Count(), "Descriptors.Count");
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Property
        {
            private Mkc CreateCollection()
            {
                return new Mkc(
                    new KdString(MkcTestDescriptor.Key1, v => v.Key1),
                    new KdString(MkcTestDescriptor.Key2, v => v.Key2),
                    new KdInt(MkcTestDescriptor.Key3, v => v.Key3)
                );
            }

            [TestCase]
            public void Item_ForDescriptor()
            {
                var mkc = CreateCollection();

                var dsc = mkc[MkcTestDescriptor.Key1];

                XAssert.AssertEquals(MkcTestDescriptor.Key1, mkc[MkcTestDescriptor.Key1].Identifier, "Item[Key1]");
                XAssert.AssertEquals(MkcTestDescriptor.Key2, mkc[MkcTestDescriptor.Key2].Identifier, "Item[Key2]");
                XAssert.AssertEquals(MkcTestDescriptor.Key3, mkc[MkcTestDescriptor.Key3].Identifier, "Item[Key3]");
            }

            [TestCase]
            public void Item_ForValue()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = 30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                XAssert.AssertEquals(v1, mkc[MkcTestDescriptor.Key1, "Key1"], "Item[Key1, Key1]");
                XAssert.AssertEquals(v1, mkc[MkcTestDescriptor.Key2, "Key2"], "Item[Key2, Key2]");
                XAssert.AssertEquals(v1, mkc[MkcTestDescriptor.Key3, 3], "Item[Key3, 3]");
            }

            [TestCase]
            public void Descriptors()
            {
                var mkc = CreateCollection();

                var dsc = mkc.Descriptors;

                dsc.First(dc => dc.Identifier == MkcTestDescriptor.Key1);
                dsc.First(dc => dc.Identifier == MkcTestDescriptor.Key2);
                dsc.First(dc => dc.Identifier == MkcTestDescriptor.Key3);
            }

            [TestCase]
            public void Values()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = 30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                var values = mkc.Values;

                values.First(v => v == v1);
                values.First(v => v == v2);
            }

            [TestCase]
            public void Count()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = 30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                XAssert.AssertEquals(2, mkc.Count, "Count");
            }

            [TestCase]
            public void IsReadOnly()
            {
                var mkc = CreateCollection();

                XAssert.AssertEquals(false, mkc.IsReadOnly, "IsReadOnly");
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class Methods
        {
            private Mkc CreateCollection()
            {
                return new Mkc(
                    new KdString(MkcTestDescriptor.Key1, v => v.Key1),
                    new KdString(MkcTestDescriptor.Key2, v => v.Key2),
                    new KdInt(MkcTestDescriptor.Key3, v => v.Key3)
                );
            }

            [TestCase]
            public void ContainsDescriptor()
            {
                var mkc = CreateCollection();

                XAssert.AssertEquals(true, mkc.ContainsDescriptor(MkcTestDescriptor.Key1), "ContainsDescriptor(Key1)");
                XAssert.AssertEquals(true, mkc.ContainsDescriptor(MkcTestDescriptor.Key2), "ContainsDescriptor(Key2)");
                XAssert.AssertEquals(true, mkc.ContainsDescriptor(MkcTestDescriptor.Key3), "ContainsDescriptor(Key3)");
                XAssert.AssertEquals(false, mkc.ContainsDescriptor(MkcTestDescriptor.Missing), "ContainsDescriptor(Missing)");
            }

            [TestCase]
            public void TryGetDescriptor1()
            {
                KdIface key1, key2, key3, missing;

                var mkc = CreateCollection();

                XAssert.AssertEquals(true,  mkc.TryGetDescriptor(MkcTestDescriptor.Key1, out key1),       "TryGetDescriptor(Key1)");
                XAssert.AssertEquals(true,  mkc.TryGetDescriptor(MkcTestDescriptor.Key2, out key2),       "TryGetDescriptor(Key2)");
                XAssert.AssertEquals(true,  mkc.TryGetDescriptor(MkcTestDescriptor.Key3, out key3),       "TryGetDescriptor(Key3)");
                XAssert.AssertEquals(false, mkc.TryGetDescriptor(MkcTestDescriptor.Missing, out missing), "TryGetDescriptor(Missing)");

                XAssert.AssertEquals(MkcTestDescriptor.Key1, key1.Identifier, "Key1.Identifier");
                XAssert.AssertEquals(MkcTestDescriptor.Key2, key2.Identifier, "Key2.Identifier");
                XAssert.AssertEquals(MkcTestDescriptor.Key3, key3.Identifier, "Key3.Identifier");
            }

            [TestCase]
            public void TryGetDescriptor2()
            {
                IKeyDescriptor<MkcTestDescriptor, string, MkcTestValue> key1, key2;
                IKeyDescriptor<MkcTestDescriptor, int, MkcTestValue>    key3, missing;

                var mkc = CreateCollection();

                XAssert.AssertEquals(true, mkc.TryGetDescriptor<string>(MkcTestDescriptor.Key1, out key1), "TryGetDescriptor(Key1)");
                XAssert.AssertEquals(true, mkc.TryGetDescriptor<string>(MkcTestDescriptor.Key2, out key2), "TryGetDescriptor(Key2)");
                XAssert.AssertEquals(true, mkc.TryGetDescriptor<int>(MkcTestDescriptor.Key3, out key3), "TryGetDescriptor(Key3)");
                XAssert.AssertEquals(false, mkc.TryGetDescriptor<int>(MkcTestDescriptor.Missing, out missing), "TryGetDescriptor(Missing)");

                XAssert.AssertEquals(MkcTestDescriptor.Key1, key1.Identifier, "Key1.Identifier");
                XAssert.AssertEquals(MkcTestDescriptor.Key2, key2.Identifier, "Key2.Identifier");
                XAssert.AssertEquals(MkcTestDescriptor.Key3, key3.Identifier, "Key3.Identifier");
            }

            [TestCase]
            public void RebuildKey()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = -3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = -30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                v1.Key1 = "_key1";
                v2.Key1 = "_cey1";

                // rebuilding modified key
                mkc.RebuildKey(MkcTestDescriptor.Key1);

                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key1, "_key1"), "ContainsKey(_key1)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key1, "_cey1"), "ContainsKey(_cey1)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key1, "Key1"), "ContainsKey(Key1)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key1, "Cey1"), "ContainsKey(Cey1)");

                // rebuilding unmodified key
                mkc.RebuildKey(MkcTestDescriptor.Key3);

                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key3, -3), "ContainsKey(-3)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key3, -30), "ContainsKey(-30)");
            }

            [TestCase]
            public void RebuildValueKeys()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = -3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = -30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                v1.Key1 = "_key1";
                v1.Key2 = "_key2";
                v1.Key3 = 3;

                // rebuildilng modified value
                mkc.RebuildValueKeys(v1);

                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key1, "_key1"), "ContainsKey(_key1)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key2, "_key2"), "ContainsKey(_key2)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key3, 3), "ContainsKey(3)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key1, "Key1"), "ContainsKey(Key1)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key2, "Key2"), "ContainsKey(Key2)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key3, -3), "ContainsKey(-3)");

                // rebuilding unmodified key
                mkc.RebuildValueKeys(v2);

                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key1, "Cey1"), "ContainsKey(Cey1)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key2, "Cey2"), "ContainsKey(Cey2)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key3, -30), "ContainsKey(-30)");
            }

            [TestCase]
            public void GetKeys()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = -3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = -30 };
                
                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                var keys1 = mkc.GetKeys<string>(MkcTestDescriptor.Key1).ToArray();

                XAssert.AssertEquals(true, keys1.Contains("Key1"), "Keys1.Contains(Key1)");
                XAssert.AssertEquals(true, keys1.Contains("Cey1"), "Keys1.Contains(Cey1)");
                XAssert.AssertEquals(2, keys1.Length, "Keys1.Length");

                var keys2 = mkc.GetKeys<string>(MkcTestDescriptor.Key2).ToArray();

                XAssert.AssertEquals(true, keys2.Contains("Key2"), "Keys2.Contains(Key2)");
                XAssert.AssertEquals(true, keys2.Contains("Cey2"), "Keys2.Contains(Cey2)");
                XAssert.AssertEquals(2, keys2.Length, "Keys2.Length");

                var keys3 = mkc.GetKeys<int>(MkcTestDescriptor.Key3).ToArray();

                XAssert.AssertEquals(true, keys3.Contains(-3), "Keys3.Contains(-3)");
                XAssert.AssertEquals(true, keys3.Contains(-30), "Keys3.Contains(-30)");
                XAssert.AssertEquals(2, keys3.Length, "Keys3.Length");
            }

            [TestCase]
            public void ContainsKey()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };

                var mkc = CreateCollection();

                mkc.Add(v1);

                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key1, "Key1"), "ContainsKey(Key1, Key1)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key2, "Key2"), "ContainsKey(Key2, Key2)");
                XAssert.AssertEquals(true, mkc.ContainsKey(MkcTestDescriptor.Key3, 3), "ContainsKey(Key3, 3)");

                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key1, "Key2"), "ContainsKey(Key1, Key2)");
                XAssert.AssertEquals(false, mkc.ContainsKey(MkcTestDescriptor.Key2, "Key1"), "ContainsKey(Key2, Key1)");
            }

            [TestCase]
            public void Remove()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Key10", Key2 = "Key20", Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "Key100", Key2 = "Key200", Key3 = 300 };
                var v4 = new MkcTestValue() { Key1 = "Key1000", Key2 = "Key2000", Key3 = 3000 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);
                mkc.Add(v3);
                mkc.Add(v4);

                XAssert.AssertEquals(true, mkc.Remove(MkcTestDescriptor.Key1, "Key1"), "Remove(Key1, Key1)");
                XAssert.AssertEquals(true, mkc.Remove(MkcTestDescriptor.Key2, "Key20"), "Remove(Key2, Key20)");
                XAssert.AssertEquals(true, mkc.Remove(MkcTestDescriptor.Key3, 300), "Remove(Key3, 300)");
                XAssert.AssertEquals(true, mkc.Remove(v4), "Remove(v4)");

                XAssert.AssertEquals(0, mkc.Count, "Count");
            }

            [TestCase]
            public void TryGetValue()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Key10", Key2 = "Key20", Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "Key100", Key2 = "Key200", Key3 = 300 };
                MkcTestValue o1, o2, o3;

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                XAssert.AssertEquals(true, mkc.TryGetValue(MkcTestDescriptor.Key1, "Key1", out o1), "TryGetValue(Key1, Key1)");
                XAssert.AssertEquals(true, mkc.TryGetValue(MkcTestDescriptor.Key2, "Key2", out o2), "TryGetValue(Key2, Key2)");
                XAssert.AssertEquals(true, mkc.TryGetValue(MkcTestDescriptor.Key3, 3, out o3), "TryGetValue(Key3, 3)");
                XAssert.AssertEquals(o1, v1, "output1");
                XAssert.AssertEquals(o2, v1, "output2");
                XAssert.AssertEquals(o3, v1, "output3");
            }

            [TestCase]
            public void Add()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };

                var mkc = CreateCollection();

                mkc.Add(v1);

                XAssert.AssertEquals(1, mkc.Count, "Count");
            }

            [TestCase]
            public void Clear()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = -3 };
                var v2 = new MkcTestValue() { Key1 = "Cey1", Key2 = "Cey2", Key3 = -30 };

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);

                mkc.Clear();

                XAssert.AssertEquals(0, mkc.Count, "Count");
            }

            [TestCase]
            public void Contains()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = -3 };

                var mkc = CreateCollection();

                mkc.Add(v1);

                XAssert.AssertEquals(true, mkc.Contains(v1), "Contains(v1)");
            }

            [TestCase]
            public void CopyTo()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Key10", Key2 = "Key20", Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "Key100", Key2 = "Key200", Key3 = 300 };
                
                MkcTestValue[] array = new MkcTestValue[3];

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);
                mkc.Add(v3);

                mkc.CopyTo(array, 0);

                XAssert.AssertEquals(true, array.Contains(v1), "Array.Contains(v1)");
                XAssert.AssertEquals(true, array.Contains(v2), "Array.Contains(v2)");
                XAssert.AssertEquals(true, array.Contains(v3), "Array.Contains(v3)");
            }

            [TestCase]
            public void AddRange()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Key10", Key2 = "Key20", Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "Key100", Key2 = "Key200", Key3 = 300 };

                MkcTestValue[] array = new MkcTestValue[3];

                var mkc = CreateCollection();

                mkc.AddRange(new MkcTestValue[] { v1, v2, v3 });

                XAssert.AssertEquals(true, mkc.Contains(v1), "Contains(v1)");
                XAssert.AssertEquals(true, mkc.Contains(v2), "Contains(v2)");
                XAssert.AssertEquals(true, mkc.Contains(v3), "Contains(v3)");

                XAssert.AssertEquals(3, mkc.Count, "Count");
            }

            [TestCase]
            public void GetEnumerator()
            {
                var v1 = new MkcTestValue() { Key1 = "Key1", Key2 = "Key2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "Key10", Key2 = "Key20", Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "Key100", Key2 = "Key200", Key3 = 300 };

                List<MkcTestValue> list = new List<MkcTestValue>();

                MkcTestValue[] array = new MkcTestValue[3];

                var mkc = CreateCollection();

                mkc.Add(v1);
                mkc.Add(v2);
                mkc.Add(v3);

                list.Add(v1);
                list.Add(v2);
                list.Add(v3);

                var v = mkc.GetEnumerator();

                v.Reset();

                while (v.MoveNext())
                {
                    list.Remove(v.Current);
                }

                XAssert.AssertEquals(0, list.Count, "List.Count");
            }
        }

        [TestGroup, DVT, Owner("jojohn")]
        public class UseScenarios
        {
            private Mkc CreateNullableCollection(params MkcTestDescriptor[] keys)
            {
                return new Mkc(
                    new MkcOptions() { NullOmittingDescriptors = keys ?? new MkcTestDescriptor[0] },
                    new KdString(MkcTestDescriptor.Key1, v => v.Key1),
                    new KdString(MkcTestDescriptor.Key2, v => v.Key2),
                    new KdInt(MkcTestDescriptor.Key3, v => v.Key3)
                );
            }

            [TestCase]
            public void NullableKey()
            {
                var v1 = new MkcTestValue() { Key1 = "k1"  , Key2 = "k2", Key3 = 3 };
                var v2 = new MkcTestValue() { Key1 = "k10" , Key2 = null, Key3 = 30 };
                var v3 = new MkcTestValue() { Key1 = "k100", Key2 = null, Key3 = 300 };

                var mkc = CreateNullableCollection(MkcTestDescriptor.Key2);

                mkc.Add(v1);
                mkc.Add(v2);
                mkc.Add(v3);

                XAssert.AssertEquals(3, mkc.GetKeys<string>(MkcTestDescriptor.Key1).Count(), "GetKeys(Key1).Count");
                XAssert.AssertEquals(1, mkc.GetKeys<string>(MkcTestDescriptor.Key2).Count(), "GetKeys(Key2).Count");
                XAssert.AssertEquals(3, mkc.GetKeys<int>(MkcTestDescriptor.Key3).Count(), "GetKeys(Key3).Count");
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\AssertTest.cs ===
using System;
using ServerTestFramework;
using xonline.common.diagnostics;

namespace xonline.common.test.assert
{
    [TestGroup]
    public class AssertTest : TestNode
    {
        [TestGroupSetup]
        public void Setup()
        {
            // this is a setup function
        }
        
        [TestGroupTearDown]
        public void TearDown()
        {
            // this is a teardown function
        }
        
        
        [Test]
        public void Assert_Pos_IsTrue()
        {
            Assert.IsTrue(true);
            Assert.IsTrue(true, "this should never fail");
        }
        
        [TestCase]
        public void Assert_Neg_IsTrue()
        {
            try
            {
                Assert.IsTrue(0 == 1);
                throw new Exception("Assert.IsTrue(false) didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }    
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_Int()
        {
            Assert.AreEqual(1, 1);
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_String()
        {
            Assert.AreEqual("some string", "some string");
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_Bool()
        {
            Assert.AreEqual(true, true);
        }

        [TestCase]
        public void Assert_Pos_AreEqual_ShortAndInt()
        {
            Assert.AreEqual((short)1, (int)1);
        }
        [TestCase]
        public void Assert_Pos_AreEqual_LongAndUlong()
        {
            Assert.AreEqual((long)0xfffffffffffffff, (ulong)0xfffffffffffffff);
        }
        [TestCase]
        public void Assert_Pos_AreEqual_LongAndByte()
        {
            Assert.AreEqual((long)1, (byte)1);
        }
    
        [TestCase]
        public void Assert_Neg_AreEqual_Int()
        {
            try
            {
                Assert.AreEqual(1, 2);
                throw new Exception("Assert.AreEqual(1, 2); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }    
                    
        }
        
        [TestCase]
        public void Assert_Neg_AreEqual_Object()
        {
            try
            {
                object o = new object();
                
                Assert.AreEqual("", o);
                throw new Exception("Assert.AreEqual(String, o); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }    
                    
        }
        
        [TestCase]
        public void Assert_Neg_AreEqual_Object_Null()
        {
            try
            {
                object o = new object();
                
                Assert.AreEqual(null, o);
                throw new Exception("Assert.AreEqual(null, o); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }

            try
            {
                object o = new object();
                
                Assert.AreEqual(o, null);
                throw new Exception("Assert.AreEqual(o, null); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_Null_Null()
        {
            Assert.AreEqual(null, null);
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_Arrays_bytes()
        {
            Assert.AreEqual(new byte[] {1, 2, 3}, new byte[] {1, 2, 3});
        }
        
        [TestCase]
        public void Assert_Pos_AreEqual_Arrays_objects()
        {
            object o1 = new object();
            object o2 = new object();
            
            Assert.AreEqual(new object[] {o1, o2}, new object[] {o1, o2});
        }
    
        [TestCase]
        public void Assert_Neg_AreEqual_Arrays_sizes()
        {
            object o1 = new object();
            object o2 = new object();
            
            try
            {
                Assert.AreEqual(new object[] {o1, o2}, new object[] {o1, o2, o1});
                throw new Exception("Assert.AreEqual(new object[] {o1, o2}, new object[] {o1, o2, o1}); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }
        }
        
        [TestCase]
        public void Assert_Neg_AreEqual_Arrays_bytes()
        {
            object o1 = new object();
            object o2 = new object();
            
            try
            {
                Assert.AreEqual(new byte[] {1, 2}, new byte[] {2, 1});
                throw new Exception("Assert.AreEqual(new byte[] {1, 2}, new byte[] {2, 1}); didn't throw!");
            }
            catch(AssertionFailedException)
            {
            }
        }
    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\core\XomReportTargetDVT.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Vortex;

using xonline.common.config;
using xonline.common.core.etx;
using xonline.common.sql.sqlclient;
using xonline.common.utilities2;
using xonline.common.mgmt;

namespace xonline.common.core.test
{
    [TestGroup, DVT, Owner("jojohn")]
	public class XomReportTargetDVT
	{
        private FieldInfo contextList;
        private PropertyInfo contextCount;
        private PropertyInfo contextItem;
        private FieldInfo contextItemReport;
        private PropertyInfo componentMapping;
        
        public XomReportTargetDVT()
        {
            contextList = typeof(XomReportTarget).GetField("_pConnections", BindingFlags.NonPublic | BindingFlags.Instance);
            contextCount = contextList.FieldType.GetProperty("Count", BindingFlags.Public | BindingFlags.Instance);
            contextItem = contextList.FieldType.GetProperty("Item", BindingFlags.Public | BindingFlags.Instance);
            contextItemReport = contextItem.PropertyType.GetField("ReportConnection", BindingFlags.Public | BindingFlags.Instance);

            componentMapping = typeof(XomReportTarget).GetProperty("ReportMessageComponentIdMapping", BindingFlags.NonPublic | BindingFlags.Instance);
        }

        [TestCase]
        public void DefaultReportTarget()
        {
            XomReportTarget target;
            string parameters;

            target = null;
            parameters = Config.GetSetting(Setting.xmgmt_target_report);

            try
            {
                target = CreateReport(parameters);

                target.Startup();

                ValidateConnected(target, 1);
            }
            finally
            {
                if (null != target)
                {
                    target.Close();
                }
            }
        }

        [TestCase]
        public void MultiConnectionReportTarget()
        {
            XomReportTarget target;
            string parameters;

            target = null;
            parameters = Config.GetSetting(Setting.xmgmt_target_report) + "Connections=4;";

            try
            {
                target = CreateReport(parameters);

                target.Startup();

                ValidateConnected(target, 4);
            }
            finally
            {
                if (null != target)
                {
                    target.Close();
                }
            }
        }

        [TestCase]
        public void ResizeReportTarget_Shrink()
        {
            XomReportTarget target;
            string baseline;
            string parameters;

            target = null;
            baseline = "Type=report;HeartBeatIntervalSec=15;KeepAliveIntervalSec=300;";
            parameters = baseline + "QueueSize=22222;Connections=4;";

            try
            {
                target = CreateReport(parameters);

                target.Startup();

                target.Init(ConfigUtil.GetParams(baseline + "QueueSize=11111;Connections=2;"));

                ValidateConnectedAndQueueSize(target, 2, 11111);
            }
            finally
            {
                if (null != target)
                {
                    target.Close();
                }
            }
        }

        [TestCase]
        public void ResizeReportTarget_Grow()
        {
            XomReportTarget target;
            string baseline;
            string parameters;

            target = null;
            baseline = "Type=report;HeartBeatIntervalSec=15;KeepAliveIntervalSec=300;";
            parameters = baseline + "QueueSize=22222;Connections=4;";

            try
            {
                target = CreateReport(parameters);

                target.Startup();

                target.Init(ConfigUtil.GetParams(baseline + "QueueSize=11111;Connections=6;"));

                ValidateConnectedAndQueueSize(target, 6, 11111);
            }
            finally
            {
                if (null != target)
                {
                    target.Close();
                }
            }
        }

        private XomReportTarget CreateReport(string parameters)
        {
            XomReportTarget target;
            Hashtable hash;

            target = new XomReportTarget(ConfigUtil.GetParams(parameters));
            hash = (Hashtable)componentMapping.GetValue(target, null);

            hash["STFGui"] = hash["vortexfd"];

            return target;
        }

        private void ValidateConnected(XomReportTarget target, int expectedConnections)
        {
            ValidateConnectedAndQueueSize(target, expectedConnections, null);
        }

        private void ValidateConnectedAndQueueSize(XomReportTarget target, int expectedConnections, int? queueSize)
        {
            object context;
            int count;

            context = contextList.GetValue(target);
            count = (int)contextCount.GetValue(context, null);

            XAssert.AssertEquals(expectedConnections, count, "Expected Connections");

            for (int c = 0; c < count; c++)
            {
                object item;
                ReportConnection connection;

                item = contextItem.GetValue(context, new object[] { c });
                connection = (ReportConnection)contextItemReport.GetValue(item);

                XAssert.AssertEquals(true, connection.IsConnected, "Connections[{0}].IsConnection", c);

                if (queueSize.HasValue)
                {
                    XAssert.AssertEquals(queueSize.Value, connection.MaxQueueSize, "Connections[{0}].MaxQueueSize", c);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_diagtest_none_12.4.56.0_none_39efabba7abde992
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=diagtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.manifest
XP_MANIFEST_PATH=manifests\msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.cat
XP_CATALOG_PATH=manifests\msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.cat
XP_PAYLOAD_PATH=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=diagtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\diagnostics\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_diagtest_none_12.4.56.0_none_39efabba7abde992
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=diagtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.manifest
XP_MANIFEST_PATH=manifests\msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.cat
XP_CATALOG_PATH=manifests\msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0.cat
XP_PAYLOAD_PATH=msil_diagtest_no-public-key_12.4.56.0_x-ww_61650cc0
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=diagtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\BasicTest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using xonline.common.config;

using ServerTestFramework;

namespace xonline.common.fastfail.test {
   public abstract class BasicTest : TestBase {
      protected BasicTest() {
         Name = GetType().Name;
      }

      protected BasicTest(string name) {
         Name = name;
      }

      protected void AddFunctional(TestBase child) {
         AddChild(child, true, false);
      }

      protected virtual void ExecuteTest() {

      }

      protected virtual void Cleanup() {

      }

      protected override void Execute() {
         Config.CheckForUpdates();

         try {
            ResultCode = TEST_RESULTS.FAILED;
            ExecuteTest();
            ResultCode = TEST_RESULTS.PASSED;
         }
         finally {
            Cleanup();
         }
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\Null.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.config;
using xonline.common.fastfail;

namespace xonline.common.fastfail.test {
   public class DenyFastFailPolicy : FastFailPolicy {
      public DenyFastFailPolicy() : base(null) { }

      public override bool RequestPermission(IFastFailGate gate) {
         return false;
      }
   }

   public class GrantFastFailPolicy : FastFailPolicy {
      public GrantFastFailPolicy() : base(null) { }

      public override bool RequestPermission(IFastFailGate gate) {
         return true;
      }
   }

   public class InvalidFastFailPolicy : FastFailPolicy {
      public InvalidFastFailPolicy() : base(null) { }

      public override bool RequestPermission(IFastFailGate gate) {
         throw new InvalidOperationException("this is an invalid fast fail object.");
      }
   }

   public class NullFastFailPolicy : FastFailPolicy {

      public NullFastFailPolicy(string key) 
         : base(null) 
      {
         this.key = key;
      }

      public NullFastFailPolicy() 
         : base(null) 
      {
         this.key = "no key specified";
      }

      public override bool RequestPermission(IFastFailGate gate) {
         return true;
      }

      public override string ToString() {
         return String.Format("NullFastFailPolicy[{0}]", key);
      }

      private string key;
   }

   public class NullCalibrator : Calibrator {
      public override float Calculate(Statistics statistics) {
         return 1.0f;
      }
   }

   public class NullFastFailGate : FastFailGate {
      public NullFastFailGate()
         : base(new NullFastFailPolicy(), new NullCalibrator(), null, new Statistics()) { }

      public override bool ConsumeLocatorTuple(LocatorTuple input, ref LocatorTuple output) {
         return false;
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\end2end\End2End.cs ===
using System;
using System.Collections.Generic;
using System.Configuration.Install;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using System.Threading;

using xonline.common.config;
using xonline.common.fastfail;
using xonline.common.mgmt;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   public class DelegatedPerformanceInstance : PerformanceInstance {
      public DelegatedPerformanceInstance(string resource) 
         : base(resource, null)
      {
         Targets = new List<PerformanceInstance>();
      }

      public override void AdjustThreshold(int threshold) {
         foreach (PerformanceInstance instance in Targets)
            instance.AdjustThreshold(threshold);
      }

      public override void DecrementThread() {
         foreach (PerformanceInstance instance in Targets)
            instance.DecrementThread();
      }

      public override void IncrementDenial() {
         foreach (PerformanceInstance instance in Targets)
            instance.IncrementDenial();
      }

      public override void IncrementFailure() {
         foreach (PerformanceInstance instance in Targets)
            instance.IncrementFailure();
      }

      public override void IncrementResponseTime(TimeSpan span) {
         foreach (PerformanceInstance instance in Targets)
            instance.IncrementResponseTime(span);
      }

      public override void IncrementResult(FastFailResult result) {
         foreach (PerformanceInstance instance in Targets)
            instance.IncrementResult(result);
      }

      public override void IncrementThread() {
         foreach (PerformanceInstance instance in Targets)
            instance.IncrementThread();
      }

      public List<PerformanceInstance> Targets;
   }

   [XomPerformanceCounterCategoryAttr( "STF: FastFail - Unit Test", "FastFail performance counter for unit tests", true )]
   public class TestPerformanceCategory : ThreadPerformanceCategory {
      public TestPerformanceCategory() : base(End2End.ResourceName) { }
   }

   public static class End2End {
      public static void InstallPerformanceCategory() {
         if (!PerformanceCounterCategory.Exists("FastFail - Unit Test")) {
            XomPerformanceCounterInstall installer;
            MethodInfo method;
            int tries = 0;

            Global.RO.Info("Installing Test Performance Counter...");

            installer = new XomPerformanceCounterInstall();
            installer.Context = new InstallContext();

            method = typeof(XomPerformanceCounterInstall).GetMethod("InstallCategory",
               BindingFlags.NonPublic | BindingFlags.Instance);

            method.Invoke(installer, new object[] { typeof(TestPerformanceCategory) });

            while (!PerformanceCounterCategory.Exists("FastFail - Unit Test")) {
               Global.RO.Info("Waiting 15 seconds for performace category to install...");

               Thread.Sleep(15000); // wait for sleep

               if (10 == --tries) {
                  Global.RO.Error("Counter did not come up in a timely fashion.");
                  throw new Exception("Performance counter category not created in a timely fashion.");
               }
            }
         }
         else
            Global.RO.Info("Performace Counter Category already present.");
      }

      public static void BuildScenario() {
         InstallPerformanceCategory();

         if (!PerformanceCategoryRegistry.IsCategoryRegistered(End2End.ResourceName))
            PerformanceCategoryRegistry.RegisterCategory(new TestPerformanceCategory());

         ResourcePolicy = new DelegatedFastFailPolicy(null, new InvalidFastFailPolicy());
         ResourceCalibrator = new SquareCalibrator(1.0f);
         ResourceStatistics = new Statistics();
         ResourcePerformanceInstance = new DelegatedPerformanceInstance(ResourceName);

         ResourceGate = new ResourceFastFailGate(
            ResourceName,
            ResourcePolicy,
            ResourceCalibrator,
            ResourcePerformanceInstance,
            ResourceStatistics);

         ResourceRegistry.UnregisterResource(ResourceName);
         ResourceRegistry.RegisterResource(ResourceGate);
      }

      public static readonly string ResourceName = "Resource";
      public static readonly string ResourceInstance = "Instance";
      public static ResourceFastFailGate ResourceGate;
      public static DelegatedFastFailPolicy ResourcePolicy;
      public static DelegatedPerformanceInstance ResourcePerformanceInstance;
      public static SquareCalibrator ResourceCalibrator;
      public static Statistics ResourceStatistics;
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\end2end\Unit.ChickenSwitch.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   [Description("Verifies that when the chicken switch is disabled, tracker requests go through."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitChickenSwitch_Disabled : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Deny", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Deny", new DenyFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Deny");
         }

         Utilities.WriteSetting(Setting.fastfail_disableThrottling, "false");
 
         Config.CheckForUpdates();

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               throw new Exception("Resource denial should have occurred.");
            }
         }
         catch (FastFailException) {

         }
      }
   }

   [Description("Verifies that when the chicken switch is enabled, tracker requests are always granted."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitChickenSwitch_Enabled : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Deny", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Deny", new DenyFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Deny");
         }

         Utilities.WriteSetting(Setting.fastfail_disableThrottling, "true");

         Config.CheckForUpdates();

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               
            }
         }
         catch (FastFailException e) {
            throw new Exception("Resource denial should not have occurred.", e);
         }
      }

      protected override void Cleanup() {
         Utilities.WriteSetting(Setting.fastfail_disableThrottling, "false");
         Config.CheckForUpdates();
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\Utilities.cs ===
﻿using System;
using System.Collections.Generic;
using System.Threading;
using System.Data.SqlClient;
using System.Text;

using xonline.common.config;

using ServerTestFramework;

namespace xonline.common.fastfail.test {
   public static class Utilities {
      public static void ValidateValue(object data, object expected, string name) {
         IComparable comp;
         IConvertible c1, c2;
         string message;

         message = string.Format(
            "{0} is expected to have a value of {1}, instead a value of {2} was found.",
            name, 
            expected != null ? "'" + expected.ToString() + "'" : "(null)", 
            data != null ? "'" + data.ToString() + "'" : "(null)"
         );

         comp = data as IComparable;
         c1 = data as IConvertible;
         c2 = expected as IConvertible;

         if (null != comp && null != c1 && null != c2) {
            if (0 != comp.CompareTo(Convert.ChangeType(expected, c1.GetType())))
               throw new Exception(message);
         }
         else if (data != null) {
            if (!data.Equals(expected))
               throw new Exception(message);
         }
         else if (expected != null) {
            throw new Exception(message);
         }
      }

      public static void ClearSetting(string name) {
         WriteSetting(name, "");
      }

      public static void WriteSetting(string setting, string value) {
         using (SqlConnection connection = new SqlConnection(Config.NpdbConnectionString)) {
            connection.Open();

            using (SqlCommand command = new SqlCommand("p_config_add_setting", connection)) {
               command.Parameters.AddWithValue("@setting", setting);
               command.Parameters.AddWithValue("@value", value);
               command.Parameters.AddWithValue("@overwriteExistingValue", 1);

               command.CommandType = System.Data.CommandType.StoredProcedure;

               command.ExecuteNonQuery();
            }
         }
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\end2end\Unit.Tracking.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   public class TrackingPerformanceCounterInstance : PerformanceInstance {
      public TrackingPerformanceCounterInstance() : base(End2End.ResourceName, null) { }

      public override void AdjustThreshold(int threshold) {
         AdjustedThreshold++;
      }

      public override void DecrementThread() {
         DecrementedThreads++;
      }

      public override void IncrementDenial() {
         IncrementedDenials++;
      }

      public override void IncrementFailure() {
         IncrementedFailures++;
      }

      public override void IncrementResponseTime(TimeSpan span) {
         IncrementedResponseTimes++;
      }

      public override void IncrementThread() {
         IncrementedThreads++;
      }

      public override void IncrementTimeout() {
         IncrementedTimeout++;
      }

      public int AdjustedThreshold = 0;
      public int DecrementedThreads = 0;
      public int IncrementedDenials = 0;
      public int IncrementedFailures = 0;
      public int IncrementedResponseTimes = 0;
      public int IncrementedThreads = 0;
      public int IncrementedTimeout = 0;
   }

   [Description("Verifies that when the tracker indicates success, the statistics and performance counters are modified accordinly."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitTracking_TrackerSuccess : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;
         TrackingPerformanceCounterInstance tracking;

         tracking = new TrackingPerformanceCounterInstance();

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Grant", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Grant", new GrantFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Grant");
         }

         End2End.ResourcePerformanceInstance.Targets.Add(tracking);

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[during]");
               Utilities.ValidateValue(tracking.DecrementedThreads, 0, "tracking.DecrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[during]");
               Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[during]");
               Utilities.ValidateValue(tracking.IncrementedResponseTimes, 0, "tracking.IncrementedResponseTimes[during]");
               Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[during]");

               Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 0, "AllRequests.Count[during]");

               Utilities.ValidateValue(End2End.ResourceGate.Threads, 1, "End2End.ResourceGate.Threads[during]");

               tracker.ReportSuccess();
            }

            Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[after]");
            Utilities.ValidateValue(tracking.DecrementedThreads, 1, "tracking.DecrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[after]");
            Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[after]");
            Utilities.ValidateValue(tracking.IncrementedResponseTimes, 1, "tracking.IncrementedResponseTimes[after]");
            Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[after]");

            Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 1, "SuccessfulRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 1, "AllRequests.Count[after]");

            Utilities.ValidateValue(End2End.ResourceGate.Threads, 0, "End2End.ResourceGate.Threads[after]");
         }
         finally {
            End2End.ResourcePerformanceInstance.Targets.Remove(tracking);
         }
      }
   }

   [Description("Verifies that when the tracker indicates failure, the statistics and performance counters are modified accordinly."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitTracking_TrackerFailure : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;
         TrackingPerformanceCounterInstance tracking;

         tracking = new TrackingPerformanceCounterInstance();

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Grant", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Grant", new GrantFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Grant");
         }

         End2End.ResourcePerformanceInstance.Targets.Add(tracking);

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[during]");
               Utilities.ValidateValue(tracking.DecrementedThreads, 0, "tracking.DecrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[during]");
               Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[during]");
               Utilities.ValidateValue(tracking.IncrementedResponseTimes, 0, "tracking.IncrementedResponseTimes[during]");
               Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[during]");

               Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 0, "AllRequests.Count[during]");

               Utilities.ValidateValue(End2End.ResourceGate.Threads, 1, "End2End.ResourceGate.Threads[during]");

               tracker.ReportFailure();
            }

            Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[after]");
            Utilities.ValidateValue(tracking.DecrementedThreads, 1, "tracking.DecrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[after]");
            Utilities.ValidateValue(tracking.IncrementedFailures, 1, "tracking.IncrementedFailures[after]");
            Utilities.ValidateValue(tracking.IncrementedResponseTimes, 1, "tracking.IncrementedResponseTimes[after]");
            Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[after]");

            Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 1, "FailedRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 1, "AllRequests.Count[after]");

            Utilities.ValidateValue(End2End.ResourceGate.Threads, 0, "End2End.ResourceGate.Threads[after]");
         }
         finally {
            End2End.ResourcePerformanceInstance.Targets.Remove(tracking);
         }
      }
   }

   [Description("Verifies that when the tracker indicates timeout, the statistics and performance counters are modified accordinly."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitTracking_TrackerTimeout : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;
         TrackingPerformanceCounterInstance tracking;

         tracking = new TrackingPerformanceCounterInstance();

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Grant", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Grant", new GrantFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Grant");
         }

         End2End.ResourcePerformanceInstance.Targets.Add(tracking);

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[during]");
               Utilities.ValidateValue(tracking.DecrementedThreads, 0, "tracking.DecrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[during]");
               Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[during]");
               Utilities.ValidateValue(tracking.IncrementedResponseTimes, 0, "tracking.IncrementedResponseTimes[during]");
               Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[during]");
               Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[during]");

               Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[during]");
               Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 0, "AllRequests.Count[during]");

               Utilities.ValidateValue(End2End.ResourceGate.Threads, 1, "End2End.ResourceGate.Threads[during]");

               tracker.ReportTimeout();
            }

            Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[after]");
            Utilities.ValidateValue(tracking.DecrementedThreads, 1, "tracking.DecrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedDenials, 0, "tracking.IncrementedDenials[after]");
            Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[after]");
            Utilities.ValidateValue(tracking.IncrementedResponseTimes, 1, "tracking.IncrementedResponseTimes[after]");
            Utilities.ValidateValue(tracking.IncrementedThreads, 1, "tracking.IncrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedTimeout, 1, "tracking.IncrementedTimeout[after]");

            Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 1, "TimedoutRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 1, "AllRequests.Count[after]");

            Utilities.ValidateValue(End2End.ResourceGate.Threads, 0, "End2End.ResourceGate.Threads[after]");
         }
         finally {
            End2End.ResourcePerformanceInstance.Targets.Remove(tracking);
         }
      }
   }

   [Description("Verifies that when the tracker indicates denial, the statistics and performance counters are modified accordinly."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitTracking_TrackerDenial : BasicTest {
      protected override void ExecuteTest() {
         IFastFailPolicy policy;
         TrackingPerformanceCounterInstance tracking;

         tracking = new TrackingPerformanceCounterInstance();

         End2End.BuildScenario();

         if (!End2End.ResourcePolicy.Policies.TryGetValue("Deny", out policy)) {
            End2End.ResourcePolicy.Policies.Add("Deny", new DenyFastFailPolicy());
            End2End.ResourcePolicy.SelectPolicy("Deny");
         }

         End2End.ResourcePerformanceInstance.Targets.Add(tracking);

         try {
            using (FastFailTracker tracker = new FastFailTracker(End2End.ResourceName)) {
               throw new Exception("Denial was expected.");
            }
         }
         catch (FastFailException) {
            Utilities.ValidateValue(tracking.AdjustedThreshold, 0, "tracking.AdjustedThreshold[after]");
            Utilities.ValidateValue(tracking.DecrementedThreads, 0, "tracking.DecrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedDenials, 1, "tracking.IncrementedDenials[after]");
            Utilities.ValidateValue(tracking.IncrementedFailures, 0, "tracking.IncrementedFailures[after]");
            Utilities.ValidateValue(tracking.IncrementedResponseTimes, 0, "tracking.IncrementedResponseTimes[after]");
            Utilities.ValidateValue(tracking.IncrementedThreads, 0, "tracking.IncrementedThreads[after]");
            Utilities.ValidateValue(tracking.IncrementedTimeout, 0, "tracking.IncrementedTimeout[after]");

            Utilities.ValidateValue(End2End.ResourceStatistics.Features.SuccessfulRequests.Count, 0, "SuccessfulRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.FailedRequests.Count, 0, "FailedRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.TimedoutRequests.Count, 0, "TimedoutRequests.Count[after]");
            Utilities.ValidateValue(End2End.ResourceStatistics.Features.AllRequests.Count, 0, "AllRequests.Count[after]");

            Utilities.ValidateValue(End2End.ResourceGate.Threads, 0, "End2End.ResourceGate.Threads[after]");
         }
         finally {
            End2End.ResourcePerformanceInstance.Targets.Remove(tracking);
         }
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\gate\Unit.Named.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the default settings match expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate gate;
         IFastFailPolicy policy;
         ICalibrator calibrator;
         PerformanceInstance performance;
         Statistics statistics;
         string Name;

         Name = "Name";
         policy = new NullFastFailPolicy();
         calibrator = new NullCalibrator();
         performance = new PerformanceInstance(End2End.ResourceName, null);
         statistics = new Statistics();

         gate = new NamedFastFailGate(Name, policy, calibrator, performance, statistics);

         Utilities.ValidateValue(gate.Calibrator, calibrator, "gate.Calibrator");
         Utilities.ValidateValue(gate.Children.Count, 0, "gate.Children.Count");
         Utilities.ValidateValue(gate.Name, Name, "gate.Name");
         Utilities.ValidateValue(gate.PerformanceInstance, performance, "gate.PerformanceInstance");
         Utilities.ValidateValue(gate.Policy, policy, "gate.Policy");
         Utilities.ValidateValue(gate.Statistics, statistics, "gate.Statistics");
         Utilities.ValidateValue(gate.Threads, 0, "gate.Threads");
      }
   }
   #endregion

   #region Locator Tests
   [Description("Verifies that a matching locator is recognized by a singleton n-tuple"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_RecognizeSingle : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate gate;
         LocatorTuple input;
         LocatorTuple output;

         gate = new NamedFastFailGate("Name", new NullFastFailPolicy(), new NullCalibrator());

         input = new LocatorTuple("NaMe");
         output = new LocatorTuple();

         Utilities.ValidateValue(gate.ConsumeLocatorTuple(input, ref output), true, "gate.ConsumeLocatorTuple()");
         Utilities.ValidateValue(output.Count, 0, "output.Count");
      }
   }

   [Description("Verifies that a matching locator is recognized by a n-tuple"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_Recognize : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate gate;
         LocatorTuple input;
         LocatorTuple output;

         gate = new NamedFastFailGate("Name", new NullFastFailPolicy(), new NullCalibrator());

         input = new LocatorTuple("NaMe", "TWO", "three");
         output = new LocatorTuple();

         Utilities.ValidateValue(gate.ConsumeLocatorTuple(input, ref output), true, "gate.ConsumeLocatorTuple()");
         Utilities.ValidateValue(output.Count, 2, "output.Count");
         Utilities.ValidateValue(output[0], "TWO", "output[0]");
         Utilities.ValidateValue(output[1], "three", "output[1]");
      }
   }

   [Description("Verifies that a mismatched locator is not recognized."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_UnrecognizeSingle : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate gate;
         LocatorTuple input;
         LocatorTuple output;

         gate = new NamedFastFailGate("Name", new NullFastFailPolicy(), new NullCalibrator());

         input = new LocatorTuple("None");
         output = new LocatorTuple();

         Utilities.ValidateValue(gate.ConsumeLocatorTuple(input, ref output), false, "gate.ConsumeLocatorTuple()");
      }
   }

   [Description("Verifies that a child can be located (in the first position)."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_LocateFirst : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate parent;
         NamedFastFailGate[] gates;

         LocatorTuple input;
         LocatorTuple output;

         gates = new NamedFastFailGate[3];
         gates[0] = new NamedFastFailGate("alpha", new NullFastFailPolicy(), new NullCalibrator());
         gates[1] = new NamedFastFailGate("beta", new NullFastFailPolicy(), new NullCalibrator());
         gates[2] = new NamedFastFailGate("theta", new NullFastFailPolicy(), new NullCalibrator());

         parent = new NamedFastFailGate("parent", new NullFastFailPolicy(), new NullCalibrator());
         parent.Children.Add(gates[0]);
         parent.Children.Add(gates[1]);
         parent.Children.Add(gates[2]);

         input = new LocatorTuple("ALPHA", "left-over");
         output = new LocatorTuple();

         Utilities.ValidateValue(FastFailGate.LocateTargetGate(parent, input, ref output), gates[0], "FastFailGate.LocateTargetGate()");
      }
   }

   [Description("Verifies that a child can be located (in the second position)."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_LocateSecond : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate parent;
         NamedFastFailGate[] gates;

         LocatorTuple input;
         LocatorTuple output;

         gates = new NamedFastFailGate[3];
         gates[0] = new NamedFastFailGate("alpha", new NullFastFailPolicy(), new NullCalibrator());
         gates[1] = new NamedFastFailGate("beta", new NullFastFailPolicy(), new NullCalibrator());
         gates[2] = new NamedFastFailGate("theta", new NullFastFailPolicy(), new NullCalibrator());

         parent = new NamedFastFailGate("parent", new NullFastFailPolicy(), new NullCalibrator());
         parent.Children.Add(gates[0]);
         parent.Children.Add(gates[1]);
         parent.Children.Add(gates[2]);

         input = new LocatorTuple("BETA", "left-over");
         output = new LocatorTuple();

         Utilities.ValidateValue(FastFailGate.LocateTargetGate(parent, input, ref output), gates[1], "FastFailGate.LocateTargetGate()");
      }
   }

   [Description("Verifies that a child can be located (in the second position)."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_LocateThird : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate parent;
         NamedFastFailGate[] gates;

         LocatorTuple input;
         LocatorTuple output;

         gates = new NamedFastFailGate[3];
         gates[0] = new NamedFastFailGate("alpha", new NullFastFailPolicy(), new NullCalibrator());
         gates[1] = new NamedFastFailGate("beta", new NullFastFailPolicy(), new NullCalibrator());
         gates[2] = new NamedFastFailGate("theta", new NullFastFailPolicy(), new NullCalibrator());

         parent = new NamedFastFailGate("parent", new NullFastFailPolicy(), new NullCalibrator());
         parent.Children.Add(gates[0]);
         parent.Children.Add(gates[1]);
         parent.Children.Add(gates[2]);

         input = new LocatorTuple("THETA", "left-over");
         output = new LocatorTuple();

         Utilities.ValidateValue(FastFailGate.LocateTargetGate(parent, input, ref output), gates[2], "FastFailGate.LocateTargetGate()");
      }
   }

   [Description("Verifies that no child is returned on a mismatched locator."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_LocateNone : BasicTest {
      protected override void ExecuteTest() {
         NamedFastFailGate parent;
         NamedFastFailGate[] gates;

         LocatorTuple input;
         LocatorTuple output;

         gates = new NamedFastFailGate[3];
         gates[0] = new NamedFastFailGate("alpha", new NullFastFailPolicy(), new NullCalibrator());
         gates[1] = new NamedFastFailGate("beta", new NullFastFailPolicy(), new NullCalibrator());
         gates[2] = new NamedFastFailGate("theta", new NullFastFailPolicy(), new NullCalibrator());

         parent = new NamedFastFailGate("parent", new NullFastFailPolicy(), new NullCalibrator());
         parent.Children.Add(gates[0]);
         parent.Children.Add(gates[1]);
         parent.Children.Add(gates[2]);

         input = new LocatorTuple("NO-ONE", "left-over");
         output = new LocatorTuple();

         Utilities.ValidateValue(FastFailGate.LocateTargetGate(parent, input, ref output), null, "FastFailGate.LocateTargetGate()");
      }
   }

   [Description("Verifies that no child is returned on a mismatched locator."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitNamedGate_BuildChain : BasicTest {
      protected override void ExecuteTest() {
         ResourceFastFailGate parent;
         NamedFastFailGate[] gates;
         FastFailGateCollection chain;

         LocatorTuple input;

         gates = new NamedFastFailGate[15];

         gates[0 ] = new NamedFastFailGate("0", new NullFastFailPolicy(), new NullCalibrator());
         gates[1 ] = new NamedFastFailGate("1", new NullFastFailPolicy(), new NullCalibrator());

         gates[2 ] = new NamedFastFailGate("00", new NullFastFailPolicy(), new NullCalibrator());
         gates[3 ] = new NamedFastFailGate("01", new NullFastFailPolicy(), new NullCalibrator());
         gates[4 ] = new NamedFastFailGate("10", new NullFastFailPolicy(), new NullCalibrator());
         gates[5 ] = new NamedFastFailGate("11", new NullFastFailPolicy(), new NullCalibrator());

         gates[6 ] = new NamedFastFailGate("000", new NullFastFailPolicy(), new NullCalibrator());
         gates[7 ] = new NamedFastFailGate("001", new NullFastFailPolicy(), new NullCalibrator());
         gates[8 ] = new NamedFastFailGate("010", new NullFastFailPolicy(), new NullCalibrator());
         gates[9 ] = new NamedFastFailGate("011", new NullFastFailPolicy(), new NullCalibrator());
         gates[10] = new NamedFastFailGate("100", new NullFastFailPolicy(), new NullCalibrator());
         gates[11] = new NamedFastFailGate("101", new NullFastFailPolicy(), new NullCalibrator());
         gates[12] = new NamedFastFailGate("110", new NullFastFailPolicy(), new NullCalibrator());
         gates[13] = new NamedFastFailGate("111", new NullFastFailPolicy(), new NullCalibrator());

         parent = new ResourceFastFailGate("root", new NullFastFailPolicy(), new NullCalibrator());

         parent.Children.Add(gates[0]);
         parent.Children.Add(gates[1]);
         gates[0].Children.Add(gates[2]);
         gates[0].Children.Add(gates[3]);
         gates[1].Children.Add(gates[4]);
         gates[1].Children.Add(gates[5]);
         gates[2].Children.Add(gates[6]);
         gates[2].Children.Add(gates[7]);
         gates[3].Children.Add(gates[8]);
         gates[3].Children.Add(gates[9]);
         gates[4].Children.Add(gates[10]);
         gates[4].Children.Add(gates[11]);
         gates[5].Children.Add(gates[12]);
         gates[5].Children.Add(gates[13]);

         input = new LocatorTuple("0", "01", "011");

         chain = FastFailTracker.CreateGateChain(parent, input);

         Utilities.ValidateValue(chain.Count, 4, "chain.Count");
         Utilities.ValidateValue(chain[0], parent, "chain[0]");
         Utilities.ValidateValue(((NamedFastFailGate)chain[1]).Name, gates[0].Name, "chain[1].Name");
         Utilities.ValidateValue(((NamedFastFailGate)chain[2]).Name, gates[3].Name, "chain[2].Name");
         Utilities.ValidateValue(((NamedFastFailGate)chain[3]).Name, gates[9].Name, "chain[3].Name");
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\Groups.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.config;

namespace xonline.common.fastfail.test {
   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class BoundedPolicyGroup : BasicTest {
      public BoundedPolicyGroup()
         : base("BoundedFastFailPolicy")
      {
         AddFunctional(new UnitBounded_DefaultInitialize());
         AddFunctional(new UnitBounded_ContextInitialize());
         AddFunctional(new UnitBounded_BoundsInitialize());
         AddFunctional(new UnitBounded_SettingNameInitialize());
         AddFunctional(new UnitBounded_CalibrationChange());
         AddFunctional(new UnitBounded_BoundChange());
         AddFunctional(new UnitBounded_BoundChangeViaText());
         AddFunctional(new UnitBounded_PercentageAssignment());
         AddFunctional(new UnitBounded_CurrentUpdatedOnBoundsChange());
         AddFunctional(new UnitBounded_SettingNameChange());
         AddFunctional(new UnitBounded_LoadMissingDatabaseSettings());
         AddFunctional(new UnitBounded_LoadDatabaseSettings());
         AddFunctional(new UnitBounded_AutoLoadDatabaseSettings());
         AddFunctional(new UnitBounded_DynamicAutoLoadDatabaseSettings());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class DelegatedPolicyGroup : BasicTest {
      public DelegatedPolicyGroup()
         : base("DelegatedFastFailPolicy")
      {
         AddFunctional(new UnitDelegated_DefaultInitialize());
         AddFunctional(new UnitDelegated_PoliciesInitialize());
         AddFunctional(new UnitDelegated_CalibrationChange());
         AddFunctional(new UnitDelegated_DelegatedDenial());
         AddFunctional(new UnitDelegated_DelegatedGrant());
         AddFunctional(new UnitDelegated_MissingPolicyKey());
         AddFunctional(new UnitDelegated_LocatedPolicyKey());
         AddFunctional(new UnitDelegated_LoadMissingDatabaseSettings());
         AddFunctional(new UnitDelegated_LoadDatabaseSettings());
         AddFunctional(new UnitDelegated_DynamicReloadActive());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class ThreadBoundedPolicyGroup : BasicTest {
      public ThreadBoundedPolicyGroup()
         : base("ThreadBoundedFastFailPolicy")
      {
         AddFunctional(new UnitThreadBounded_DefaultInitialize());
         AddFunctional(new UnitThreadBounded_MixedDenial());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class RateBoundedPolicyGroup : BasicTest {
      public RateBoundedPolicyGroup()
         : base("RateBoundedFastFailPolicy") 
      {
         AddFunctional(new UnitRateBounded_DefaultInitialize());
         AddFunctional(new UnitRateBounded_AllDenial());
         AddFunctional(new UnitRateBounded_AllGrant());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class StatisticFeatureGroup : BasicTest {
      public StatisticFeatureGroup()
         : base("StatisticFeatureGroup") 
      {
         AddFunctional(new UnitFeature_DefaultInitialize());
         AddFunctional(new UnitFeature_LowerClamp());
         AddFunctional(new UnitFeature_UpperClamp());
         AddFunctional(new UnitFeature_IngestOneEvent());
         AddFunctional(new UnitFeature_IngestThreeEvents());
         AddFunctional(new UnitFeature_EmptyExpire());
         AddFunctional(new UnitFeature_ExpireUntilEmpty());
         AddFunctional(new UnitFeature_FillUpThenDrain());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class StatisticFeatureAggregatorGroup : BasicTest {
      public StatisticFeatureAggregatorGroup()
         : base("StatisticFeatureAggregatorGroup") 
      {
         AddFunctional(new UnitFeatureAggregator_DefaultInitialize());
         AddFunctional(new UnitFeatureAggregator_IngestFailure());
         AddFunctional(new UnitFeatureAggregator_IngestSuccess());
         AddFunctional(new UnitFeatureAggregator_IngestTimeout());
         AddFunctional(new UnitFeatureAggregator_IngestEach());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class StatisticsAggregatorGroup : BasicTest {
      public StatisticsAggregatorGroup()
         : base("StatisticsAggregatorGroup") 
      {
         AddFunctional(new UnitStatistics_DefaultInitialize());
         AddFunctional(new UnitStatistics_LowerClamp());
         AddFunctional(new UnitStatistics_UpperClamp());
         AddFunctional(new UnitStatistics_AdvanceUntilEmpty());
         AddFunctional(new UnitStatistics_LoadDatabaseSettings());
         AddFunctional(new UnitStatistics_ReloadDatabaseSettings());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class NamedResourceGroup : BasicTest {
      public NamedResourceGroup()
         : base("NamedResourceGroup")
      {
         AddFunctional(new UnitNamedGate_DefaultInitialize());
         AddFunctional(new UnitNamedGate_RecognizeSingle());
         AddFunctional(new UnitNamedGate_Recognize());
         AddFunctional(new UnitNamedGate_UnrecognizeSingle());
         AddFunctional(new UnitNamedGate_LocateFirst());
         AddFunctional(new UnitNamedGate_LocateSecond());
         AddFunctional(new UnitNamedGate_LocateThird());
         AddFunctional(new UnitNamedGate_LocateNone());
         AddFunctional(new UnitNamedGate_BuildChain());
      }
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class End2EndGroup : BasicTest {
      public End2EndGroup()
         : base("End2EndGroup")
      {
         AddFunctional(new UnitChickenSwitch_Disabled());
         AddFunctional(new UnitChickenSwitch_Enabled());
         AddFunctional(new UnitTracking_TrackerSuccess());
         AddFunctional(new UnitTracking_TrackerFailure());
         AddFunctional(new UnitTracking_TrackerDenial());
         AddFunctional(new UnitTracking_TrackerTimeout());
      }
   }

   [TestGroup, Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class ProportionBasedGroup : BasicTest {
      public ProportionBasedGroup()
         : base("ProportionBasedGroup")
      {
         AddFunctional(new Monitor_Basic());
         AddFunctional(new Monitor_Throttle());
         AddFunctional(new Monitor_HalfAndHalf());
         AddFunctional(new Monitor_HalfAndHalfWithReserve());
         AddFunctional(new Monitor_HalfAndHalfWithExpiredBuckets());
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\policy\Unit.Bounded.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   public class UnitBoundedFastFailPolicy : BoundedFastFailPolicy<float> {
      public UnitBoundedFastFailPolicy()
         : base(null) { }
      public UnitBoundedFastFailPolicy(object context) 
         : base(context) { }
      public UnitBoundedFastFailPolicy(object context, float lowerBound, float upperBound)
         : base(context, lowerBound, upperBound) { }
      public UnitBoundedFastFailPolicy(object context, float lowerBound, float upperBound, string lowerBoundSettingName, string upperBoundSettingName)
         : base(context, lowerBound, upperBound, lowerBoundSettingName, upperBoundSettingName) { }

      public override bool RequestPermission(IFastFailGate gate) {
         return true;
      }
   }

   #region Initialization Tests
   [Description("Validates the default values of BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy = new UnitBoundedFastFailPolicy();

         Utilities.ValidateValue(policy.Context, null, "policy.Context");
         Utilities.ValidateValue(policy.Calibration, 1.0f, "policy.Calibration");
         Utilities.ValidateValue(policy.Bounds.Upper, 0.0f, "policy.Bounds.Upper");
         Utilities.ValidateValue(policy.Bounds.Lower, 0.0f, "policy.Bounds.Lower");
      }
   }

   [Description("Validates the context exposed after all constructors of BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_ContextInitialize : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;
         UnitBoundedFastFailPolicy policy2;
         UnitBoundedFastFailPolicy policy3;
         string context = "context";

         policy1 = new UnitBoundedFastFailPolicy(context);
         policy2 = new UnitBoundedFastFailPolicy(context, 0.0f, 0.0f);
         policy3 = new UnitBoundedFastFailPolicy(context, 0.0f, 0.0f, "", "");

         Utilities.ValidateValue(policy1.Context, context, "policy1.Context");
         Utilities.ValidateValue(policy2.Context, context, "policy2.Context");
         Utilities.ValidateValue(policy3.Context, context, "policy3.Context");
      }
   }

   [Description("Validates the bounds exposed after all constructors of BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_BoundsInitialize : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;
         UnitBoundedFastFailPolicy policy2;

         policy1 = new UnitBoundedFastFailPolicy(null, 5.0f,10.0f);
         policy2 = new UnitBoundedFastFailPolicy(null, 5.0f,10.0f, "", "");

         Utilities.ValidateValue(policy1.Bounds.Upper, 10.0f, "policy1.Bounds.Upper");
         Utilities.ValidateValue(policy1.Bounds.Lower, 5.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy2.Bounds.Upper, 10.0f, "policy2.Bounds.Upper");
         Utilities.ValidateValue(policy2.Bounds.Lower, 5.0f, "policy2.Bounds.Lower");
      }
   }

   [Description("Validates the setting names exposed after all constructors of BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_SettingNameInitialize : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy(null, 0.0f, 0.0f, "lower", "upper");

         Utilities.ValidateValue(policy1.BoundSettingNames.Lower, "lower", "policy1.BoundSettingNames.Lower");
         Utilities.ValidateValue(policy1.BoundSettingNames.Upper, "upper", "policy1.BoundSettingNames.Upper");
      }
   }
   #endregion

   #region Calibration Tests
   [Description("Validates the bounds are changed post calibration."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_CalibrationChange : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;
         UnitBoundedFastFailPolicy policy2;
         UnitBoundedFastFailPolicy policy3;
         NullFastFailGate gate;

         policy1 = new UnitBoundedFastFailPolicy(null, 0.0f, 10.0f);
         policy2 = new UnitBoundedFastFailPolicy(null, 0.0f, 10.0f);
         policy3 = new UnitBoundedFastFailPolicy(null, 0.0f, 10.0f);
         gate = new NullFastFailGate();

         policy1.Calibrate(gate, 0.0f);
         policy2.Calibrate(gate, 0.5f);
         policy3.Calibrate(gate, 1.0f);

         Utilities.ValidateValue(policy1.Bounds.Current, 0.0f, "policy1.Bounds.Current");
         Utilities.ValidateValue(policy2.Bounds.Current, 5.0f, "policy2.Bounds.Current");
         Utilities.ValidateValue(policy3.Bounds.Current,10.0f, "policy3.Bounds.Current");
      }
   }
   #endregion

   #region Assignment Tests
   [Description("Validates the bounds exposed after being changed for BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_BoundChange : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy();

         policy1.Bounds.Assign(1.0f, 2.0f);
         Utilities.ValidateValue(policy1.Bounds.Lower, 1.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 2.0f, "policy1.Bounds.Upper");

         policy1.Bounds.Assign(10.0f, 20.0f);
         Utilities.ValidateValue(policy1.Bounds.Lower, 10.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 20.0f, "policy1.Bounds.Upper");
      }
   }

   [Description("Validates the bounds exposed after being changed via text for BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_BoundChangeViaText : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy();

         policy1.Bounds.Assign("10.5", "20.5");
         Utilities.ValidateValue(policy1.Bounds.Lower, 10.5f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 20.5f, "policy1.Bounds.Upper");

         policy1.Bounds.Assign("1.0", null);
         Utilities.ValidateValue(policy1.Bounds.Lower, 1.0f, "policy1.Bounds.Lower*");
         Utilities.ValidateValue(policy1.Bounds.Upper, 20.5f, "policy1.Bounds.Upper*");

         policy1.Bounds.Assign(null, "2.0");
         Utilities.ValidateValue(policy1.Bounds.Lower, 1.0f, "policy1.Bounds.Lower**");
         Utilities.ValidateValue(policy1.Bounds.Upper, 2.0f, "policy1.Bounds.Upper**");

         policy1.Bounds.Assign(null, null);
         Utilities.ValidateValue(policy1.Bounds.Lower, 1.0f, "policy1.Bounds.Lower***");
         Utilities.ValidateValue(policy1.Bounds.Upper, 2.0f, "policy1.Bounds.Upper***");
      }
   }

   [Description("Validates the setting names exposed after being changed for BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_PercentageAssignment : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy();
         policy1.Bounds.ReferencePoint = 50.0f;

         policy1.Bounds.Assign("50%", "60%");
         Utilities.ValidateValue(policy1.Bounds.Lower, 25.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 30.0f, "policy1.Bounds.Upper");
      }
   }

   [Description("Validates the current bound value post lower and upper bound adjustment for the BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_CurrentUpdatedOnBoundsChange : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy(null, 0, 0);
         
         policy1.Calibrate(new NullFastFailGate(), 0.5f);

         policy1.Bounds.Upper = 100.0f;

         Utilities.ValidateValue(policy1.Bounds.Current, 50.0f, "policy1.Bounds.Current");

         policy1.Bounds.Lower = 50.0f;

         Utilities.ValidateValue(policy1.Bounds.Current, 75.0f, "policy1.Bounds.Current");
      }
   }

   [Description("Validates the setting names exposed after being changed for BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_SettingNameChange : BasicTest {
      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy();

         policy1.BoundSettingNames.Assign("lower-set", "upper-set");
         Utilities.ValidateValue(policy1.BoundSettingNames.Upper, "upper-set", "policy1.BoundSettingNames.Upper");
         Utilities.ValidateValue(policy1.BoundSettingNames.Lower, "lower-set", "policy1.BoundSettingNames.Lower");

         policy1.BoundSettingNames.Assign("lower-changed", "upper-changed");
         Utilities.ValidateValue(policy1.BoundSettingNames.Upper, "upper-changed", "policy1.BoundSettingNames.Upper");
         Utilities.ValidateValue(policy1.BoundSettingNames.Lower, "lower-changed", "policy1.BoundSettingNames.Lower");
      }
   }
   #endregion

   #region Settings Tests
   [Description("Validates the default bounds exposed after attempting to load missing database settings npdb for the BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_LoadMissingDatabaseSettings : BasicTest {
      private const string LowerSetting = "fastfail_unit_lower_missing";
      private const string UpperSetting = "fastfail_unit_upper_missing";

      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         policy1 = new UnitBoundedFastFailPolicy(null, 1, 2, LowerSetting, UpperSetting);

         policy1.LoadSettings();

         Utilities.ValidateValue(policy1.Bounds.Lower, 1.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 2.0f, "policy1.Bounds.Upper");
      }
   }

   [Description("Validates the bounds exposed after being loaded from npdb BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_LoadDatabaseSettings : BasicTest {
      private const string LowerSetting = "fastfail_unit_lower_0";
      private const string UpperSetting = "fastfail_unit_upper_0";

      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         Utilities.WriteSetting(LowerSetting, "10.0");
         Utilities.WriteSetting(UpperSetting, "20.0");

         policy1 = new UnitBoundedFastFailPolicy(null, 0, 0, LowerSetting, UpperSetting);

         Utilities.ValidateValue(policy1.Bounds.Lower, 10.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 20.0f, "policy1.Bounds.Upper");
      }

      protected override void Cleanup() {
         Utilities.ClearSetting(LowerSetting);
         Utilities.ClearSetting(UpperSetting);
      }
   }

   [Description("Validates the bounds exposed after being re-loaded from npdb BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_AutoLoadDatabaseSettings : BasicTest {
      private const string LowerSetting = "fastfail_unit_lower_1";
      private const string UpperSetting = "fastfail_unit_upper_1";

      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         Config.RegisterDynamicSetting(LowerSetting);
         Config.RegisterDynamicSetting(UpperSetting);

         Utilities.WriteSetting(LowerSetting, "10.0");
         Utilities.WriteSetting(UpperSetting, "20.0");

         Config.CheckForUpdates();

         policy1 = new UnitBoundedFastFailPolicy(null, 0, 0, LowerSetting, UpperSetting);

         Utilities.WriteSetting(LowerSetting, "15.0");
         Utilities.WriteSetting(UpperSetting, "30.0");

         Config.CheckForUpdates();

         policy1.LoadSettings();

         Utilities.ValidateValue(policy1.Bounds.Lower, 15.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 30.0f, "policy1.Bounds.Upper");
      }

      protected override void Cleanup() {
      }
   }

   [Description("Validates the bounds exposed after being dynamically automatically re-loaded from npdb BoundedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitBounded_DynamicAutoLoadDatabaseSettings : BasicTest {
      private const string LowerSetting = "fastfail_unit_lower_2";
      private const string UpperSetting = "fastfail_unit_upper_2";

      protected override void ExecuteTest() {
         UnitBoundedFastFailPolicy policy1;

         Config.RegisterDynamicSetting(LowerSetting);
         Config.RegisterDynamicSetting(UpperSetting);

         Utilities.WriteSetting(LowerSetting, "10.0");
         Utilities.WriteSetting(UpperSetting, "20.0");

         Config.CheckForUpdates();

         policy1 = new UnitBoundedFastFailPolicy(null, 0, 0, LowerSetting, UpperSetting);

         Utilities.WriteSetting(LowerSetting, "15.0");
         Utilities.WriteSetting(UpperSetting, "30.0");

         Config.CheckForUpdates();

         Utilities.ValidateValue(policy1.Bounds.Lower, 15.0f, "policy1.Bounds.Lower");
         Utilities.ValidateValue(policy1.Bounds.Upper, 30.0f, "policy1.Bounds.Upper");
      }

      protected override void Cleanup() {
         Utilities.ClearSetting(LowerSetting);
         Utilities.ClearSetting(UpperSetting);
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\policy\Unit.Delegated.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the default settings match expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         DelegatedFastFailPolicy policyDelegated;
         string context = "context";
         string setting = "settingName";

         policy1 = new NullFastFailPolicy("default");
         policyDelegated = new DelegatedFastFailPolicy(context, policy1, setting);

         Utilities.ValidateValue(policyDelegated.KeySelectorSetting, setting, "policyDelegated.KeySelectorSetting");
         Utilities.ValidateValue(policyDelegated.ActivePolicy, policy1, "policyDelegated.ActivePolicy");
         Utilities.ValidateValue(policyDelegated.ActivePolicyKey, null, "policyDelegated.ActivePolicyKey");
         Utilities.ValidateValue(policyDelegated.Context, context, "policyDelegated.Context");
         Utilities.ValidateValue(policyDelegated.DefaultPolicy, policy1, "policyDelegated.DefaultPolicy");
         Utilities.ValidateValue(policyDelegated.Calibration, 1.0f, "policyDelegated.Calibration");
         Utilities.ValidateValue(policyDelegated.Policies.Count, 0, "policyDelegated.Policies.Count");
      }
   }

   [Description("Verifies the policy collection matches expectations post construction."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_PoliciesInitialize : BasicTest {
      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegated;
         IFastFailPolicy policy;

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegated = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         Utilities.ValidateValue(policyDelegated.Policies.TryGetValue("foo", out policy), true, "policyDelegated.Policies.TryGetValue(\"foo\", out policy)");
         Utilities.ValidateValue(policy, policy2, "policy");

         Utilities.ValidateValue(policyDelegated.Policies.TryGetValue("bar", out policy), true, "policyDelegated.Policies.TryGetValue(\"bar\", out policy)");
         Utilities.ValidateValue(policy, policy3, "policy");

         Utilities.ValidateValue(policyDelegated.Policies.Count, 2, "policyDelegated.Policies.Count");
      }
   }
   #endregion

   #region Calibration Tests
   [Description("Validates that the bounds of the delegate and the child polices are updated on calibrations changes."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_CalibrationChange : BasicTest {
      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegated;
         NullFastFailGate gate;

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegated = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         gate = new NullFastFailGate();

         policyDelegated.Calibrate(gate, 0.66f);

         Utilities.ValidateValue(policyDelegated.Calibration, 0.66f, "policyDelegated.Calibration");
         Utilities.ValidateValue(policy1.Calibration, 0.66f, "policy1.Calibration");
         Utilities.ValidateValue(policy2.Calibration, 0.66f, "policy2.Calibration");
         Utilities.ValidateValue(policy3.Calibration, 0.66f, "policy3.Calibration");
      }
   }
   #endregion

   #region Denial Tests
   [Description("Verifies that the active policy denies approapriately."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_DelegatedDenial : BasicTest {
      protected override void ExecuteTest() {
         InvalidFastFailPolicy policy1;
         DenyFastFailPolicy policy2;
         GrantFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegated;
         NullFastFailGate gate;

         policy1 = new InvalidFastFailPolicy();
         policy2 = new DenyFastFailPolicy();
         policy3 = new GrantFastFailPolicy();
         policyDelegated = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("deny", policy2),
            new KeyValuePair<string, IFastFailPolicy>("grant", policy3));

         policyDelegated.SelectPolicy("deny");

         gate = new NullFastFailGate();

         policyDelegated.Calibrate(gate, 0.66f);

         Utilities.ValidateValue(policyDelegated.RequestPermission(gate), false, "policyDelegated.RequestPermission(gate)");
      }
   }

   [Description("Verifies that the active policy denies approapriately."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_DelegatedGrant : BasicTest {
      protected override void ExecuteTest() {
         InvalidFastFailPolicy policy1;
         DenyFastFailPolicy policy2;
         GrantFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegated;
         NullFastFailGate gate;

         policy1 = new InvalidFastFailPolicy();
         policy2 = new DenyFastFailPolicy();
         policy3 = new GrantFastFailPolicy();
         policyDelegated = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("deny", policy2),
            new KeyValuePair<string, IFastFailPolicy>("grant", policy3));

         policyDelegated.SelectPolicy("grant");

         gate = new NullFastFailGate();

         policyDelegated.Calibrate(gate, 0.66f);

         Utilities.ValidateValue(policyDelegated.RequestPermission(gate), true, "policyDelegated.RequestPermission(gate)");
      }
   }
   #endregion

   #region Assignment Tests
   [Description("Verifies that the active policy is set to the default policy when key is missing."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_MissingPolicyKey : BasicTest {
      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegate;

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegate = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         Utilities.ValidateValue(policyDelegate.SelectPolicy("missing"), false, "policyDelegate.SelectPolicy(\"missing\")");
         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy1, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, null, "policyDelegate.ActivePolicyKey");
      }
   }

   [Description("Verifies the active policy is set to the real policy when the key isn't missing."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_LocatedPolicyKey : BasicTest {
      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegate;

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegate = new DelegatedFastFailPolicy(
            null, policy1, null,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         Utilities.ValidateValue(policyDelegate.SelectPolicy("foo"), true, "policyDelegate.SelectPolicy(\"foo\")");
         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy2, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, "foo", "policyDelegate.ActivePolicyKey");
      }
   }
   #endregion

   #region Settings Tests
   [Description("Verifies the ability of the constructor to fall back to default policy on missing database setting."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_LoadMissingDatabaseSettings : BasicTest {
      private const string SelectSetting = "fastfail_unitdelegated_select_missing";

      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegate;

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegate = new DelegatedFastFailPolicy(
            null, policy1, SelectSetting,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy1, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, null, "policyDelegate.ActivePolicyKey");
      }
   }

   [Description("Verifies the ability of the constructor to auto-load the active policy from database."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_LoadDatabaseSettings : BasicTest {
      private const string SelectSetting = "fastfail_unitdelegated_select_1";

      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegate;

         Utilities.WriteSetting(SelectSetting, "foo");

         Config.CheckForUpdates();

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegate = new DelegatedFastFailPolicy(
            null, policy1, SelectSetting,
            new KeyValuePair<string, IFastFailPolicy>("foo", policy2),
            new KeyValuePair<string, IFastFailPolicy>("bar", policy3));

         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy2, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, "foo", "policyDelegate.ActivePolicyKey");
      }

      protected override void Cleanup() {
         Utilities.ClearSetting(SelectSetting);
      }
   }

   [Description("Verifies the active policy dynamic reload functionality for the DelegatedFastFailPolicy."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitDelegated_DynamicReloadActive : BasicTest {
      private const string SelectSetting = "fastfail_unitdelegated_select_2";

      protected override void ExecuteTest() {
         NullFastFailPolicy policy1;
         NullFastFailPolicy policy2;
         NullFastFailPolicy policy3;
         DelegatedFastFailPolicy policyDelegate;

         Config.RegisterDynamicSetting(SelectSetting);

         Utilities.ClearSetting(SelectSetting);

         Config.CheckForUpdates();

         policy1 = new NullFastFailPolicy("default");
         policy2 = new NullFastFailPolicy("foo");
         policy3 = new NullFastFailPolicy("bar");
         policyDelegate = new DelegatedFastFailPolicy(null, policy1, SelectSetting);

         policyDelegate.Policies.Add("foo", policy2);
         policyDelegate.Policies.Add("bar", policy3);

         Utilities.WriteSetting(SelectSetting, "foo");

         Config.CheckForUpdates();

         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy2, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, "foo", "policyDelegate.ActivePolicyKey");

         Utilities.WriteSetting(SelectSetting, "bar");

         Config.CheckForUpdates();

         Utilities.ValidateValue(policyDelegate.ActivePolicy, policy3, "policyDelegate.ActivePolicy");
         Utilities.ValidateValue(policyDelegate.ActivePolicyKey, "bar", "policyDelegate.ActivePolicyKey");
      }

      protected override void Cleanup() {
         Utilities.ClearSetting(SelectSetting);
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\stats\Unit.AggregateFeature.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the post constructor properties line up with expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeatureAggregator_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeatureAggregator aggregator;

         aggregator = new StatisticalFeatureAggregator(StatisticalFeature.DefaultBucketCount);

         Utilities.ValidateValue(aggregator.AllRequests.BucketCount,  StatisticalFeature.DefaultBucketCount, "aggregator.AllRequests.BucketCount");
         Utilities.ValidateValue(aggregator.FailedRequests.BucketCount, StatisticalFeature.DefaultBucketCount, "aggregator.FailedRequests.BucketCount");
         Utilities.ValidateValue(aggregator.TimedoutRequests.BucketCount, StatisticalFeature.DefaultBucketCount, "aggregator.TimedoutRequests.BucketCount");
         Utilities.ValidateValue(aggregator.SuccessfulRequests.BucketCount, StatisticalFeature.DefaultBucketCount, "aggregator.SuccessfulRequests.BucketCount");
         Utilities.ValidateValue(aggregator.BucketCount, StatisticalFeature.DefaultBucketCount, "aggregator.BucketCount");
         Utilities.ValidateValue(aggregator.SuccessRatio, 1.0, "aggregator.SuccessRatio");
         Utilities.ValidateValue(aggregator.TimeoutRatio, 0.0, "aggregator.TimeoutRatio");
         Utilities.ValidateValue(aggregator.FailureRatio, 0.0, "aggregator.FailureRatio");
      }
   }

   #endregion

   #region Event Ingestion Tests
   [Description("Verifies the statistics after the ingestion of one fail event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeatureAggregator_IngestFailure : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeatureAggregator aggregator;
         StatisticalEvent sample;
         DateTime start;

         aggregator = new StatisticalFeatureAggregator(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;

         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         aggregator.IngestEvent(sample, FastFailResult.Failure);

         Utilities.ValidateValue(aggregator.AllRequests.Count, 1, "aggregator.AllRequests.Count");
         Utilities.ValidateValue(aggregator.FailedRequests.Count, 1, "aggregator.FailedRequests.Count");
         Utilities.ValidateValue(aggregator.TimedoutRequests.Count, 0, "aggregator.TimedoutRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessfulRequests.Count, 0, "aggregator.SuccessfulRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessRatio, 0.0, "aggregator.SuccessRatio");
         Utilities.ValidateValue(aggregator.TimeoutRatio, 0.0, "aggregator.TimeoutRatio");
         Utilities.ValidateValue(aggregator.FailureRatio, 1.0, "aggregator.FailureRatio");
      }
   }

   [Description("Verifies the statistics after the ingestion of one success event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeatureAggregator_IngestSuccess : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeatureAggregator aggregator;
         StatisticalEvent sample;
         DateTime start;

         aggregator = new StatisticalFeatureAggregator(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;

         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         aggregator.IngestEvent(sample, FastFailResult.Success);

         Utilities.ValidateValue(aggregator.AllRequests.Count, 1, "aggregator.AllRequests.Count");
         Utilities.ValidateValue(aggregator.FailedRequests.Count, 0, "aggregator.FailedRequests.Count");
         Utilities.ValidateValue(aggregator.TimedoutRequests.Count, 0, "aggregator.TimedoutRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessfulRequests.Count, 1, "aggregator.SuccessfulRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessRatio, 1.0, "aggregator.SuccessRatio");
         Utilities.ValidateValue(aggregator.TimeoutRatio, 0.0, "aggregator.TimeoutRatio");
         Utilities.ValidateValue(aggregator.FailureRatio, 0.0, "aggregator.FailureRatio");
      }
   }

   [Description("Verifies the statistics after the ingestion of one timeout event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeatureAggregator_IngestTimeout : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeatureAggregator aggregator;
         StatisticalEvent sample;
         DateTime start;

         aggregator = new StatisticalFeatureAggregator(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;

         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         aggregator.IngestEvent(sample, FastFailResult.Timeout);

         Utilities.ValidateValue(aggregator.AllRequests.Count, 1, "aggregator.AllRequests.Count");
         Utilities.ValidateValue(aggregator.FailedRequests.Count, 0, "aggregator.FailedRequests.Count");
         Utilities.ValidateValue(aggregator.TimedoutRequests.Count, 1, "aggregator.TimedoutRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessfulRequests.Count, 0, "aggregator.SuccessfulRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessRatio, 0.0, "aggregator.SuccessRatio");
         Utilities.ValidateValue(aggregator.TimeoutRatio, 1.0, "aggregator.TimeoutRatio");
         Utilities.ValidateValue(aggregator.FailureRatio, 0.0, "aggregator.FailureRatio");
      }
   }

   [Description("Verifies the statistics after the ingestion of one of each event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeatureAggregator_IngestEach : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeatureAggregator aggregator;
         StatisticalEvent sample;
         DateTime start;

         aggregator = new StatisticalFeatureAggregator(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;

         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         aggregator.IngestEvent(sample, FastFailResult.Success);
         aggregator.IngestEvent(sample, FastFailResult.Failure);
         aggregator.IngestEvent(sample, FastFailResult.Timeout);

         Utilities.ValidateValue(aggregator.AllRequests.Count, 3, "aggregator.AllRequests.Count");
         Utilities.ValidateValue(aggregator.FailedRequests.Count, 1, "aggregator.FailedRequests.Count");
         Utilities.ValidateValue(aggregator.TimedoutRequests.Count, 1, "aggregator.TimedoutRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessfulRequests.Count, 1, "aggregator.SuccessfulRequests.Count");
         Utilities.ValidateValue(aggregator.SuccessRatio, 1.0/3.0, "aggregator.SuccessRatio");
         Utilities.ValidateValue(aggregator.TimeoutRatio, 1.0/3.0, "aggregator.TimeoutRatio");
         Utilities.ValidateValue(aggregator.FailureRatio, 1.0 / 3.0, "aggregator.FailureRatio");
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\proportion\Unit.Proportion.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Diagnostics;
using System.Configuration.Install;

using xonline.common.config;
using xonline.common.fastfail;
using xonline.common.service;
using xonline.common.mgmt;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test 
{
    public class MonitorTestBase : BasicTest
    {
        protected override void Execute()
        {
            InstallPerformanceCategory();
            base.Execute();
        }

        public class MyInstaller : XomPerformanceCounterInstall
        {
            public void InstallMyCounters()
            {
                Context = new InstallContext();
                InstallCategory(typeof(ProportionBasedFastFailCounters));
            }
        }

        public static void InstallPerformanceCategory()
        {
            if (!PerformanceCounterCategory.Exists("XBL FastFail (Proportion-based)")) 
            {
                Global.RO.Info("Installing Performance Counters...");

                MyInstaller installer = new MyInstaller();
                installer.InstallMyCounters();
            }
            else
            {
                Global.RO.Info("Performace Counter Category already present.");
            }
        }
    }
    
    [Description("Basic usage of a monitor."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class Monitor_Basic : MonitorTestBase
    {
        protected override void ExecuteTest()
        {
            ResourceUsageMonitor monitor = new ResourceUsageMonitor("DVT");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1");
            monitor.CompleteResourceUse("test1");
        }
    }

    [Description("Shows a denied access."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class Monitor_Throttle : MonitorTestBase
    {
        protected override void ExecuteTest()
        {
            ResourceUsageMonitor monitor = new ResourceUsageMonitor("DVT", 0, 1, 10, 10, 0, XEvent.Id.FAIL_FAST_ENTER, XEvent.Id.FAIL_FAST_EXIT);

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1");
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1");
            monitor.CompleteResourceUse("test1");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1");
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1");
            monitor.CompleteResourceUse("test1");
        }
    }

    [Description("Shows two instances at even usage."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class Monitor_HalfAndHalf : MonitorTestBase
    {
        protected override void ExecuteTest()
        {
            ResourceUsageMonitor monitor = new ResourceUsageMonitor("DVT", 0, 2, 10, 10, 0, XEvent.Id.FAIL_FAST_ENTER, XEvent.Id.FAIL_FAST_EXIT);

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 1/1, 0/1
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "attempt test2"); // 1/2, 1/2
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 2/3, 1/3
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "throttle test2"); // 2/4, 2/4
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 3/5, 2/5
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 4/6, 2/6
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "attempt test2"); // 4/7, 3/7
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "throttle test2"); // 4/8, 4/8
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");
        }
    }

    [Description("Shows two instances at even usage, with a reserved count of 1."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class Monitor_HalfAndHalfWithReserve : MonitorTestBase
    {
        protected override void ExecuteTest()
        {
            ResourceUsageMonitor monitor = new ResourceUsageMonitor("DVT", 1, 2, 10, 10, 0, XEvent.Id.FAIL_FAST_ENTER, XEvent.Id.FAIL_FAST_EXIT);

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 1/1, 0/1
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "attempt test2"); // 1/2, 1/2
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "throttle test1"); // 2/3, 1/3
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "throttle test2"); // 2/4, 2/4
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");
            monitor.CompleteResourceUse("test2");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 3/5, 2/5
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "throttle test1"); // 4/6, 2/6
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "attempt test2"); // 4/7, 3/7
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "throttle test2"); // 4/8, 4/8
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 5/9, 4/9
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "attempt test2"); // 5/10, 5/10
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");
            monitor.CompleteResourceUse("test2");
        }
    }

    [Description("Shows two instances at even usage, and then again after all metrics expire."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class Monitor_HalfAndHalfWithExpiredBuckets: MonitorTestBase
    {
        protected override void ExecuteTest()
        {
            ResourceUsageMonitor monitor = new ResourceUsageMonitor("DVT", 0, 2, 1, 5, 0, XEvent.Id.FAIL_FAST_ENTER, XEvent.Id.FAIL_FAST_EXIT);

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 1/1, 0/1
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "attempt test2"); // 1/2, 1/2
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 2/3, 1/3
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "throttle test2"); // 2/4, 2/4
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 3/5, 2/5
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 4/6, 2/6
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "attempt test2"); // 4/7, 3/7
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "throttle test2"); // 4/8, 4/8
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");

            Thread.Sleep(6000);

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 1/1, 0/1
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "attempt test2"); // 1/2, 1/2
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 2/3, 1/3
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "throttle test2"); // 2/4, 2/4
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");

            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), true, "attempt test1"); // 3/5, 2/5
            Utilities.ValidateValue(monitor.AttemptResourceUse("test1"), false, "throttle test1"); // 4/6, 2/6
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), false, "attempt test2"); // 4/7, 3/7
            Utilities.ValidateValue(monitor.AttemptResourceUse("test2"), true, "throttle test2"); // 4/8, 4/8
            monitor.CompleteResourceUse("test1");
            monitor.CompleteResourceUse("test2");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\policy\Unit.ThreadBounded.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the default settings match expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitThreadBounded_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         ThreadBoundedFastFailPolicy policy;
         string context = "context";
         string lsetting = "lowersettingName";
         string usetting = "upperSettingName";

         policy = new ThreadBoundedFastFailPolicy(context, 1, 2, lsetting, usetting);

         Utilities.ValidateValue(policy.Context, context, "policy.Context");
         Utilities.ValidateValue(policy.Bounds.Lower, 1, "policy.Bounds.Lower");
         Utilities.ValidateValue(policy.Bounds.Upper, 2, "policy.Bounds.Upper");
         Utilities.ValidateValue(policy.Bounds.Current, 2, "policy.Bounds.Current");
         Utilities.ValidateValue(policy.BoundSettingNames.Lower, lsetting, "policy.BoundSettingNames.Lower");
         Utilities.ValidateValue(policy.BoundSettingNames.Upper, usetting, "policy.BoundSettingNames.Upper");
         Utilities.ValidateValue(policy.Calibration, 1.0f, "policy.Calibration");
      }
   }
   #endregion

   #region Denial Tests
   [Description("Verifies that the policy exhibit the expected denial behavior."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitThreadBounded_MixedDenial : BasicTest {
      protected override void ExecuteTest() {
         ThreadBoundedFastFailPolicy policy;
         bool[] results;
         NullFastFailGate gate;

         policy = new ThreadBoundedFastFailPolicy(null, 2, 4);
         results = new bool[6];
         gate = new NullFastFailGate();

         policy.Calibrate(gate, 0.5f);

         for (int c = 0; c < results.Length; c++) {
            if (results[c] = policy.RequestPermission(gate))
               gate.ConsumeThread();
         }

         Utilities.ValidateValue(results[0], true, "results[0]");
         Utilities.ValidateValue(results[1], true, "results[1]");
         Utilities.ValidateValue(results[2], true, "results[2]");

         Utilities.ValidateValue(results[3], false, "results[3]");
         Utilities.ValidateValue(results[4], false, "results[4]");
         Utilities.ValidateValue(results[5], false, "results[5]");
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\policy\Unit.RateBounded.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the default settings match expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitRateBounded_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         RateBoundedFastFailPolicy policy;
         string context = "context";
         string lsetting = "lowersettingName";
         string usetting = "upperSettingName";

         policy = new RateBoundedFastFailPolicy(context, 0.5, 1.0, lsetting, usetting);

         Utilities.ValidateValue(policy.Context, context, "policy.Context");
         Utilities.ValidateValue(policy.Bounds.Lower, 0.5, "policy.Bounds.Lower");
         Utilities.ValidateValue(policy.Bounds.Upper, 1.0, "policy.Bounds.Upper");
         Utilities.ValidateValue(policy.Bounds.Current, 1.0, "policy.Bounds.Current");
         Utilities.ValidateValue(policy.BoundSettingNames.Lower, lsetting, "policy.BoundSettingNames.Lower");
         Utilities.ValidateValue(policy.BoundSettingNames.Upper, usetting, "policy.BoundSettingNames.Upper");
         Utilities.ValidateValue(policy.Calibration, 1.0f, "policy.Calibration");
      }
   }
   #endregion

   #region Denial Tests
   [Description("Verifies that the policy exhibit the expected denial behavior.  All requests should fail"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitRateBounded_AllDenial : BasicTest {
      protected override void ExecuteTest() {
         RateBoundedFastFailPolicy policy;
         bool[] results;
         NullFastFailGate gate;

         policy = new RateBoundedFastFailPolicy(null, 0.0, 1.0);
         results = new bool[6];
         gate = new NullFastFailGate();

         policy.Calibrate(gate, 0.0f);

         for (int c=0; c<results.Length; c++) {
            if (results[c] = policy.RequestPermission(gate))
               gate.ConsumeThread();
         }

         Utilities.ValidateValue(results[0], false, "results[0]");
         Utilities.ValidateValue(results[1], false, "results[1]");
         Utilities.ValidateValue(results[2], false, "results[2]");

         Utilities.ValidateValue(results[3], false, "results[3]");
         Utilities.ValidateValue(results[4], false, "results[4]");
         Utilities.ValidateValue(results[5], false, "results[5]");
      }
   }

   [Description("Verifies that the policy exhibit the expected denial behavior.  All requests should succeed."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitRateBounded_AllGrant : BasicTest {
      protected override void ExecuteTest() {
         RateBoundedFastFailPolicy policy;
         bool[] results;
         NullFastFailGate gate;

         policy = new RateBoundedFastFailPolicy(null, 0.0, 1.0);
         results = new bool[6];
         gate = new NullFastFailGate();

         policy.Calibrate(gate, 1.0f);

         for (int c = 0; c < results.Length; c++) {
            if (results[c] = policy.RequestPermission(gate))
               gate.ConsumeThread();
         }

         Utilities.ValidateValue(results[0], true, "results[0]");
         Utilities.ValidateValue(results[1], true, "results[1]");
         Utilities.ValidateValue(results[2], true, "results[2]");

         Utilities.ValidateValue(results[3], true, "results[3]");
         Utilities.ValidateValue(results[4], true, "results[4]");
         Utilities.ValidateValue(results[5], true, "results[5]");
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\stats\Unit.Feature.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   #region Initialization Tests
   [Description("Verifies the post constructor properties line up with expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;

         feature = new StatisticalFeature(StatisticalFeature.DefaultBucketCount);

         Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.BucketCount, StatisticalFeature.DefaultBucketCount, "feature.BucketCount");
         Utilities.ValidateValue(feature.Count, 0, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, 0.0f, "feature.Rate");
      }
   }

   [Description("Verifies that clamping take place on the boucket count."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_LowerClamp : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;

         feature = new StatisticalFeature(0);

         Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.BucketCount, StatisticalFeature.MinimumBucketCount, "feature.BucketCount");
         Utilities.ValidateValue(feature.Count, 0, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, 0.0f, "feature.Rate");
      }
   }

   [Description("Verifies that clamping take place on the boucket count."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_UpperClamp : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;

         feature = new StatisticalFeature(int.MaxValue);

         Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.BucketCount, StatisticalFeature.MaximumBucketCount, "feature.BucketCount");
         Utilities.ValidateValue(feature.Count, 0, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, 0.0f, "feature.Rate");
      }
   }
   #endregion

   #region Event Ingestion Tests
   [Description("Verifies the statistics after the ingestion of one event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_IngestOneEvent : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;
         StatisticalEvent sample;
         DateTime start;

         feature = new StatisticalFeature(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;

         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         feature.IngestEvent(sample);

         Utilities.ValidateValue(feature.AccumulatedDuration, 60.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 60.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.Count, 1, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, sample.StartTime, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, sample.Duration, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, sample.StartTime, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, sample.Duration, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, (float)(1.0/60.0), "feature.Rate");
      }
   }

   [Description("Verifies the statistics after the ingestion of three event."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_IngestThreeEvents : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;
         StatisticalEvent[] sample;
         DateTime start;

         feature = new StatisticalFeature(StatisticalFeature.DefaultBucketCount);

         sample = new StatisticalEvent[3];

         start = DateTime.UtcNow;

         sample[0] = new StatisticalEvent(start, start + TimeSpan.FromSeconds(10.0));
         sample[1] = new StatisticalEvent(sample[0].StartTime + sample[0].Duration, sample[0].StartTime + sample[0].Duration + TimeSpan.FromSeconds(20.0));
         sample[2] = new StatisticalEvent(sample[1].StartTime + sample[1].Duration, sample[1].StartTime + sample[1].Duration + TimeSpan.FromSeconds(30.0));

         feature.IngestEvent(sample[0]);
         feature.IngestEvent(sample[1]);
         feature.IngestEvent(sample[2]);

         Utilities.ValidateValue(feature.AccumulatedDuration, 60.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 20.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.Count, 3, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, sample[2].StartTime, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, sample[2].Duration, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, sample[0].StartTime, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, sample[0].Duration, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, (float)(3.0 / 60.0), "feature.Rate");
      }
   }
   #endregion

   #region Expiration Tests
   [Description("Verifies that the expiration of an empty feature yields an empty feature."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_EmptyExpire : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;

         feature = new StatisticalFeature(StatisticalFeature.DefaultBucketCount);

         feature.ExpireBucket();

         Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration");
         Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration");
         Utilities.ValidateValue(feature.BucketCount, StatisticalFeature.DefaultBucketCount, "feature.BucketCount");
         Utilities.ValidateValue(feature.Count, 0, "feature.Count");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime");
         Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime");
         Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration");
         Utilities.ValidateValue(feature.Rate, 0.0f, "feature.Rate");
      }
   }

   [Description("Verifies that the expiration eventually clears a single populated bucket."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_ExpireUntilEmpty : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;
         StatisticalEvent sample;
         DateTime start;

         feature = new StatisticalFeature(StatisticalFeature.DefaultBucketCount);

         start = DateTime.UtcNow;
         sample = new StatisticalEvent(start, start + TimeSpan.FromSeconds(60.0));

         feature.IngestEvent(sample);

         for (int c = 0; c <= feature.BucketCount; c++) {
            if (c < feature.BucketCount) {
               Utilities.ValidateValue(feature.AccumulatedDuration, 60.0f, "feature.AccumulatedDuration[" + c + "]");
               Utilities.ValidateValue(feature.AverageDuration, 60.0f, "feature.AverageDuration[" + c + "]");
               Utilities.ValidateValue(feature.Count, 1, "feature.Count[" + c + "]");
               Utilities.ValidateValue(feature.NewestEvent.StartTime, sample.StartTime, "feature.NewestEvent.StartTime[" + c + "]");
               Utilities.ValidateValue(feature.NewestEvent.Duration, sample.Duration, "feature.NewestEvent.Duration[" + c + "]");
               Utilities.ValidateValue(feature.OldestEvent.StartTime, sample.StartTime, "feature.OldestEvent.StartTime[" + c + "]");
               Utilities.ValidateValue(feature.OldestEvent.Duration, sample.Duration, "feature.OldestEvent.Duration[" + c + "]");
               Utilities.ValidateValue(feature.Rate, 1/60.0f, "feature.Rate[" + c + "]");
            }
            else {
               Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration[" + c + "]");
               Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration[" + c + "]");
               Utilities.ValidateValue(feature.Count, 0, "feature.Count[" + c + "]");
               Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime[" + c + "]");
               Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration[" + c + "]");
               Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime[" + c + "]");
               Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration[" + c + "]");
               Utilities.ValidateValue(feature.Rate, 0.0f, "feature.Rate[" + c + "]");
            }

            feature.ExpireBucket();
         }
      }
   }

   [Description("Verifies that the statistics match the pattern if fill and drain."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitFeature_FillUpThenDrain : BasicTest {
      protected override void ExecuteTest() {
         StatisticalFeature feature;
         StatisticalEvent[] sample;
         DateTime start;

         feature = new StatisticalFeature(20);

         sample = new StatisticalEvent[100];

         start = DateTime.UtcNow;

         sample[0] = new StatisticalEvent(start, start + TimeSpan.FromSeconds(10.0));
         for (int c = 1; c < sample.Length; c++)
            sample[c] = new StatisticalEvent(sample[c - 1].StartTime + sample[c - 1].Duration, sample[c - 1].StartTime + sample[c - 1].Duration + TimeSpan.FromSeconds(10.0));

         // Fill
         for (int c = 0; c < feature.BucketCount; c++) {
            feature.IngestEvent(sample[c]);

            Utilities.ValidateValue(feature.AccumulatedDuration, (c+1)*10.0f, "feature.AccumulatedDuration[" + c + "]");
            Utilities.ValidateValue(feature.AverageDuration, 10.0f, "feature.AverageDuration[" + c + "]");
            Utilities.ValidateValue(feature.Count, c+1, "feature.Count[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.StartTime, sample[c].StartTime, "feature.NewestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.Duration, sample[c].Duration, "feature.NewestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.StartTime, sample[0].StartTime, "feature.OldestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.Duration, sample[0].Duration, "feature.OldestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.Rate, 1/10.0f, "feature.Rate[" + c + "]");

            feature.ExpireBucket();
         }

         // Saturate
         for (int c = feature.BucketCount; c < sample.Length; c++) {
            feature.IngestEvent(sample[c]);

            Utilities.ValidateValue(feature.AccumulatedDuration, feature.BucketCount * 10.0f, "feature.AccumulatedDuration[" + c + "]");
            Utilities.ValidateValue(feature.AverageDuration, 10.0f, "feature.AverageDuration[" + c + "]");
            Utilities.ValidateValue(feature.Count, feature.BucketCount, "feature.Count[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.StartTime, sample[c].StartTime, "feature.NewestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.Duration, sample[c].Duration, "feature.NewestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.StartTime, sample[c + 1 - feature.BucketCount].StartTime, "feature.OldestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.Duration, sample[c + 1 - feature.BucketCount].Duration, "feature.OldestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.Rate, 1 / 10.0f, "feature.Rate[" + c + "]");

            feature.ExpireBucket();
         }

         // Drain
         for (int c = sample.Length; c < sample.Length + feature.BucketCount - 1; c++) {
            int count = feature.BucketCount - (c - sample.Length) - 1;

            Utilities.ValidateValue(feature.AccumulatedDuration, count * 10.0f, "feature.AccumulatedDuration[" + c + "]");
            Utilities.ValidateValue(feature.AverageDuration, 10.0f, "feature.AverageDuration[" + c + "]");
            Utilities.ValidateValue(feature.Count, count, "feature.Count[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.StartTime, sample[sample.Length-1].StartTime, "feature.NewestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.NewestEvent.Duration, sample[sample.Length - 1].Duration, "feature.NewestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.StartTime, sample[c + 1 - feature.BucketCount].StartTime, "feature.OldestEvent.StartTime[" + c + "]");
            Utilities.ValidateValue(feature.OldestEvent.Duration, sample[c + 1 - feature.BucketCount].Duration, "feature.OldestEvent.Duration[" + c + "]");
            Utilities.ValidateValue(feature.Rate, 1 / 10.0f, "feature.Rate[" + c + "]");

            feature.ExpireBucket();
         }

         // Empty
         Utilities.ValidateValue(feature.AccumulatedDuration, 0.0f, "feature.AccumulatedDuration[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.AverageDuration, 0.0f, "feature.AverageDuration[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.Count, 0, "feature.Count[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.NewestEvent.StartTime, DateTime.MinValue, "feature.NewestEvent.StartTime[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.NewestEvent.Duration, TimeSpan.Zero, "feature.NewestEvent.Duration[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.OldestEvent.StartTime, DateTime.MinValue, "feature.OldestEvent.StartTime[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.OldestEvent.Duration, TimeSpan.Zero, "feature.OldestEvent.Duration[" + (sample.Length + feature.BucketCount - 1) + "]");
         Utilities.ValidateValue(feature.Rate, 0, "feature.Rate[" + (sample.Length + feature.BucketCount - 1) + "]");
      }
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\fastfail\unit\stats\Unit.Statistics.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using xonline.common.config;
using xonline.common.fastfail;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.fastfail.test {
   public class UnitStatistics : Statistics {
      public UnitStatistics(int bucketCount, TimeSpan captureWindow) 
         : base(bucketCount, captureWindow) { }

      public override DateTime GetTime() {
         return CurrentTime;
      }

      public DateTime CurrentTime;
   }

   #region Initializer Tests
   [Description("Verifies the post constructor properties line up with expectations."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_DefaultInitialize : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;
         int bucketCount;

         try {
            bucketCount = Config.GetIntSetting(Setting.fastfail_bucketCount);
         }
         catch (ApplicationException) {
            bucketCount = StatisticalFeature.DefaultBucketCount;
         }

         statistics = new UnitStatistics(bucketCount, TimeSpan.MinValue);

         Utilities.ValidateValue(statistics.CaptureTimeWindow, Statistics.MinimumCaptureWindow, "statistics.CaptureTimeWindow");
         Utilities.ValidateValue(statistics.Features.BucketCount, bucketCount, "statistics.Features.BucketCount");
         Utilities.ValidateValue(statistics.ExpirationPeriod, TimeSpan.FromSeconds(Statistics.MinimumCaptureWindow.TotalSeconds / bucketCount), "statistics.ExpirationPeriod");
      }
   }

   [Description("Verifies that clamping take place on the capture window."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_LowerClamp : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;

         statistics = new UnitStatistics(StatisticalFeature.DefaultBucketCount, TimeSpan.MinValue);

         Utilities.ValidateValue(statistics.CaptureTimeWindow, Statistics.MinimumCaptureWindow, "statistics.CaptureTimeWindow");
      }
   }

   [Description("Verifies that clamping take place on the capture window."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_UpperClamp : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;

         statistics = new UnitStatistics(StatisticalFeature.DefaultBucketCount, TimeSpan.MaxValue);

         Utilities.ValidateValue(statistics.CaptureTimeWindow, Statistics.MaximumCaptureWindow, "statistics.CaptureTimeWindow");
      }
   }
   #endregion

   #region Expiration Tests
   [Description("Verifies that the expiration eventually clears a single populated bucket."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_AdvanceUntilEmpty : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;
         StatisticalEvent sample;
         int c;

         statistics = new UnitStatistics(StatisticalFeature.DefaultBucketCount, Statistics.DefaultCaptureWindow);

         statistics.CurrentTime = DateTime.UtcNow;
         sample = new StatisticalEvent(statistics.CurrentTime, statistics.CurrentTime + TimeSpan.FromSeconds(2));

         statistics.Features.IngestEvent(sample, FastFailResult.Timeout);

         for (c = 0; c < statistics.Features.BucketCount; c++) {
            Utilities.ValidateValue(statistics.AdvanceWindow(), false, "statistics.AdvanceWindow()[" + c + "]");
            Utilities.ValidateValue(statistics.Features.TimedoutRequests.Count, 1, "statistics.Features.TimedoutRequests.Count[" + c + "]");

            statistics.CurrentTime += statistics.ExpirationPeriod;
         }

         for (c = statistics.Features.BucketCount; c <= statistics.Features.BucketCount; c++) {
            Utilities.ValidateValue(statistics.AdvanceWindow(), true, "statistics.AdvanceWindow()[" + c + "]");
            Utilities.ValidateValue(statistics.Features.TimedoutRequests.Count, 0, "statistics.Features.TimedoutRequests.Count[" + c + "]");
         }
      }
   }
   #endregion

   #region Settings Test
   [Description("Validates the bucket count is loaded from database settings."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_LoadDatabaseSettings : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;

         try {
            original = Config.GetSetting(Setting.fastfail_bucketCount); 
         }
         catch (ApplicationException) {
            original = null;
         }

         Utilities.WriteSetting(Setting.fastfail_bucketCount, "42");

         Config.CheckForUpdates();

         statistics = new UnitStatistics(StatisticalFeature.MinimumBucketCount, Statistics.DefaultCaptureWindow);

         Utilities.ValidateValue(statistics.Features.BucketCount, 42, "statistics.Features.BucketCount");
      }

      protected override void Cleanup() {
         if (null != original)
            Utilities.WriteSetting(Setting.fastfail_bucketCount, original);
      }

      private string original;
   }

   [Description("Validates the bucket count is dynamically reloaded from database settings."), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class UnitStatistics_ReloadDatabaseSettings : BasicTest {
      protected override void ExecuteTest() {
         UnitStatistics statistics;

         Config.RegisterDynamicSetting(Setting.fastfail_bucketCount);

         try {
            original = Config.GetSetting(Setting.fastfail_bucketCount);
         }
         catch (ApplicationException) {
            original = null;
         }

         statistics = new UnitStatistics(StatisticalFeature.MinimumBucketCount, Statistics.DefaultCaptureWindow);

         Utilities.WriteSetting(Setting.fastfail_bucketCount, "43");

         Config.CheckForUpdates();
         
         Utilities.ValidateValue(statistics.Features.BucketCount, 43, "statistics.Features.BucketCount");
      }

      protected override void Cleanup() {
         if (null != original)
            Utilities.WriteSetting(Setting.fastfail_bucketCount, original);
      }

      private string original;
   }
   #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\HealthChecks.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Net;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.Database;

using xonline.common.health;

namespace xonline.common.test.healthchecks
{
    public partial class HealthChecks : TestNode
    {
        [TestGroup, Owner("ilatham"), Description("Validates native and managed healthchecks"), AsyncGroup(13)]
        public class NativeAndManagedHealthChecks : TestNode
        {
            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Verifies that all components respond to base healthcheck queries")]
            public class HealthChecksRespondToBaseQuerys : TestNode
            {
                
                public override void Run()
                {
                    // on an xblob, we don't actually want to spin across all the front doors, as that will start up too many instances of w3wp for the blob to be stable
                    // so just check 4 and be done with it
                    int numToCheckOnXblob = 4;
                    int nChecked = 0;
                    int nFailed = 0;

                    List<string> activeURLs = GetHealthcheckURLsFromNPDB();

                    /// this is just a first pass to spin up the app pools, because without this you have the problem that on the first run 
                    /// of this test against an xblob that hasn't had all its healthchecks hit yet, you'll get a couple failures that don't 
                    /// repro on subsequent runs. I'm assuming that it's due to the fact that the app pools can take a little longer to spin up 
                    /// than .NET tolerates by default when requesting a page
                    for(int i = 0; i< activeURLs.Count; i++)
                    {
                        if (RunningAgainstXblob() && i >= numToCheckOnXblob)
                        {
                            break;
                        }
                        WakeupHealthURL(activeURLs[i]);
                    }

                    // now do the actual checking
                    for(int i = 0; i< activeURLs.Count; i++)
                    {
                        if (RunningAgainstXblob() && i >= numToCheckOnXblob)
                        {
                            break;
                        }
                        Uri uri = new Uri(activeURLs[i]);
                        if (!ValidateHealthURL(uri))
                        {
                            nFailed++;
                        }
                        nChecked++;
                    }

                    if (nFailed > 0)
                    {
                        throw new Exception(String.Format("{0} of {1} healthcheck URIs did not respond as expected", nFailed, nChecked));
                    }
                    if (nChecked == 0)
                    {
                        throw new DidNotExecuteException("No healthcheck URLs tested");
                    }
                }
            }

            // this test is disabled because the source of the urls has changed from a handrolled query to a sproc, and the sproc doesn't actually return any urls that should be blocked
            // work thus needs to be done to determine if we care about validating that the urls which should be blocked are blocked, and if so, we need to determine how we get that list
            //[TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Verifies that all components are responding green to healthcheck queries")]
            public class AllBlockedHealthChecksDontRespondToQuerys : TestNode
            {
                public override void Run()
                {
                    int nChecked = 0;
                    int nFailed = 0;
                    int nSkipped = 0;

                    List<string> activeURLs = GetHealthcheckURLsFromNPDB(true);
                    foreach (string URL in activeURLs)
                    {
                        Uri uri = new Uri(URL);
                        if (ShouldNotRespond(uri))
                        {
                            nChecked++;
                            if (!VerifyBlockedURL(uri))
                            {
                                nFailed++;
                            }
                        }
                        else
                        {
                            nSkipped++;
                        }
                    }

                    Global.RO.Info("Skipped {0} healthcheck urls because they weren't expected to be blocked.", nSkipped);
                    if (nFailed > 0)
                    {
                        throw new Exception(String.Format("{0} of {1} healthcheck URIs that should have been blocked actually responded", nFailed, nChecked));
                    }
                    if (nChecked == 0)
                    {
                        throw new DidNotExecuteException("No healthcheck URLs tested");
                    }
                }
            }

            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Verifies the behavior of a Managed Component with a HC")]
            public class ManagedComponentAllValidParams : TestNode
            {
                public override void Run()
                {
                    int nFailed = 0;
                    int nChecked = 0;

                    List<string> activeURLs = GetHealthcheckURLsFromNPDB("/lsp/");

                    ValidateURLWithParamPermutations(ref nFailed, ref nChecked, activeURLs);
                    
                    if (nFailed > 0)
                    {
                        throw new Exception(String.Format("Failed to query {0} of {1} potential healthcheck URLs", nFailed, nChecked));
                    }
                    if (nChecked == 0)
                    {
                        throw new DidNotExecuteException("No healthcheck URLs tested");
                    }
                }
            }

            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Verifies the behavior of a Managed Component with a HC that uses HttpListener")]
            public class ManagedComponentNewAdapterAllValidParams : TestNode
            {
                public override void Run()
                {
                    int nFailed = 0;
                    int nChecked = 0;

                    List<string> activeURLs = GetHealthcheckURLsFromNPDB("/vortexfd/");

                    ValidateURLWithParamPermutations(ref nFailed, ref nChecked, activeURLs);
                    
                    if (nFailed > 0)
                    {
                        throw new Exception(String.Format("Failed to query {0} of {1} potential healthcheck URLs", nFailed, nChecked));
                    }
                    if (nChecked == 0)
                    {
                        throw new DidNotExecuteException("No healthcheck URLs tested");
                    }
                }
            }

            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Verifies the behavior of a Native Component with a HC (the sg)")]
            public class NativeComponentAllValidParams : TestNode
            {
                public override void Run()
                {
                    int nFailed = 0;
                    int nChecked = 0;

                    List<string> activeURLs = GetHealthcheckURLsFromNPDB("sgsvc");
                    
                    ValidateURLWithParamPermutations(ref nFailed, ref nChecked, activeURLs);
                    
                    if (nFailed > 0)
                    {
                        throw new Exception(String.Format("Failed to query {0} of {1} healthcheck URIs", nFailed, nChecked));
                    }
                    if (nChecked == 0)
                    {
                        throw new DidNotExecuteException("No healthcheck URLs tested");
                    }
                }
            }

            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(3), Description("Verifies the behavior of the HC framework when a component that is not defined in the db tries to find out what healthblocks are registered for it")]
            public class ComponentNotInNPDB : TestNode
            {
                public override void Run()
                {
                    Uri fakeUri = new Uri("http://localhost/FakeComponentName/health.ashx");
                    System.Web.HttpRequest request;
                    System.Web.HttpResponse response;

                    if (!FakeHealthURLValidation(fakeUri, out request, out response))
                    {
                        throw new UnexpectedTestResultException("FakeHealthURLValidation failed");
                    }

                    fakeUri = new Uri("http://localhost/FakeComponentName/health.ashx?op=heartbeat");
                    if (!FakeHealthURLValidation(fakeUri, out request, out response))
                    {
                        throw new UnexpectedTestResultException("FakeHealthURLValidation failed");
                    }

                    if (response.StatusCode != 200 && response.StatusCode != 500)
                    {
                        throw new UnexpectedTestResultException(string.Format("Unexpected status code returned from heartbeat query: {0} response code: {1}", fakeUri.ToString(), response.StatusCode));
                    }
                }
            }

            // this is an Xblob Only case because it is a negative case that modifies SQL tables
            [TestCase, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("Verifies the behavior of the HC framework when a component has no health blocks registered for it in the db")]
            public class ComponentHasNoRegisteredBlocks : TestNode
            {
                public override void Run()
                {
                    string targetService = "presence";
                    string targetComponent = "wcpresence";

                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it modifies SQL tables");
                    }

                    ServerTestFramework.Database.Npdb npdb = new Npdb();
                    npdb.ConnectToServer();

                    // verify that our target component does not have any disabled blocks right now
                    int inactiveBlocks = (int)npdb.ExecuteScalar(string.Format("select count(*) from t_health_mappings where b_enabled = 0 and (vc_component = '{0}' or vc_component = 'ALL')", targetComponent));
                    if (inactiveBlocks > 0)
                    {
                        throw new DidNotExecuteException(string.Format("There are already disabled healthblocks in t_health_mappings for {0}, so using this component for this test will break the environment. Skipping test.", targetComponent));
                    }

                    /// note that we may pull back more than one URL in a distributed environment, but we're still only going to test the first one that came back
                    /// this is only even a relevent comment if we someday manage to create a world where destructive tests can be run in a distributed environment
                    /// but in that world, it might be worth introducing a foreach loop below to cover all the servers returned
                    List<string> activeURLs = GetHealthcheckURLsFromNPDB(targetService);
                    if (activeURLs.Count == 0)
                    {
                        throw new DidNotExecuteException(string.Format("Unable to find any URLs for the {0} service", targetService));
                    }
                    Uri uri = new Uri(activeURLs[0]);

                    try
                    {
                        // modify npdb and flush the cache
                        npdb.IssueCommand(string.Format("update t_health_mappings set b_enabled = 0 where (vc_component = '{0}' or vc_component = 'ALL')", targetComponent));
                        Global.XEnv.ExecuteXmgmtCommand(targetComponent, string.Format("e :{0} configcacherefresh", targetComponent));
                        System.Threading.Thread.Sleep(5000);
                        // verify that the update has modified the service's view of what it should do
                        if (GetActiveHealthblocks(uri).Count > 0)
                        {
                            throw new DidNotExecuteException(string.Format("Unable to disable all healthblocks for: {0}", uri.ToString()));
                        }
                        HttpWebRequest request;
                        HttpWebResponse response;
                        string responseText;
                        Uri forceUri = MakeQueryForceUpdate(uri);
                        
                        // use a forced update of the healthcheck to flush cached data that may have had active blocks
                        if (ValidateHealthURL(forceUri, out request, out response, out responseText))
                        {
                            List<xonline.common.health.HealthReport> reports = GetHealthReports(responseText);
                            // we use 1 here because we force a fake report into the list for the overall status of the healthcheck in the helper functions
                            if (reports.Count > 1)
                            {
                                Global.RO.Error(string.Format("{0} HealthReports were still generated though no blocks should be active for this URL: {1}", reports.Count, forceUri.ToString()));
                                foreach(xonline.common.health.HealthReport report in reports)
                                {
                                    Global.RO.Error(string.Format("   {0}", report.FriendlyName));
                                }
                                throw new UnexpectedTestResultException("reports.Count > 1");
                            }
                        }
                        // TODO: then run the interface through all the permutations that would generate healthreports, making sure that no actual reports come back
                        // TODO: build the actual list of permutations, and handle failure with a count again as with the other permutation style cases

                    }
                    finally
                    {
                        // undo changes to npdb and re-flush the cache
                        npdb.IssueCommand(string.Format("update t_health_mappings set b_enabled = 1 where (vc_component = '{0}' or vc_component = 'ALL')", targetComponent));
                        Global.XEnv.ExecuteXmgmtCommand(targetComponent, string.Format("e :{0} configcacherefresh", targetComponent));
                        System.Threading.Thread.Sleep(5000);
                        // verify that we've put things back
                        if (GetActiveHealthblocks(uri).Count == 0)
                        {
                            throw new UnexpectedTestResultException(string.Format("Unable to re-enable healthblocks for {0}", targetComponent));
                        }
                    }
                }
            }

            // this test is not yet written
            //[TestCase, Owner("ilatham"), TestFrequency("Regression"), EnvRequirement("XblobOnly"), Description("Verifies the behavior of the HC framework when a healthblock throws an exception")]
            public class HealthBlockThrowsAnException : TestNode
            {
                public override void Run()
                {
                    if (RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it modifies SQL tables");
                    }

                    // TODO: modify npdb to include TestHealthblock_ThrowsException as a block for our component
                    // TODO: check the health of our component
                    throw new DidNotExecuteException("This test has not been implemented");
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\HealthBlocks.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data.SqlClient;
using System.Net;
using Microsoft.Web.Administration;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.Database;

using xonline.common.health;

namespace xonline.common.test.healthchecks
{
    public partial class HealthChecks : TestNode
    {
        [TestGroup, Owner("ilatham"), Description("Validates the behavior of the native healthblocks in the SG")]
        public class SGHealthBlocks : TestNode
        {
            static string SGServiceName = "sgsvc";

            // this is an xblob only test because it's a negative test that turns off IIS on the xmatchfd servers
            [TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("stops the Default Website on the xmatchfd servers to force a red health status in CSGNotificationsBlock")]
            public class CSGNotificationsBlock : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it turns off IIS on the xmatchfd servers");
                    }

                    Microsoft.Web.Administration.Site matchSite = null;
                    string[] servers = Global.XEnv.GetServerListByInterface("xmatchfd");
                    
                    List<string> SgURLs = GetHealthcheckURLsFromNPDB("sgsvc");

                    if (SgURLs.Count == 0)
                    {
                        throw new DidNotExecuteException("No Healthcheck URLs found to test. Are you sure the SG is running?");
                    }

                    try
                    {
                        // turn off one of the services that provides notifications (title change for example)
                        //Global.XEnv.ExecuteXmgmtCommandOneServer(servers[0], "");
                        Microsoft.Web.Administration.ServerManager man = Microsoft.Web.Administration.ServerManager.OpenRemote(servers[0]);
                        Global.RO.Debug("Connecting to: {0}", servers[0]);
                        foreach (Microsoft.Web.Administration.Site s in man.Sites)
                        {
                            Global.RO.Debug("Site: {0}", s.Name);
                            //if (s.Name.Equals("Default Web Site", StringComparison.OrdinalIgnoreCase))
                            if (s.Name.Equals("MTCH", StringComparison.OrdinalIgnoreCase))
                            {
                                matchSite = s;
                            }
                        }

                        if (matchSite == null)
                        {
                            throw new DidNotExecuteException("Unable to find the target website to disable");
                        }

                        Global.RO.Info("Shutting down '{0}'", matchSite.Name);
                        matchSite.Stop();

                        

                        // check the health and verify that health is now red
                        foreach (string URL in SgURLs)
                        {
                            // make sure we're dealing with a force URL so that we don't have cached data coming back
                            Uri forceUri = MakeQueryForceUpdate(URL);
                            
                            string sOutput;
                            if (!ValidateHealthURL(forceUri, out sOutput))
                            {
                                throw new UnexpectedTestResultException("ValidateHealthURL failed");
                            }
                            List<HealthReport> reports = GetHealthReports(sOutput);
                            foreach (HealthReport rep in reports)
                            {
                                if (rep.FriendlyName.Equals("native.sg.SgNotifications", StringComparison.OrdinalIgnoreCase))
                                {
                                    if (rep.HealthStatus != HealthStatusEnum.Red)
                                    {
                                        throw new UnexpectedTestResultException("Turning off the match service did NOT cause the healthcheck to fail");
                                    }
                                }
                            }
                            Global.RO.Info("Verified!");
                        }
                    }
                    catch (Exception e)
                    {
                        Global.RO.Error(e.ToString());
                    }
                    finally
                    {
                        // turn the service back on 
                        if (matchSite != null)
                        {
                            matchSite.Start();
                        }
                    }

                    // verify that health is now green
                    foreach (string URL in SgURLs)
                    {
                        // make sure we're dealing with a force URL so that we don't have cached data coming back
                        Uri forceUri = MakeQueryForceUpdate(URL);

                        string sOutput;
                        if (!ValidateHealthURL(forceUri, out sOutput))
                        {
                            throw new UnexpectedTestResultException("ValidateHealthURL failed");
                        }
                        List<HealthReport> reports = GetHealthReports(sOutput);
                        foreach (HealthReport rep in reports)
                        {
                            if (rep.FriendlyName.Equals("native.sg.SgNotifications", StringComparison.OrdinalIgnoreCase))
                            {
                                if (rep.HealthStatus != HealthStatusEnum.Green)
                                {
                                    throw new UnexpectedTestResultException("Turning the match service back on did NOT cause the healthcheck to pass");
                                }
                            }
                        }
                        Global.RO.Info("Verified!");
                    }
                }

            }

            // this is an xblob only test because it's going to repeatedly restart every SG in the environment
            [TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("Restarts the SG repeatedly to see what happens")]
            public class SGRestartStress : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it repeatedly restarts every SG in the environment");
                    }
                    List<string> SgURLs = GetHealthcheckURLsFromNPDB("sgsvc");
                    foreach (string URL in SgURLs)
                    {
                        Uri uri = new Uri(URL);
                        string machineName = uri.DnsSafeHost;
                        // picking 12 times to restart as an arbitrary number. The problem that this was created as a regression for usually manifested after 2 or 3 restarts.
                        for(int i=12; i> 0; i--)
                        {
                            Global.RO.Debug("{0} bottles of beer on the wall, {0} bottles of beer...", i);
                            if (!RestartService(SGServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart the SG. Ensure that the SG is running again before trying to run further tests.");
                            }
                        }
                    }
                }
            }

            // this is an xblob only test because it is a negative test that modifies SQL tables and restarts the SG
            [TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("sets notificationthreshold to 10000 to force a yellow health status in CSGHealthStatsBlock")]
            public class CSGHealthStatsBlock_BelowThreshold : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it modifies SQL tables and restarts the SG");
                    }

                    List<string> SgURLs = GetHealthcheckURLsFromNPDB("sgsvc");

                    ServerTestFramework.Database.Npdb npdb = new Npdb();
                    System.Data.SqlClient.SqlDataReader dr;
                    string startingValue; // this seems to be the default value in the LKG xblob that I just set up
                    npdb.ConnectToServer();

                    // get the current settings out
                    npdb.ReadData(@"SELECT [vc_params] FROM [t_health_mappings] where [vc_component] = 'sgsvc' and [vc_healthblock] = 'SgHealthStats'", out dr);
                    if (dr.HasRows)
                    {
                        dr.Read();
                        startingValue = dr.GetString(0);
                        dr.Close();
                    }
                    else
                    {
                        throw new DidNotExecuteException("Unable to get initial value of the params for the SgHealthStats block from t_health_mappings");
                    }

                    try
                    {
                        // bump notificationthreshold up by an order of magnitude to try and force a yellow
                        string testValues = @"spithreshold=1000,packetthreshold=1000,notificationthreshold=100000";
                        // update the params in npdb to force yellows by mucking with the threshholds
                        npdb.IssueCommand("UPDATE [t_health_mappings] set [vc_params] = '" + testValues + "' where [vc_component] = 'sgsvc' and [vc_healthblock] = 'SgHealthStats'");

                        // hit the healthcheck URL with a force update flag and verify that the proper block is yellow
                        foreach (string URL in SgURLs)
                        {
                            Uri uri = new Uri(URL);
                            string machineName = uri.DnsSafeHost;
                            // force the SG to bounce so that it gets the old values again
                            if (!RestartService(SGServiceName, machineName))
                            {
                                if (!RestartService(SGServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart the SG. Ensure that the SG is running again before trying to run further tests.");
                                }
                            }

                            // make sure we're dealing with a force URL so that we don't have cached data coming back
                            Uri forceUri = MakeQueryForceUpdate(URL);

                            // check the health and verify that health is now red
                            if (!VerifyHealthblockHasExpectedStatus(forceUri, "SgHealthStats", HealthStatusEnum.Yellow))
                            {
                                throw new UnexpectedTestResultException("Values below the set thresholds for notificationthreshold did NOT cause the healthcheck to return yellow");
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Global.RO.Error(e.ToString());
                    }
                    finally
                    {
                        // put the params back to normal
                        // TODO: sanitize the input for these sql commands
                        npdb.IssueCommand("UPDATE [t_health_mappings] set [vc_params] = '" + startingValue + "' where [vc_component] = 'sgsvc' and [vc_healthblock] = 'SgHealthStats'");
                    }

                    
                    
                    // hit the healthcheck URL with a force update flag and verify that the proper block is green again
                    foreach (string URL in SgURLs)
                    {
                        Uri uri = new Uri(URL);
                        string machineName = uri.DnsSafeHost;

                        // force the SG to bounce so that it gets the old values again
                        if (!RestartService(SGServiceName, machineName))
                        {
                            if (!RestartService(SGServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart the SG. Ensure that the SG is running again before trying to run further tests.");
                            }
                        }

                        // make sure we're dealing with a force URL so that we don't have cached data coming back
                        Uri forceUri = MakeQueryForceUpdate(URL);

                        // check the health and verify that health is now red
                        if (!VerifyHealthblockHasExpectedStatus(forceUri, "SgHealthStats", HealthStatusEnum.Green))
                        {
                            throw new UnexpectedTestResultException("Returning the thresholds to normal did NOT cause the healthcheck to return green");
                        }
                    }
                }
            }

            ///TODO:
            /// this test is disabled because it doesn't seem possible to actually force packetpoolmax down below the min set in code (.\private\server\sg\sgutil.cpp)
            /// it looks like the only way to verify this will be as part of a stress run, so this case should be revisited later in that context
            /// it is an xblob only test because it's a negative test that modifies SQL
            //[TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("Sets sg_PacketPoolMax to 0 to force a red health status in CSGHealthStatsBlock")]
            public class CSGHealthStatsBlock_NoPacketsAvailable : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it modifies SQL tables");
                    }

                    List<string> SgURLs = GetHealthcheckURLsFromNPDB("sgsvc");

                    ServerTestFramework.Database.Npdb npdb = new Npdb();
                    System.Data.SqlClient.SqlDataReader dr;
                    string startingValue; // the default value in the LKG xblob that I just set up seems to be 150000, but if we can't read it from npdb, we just won't continue
                    npdb.ConnectToServer();

                    // get the current setting out
                    npdb.ReadData("select [vc_value] from [t_settings] where [vc_setting] = 'sg_PacketPoolMax'", out dr);
                    if (dr.HasRows)
                    {
                        dr.Read();
                        startingValue = dr.GetString(0);
                        dr.Close();
                    }
                    else
                    {
                        throw new DidNotExecuteException("Unable to get initial value of sg_PacketPoolMax from t_settings");
                    }

                    try
                    {
                        // update the setting in npdb to force PacketPoolMax to zero
                        npdb.IssueCommand("update [t_settings] set [vc_value] = 1 where [vc_setting] = 'sg_PacketPoolMax'");                        
                    
                        foreach (string URL in SgURLs)
                        {
                            Uri uri = new Uri(URL);
                            string machineName = uri.DnsSafeHost;

                            // force the SG to bounce so that it gets the old values again
                            if (!RestartService(SGServiceName, machineName))
                            {
                                if (!RestartService(SGServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart the SG. Ensure that the SG is running again before trying to run further tests.");
                                }
                            }

                            // make sure we're dealing with a force URL so that we don't have cached data coming back
                            Uri forceUri = MakeQueryForceUpdate(URL);

                            // check the health and verify that health is now red
                            if (!VerifyHealthblockHasExpectedStatus(forceUri, "SgHealthStats", HealthStatusEnum.Red))
                            {
                                throw new UnexpectedTestResultException("Having no packets available did NOT cause the healthcheck to fail");
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Global.RO.Error(e.ToString());
                    }
                    finally
                    {
                        // put the params back to normal
                        npdb.IssueCommand("update [t_settings] set [vc_value] = " + startingValue + " where [vc_setting] = 'sg_PacketPoolMax'");
                    }

                    // hit the healthcheck URL with a force update flag and verify that the proper block is green again
                    foreach (string URL in SgURLs)
                    {
                        Uri uri = new Uri(URL);
                        string machineName = uri.DnsSafeHost;

                        // force the SG to bounce so that it gets the old values again
                        if (!RestartService(SGServiceName, machineName))
                        {
                            if (!RestartService(SGServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart the SG. Ensure that the SG is running again before trying to run further tests.");
                            }
                        }

                        // make sure we're dealing with a force URL so that we don't have cached data coming back
                        Uri forceUri = MakeQueryForceUpdate(URL);

                        // check the health and verify that health is now green again
                        if (!VerifyHealthblockHasExpectedStatus(forceUri, "SgHealthStats", HealthStatusEnum.Green))
                        {
                            throw new UnexpectedTestResultException("CSGHealthStatsBlock is still failing after packets were made available again.");
                        }
                    }
                }
            }
        }

        [TestGroup, Owner("ilatham"), TestFrequency("Daily"), TestCasePriority(1), Description("Validates the behavior of the native healthblocks in the KDC")]
        public class KDCHealthBlocks : TestNode
        {
            static string KDCServiceName = "XKDC";
            static string KDCInterfaceName = "kdcsvc";
            static string PassportRPSServiceName = "RPSsvc";

            // this is an xblob only test because it's a negative test that does Bad Things(tm) to Passport RPS
            [TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("messes up the Passport RPS configuration to force a red health status in the PassportRPS healthblock")]
            public class PassportRPS_RPSFailsToInit : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it does bad, bad things to Passport RPS");
                    }

                    string correctCertsFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\certs";
                    string hiddenCertsFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\hiddencerts";

                    string[] servers = Global.XEnv.GetServerListByInterface(KDCInterfaceName);

                    List<string> KdcURLs = GetHealthcheckURLsFromNPDB(KDCInterfaceName);

                    if (KdcURLs.Count == 0)
                    {
                        throw new DidNotExecuteException("No Healthcheck URLs found to test.");
                    }

                    foreach (string URL in KdcURLs)
                    {
                        // make sure we use a force query URL so that we don't have cached data coming back
                        Uri forceUri = MakeQueryForceUpdate(URL);
                        string machineName = forceUri.DnsSafeHost;
                    
                        try
                        {
                            // mess up Passport RPS by hiding the certs from it; this will cause RPS to fail to init, which causes an exception inside the healthblock
                            System.IO.Directory.Move(string.Format(correctCertsFormatString, machineName), string.Format(hiddenCertsFormatString, machineName));

                            // force the RPS to bounce to clear previously cached data
                            if (!RestartService(PassportRPSServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(PassportRPSServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart RPCsvc. Ensure that the RPCsvc is running again before trying to run further tests.");
                                }
                            }

                            // force the KDC to bounce so that doesn't have any cached data either
                            if (!RestartService(KDCServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(KDCServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart the KDC. Ensure that the KDC is running again before trying to run further tests.");
                                }
                            }

                            // check the health and verify that health is now red
                            if (!(VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Red) && VerifyHealthblockHasExpectedStatus(forceUri, "PassportRPS", HealthStatusEnum.Red)))
                            {
                                throw new UnexpectedTestResultException("hiding the certs from Passport RPC did NOT cause the healthcheck to fail");
                            }

                        }
                        catch (Exception e)
                        {
                            Global.RO.Error(e.ToString());
                        }
                        finally
                        {
                            // put the Passport RPC stuff back to normal
                            System.IO.Directory.Move(string.Format(hiddenCertsFormatString, machineName), string.Format(correctCertsFormatString, machineName));
                        }


                        // force the RPS to bounce to clear previously cached data
                        if (!RestartService(PassportRPSServiceName, machineName))
                        {
                            Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                            if (!RestartService(PassportRPSServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart RPCsvc. Ensure that the RPCsvc is running again before trying to run further tests.");
                            }
                        }

                        // force the KDC to bounce so that doesn't have any cached data either
                        if (!RestartService(KDCServiceName, machineName))
                        {
                            Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                            if (!RestartService(KDCServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart the KDC. Ensure that the KDC is running again before trying to run further tests.");
                            }
                        }

                        // sleep for 5 seconds to be sure that everything is started again
                        // TODO: remove this sleep and instead check for the event that indicates that the service really is started
                        System.Threading.Thread.Sleep(1000 * 5);

                        // check the health and verify that health is now green again
                        if (!(VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Green) && VerifyHealthblockHasExpectedStatus(forceUri, "PassportRPS", HealthStatusEnum.Green)))
                        {
                            throw new UnexpectedTestResultException("healthblock is still failing after certs were made available to Passport RPC again.");
                        }
                    }
                }
            }

            // this is an xblob only test because it's a negative test that does bad things to Passport RPS
            [TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("renames the expected site in the RPS configuration to force a red health status in the PassportRPS healthblock")]
            public class PassportRPS_NoSitesNoCerts : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it does bad, bad things to Passport RPS");
                    }

                    string correctCertsFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\certs";
                    string hiddenCertsFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\hiddencerts";
                    string correctServerXMLFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\rpsserver.xml";
                    string backupServerXMLFormatString = @"\\{0}\c$\Program Files (x86)\Microsoft Passport RPS\config\backup rpsserver.xml";

                    string[] servers = Global.XEnv.GetServerListByInterface(KDCInterfaceName);

                    List<string> KdcURLs = GetHealthcheckURLsFromNPDB(KDCInterfaceName);

                    if (KdcURLs.Count == 0)
                    {
                        throw new DidNotExecuteException("No Healthcheck URLs found to test.");
                    }

                    foreach (string URL in KdcURLs)
                    {
                        // make sure we use a force query URL so that we don't have cached data coming back
                        Uri forceUri = MakeQueryForceUpdate(URL);
                        string machineName = forceUri.DnsSafeHost;
                        string backupSettingsFile = string.Format(backupServerXMLFormatString, machineName);
                        string currentSettingsFile = string.Format(correctServerXMLFormatString, machineName);
                        string hiddenCertsFolder = string.Format(hiddenCertsFormatString, machineName);
                        string correctCertsFolder = string.Format(correctCertsFormatString, machineName);
                            
                        try
                        {
                            // back up the current settings
                            System.IO.File.Move(currentSettingsFile, backupSettingsFile);

                            // mess up Passport RPS by removing all but the default site
                            System.Xml.XmlDocument xConfig = new System.Xml.XmlDocument();
                            xConfig.LoadXml(System.IO.File.ReadAllText(backupSettingsFile));
                            System.Xml.XmlNodeList xSites = xConfig.SelectNodes(@"/RPSServer/Sites/Site");
                            foreach (System.Xml.XmlNode xSite in xSites)
                            {
                                if (xSite.Attributes["SiteName"].Value.Equals("default", StringComparison.OrdinalIgnoreCase))
                                {
                                    // we want to leave the "default" site in the config
                                    continue;
                                }
                                xSite.ParentNode.RemoveChild(xSite);
                            }
                            xConfig.Save(currentSettingsFile);

                            // force the RPS to bounce to clear previously cached data
                            if (!RestartService(PassportRPSServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(PassportRPSServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart RPCsvc. Ensure that the RPCsvc is running again before trying to run further tests.");
                                }
                            }

                            // force the KDC to bounce so that doesn't have any cached data either
                            if (!RestartService(KDCServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(KDCServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart the KDC. Ensure that the KDC is running again before trying to run further tests.");
                                }
                            }

                            // check the health and verify that health is now red
                            if (!(VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Red) && VerifyHealthblockHasExpectedStatus(forceUri, "PassportRPS", HealthStatusEnum.Red)))
                            {
                                throw new UnexpectedTestResultException("hiding the certs from Passport RPC did NOT cause the healthcheck to fail");
                            }

                            // now hide the certs as well
                            System.IO.Directory.Move(correctCertsFolder, hiddenCertsFolder);

                            // force the RPS to bounce to clear previously cached data
                            if (!RestartService(PassportRPSServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(PassportRPSServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart RPCsvc. Ensure that the RPCsvc is running again before trying to run further tests.");
                                }
                            }

                            // force the KDC to bounce so that doesn't have any cached data either
                            if (!RestartService(KDCServiceName, machineName))
                            {
                                Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                                if (!RestartService(KDCServiceName, machineName))
                                {
                                    throw new UnexpectedTestResultException("Failed to restart the KDC. Ensure that the KDC is running again before trying to run further tests.");
                                }
                            }

                            // check the health and verify that health is now red
                            if (!(VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Red) && VerifyHealthblockHasExpectedStatus(forceUri, "PassportRPS", HealthStatusEnum.Red)))
                            {
                                throw new UnexpectedTestResultException("hiding the certs from Passport RPC did NOT cause the healthcheck to fail");
                            }

                        }
                        catch (Exception e)
                        {
                            Global.RO.Error(e.ToString());
                        }
                        finally
                        {
                            // put the Passport RPC stuff back to normal
                            if (System.IO.File.Exists(backupSettingsFile))
                            {
                                if (System.IO.File.Exists(currentSettingsFile))
                                {
                                    System.IO.File.Delete(currentSettingsFile);
                                }
                                System.IO.File.Move(backupSettingsFile, currentSettingsFile);
                            }
                            if (System.IO.Directory.Exists(hiddenCertsFolder))
                            {
                                System.IO.Directory.Move(hiddenCertsFolder, correctCertsFolder);
                            }
                        }


                        // force the RPS to bounce to clear previously cached data
                        if (!RestartService(PassportRPSServiceName, machineName))
                        {
                            Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                            if (!RestartService(PassportRPSServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart RPCsvc. Ensure that the RPCsvc is running again before trying to run further tests.");
                            }
                        }

                        // force the KDC to bounce so that doesn't have any cached data either
                        if (!RestartService(KDCServiceName, machineName))
                        {
                            Global.RO.Fatal("Failed to restart the service {0} on the first try. Giving it one more chance.", KDCServiceName);
                            if (!RestartService(KDCServiceName, machineName))
                            {
                                throw new UnexpectedTestResultException("Failed to restart the KDC. Ensure that the KDC is running again before trying to run further tests.");
                            }
                        }

                        // check the health and verify that health is now green again
                        if (!(VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Green) && VerifyHealthblockHasExpectedStatus(forceUri, "PassportRPS", HealthStatusEnum.Green)))
                        {
                            throw new UnexpectedTestResultException("healthblock is still failing after certs were made available to Passport RPC again.");
                        }
                    }
                }
            }
        }

        [TestGroup, Owner("ilatham"), Description("Validates the behavior of the common managed healthblocks")]
        public class CommonHealthBlocks : TestNode
        {
            static string KDCInterfaceName = "kdcsvc";
            static string SQLServiceName = "MSSQLSERVER";
            static string SQLAgentServiceName = "SQLSERVERAGENT";
            static string XOnlineLeaderboardServiceName = "LbSrv";
            static string SGServiceName = "SGSVC";
            static string targetMachineInterfaceName = "npdb";
            
            // This is disabled because it doesn't currently work; it was shutting down SQL, but the event to detect the proper starting of SQL doesn't seem to show up reliably.
            // Also, it took so long for SQL to shut down on the VM once that the services manager got angry with it and called it names. We'd also have to track the list
            // of services that depend on SQL to restart them all as well when all said and done, to keep from hosing the blob. Killing SQL is just too messy to be reliable.
            // This should thus be refactored to just change the name of the database in npdb that the DatabaseInfo block checks for.
            //[TestCase, Owner("ilatham"), TestFrequency("Regression"), TestCasePriority(3), EnvRequirement("XblobOnly"), Description("shuts down npdb to force a red health status in the DatabaseInfo healthblock")]
            public class DatabaseInfoHealthBlock : TestNode
            {
                public override void Run()
                {
                    if (!RunningAgainstXblob())
                    {
                        throw new DidNotExecuteException("This test should only be run on xblobs, because it shuts down SQL");
                    }

                    bool bRestartedOK = true;
                    List<string> KdcURLs = GetHealthcheckURLsFromNPDB(KDCInterfaceName);

                    if (KdcURLs.Count == 0)
                    {
                        throw new DidNotExecuteException("No Healthcheck URLs found to test.");
                    }

                    string[] servers = Global.XEnv.GetServerListByInterface(targetMachineInterfaceName);

                    try
                    {
                        // shut down SQL
                        foreach (string server in servers)
                        {
                            if (!ShutdownService(SQLServiceName, server))
                            {
                                throw new UnexpectedTestResultException(string.Format("Failed to stop SQL on server {0}. Ensure that SQL is running again before trying to run further tests.", server));
                            }
                        }

                        foreach (string URL in KdcURLs)
                        {
                            // make sure we use a force query URL so that we don't have cached data coming back
                            Uri forceUri = MakeQueryForceUpdate(URL);

                            // check the health and verify that health is now red
                            if (!VerifyHealthblockHasExpectedStatus(forceUri, "DatabaseInfo", HealthStatusEnum.Red))
                            {
                                throw new UnexpectedTestResultException("turning SQL off did NOT cause the healthcheck to fail");
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Global.RO.Error(e.ToString());
                    }
                    finally
                    {
                        foreach (string server in servers)
                        {
                            // start SQL again
                            if (!StartService(SQLServiceName, server))
                            {
                                bRestartedOK = false;
                                Global.RO.Fatal("Failed to start SQL on server {0}. Ensure that SQL is running again before trying to run further tests.", server);
                            }
                            if (!StartService(SGServiceName, server))
                            {
                                bRestartedOK = false;
                                Global.RO.Fatal("Failed to start SG on server {0}. Ensure that SG is running again before trying to run further tests.", server);
                            }
                            if (!StartService(XOnlineLeaderboardServiceName, server))
                            {
                                bRestartedOK = false;
                                Global.RO.Fatal("Failed to start SG on server {0}. Ensure that SG is running again before trying to run further tests.", server);
                            }
                            if (!StartService(SQLAgentServiceName, server))
                            {
                                bRestartedOK = false;
                                Global.RO.Fatal("Failed to start SQL Agent on server {0}. Ensure that SQL Agent is running again before trying to run further tests.", server);
                            }
                        }
                    }

                    if (!bRestartedOK)
                    {
                        throw new UnexpectedTestResultException("!bRestartedOk");
                    }

                    foreach (string URL in KdcURLs)
                    {
                        Uri forceUri = MakeQueryForceUpdate(URL);

                        // check the health and verify that health is now green again
                        if (!VerifyHealthblockHasExpectedStatus(forceUri, "overallStatus", HealthStatusEnum.Green))
                        {
                            throw new UnexpectedTestResultException("healthblock is still failing after certs were made available to Passport RPC again.");
                        }
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.healthchecks_none_12.4.56.0_none_bc6b228657a596ca
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.healthchecks
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.healthchecks,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\SuiteDefinition.cs ===
﻿using System;
using ServerTestFramework;

[assembly: RootNode(typeof(xonline.common.test.healthchecks.HealthChecks))]

namespace xonline.common.test.healthchecks
{
        /// <summary>
        ///      <TestSuite>Healthcheck Tests</TestSuite>
        ///        <Tester>Ian Latham</Tester>
        ///        <Developer>Kevin Goodier</Developer>
        ///        <PM>Rose Bigham</PM>
        /// </summary>
        /// <remarks>
        ///        <Goal>Validating the behavior of the healthcheck framework.</Goal>
        ///        <NonGoal>Validating the behavior of individual healthblocks.</NonGoal>
        ///        <Description>
        ///                <p>
        ///                        This suite contains tests that validate the following:
        ///                         1. All healthchecks defined in NPDB that should respond do respond, for all valid param values
        ///                         2. All healthchecks defined in NPDB that should NOT respond (port range of 10xxx) do NOT respond
        ///                         3. The healthcheck framework is well behaved when the component trying to use it is not defined in NPDB
        ///                         4. The healthcheck frameowrk is well behaved when a component does not have any registered healthblocks in NPDB
        ///                         5. For a single native component, all valid param combinations in the healthcheck URL result in valid responses from the healthcheck framework
        ///                         6. For a single managed component, all valid param combinations in the healthcheck URL result in valid responses from the healthcheck framework
        ///                </p>
        ///      </Description>
        /// </remarks>
        public partial class HealthChecks : TestNode
        {
                
        }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\leaderboard\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\HealthcheckHelpers.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Net;
using System.ServiceProcess;
using System.Diagnostics;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.Database;

using xonline.common.health;

namespace xonline.common.test.healthchecks
{
    public partial class HealthChecks : TestNode
    {
        public enum EnvironmentEnum
        {
            xblob,
            int2,
            unknown
        }

        /// <summary>
        /// This function should NOT be used yet. It's not ready for consumption. Major issues:
        ///     restoring a snapshot requires that all clients disconnect from the database (big implications for testnet and int2)
        ///     restoring a snapshot cycles the database offline and then back online again (also big implications for testnet and int2)
        /// I want this code somewhere that I can play with it though, so it's going in here.
        /// </summary>
        private void SnapShotCycle()
        {            
            ServerTestFramework.Database.Npdb npdb = new Npdb();
            npdb.ConnectToServer();
            string sDatabaseName = "npdb";
            // TODO: pull this data from sysfiles
            string DataFileName = "DataFile";
            string sDataFileLocation = @"C:\ESP\SqlData\npdbData\npdbDataFile_Data.ss";
            string snapshotSQL = string.Format(@"CREATE DATABASE {0}_testsnapshot ON ( NAME = {1}, FILENAME = '{2}' ) AS SNAPSHOT OF {0};", sDatabaseName, DataFileName, sDataFileLocation);
            string restoreSnapshotSQL = string.Format(@"use master; RESTORE DATABASE {0} FROM DATABASE_SNAPSHOT = '{0}_testsnapshot'", sDatabaseName);
            string dropSnapshotSQL = string.Format(@"IF EXISTS (SELECT * FROM sys.databases WHERE NAME='{0}_testsnapshot') DROP DATABASE {0}_testsnapshot;", sDatabaseName);

            try
            {
                // take npdb snapshot
                npdb.IssueCommand(dropSnapshotSQL);
                npdb.IssueCommand(snapshotSQL);
            }
            finally
            {
                // TODO: undo changes to npdb
                // npdb.IssueCommand(restoreSnapshotSQL);
                // TODO: wait for the db to come back online
                npdb.IssueCommand(dropSnapshotSQL);
            }
        }
        
        public static bool RunningAgainstXblob()
        {
            if (Global.XEnv.GetEnv().Equals("xblob", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }

        public static Uri MakeQueryForceUpdate(string URL)
        {
            Uri uri = new Uri(URL);
            return MakeQueryForceUpdate(uri);
        }

        public static Uri MakeQueryForceUpdate(Uri uri)
        {
            UriBuilder ub = new UriBuilder(uri);
            ub.Query = ub.Query + "op=status";
            return ub.Uri;
        }

        public class TestHealthblock_ThrowsException : xonline.common.health.IHealthBlock
        {
            TestHealthblock_ThrowsException(ResourceTypeEnum type)
            {
                resourceType = type;
            }

            private ResourceTypeEnum resourceType = ResourceTypeEnum.Remote;

            public ResourceTypeEnum ResourceType
            {
                get { return resourceType; }
            }

            public void DoCheck(HealthBlockManager blockManager, NameValueCollection blockParams, HealthReport report)
            {
                throw new Exception("test exception handling");
            }


        }

        public static string[] blackListNameFilter = {
                                                       "/xcbk/",
                                                       "/Alerts/",
                                                   };

        public static string[] expectedYellowInXblobsNameFilter = {
                                                       //"/catalog/",
                                                   };


        private static bool IsHeartbeatQuery(Uri uri)
        {
            if (uri.Query.ToLower().Contains("op=heartbeat"))
            {
                return true;
            }
            return false;
        }
        private static bool IsStyleSheetRequest(Uri uri)
        {
            // in the engine, any value other than default or help will branch down the same path as not being a stylesheet request
            if (uri.Query.ToLower().Contains("xsl=default") || uri.Query.ToLower().Contains("xsl=help"))
            {
                return true;
            }
            return false;
        }
        private static bool IsHelpRequest(Uri uri)
        {
            if (uri.Query.ToLower().Contains("op=help"))
            {
                return true;
            }
            return false;
        }
        private static bool IsRawRequest(Uri uri)
        {
            if (uri.Query.ToLower().Contains("stylesheet=no"))
            {
                return true;
            }
            return false;
        }
        private static bool IsBlackListedByTest(Uri uri)
        {
            string url = uri.ToString().ToLower();
            foreach (string s in blackListNameFilter)
            {
                if (url.Contains(s.ToLower()))
                {
                    return true;
                }
            }
            return false;
        }

        private static bool ShouldNotRespond(Uri uri)
        {
            if (uri.Port < 11000)
            {
                return true;
            }
            return false;
        }

        private static bool ShouldBeYellow(Uri uri)
        {
            if (RunningAgainstXblob())
            {
                string url = uri.ToString().ToLower();
                foreach (string s in expectedYellowInXblobsNameFilter)
                {
                    if (url.Contains(s.ToLower()))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private static bool ValidateHealthURL(Uri uri)
        {
            System.Net.HttpWebRequest ignoredRequest;
            HttpWebResponse ignoredResponse;
            return ValidateHealthURL(uri, out ignoredRequest, out ignoredResponse);
        }
        private static bool ValidateHealthURL(Uri uri, out string responseText)
        {
            System.Net.HttpWebRequest ignoredRequest;
            HttpWebResponse ignoredResponse;
            return ValidateHealthURL(uri, out ignoredRequest, out ignoredResponse, out responseText);
        }
        private static bool ValidateHealthURL(Uri uri, out System.Net.HttpWebRequest request, out HttpWebResponse response)
        {
            string ignored;
            return ValidateHealthURL(uri, out request, out response, out ignored);
        }
        private static bool ValidateHealthURL(Uri uri, out System.Net.HttpWebRequest request, out HttpWebResponse response, out string responseText)
        {
            Global.RO.Debug("verifying: {0}", uri.ToString());
            
            request = null;
            response = null;
            responseText = null;

            try
            {
                request = (HttpWebRequest)WebRequest.Create(uri);
                response = (HttpWebResponse)request.GetResponse();



                // pull out the actual response
                System.IO.StreamReader sr = new System.IO.StreamReader(response.GetResponseStream());
                responseText = sr.ReadToEnd();
                
                sr.Close();
                response.Close();

                if (!IsStyleSheetRequest(uri) || IsHelpRequest(uri))
                {
                    if (!IsHeartbeatQuery(uri))
                    {
                        // 200 should always be the response to non-heartbeats
                        if (response.StatusCode != HttpStatusCode.OK)
                        {
                            // note that some failures in the call to GetResponse will result in thrown exceptions, and we won't end up in here
                            Global.RO.Error("Got response {0} instead of 200 from this URI: {1}", response.StatusCode, uri.ToString());
                            response.Close();
                            return false;
                        }

                        if (!IsStyleSheetRequest(uri))
                        {
                            // parse the XML to see if a stylesheet was referenced
                            string stylesheetQuery = ExtractStylesheetQuery(responseText);

                            if (IsRawRequest(uri))
                            {
                                // if a raw request was put through, make sure no stylesheet directive is in the response
                                if (!string.IsNullOrEmpty(stylesheetQuery))
                                {
                                    Global.RO.Error("unexpected xml-stylesheet node found in response to: {0}", uri.ToString());
                                    return false;
                                }
                            }
                            else
                            {
                                // otherwise make sure that a stylesheet directive is referenced in the XML results, and that it's accessible as well
                                if (string.IsNullOrEmpty(stylesheetQuery))
                                {
                                    Global.RO.Error("xml-stylesheet node NOT found in response to: {0}", uri.ToString());
                                    return false;
                                }

                                UriBuilder ub = new UriBuilder(uri);
                                ub.Query = stylesheetQuery;
                                Global.RO.Debug("verifying stylesheet: {0}", stylesheetQuery);
                                if (!ValidateHealthURL(ub.Uri))
                                {
                                    return false;
                                }
                            }

                            //TODO: insert deeper validation on a per-healthblock basis
                        }
                    }
                    else
                    {
                        if (response.StatusCode != HttpStatusCode.OK && response.StatusCode != HttpStatusCode.InternalServerError)
                        {
                            Global.RO.Error("Unexpected status code returned from heartbeat query: {0} response code: {1}", uri.ToString(), response.StatusCode);
                            return false;
                        }
                    }
                }
                else
                {
                    // validate the stylesheet that we were sent
                    if (responseText.Length == 0)
                    {
                        Global.RO.Error("empty stylesheet returned from query: {0}", uri.ToString());
                        return false;
                    }

                    // make sure that the stylesheet we get back is also valid XML
                    try
                    {
                        if (!validateStyleSheet(responseText))
                        {
                            Global.RO.Error("non-stylesheet returned from query: {0}", uri.ToString());
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        Global.RO.Error("Exception verifying stylesheet from query: {0}", uri.ToString());
                        Global.RO.Error(ex.ToString());
                        return false;
                    }
                }
            }
            catch (WebException e)
            {
                Global.RO.Error("Exception thrown when reading from this URI: {0}\r\n{1}", uri.ToString(), e.ToString());
                return false;
            }
            return true;
        }

        private static void ValidateURLWithParamPermutations(ref int nFailed, ref int nChecked, List<string> targetURLs)
        {
            foreach (string baseURL in targetURLs)
            {
                Uri uri = new Uri(baseURL);
                UriBuilder ub = new UriBuilder(uri);
                if (!ValidateHealthURL(uri))
                {
                    nFailed++;
                }

                foreach (string value in opValues)
                {
                    nChecked++;
                    ub.Query = string.Format(@"op={0}", value);
                    if (!ValidateHealthURL(ub.Uri))
                    {
                        nFailed++;
                    }
                }
                foreach (string value in xslValues)
                {
                    nChecked++;
                    ub.Query = string.Format(@"xsl={0}", value);
                    if (!ValidateHealthURL(ub.Uri))
                    {
                        nFailed++;
                    }
                }
                foreach (string value in stylesheetValues)
                {
                    nChecked++;
                    ub.Query = string.Format(@"stylesheet={0}", value);
                    if (!ValidateHealthURL(ub.Uri))
                    {
                        nFailed++;
                    }
                }
                foreach (string[] pictCase in paramPictCases)
                {
                    nChecked++;
                    /// for building the url:
                    ///     first mark the start of the query with "?"
                    ///     then assume for each param that there is another param before it (all param names preceeded by &)
                    ///     then at the end, fixup the first param name (replace "?&" with "")
                    ///     and then handle the case of all null params (make sure url doesn't end with ?)
                    /// Note that we do NOT pass params without a value, since that doesn't seem to be supported
                    string sQueryString = "?";
                    if (!string.IsNullOrEmpty(pictCase[0]))
                    {
                        sQueryString += string.Format(@"&op={0}", pictCase[0]);
                    }
                    if (!string.IsNullOrEmpty(pictCase[1]))
                    {
                        sQueryString += string.Format(@"&xsl={0}", pictCase[1]);
                    }
                    if (!string.IsNullOrEmpty(pictCase[2]))
                    {
                        sQueryString += string.Format(@"&stylesheet={0}", pictCase[2]);
                    }
                    sQueryString = sQueryString.Replace("?&", "");
                    if (sQueryString.EndsWith("?"))
                    {
                        continue;
                    }
                    ub.Query = sQueryString;
                    // we check the base URL initially, so no need to double check
                    if (!ValidateHealthURL(ub.Uri))
                    {
                        nFailed++;
                    }
                }
            }
        }

        private static void WakeupHealthURL(string URL)
        {
            try
            {
                Global.RO.Info("Waking this URI: {0}", URL);
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(URL);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                response.Close();
            }
            catch(WebException e)
            {
                Global.RO.Info("Exception thrown when waking this URI: {0}\r\n{1}", URL, e.Message);
            }
        }

        private static bool VerifyBlockedURL(Uri uri)
        {
            System.Net.HttpWebRequest request;
            HttpWebResponse response;
            return VerifyBlockedURL(uri, out request, out response);
        }
        private static bool VerifyBlockedURL(Uri uri, out System.Net.HttpWebRequest request, out HttpWebResponse response)
        {
            request = null;
            response = null;

            try
            {
                request = (HttpWebRequest)WebRequest.Create(uri);
                response = (HttpWebResponse)request.GetResponse();
                response.Close();

                // blocked URLs shouldn't give an OK response
                if (response.StatusCode != HttpStatusCode.ServiceUnavailable && response.StatusCode != HttpStatusCode.NotFound)
                {
                    Global.RO.Error("Got response of {0} from a URI that should be blocked: {1}", response.StatusCode, uri.ToString());
                    return false;
                }
            }
            catch (WebException e)
            {
                Global.RO.Info("Exception thrown when reading from this URI: {0}\r\n{1}", uri.ToString(), e.ToString());
            }
            return true;
        }

        private static bool FakeHealthURLValidation(Uri uri, out System.Web.HttpRequest request, out System.Web.HttpResponse response)
        {
            System.IO.StringWriter output = new System.IO.StringWriter();
            response = new System.Web.HttpResponse(output);

            //TODO: pull the component name out of the URL instead of hardcoding it
            request = new System.Web.HttpRequest(uri.GetComponents(UriComponents.Path, UriFormat.Unescaped), uri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped), uri.Query);
            System.Web.HttpContext ctx = new System.Web.HttpContext(request, response);
            xonline.common.health.HealthcheckEngine.ProcessRequest(ctx, "FakeComponentName");

            // if this is NOT a heartbeat query, then we should get lots of stuff back
            if (!IsHeartbeatQuery(uri))
            {
                // 200 should always be the response to non-heartbeats
                if (response.StatusCode != 200)
                {
                    // note that some failures in the call to GetResponse will result in thrown exceptions, and we won't end up in here
                    Global.RO.Error("Got response {0} instead of 200 from this URI: {1}", response.StatusCode, uri.ToString());
                    response.Close();
                    return false;
                }

                // make sure we get ANYTHING back
                if (output.ToString().Length == 0)
                {
                    Global.RO.Error("empty response returned from query: {0}", uri.ToString());
                    return false;
                }

                if (!IsStyleSheetRequest(uri))
                {

                    string stylesheetQuery = ExtractStylesheetQuery(output.ToString());

                    if (IsRawRequest(uri))
                    {
                        // if a raw request was put through, make sure no stylesheet directive is in the response
                        if (!string.IsNullOrEmpty(stylesheetQuery))
                        {
                            Global.RO.Error("unexpected xml-stylesheet node found in response to: {0}", uri.ToString());
                            return false;
                        }
                    }
                    else
                    {
                        // otherwise make sure that a stylesheet directive is referenced in the XML results, and that it's accessible as well
                        if (string.IsNullOrEmpty(stylesheetQuery))
                        {
                            Global.RO.Error("xml-stylesheet node NOT found in response to: {0}", uri.ToString());
                            return false;
                        }

                        System.IO.StringWriter xslOutput = null;
                        string xslQuery = null;
                        try
                        {

                            xslOutput = new System.IO.StringWriter();
                            System.Web.HttpResponse xslResponse = new System.Web.HttpResponse(xslOutput);
                            ctx = new System.Web.HttpContext(new System.Web.HttpRequest(uri.GetComponents(UriComponents.Path, UriFormat.Unescaped), uri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped), stylesheetQuery), xslResponse);
                            xonline.common.health.HealthcheckEngine.ProcessRequest(ctx, "FakeComponentName");
                        }
                        finally
                        {
                            if (xslOutput != null)
                            {
                                xslOutput.Close();
                            }
                        }
                        if (xslOutput.ToString().Length == 0)
                        {
                            Global.RO.Error("empty stylesheet returned from query: {0}{1}?{2}", uri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped), uri.GetComponents(UriComponents.Path, UriFormat.Unescaped), stylesheetQuery);
                            return false;
                        }

                        // make sure that the stylesheet we get back is also valid XML
                        if (!validateStyleSheet(xslOutput.ToString()))
                        {
                            Global.RO.Error("non-stylesheet returned from query: {0}/{1}?{2}", uri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped), uri.GetComponents(UriComponents.Path, UriFormat.Unescaped), xslQuery);
                            return false;
                        }
                    }
                }
            }
            else
            {
                if (response.StatusCode != 200 && response.StatusCode != 500)
                {
                    Global.RO.Error("Unexpected status code returned from heartbeat query: {0} response code: {1}", uri.ToString(), response.StatusCode);
                    return false;
                }
            }

            return true;
        }

        private static string ExtractStylesheetQuery(string xmlData)
        {
            System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
            doc.LoadXml(xmlData);
            System.Xml.XmlProcessingInstruction xslNode = (System.Xml.XmlProcessingInstruction)doc.SelectSingleNode("/processing-instruction(\"xml-stylesheet\")");
            // otherwise make sure that a stylesheet directive is referenced in the XML results, and that it's accessible as well
            if (xslNode == null)
            {
                return null;
            }

            string xslURI = xslNode.Value;
            xslURI = xslURI.Substring(xslURI.IndexOf("'") + 1);
            xslURI = xslURI.Substring(0, xslURI.IndexOf("'"));
            xslURI = xslURI.Substring(xslURI.LastIndexOf("?") + 1);
            return xslURI;
        }
        private static bool validateStyleSheet(string styleSheetData)
        {
            /// TODO: there's obviously more stuff we can do beyond just verifying that it's a valid xml document that is also a stylesheet
            /// some day we should determine what that is and do it
            System.Xml.XmlDocument xslDoc = new System.Xml.XmlDocument();
            xslDoc.LoadXml(styleSheetData);
            if (!xslDoc.DocumentElement.Name.Contains("xsl:stylesheet"))
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// queries the help page on the healthcheck to see the list of healthblocks that are currently flagged as enabled for this healthcheck
        /// </summary>
        /// <param name="uri">the base URI to query</param>
        /// <returns>a list of block names that are currently enabled</returns>
        private static List<string> GetActiveHealthblocks(Uri uri)
        {
            List<string> results = new List<string>();
            UriBuilder ub = new UriBuilder(uri);
            ub.Query="op=help";
            HttpWebRequest request;
            HttpWebResponse response;
            string responseText;
            if (ValidateHealthURL(ub.Uri, out request, out response, out responseText))
            {
                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.LoadXml(responseText);
                System.Xml.XmlNodeList nodes = doc.SelectNodes(@"/HealthcheckHelp/HealthBlocks/HealthBlocksToRun/HealthBlock");
                foreach (System.Xml.XmlNode node in nodes)
                {
                    results.Add(node.InnerText);
                }
            }
            else
            {
                throw new Exception(string.Format("failed to get list of active health blocks for: {0}", uri.ToString()));
            }
            return results;
        }

        private static List<xonline.common.health.HealthReport> GetHealthReports(string responseText)
        {
            List<xonline.common.health.HealthReport> results = new List<HealthReport>();
            System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
            doc.LoadXml(responseText);

            // first, insert a fake healthreport with data about the overall healthcheck
            System.Xml.XmlNode overallNode = doc.SelectSingleNode(@"/Healthcheck");
            xonline.common.health.HealthReport overallReport = new xonline.common.health.HealthReport(
                "overallStatus",
                overallNode.SelectSingleNode(@"@Name").InnerText,
                ResourceTypeEnum.Local,
                true, String.Empty);

            string overallStatus = overallNode.SelectSingleNode(@"@HealthStatus").InnerText;
            overallReport.HealthStatus = overallStatus.Equals("Green", StringComparison.OrdinalIgnoreCase) ? HealthStatusEnum.Green : (overallStatus.Equals("Yellow", StringComparison.OrdinalIgnoreCase) ? HealthStatusEnum.Yellow : HealthStatusEnum.Red);
            results.Add(overallReport);

            // then get the list of actual reports from each block, and add those reports to the list
            System.Xml.XmlNodeList nodes = doc.SelectNodes(@"/Healthcheck/Reports/HealthReport");
            foreach (System.Xml.XmlNode node in nodes)
            {
                bool bCritical = node.SelectSingleNode(@"./Critical").InnerText.Equals("True", StringComparison.OrdinalIgnoreCase) ? true : false;
                string resource = node.SelectSingleNode(@"./ResourceType").InnerText;
                ResourceTypeEnum rType = resource.Equals("Local", StringComparison.OrdinalIgnoreCase) ? ResourceTypeEnum.Local : (resource.Equals("Remote", StringComparison.OrdinalIgnoreCase) ? ResourceTypeEnum.Remote : ResourceTypeEnum.Unknown);
                
                xonline.common.health.HealthReport rep = new xonline.common.health.HealthReport(
                node.SelectSingleNode(@"@Name").InnerText,
                node.SelectSingleNode(@"./FullName").InnerText,
                rType,
                bCritical,
                node.SelectSingleNode(@"./Parameters").InnerText);
                
                string status = node.SelectSingleNode(@"@HealthStatus").InnerText;
                rep.HealthStatus = status.Equals("Green", StringComparison.OrdinalIgnoreCase) ? HealthStatusEnum.Green : (status.Equals("Yellow", StringComparison.OrdinalIgnoreCase) ? HealthStatusEnum.Yellow : HealthStatusEnum.Red);
                // TODO: fill in the proper error details
                rep.ErrorDetails = "";
                results.Add(rep);
            }
            return results;
        }


        #region HTTP Post param values
        public static string[] opValues = {
                                                  @"help",
                                                  @"status",
                                                  @"laststatus",
                                                  @"heartbeat",
                                              };

        public static string[] xslValues = {
                                                  @"default",
                                                  @"help",
                                                  @"foo",
                                              };

        public static string[] stylesheetValues = {
                                                  @"no",
                                                  @"foo",
                                              };

        public static string[][] paramPictCases = new string[][]{
                                                    new string[] {"heartbeat",	"foo",	"no"},
                                                    new string[] {"help",	"help",	"no"},
                                                    new string[] {null,	null,	"no"},
                                                    new string[] {"heartbeat",	null,	"foo"},
                                                    new string[] {"laststatus",	"help",	null},
                                                    new string[] {"laststatus",	"default",	"no"},
                                                    new string[] {null,	"foo",	null},
                                                    new string[] {null,	"default",	"foo"},
                                                    new string[] {"status",	null,	null},
                                                    new string[] {"laststatus",	null,	"foo"},
                                                    new string[] {"status",	"help",	"foo"},
                                                    new string[] {"help",	"default",	null},
                                                    new string[] {"help",	"foo",	"foo"},
                                                    new string[] {"heartbeat",	"help",	null},
                                                    new string[] {"laststatus",	"foo",	"no"},
                                                    new string[] {null,	"help",	"no"},
                                                    new string[] {"help",	null,	"no"},
                                                    new string[] {"heartbeat",	"default",	"foo"},
                                                    new string[] {"status",	"default",	"no"},
                                                    new string[] {"status",	"foo",	"no"},
                                                };
        #endregion

        static public List<string> GetHealthcheckURLsFromNPDB()
        {
            return GetHealthcheckURLsFromNPDB(null, false);
        }

        static public List<string> GetHealthcheckURLsFromNPDB(bool includeKnownBadURLs)
        {
            return GetHealthcheckURLsFromNPDB(null, includeKnownBadURLs);
        }

        static public List<string> GetHealthcheckURLsFromNPDB(string filterString)
        {
            return GetHealthcheckURLsFromNPDB(filterString, false);
        }

        static public List<string> GetHealthcheckURLsFromNPDB(string filterString, bool includeKnownBadURLs)
        {
            string query = @"EXEC [dbo].[p_config_get_server_healthchecks]";

            ServerTestFramework.Database.Npdb db = new Npdb();
            db.ConnectToServer();
            System.Data.SqlClient.SqlDataReader results;
            db.ReadData(query, out results);
            List<string> URLs = new List<string>();
            if (results.HasRows)
            {
                while (results.Read())
                {
                    string sURL = results.GetString(0);
                    Uri uri = new Uri(sURL);
                    if (!string.IsNullOrEmpty(filterString))
                    {
                        if (!uri.ToString().ToLower().Contains(filterString.ToLower()))
                        {
                            continue;
                        }
                    }
                    if (!includeKnownBadURLs)
                    {
                        if (IsBlackListedByTest(uri) || ShouldNotRespond(uri))
                        {
                            continue;
                        }
                    }
                    string ipAdd = uri.Host;
                    IPHostEntry host = Dns.GetHostEntry(uri.Host);
                    foreach (IPAddress address in host.AddressList)
                    {
                        if (address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                        {
                            ipAdd = address.ToString();
                        }
                    }
                    UriBuilder ub = new UriBuilder(uri);
                    ub.Host = ipAdd;
                    URLs.Add(ub.Uri.ToString());
                }
            }

            return URLs;
        }

        /// <summary>
        /// Check the expected healthstatus for the target report against the actual healthstatus for that report
        /// </summary>
        /// <param name="uri">the Uri to use to get the report status</param>
        /// <param name="targetReportFriendlyName">the name of the report we have an expectation about (pass the string "overallStatus" to get the overall status for the healthcheck)</param>
        /// <param name="expectedStatus">the expected status of the target report</param>
        /// <returns>true if the report exists and matches the expected status;false if the report was not in the output, or the status was not as expected</returns>
        /// <remarks>This overload is meant to be used when you only care about one report for this uri. 
        /// If you expect to validate multiple reports for this uri in one test, you're better off retrieving the report text yourself, and using one of the other 
        /// VerifyHealthblockHasExpectedStatus(...) overloads</remarks>
        public static bool VerifyHealthblockHasExpectedStatus(Uri uri, string targetReportFriendlyName, health.HealthStatusEnum expectedStatus)
        {
                string healthCheckOutput;
                if (!ValidateHealthURL(uri, out healthCheckOutput))
                {
                    return false;
                }
                return VerifyHealthblockHasExpectedStatus(healthCheckOutput, targetReportFriendlyName, expectedStatus);
        }
        
        /// <summary>
        /// Check the expected healthstatus for the target report against the actual healthstatus for that report
        /// </summary>
        /// <param name="healthCheckOutput">a string containing the full xml of the healthcheck response</param>
        /// <param name="targetReportFriendlyName">the name of the report we have an expectation about (pass the string "overallStatus" to get the overall status for the healthcheck)</param>
        /// <param name="expectedStatus">the expected status of the target report</param>
        /// <returns>true if the report exists and matches the expected status;false if the report was not in the output, or the status was not as expected</returns>
        public static bool VerifyHealthblockHasExpectedStatus(string healthCheckOutput, string targetReportFriendlyName, health.HealthStatusEnum expectedStatus)
        {
            List<HealthReport> reports = GetHealthReports(healthCheckOutput);
            return VerifyHealthblockHasExpectedStatus(reports, targetReportFriendlyName, expectedStatus);
        }

        /// <summary>
        /// Check the expected healthstatus for the target report against the actual healthstatus for that report
        /// </summary>
        /// <param name="reports">a list of HealthReports that you expect to contain the target report</param>
        /// <param name="targetReportFriendlyName">the name of the report we have an expectation about (pass the string "overallStatus" to get the overall status for the healthcheck)</param>
        /// <param name="expectedStatus">the expected status of the target report</param>
        /// <returns>true if the report exists and matches the expected status;false if the report was not in the output, or the status was not as expected</returns>
        public static bool VerifyHealthblockHasExpectedStatus(List<HealthReport> reports, string targetReportFriendlyName, health.HealthStatusEnum expectedStatus)
        {
            foreach (HealthReport rep in reports)
            {
                if (rep.FriendlyName.Equals(targetReportFriendlyName, StringComparison.OrdinalIgnoreCase))
                {
                    if (rep.HealthStatus != expectedStatus)
                    {
                        Global.RO.Error("Expected Healthblock {0} to report status {1}, got status {2}", targetReportFriendlyName, expectedStatus, rep.HealthStatus);
                        if (targetReportFriendlyName.Equals("overallStatus", StringComparison.OrdinalIgnoreCase))
                        {
                            Global.RO.Error("Blocks that are not {0} include:", expectedStatus);
                            foreach (HealthReport r in reports)
                            {
                                if (r.HealthStatus != expectedStatus)
                                {
                                    Global.RO.Error("{0} : {1}", r.FriendlyName, r.HealthStatus);
                                }
                            }
                        }
                        Global.RO.Debug(rep.ErrorDetails);
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            Global.RO.Error("Expected Healthblock {0} not found in provided output", targetReportFriendlyName);
            return false;
        }

        public static ServiceControllerStatus GetServiceStatus(string name, string machineName)
        {
            ServiceController sc = new ServiceController(name, machineName);
            if (sc == null)
            {
                throw new Exception(String.Format("Error, unable to find service: {0:G}", name));
            }
            return sc.Status;
        }

        public static Hashtable ServiceStartTimes = new Hashtable();

        public static bool ShutdownService(string name)
        {
            return ShutdownService(name, ".");
        }
        /// <summary>
        /// Tries to stop the specified service (if it's not stopped or in a pending stop state), and then waits 30 seconds for the service to enter the Stopped state.
        /// </summary>
        /// <param name="name">name of the service to stop</param>
        /// <returns>true if the service stops; false if the service fails to enter the Stopped state within 30 seconds</returns>
        public static bool ShutdownService(string name, string machineName)
        {
            // hack to workaround bug 27420 (where stopping XKDC before it has REALLY started breaks the service)
            // if this is XKDC
            if (name.Equals("XKDC", StringComparison.OrdinalIgnoreCase))
            {
                // and we've started the service by hand since loading this assembly
                if (ServiceStartTimes.ContainsKey(name.ToLower()))
                {
                    // wait until the services really thinks that it has started
                    Global.RO.Debug(string.Format("Waiting for the event that tells us that {0} is really started after the start attempt at {1}", name, ((DateTime)ServiceStartTimes[name.ToLower()]).ToString()));
                    while (!IsServiceReallyStarted((DateTime)ServiceStartTimes[name.ToLower()], name, machineName))
                    {
                        System.Threading.Thread.Sleep(1000 * 1);
                        Global.RO.Debug(string.Format("STILL waiting for the event that tells us that {0} is really started...", name));
                    }

                    // then clear the flag that indicates we have to wait on future stop attempts
                    ServiceStartTimes.Remove(name.ToLower());
                }
            }

            ServiceController sc = new ServiceController(name, machineName);
            if (sc.Status != ServiceControllerStatus.StopPending && sc.Status != ServiceControllerStatus.Stopped)
            {
                sc.Stop();
                sc.Refresh();
            }

            sc.WaitForStatus(ServiceControllerStatus.Stopped, new TimeSpan(0, 0, 90));
            sc.Refresh();

            if (sc.Status != ServiceControllerStatus.Stopped)
            {
                Global.RO.Debug("service failed to stop ['{0}' on '{1}'] status: '{2}'", name, machineName, sc.Status.ToString());
                return false;
            }

            Global.RO.Debug("service stopped ['{0}' on '{1}']", name, machineName);
            return true;
        }

        /// <summary>
        /// Tries to start the specified service (if it's not started or in a pending start state), and then waits 30 seconds for the service to enter the Running state.
        /// </summary>
        /// <param name="name">name of the service to start</param>
        /// <returns>true if the service starts; false if the service fails to start </returns>
        public static bool StartService(string name)
        {
            return StartService(name, ".");
        }

        /// <summary>
        /// Tries to start the specified service (if it's not started or in a pending start state), and then waits 30 seconds for the service to enter the Running state.
        /// </summary>
        /// <param name="name">name of the service to start</param>
        /// <param name="debugCmd">The debugCmd can be set to attach a debugger to the service process on successful startup. It should be the full command that can have the PID appended to the end any be run</param>
        /// <returns>true if the service starts; false if the service fails to start </returns>
        public static bool StartService(string name, string machineName)
        {
            ServiceController sc = new ServiceController(name, machineName);
            if (sc.Status != ServiceControllerStatus.StartPending && sc.Status != ServiceControllerStatus.Running)
            {
                // track the time that we started the service, for the purpose of doing book keeping around tracking when we tried to start services that 
                // aren't REALLY started when they tell the services manager that they are, like XKDC or SQLSERVER
                if (ServiceStartTimes.ContainsKey(name.ToLower()))
                {
                    ServiceStartTimes.Remove(name.ToLower());
                }
                ServiceStartTimes[name.ToLower()] = DateTime.Now;
                Global.RO.Debug("starting service ['{0}' on '{1}'] which is currently {2}", name, machineName, sc.Status.ToString());
                sc.Start();
                System.Threading.Thread.Sleep(5000);
                sc.Refresh();
            }
            else
            {
                Global.RO.Debug("Status of the service is already {0}", sc.Status.ToString());
            }

            // spin until the service enters one of the two expected states
            while (sc.Status != ServiceControllerStatus.Running && sc.Status != ServiceControllerStatus.Stopped)
            {
                System.Threading.Thread.Sleep(1000);
                sc.Refresh();
            }

            if (sc.Status != ServiceControllerStatus.Running)
            {
                Global.RO.Debug("unable to start service '{0}' on '{1}', last known status was {2}", name, machineName, sc.Status.ToString());
                return false;
            }

            //TODO: for SQL, wait for the event that says it's ready for client connections 
            // this code doesn't seem to work reliably right now, as I've seen instances where the event doesn't show up, and we crash looking at the event log; hence it's disabled
            //if (name.Equals("MSSQLSERVER", StringComparison.OrdinalIgnoreCase))
            //{
            //    // and we're started the service by hand since loading this assembly
            //    if (ServiceStartTimes.ContainsKey(name.ToLower()))
            //    {
            //        // wait until the services really thinks that it has started
            //        Global.RO.Debug(string.Format("Waiting for the event that tells us that {0} is really started after the start attempt at {1}", name, ((DateTime)ServiceStartTimes[name.ToLower()]).ToString()));
            //        while (!IsServiceReallyStarted((DateTime)ServiceStartTimes[name.ToLower()], name, machineName))
            //        {
            //            System.Threading.Thread.Sleep(1000 * 1);
            //            Global.RO.Debug(string.Format("STILL waiting for the event that tells us that {0} is really started...", name));
            //        }
            //    }
            //}

            return true;
        }

        public static bool RestartService(string name)
        {
            return RestartService(name, ".");
        }

        public static bool RestartService(string name, string machineName)
        {
            Global.RO.Debug("Restarting service '{0}' on '{1}'", name, machineName);
            if (ShutdownService(name, machineName))
            {
                return StartService(name, machineName);
            }
            return false;
        }

        public static EventLogEntry[] GetEvents(DateTime lowerBoundary, string eventLog, string source, string server)
        {
            System.Collections.ArrayList results = new System.Collections.ArrayList();

            // hack to fix the problem of Event Log message timing not being tracked beyond seconds.
            DateTime modifiedLowerBoundary = lowerBoundary.AddMilliseconds(-1 * (lowerBoundary.Millisecond + 1));

            EventLog log = new EventLog(eventLog, server, source);
            try
            {
                for (int i = log.Entries.Count - 1; i > 0; i--)
                {
                    //if (log.Entries[i].Source.Equals(ServiceName, StringComparison.OrdinalIgnoreCase))
                    //{
                    if (log.Entries[i].TimeWritten >= modifiedLowerBoundary)
                    {
                        results.Insert(results.Count, log.Entries[i]);
                    }
                    else
                    {
                        break;
                    }
                    //}
                }
            }
            catch (Exception e)
            {
                Global.RO.Debug(string.Format("Size was {0}", log.Entries.Count));
                Global.RO.Debug(e.ToString());
            }
            EventLogEntry[] array = new EventLogEntry[results.Count];
            results.CopyTo(array);
            return array;
        }

        public static bool IsServiceReallyStarted(DateTime lowerBoundary, string service, string server)
        {
            EventLogEntry[] events = GetEvents(lowerBoundary, "Application", service, server);
            foreach(EventLogEntry e in events)
            {
                if(e.InstanceId == GetStartedEventForService(service))
                {
                    Global.RO.Debug(string.Format("Event was generated at {0} and written at {1}", e.TimeGenerated.ToString(), e.TimeWritten.ToString()));
                    return true;
                }
            }
            return false;
        }
        public static int GetStartedEventForService(string service)
        {
            switch (service.ToLower())
            {
                case "xkdc":
                    return 54762; // from .\private\common\core\inc\xeventids.h: #define XEVENT_XKDC_INIT_SUCCESS 0x4000D5EA
                case "mssqlserver":
                    return 17126; // from the event log: SQL Server is now ready for client connections. This is an information message; no user action is required.
                default:
                    throw new System.ArgumentException("Unknown service name provided");
            }
        }
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\lists\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.healthchecks_none_12.4.56.0_none_bc6b228657a596ca
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.healthchecks
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.healthchecks_no-public-key_12.4.56.0_x-ww_9b020d46
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.healthchecks,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\livetitleconfig\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\leaderboard\LeaderboardTest.cs ===
// other folk's stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;


// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.common.leaderboard;

namespace xonline.common.leaderboard
{
    /// <summary>
    /// Unit test code 
    /// </summary>
    [TestGroup]
    public class LeaderboardTest : TestNode
    {

        #region Constructors and Test Setup/Teardown

        public LeaderboardTest() 
        { 
            Console.WriteLine( "In the LeaderboardTest Constructor" );
        }


        // executes once per test run
        [TestGroupSetup]
        public void XlastUtilTestFixtureSetup()
        {
            Console.WriteLine( "In TestFixtureSetUp." );

        }


        // executes once at the end of all the tests
        [TestGroupTearDown]
        public void XlastUtilTestFixtureTearDown()
        {
            Console.WriteLine( "In TestFixtureTearDown." );

        }


        #endregion



        #region Leaderboard Tests



        //*************************************************************************
	//need to test the following:
	//- constructor correctly assigns values to all properties
	//- ConvertXlastResetToByte works correctly
        //*************************************************************************



        [Test]
        public void LeaderboardConstructorTest()
        {
            Console.WriteLine("Starting LeaderboardTest.");

        }


        [Test]
        public void ConstructorTest()
        {
            Console.WriteLine("Starting Constructor Test.");

        }



        #endregion


	} // test class

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\lists\ListsDevTest.cs ===
using System;
using System.Net;

using ServerTestFramework;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.user;
    
namespace ServerTestFramework.LiveService.common.config.Lists
{
    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in 
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class ListsTestBaseGroup : TestNode
    {
        [TestCase]
        public void VetNameSubstring()
        {
            string strExact = "";
            string strSubstr = "";
            bool f = ForbiddenNameList.VetName("IThinkMicrosoftStinks", ref strExact, ref strSubstr);

            Assert.IsTrue(f == false);

            Assert.AreEqual(strSubstr, "microsoft");
        }

        [TestCase]
        public void RandomUSAdjective()
        {
            AdjectiveList list = AdjectiveList.CreateInstance(103);
            string adjective = list.RandomItem();

            Console.WriteLine();
            Console.WriteLine(adjective);
        }

        [TestCase]
        public void RandomNoun()
        {
            NounList list = NounList.CreateInstance(103);
            string noun = list.RandomItem();

            Console.WriteLine();
            Console.WriteLine(noun);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\livetitleconfig\LiveTitleConfigTest.cs ===
// other folk's stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;


// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.common.xlastutil;

[assembly: RootNode(typeof(xonline.common.livetitleconfig.LiveTitleConfigTestSuite))]

namespace xonline.common.livetitleconfig
{
    /// <summary>
    /// Unit test code
    /// </summary>
    [TestGroup]
    public class LiveTitleConfigTest : TestNode
    {

        #region Test Constants
            // Test Xlast strings are at the bottom of the file
        public const int        TEST_TITLE_ID       = 2147483646;  
        public const uint       GoodTitleID         = 0x80000312;
        public const uint       BadTitleID          = 0x80000313;
        public const string     GoodXlastPath       = "GoodXlastXmlForTitleConfig.xlast";
        public const string     BadXlastPath        = "BadXlastXmlForTItleConfig.xlast";
//
//        public string GoodXlast;
//        public string BadXlast;
        #endregion

        #region Constructors and Test Setup/Teardown

        public LiveTitleConfigTest() 
        { 
            Console.WriteLine( "In the LiveTitleConfigTest Constructor" );
        }


        // executes once per test run
        [TestGroupSetup]
        public void XlastUtilTestFixtureSetup()
        {
            Console.WriteLine( "In TestFixtureSetUp." );

        }


        // executes once at the end of all the tests
        [TestGroupTearDown]
        public void XlastUtilTestFixtureTearDown()
        {
            Console.WriteLine( "In TestFixtureTearDown." );

        }


        #endregion

        #region LeaderboardConfig Tests

        //review have this in it's own file?
        [Test]
        public void LeaderboardConfigConstructorTest()
        {
            Console.WriteLine("Starting LeaderboardConfigTest.");
            LeaderboardConfig lc = new LeaderboardConfig( 5, "someserversname" );

        }

        [Test]
        public void LeaderboardConfigConstructorLongNameTest()
        {
            Console.WriteLine("Starting LeaderboardConfigTest.");
            bool caught = false;

            try
            {
                LeaderboardConfig lc = new LeaderboardConfig( 5, "someserversnamesomeserversname" );
            }
            catch ( ArgumentException ae )
            {
                Console.WriteLine( "Caught Correct Exception " + ae.Message );
                caught = true;
            }

            Assert.IsTrue( caught );
        }

        [Test]
        public void LeaderboardConfigSerializationTest()
        {
            Console.WriteLine("Starting LeaderboardConfigTest.");
            LeaderboardConfig lc = new LeaderboardConfig( 5, "someserversname" );

            //can we serialize this class?
            XmlSerializer serializer = new XmlSerializer( typeof( LeaderboardConfig ) );
            StringWriter sw = new StringWriter();
            serializer.Serialize( sw, lc );

            //can we deserialize what we just serialized?
            StringBuilder sb = sw.GetStringBuilder();
            Console.WriteLine( "Here's the XML:\n " + sb.ToString() );

            XmlTextReader xmlReader = new XmlTextReader( new StringReader( sb.ToString() ) );
            serializer.CanDeserialize( xmlReader );


        }


        #endregion

        #region LiveTitleConfigs Tests -- in Memory

        // ----------------------------------------------------------
        // a: Tests of LiveTitleConfigs in memory
        // ----------------------------------------------------------
        [Test]
        public void ConstructorTest()
        {
            Console.WriteLine("Starting Constructor Test.");
            LiveTitleConfig ltc = new LiveTitleConfig( TEST_TITLE_ID );

            Assert.IsTrue( ltc.TitleGeneration == Generation.Xenon );
            Assert.IsTrue( ltc.StatsMaxReads == 5 );
            Assert.IsTrue( ltc.StatsMaxWrites == 5 );
            Assert.IsTrue( ltc.StatsMaxLeaderboards == 5 );
            Assert.IsTrue( ltc.BountyExempt == true );
            Assert.IsTrue( ltc.LeaderboardConfigs == null );
        }


        //strictly speaking this should be several, more focused tests 
        //but this achieves the same end goal and is more practical
        [Test]
        public void LiveTitleConfigSerializationTest()
        {
            Console.WriteLine("Starting LeaderboardConfigTest.");
            LiveTitleConfig ltc = new LiveTitleConfig( TEST_TITLE_ID );
            ltc.LeaderboardConfigs = new LeaderboardConfig[ 5 ];
            ltc.LeaderboardConfigs[0] = new LeaderboardConfig( 1, "server1" );
            ltc.LeaderboardConfigs[1] = new LeaderboardConfig( 2, "server2" );
            ltc.LeaderboardConfigs[2] = new LeaderboardConfig( 3, "server3" );
            ltc.LeaderboardConfigs[3] = new LeaderboardConfig( 4, "server4" );
            ltc.LeaderboardConfigs[4] = new LeaderboardConfig( 5, "server5" );
            //ltc.locale = "en-us";

            //can we serialize this class?
            XmlSerializer serializer = new XmlSerializer( typeof( LiveTitleConfig ) );
            StringWriter sw = new StringWriter();
            serializer.Serialize( sw, ltc );

            //can we deserialize what we just serialized?
            StringBuilder sb = sw.GetStringBuilder();
            Console.WriteLine( "XML is:\n" + sb.ToString() );

            XmlTextReader xmlReader = new XmlTextReader( new StringReader( sb.ToString() ) );
            serializer.CanDeserialize( xmlReader );
        }

        //Confirms that if the stars are aligned, and we got good XML
        //that this code can retrieve the leaderboards... 
        [Test]
        public void GetFromXlastTest_POS()
        {
            Console.WriteLine("Reading Good Xlast file... ");
            StreamReader xlastReader = new StreamReader( GoodXlastPath );
            string XlastXml = xlastReader.ReadToEnd();
            xlastReader.Close();
            XlastUtil.PutXlast( GoodTitleID, XlastXml );

            LiveTitleConfig ltc = LiveTitleConfig.GetLiveTitleConfigFromXlast( XlastXml, "TESTLBSERVER" );
            Assert.IsTrue( ltc != null );
            
            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlastFromXml( XlastXml );
            GameConfigProject gcp = xlsp.GameConfigProject;
    
            //now we compare the two... (modified to add skill leaderboards)
            int gameModeContext = XlastUtil.FindGameModeContext( xlsp.GameConfigProject.Contexts.Context );
            Assert.IsTrue( ( gcp.StatsViews.StatsView.Length + gcp.Contexts.Context[ gameModeContext ].ContextValue.Length ) == ltc.LeaderboardConfigs.Length );
            for ( int iLoop = 0; iLoop < gcp.StatsViews.StatsView.Length ; iLoop++ )
            {
                //stats view with this ID is in the ltc
                Assert.IsTrue( (int) gcp.StatsViews.StatsView[ iLoop ].id == ltc.LeaderboardConfigs[ iLoop ].LeaderboardID );

                //leaderboard server has been assigned
                Assert.IsTrue( "TESTLBSERVER" == ltc.LeaderboardConfigs[ iLoop ].HostingLbs );
                
            }
        }

        //Confirms that we behave as expected if the stars are *not* aligned...
        [Test]
        public void GetFromXlastTest_NEG()
        {
            
            Console.WriteLine("Reading Bad Xlast file... ");
            StreamReader xlastReader = new StreamReader( BadXlastPath );
            string XlastXml = xlastReader.ReadToEnd();
            xlastReader.Close();


        }


        #endregion

        #region LiveTitleConfig Tests -- to/from NPDB

        // ----------------------------------------------------------
        // b: Tests of LiveTitleConfigs to/from NPDB
        // ----------------------------------------------------------

        [Test]
        public void ForeignKeyTest_POS()
        {
            //create a config for an existing game_config row
            Console.WriteLine("Starting ForeignKeyTest.");
            XlastUtil.PutXlast( TEST_TITLE_ID, "<Your ForeignKeyTest_POS Test XML Here>" );

            LiveTitleConfig ltc = new LiveTitleConfig( TEST_TITLE_ID );
            ltc.TitleGeneration = Generation.Xbox;
            ltc.StatsMaxReads = 50;
            ltc.StatsMaxWrites = 50;
            ltc.StatsMaxLeaderboards = 50;
            ltc.BountyExempt = false;
            ltc.LeaderboardConfigs = null;

            //note no exception... 
            ltc.Save();
            LiveTitleConfig.Delete( TEST_TITLE_ID );

            //cleanup
            XlastUtil.DeleteTitleInfo( TEST_TITLE_ID );
        }

        [Test]
        public void ForeignKeyTest_NEG()
        {
            //create a config without an existing game_config row
            Console.WriteLine("Starting ForeignKeyTest.");
            bool caught = false;

            //expect a foreign key violation, code should do WHAT???

            LiveTitleConfig ltc = new LiveTitleConfig( TEST_TITLE_ID );
            ltc.TitleGeneration = Generation.Xbox;
            ltc.StatsMaxReads = 50;
            ltc.StatsMaxWrites = 50;
            ltc.StatsMaxLeaderboards = 50;
            ltc.BountyExempt = false;
            ltc.LeaderboardConfigs = null;

            //expected exception --> ??
            try
            {
                ltc.Save();
            }
            catch ( SqlException se )
            {
                if ( ( se.Message ).IndexOf( "INSERT statement conflicted with COLUMN FOREIGN KEY" )  != 0 )
                {
                    throw se;
                }
                else
                {
                    caught = true;
                }
            }

            Assert.IsTrue( caught );

            //cleanup just in case we make a mess?
            // LiveTitleConfig.Delete( TEST_TITLE_ID );

        }

        [Test]
        public void SaveRetrieveLiveTitleConfigTest()
        {
            Console.WriteLine("Starting SaveRetrieveLiveTitleConfigTest.");
            
            XlastUtil.PutXlast( TEST_TITLE_ID, "<Your ForeignKeyTest_POS Test XML Here>" );

            //check if it exists
            LiveTitleConfig ltc = LiveTitleConfig.Get( TEST_TITLE_ID );
            Assert.IsTrue( ltc == null );

            //create one
            ltc = new LiveTitleConfig( TEST_TITLE_ID );

            //save to db
            ltc.Save();

            //retrieve it
            LiveTitleConfig ltc2 = LiveTitleConfig.Get( TEST_TITLE_ID );
            Assert.IsTrue( ltc != null );

            //compare to make sure it's the same
            //sure beats writing a property by property comparison operator... 
            Assert.IsTrue( String.Compare( ltc.ToXml(), ltc2.ToXml() ) ==  0 );

            //cleanup
            LiveTitleConfig.Delete( TEST_TITLE_ID );
            XlastUtil.DeleteTitleInfo( TEST_TITLE_ID );
        }

        #endregion

        #region Other Stuff
        
        #endregion


	} // test class
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\offer\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\healthchecks\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("HealthcheckTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("HealthcheckTests")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("de7c760f-d590-4998-acab-5a060931c68e")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\plugins\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\login\dvt\partner\Partner.cs ===
using System;
using System.Data;
using System.Xml;

using Microsoft.Webstore;
using ServerTestFramework;

using xonline.common.config;
using xonline.common.service;
using xonline.common.sql.webstore;

namespace xonline.login.test.partner
{
    public partial class PartnerGroup : TestNode
    {
        [TestGroup, DVT, Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
        public class Partner
        {
            public static void Create(int id, string name)
            {
                using (WSClient ws = new WSClient(ConfigUtil.SecUserHistoryWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.SetHashVal(id);
                    ws.Command.CommandType = CommandType.Text;

                    ws.ExecuteNonQuery(string.Format("DELETE FROM t_partner WHERE i_partner_id = {0}", id));
                    ws.ExecuteNonQuery(string.Format("INSERT INTO t_partner (i_partner_id, vc_partner_name, si_hash_bucket, dt_change_datetime) VALUES ({0}, '{1}', {2}, GETUTCDATE()) ", id, name, ws.Partition));
                }

                Flush();
            }

            public static void Delete(int id)
            {
                using (WSClient ws = new WSClient(ConfigUtil.SecUserHistoryWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.SetHashVal(id);
                    ws.Command.CommandType = CommandType.Text;
                    ws.ExecuteNonQuery(string.Format("DELETE FROM t_partner WHERE i_partner_id = {0}", id));
                }

                Flush();
            }

            public static void Update(int id, ServiceKeyType privateKeyType, ServiceKeyType publicKeyType, int keyVersion)
            {
                using (WSClient ws = new WSClient(ConfigUtil.SecUserHistoryWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.SetHashVal(id);
                    ws.Command.CommandType = CommandType.Text;

                    ws.ExecuteNonQuery(string.Format(
                        "UPDATE t_partner SET i_private_key_type = {1}, i_public_key_type = {2}, i_key_version = {3} WHERE i_partner_id = {0}",
                        id, (int) privateKeyType, (int) publicKeyType, keyVersion
                    ));
                }

                Flush();
            }

            public static void Update(int id, XmlNode data)
            {
                using (WSClient ws = new WSClient(ConfigUtil.SecUserHistoryWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.SetHashVal(id);
                    ws.Command.CommandType = CommandType.Text;

                    ws.ExecuteNonQuery(string.Format(
                        "UPDATE t_partner SET xml_data = '{1}' WHERE i_partner_id = {0}", id, data.OuterXml
                    ));
                }

                Flush();
            }

            private static void Flush()
            {
                // flush the partner cache.  this api is just for testing it
                // should never happen in any real  environment - just  test

                xonline.login.partner.Partner.Flush();

            }

            [TestGroupSetup]
            public void Setup()
            {
                Setup(PARTNER_ID, PARTNER_NAME);
            }

            private void Setup(int id, string name)
            {
                Partner.Create(id, name);
            }

            [TestCase, Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void Get()
            {
                xonline.login.client.partner.Partner partnerById   = xonline.login.client.partner.Partner.Get(PARTNER_ID);
                xonline.login.client.partner.Partner partnerByName = xonline.login.client.partner.Partner.Get(PARTNER_NAME);

                // we looked up the same partner twice.  once by id and once by
                // name. they should be the same (on a field  by  field  basis)

                if (partnerById.Id != partnerByName.Id) throw new Exception("Partner id mismatch");
                if (partnerById.Name != partnerByName.Name) throw new Exception("Partner name mismatch");

                if ((partnerById.Data != null) || (partnerByName.Data != null)) {
                    if ((partnerById.Data != null) ^ (partnerByName.Data != null))
                        throw new Exception("Partner data mismatch");
                    else if (! partnerById.Data.Equals(partnerByName.Data)) {
                        throw new Exception("Partner data mismatch");
                    }
                }
            }

            [TestGroupTearDown]
            public void TearDown() 
            {
                TearDown(PARTNER_ID);
            }

            private void TearDown(int id)
            {
                Partner.Delete(id);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\login\dvt\partner\PartnerGroup.cs ===
using System;
using Microsoft.Webstore;
using ServerTestFramework;

using xonline.common.config;
using xonline.common.sql.webstore;

namespace xonline.login.test.partner
{
    [TestGroup, DVT, Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
    public partial class PartnerGroup : TestNode
    {
        private const int    PARTNER_ID   = 999;
        private const string PARTNER_NAME = "Test Partner";
        private const string PARTNER_USER_ID_PREFIX = "Test User ";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\makefile.inc ===
!include $(NTMAKEENV)\msbuild.def
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\offer\CommonOfferDevTests.cs ===
using System;
using System.Security.Cryptography;
using ServerTestFramework;

using xonline.common.billing;
using xonline.common.diagnostics;
using xonline.common.offer;
using xonline.common.puidmgr;
using xonline.common.service;
using xonline.common.user;
using xonline.common.utilities;

//using xonline.common.test.util;

namespace CommonOfferDevTests
{
    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class CommonOffer : TestNode
    {
        [TestCase, Description("Offer.CreateInstance.Xbox")]
        class OfferCreateInstanceXbox : TestBase
        {
            protected override void Execute()
            {
                ulong offerId = 0xFFFE000080000008;
                byte countryId = 103;

                Offer o = Offer.CreateInstance(offerId);
                Assert.IsTrue( o.IsXbox1Offer );
                Assert.IsTrue( !o.IsXenonOffer );
                Assert.IsTrue( o.IsPerUser );
                Assert.IsTrue( o.RequiresVoucher );
                Assert.IsTrue( !o.IsXbox1Content );
                Assert.IsTrue( o.IsRenewal );
                Assert.IsTrue( o.BillingOfferId(countryId) != null );
                Assert.IsTrue( o.OfferingIsOffered(countryId) );
                Assert.IsTrue( o.OfferingIsFree(countryId) );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Offer.CreateInstance.Xenon")]
        class OfferCreateInstanceXenon : TestBase
        {
            protected override void Execute()
            {
                ulong offerId = 0xFFFE07D100000001;
                byte countryId = 103;
                int tierId = (int) TierEnum.NewUser;

                Offer o = Offer.CreateInstance(offerId);
                Assert.IsTrue( !o.IsXbox1Offer );
                Assert.IsTrue( o.IsXenonOffer );
                Assert.IsTrue( o.IsPerUser );
                Assert.IsTrue( !o.AcceptsVoucher(countryId, tierId) );
                Assert.IsTrue( !o.IsXbox1Content );
                Assert.IsTrue( o.OfferingIsOffered(countryId, tierId, (int)PaymentTypeEnum.CreditCard) );
                Assert.IsTrue( o.WholePrice(countryId, tierId, (int)PaymentTypeEnum.CreditCard) > 0 || o.FractionalPrice(countryId, tierId, (int)PaymentTypeEnum.CreditCard) > 0 );

                Console.WriteLine("offer: 0x" + offerId.ToString("X") + ", whole: " + o.WholePrice(countryId, tierId, (int)PaymentTypeEnum.CreditCard) + ", fractional: " + o.FractionalPrice(countryId, tierId, (int)PaymentTypeEnum.CreditCard));

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("CountryList.CountryCode")]
        class CountryListCountryCode : TestBase
        {
            protected override void Execute()
            {
                Assert.AreEqual("US", CountryDictionary.CountryCode(103) );
                Assert.AreEqual("JP", CountryDictionary.CountryCode(53) );

                MinAge minAge = CountryDictionary.MinAge(103);
                Assert.IsTrue( minAge.User == 13 && minAge.Billing == 18 );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Offer.CreateInstance")]
        class OfferCreateInstance : TestBase
        {
            protected override void Execute()
            {
                Offer o = Offer.CreateInstance(0xFFFE000080000008);
                byte countryId = 103;

                if ( o.IsPerMachine ) throw new UnexpectedTestResultException();
                if ( !o.IsPerUser ) throw new UnexpectedTestResultException();
                if ( !o.RequiresVoucher ) throw new UnexpectedTestResultException();
                if ( o.IsXbox1Content ) throw new UnexpectedTestResultException();
                if ( !o.IsCancelable ) throw new UnexpectedTestResultException();
                if ( !o.IsRenewal ) throw new UnexpectedTestResultException();
                if ( o.Bitfilter != 1 ) throw new UnexpectedTestResultException();
                if ( o.BillingOfferId(countryId) == null ) throw new UnexpectedTestResultException();
                if ( !o.OfferingIsOffered(countryId) ) throw new UnexpectedTestResultException();
                if ( !o.OfferingIsFree(countryId) ) throw new UnexpectedTestResultException();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Details.BuildFormattedPrice")]
        class DetailsBuildFormattedPrice : TestBase
        {
            protected override void Execute()
            {
                Console.WriteLine(Details.BuildFormattedPrice(53, XOn.XC_LANGUAGE_JAPANESE, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(103, XOn.XC_LANGUAGE_ENGLISH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(24, XOn.XC_LANGUAGE_GERMAN, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(35, XOn.XC_LANGUAGE_ENGLISH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(34, XOn.XC_LANGUAGE_FRENCH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(18, XOn.XC_LANGUAGE_FRENCH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(18, XOn.XC_LANGUAGE_GERMAN, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(16, XOn.XC_LANGUAGE_FRENCH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(16, XOn.XC_LANGUAGE_ENGLISH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(5, XOn.XC_LANGUAGE_GERMAN, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(6, XOn.XC_LANGUAGE_ENGLISH, 12345, 67));
                Console.WriteLine(Details.BuildFormattedPrice(91, XOn.XC_LANGUAGE_ENGLISH, 12345, 67));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\login\dvt\partner\PartnerUser.cs ===
using System;
using System.Collections.Generic;
using System.Xml;

using ServerTestFramework;

using xonline.common.service;
using xonline.common.puidmgr;

namespace xonline.login.test.partner
{
    public partial class PartnerGroup : TestNode
    {
        [TestGroup, DVT, Owner("zachz"), TestFrequency("Regression"), EnvRequirement(""), RunDependency("Partner")]
        public class PartnerUser
        {
            [TestGroupSetup]
            public void Setup()
            {
                Setup(PARTNER_ID, PARTNER_NAME);
            }

            private void Setup(int id, string name)
            {
                Partner.Create(id, name);
            }


            [TestCase, Description("Create a new PartnerUser using Get"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void New()
            {
                // create a new puid for our user
                Puid xuid = PUIDMgr.GetNewPUID();

                // get the partner user for this partner, and xuid.  it won't
                // exist, but should automatically generate a new one for  us

                xonline.login.client.partner.PartnerUser partnerUser =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                // make sure the xuid we get back is for the user  we  wanted

                VerifyXuid(partnerUser.Xuid, xuid, "Xuid mismatch");
            }

            [TestCase, Description("Verify get of an existing PartnerUser"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void Existing()
            {
                // create a new puid for our user
                Puid xuid = PUIDMgr.GetNewPUID();

                // get the partner user for this partner, and xuid.  it won't
                // exist, but should automatically generate a new one for  us

                xonline.login.client.partner.PartnerUser partnerUserA =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                // get it again, we should get the same thing, check for that

                xonline.login.client.partner.PartnerUser partnerUserB =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                // right now the user has only a xuid and partner xuid. later
                // tests will look at the user user id,  token,  and xml data

                VerifyXuid(partnerUserA.Xuid, xuid, "Xuid mismatch");
                VerifyXuid(partnerUserB.Xuid, xuid, "Xuid mismatch");
                VerifyXuid(partnerUserA.PartnerXuid, partnerUserB.PartnerXuid,"PartnerXuid mismatch");
            }

            [TestCase, Description("Add XML data to a PartnerUser"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void Data()
            {
                // create a new puid for our user
                Puid xuid = PUIDMgr.GetNewPUID();

                // get the partner user for this partner, and xuid.  it won't
                // exist, but should automatically generate a new one for  us

                xonline.login.client.partner.PartnerUser partnerUser =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                // make sure the xuid we get back is for the user  we  wanted

                VerifyXuid(partnerUser.Xuid, xuid, "Xuid mismatch");

                // create an XML document and then add it as  the  user  data

                XmlDocument document = new XmlDocument();
                document.LoadXml("<test>this is a test</test>");
                partnerUser.Data = document.FirstChild;
                    
                // save the partner user to flush the xml out to the database
                partnerUser.Save();

                // fetch the partner user again to verify the XML was saved

                partnerUser = xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                VerifyXuid(partnerUser.Xuid, xuid, "Xuid mismatch");
                VerifyXml(partnerUser.Data, document.FirstChild, "Data mismatch");
            }


            [TestCase, Description("Add a user id and token to a partner user"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void UserIdAndToken()
            {
                UserIdAndToken(PUIDMgr.GetNewPUID());
            }


            private void UserIdAndToken(Puid xuid)
            {
                // get the partner user for this partner, and xuid.  it won't
                // exist, but should automatically generate a new one for  us

                xonline.login.client.partner.PartnerUser partnerUser =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                // make sure the xuid we get back is for the user  we  wanted

                VerifyXuid(partnerUser.Xuid, xuid, "Xuid mismatch");

                // create an XML document and then add it as  the  user  data

                string userId = "test";
                byte[] token  = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

                partnerUser.UserId = userId;
                partnerUser.Token  = token;

                // save the partner user to flush the user id and  the  token
                partnerUser.Save();

                // fetch the partner user again to verify the data was  saved

                partnerUser = xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);
                VerifyXuid(partnerUser.Xuid, xuid, "Xuid mismatch");
                VerifyString(partnerUser.UserId, userId, "UserId mismatch");
                VerifyBytes(partnerUser.Token, token, "Token mismatch");
            }

            [TestCase, Description("Add user id and token for partner user, then add partner key"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public void UserIdAndTokenAddKey()
            {
                Puid xuid = PUIDMgr.GetNewPUID();
                UserIdAndToken(xuid);

                // get ourselves a copy of the user id and token  from  above

                xonline.login.client.partner.PartnerUser partnerUser =
                    xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);

                string userId = partnerUser.UserId;
                byte[] token = partnerUser.Token;

                // update the partner by changing its private/public key info

                Partner.Update(PARTNER_ID, ServiceKeyType.SECP_DB_PRIVATE_KEY, ServiceKeyType.SECP_DB_PUBLIC_KEY, 1);
                
                // get  user  a  second time and make sure we can still  read

                partnerUser = xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);
                VerifyString(partnerUser.UserId, userId, "UserId mismatch");
                VerifyBytes(partnerUser.Token, token, "Token mismatch");

                // now save the partner out again.  this should  encrypt  it
                // with the newly associated  private  key  for  the partner

                partnerUser.Save();

                // then read back a third time to see if we can still read it

                partnerUser = xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuid);
                VerifyString(partnerUser.UserId, userId, "UserId mismatch");
                VerifyBytes(partnerUser.Token, token, "Token mismatch");
            }

            [TestCase, Description("Bulk look of users by partner userIds"), Owner("zachz"), TestFrequency("Regression"), EnvRequirement("")]
            public static void BulkLookupByUserIds()
            {
                Puid[] xuids = new Puid[10];

                for (int i = 0; i < xuids.Length; i++) {

                    // create a new puid for our user
                    xuids[i] = PUIDMgr.GetNewPUID();

                    xonline.login.client.partner.PartnerUser partnerUser =
                        xonline.login.client.partner.PartnerUser.Get(PARTNER_ID, xuids[i]);

                    // make up a user id for this user, and then
                    // save the user back out  to  the  database

                    partnerUser.UserId = PARTNER_USER_ID_PREFIX + xuids[i].ToString();
                    partnerUser.Save();
                }

                // create an array of users.  then look them  up

                string[] userIds = new string[xuids.Length / 2];

                for (int i = 0; i < userIds.Length; i++) {
                    userIds[i] = PARTNER_USER_ID_PREFIX + xuids[i].ToString();
                }

                xonline.login.client.partner.PartnerUser[] partnerUsers =
                    xonline.login.client.partner.PartnerUser.Lookup(PARTNER_ID, userIds);

                if (partnerUsers.Length != userIds.Length) {
                    throw new Exception("Expected " + userIds.Length + " values.");
                }

                for (int i = 0; i < partnerUsers.Length; i++) {
                    VerifyXuid(partnerUsers[i].Xuid, xuids[i], "Xuid mismatch");
                    VerifyString(partnerUsers[i].UserId, userIds[i], "UserId mismatch");
                }
            }

            [TestGroupTearDown]
            public void TearDown()
            {
                TearDown(PARTNER_ID);
            }

            private void TearDown(int id)
            {
                Partner.Delete(id);
            }

            private static void VerifyXuid(Puid xuidX, Puid xuidY, string error)
            {
                if (xuidX == xuidY) return;
                throw new Exception(error);
            }

            private static void VerifyXml(XmlNode nodeX, XmlNode nodeY, string error)
            {
                if ((nodeX == null) && (nodeY == null)) return;

                if ((nodeX != null) && (nodeY != null)) {
                    if (nodeX.OuterXml.Equals(nodeY.OuterXml)) return;
                }

                throw new Exception(error);
            }

            private static void VerifyString(string sX, string sY, string error)
            {
                if (sX.Equals(sY)) return;
                throw new Exception(error);
            }

            private static void VerifyBytes(byte[] aX, byte[] aY, string error)
            {
                if ((aX == null) && (aY == null)) return;
                
                if ((aX != null) && (aY != null)) {
                    if (aX.Length == aY.Length) {
                        for (int i = 0; i < aX.Length; i++) {
                            if (aX[i] != aY[i]) throw new Exception(error);
                        }

                        return;
                    }

                    throw new Exception(error);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\config\ConfigDevTest.cs ===
using System;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Text;
using System.Threading;
using System.Xml;

using Microsoft.Win32;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.mgmt;
using xonline.common.stfutil;
using xonline.common.utilities2;

namespace ServerTestFramework.LiveService.common.config
{
    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in 
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    ///
    /// </summary>
    [TestGroup, DVT]
    public partial class ConfigDevTest : TestNode
    {

        // test process and component
        private const string   _testProcess = null;
        internal const string  _testServer = "dummy_server1";
        // private const string _testComponentCS = "ConfigDevTest";
        private const string _testComponentCS = "XblConfig";
        private const string _testComponentCPP = "ConfigTlbTest";

        // _fReady indicates if Setup() was able to configure
        // the local machine and npdb correctly for these tests
        private bool _fReady;

        private void CheckReady() 
        {
            if (false == _fReady) 
            {
                throw(new Exception("Not Ready."));
            }

            // discard all cached values to reset the cache
            Config.DiscardCachedValues();

            // get the current number of app log entries
            //_appCurrentEntry = _appLog.Entries.Count;

            // set the server
            Config.ServerSet_TestOnly_DoNotUse = _testServer;
        }



        // appDomain is the current app domain
        private AppDomain    _appDomain;
        private EventHandler _unloadHandler;
        private bool         _unloadHandlerAttached;

        private static void UnloadHandler(
            object sender,
            EventArgs e)
        {
            // disable xmgmt logging
            XomLoggingControl.Close();
        }



        // info about npdb, test data, etc.
        internal string _npdbServer;
        internal string _npdbDatabase;
        private string _npdbServerIp;
        internal string _npdbEnvironment;
        private readonly string _testData = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

        private string _testAddDatabaseData { get { return _testData + "\\npdb_config_add_database_data.sql"; } }
        private string _testDeleteDatabaseData { get { return _testData + "\\npdb_config_delete_database_data.sql"; } }
        private string _testAddDevTestData { get { return _testData + "\\npdb_config_add_devtest_data.sql"; } }
        private string _testDeleteDevTestData { get { return _testData + "\\npdb_config_delete_devtest_data.sql"; } }
        private string _testAddGameConfig1Xml { get { return _testData + "\\npdb_config_add_gameconfig_1.xml"; } }
        private string _testAddGameConfig1Sql { get { return _testData + "\\npdb_config_add_gameconfig_1.sql"; } }
        private string _testAddGameConfig2Xml { get { return _testData + "\\npdb_config_add_gameconfig_2.xml"; } }
        private string _testAddGameConfig2Sql { get { return _testData + "\\npdb_config_add_gameconfig_2.sql"; } }
        private string _testAddTitleConfig1Xml { get { return _testData + "\\npdb_config_add_titleconfig_1.xml"; } }
        private string _testAddTitleConfig1Sql { get { return _testData + "\\npdb_config_add_titleconfig_1.sql"; } }
        private string _testAddTitleConfig2Xml { get { return _testData + "\\npdb_config_add_titleconfig_2.xml"; } }
        private string _testAddTitleConfig2Sql { get { return _testData + "\\npdb_config_add_titleconfig_2.sql"; } }

        // specifies the host file and its backup
        private readonly string _hostsFile = Environment.GetEnvironmentVariable("SystemRoot") + "\\system32\\drivers\\etc\\hosts";
        private readonly string _hostsBakFile = Environment.GetEnvironmentVariable("SystemRoot") + "\\system32\\drivers\\etc\\hosts.bak";

        // specifies the npdb server/db env var and its backup value
        private const string _npdbServerEnvVarName = "XBL_CONFIG_SERVER";
        private const string _npdbDatabaseEnvVarName = "XBL_CONFIG_DATABASE";
        private string _npdbServerEnvValue;
        private string _npdbDatabaseEnvValue;

        // specifies the npdb server/db reg val and its backup value
        private const string _npdbServerRegValName = "Server";
        private const string _npdbDatabaseRegValName = "Database";
        private string _npdbServerRegValue;
        private string _npdbDatabaseRegValue;



        // specifies the common config xml file and its backup
        private string _commonConfigTestFile { get { return _testData + "\\CommonConfigTest.xml"; } }
        private static string _commonConfigXmlFile { get { return Path.Combine(Config.AssemblyDirectory, "CommonConfig.xml"); } }
        private static string _commonConfigBakFile { get { return Path.Combine(Config.AssemblyDirectory, "CommonConfig.bak"); } }



        // AppEntry represents an expected entry in the app event log
        //private class AppEntry 
        //{
        //    public readonly EventLogEntryType _EntryType;
        //    public readonly int _EventID;
        //    public readonly string _Message;
        //    public readonly bool _Optional;
        //    public bool _Found;

        //    public AppEntry(
        //        EventLogEntryType  EntryType,
        //        int                EventID,
        //        string             Message,
        //        bool               Optional)
        //    {
        //        _EntryType = EntryType;
        //        _EventID = EventID;
        //        _Message = Message;
        //        _Optional = Optional;
        //        _Found = false;
        //    }

        //    public AppEntry(
        //        EventLogEntryType  EntryType,
        //        int                EventID,
        //        string             Message)
        //    {
        //        _EntryType = EntryType;
        //        _EventID = EventID;
        //        _Message = Message;
        //        _Optional = false;
        //        _Found = false;
        //    }
        //}

        // objects necessary to read events from the app event log
        private EventLog   _appLog;
        //private int        _appCurrentEntry;
        //private int        _appEndEntry;

        // function to verify all events were found in the app event log
//        private bool LogVerifyEventList(AppEntry[] appEntries)
//        {
//            // get the end entry in the app log
//            _appEndEntry = _appLog.Entries.Count;

//            // appIndex is a counter to interate the expected entries
//            int        appIndex;
//            // appUnexpected is a list of unexpected events
//            ArrayList  appUnexpected = new ArrayList();

//            // iterate all entries in the app log looking for expected and unexpected events
//            for (int logIndex = _appCurrentEntry; logIndex < _appEndEntry; logIndex++) 
//            {
//                if ((0 != String.Compare(_testComponentCS, _appLog.Entries[logIndex].Source)) && (0 != String.Compare(_testComponentCPP, _appLog.Entries[logIndex].Source)) && (0 != String.Compare(_testComponentCC, _appLog.Entries[logIndex].Source))) 
//                {
//                    // this event is not from us
//                    continue;
//                }

//                for (appIndex = 0; appIndex < appEntries.Length; appIndex++) 
//                {
//                    if (appEntries[appIndex]._Found) 
//                    {
//                        continue;
//                    }

//                    if (_appLog.Entries[logIndex].EntryType != appEntries[appIndex]._EntryType) 
//                    {
//                        continue;
//                    }

////                    if (_appLog.Entries[logIndex].EventID != appEntries[appIndex]._EventID) 
////                    {
////                        continue;
////                    }

//                    if (-1 == _appLog.Entries[logIndex].Message.IndexOf(appEntries[appIndex]._Message)) 
//                    {
//                        continue;
//                    }

//                    // found an expected event
//                    appEntries[appIndex]._Found = true;
//                    break;
//                }

//                if (appIndex == appEntries.Length) 
//                {
//                    // this is an unexpected event, so add it to the list
//                    appUnexpected.Add(new AppEntry(_appLog.Entries[logIndex].EntryType, (int)(_appLog.Entries[logIndex].InstanceId), _appLog.Entries[logIndex].Message));
//                }
//            }

//            TextWriter  errorWriter = Console.Error;

//            // Write any remaining expected events and any found unexpected event
//            bool  fExpectedRemain = false;
//            for (appIndex = 0; appIndex < appEntries.Length; appIndex++) 
//            {
//                if ((false == appEntries[appIndex]._Found) && (false == appEntries[appIndex]._Optional)) 
//                {
//                    if (false == fExpectedRemain) 
//                    {
//                        errorWriter.WriteLine("Did not find the following expected events!");
//                    }

//                    fExpectedRemain = true;

//                    errorWriter.WriteLine("Event {Type = " + appEntries[appIndex]._EntryType + ", Id = " + appEntries[appIndex]._EventID + "}:\r\n" + appEntries[appIndex]._Message);
//                }
//            }

//            bool fUnexpectedExist = (0 != appUnexpected.Count);
//            if (fUnexpectedExist) 
//            {
//                errorWriter.WriteLine("Found the following unexpected events!");
//                foreach (AppEntry aeIterator in appUnexpected) 
//                {
//                    errorWriter.WriteLine("Event {Type = " + aeIterator._EntryType + ", Id = " + aeIterator._EventID + "}:\r\n" + aeIterator._Message);
//                }
//            }

//            _appCurrentEntry = _appEndEntry;

//            return ((false == fExpectedRemain) && (false == fUnexpectedExist));
//        }

        //private bool LogVerifyEventList(AppEntry[] appEntries1, AppEntry[] appEntries2) 
        //{
        //    // appEntries is the compiled list
        //    AppEntry[]  appEntries = new AppEntry[appEntries1.Length + appEntries2.Length];

        //    // iterate all entries into the compiled list
        //    for (int appIndex = 0; appIndex < appEntries1.Length; appIndex++) 
        //    {
        //        appEntries[appIndex] = appEntries1[appIndex];
        //    }

        //    for (int appIndex = 0; appIndex < appEntries2.Length; appIndex++) 
        //    {
        //        appEntries[appIndex + appEntries1.Length] = appEntries2[appIndex];
        //    }

        //    return LogVerifyEventList(appEntries);
        //}



        private string _npdbConnectionString 
        {
            get 
            {
                return "Data Source="+_npdbServer+";Initial Catalog="+_npdbDatabase+";Integrated Security=SSPI;Application Name=ConfigDevTest;Pooling=false";
            }
        }



        // function to split an xmgmt string into separate lines
        private static string[] SplitLines(string multiLineString) 
        {
            int      startLinePos = 0;
            int      endLinePos = 0;
            int      newLines = 0;

            // determine the number of lines
            while (true) 
            {
                endLinePos = multiLineString.IndexOf("\r\n", endLinePos);

                newLines++;

                if (-1 == endLinePos) 
                {
                    break;
                }

                endLinePos += 2;

                if (endLinePos >= multiLineString.Length) 
                {
                    break;
                }
            }

            // split the string into separate lines
            string[] singleLineStrings = new string[newLines];
            endLinePos = 0;
            newLines = 0;
            while (true) 
            {
                endLinePos = multiLineString.IndexOf("\r\n", endLinePos);
                singleLineStrings[newLines] = ( -1 != endLinePos )
                                                  ? multiLineString.Substring(startLinePos, endLinePos - startLinePos)
                                                  : multiLineString.Substring(startLinePos);

                newLines++;

                if (-1 == endLinePos) 
                {
                    break;
                }

                endLinePos += 2;
                startLinePos = endLinePos;

                if (endLinePos >= multiLineString.Length) 
                {
                    break;
                }
            }

            return singleLineStrings;
        }

        // function to split an xmgmt line into a setting - value pair
        private static string[] SplitPair(string pairString) 
        {
            string[] pairStrings = new string[2];
            int      pairPos;

            for (pairPos = 0; pairPos < pairString.Length; pairPos++)
            {
                if ((pairString[pairPos] == '}') && (pairString[pairPos + 1] == '{')) 
                {
                    break;
                }
            }

            pairStrings[0] = pairString.Substring(1, pairPos - 1);
            pairStrings[1] = pairString.Substring(pairPos + 2, pairString.Length - (pairPos + 2) - 1);

            return pairStrings;
        }

        // function to split a setting/value into its individual entries
        private static string[] ParseSettingValue(string stringSettingValue) 
        {
            int      startSettingValuePos = 0;
            int      endSettingValuePos;
            int      newSettingValues = 0;
            int      openBracket = 0;

            // determine the number of entries
            // entries are delimited by commas, but
            // a setting/value can be formatted as follows:
            //   value1,{valueA,valueB},value3
            // the entries are then:
            //   value1
            //   {valueA,valueB}
            //    value3
            // so the logic should detect the second case where we are inside a {} pair
            for (endSettingValuePos = 0; endSettingValuePos < stringSettingValue.Length; endSettingValuePos++) 
            {
                if (stringSettingValue[endSettingValuePos] == '{') 
                {
                    openBracket++;
                }
                else if (stringSettingValue[endSettingValuePos] == '}') 
                {
                    openBracket--;
                }
                else if ((0 == openBracket) && (stringSettingValue[endSettingValuePos] == ',')) 
                {
                    newSettingValues++;
                }
            }

            newSettingValues++;

            // split the setting/value into its entries
            string[] stringSettingValues = new string[newSettingValues];
            newSettingValues = 0;
            openBracket = 0;

            for (endSettingValuePos = 0; endSettingValuePos < stringSettingValue.Length; endSettingValuePos++) 
            {
                if (stringSettingValue[endSettingValuePos] == '{') 
                {
                    openBracket++;
                }
                else if (stringSettingValue[endSettingValuePos] == '}') 
                {
                    openBracket--;
                }
                else if ((0 == openBracket) && (stringSettingValue[endSettingValuePos] == ',')) 
                {
                    stringSettingValues[newSettingValues] = stringSettingValue.Substring(startSettingValuePos, endSettingValuePos - startSettingValuePos);
                    startSettingValuePos = endSettingValuePos + 1;
                    newSettingValues++;
                }
            }

            stringSettingValues[newSettingValues] = stringSettingValue.Substring(startSettingValuePos);

            return stringSettingValues;
        }



        // function to split a standard error into its individual lines
        private static string[] ParseStandardError(string standardError) 
        {
            int      startLinePos = 0;
            int      endLinePos;
            int      newLines = 0;

            // determine the number of lines
            // entries are delimited by \r\n
            for (endLinePos = 0; endLinePos < standardError.Length; endLinePos++) 
            {
                if ((standardError[endLinePos] == '\r') && (standardError[endLinePos + 1] == '\n')) 
                {
                    newLines++;
                }
            }

            if ((standardError.Length < 2) || (standardError[standardError.Length - 2] != '\r') || (standardError[standardError.Length - 1] != '\n')) 
            {
                newLines++;
            }

            // split the standard error into its individual lines
            string[] standardErrorLines = new string[newLines];
            newLines = 0;

            for (endLinePos = 0; endLinePos < standardError.Length; endLinePos++) 
            {
                if ((standardError[endLinePos] == '\r') && (standardError[endLinePos + 1] == '\n')) 
                {
                    standardErrorLines[newLines] = standardError.Substring(startLinePos, endLinePos - startLinePos);
                    startLinePos = endLinePos + 2;
                    newLines++;
                }
            }

            if ((standardError.Length < 2) || (standardError[standardError.Length - 2] != '\r') || (standardError[standardError.Length - 1] != '\n')) 
            {
                standardErrorLines[newLines] = standardError.Substring(startLinePos);
            }

            return standardErrorLines;
        }



        // the refresh interval that is used when looking for changes to NPDB
        private const int  _refreshInterval = 200;
        // the refresh interval that was set before our tests ran
        private       int  _oldRefreshInterval;
        // the number of refresh intervals we'll wait for events to fire
        private const int  _refreshIntervalFactor = 3;

        private static void SleepRefreshInterval()
        {
            // wait for several times the refresh interval
            // so we know the refresh timer has fired
            Thread.Sleep(_refreshInterval * _refreshIntervalFactor);
        }

        private static void UpdateRefreshInterval(SqlConnection cxn, int newValue)
        {
            SqlCommand sqlCommand = cxn.CreateCommand();
            sqlCommand.CommandText
                = string.Format("update t_settings set vc_value = '{0}' where vc_setting = '{1}'", newValue, Setting.config_cacheRefreshInterval);
            sqlCommand.ExecuteNonQuery();
        }



        // the min event interval that must pass before another stale config
        // event will be logged
        private const int  _minEventInterval = 100;
        // the min event interval that was set before our tests ran
        private const int  _oldMinEventInterval = 60000;
        // the number of event intervals we'll wait between to ensure that
        // enough time has passed that an event won't be fired.
        private const int  _minEventIntervalFactor = 3;

        private static void SleepEventInterval()
        {
            // wait for several times the event interval
            // so we can be sure the next stale calls should log an event
            Thread.Sleep(_minEventInterval * _minEventIntervalFactor);
        }

        private static void UpdateEventInterval(SqlConnection cxn, int newValue)
        {
            SqlCommand sqlCommand = cxn.CreateCommand();
            sqlCommand.CommandText
                = "update t_settings set vc_value = '" + newValue + "' "
                + "where vc_setting = 'config_minEventInterval'";
            sqlCommand.ExecuteNonQuery();
        }



        // xmgmt command test parameters
        private const int      _xmgmtTimeout = 5000;
        private ConfigXmgmtCmd _configXmgmtCmd;


        
        // Import the unmanaged function SetEnvironmentVariable from kernel32.dll
        [DllImport("kernel32.dll",CharSet=CharSet.Auto, SetLastError=true)]
        [return:MarshalAs(UnmanagedType.Bool)]
        public static extern bool SetEnvironmentVariable(string lpName, string lpValue);

        public bool SetEnvironmentVariableEx(string environmentVariable, string variableValue)
        {
            // Get the write permission to set the environment variable.
            EnvironmentPermission environmentPermission = new EnvironmentPermission(EnvironmentPermissionAccess.Write,environmentVariable);
            environmentPermission.Demand(); 
            return SetEnvironmentVariable(environmentVariable, variableValue);
        }


        
        //private AppEntry[] CS_AppEntries 
        //{
        //    get 
        //    {
        //        AppEntry[]  appEntries = {
        //            new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
        //            new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
        //            new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
        //            new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
        //            new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to " + _minEventInterval + " milliseconds"),
        //            new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
        //            new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
        //        };

        //        return appEntries;
        //    }
        //}

        [TestGroupSetup]
        public void Setup()
        {
            _fReady = false;
            InitializeConfiguration();
            _oldRefreshInterval = Config.GetIntSetting("config_cacheRefreshInterval");
            //VerifyLogEvents();
        }

        //private void VerifyLogEvents()
        //{


        //    // open the app event log
        //    _appLog = new EventLog("Application", _npdbServer);
        //    //_appCurrentEntry = _appLog.Entries.Count;

        //    //AppEntry[] appEntries = {
        //    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment, (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component.", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to " + _minEventInterval + " milliseconds", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName, (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified by DNS for hostname 'npdb', value: " + _npdbServerIp, (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Using default NPDB database name of 'npdb'", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Information, 1, "Attaching Config.OnControlRequest to XomControl.ControlRequestEventHandler", (false == firstRun)),
        //    //    //new AppEntry(EventLogEntryType.Error, 3, "p_config_get_interface_bucket(" + _npdbEnvironment + ",cleanser,0,100199001) did not return any results!  Check npdb.t_interface_buckets.", (false == firstRun)),
        //    //    new AppEntry(EventLogEntryType.Error, 3, "At least one error was found while setting up logging areas and targets. Please check your configuration file", (false == firstRun)),
        //    //};
        //    //Assert.IsTrue(LogVerifyEventList(appEntries));
        //}

        internal  bool InitializeConfiguration()
        {
            bool firstRun = false;
            LoadConfigurationXml();

            Environment.CurrentDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

            // Set the component name
            Config.ComponentName = _testComponentCS;

            // check if the the test data exists
            // this test data will get loaded into npdb and is used by these tests
            // so it is necessary for it to exist before proceeding
            if (false == File.Exists(_testAddDatabaseData))
            {
                throw (new Exception(_testAddDatabaseData + " is missing.  Please correct before proceeding."));
            }

            if (false == File.Exists(_testDeleteDatabaseData))
            {
                throw (new Exception(_testDeleteDatabaseData + " is missing.  Please correct before proceeding."));
            }

            if (false == File.Exists(_commonConfigTestFile))
            {
                throw (new Exception("CommonConfigTest.xml is missing.  Please correct before proceeding."));
            }

            if ((false == File.Exists(_testAddGameConfig1Xml)) || (false == File.Exists(_testAddGameConfig2Xml)) || (false == File.Exists(_testAddTitleConfig1Xml)) || (false == File.Exists(_testAddTitleConfig2Xml)))
            {
                throw (new Exception("npdb_config_add_gameconfig_1.xml, npdb_config_add_gameconfig_2.xml, npdb_config_add_titleconfig_1.xml and/or npdb_config_add_titleconfig_2.xml is missing.  Please correct before proceeding."));
            }

            if (false == File.Exists("ConfigTlbTest.exe"))
            {
                throw (new Exception("ConfigTlbTest.exe is Missing.  Please correct before proceeding."));
            }

            if (false == File.Exists("ConfigTlbTest.exe.manifest"))
            {
                throw (new Exception("ConfigTlbTest.exe.manifest is Missing.  Please correct before proceeding."));
            }

            if (false == File.Exists("osql.exe"))
            {
                throw (new Exception("osql.exe is missing.  Please correct before proceeding."));
            }



            // update the test data for this machine and this environment
            // the test data is written for no particular server and the xblob environment
            // it is updated so xblob -> current environment
            StreamReader dataStreamReader = new StreamReader(_testAddDatabaseData);
            StreamWriter dataStreamWriter = new StreamWriter(_testAddDevTestData, false);
            string dataText;

            while ((dataText = dataStreamReader.ReadLine()) != null)
            {
                dataText = dataText.Replace("'xblob'", "'" + _npdbEnvironment + "'");
                dataStreamWriter.WriteLine(dataText);
            }

            dataStreamReader.Close();
            dataStreamWriter.Close();

            dataStreamReader = new StreamReader(_testDeleteDatabaseData);
            dataStreamWriter = new StreamWriter(_testDeleteDevTestData, false);

            while ((dataText = dataStreamReader.ReadLine()) != null)
            {
                dataText = dataText.Replace("'xblob'", "'" + _npdbEnvironment + "'");
                dataStreamWriter.WriteLine(dataText);
            }

            dataStreamReader.Close();
            dataStreamWriter.Close();



            XmlDocument addGameConfigXmlDoc = new XmlDocument();
            dataStreamWriter = new StreamWriter(_testAddGameConfig1Sql, false);
            addGameConfigXmlDoc.Load(_testAddGameConfig1Xml);
            dataStreamWriter.WriteLine("insert into t_game_config select 0xFFFF0004,'" + addGameConfigXmlDoc.InnerXml + "','version1',getutcdate()");
            dataStreamWriter.Close();

            addGameConfigXmlDoc = new XmlDocument();
            dataStreamWriter = new StreamWriter(_testAddGameConfig2Sql, false);
            addGameConfigXmlDoc.Load(_testAddGameConfig2Xml);
            dataStreamWriter.WriteLine("insert into t_game_config select 0xFFFF0005,'" + addGameConfigXmlDoc.InnerXml + "','version2',getutcdate()");
            dataStreamWriter.Close();

            XmlDocument addTitleConfigXmlDoc = new XmlDocument();
            dataStreamWriter = new StreamWriter(_testAddTitleConfig1Sql, false);
            addTitleConfigXmlDoc.Load(_testAddTitleConfig1Xml);
            dataStreamWriter.WriteLine("insert into t_live_title_config select 0xFFFF0004,getutcdate(),'" + addTitleConfigXmlDoc.InnerXml + "'");
            dataStreamWriter.Close();

            addTitleConfigXmlDoc = new XmlDocument();
            dataStreamWriter = new StreamWriter(_testAddTitleConfig2Sql, false);
            addTitleConfigXmlDoc.Load(_testAddTitleConfig2Xml);
            dataStreamWriter.WriteLine("insert into t_live_title_config select 0xFFFF0005,getutcdate(),'" + addTitleConfigXmlDoc.InnerXml + "'");
            dataStreamWriter.Close();



            // resolve the ip of the npdb server
            try
            {
                IPHostEntry npdbHost = Dns.GetHostEntry(_npdbServer);
                _npdbServerIp = npdbHost.AddressList[0].ToString();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }

            // backup the hosts file
            File.Copy(_hostsFile, _hostsBakFile, true);

            // contruct a new hosts file based on the backup hosts file
            // if an npdb entry already exists in the hosts file, ignore it
            // write a new npdb entry based on the _npdbServerIp determined above
            StreamReader hostsStreamReader = new StreamReader(_hostsBakFile);
            StreamWriter hostsStreamWriter = new StreamWriter(_hostsFile, false);
            string hostsText;

            while ((hostsText = hostsStreamReader.ReadLine()) != null)
            {
                if (-1 == hostsText.ToLower().IndexOf("npdb"))
                {
                    hostsStreamWriter.WriteLine(hostsText);
                }
            }

            hostsStreamWriter.WriteLine(_npdbServerIp + " npdb");
            hostsStreamReader.Close();
            hostsStreamWriter.Close();



            // read and save the current npdb server/db env var, if any, for backup
            _npdbServerEnvValue = Environment.GetEnvironmentVariable(_npdbServerEnvVarName);
            SetEnvironmentVariableEx(_npdbServerEnvVarName, null);

            _npdbDatabaseEnvValue = Environment.GetEnvironmentVariable(_npdbDatabaseEnvVarName);
            SetEnvironmentVariableEx(_npdbDatabaseEnvVarName, null);

            // read and save the current npdb server/db reg key, if any, for backup
            RegistryKey regKey = Registry.LocalMachine.CreateSubKey("Software").CreateSubKey("Microsoft").CreateSubKey("XboxLive").CreateSubKey("CommonConfig");
            if(regKey == null)
            {
                throw new ApplicationException("Failed to open or create CommonConfig registry key.");
            }

            _npdbServerRegValue = (string)regKey.GetValue(_npdbServerRegValName);
            regKey.DeleteValue(_npdbServerRegValName, false);

            _npdbDatabaseRegValue = (string)regKey.GetValue(_npdbDatabaseRegValName);
            regKey.DeleteValue(_npdbDatabaseRegValName, false);



            // backup the current CommonConfig.xml, if any
            if (File.Exists(_commonConfigXmlFile))
            {
                File.Copy(_commonConfigXmlFile, _commonConfigBakFile, true);
                File.Delete(_commonConfigXmlFile);
            }



            Console.WriteLine("_npdbServer = " + _npdbServer);
            Console.WriteLine("_npdbServerIp = " + _npdbServerIp);
            Console.WriteLine("_testData = " + _testData);



            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                // populate the database with unit test data suitable for testing
                Console.WriteLine("sqlFile = " + _testDeleteDevTestData);
                DbUtil.ExecuteSqlFile(cxn, _testDeleteDevTestData);

                Console.WriteLine("sqlFile = " + _testAddDevTestData);
                DbUtil.ExecuteSqlFile(cxn, _testAddDevTestData);



                Config.ServerSet_TestOnly_DoNotUse = _testServer;

                // adjust intervals down for faster run time
                UpdateEventInterval(cxn, _minEventInterval);
            }



            // get the current appdomain
            if (false == _unloadHandlerAttached)
            {
                _appDomain = AppDomain.CurrentDomain;
                _unloadHandler = UnloadHandler;
                _appDomain.DomainUnload += _unloadHandler;
                _appDomain.ProcessExit += _unloadHandler;
                _unloadHandlerAttached = true;
                firstRun = true;

                // enable xmgmt logging
                XomLoggingControl.Init();
            }



            // open an xmgmt connection
            try
            {
                IPAddress[] addresses = Dns.GetHostAddresses(_npdbServer);

                XomAdminSession xomAdminSession = new XomAdminSession(addresses[0]);
                _configXmgmtCmd = new ConfigXmgmtCmd(xomAdminSession, _xmgmtTimeout);
            }
            catch (Exception)
            {
                TextWriter errorWriter = Console.Error;
                errorWriter.WriteLine("Cannot connect to the XMGMT service!");
                errorWriter.WriteLine("Verify the XMGMT service is installed and running.");
                throw;
            }


            // Register the test settings that are expected to be dynamic
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting1);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting2);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting3);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting4);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting5);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting11);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting12);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting13);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting14);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting15);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting16);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting17);
            SettingChangeFilter.RegisterDynamicSetting(TestSettings.configunittest_setting_missing);

            // we are now ready
            _fReady = true;

            return firstRun;
        }

        public void LoadConfigurationXml()
        {

            // check for ConfigDevTest.xml
            // this file specifies all the info about npdb, environment, test data, etc.
            // so it is necessary for it to exist before proceeding
            string testConfigFile = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ConfigDevTest_envconfig.xml");

            if (false == File.Exists(testConfigFile))
            {
                throw (new Exception(string.Format("\"{0}\" is missing.  Please correct before proceeding.", testConfigFile)));
            }

            // read the info out of ConfigDevTest.xml
            XmlDocument testConfigXmlDoc = new XmlDocument();
            try
            {
                testConfigXmlDoc.Load(testConfigFile);

                // specifies the npdb server name
                XmlNode npdbServerNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/devtest/npdb/@server");
                if (null != npdbServerNode)
                {
                    _npdbServer = npdbServerNode.Value;
                }

                XmlNode npdbDatabaseNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/devtest/npdb/@database");
                if (null != npdbDatabaseNode)
                {
                    _npdbDatabase = npdbDatabaseNode.Value;
                }

                // specifies the current environment
                XmlNode npdbEnvironmentNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/devtest/npdb/@environment");
                if (null != npdbEnvironmentNode)
                {
                    _npdbEnvironment = npdbEnvironmentNode.Value;
                }
            }
            catch (XmlException e)
            {
                Console.WriteLine(e.ToString());
            }

            // check that we now know the npdb server and data, current environment, and where to find the test data
            if ((null == _npdbServer) || (null == _npdbDatabase) || (null == _npdbEnvironment))
            {
                throw (new Exception("ConfigDevTest.xml is incomplete.  Please correct before proceeding."));
            }
        }

        [TestGroupTearDown]
        public void TearDown()
        {
            Config.DiscardCachedValues();

            // close the xmgmt connection
            if (null != _configXmgmtCmd) 
            {
                _configXmgmtCmd.Close();
                _configXmgmtCmd = null;
            }

            // close the app event log
            if (null != _appLog) 
            {
                _appLog.Close();
                _appLog = null;
            }



            // restore the hosts file
            StreamReader  hostsStreamReader = new StreamReader(_hostsBakFile);
            StreamWriter  hostsStreamWriter = new StreamWriter(_hostsFile, false);
            string        hostsText;

            while ((hostsText = hostsStreamReader.ReadLine()) != null) 
            {
                hostsStreamWriter.WriteLine(hostsText);
            }

            hostsStreamReader.Close();
            hostsStreamWriter.Close();

            // erase the backup hosts file
            File.Delete(_hostsBakFile);



            // restore the npdb server/db env var, if any
            if (null != _npdbServerEnvValue) 
            {
                SetEnvironmentVariableEx(_npdbServerEnvValue, _npdbServerEnvValue);
            }

            if (null != _npdbDatabaseEnvValue) 
            {
                SetEnvironmentVariableEx(_npdbDatabaseEnvValue, _npdbDatabaseEnvValue);
            }

            // restore the npdb server/db reg key, if any
            RegistryKey regKey = Registry.LocalMachine.CreateSubKey("Software").CreateSubKey("Microsoft").CreateSubKey("XboxLive").CreateSubKey("CommonConfig");
            if (null != _npdbServerRegValue) 
            {
                regKey.SetValue(_npdbServerRegValName, _npdbServerRegValue);
            }

            if (null != _npdbDatabaseRegValue) 
            {
                regKey.SetValue(_npdbDatabaseRegValName, _npdbDatabaseRegValue);
            }



            // restore the CommonConfig.xml, if any
            if (File.Exists(_commonConfigBakFile))
            {
                File.Copy(_commonConfigBakFile, _commonConfigXmlFile, true);
                File.Delete(_commonConfigBakFile);
            }



            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                // restore the original interval
                UpdateEventInterval(cxn, _oldMinEventInterval);



                // remove the unit test data from the database
                Console.WriteLine("sqlFile = " + _testDeleteDevTestData);
                DbUtil.ExecuteSqlFile(cxn, _testDeleteDevTestData);

                // delete the unit test data files
                File.Delete(_testAddDevTestData);
                File.Delete(_testDeleteDevTestData);
            }
        }

        [TestCase]
        public void AssemblyPath_Pos()
        {
            CheckReady();

            string assemblyPathConfig = Config.AssemblyPath;
            Assert.IsTrue(assemblyPathConfig.ToLower().EndsWith("configdevtest.dll"));

            string assemblyPathXmgmt = _configXmgmtCmd.AssemblyPath(null, "ConfigDevTest");
            Assert.AreEqual(assemblyPathConfig.Trim().ToLower(), assemblyPathXmgmt.Trim().ToLower());

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache assemblypath")
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void CacheRefreshInterval_Pos()
        {
            CheckReady();

            int cacheRefreshSettingConfig = Config.GetIntSetting(Setting.config_cacheRefreshInterval);
            Assert.AreEqual(60000, cacheRefreshSettingConfig);

            string cacheRefreshSettingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, Setting.config_cacheRefreshInterval);
            string[] cacheRefreshSettingXmgmtLines = SplitLines(cacheRefreshSettingXmgmtString);
            Assert.AreEqual(2, cacheRefreshSettingXmgmtLines.Length);
            Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", cacheRefreshSettingXmgmtLines[0]);
            Assert.AreEqual("{xblob,1001,dummy_server1,unknown," + Setting.config_cacheRefreshInterval + "}{60000,False,1/1/0001 12:00:00 AM,<null>}", cacheRefreshSettingXmgmtLines[1]);

            string[] cacheRefreshSettingXmgmtPair = SplitPair(cacheRefreshSettingXmgmtLines[1]);

            string[] cacheRefreshSettingXmgmtSetting = ParseSettingValue(cacheRefreshSettingXmgmtPair[0]);
            Assert.AreEqual(5, cacheRefreshSettingXmgmtSetting.Length);
            Assert.AreEqual(_npdbEnvironment, cacheRefreshSettingXmgmtSetting[0]);
            Assert.AreEqual("1001", cacheRefreshSettingXmgmtSetting[1]);
            Assert.AreEqual(_testServer, cacheRefreshSettingXmgmtSetting[2]);
            Assert.AreEqual(Component.unknown, cacheRefreshSettingXmgmtSetting[3]);
            Assert.AreEqual(Setting.config_cacheRefreshInterval, cacheRefreshSettingXmgmtSetting[4]);

            string[] cacheRefreshSettingXmgmtValue = ParseSettingValue(cacheRefreshSettingXmgmtPair[1]);
            Assert.AreEqual(4, cacheRefreshSettingXmgmtValue.Length);
            Assert.AreEqual(60000, Convert.ToUInt32(cacheRefreshSettingXmgmtValue[0]));
            Assert.AreEqual("False", cacheRefreshSettingXmgmtValue[1]);
            Assert.AreEqual("1/1/0001 12:00:00 AM", cacheRefreshSettingXmgmtValue[2]);
            Assert.AreEqual("<null>", cacheRefreshSettingXmgmtValue[3]);

            int cacheRefreshIntervalConfig = Config.CacheRefreshInterval;
            Assert.AreEqual(60000, cacheRefreshIntervalConfig);

            string cacheRefreshIntervalXmgmt = _configXmgmtCmd.CacheRefreshInterval(null, "ConfigDevTest");
            Assert.AreEqual(cacheRefreshIntervalConfig.ToString(), cacheRefreshIntervalXmgmt.Trim());

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting " + Setting.config_cacheRefreshInterval),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache cacherefreshinterval"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void Component_Pos()
        {
            CheckReady();

            string componentConfig = Config.ComponentName.Trim();
            Assert.AreEqual(Component.unknown, componentConfig);

            string componentXmgmt = _configXmgmtCmd.Component(null, "ConfigDevTest").Trim();
            Assert.AreEqual(componentConfig, componentXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache component"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void ComponentName_Pos()
        {
            CheckReady();

            string componentNameConfig = Config.ComponentName.Trim();
            Assert.AreEqual("ConfigDevTest", componentNameConfig);

            string componentNameXmgmt = _configXmgmtCmd.ComponentName(null, "ConfigDevTest").Trim();
            Assert.AreEqual(componentNameConfig, componentNameXmgmt);

            // since ConfigDevTest is not a valid component, component should be unknown
            Assert.AreEqual(Component.unknown, Config.ComponentName);

            // set the component name to something that should resolve to a real component
            Config.ComponentName = "npdb";
            Assert.AreEqual("npdb", Config.ComponentName);
            Assert.AreEqual(Component.npdb, Config.ComponentName);

            // now set the ComponentName to null, which should cause
            // it to get looked up again, reverting to ConfigDevTest
            Config.ComponentName = null;
            Assert.AreEqual("ConfigDevTest", Config.ComponentName);
            Assert.AreEqual(Component.unknown, Config.ComponentName);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache componentname"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //    new AppEntry(EventLogEntryType.Information, 1, "ComponentName is being explicitly set to " + _testComponentCS),
            //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void ReportMessageComponentId_Pos()
        {
            CheckReady();

            // set the component name to something that should resolve to a real component, but will not have a ReportMessageComponentID
            Config.ComponentName = "npdb";
            Assert.AreEqual("npdb", Config.ComponentName);
            Assert.AreEqual(Component.npdb, Config.ComponentName);

            // since npdb is not mapped, ID should be 0
            Assert.AreEqual(0, Config.ReportMessageComponentId);

            // Add a mapping from NPDB to an ID
            Config.AddReportMessageComponentIdMapping("npdb", 1000);
            try
            {
                // make sure the mapping is in place
                Assert.AreEqual(1000, Config.ReportMessageComponentId);
            }
            finally
            {
                Config.RemoveReportMessageComponentIdMapping("npdb");
            }

            // set the component name to something that should have a default mapping
            Config.ComponentName = "xbos";
            Assert.AreEqual(6, Config.ReportMessageComponentId);

            // now set the ComponentName to null, which should cause
            // it to get looked up again, reverting to ConfigDevTest
            Config.ComponentName = null;

            // ID should be 0 again
            Assert.AreEqual(0, Config.ReportMessageComponentId);

        }

        [TestCase]
        public void Environment_Pos()
        {
            CheckReady();

            string environmentConfig = Config.Environment.Trim();
            Assert.AreEqual(_npdbEnvironment.Trim(), environmentConfig);

            string environmentXmgmt = _configXmgmtCmd.Environment(null, "ConfigDevTest").Trim();
            Assert.AreEqual(environmentConfig, environmentXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void LatestChangeId_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {

                    // retrieve the latest log row and get the change id
                    sqlCommand.CommandText = "select top 1 * from t_config_log order by bi_change_id desc";
                    SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                    Assert.AreEqual(true, sqlDataReader.Read());

                    // force commonconfig to query db, get the latest change id, and start the refresh timer
                    Config.GetSetting(Setting.config_cacheRefreshInterval);

                    // query the db for the latest change id
                    Int64 latestChangeIdDB = (Int64)sqlDataReader["bi_change_id"];
                    sqlDataReader.Close();

                    // ask commonconfig for the latest change id
                    Int64 latestChangeIdConfig = Config.LatestChangeId;
                    Assert.AreEqual(latestChangeIdDB, latestChangeIdConfig);

                    // ask xmgmt for the latest change id
                    string latestChangeIdXmgmt = _configXmgmtCmd.LatestChangeId(null, "ConfigDevTest").Trim();
                    Assert.AreEqual(latestChangeIdConfig.ToString(), latestChangeIdXmgmt);

                    // insert two rows into t_protocols
                    sqlCommand.CommandText = "insert into t_protocols select ('protocol1') union all select ('protocol2')";
                    sqlCommand.ExecuteNonQuery();

                    sqlCommand.CommandText = "select top 1 * from t_config_log order by bi_change_id desc";
                    sqlDataReader = sqlCommand.ExecuteReader();
                    Assert.AreEqual(true, sqlDataReader.Read());
                    latestChangeIdDB = (Int64)sqlDataReader["bi_change_id"];
                    sqlDataReader.Close();

                    // ask commonconfig for the latest change id
                    latestChangeIdConfig = Config.LatestChangeId;
                    Assert.AreEqual(latestChangeIdDB, latestChangeIdConfig + 1);

                    // ask xmgmt for the latest change id
                    latestChangeIdXmgmt = _configXmgmtCmd.LatestChangeId(null, "ConfigDevTest").Trim();
                    Assert.AreEqual(latestChangeIdConfig.ToString(), latestChangeIdXmgmt);

                    Config.CheckForUpdates();
                    latestChangeIdConfig = Config.LatestChangeId;
                    Assert.AreEqual(latestChangeIdDB, latestChangeIdConfig);
                }
                finally 
                {
                    // delete two rows in t_protocols
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "delete t_protocols where vc_protocol='protocol1' or vc_protocol='protocol2'";
                    sqlCommand.ExecuteNonQuery();
                }
            }

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache latestchangeid"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
            //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\nPrevious Change ID: " + latestChangeIdDB + "\nNew Change ID: " + (latestChangeIdDB + 1)),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache latestchangeid"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void MainSiteId_Pos()
        {
            CheckReady();

            int mainSiteIdConfig = Config.MainSiteId;
            Assert.AreEqual(1, mainSiteIdConfig);

            string mainSiteIdXmgmt = _configXmgmtCmd.MainSiteId(null, "ConfigDevTest").Trim();
            Assert.AreEqual(mainSiteIdConfig.ToString(), mainSiteIdXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Information, 1, "NPDB is in siteid 1"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache mainsiteid"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void MinEventInterval_Pos()
        {
            CheckReady();

            TimeSpan minEventIntervalConfig = Config.MinEventInterval;
            Assert.AreEqual("100", minEventIntervalConfig.TotalMilliseconds.ToString());

            string minEventIntervalXmgmt = _configXmgmtCmd.MinEventInterval(null, "ConfigDevTest").Trim();
            Assert.AreEqual(minEventIntervalConfig.TotalMilliseconds.ToString(), minEventIntervalXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache mineventinterval")
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void NpdbConnectionString_Pos()
        {
            CheckReady();

            string _npdbConnectionStringConfig = Config.NpdbConnectionString;
            Assert.AreEqual("Data Source="
                + Config.NpdbServer
                + ";Initial Catalog=" + Config.NpdbDatabase
                + ";Integrated Security=SSPI"
                + ";Connection Timeout=" + Config.NpdbConnectionTimeout
                + ";Application Name=" + Config.ComponentName, 
                _npdbConnectionStringConfig);

            string _npdbConnectionStringXmgmt = _configXmgmtCmd.NpdbConnectionString(null, "ConfigDevTest").Trim();
            Assert.AreEqual(_npdbConnectionStringConfig, _npdbConnectionStringXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbconnectionstring")
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void NpdbConnectionString_WithSuffix_Pos()
        {
            CheckReady();

            // Test with ConfigInstance suffix
            string _npdbConnectionStringConfig = ConfigInstance.Create("chuck", "norris", ";Failover Server=Foo").NpdbConnectionString;
            Assert.AreEqual("Data Source=chuck;Initial Catalog=norris;Integrated Security=SSPI"
                + ";Connection Timeout=" + Config.NpdbConnectionTimeout
                + ";Application Name=" + Config.ComponentName
                +";Failover Server=Foo",
                _npdbConnectionStringConfig);

            // Exact same test as before, except no semicolon before the suffix
            _npdbConnectionStringConfig = ConfigInstance.Create("chuck", "norris", "Failover Server=Foo").NpdbConnectionString;
            Assert.AreEqual("Data Source=chuck;Initial Catalog=norris;Integrated Security=SSPI"
                + ";Connection Timeout=" + Config.NpdbConnectionTimeout
                + ";Application Name=" + Config.ComponentName
                + ";Failover Server=Foo",
                _npdbConnectionStringConfig);
        }

        [TestCase]
        public void NpdbServer_Pos()
        {
            CheckReady();

            // the environment variable the config class checks first
            const string envVarValue = "configdevtest_env_server_name";

            // the registry value the config class checks second
            const string regValue = "configdevtest_reg_server_name";

            // regKey is the common config registry key: HKLM\Software\Microsoft\XboxLive\CommonConfig
            RegistryKey regKey = Registry.LocalMachine.CreateSubKey("Software").CreateSubKey("Microsoft").CreateSubKey("XboxLive").CreateSubKey("CommonConfig");

            try
            {
                // set the environment variable to the test value
                SetEnvironmentVariableEx(_npdbServerEnvVarName, envVarValue);

                // set the reg key to the test value
                regKey.SetValue(_npdbServerRegValName, regValue);

                // first priority is the XBL_CONFIG_SERVER environment variable
                Config.NpdbServer = null;
                string npdbServerConfig = Config.NpdbServer;
                Assert.AreEqual(envVarValue, npdbServerConfig);

                // check that the xmgmt command agrees
                string npdbServerXmgmt = _configXmgmtCmd.NpdbServer(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbServerConfig, npdbServerXmgmt);

                // remove the environment variable
                SetEnvironmentVariableEx(_npdbServerEnvVarName, null);

                // second priority is the registry key
                Config.NpdbServer = null;
                npdbServerConfig = Config.NpdbServer;
                Assert.AreEqual(regValue, npdbServerConfig);

                // check that the xmgmt command agrees
                npdbServerXmgmt = _configXmgmtCmd.NpdbServer(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbServerConfig, npdbServerXmgmt);

                // remove the reg key
                regKey.DeleteValue(_npdbServerRegValName);

                // third priority is DNS
                Config.NpdbServer = null;
                npdbServerConfig = Config.NpdbServer;
                Assert.AreEqual(_npdbServerIp, npdbServerConfig);

                // check that the xmgmt command agrees
                npdbServerXmgmt = _configXmgmtCmd.NpdbServer(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbServerConfig, npdbServerXmgmt);

                //AppEntry[] appEntries = {
                //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified in 'XBL_CONFIG_SERVER' environment variable, value: configdevtest_env_server_name"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbserver"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified in registry at 'Software\\Microsoft\\XboxLive\\CommonConfig', value: configdevtest_reg_server_name"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbserver"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB server specified by DNS for hostname 'npdb', value: " + _npdbServerIp),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbserver"),
                //};
                //Assert.IsTrue(LogVerifyEventList(appEntries));
            }
            finally
            {
                // remove the environment variable
                SetEnvironmentVariableEx(_npdbServerEnvVarName, null);

                // remove the registry key
                regKey.DeleteValue(_npdbServerRegValName, false);

                // Reset the server
                Config.NpdbServer = null;
            }
        }

        [TestCase]
        public void NpdbDatabase_Pos()
        {
            CheckReady();

            // the environment variable the config class checks first
            string envVarValue = "configdevtest_env_database_name";

            // the registry value the config class checks second
            string regValue = "configdevtest_reg_database_name";

            // regKey is the common config registry key: HKLM\Software\Microsoft\XboxLive\CommonConfig
            RegistryKey regKey = Registry.LocalMachine.CreateSubKey("Software").CreateSubKey("Microsoft").CreateSubKey("XboxLive").CreateSubKey("CommonConfig");

            try
            {
                // set the environment variable to the test value
                SetEnvironmentVariableEx(_npdbDatabaseEnvVarName, envVarValue);

                // set the reg key to the test value
                regKey.SetValue(_npdbDatabaseRegValName, regValue);

                // drop in our test CommonConfig.xml file
                File.Copy(_commonConfigTestFile, _commonConfigXmlFile, true);

                // first priority is the XBL_CONFIG_DATABASE environment variable
                Config.NpdbDatabase = null;
                string npdbDatabaseConfig = Config.NpdbDatabase;
                Assert.AreEqual(envVarValue, npdbDatabaseConfig);

                // check that the xmgmt command agrees
                string npdbDatabaseXmgmt = _configXmgmtCmd.NpdbDatabase(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbDatabaseConfig, npdbDatabaseXmgmt);

                // remove the environment variable
                SetEnvironmentVariableEx(_npdbDatabaseEnvVarName, null);

                // second priority is the registry key
                Config.NpdbDatabase = null;
                npdbDatabaseConfig = Config.NpdbDatabase;
                Assert.AreEqual(regValue, npdbDatabaseConfig);

                // check that the xmgmt command agrees
                npdbDatabaseXmgmt = _configXmgmtCmd.NpdbDatabase(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbDatabaseConfig, npdbDatabaseXmgmt);

                // remove the reg key
                regKey.DeleteValue(_npdbDatabaseRegValName);

                // third priority is the xml file
                Config.NpdbDatabase = null;
                npdbDatabaseConfig = Config.NpdbDatabase;
                Assert.AreEqual("configdevtest_xml_database_name", npdbDatabaseConfig);

                // check that the xmgmt command agrees
                npdbDatabaseXmgmt = _configXmgmtCmd.NpdbDatabase(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbDatabaseConfig, npdbDatabaseXmgmt);

                // delete CommonConfig.xml
                File.Delete(_commonConfigXmlFile);
                if (File.Exists(_commonConfigBakFile))
                {
                    File.Copy(_commonConfigBakFile, _commonConfigXmlFile);
                }

                // finally, we should default to "npdb"
                Config.NpdbDatabase = null;
                npdbDatabaseConfig = Config.NpdbDatabase;
                Assert.AreEqual("npdb", npdbDatabaseConfig);

                // check that the xmgmt command agrees
                npdbDatabaseXmgmt = _configXmgmtCmd.NpdbDatabase(null, "ConfigDevTest").Trim();
                Assert.AreEqual(npdbDatabaseConfig, npdbDatabaseXmgmt);

                //AppEntry[] appEntries = {
                //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified in 'XBL_CONFIG_SERVER' environment variable, value: configdevtest_env_database_name"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbdatabase"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified in registry at 'Software\\Microsoft\\XboxLive\\CommonConfig', value: configdevtest_reg_database_name"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbdatabase"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified in '" + _commonConfigXmlFile + "' xml configuration file, value: configdevtest_xml_database_name"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbdatabase"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using NPDB database name specified by caller, value: \r\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Using default NPDB database name of 'npdb'"),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache npdbdatabase"),
                //};
                //Assert.IsTrue(LogVerifyEventList(appEntries));
            }
            finally
            {
                // remove the environment variable
                SetEnvironmentVariableEx(_npdbDatabaseEnvVarName, null);

                // remove the registry key
                regKey.DeleteValue(_npdbServerRegValName, false);

                // delete CommonConfig.xml
                File.Delete(_commonConfigXmlFile);

                // Reset the database
                Config.NpdbDatabase = null;
            }
        }

        [TestCase]
        public void NpdbConnectionTimeout_Pos()
        {
            CheckReady();

            int npdbConnectionTimeoutConfig = Config.NpdbConnectionTimeout;
            Assert.AreEqual(15, npdbConnectionTimeoutConfig);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void Server_Pos()
        {
            CheckReady();

            try 
            {
                Config.ServerSet_TestOnly_DoNotUse = null;

                string serverConfig = Config.Server;
                Assert.AreEqual(Environment.MachineName, serverConfig);

                string serverXmgmt = _configXmgmtCmd.Server(null, "ConfigDevTest").Trim();
                Assert.AreEqual(serverConfig, serverXmgmt);

                //AppEntry[] appEntries = {
                //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to .\n"),
                //    new AppEntry(EventLogEntryType.Information, 1, "Current server is " + Environment.MachineName),
                //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache server"),
                //};
                //Assert.IsTrue(LogVerifyEventList(appEntries));
            }
            finally 
            {
                // force reload of npdb
                Config.ServerSet_TestOnly_DoNotUse = _testServer;
            }
        }

        [TestCase]
        public void SiteId_Pos()
        {
            CheckReady();

            int siteIdConfig = Config.SiteId;
            Assert.AreEqual(1001, siteIdConfig);

            string siteIdXmgmt = _configXmgmtCmd.SiteId(null, "ConfigDevTest").Trim();
            Assert.AreEqual(siteIdConfig.ToString(), siteIdXmgmt);

            //AppEntry[] appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache siteid"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetServerListByInterface_None()
        {
            CheckReady();

            string[] serverListConfig = Config.GetServerListByInterface(Interface.None);
            Assert.AreEqual(0, serverListConfig.Length);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetServerListByInterface_PosSingleServer()
        {
            CheckReady();

            string[] serverListConfig = Config.GetServerListByInterface(Interface.npdb);
            Assert.AreEqual(1, serverListConfig.Length);
            Assert.AreEqual(_npdbServer, serverListConfig[0]);

            IInterfaceInfo npdbInfo = Config.GetInterface(serverListConfig[0], Interface.npdb);
            Assert.AreEqual(_npdbDatabase, npdbInfo.DBName);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetServerListByInterface_PosMultiServer()
        {
            CheckReady();

            string[] serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface1A);
            Assert.AreEqual(2, serverListConfig.Length);
            string[] serverListExpected = { _testServer, "dummy_server2" };
            Array.Sort(serverListExpected);
            Assert.IsTrue(string.Compare(serverListExpected[0], serverListConfig[0], true) == 0);
            Assert.IsTrue(string.Compare(serverListExpected[1], serverListConfig[1], true) == 0);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        

        // need a member variable to tell the ServerListChange handlers what event args to expect
        private ServerListChangeEventArgs _expectedServerListChangeEventArgs;
        private ServerListChangeEventArgs _acceptServerListChangeEventArgs;
        private ServerListChangeEventArgs _rejectServerListChangeEventArgs;
        private ServerListChangeEventArgs _throwServerListChangeEventArgs;

        private bool _acceptServerListChangeFired;
        private bool _rejectServerListChangeFired;
        private bool _throwServerListChangeFired;

        public void AcceptServerListChange(
            object sender, 
            ServerListChangeEventArgs e)
        {
            _acceptServerListChangeFired = true;

            string    eEnvironment = null;
            string    eInterface = Interface.None;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool      fUnexpected = false;

            if (0 != String.Compare(_expectedServerListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedServerListChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptServerListChangeEventArgs
                    = new ServerListChangeEventArgs(
                    eEnvironment,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectServerListChange(
            object sender, 
            ServerListChangeEventArgs e)
        {
            _rejectServerListChangeFired = true;

            string    eEnvironment = null;
            string eInterface = Interface.None;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool      fUnexpected = false;

            if (0 != String.Compare(_expectedServerListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedServerListChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectServerListChangeEventArgs
                    = new ServerListChangeEventArgs(
                    eEnvironment,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoServerListChange();
        }

        public void ThrowServerListChange(
            object sender, 
            ServerListChangeEventArgs e)
        {
            _throwServerListChangeFired = true;

            string    eEnvironment = null;
            string eInterface = Interface.None;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool      fUnexpected = false;

            if (0 != String.Compare(_expectedServerListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedServerListChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedServerListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwServerListChangeEventArgs
                    = new ServerListChangeEventArgs(
                    eEnvironment,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowServerListChange: Throw Exception");
        }

        [TestCase]
        public void GetServerListByInterface_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            ServerListChangeEventHandler acceptHandler 
                = AcceptServerListChange;
            bool acceptHandlerAttached = false;

            ServerListChangeEventHandler rejectHandler 
                = RejectServerListChange;
            bool rejectHandlerAttached = false;

            ServerListChangeEventHandler throwHandler
                = ThrowServerListChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm that the ServerList cache is indeed empty
                    string serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    string[] serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(4, serverListsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);

                    // build our expected server lists
                    string[] servers_5A_5B = new string[2];
                    servers_5A_5B[0] = "DUMMY_SERVER5A";
                    servers_5A_5B[1] = "DUMMY_SERVER5B";

                    string[] servers_5A = new string[1];
                    servers_5A[0] = "DUMMY_SERVER5A";

                    // read an empty server list to trigger cache creation
                    Config.GetServerListByInterface(Interface.None);

                    // now there should be 1 ServerList in the cache
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    string serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, Interface.None);
                    string[] serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    string[] serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    string[] serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(Interface.None, serverListXmgmtSetting[1]);

                    string[] serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual("{}", serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    Assert.AreEqual("Error: No server list cache line found matching key {" + _npdbEnvironment + "," + TestInterfaces.dummy_interface5 + "}\r\n", serverListXmgmtString);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, null);
                    Assert.IsTrue(serverListXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, "");
                    Assert.IsTrue(serverListXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    // register a ServerListChange handler, this one accepts changes
                    Config.ServerListChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptServerListChangeFired to false, so we can confirm the handler is called
                    _acceptServerListChangeFired = false;

                    // set dummy_server5B to offline
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'offline' "
                        + "where vc_server ='DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the server list change handler did NOT fire
                    // dummy_server5B should NOT be in any cached server list
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptServerListChangeFired);

                    // there should still be 1 ServerList in the cache
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, Interface.None);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(Interface.None, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual("{}", serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // now read the server list for dummy_interface5
                    // which will load server list information into the cache
                    string[] serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(6, serverListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[5]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // save our expectations for the handler to check
                    _expectedServerListChangeEventArgs 
                        = new ServerListChangeEventArgs(
                        Config.Environment,
                        TestInterfaces.dummy_interface5,
                        servers_5A,
                        servers_5A_5B);
                    _acceptServerListChangeFired = false;

                    // set dummy_server5B back to online
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'online' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptServerListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected ServerListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptServerListChangeEventArgs.Environment 
                            + "," + _acceptServerListChangeEventArgs.Interface
                            + "," + CollectionUtil.ToString(_acceptServerListChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_acceptServerListChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _acceptServerListChangeEventArgs);
                    }

                    // check that the server list change handler fired
                    Assert.AreEqual(true, _acceptServerListChangeFired);

                    // read the list for dummy_interface5
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(6, serverListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[5]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // register a second ServersListChange handler, this one rejects changes
                    Config.ServerListChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedServerListChangeEventArgs 
                        = new ServerListChangeEventArgs(
                        Config.Environment,
                        TestInterfaces.dummy_interface5,
                        servers_5A_5B,
                        servers_5A);
                    _acceptServerListChangeFired = false;
                    _rejectServerListChangeFired = false;

                    // set dummy_server5B back to offline
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'offline' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptServerListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected ServerListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptServerListChangeEventArgs.Environment 
                            + "," + _acceptServerListChangeEventArgs.Interface
                            + "," + CollectionUtil.ToString(_acceptServerListChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_acceptServerListChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _acceptServerListChangeEventArgs);
                    }

                    if (null != _rejectServerListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected ServerListChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectServerListChangeEventArgs.Environment 
                            + "," + _rejectServerListChangeEventArgs.Interface
                            + "," + CollectionUtil.ToString(_rejectServerListChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_rejectServerListChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _rejectServerListChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptServerListChangeFired);
                    Assert.AreEqual(true, _rejectServerListChangeFired);

                    // read the server list for dummy_interface5, 
                    // confirm it has NOT changed,
                    // since reject handler rejected the change
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(6, serverListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,None}{{},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);
                    Assert.IsTrue(serverListsXmgmtLines[5].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},True,"));
                    Assert.IsTrue(serverListsXmgmtLines[5].EndsWith(",{DUMMY_SERVER5A}}"));

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.IsTrue(serverListXmgmtLines[1].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},True,"));
                    Assert.IsTrue(serverListXmgmtLines[1].EndsWith(",{DUMMY_SERVER5A}}"));

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("True", serverListXmgmtValue[1]);

                    DateTime lastEventTime = DateTime.Parse(serverListXmgmtValue[2]);
                    TimeSpan ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(servers_5A), serverListXmgmtValue[3]);

                    // read the list again, to read the stale value a second time
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // wait past the _minEventInterval to pass and read the list again.
                    // this one should trigger an event
                    SleepEventInterval();
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // now change the minEventInterval setting to zero, 
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read the stale list twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // unregister both handlers
                    Config.ServerListChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.ServerListChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get the list again to read it into the cache
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // set dummy_server5B back to online
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'online' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the list, and confirm that it has NOT changed,
                    // since no handler was registered
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.IsTrue(serverListsXmgmtLines[4].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(serverListsXmgmtLines[4].EndsWith(",{DUMMY_SERVER5A,DUMMY_SERVER5B}}"));

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.IsTrue(serverListXmgmtLines[1].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(serverListXmgmtLines[1].EndsWith(",{DUMMY_SERVER5A,DUMMY_SERVER5B}}"));

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("True", serverListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(serverListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(servers_5A_5B), serverListXmgmtValue[3]);

                    // set dummy_server5B back to offline
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'offline' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the list, and confirm that it has NOT changed,
                    // since config reverted
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.ServerListChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedServerListChangeEventArgs 
                        = new ServerListChangeEventArgs(
                        Config.Environment,
                        TestInterfaces.dummy_interface5,
                        servers_5A,
                        servers_5A_5B);
                    _throwServerListChangeFired = false;

                    // get the list again to read it into the cache
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // set dummy_server5B back to online
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        +"set vc_server_state = 'online' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwServerListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected ServerListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _throwServerListChangeEventArgs.Environment 
                            + "," + _throwServerListChangeEventArgs.Interface
                            + "," + CollectionUtil.ToString(_throwServerListChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_throwServerListChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _throwServerListChangeEventArgs);
                    }

                    // check that the server list change handler fired
                    Assert.AreEqual(true, _throwServerListChangeFired);

                    // get the list, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.IsTrue(serverListsXmgmtLines[4].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(serverListsXmgmtLines[4].EndsWith(",{DUMMY_SERVER5A,DUMMY_SERVER5B}}"));

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.IsTrue(serverListXmgmtLines[1].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(serverListXmgmtLines[1].EndsWith(",{DUMMY_SERVER5A,DUMMY_SERVER5B}}"));

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("True", serverListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(serverListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(servers_5A_5B), serverListXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    _expectedServerListChangeEventArgs 
                        = new ServerListChangeEventArgs(
                        Config.Environment,
                        TestInterfaces.dummy_interface5,
                        servers_5A_5B,
                        servers_5A);
                    _throwServerListChangeFired = false;

                    // get the list again to read it into the cache
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},False,1/1/0001 12:00:00 AM,<null>}", serverListsXmgmtLines[4]);

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},False,1/1/0001 12:00:00 AM,<null>}", serverListXmgmtLines[1]);

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("False", serverListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", serverListXmgmtValue[2]);
                    Assert.AreEqual("<null>", serverListXmgmtValue[3]);

                    // set dummy_server5B back to offline
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        +"set vc_server_state = 'offline' "
                        + "where vc_server = 'DUMMY_SERVER5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();

                    // get the list, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // check that the server list change handler did NOT fire
                    Assert.AreEqual(false, _throwServerListChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwServerListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected ServerListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _throwServerListChangeEventArgs.Environment 
                            + "," + _throwServerListChangeEventArgs.Interface
                            + "," + CollectionUtil.ToString(_throwServerListChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_throwServerListChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _throwServerListChangeEventArgs);
                    }

                    // check that the server list change handler fired
                    //Assert.AreEqual(true, _throwServerListChangeFired);

                    // get the list, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    serverListConfig = Config.GetServerListByInterface(TestInterfaces.dummy_interface5);
                    Assert.IsTrue(CollectionUtil.Equals(serverListConfig, servers_5A_5B));

                    // make sure the cache is in the expected state
                    serverListsXmgmt = _configXmgmtCmd.ServerLists(_testProcess, _testComponentCS);
                    serverListsXmgmtLines = SplitLines(serverListsXmgmt);
                    Assert.AreEqual(5, serverListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the server list cache", serverListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", serverListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListsXmgmtLines[2]);
                    Assert.AreEqual("", serverListsXmgmtLines[3]);
                    Assert.IsTrue(serverListsXmgmtLines[4].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},True,"));
                    Assert.IsTrue(serverListsXmgmtLines[4].EndsWith(",{DUMMY_SERVER5A}}"));

                    serverListXmgmtString = _configXmgmtCmd.ServerList(_testProcess, _testComponentCS, TestInterfaces.dummy_interface5);
                    serverListXmgmtLines = SplitLines(serverListXmgmtString);
                    Assert.AreEqual(2, serverListXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface}{value,isStale,lastEventTime,newValue}", serverListXmgmtLines[0]);
                    Assert.IsTrue(serverListXmgmtLines[1].StartsWith("{xblob,dummy_interface5}{{DUMMY_SERVER5A,DUMMY_SERVER5B},True,"));
                    Assert.IsTrue(serverListXmgmtLines[1].EndsWith(",{DUMMY_SERVER5A}}"));

                    serverListXmgmtPair = SplitPair(serverListXmgmtLines[1]);

                    serverListXmgmtSetting = ParseSettingValue(serverListXmgmtPair[0]);
                    Assert.AreEqual(2, serverListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, serverListXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, serverListXmgmtSetting[1]);

                    serverListXmgmtValue = ParseSettingValue(serverListXmgmtPair[1]);
                    Assert.AreEqual(4, serverListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(serverListConfig), serverListXmgmtValue[0]);
                    Assert.AreEqual("True", serverListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(serverListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(servers_5A), serverListXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.ServerListChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist None"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist None"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A server list change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A server list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest server list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache serverlist dummy_interface5"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.ServerListChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.ServerListChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.ServerListChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set dummy_server5B back to online
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_servers "
                        + "set vc_server_state = 'online' "
                        + "where vc_server = 'dummy_server5B' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void GetInterface_NegInvalidParam()
        {
            CheckReady();

            try
            {
                Config.GetInterface(null, TestInterfaces.dummy_interface1A);
                throw new Exception("Config.GetInterface() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterface_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetInterface("not_a_valid_server", TestInterfaces.dummy_interface1A);
                throw new Exception("Config.GetInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Warning, 4, "System.ApplicationException: Interface '" + TestInterfaces.dummy_interface1A + "' not present on server 'not_a_valid_server'"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetInterface(_testServer, Interface.xcbk);
                throw new Exception("Config.GetInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Warning, 4, "System.ApplicationException: Interface '" + Interface.xcbk + "' not present on server '" + _testServer + "'"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_InterfaceInfo_SqlConnectionString()
        {
            CheckReady();

            // a sql connection string will be built if:
            //   protocol = sql
            //   ip address is non-null
            //   dbname is non-null
            //
            // this test:
            //   verifies a valid sqlconnection string is generated when protocol = sql, ip and dbname are non-null
            //   verifies a null sqlconnection string is generated when protocol = sql, ip is non-null, and dbname is null
            //
            // it is not possible to specify an interface where protocol = sql, dbname is non-null, and ip is null
            // as there is a restriction on t_server_nics where ip cannot be null
            //
            // it is not possible to specify an interface where protocol is null
            // as there is a restriction on t_interfaces where protocol cannot be null
            //
            // this test does not check when protocol is non-null but not sql
            // since that case is covered by other GetInterface tests below

            // 3A has uses protocol = sql, ip and dbname are non-null, so this will build a valid sqlconnectionstring
            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface3A);
            Assert.AreEqual(TestInterfaces.dummy_interface3A, interfaceInfo.Interface);
            Assert.AreEqual("sql", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1, interfaceInfo.Port);
            Assert.AreEqual(5, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface3A_vsite", interfaceInfo.VSite);
            Assert.AreEqual(101, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface3A_vdir", interfaceInfo.VDir);
            Assert.AreEqual("dummy_interface3A_dbname", interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface3A_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(15000, interfaceInfo.Timeout);
            Assert.AreEqual(101, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_101", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface3A_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface3A_info2", interfaceInfo.Info2);
            Assert.AreEqual("sql://1.1.1.1:1/", interfaceInfo.Url.ToString());
            Assert.AreEqual("Data Source=1.1.1.1;"
                + "Initial Catalog=dummy_interface3A_dbname;"
                + "Integrated Security=SSPI;"
                + "Connect Timeout=15;"
                + "Application Name=" + _testComponentCS,
                interfaceInfo.SqlConnectionString);

            // 3B has uses protocol = sql, ip is non-null, but dbname is null, so this will build null sqlconnectionstring
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface3B);
            Assert.AreEqual(TestInterfaces.dummy_interface3B, interfaceInfo.Interface);
            Assert.AreEqual("sql", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1, interfaceInfo.Port);
            Assert.AreEqual(5, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface3B_vsite", interfaceInfo.VSite);
            Assert.AreEqual(101, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface3B_vdir", interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface3B_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(15000, interfaceInfo.Timeout);
            Assert.AreEqual(101, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_101", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface3B_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface3B_info2", interfaceInfo.Info2);
            Assert.AreEqual("sql://1.1.1.1:1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface3B + " does not have a database name specified."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetInterface_InterfaceInfo_ToString()
        {
            CheckReady();

            IInterfaceInfo interfaceInfo = new InterfaceInfo();
            string interfaceInfoString = interfaceInfo.ToString();

            Assert.AreEqual(interfaceInfoString,
                "{None,"       // interface
                + "<null>,"    // protocol
                + "<null>,"    // ip address
                + "<null>,"    // net mask
                + "<null>,"    // default gateway
                + "0,"         // port
                + "0,"         // port end
                + "<null>,"    // vsite
                + "0,"         // vsite id
                + "<null>,"    // vdir
                + "<null>,"    // dbname
                + "<null>,"    // sharename
                + "0,"         // timeout
                + "0,"         // service id
                + "<null>,"    // service name
                + "<null>,"    // mac
                + "<null>,"    // sg ip address begin
                + "<null>,"    // sg ip address end
                + "0,"         // sg port begin
                + "0,"         // sg port end
                + "False,"     // need sg info
                + "<null>,"    // wiretap ip address
                + "False,"     // nic disabled
                + "<null>,"    // username
                + "<null>,"    // password
                + "<null>,"    // info1
                + "<null>,"    // info2
                + "<null>}");  // server name

            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1A);
            interfaceInfoString = interfaceInfo.ToString();

            Assert.AreEqual(interfaceInfoString,
                "{dummy_interface1A,"                    // interface
                + "http,"                                // protocol
                + "1.1.1.1,"                             // ip address
                + "255.255.255.0,"                       // net mask
                + "1.0.0.1,"                             // default gateway
                + "1,"                                   // port
                + "5,"                                   // port end
                + "dummy_interface1A_vsite,"             // vsite
                + "101,"                                 // vsite id
                + "dummy_interface1A_vdir,"              // vdir
                + "dummy_interface1A_dbname,"            // dbname
                + "dummy_interface1A_sharename,"         // sharename
                + "5,"                                   // timeout
                + "101,"                                 // service id
                + "SERVICE_101,"                         // service name
                + "01:01:01:01:00:00,"                   // mac
                + "10.0.0.1,"                            // sg ip address begin
                + "10.0.0.255,"                          // sg ip address end
                + "101,"                                 // sg port begin
                + "199,"                                 // sg port end
                + "True,"                                // need sg info
                + "10.0.10.1,"                           // wiretap ip address
                + "True,"                                // nic disabled
                + "dummy_username,"                      // username
                + "dummy_password,"                      // password
                + "dummy_interface1A_info1,"             // info1
                + "dummy_interface1A_info2,"             // info2
                + "DUMMY_SERVER1}");                      // server name

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }


        [TestCase]
        public void AddInterface_positive()
        {
            //Interface already exists
            //TestInterfaces.dummy_interface1A;

            //Server already exists
            //_testServer

            //Environment exists
            //_npdbEnvironment

            //Add interface 
            Console.WriteLine(String.Format("{0} , {1} , {2} ", _npdbEnvironment, _testServer, TestInterfaces.dummy_interface1A));

            //Call GetInterface to validate

        }

        [TestCase]
        public void GetInterface_PosNotNull()
        {
            CheckReady();

            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1A);
            Assert.AreEqual(TestInterfaces.dummy_interface1A, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1, interfaceInfo.Port);
            Assert.AreEqual(5, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1A_vsite", interfaceInfo.VSite);
            Assert.AreEqual(101, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface1A_vdir", interfaceInfo.VDir);
            Assert.AreEqual("dummy_interface1A_dbname", interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface1A_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(5, interfaceInfo.Timeout);
            Assert.AreEqual(101, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_101", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface1A_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface1A_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1A + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_PosNull()
        {
            CheckReady();

            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2A);
            Assert.AreEqual(TestInterfaces.dummy_interface2A, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(0, interfaceInfo.Port);
            Assert.AreEqual(0, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual(null, interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual(null, interfaceInfo.Sharename);
            Assert.AreEqual(0, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual(null, interfaceInfo.Info1);
            Assert.AreEqual(null, interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2A + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_EnvironmentTypeOverride_Pos()
        {
            CheckReady();

            // 1B has a non-null set of override values, so we should get the overrides
            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1B);
            Assert.AreEqual(TestInterfaces.dummy_interface1B, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1001, interfaceInfo.Port);
            Assert.AreEqual(1010, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1B_vsite", interfaceInfo.VSite);
            Assert.AreEqual(102, interfaceInfo.VSiteId);
            Assert.AreEqual("environment_type_override_1B_vdir", interfaceInfo.VDir);
            Assert.AreEqual("environment_type_override_1B_dbname", interfaceInfo.DBName);
            Assert.AreEqual("environment_type_override_1B_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1005, interfaceInfo.Timeout);
            Assert.AreEqual(102, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_102", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("environment_type_override_1B_info1", interfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_1B_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1001/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 1C has a null set of overrides, so we should get the original values
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1C);
            Assert.AreEqual(TestInterfaces.dummy_interface1C, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(21, interfaceInfo.Port);
            Assert.AreEqual(25, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1C_vsite", interfaceInfo.VSite);
            Assert.AreEqual(103, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface1C_vdir", interfaceInfo.VDir);
            Assert.AreEqual("dummy_interface1C_dbname", interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface1C_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(20, interfaceInfo.Timeout);
            Assert.AreEqual(103, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_103", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface1C_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface1C_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:21/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2B has a non-null set of override values, so we should get the overrides
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2B);
            Assert.AreEqual(TestInterfaces.dummy_interface2B, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1031, interfaceInfo.Port);
            Assert.AreEqual(1040, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual("environment_type_override_2B_vdir", interfaceInfo.VDir);
            Assert.AreEqual("environment_type_override_2B_dbname", interfaceInfo.DBName);
            Assert.AreEqual("environment_type_override_2B_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1020, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual("environment_type_override_2B_info1", interfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_2B_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1031/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2C has a null set of overrides, so we should get the original values, which were null
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2C);
            Assert.AreEqual(TestInterfaces.dummy_interface2C, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(0, interfaceInfo.Port);
            Assert.AreEqual(0, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual(null, interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual(null, interfaceInfo.Sharename);
            Assert.AreEqual(0, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual(null, interfaceInfo.Info1);
            Assert.AreEqual(null, interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1B + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1C + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2B + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2C + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_EnvironmentOverride_Pos()
        {
            CheckReady();

            // 1D has a non-null set of override values at the environment level, so we should get the overrides
            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1D);
            Assert.AreEqual(TestInterfaces.dummy_interface1D, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1101, interfaceInfo.Port);
            Assert.AreEqual(1110, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1D_vsite", interfaceInfo.VSite);
            Assert.AreEqual(104, interfaceInfo.VSiteId);
            Assert.AreEqual("environment_override_1D_vdir", interfaceInfo.VDir);
            Assert.AreEqual("environment_override_1D_dbname", interfaceInfo.DBName);
            Assert.AreEqual("environment_override_1D_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1105, interfaceInfo.Timeout);
            Assert.AreEqual(104, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_104", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("environment_override_1D_info1", interfaceInfo.Info1);
            Assert.AreEqual("environment_override_1D_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1101/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 1E has a null set of overrides at both the environment type and environment level, so we should get the original values
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1E);
            Assert.AreEqual(TestInterfaces.dummy_interface1E, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(41, interfaceInfo.Port);
            Assert.AreEqual(45, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1E_vsite", interfaceInfo.VSite);
            Assert.AreEqual(105, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface1E_vdir", interfaceInfo.VDir);
            Assert.AreEqual("dummy_interface1E_dbname", interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface1E_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(30, interfaceInfo.Timeout);
            Assert.AreEqual(105, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_105", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface1E_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface1E_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:41/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2D has a non-null set of override values at the environment level, so we should get the overrides
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2D);
            Assert.AreEqual(TestInterfaces.dummy_interface2D, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1121, interfaceInfo.Port);
            Assert.AreEqual(1130, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual("environment_override_2D_vdir", interfaceInfo.VDir);
            Assert.AreEqual("environment_override_2D_dbname", interfaceInfo.DBName);
            Assert.AreEqual("environment_override_2D_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1115, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual("environment_override_2D_info1", interfaceInfo.Info1);
            Assert.AreEqual("environment_override_2D_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1121/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2E has a null set of overrides at both the environment and environment type level, so we should get the original values, which were null
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2E);
            Assert.AreEqual(TestInterfaces.dummy_interface2E, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(0, interfaceInfo.Port);
            Assert.AreEqual(0, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual(null, interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual(null, interfaceInfo.Sharename);
            Assert.AreEqual(0, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual(null, interfaceInfo.Info1);
            Assert.AreEqual(null, interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1D + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1E + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2D + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2E + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetInterface_ServerOverride_Pos()
        {
            CheckReady();

            // 1F has a non-null set of override values at the server level, so we should get the overrides
            IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1F);
            Assert.AreEqual(TestInterfaces.dummy_interface1F, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1301, interfaceInfo.Port);
            Assert.AreEqual(1310, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1F_vsite", interfaceInfo.VSite);
            Assert.AreEqual(106, interfaceInfo.VSiteId);
            Assert.AreEqual("server_override_1F_vdir", interfaceInfo.VDir);
            Assert.AreEqual("server_override_1F_dbname", interfaceInfo.DBName);
            Assert.AreEqual("server_override_1F_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1205, interfaceInfo.Timeout);
            Assert.AreEqual(106, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_106", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("server_override_1F_info1", interfaceInfo.Info1);
            Assert.AreEqual("server_override_1F_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1301/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 1G has a null set of overrides at the environment type, environment, and server level, so we should get the original values
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1G);
            Assert.AreEqual(TestInterfaces.dummy_interface1G, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(61, interfaceInfo.Port);
            Assert.AreEqual(65, interfaceInfo.PortEnd);
            Assert.AreEqual("dummy_interface1G_vsite", interfaceInfo.VSite);
            Assert.AreEqual(107, interfaceInfo.VSiteId);
            Assert.AreEqual("dummy_interface1G_vdir", interfaceInfo.VDir);
            Assert.AreEqual("dummy_interface1G_dbname", interfaceInfo.DBName);
            Assert.AreEqual("dummy_interface1G_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(40, interfaceInfo.Timeout);
            Assert.AreEqual(107, interfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_107", interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(true, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual("dummy_username", interfaceInfo.Username);
            Assert.AreEqual("dummy_password", interfaceInfo.Password);
            Assert.AreEqual("dummy_interface1G_info1", interfaceInfo.Info1);
            Assert.AreEqual("dummy_interface1G_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:61/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2F has a non-null set of override values at the server level, so we should get the overrides
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2F);
            Assert.AreEqual(TestInterfaces.dummy_interface2F, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(1311, interfaceInfo.Port);
            Assert.AreEqual(1320, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual("server_override_2F_vdir", interfaceInfo.VDir);
            Assert.AreEqual("server_override_2F_dbname", interfaceInfo.DBName);
            Assert.AreEqual("server_override_2F_sharename", interfaceInfo.Sharename);
            Assert.AreEqual(1210, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual("server_override_2F_info1", interfaceInfo.Info1);
            Assert.AreEqual("server_override_2F_info2", interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1:1311/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            // 2G has a null set of overrides at the environment type, environment, and server level, so we should get the original values, which were null
            interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface2G);
            Assert.AreEqual(TestInterfaces.dummy_interface2G, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.1.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01010101, interfaceInfo.IPAddressDword);
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMask.ToString());
            Assert.AreEqual("255.255.255.0", interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0xFFFFFF00, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGateway.ToString());
            Assert.AreEqual("1.0.0.1", interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0x01000001, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(0, interfaceInfo.Port);
            Assert.AreEqual(0, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual(null, interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual(null, interfaceInfo.Sharename);
            Assert.AreEqual(0, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual("01:01:01:01:00:00", interfaceInfo.Mac);
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBegin.ToString());
            Assert.AreEqual("10.0.0.1", interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0x0A000001, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEnd.ToString());
            Assert.AreEqual("10.0.0.255", interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0x0A0000FF, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(101, interfaceInfo.SgPortBegin);
            Assert.AreEqual(199, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddress.ToString());
            Assert.AreEqual("10.0.10.1", interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0x0A000A01, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(true, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual(null, interfaceInfo.Info1);
            Assert.AreEqual(null, interfaceInfo.Info2);
            Assert.AreEqual("http://1.1.1.1/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1F + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface1G + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2F + " does not have a Protocol of 'sql'."),
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface2G + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        // need a member variable to tell the InterfaceChange handlers what event args to expect
        private InterfaceChangeEventArgs _expectedInterfaceChangeEventArgs;
        private InterfaceChangeEventArgs _acceptInterfaceChangeEventArgs;
        private InterfaceChangeEventArgs _rejectInterfaceChangeEventArgs;
        private InterfaceChangeEventArgs _throwInterfaceChangeEventArgs;

        private bool _acceptInterfaceChangeFired;
        private bool _rejectInterfaceChangeFired;
        private bool _throwInterfaceChangeFired;

        public void AcceptInterfaceChange(
            object sender, 
            InterfaceChangeEventArgs e)
        {
            _acceptInterfaceChangeFired = true;

            string          eEnvironment = null;
            string          eServer = null;
            string       eInterface = Interface.None;
            IInterfaceInfo  eValueOld = null;
            IInterfaceInfo  eValueNew = null;
            bool            fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptInterfaceChangeEventArgs
                    = new InterfaceChangeEventArgs(
                    eEnvironment,
                    eServer,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectInterfaceChange(
            object sender, 
            InterfaceChangeEventArgs e)
        {
            _rejectInterfaceChangeFired = true;

            string          eEnvironment = null;
            string          eServer = null;
            string       eInterface = Interface.None;
            IInterfaceInfo  eValueOld = null;
            IInterfaceInfo  eValueNew = null;
            bool            fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectInterfaceChangeEventArgs
                    = new InterfaceChangeEventArgs(
                    eEnvironment,
                    eServer,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoInterfaceChange();
        }

        public void ThrowInterfaceChange(
            object sender, 
            InterfaceChangeEventArgs e)
        {
            _throwInterfaceChangeFired = true;

            string          eEnvironment = null;
            string          eServer = null;
            string       eInterface = Interface.None;
            IInterfaceInfo  eValueOld = null;
            IInterfaceInfo  eValueNew = null;
            bool            fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwInterfaceChangeEventArgs
                    = new InterfaceChangeEventArgs(
                    eEnvironment,
                    eServer,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowInterfaceChange: Throw exception");
        }

        [TestCase]
        public void GetInterface_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            InterfaceChangeEventHandler acceptHandler 
                = AcceptInterfaceChange;
            bool acceptHandlerAttached = false;

            InterfaceChangeEventHandler rejectHandler 
                = RejectInterfaceChange;
            bool rejectHandlerAttached = false;

            InterfaceChangeEventHandler throwHandler
                = ThrowInterfaceChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm that the Interface cache is indeed empty
                    string interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    string[] interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(4, interfacesXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);

                    // build our expected interface info objects
                    InterfaceInfo interfaceInfo_5_Old = new InterfaceInfo();
                    interfaceInfo_5_Old.Interface = TestInterfaces.dummy_interface5;
                    interfaceInfo_5_Old.Protocol = "http";
                    interfaceInfo_5_Old.IPAddress = IPAddress.Parse("1.1.1.5");
                    interfaceInfo_5_Old.IPNetMask = IPAddress.Parse("255.255.255.0");
                    interfaceInfo_5_Old.IPDefaultGateway = IPAddress.Parse("1.0.0.1");
                    interfaceInfo_5_Old.Port = 71;
                    interfaceInfo_5_Old.PortEnd = 75;
                    interfaceInfo_5_Old.VSite = "dummy_interface5_vsite";
                    interfaceInfo_5_Old.VSiteId = 108;
                    interfaceInfo_5_Old.VDir = "dummy_interface5_vdir";
                    interfaceInfo_5_Old.DBName = "dummy_interface5_dbname";
                    interfaceInfo_5_Old.Sharename = "dummy_interface5_sharename";
                    interfaceInfo_5_Old.Timeout = 45;
                    interfaceInfo_5_Old.ServiceId = 108;
                    interfaceInfo_5_Old.ServiceName = "SERVICE_108";
                    interfaceInfo_5_Old.Mac= "01:01:01:01:00:00";
                    interfaceInfo_5_Old.SgIpAddressBegin= IPAddress.Parse("10.0.0.1");
                    interfaceInfo_5_Old.SgIpAddressEnd = IPAddress.Parse("10.0.0.255");
                    interfaceInfo_5_Old.SgPortBegin = 101;
                    interfaceInfo_5_Old.SgPortEnd = 199;
                    interfaceInfo_5_Old.NeedSGInfo = true;
                    interfaceInfo_5_Old.WiretapIpAddress= IPAddress.Parse("10.0.10.1");
                    interfaceInfo_5_Old.NicDisabled = true;
                    interfaceInfo_5_Old.Username = "dummy_username";
                    interfaceInfo_5_Old.Password = "dummy_password";
                    interfaceInfo_5_Old.Info1 = "dummy_interface5_info1";
                    interfaceInfo_5_Old.Info2 = "dummy_interface5_info2";
                    interfaceInfo_5_Old.ServerName = "DUMMY_SERVER5A";

                    InterfaceInfo interfaceInfo_5_New = new InterfaceInfo();
                    interfaceInfo_5_New.Interface = TestInterfaces.dummy_interface5;
                    interfaceInfo_5_New.Protocol = "http";
                    interfaceInfo_5_New.IPAddress = IPAddress.Parse("1.1.1.5");
                    interfaceInfo_5_New.IPNetMask = IPAddress.Parse("255.255.255.0");
                    interfaceInfo_5_New.IPDefaultGateway = IPAddress.Parse("1.0.0.1");
                    interfaceInfo_5_New.Port = 71;
                    interfaceInfo_5_New.PortEnd = 75;
                    interfaceInfo_5_New.VSite = "dummy_interface5_vsite";
                    interfaceInfo_5_New.VSiteId = 108;
                    interfaceInfo_5_New.VDir = "dummy_interface5_vdir";
                    interfaceInfo_5_New.DBName = "dummy_interface5_dbname";
                    interfaceInfo_5_New.Sharename = "dummy_interface5_sharename";
                    interfaceInfo_5_New.Timeout = 45;
                    interfaceInfo_5_New.ServiceId = 108;
                    interfaceInfo_5_New.ServiceName = "SERVICE_108";
                    interfaceInfo_5_New.Mac= "01:01:01:01:00:00";
                    interfaceInfo_5_New.SgIpAddressBegin= IPAddress.Parse("10.0.0.1");
                    interfaceInfo_5_New.SgIpAddressEnd = IPAddress.Parse("10.0.0.255");
                    interfaceInfo_5_New.SgPortBegin = 101;
                    interfaceInfo_5_New.SgPortEnd = 199;
                    interfaceInfo_5_New.NeedSGInfo = true;
                    interfaceInfo_5_New.WiretapIpAddress= IPAddress.Parse("10.0.10.1");
                    interfaceInfo_5_New.NicDisabled = true;
                    interfaceInfo_5_New.Username = "dummy_username";
                    interfaceInfo_5_New.Password = "dummy_password";
                    interfaceInfo_5_New.Info1 = "dummy_interface5_info1";
                    interfaceInfo_5_New.Info2 = "dummy_interface5_info2";
                    interfaceInfo_5_New.ServerName = "DUMMY_SERVER5A";

                    // read an interface to trigger cache creation
                    IInterfaceInfo interfaceInfo = Config.GetInterface(_testServer, TestInterfaces.dummy_interface1A);

                    // now there should be 1 Interface in the cache
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    string interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, _testServer, TestInterfaces.dummy_interface1A);
                    string[] interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    string[] interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    string[] interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual(_testServer, interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface1A, interfaceXmgmtSetting[2]);

                    string[] interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, _testServer, TestInterfaces.dummy_interface5);
                    Assert.AreEqual("Error: No interface cache line found matching key {" + _npdbEnvironment + "," + _testServer + "," + TestInterfaces.dummy_interface5 +"}\r\n", interfaceXmgmtString);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, null, TestInterfaces.dummy_interface5);
                    Assert.IsTrue(interfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "", TestInterfaces.dummy_interface5);
                    Assert.IsTrue(interfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, _testServer, null);
                    Assert.IsTrue(interfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, _testServer, "");
                    Assert.IsTrue(interfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n"));

                    // register an InterfaceChange handler, this one accepts changes
                    Config.InterfaceChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptInterfaceChangeFired to false, so we can confirm the handler is called
                    _acceptInterfaceChangeFired = false;

                    // update the info1 column of dummy_interface5
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1a' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the interface change handler did NOT fire
                    // dummy_interface5 should NOT be in any cached interface list
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptInterfaceChangeFired);

                    // there should still be 1 Interface in the cache
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, _testServer, TestInterfaces.dummy_interface1A);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual(_testServer, interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface1A, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // now read the interface for dummy_interface5
                    // which will load interface info into the cache
                    interfaceInfo_5_Old.Info1 = "dummy_interface5_info1a";
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(6, interfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1a,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[5]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1a,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // save our expectations for the handler to check
                    interfaceInfo_5_New.Info1 = "dummy_interface5_info1b";
                    _expectedInterfaceChangeEventArgs 
                        = new InterfaceChangeEventArgs(
                        Config.Environment,
                        "dummy_server5A",
                        TestInterfaces.dummy_interface5,
                        interfaceInfo_5_Old,
                        interfaceInfo_5_New);
                    _acceptInterfaceChangeFired = false;

                    // update the info1 column of dummy_interface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1b' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceChangeEventArgs.Environment 
                            + "," + _acceptInterfaceChangeEventArgs.Server
                            + "," + _acceptInterfaceChangeEventArgs.Interface
                            + "," + _acceptInterfaceChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the interface change handler fired
                    Assert.AreEqual(true, _acceptInterfaceChangeFired);

                    // read the interface for dummy_interface5
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_New.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(6, interfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[5]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // register a second InterfaceChange handler, this one rejects changes
                    Config.InterfaceChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    interfaceInfo_5_Old.Info1 = "dummy_interface5_info1b";
                    interfaceInfo_5_New.Info1 = "dummy_interface5_info1c";
                    _expectedInterfaceChangeEventArgs 
                        = new InterfaceChangeEventArgs(
                        Config.Environment,
                        "dummy_server5A",
                        TestInterfaces.dummy_interface5,
                        interfaceInfo_5_Old,
                        interfaceInfo_5_New);
                    _acceptInterfaceChangeFired = false;
                    _rejectInterfaceChangeFired = false;

                    // update the info1 column of dummy_interface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces set "
                        + "vc_info1 = 'dummy_interface5_info1c' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceChangeEventArgs.Environment 
                            + "," + _acceptInterfaceChangeEventArgs.Server
                            + "," + _acceptInterfaceChangeEventArgs.Interface
                            + "," + _acceptInterfaceChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    if (null != _rejectInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectInterfaceChangeEventArgs.Environment 
                            + "," + _rejectInterfaceChangeEventArgs.Server
                            + "," + _rejectInterfaceChangeEventArgs.Interface
                            + "," + _rejectInterfaceChangeEventArgs.ValueOld
                            + "," + _rejectInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _rejectInterfaceChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptInterfaceChangeFired);
                    Assert.AreEqual(true, _rejectInterfaceChangeFired);

                    // read the interface for dummy_interface5,
                    // confirm that it has NOT changed,
                    // since reject handler rejected the change
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(6, interfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.IsTrue(interfacesXmgmtLines[4].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfacesXmgmtLines[4].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A}}"));
                    Assert.AreEqual("{xblob,dummy_server1,dummy_interface1A}{{dummy_interface1A,http,1.1.1.1,255.255.255.0,1.0.0.1,1,5,dummy_interface1A_vsite,101,dummy_interface1A_vdir,dummy_interface1A_dbname,dummy_interface1A_sharename,5,101,SERVICE_101,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface1A_info1,dummy_interface1A_info2,DUMMY_SERVER1},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[5]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.IsTrue(interfaceXmgmtLines[1].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1b,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfaceXmgmtLines[1].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(interfaceXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(interfaceInfo_5_New.ToString(), interfaceXmgmtValue[3]);

                    // read the interface again, to read the stale value a second time
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // wait past the _minEventInterval to pass and read the setting again.
                    // this one should trigger an event
                    SleepEventInterval();
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // now change the config_minEventInterval setting to zero,
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read the stale interface twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // unregister both handlers
                    Config.InterfaceChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.InterfaceChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get the interface again to read it into the cache
                    interfaceInfo_5_Old.Info1 = "dummy_interface5_info1c";
                    interfaceInfo_5_New.Info1 = "dummy_interface5_info1d";
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // update the info1 column of dummy_interface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1d' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the interface, and confirm that it has NOT changed,
                    // since no handler was registered
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.IsTrue(interfacesXmgmtLines[4].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfacesXmgmtLines[4].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.IsTrue(interfaceXmgmtLines[1].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfaceXmgmtLines[1].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(interfaceInfo_5_New.ToString(), interfaceXmgmtValue[3]);

                    // set the info1 column of dummy_interface5 back to info1c
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1c' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the interface, and confirm that it has NOT changed,
                    // since config reverted
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.InterfaceChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedInterfaceChangeEventArgs 
                        = new InterfaceChangeEventArgs(
                        Config.Environment,
                        "dummy_server5A",
                        TestInterfaces.dummy_interface5,
                        interfaceInfo_5_Old,
                        interfaceInfo_5_New);
                    _throwInterfaceChangeFired = false;

                    // get the interface again to read it into the cache
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // update the info1 column of dummy_interface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1d' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwInterfaceChangeEventArgs.Environment 
                            + "," + _throwInterfaceChangeEventArgs.Server
                            + "," + _throwInterfaceChangeEventArgs.Interface
                            + "," + _throwInterfaceChangeEventArgs.ValueOld
                            + "," + _throwInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwInterfaceChangeEventArgs);
                    }

                    // check that the interface info change handler fired
                    Assert.AreEqual(true, _throwInterfaceChangeFired);

                    // get the interface again and confirm that it has not changed,
                    // since throw handler did not accept the change
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.IsTrue(interfacesXmgmtLines[4].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfacesXmgmtLines[4].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.IsTrue(interfaceXmgmtLines[1].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1c,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfaceXmgmtLines[1].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(interfaceInfo_5_New.ToString(), interfaceXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    interfaceInfo_5_Old.Info1 = "dummy_interface5_info1d";
                    interfaceInfo_5_New.Info1 = "dummy_interface5_info1e";
                    _expectedInterfaceChangeEventArgs 
                        = new InterfaceChangeEventArgs(
                        Config.Environment,
                        "dummy_server5A",
                        TestInterfaces.dummy_interface5,
                        interfaceInfo_5_Old,
                        interfaceInfo_5_New);
                    _throwInterfaceChangeFired = false;

                    // get the interface again to read it into the cache
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfacesXmgmtLines[4]);

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A},False,1/1/0001 12:00:00 AM,<null>}", interfaceXmgmtLines[1]);

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceXmgmtValue[3]);

                    // update the info1 column of dummy_interface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1e' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();

                    // get the interface, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // check that the interface info change handler did NOT fire
                    Assert.AreEqual(false, _throwInterfaceChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwInterfaceChangeEventArgs.Environment 
                            + "," + _throwInterfaceChangeEventArgs.Server
                            + "," + _throwInterfaceChangeEventArgs.Interface
                            + "," + _throwInterfaceChangeEventArgs.ValueOld
                            + "," + _throwInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwInterfaceChangeEventArgs);
                    }

                    // check that the interface info change handler fired
                    //Assert.AreEqual(true, _throwInterfaceChangeFired);

                    // get the interface, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    interfaceInfo = Config.GetInterface("dummy_server5A", TestInterfaces.dummy_interface5);
                    Assert.AreEqual(interfaceInfo_5_Old.ToString(), interfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    interfacesXmgmt = _configXmgmtCmd.Interfaces(_testProcess, _testComponentCS);
                    interfacesXmgmtLines = SplitLines(interfacesXmgmt);
                    Assert.AreEqual(5, interfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface cache", interfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfacesXmgmtLines[2]);
                    Assert.AreEqual("", interfacesXmgmtLines[3]);
                    Assert.IsTrue(interfacesXmgmtLines[4].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfacesXmgmtLines[4].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1e,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtString = _configXmgmtCmd.Interface(_testProcess, _testComponentCS, "dummy_server5A", TestInterfaces.dummy_interface5);
                    interfaceXmgmtLines = SplitLines(interfaceXmgmtString);
                    Assert.AreEqual(2, interfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,server,interface}{value,isStale,lastEventTime,newValue}", interfaceXmgmtLines[0]);
                    Assert.IsTrue(interfaceXmgmtLines[1].StartsWith("{xblob,dummy_server5A,dummy_interface5}{{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1d,dummy_interface5_info2,DUMMY_SERVER5A},True,"));
                    Assert.IsTrue(interfaceXmgmtLines[1].EndsWith(",{dummy_interface5,http,1.1.1.5,255.255.255.0,1.0.0.1,71,75,dummy_interface5_vsite,108,dummy_interface5_vdir,dummy_interface5_dbname,dummy_interface5_sharename,45,108,SERVICE_108,01:01:01:01:00:00,10.0.0.1,10.0.0.255,101,199,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10.0.10.1,True,dummy_username,dummy_password,dummy_interface5_info1e,dummy_interface5_info2,DUMMY_SERVER5A}}"));

                    interfaceXmgmtPair = SplitPair(interfaceXmgmtLines[1]);

                    interfaceXmgmtSetting = ParseSettingValue(interfaceXmgmtPair[0]);
                    Assert.AreEqual(3, interfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceXmgmtSetting[0]);
                    Assert.AreEqual("dummy_server5A", interfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestInterfaces.dummy_interface5, interfaceXmgmtSetting[2]);

                    interfaceXmgmtValue = ParseSettingValue(interfaceXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceXmgmtValue.Length);
                    Assert.AreEqual(interfaceInfo.ToString(), interfaceXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(interfaceInfo_5_New.ToString(), interfaceXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.InterfaceChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface " + _testServer + " dummy_interface1A"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server1 dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface  dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface  dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface " + _testServer + "\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface " + _testServer + "\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface " + _testServer + " dummy_interface1A"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "An interface change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interface dummy_server5A dummy_interface5"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.InterfaceChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.InterfaceChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.InterfaceChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set dummy_interface5 back
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_interfaces "
                        + "set vc_info1 = 'dummy_interface5_info1' "
                        + "where vc_interface = 'dummy_interface5'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void GetSingleInterface_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetSingleInterface(Interface.None);
                throw new Exception("Config.GetSingleInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Could not find Interface '" + Interface.None + "' on any Server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetSingleInterface_NegMultiInterface()
        {
            CheckReady();

            try
            {
                Config.GetSingleInterface(TestInterfaces.dummy_interface1A);
                throw new Exception("Config.GetSingleInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: More than one Server was found exposing Interface '" + TestInterfaces.dummy_interface1A + "' when only one was expected"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetSingleInterface_Pos()
        {
            CheckReady();

            IInterfaceInfo interfaceInfo = Config.GetSingleInterface(TestInterfaces.dummy_interface6);
            Assert.AreEqual(TestInterfaces.dummy_interface6, interfaceInfo.Interface);
            Assert.AreEqual("http", interfaceInfo.Protocol);
            Assert.AreEqual("1.6.1.1", interfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.6.1.1", interfaceInfo.IPAddressString);
            Assert.AreEqual(0x01060101, interfaceInfo.IPAddressDword);
            Assert.AreEqual(null, interfaceInfo.IPNetMaskString);
            Assert.AreEqual(0, interfaceInfo.IPNetMaskDword);
            Assert.AreEqual(null, interfaceInfo.IPDefaultGatewayString);
            Assert.AreEqual(0, interfaceInfo.IPDefaultGatewayDword);
            Assert.AreEqual(81, interfaceInfo.Port);
            Assert.AreEqual(0, interfaceInfo.PortEnd);
            Assert.AreEqual(null, interfaceInfo.VSite);
            Assert.AreEqual(0, interfaceInfo.VSiteId);
            Assert.AreEqual(null, interfaceInfo.VDir);
            Assert.AreEqual(null, interfaceInfo.DBName);
            Assert.AreEqual(null, interfaceInfo.Sharename);
            Assert.AreEqual(0, interfaceInfo.Timeout);
            Assert.AreEqual(0, interfaceInfo.ServiceId);
            Assert.AreEqual(null, interfaceInfo.ServiceName);
            Assert.AreEqual(null, interfaceInfo.Mac);
            Assert.AreEqual(null, interfaceInfo.SgIpAddressBeginString);
            Assert.AreEqual(0, interfaceInfo.SgIpAddressBeginDword);
            Assert.AreEqual(null, interfaceInfo.SgIpAddressEndString);
            Assert.AreEqual(0, interfaceInfo.SgIpAddressEndDword);
            Assert.AreEqual(0, interfaceInfo.SgPortBegin);
            Assert.AreEqual(0, interfaceInfo.SgPortEnd);
            Assert.AreEqual(false, interfaceInfo.NeedSGInfo);
            Assert.AreEqual(null, interfaceInfo.WiretapIpAddressString);
            Assert.AreEqual(0, interfaceInfo.WiretapIpAddressDword);
            Assert.AreEqual(false, interfaceInfo.NicDisabled);
            Assert.AreEqual(null, interfaceInfo.Username);
            Assert.AreEqual(null, interfaceInfo.Password);
            Assert.AreEqual(null, interfaceInfo.Info1);
            Assert.AreEqual(null, interfaceInfo.Info2);
            Assert.AreEqual("DUMMY_SERVER6", interfaceInfo.ServerName);
            Assert.AreEqual("http://1.6.1.1:81/", interfaceInfo.Url.ToString());
            try 
            {
                Assert.AreEqual(null, interfaceInfo.SqlConnectionString);
                throw new Exception("SqlConnectionString did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "InterfaceInfo.SqlConnectionString: Interface " + TestInterfaces.dummy_interface6 + " does not have a Protocol of 'sql'."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterfaceListBySite_PosNoInterfaces()
        {
            CheckReady();

            string[] virtualInterfaces = Config.GetVirtualInterfaceListBySite(0);
            Assert.AreEqual(0, virtualInterfaces.Length);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterfaceListBySite_PosMultiInterfaces()
        {
            CheckReady();

            string[] virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
            Assert.AreEqual(11, virtualInterfaces.Length);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1A, virtualInterfaces[0]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1B, virtualInterfaces[1]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1C, virtualInterfaces[2]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1D, virtualInterfaces[3]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1E, virtualInterfaces[4]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2A, virtualInterfaces[5]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2B, virtualInterfaces[6]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2C, virtualInterfaces[7]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2D, virtualInterfaces[8]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2E, virtualInterfaces[9]);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaces[10]);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        // need a member variable to tell the VirtualInterfaceListChange handlers what event args to expect
        private VirtualInterfaceListChangeEventArgs _expectedVirtualInterfaceListChangeEventArgs;
        private VirtualInterfaceListChangeEventArgs _acceptVirtualInterfaceListChangeEventArgs;
        private VirtualInterfaceListChangeEventArgs _rejectVirtualInterfaceListChangeEventArgs;

        private bool _acceptVirtualInterfaceListChangeFired;
        private bool _rejectVirtualInterfaceListChangeFired;
        private bool _throwVirtualInterfaceListChangeFired;

        public void AcceptVirtualInterfaceListChange(
            object sender,
            VirtualInterfaceListChangeEventArgs e)
        {
            _acceptVirtualInterfaceListChangeFired = true;

            string              eEnvironment = null;
            int                 eSiteId = 0;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool                fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceListChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptVirtualInterfaceListChangeEventArgs
                    = new VirtualInterfaceListChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectVirtualInterfaceListChange(
            object sender,
            VirtualInterfaceListChangeEventArgs e)
        {
            _rejectVirtualInterfaceListChangeFired = true;

            string              eEnvironment = null;
            int                 eSiteId = 0;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool                fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceListChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectVirtualInterfaceListChangeEventArgs
                    = new VirtualInterfaceListChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoVirtualInterfaceListChange();
        }

        public void ThrowVirtualInterfaceListChange(
            object sender,
            VirtualInterfaceListChangeEventArgs e)
        {
            _throwVirtualInterfaceListChangeFired = true;

            string              eEnvironment = null;
            int                 eSiteId = 0;
            string[]  eValueOld = null;
            string[]  eValueNew = null;
            bool                fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceListChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceListChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedVirtualInterfaceListChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptVirtualInterfaceListChangeEventArgs
                    = new VirtualInterfaceListChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowVirtualInterfaceListChange: Throw exception");
        }

        [TestCase]
        public void GetVirtualInterfaceList_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            VirtualInterfaceListChangeEventHandler acceptHandler
                = AcceptVirtualInterfaceListChange;
            bool acceptHandlerAttached = false;

            VirtualInterfaceListChangeEventHandler rejectHandler
                = RejectVirtualInterfaceListChange;
            bool rejectHandlerAttached = false;

            VirtualInterfaceListChangeEventHandler throwHandler
                = ThrowVirtualInterfaceListChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand;

                try 
                {
                    // confirm that the VirtualInterfaceList cache is indeed empty
                    string virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    string[] virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(4, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);

                    // build our expected virtual interface lists
                    string[] virtualInterfaces_w_5 = new string[11];
                    virtualInterfaces_w_5[0] = TestVirtualInterfaces.dummy_vinterface1A;
                    virtualInterfaces_w_5[1] = TestVirtualInterfaces.dummy_vinterface1B;
                    virtualInterfaces_w_5[2] = TestVirtualInterfaces.dummy_vinterface1C;
                    virtualInterfaces_w_5[3] = TestVirtualInterfaces.dummy_vinterface1D;
                    virtualInterfaces_w_5[4] = TestVirtualInterfaces.dummy_vinterface1E;
                    virtualInterfaces_w_5[5] = TestVirtualInterfaces.dummy_vinterface2A;
                    virtualInterfaces_w_5[6] = TestVirtualInterfaces.dummy_vinterface2B;
                    virtualInterfaces_w_5[7] = TestVirtualInterfaces.dummy_vinterface2C;
                    virtualInterfaces_w_5[8] = TestVirtualInterfaces.dummy_vinterface2D;
                    virtualInterfaces_w_5[9] = TestVirtualInterfaces.dummy_vinterface2E;
                    virtualInterfaces_w_5[10] = TestVirtualInterfaces.dummy_vinterface5;

                    string[] virtualInterfaces_wo_5 = new string[10];
                    virtualInterfaces_wo_5[0] = TestVirtualInterfaces.dummy_vinterface1A;
                    virtualInterfaces_wo_5[1] = TestVirtualInterfaces.dummy_vinterface1B;
                    virtualInterfaces_wo_5[2] = TestVirtualInterfaces.dummy_vinterface1C;
                    virtualInterfaces_wo_5[3] = TestVirtualInterfaces.dummy_vinterface1D;
                    virtualInterfaces_wo_5[4] = TestVirtualInterfaces.dummy_vinterface1E;
                    virtualInterfaces_wo_5[5] = TestVirtualInterfaces.dummy_vinterface2A;
                    virtualInterfaces_wo_5[6] = TestVirtualInterfaces.dummy_vinterface2B;
                    virtualInterfaces_wo_5[7] = TestVirtualInterfaces.dummy_vinterface2C;
                    virtualInterfaces_wo_5[8] = TestVirtualInterfaces.dummy_vinterface2D;
                    virtualInterfaces_wo_5[9] = TestVirtualInterfaces.dummy_vinterface2E;

                    // read a virtual interface list to trigger cache creation
                    string[] virtualInterfaces = Config.GetVirtualInterfaceListBySite(1002);

                    // now there should be 1 VirtualInterface in the cache
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    string virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1002);
                    string[] virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    string[] virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    string[] virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1002", virtualInterfaceListXmgmtSetting[1]);

                    string[] virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    Assert.AreEqual("Error: No virtual interface list cache line found matching key {" + _npdbEnvironment + ",1001}\r\n", virtualInterfaceListXmgmtString);

                    // register a VirtualInterfaceListChange handler, this one accepts changes
                    Config.VirtualInterfaceListChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptVirtualInterfaceListChangeFired to false, so we can confirm the handler is called
                    _acceptVirtualInterfaceListChangeFired = false;

                    // remove virtual interface 5 from the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "delete t_site_virtual_interface_ips "
                        + "where vc_virtual_interface = 'dummy_vinterface5' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the virtual interface change handler did NOT fire
                    // dummy_vinterface5 should NOT be in any cached virtual interface list
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptVirtualInterfaceListChangeFired);

                    // there should still be 1 VirtualInterface in the cache
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1002);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1002", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // now read the virtual interface list for site 1001
                    // which will load virtual interface list into the cache
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(6, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[5]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // save our expectations for the handler to check
                    _expectedVirtualInterfaceListChangeEventArgs 
                        = new VirtualInterfaceListChangeEventArgs(
                        Config.Environment,
                        1001,
                        virtualInterfaces_wo_5,
                        virtualInterfaces_w_5);
                    _acceptVirtualInterfaceListChangeFired = false;

                    // add virtual interface 5 back to the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) "
                        + "values ('" + _npdbEnvironment + "', 1001, 'dummy_vinterface5', '1.5.1.1')";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptVirtualInterfaceListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptVirtualInterfaceListChangeEventArgs.Environment 
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.SiteId
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.ValueOld
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptVirtualInterfaceListChangeEventArgs);
                    }

                    // check that the virtual interface list change handler fired
                    Assert.AreEqual(true, _acceptVirtualInterfaceListChangeFired);

                    // read the virtual interface list for site 1001
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(6, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[5]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // register a second VirtualInterfaceListChange handler, this one rejects changes
                    Config.VirtualInterfaceListChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedVirtualInterfaceListChangeEventArgs 
                        = new VirtualInterfaceListChangeEventArgs(
                        Config.Environment,
                        1001,
                        virtualInterfaces_w_5,
                        virtualInterfaces_wo_5);
                    _acceptVirtualInterfaceListChangeFired = false;
                    _rejectVirtualInterfaceListChangeFired = false;

                    // remove virtual interface 5 from the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "delete t_site_virtual_interface_ips "
                        + "where vc_virtual_interface = 'dummy_vinterface5' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptVirtualInterfaceListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceListChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptVirtualInterfaceListChangeEventArgs.Environment 
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.SiteId
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.ValueOld
                            + "," + _acceptVirtualInterfaceListChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptVirtualInterfaceListChangeEventArgs);
                    }

                    if (null != _rejectVirtualInterfaceListChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceListChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectVirtualInterfaceListChangeEventArgs.Environment 
                            + "," + _rejectVirtualInterfaceListChangeEventArgs.SiteId
                            + "," + _rejectVirtualInterfaceListChangeEventArgs.ValueOld
                            + "," + _rejectVirtualInterfaceListChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _rejectVirtualInterfaceListChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptVirtualInterfaceListChangeFired);
                    Assert.AreEqual(true, _rejectVirtualInterfaceListChangeFired);

                    // read the virtual interface list for site 1001,
                    // confirm it has NOT changed,
                    // since reject handler rejected the change
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(6, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},True,"));
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E}}"));
                    Assert.AreEqual("{xblob,1002}{{},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[5]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},True,"));
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E}}"));

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceListXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(virtualInterfaceListXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces_wo_5), virtualInterfaceListXmgmtValue[3]);

                    // read the virtual interface list again, to read the stale value a second time
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // wait past the _minEventInterval to pass and read the list again.
                    // this one should trigger an event
                    SleepEventInterval();
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // now change the config_minEventInterval setting to zero, so we should always get
                    // events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read the stale list twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // unregister both handlers
                    Config.VirtualInterfaceListChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.VirtualInterfaceListChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get the virtual interface list again to read it into the cache
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // add virtual interface 5 back to the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) "
                        + "values ('" + _npdbEnvironment + "', 1001, 'dummy_vinterface5', '1.5.1.1')";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the list, and confirm that it has NOT changed,
                    // since no handler was registered
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},True,"));
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5}}"));

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},True,"));
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5}}"));

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces_w_5), virtualInterfaceListXmgmtValue[3]);

                    // remove virtual interface 5 from the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "delete t_site_virtual_interface_ips "
                        + "where vc_virtual_interface = 'dummy_vinterface5' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the list, and confirm that it has NOT changed,
                    // since no handler was registered
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.VirtualInterfaceListChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedVirtualInterfaceListChangeEventArgs 
                        = new VirtualInterfaceListChangeEventArgs(
                        Config.Environment,
                        1001,
                        virtualInterfaces_wo_5,
                        virtualInterfaces_w_5);
                    _throwVirtualInterfaceListChangeFired = false;

                    // get the list to read it into the cache
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // add virtual interface 5 back to the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) "
                        + "values ('" + _npdbEnvironment + "', 1001, 'dummy_vinterface5', '1.5.1.1')";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the virtual interface list change handler fired
                    Assert.AreEqual(true, _throwVirtualInterfaceListChangeFired);

                    // read the virtual interface list for site 1001
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_wo_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},True,"));
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5}}"));

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E},True,"));
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5}}"));

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces_w_5), virtualInterfaceListXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    _expectedVirtualInterfaceListChangeEventArgs 
                        = new VirtualInterfaceListChangeEventArgs(
                        Config.Environment,
                        1001,
                        virtualInterfaces_w_5,
                        virtualInterfaces_wo_5);
                    _throwVirtualInterfaceListChangeFired = false;

                    // get the list again to read it into the cache
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListsXmgmtLines[4]);

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceListXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceListXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceListXmgmtValue[3]);

                    // remove virtual interface 5 from the site
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "delete t_site_virtual_interface_ips "
                        + "where vc_virtual_interface = 'dummy_vinterface5' "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();

                    // get the list, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // check that the virtual interface list change handler did NOT fire
                    Assert.AreEqual(false, _throwVirtualInterfaceListChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the virtual interface list change handler fired
                    //Assert.AreEqual(true, _throwVirtualInterfaceListChangeFired);

                    // get the list, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    virtualInterfaces = Config.GetVirtualInterfaceListBySite(1001);
                    Assert.IsTrue(CollectionUtil.Equals(virtualInterfaces, virtualInterfaces_w_5));

                    // make sure the cache is in the expected state
                    virtualInterfaceListsXmgmt = _configXmgmtCmd.VirtualInterfaceLists(_testProcess, _testComponentCS);
                    virtualInterfaceListsXmgmtLines = SplitLines(virtualInterfaceListsXmgmt);
                    Assert.AreEqual(5, virtualInterfaceListsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface list cache", virtualInterfaceListsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfaceListsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListsXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfaceListsXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},True,"));
                    Assert.IsTrue(virtualInterfaceListsXmgmtLines[4].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E}}"));

                    virtualInterfaceListXmgmtString = _configXmgmtCmd.VirtualInterfaceList(_testProcess, _testComponentCS, 1001);
                    virtualInterfaceListXmgmtLines = SplitLines(virtualInterfaceListXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid}{value,isStale,lastEventTime,newValue}", virtualInterfaceListXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].StartsWith("{xblob,1001}{{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E,dummy_vinterface5},True,"));
                    Assert.IsTrue(virtualInterfaceListXmgmtLines[1].EndsWith(",{dummy_vinterface1A,dummy_vinterface1B,dummy_vinterface1C,dummy_vinterface1D,dummy_vinterface1E,dummy_vinterface2A,dummy_vinterface2B,dummy_vinterface2C,dummy_vinterface2D,dummy_vinterface2E}}"));

                    virtualInterfaceListXmgmtPair = SplitPair(virtualInterfaceListXmgmtLines[1]);

                    virtualInterfaceListXmgmtSetting = ParseSettingValue(virtualInterfaceListXmgmtPair[0]);
                    Assert.AreEqual(2, virtualInterfaceListXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceListXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceListXmgmtSetting[1]);

                    virtualInterfaceListXmgmtValue = ParseSettingValue(virtualInterfaceListXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceListXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces), virtualInterfaceListXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceListXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceListXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(virtualInterfaces_wo_5), virtualInterfaceListXmgmtValue[3]);

                    // unregister the handler that throws an exception
                    Config.VirtualInterfaceListChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1002"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1002"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A virtual interface list change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface list change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface list information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelists"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfacelist 1001"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.VirtualInterfaceListChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.VirtualInterfaceListChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.VirtualInterfaceListChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set dummy_interface5 back
                    try
                    {
                        sqlCommand = cxn.CreateCommand();
                        sqlCommand.CommandText 
                            = "insert into t_site_virtual_interface_ips (vc_environment, i_site_id, vc_virtual_interface, vc_ip) "
                            + "values ('" + _npdbEnvironment + "', 1001, 'dummy_vinterface5', '1.5.1.1')";
                        sqlCommand.ExecuteNonQuery();
                    } 
                    catch (Exception) {}
                }
            }
        }

        [TestCase]
        public void GetVirtualInterface_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetVirtualInterface(VirtualInterface.None, 1);
                throw new Exception("Config.GetInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + VirtualInterface.None + "' not present in site id 1"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterface_NegNoSite()
        {
            CheckReady();

            try
            {
                Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1A, 1000);
                throw new Exception("Config.GetInterface() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: VirtualInterface '" + TestVirtualInterfaces.dummy_vinterface1A + "' not present in site id 1000"),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetVirtualInterface_VirtualInterfaceInfo_ToString()
        {
            CheckReady();

            IVirtualInterfaceInfo virtualInterfaceInfo = new VirtualInterfaceInfo();
            var emptyVirtualInterfaceString = virtualInterfaceInfo.ToString();
            Assert.AreEqual(emptyVirtualInterfaceString,
                "{None,"       // virtual interface
                + "None,"      // interface
                + "<null>,"    // protocol
                + "<null>,"    // ip address
                + "0,"         // port
                + "0,"         // port end
                + "<null>,"    // vdir
                + "<null>,"    // webstore app
                + "0,"         // timeout
                + "0,"         // service id
                + "<null>,"    // service name
                + "False,"     // need sg info
                + "0,"         // internet port
                + "0,"         // internet port end
                + "<null>,"    // info1
                + "<null>,"    // info2
                + "<null>,"    // minConnectionPoolSize
                + "<null>,"    // maxConnectionPoolSize
                + "<null>,"    // loadBalanceTimeout
                + "<null>,"    // connectionTimeout
                + "<null>}");  // notificationUrl

            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1A, 1001);

            Assert.AreEqual(virtualInterfaceInfo.ToString(),
                "{dummy_vinterface1A,"                   // virtual interface
                + "dummy_interface1A,"                   // interface
                + "http,"                                // protocol
                + "10.1.1.1,"                            // ip address
                + "6,"                                   // port
                + "10,"                                  // port end
                + "dummy_vinterface1A_vdir,"             // vdir
                + "dummy_vinterface1A_webstore_app,"     // webstore app
                + "5,"                                   // timeout
                + "101,"                                 // service id
                + "SERVICE_101,"                         // service name
                + "True,"                                // need sg info
                + "10006,"                               // internet port
                + "10010,"                               // internet port end
                + "dummy_vinterface1A_info1,"            // info1
                + "dummy_vinterface1A_info2,"            // info2
                + "<null>,"                              // minConnectionPoolSize
                + "<null>,"                              // maxConnectionPoolSize
                + "<null>,"                              // loadBalanceTimeout
                + "<null>,"                              // connectionTimeout
                + "<null>}");                            // notificationUrl

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterface_PosNotNull()
        {
            CheckReady();

            // dummy_vinterface1A - no override
            IVirtualInterfaceInfo virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1A, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1A, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1A, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.1", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.1", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010101, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(6, virtualInterfaceInfo.Port);
            Assert.AreEqual(10, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1A_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(5, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1A_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(101, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_101", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1A_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1A_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.1:6/", virtualInterfaceInfo.Url.ToString());

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterface_PosNull()
        {
            CheckReady();

            // dummy_vinterface2A
            IVirtualInterfaceInfo virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface2A, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2A, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2A, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterface_PosEnvironmentTypeOverride()
        {
            CheckReady();

            // dummy_vinterface1B - override with non-NULL at environment type level
            IVirtualInterfaceInfo virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1B, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1B, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1B, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.2", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.2", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010102, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1401, virtualInterfaceInfo.Port);
            Assert.AreEqual(1410, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("environment_type_override_1B_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1305, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("environment_type_override_1B_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(102, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_102", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(11006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(11010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("environment_type_override_1B_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_1B_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.2:1401/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1C - override with NULL at environment type level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1C, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1C, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1C, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.3", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.3", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010103, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(26, virtualInterfaceInfo.Port);
            Assert.AreEqual(30, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1C_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(15, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1C_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(103, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_103", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10026, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10030, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1C_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1C_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.3:26/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface2B - override with non-NULL at environment type level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface2B, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2B, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2B, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1421, virtualInterfaceInfo.Port);
            Assert.AreEqual(1430, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("environment_type_override_2B_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1315, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("environment_type_override_2B_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(11026, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(11030, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("environment_type_override_2B_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_2B_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2C - override with NULL at environment type level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface2C, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2C, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2C, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterface_PosSiteOverride()
        {
            CheckReady();

            // dummy_vinterface1D - override with non-NULL at environment type and site level
            IVirtualInterfaceInfo virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1D, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1D, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1D, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.4", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.4", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010104, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1501, virtualInterfaceInfo.Port);
            Assert.AreEqual(1510, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("site_override_1D_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1405, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("site_override_1D_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(104, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_104", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(21006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(21010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("site_override_1D_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("site_override_1D_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.4:1501/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1E - override with NULL at environment type and site level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1E, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1E, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1E, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.5", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.5", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010105, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(46, virtualInterfaceInfo.Port);
            Assert.AreEqual(50, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1E_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(25, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1E_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(105, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_105", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10046, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10050, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1E_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1E_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.5:46/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface2D - override with non-NULL at environment type and site level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface2D, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2D, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2D, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1511, virtualInterfaceInfo.Port);
            Assert.AreEqual(1520, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("site_override_2D_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1410, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("site_override_2D_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(21016, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(21020, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("site_override_2D_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("site_override_2D_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2E - override with NULL at environment type and site level
            virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface2E, 1001);
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2E, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2E, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        // need a member variable to tell the VirtualInterfaceChange handlers what event args
        // to expect
        private VirtualInterfaceChangeEventArgs _expectedVirtualInterfaceChangeEventArgs;
        private VirtualInterfaceChangeEventArgs _acceptVirtualInterfaceChangeEventArgs;
        private VirtualInterfaceChangeEventArgs _rejectVirtualInterfaceChangeEventArgs;
        private VirtualInterfaceChangeEventArgs _throwVirtualInterfaceChangeEventArgs;

        private bool _acceptVirtualInterfaceChangeFired;
        private bool _rejectVirtualInterfaceChangeFired;
        private bool _throwVirtualInterfaceChangeFired;

        public void AcceptVirtualInterfaceChange(
            object sender,
            VirtualInterfaceChangeEventArgs e)
        {
            _acceptVirtualInterfaceChangeFired = true;

            string                 eEnvironment = null;
            int                    eSiteId = 0;
            string       eVirtualInterface = VirtualInterface.None;
            IVirtualInterfaceInfo  eValueOld = null;
            IVirtualInterfaceInfo  eValueNew = null;
            bool                   fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.VirtualInterface != e.VirtualInterface) 
            {
                eVirtualInterface = e.VirtualInterface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptVirtualInterfaceChangeEventArgs
                    = new VirtualInterfaceChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eVirtualInterface,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectVirtualInterfaceChange(
            object sender,
            VirtualInterfaceChangeEventArgs e)
        {
            _rejectVirtualInterfaceChangeFired = true;

            string                 eEnvironment = null;
            int                    eSiteId = 0;
            string       eVirtualInterface = VirtualInterface.None;
            IVirtualInterfaceInfo  eValueOld = null;
            IVirtualInterfaceInfo  eValueNew = null;
            bool                   fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.VirtualInterface != e.VirtualInterface) 
            {
                eVirtualInterface = e.VirtualInterface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectVirtualInterfaceChangeEventArgs
                    = new VirtualInterfaceChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eVirtualInterface,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoVirtualInterfaceChange();
        }

        public void ThrowVirtualInterfaceChange(
            object sender,
            VirtualInterfaceChangeEventArgs e)
        {
            _throwVirtualInterfaceChangeFired = true;

            string                 eEnvironment = null;
            int                    eSiteId = 0;
            string       eVirtualInterface = VirtualInterface.None;
            IVirtualInterfaceInfo  eValueOld = null;
            IVirtualInterfaceInfo  eValueNew = null;
            bool                   fUnexpected = false;

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (_expectedVirtualInterfaceChangeEventArgs.VirtualInterface != e.VirtualInterface) 
            {
                eVirtualInterface = e.VirtualInterface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedVirtualInterfaceChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwVirtualInterfaceChangeEventArgs
                    = new VirtualInterfaceChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eVirtualInterface,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowVirtualInterfaceChange: Throw exception");
        }

        [TestCase]
        public void GetVirtualInterface_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            VirtualInterfaceChangeEventHandler acceptHandler 
                = this.AcceptVirtualInterfaceChange;
            bool acceptHandlerAttached = false;

            VirtualInterfaceChangeEventHandler rejectHandler 
                = this.RejectVirtualInterfaceChange;
            bool rejectHandlerAttached = false;

            VirtualInterfaceChangeEventHandler throwHandler
                = this.ThrowVirtualInterfaceChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand;

                try 
                {
                    // confim the VirtualInterface cache is indeed empty
                    string virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    string[] virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(4, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);

                    // build our expected virtual interface info objects
                    VirtualInterfaceInfo virtualInterfaceInfo_5_Old = new VirtualInterfaceInfo();
                    virtualInterfaceInfo_5_Old.VirtualInterface = TestVirtualInterfaces.dummy_vinterface5;
                    virtualInterfaceInfo_5_Old.Interface = TestInterfaces.dummy_interface5;
                    virtualInterfaceInfo_5_Old.Protocol = "http";
                    virtualInterfaceInfo_5_Old.IPAddress = IPAddress.Parse("1.5.1.1");
                    virtualInterfaceInfo_5_Old.Port = 76;
                    virtualInterfaceInfo_5_Old.PortEnd = 80;
                    virtualInterfaceInfo_5_Old.VDir = "dummy_vinterface5_vdir";
                    virtualInterfaceInfo_5_Old.Timeout = 40;
                    virtualInterfaceInfo_5_Old.WebstoreApp = "dummy_vinterface5_webstore_app";
                    virtualInterfaceInfo_5_Old.ServiceId = 108;
                    virtualInterfaceInfo_5_Old.ServiceName = "SERVICE_108";
                    virtualInterfaceInfo_5_Old.NeedSGInfo = true;
                    virtualInterfaceInfo_5_Old.InternetPort = 10076;
                    virtualInterfaceInfo_5_Old.InternetPortEnd = 10080;
                    virtualInterfaceInfo_5_Old.Info1 = "dummy_vinterface5_info1";
                    virtualInterfaceInfo_5_Old.Info2 = "dummy_vinterface5_info2";

                    VirtualInterfaceInfo virtualInterfaceInfo_5_New = new VirtualInterfaceInfo();
                    virtualInterfaceInfo_5_New.VirtualInterface = TestVirtualInterfaces.dummy_vinterface5;
                    virtualInterfaceInfo_5_New.Interface = TestInterfaces.dummy_interface5;
                    virtualInterfaceInfo_5_New.Protocol = "http";
                    virtualInterfaceInfo_5_New.IPAddress = IPAddress.Parse("1.5.1.1");
                    virtualInterfaceInfo_5_New.Port = 76;
                    virtualInterfaceInfo_5_New.PortEnd = 80;
                    virtualInterfaceInfo_5_New.VDir = "dummy_vinterface5_vdir";
                    virtualInterfaceInfo_5_New.Timeout = 40;
                    virtualInterfaceInfo_5_New.WebstoreApp = "dummy_vinterface5_webstore_app";
                    virtualInterfaceInfo_5_New.ServiceId = 108;
                    virtualInterfaceInfo_5_New.ServiceName = "SERVICE_108";
                    virtualInterfaceInfo_5_New.NeedSGInfo = true;
                    virtualInterfaceInfo_5_New.InternetPort = 10076;
                    virtualInterfaceInfo_5_New.InternetPortEnd = 10080;
                    virtualInterfaceInfo_5_New.Info1 = "dummy_vinterface5_info1";
                    virtualInterfaceInfo_5_New.Info2 = "dummy_vinterface5_info2";

                    // read a virtual interface to trigger cache creation
                    IVirtualInterfaceInfo virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface1A, 1001);

                    // now there should be 1 Interface in the cache
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    string virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface1A, 1001);
                    string[] virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    string[] virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    string[] virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1A, virtualInterfaceXmgmtSetting[2]);

                    string[] virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual("Error: No virtual interface cache line found matching key {" + _npdbEnvironment + ",1001," + TestVirtualInterfaces.dummy_vinterface5 + "}\r\n", virtualInterfaceXmgmtString);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, null, 1001);
                    Assert.IsTrue(virtualInterfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, "", 1001);
                    Assert.IsTrue(virtualInterfaceXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    // register a VirtualInterfaceChange handler, this one accepts changes
                    Config.VirtualInterfaceChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptVirtualInterfaceChangeFired to false, so we can confirm the handler is called
                    _acceptVirtualInterfaceChangeFired = false;

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1a' "
                        + "where vc_virtual_interface='dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the virtual interface change handler did NOT fire
                    // dummy_vinterface5 should NOT be in the cache
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptVirtualInterfaceChangeFired);

                    // there should still be 1 Interface in the cache
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface1A, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1A, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // now read the virtual interface for dummy_vinterface5
                    // which will load virtual interface info into the cache
                    virtualInterfaceInfo_5_Old.Info1 = "dummy_vinterface5_info1a";
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(6, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1a,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[5]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1a,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // save our expectations for the handler to check
                    virtualInterfaceInfo_5_New.Info1 = "dummy_vinterface5_info1b";
                    _expectedVirtualInterfaceChangeEventArgs 
                        = new VirtualInterfaceChangeEventArgs(
                        Config.Environment,
                        1001,
                        TestVirtualInterfaces.dummy_vinterface5,
                        virtualInterfaceInfo_5_Old,
                        virtualInterfaceInfo_5_New);
                    _acceptVirtualInterfaceChangeFired = false;

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1b' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptVirtualInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptVirtualInterfaceChangeEventArgs.Environment 
                            + "," + _acceptVirtualInterfaceChangeEventArgs.SiteId
                            + "," + _acceptVirtualInterfaceChangeEventArgs.VirtualInterface
                            + "," + _acceptVirtualInterfaceChangeEventArgs.ValueOld
                            + "," + _acceptVirtualInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the virtual interface change handler fired
                    Assert.AreEqual(true, _acceptVirtualInterfaceChangeFired);

                    // read the virtual interface for dummy_vinterface5
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_New.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(6, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[5]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // register a second VirtualInterfaceChange handler, this one rejects changes
                    Config.VirtualInterfaceChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    virtualInterfaceInfo_5_Old.Info1 = "dummy_vinterface5_info1b";
                    virtualInterfaceInfo_5_New.Info1 = "dummy_vinterface5_info1c";
                    _expectedVirtualInterfaceChangeEventArgs 
                        = new VirtualInterfaceChangeEventArgs(
                        Config.Environment,
                        1001,
                        TestVirtualInterfaces.dummy_vinterface5,
                        virtualInterfaceInfo_5_Old,
                        virtualInterfaceInfo_5_New);
                    _acceptVirtualInterfaceChangeFired = false;
                    _rejectVirtualInterfaceChangeFired = false;

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1c' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptVirtualInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptVirtualInterfaceChangeEventArgs.Environment 
                            + "," + _acceptVirtualInterfaceChangeEventArgs.SiteId
                            + "," + _acceptVirtualInterfaceChangeEventArgs.VirtualInterface
                            + "," + _acceptVirtualInterfaceChangeEventArgs.ValueOld
                            + "," + _acceptVirtualInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    if (null != _rejectVirtualInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectVirtualInterfaceChangeEventArgs.Environment 
                            + "," + _rejectVirtualInterfaceChangeEventArgs.SiteId
                            + "," + _rejectVirtualInterfaceChangeEventArgs.VirtualInterface
                            + "," + _rejectVirtualInterfaceChangeEventArgs.ValueOld
                            + "," + _rejectVirtualInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _rejectVirtualInterfaceChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptVirtualInterfaceChangeFired);
                    Assert.AreEqual(true, _rejectVirtualInterfaceChangeFired);

                    // read the virtual interface for dummy_vinterface5,
                    // confirm that it has NOT changed,
                    // since reject handler rejected the change
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(6, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));
                    Assert.AreEqual("{xblob,1001,dummy_vinterface1A}{{dummy_vinterface1A,dummy_interface1A,http,10.1.1.1,6,10,dummy_vinterface1A_vdir,dummy_vinterface1A_webstore_app,5,101,SERVICE_101,True,dummy_interface1A_state_change_url,dummy_interface1A_title_change_url,dummy_interface1A_dead_xbox_url,10006,10010,dummy_vinterface1A_info1,dummy_vinterface1A_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[5]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1b,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(virtualInterfaceXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(virtualInterfaceInfo_5_New.ToString(), virtualInterfaceXmgmtValue[3]);

                    // read the virtual interface again, to read the stale a second time
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // wait past the _minEventInterval to pass and read the setting again.
                    // this one should trigger an event
                    SleepEventInterval();
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // now change the config_minEventInterval setting to zero,
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read the stale value twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // unregister both handlers
                    Config.VirtualInterfaceChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.VirtualInterfaceChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get the virtual interface again to read it into the cache
                    virtualInterfaceInfo_5_Old.Info1 = "dummy_vinterface5_info1c";
                    virtualInterfaceInfo_5_New.Info1 = "dummy_vinterface5_info1d";
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1d' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the virtual interface dummy_vinterface5, and confirm that it has NOT changed,
                    // since no handler was registered
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(virtualInterfaceInfo_5_New.ToString(), virtualInterfaceXmgmtValue[3]);

                    // set the info1 column of dummy_vinterface5 back to info1c
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1c' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get the virtual interface dummy_vinterface5, and confirm that it has NOT changed,
                    // since config reverted
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.VirtualInterfaceChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedVirtualInterfaceChangeEventArgs 
                        = new VirtualInterfaceChangeEventArgs(
                        Config.Environment,
                        1001,
                        TestVirtualInterfaces.dummy_vinterface5,
                        virtualInterfaceInfo_5_Old,
                        virtualInterfaceInfo_5_New);
                    _throwVirtualInterfaceChangeFired = false;

                    // get the virtual interface again to read it into the cache
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1d' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwVirtualInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwVirtualInterfaceChangeEventArgs.Environment 
                            + "," + _throwVirtualInterfaceChangeEventArgs.SiteId
                            + "," + _throwVirtualInterfaceChangeEventArgs.VirtualInterface
                            + "," + _throwVirtualInterfaceChangeEventArgs.ValueOld
                            + "," + _throwVirtualInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwVirtualInterfaceChangeEventArgs);
                    }

                    // check that the virtual interface info change handler fired
                    Assert.AreEqual(true, _throwVirtualInterfaceChangeFired);

                    // get the virtual interface again, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1c,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(virtualInterfaceInfo_5_New.ToString(), virtualInterfaceXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    virtualInterfaceInfo_5_Old.Info1 = "dummy_vinterface5_info1d";
                    virtualInterfaceInfo_5_New.Info1 = "dummy_vinterface5_info1e";
                    _expectedVirtualInterfaceChangeEventArgs 
                        = new VirtualInterfaceChangeEventArgs(
                        Config.Environment,
                        1001,
                        TestVirtualInterfaces.dummy_vinterface5,
                        virtualInterfaceInfo_5_Old,
                        virtualInterfaceInfo_5_New);
                    _throwVirtualInterfaceChangeFired = false;

                    // get the virtual interface again to read it into the cache
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfacesXmgmtLines[4]);

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},False,1/1/0001 12:00:00 AM,<null>}", virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("False", virtualInterfaceXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", virtualInterfaceXmgmtValue[2]);
                    Assert.AreEqual("<null>", virtualInterfaceXmgmtValue[3]);

                    // update the info1 column of dummy_vinterface5
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1e' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();

                    // get the virtual interface, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // check that the virtual interface info change handler did NOT fire
                    Assert.AreEqual(false, _throwVirtualInterfaceChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwVirtualInterfaceChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected VirtualInterfaceChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwVirtualInterfaceChangeEventArgs.Environment 
                            + "," + _throwVirtualInterfaceChangeEventArgs.SiteId
                            + "," + _throwVirtualInterfaceChangeEventArgs.VirtualInterface
                            + "," + _throwVirtualInterfaceChangeEventArgs.ValueOld
                            + "," + _throwVirtualInterfaceChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwVirtualInterfaceChangeEventArgs);
                    }

                    // check that the virtual interface info change handler fired
                    //Assert.AreEqual(true, _throwVirtualInterfaceChangeFired);

                    // get the virtual interface, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    virtualInterfaceInfo = Config.GetVirtualInterface(TestVirtualInterfaces.dummy_vinterface5, 1001);
                    Assert.AreEqual(virtualInterfaceInfo_5_Old.ToString(), virtualInterfaceInfo.ToString());

                    // make sure the cache is in the expected state
                    virtualInterfacesXmgmt = _configXmgmtCmd.VirtualInterfaces(_testProcess, _testComponentCS);
                    virtualInterfacesXmgmtLines = SplitLines(virtualInterfacesXmgmt);
                    Assert.AreEqual(5, virtualInterfacesXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the virtual interface cache", virtualInterfacesXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", virtualInterfacesXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfacesXmgmtLines[2]);
                    Assert.AreEqual("", virtualInterfacesXmgmtLines[3]);
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfacesXmgmtLines[4].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1e,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtString = _configXmgmtCmd.VirtualInterface(_testProcess, _testComponentCS, TestVirtualInterfaces.dummy_vinterface5, 1001);
                    virtualInterfaceXmgmtLines = SplitLines(virtualInterfaceXmgmtString);
                    Assert.AreEqual(2, virtualInterfaceXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,virtualinterface}{value,isStale,lastEventTime,newValue}", virtualInterfaceXmgmtLines[0]);
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].StartsWith("{xblob,1001,dummy_vinterface5}{{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1d,dummy_vinterface5_info2,<null>,<null>,<null>,<null>},True,"));
                    Assert.IsTrue(virtualInterfaceXmgmtLines[1].EndsWith(",{dummy_vinterface5,dummy_interface5,http,1.5.1.1,76,80,dummy_vinterface5_vdir,dummy_vinterface5_webstore_app,40,108,SERVICE_108,True,dummy_interface5_state_change_url,dummy_interface5_title_change_url,dummy_interface5_dead_xbox_url,10076,10080,dummy_vinterface5_info1e,dummy_vinterface5_info2,<null>,<null>,<null>,<null>}}"));

                    virtualInterfaceXmgmtPair = SplitPair(virtualInterfaceXmgmtLines[1]);

                    virtualInterfaceXmgmtSetting = ParseSettingValue(virtualInterfaceXmgmtPair[0]);
                    Assert.AreEqual(3, virtualInterfaceXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, virtualInterfaceXmgmtSetting[0]);
                    Assert.AreEqual("1001", virtualInterfaceXmgmtSetting[1]);
                    Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceXmgmtSetting[2]);

                    virtualInterfaceXmgmtValue = ParseSettingValue(virtualInterfaceXmgmtPair[1]);
                    Assert.AreEqual(4, virtualInterfaceXmgmtValue.Length);
                    Assert.AreEqual(virtualInterfaceInfo.ToString(), virtualInterfaceXmgmtValue[0]);
                    Assert.AreEqual("True", virtualInterfaceXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(virtualInterfaceXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(virtualInterfaceInfo_5_New.ToString(), virtualInterfaceXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.VirtualInterfaceChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface1A 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface  1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface  1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface1A 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A virtual interface change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A virtual interface change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest virtual interface information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterfaces"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache virtualinterface dummy_vinterface5 1001"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.VirtualInterfaceChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.VirtualInterfaceChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.VirtualInterfaceChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set dummy_vinterface5 back
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "update t_virtual_interfaces "
                        + "set vc_info1 = 'dummy_vinterface5_info1' "
                        + "where vc_virtual_interface = 'dummy_vinterface5'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void GetVirtualInterfaceInfoBySite_PosNoInterfaces()
        {
            CheckReady();

            IVirtualInterfaceInfo[] virtualInterfaceInfos = Config.GetVirtualInterfaceInfoBySite(0);
            Assert.AreEqual(0, virtualInterfaceInfos.Length);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetVirtualInterfaceInfoBySite_PosMultiInterfaces()
        {
            CheckReady();

            IVirtualInterfaceInfo[] virtualInterfaceInfos = Config.GetVirtualInterfaceInfoBySite(1001);
            Assert.AreEqual(11, virtualInterfaceInfos.Length);

            // dummy_vinterface1A - no override
            IVirtualInterfaceInfo virtualInterfaceInfo = virtualInterfaceInfos[0];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1A, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1A, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.1", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.1", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010101, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(6, virtualInterfaceInfo.Port);
            Assert.AreEqual(10, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1A_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(5, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1A_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(101, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_101", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1A_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1A_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.1:6/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1B - override with non-NULL at environment type level
            virtualInterfaceInfo = virtualInterfaceInfos[1];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1B, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1B, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.2", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.2", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010102, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1401, virtualInterfaceInfo.Port);
            Assert.AreEqual(1410, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("environment_type_override_1B_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1305, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("environment_type_override_1B_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(102, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_102", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(11006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(11010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("environment_type_override_1B_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_1B_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.2:1401/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1C - override with NULL at environment type level
            virtualInterfaceInfo = virtualInterfaceInfos[2];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1C, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1C, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.3", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.3", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010103, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(26, virtualInterfaceInfo.Port);
            Assert.AreEqual(30, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1C_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(15, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1C_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(103, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_103", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10026, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10030, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1C_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1C_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.3:26/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1D - override with non-NULL at environment type and site level
            virtualInterfaceInfo = virtualInterfaceInfos[3];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1D, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1D, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.4", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.4", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010104, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1501, virtualInterfaceInfo.Port);
            Assert.AreEqual(1510, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("site_override_1D_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1405, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("site_override_1D_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(104, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_104", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(21006, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(21010, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("site_override_1D_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("site_override_1D_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.4:1501/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface1E - override with NULL at environment type and site level
            virtualInterfaceInfo = virtualInterfaceInfos[4];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface1E, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface1E, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("10.1.1.5", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("10.1.1.5", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x0A010105, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(46, virtualInterfaceInfo.Port);
            Assert.AreEqual(50, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface1E_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(25, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface1E_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(105, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_105", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10046, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10050, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface1E_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface1E_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://10.1.1.5:46/", virtualInterfaceInfo.Url.ToString());

            // dummy_vinterface2A
            virtualInterfaceInfo = virtualInterfaceInfos[5];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2A, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2A, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2B - override with non-NULL at environment type level
            virtualInterfaceInfo = virtualInterfaceInfos[6];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2B, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2B, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1421, virtualInterfaceInfo.Port);
            Assert.AreEqual(1430, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("environment_type_override_2B_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1315, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("environment_type_override_2B_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(11026, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(11030, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("environment_type_override_2B_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("environment_type_override_2B_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2C - override with NULL at environment type level
            virtualInterfaceInfo = virtualInterfaceInfos[7];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2C, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2C, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2D - override with non-NULL at environment type and site level
            virtualInterfaceInfo = virtualInterfaceInfos[8];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2D, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2D, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(1511, virtualInterfaceInfo.Port);
            Assert.AreEqual(1520, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("site_override_2D_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(1410, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("site_override_2D_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(21016, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(21020, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("site_override_2D_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("site_override_2D_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface2E - override with NULL at environment type and site level
            virtualInterfaceInfo = virtualInterfaceInfos[9];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface2E, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface2E, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual(null, virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(0, virtualInterfaceInfo.Port);
            Assert.AreEqual(0, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.VDir);
            Assert.AreEqual(0, virtualInterfaceInfo.Timeout);
            Assert.AreEqual(null, virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(0, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual(null, virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(false, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(0, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual(null, virtualInterfaceInfo.Info1);
            Assert.AreEqual(null, virtualInterfaceInfo.Info2);
            Assert.AreEqual(null, virtualInterfaceInfo.Url);

            // dummy_vinterface5
            virtualInterfaceInfo = virtualInterfaceInfos[10];
            Assert.AreEqual(TestVirtualInterfaces.dummy_vinterface5, virtualInterfaceInfo.VirtualInterface);
            Assert.AreEqual(TestInterfaces.dummy_interface5, virtualInterfaceInfo.Interface);
            Assert.AreEqual("http", virtualInterfaceInfo.Protocol);
            Assert.AreEqual("1.5.1.1", virtualInterfaceInfo.IPAddress.ToString());
            Assert.AreEqual("1.5.1.1", virtualInterfaceInfo.IPAddressString);
            Assert.AreEqual(0x01050101, virtualInterfaceInfo.IPAddressDword);
            Assert.AreEqual(76, virtualInterfaceInfo.Port);
            Assert.AreEqual(80, virtualInterfaceInfo.PortEnd);
            Assert.AreEqual("dummy_vinterface5_vdir", virtualInterfaceInfo.VDir);
            Assert.AreEqual(40, virtualInterfaceInfo.Timeout);
            Assert.AreEqual("dummy_vinterface5_webstore_app", virtualInterfaceInfo.WebstoreApp);
            Assert.AreEqual(108, virtualInterfaceInfo.ServiceId);
            Assert.AreEqual("SERVICE_108", virtualInterfaceInfo.ServiceName);
            Assert.AreEqual(true, virtualInterfaceInfo.NeedSGInfo);
            Assert.AreEqual(10076, virtualInterfaceInfo.InternetPort);
            Assert.AreEqual(10080, virtualInterfaceInfo.InternetPortEnd);
            Assert.AreEqual("dummy_vinterface5_info1", virtualInterfaceInfo.Info1);
            Assert.AreEqual("dummy_vinterface5_info2", virtualInterfaceInfo.Info2);
            Assert.AreEqual("http://1.5.1.1:76/", virtualInterfaceInfo.Url.ToString());

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        /*[TestCase]
        public void GetSetting_NegNoEnvironment()
        {
            CheckReady();

            try
            {
                Config.GetSetting(null, 1001, _testServer, Component.unknown, TestSettings.configunittest_setting1);
                throw new Exception("Config.GetSetting() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            AppEntry[]  appEntries = {
                new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            };
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetSetting_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetSetting(_npdbEnvironment, 1001, null, Component.unknown, TestSettings.configunittest_setting1);
                throw new Exception("Config.GetSetting() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            AppEntry[]  appEntries = {
                new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            };
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetSetting_NegNoSetting()
        {
            CheckReady();

            try
            {
                Config.GetSetting(_npdbEnvironment, 1001, _testServer, Component.unknown, TestSettings.configunittest_setting_missing);
                throw new Exception("Config.GetSetting() did not throw an exception");
            }
            catch (ApplicationException) {}

            AppEntry[]  appEntries = {
                new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Setting '" + TestSettings.configunittest_setting_missing + "' not found in t_settings table in NPDB"),
            };
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase]
        public void GetSetting_Pos()
        {
            CheckReady();

            string  sValue;

            // configunittest_setting1 will match an override at site and server
            sValue = Config.GetSetting(TestSettings.configunittest_setting1);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components", sValue);

            // check 1 1 1 (site, server, component)
            sValue = Config.GetSetting(Config.Environment, Config.SiteId, Config.Server, TestComponents.dummy_component1, TestSettings.configunittest_setting1);
            Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1", sValue);

            // check 1 1 0 (site, server, all component)
            sValue = Config.GetSetting(Config.Environment, Config.SiteId, Config.Server, Config.ComponentName, TestSettings.configunittest_setting1);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components", sValue);

            // check 1 0 1 (site, all server, component)
            sValue = Config.GetSetting(Config.Environment, Config.SiteId, "not_a_valid_server", TestComponents.dummy_component1, TestSettings.configunittest_setting1);
            Assert.AreEqual("site 1001, ALL servers, component dummy_component1", sValue);

            // check 1 0 0 (site, all server, all component)
            sValue = Config.GetSetting(Config.Environment, Config.SiteId, "not_a_valid_server", Config.ComponentName, TestSettings.configunittest_setting1);
            Assert.AreEqual("site 1001, ALL servers, ALL components", sValue);

            // check 0 1 1 (all site, server, component)
            sValue = Config.GetSetting(Config.Environment, -1, Config.Server, TestComponents.dummy_component1, TestSettings.configunittest_setting1);
            Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1", sValue);

            // check 0 1 0 (all site, server, all component)
            sValue = Config.GetSetting(Config.Environment, -1, Config.Server, Config.ComponentName, TestSettings.configunittest_setting1);
            Assert.AreEqual("ALL sites, server dummy_server1, ALL components", sValue);

            // check 0 0 1 (all site, all server, component)
            sValue = Config.GetSetting(Config.Environment, -1, "not_a_valid_server", TestComponents.dummy_component1, TestSettings.configunittest_setting1);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component1", sValue);

            // check 0 0 0 (all site, all server, all component)
            sValue = Config.GetSetting(Config.Environment, -1, "not_a_valid_server", Config.ComponentName, TestSettings.configunittest_setting1);
            Assert.AreEqual("ALL sites, ALL servers, ALL components", sValue);

            // configunittest_setting2 will match an override at environment type
            sValue = Config.GetSetting(TestSettings.configunittest_setting2);
            Assert.AreEqual("configunittest_setting2_environment_type_override_value", sValue);

            sValue = Config.GetSetting("not_a_valid_environment", 1, Config.Server, Config.ComponentName, TestSettings.configunittest_setting2);
            Assert.AreEqual("configunittest_setting2_default_value", sValue);

            // configunittest_setting3 has no overrides
            sValue = Config.GetSetting(TestSettings.configunittest_setting3);
            Assert.AreEqual("configunittest_setting3_default_value", sValue);

            // configunittest_setting4 has no overrides
            sValue = Config.GetSetting(TestSettings.configunittest_setting4);
            Assert.AreEqual("configunittest_setting4_default_value", sValue);

            // configunittest_setting5 has no overrides
            sValue = Config.GetSetting(TestSettings.configunittest_setting5);
            Assert.AreEqual("configunittest_setting5_default_value", sValue);

            // configunittest_setting11 has an override for site = 1011, server = dummy_server11, component = dummy_component11
            sValue = Config.GetSetting(TestSettings.configunittest_setting11);
            Assert.AreEqual("configunittest_setting11_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component11, TestSettings.configunittest_setting11);
            Assert.AreEqual("configunittest_setting11_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, 1011, "dummy_server11", TestComponents.dummy_component11, TestSettings.configunittest_setting11);
            Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11", sValue);

            // configunittest_setting12 has an override for site = -1, server = dummy_server12, component = dummy_component12
            sValue = Config.GetSetting(TestSettings.configunittest_setting12);
            Assert.AreEqual("configunittest_setting12_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component12, TestSettings.configunittest_setting12);
            Assert.AreEqual("configunittest_setting12_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, -1, "dummy_server12", TestComponents.dummy_component12, TestSettings.configunittest_setting12);
            Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12", sValue);

            // configunittest_setting13 has an override for site = 1013, server = ALL, component = dummy_component13
            sValue = Config.GetSetting(TestSettings.configunittest_setting13);
            Assert.AreEqual("configunittest_setting13_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component13, TestSettings.configunittest_setting13);
            Assert.AreEqual("configunittest_setting13_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, 1013, Config.Server, TestComponents.dummy_component13, TestSettings.configunittest_setting13);
            Assert.AreEqual("site 1013, ALL servers, component dummy_component13", sValue);

            // configunittest_setting14 has an override for site = 1014, server = dummy_server14, component = ALL
            sValue = Config.GetSetting(TestSettings.configunittest_setting14);
            Assert.AreEqual("configunittest_setting14_default_value", sValue);

            sValue = Config.GetSetting(Config.ComponentName, TestSettings.configunittest_setting14);
            Assert.AreEqual("configunittest_setting14_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, 1014, "dummy_server14", Config.ComponentName, TestSettings.configunittest_setting14);
            Assert.AreEqual("site 1014, server dummy_server14, ALL components", sValue);

            // configunittest_setting15 has an override for site = -1, server = ALL, component = dummy_component15
            sValue = Config.GetSetting(TestSettings.configunittest_setting15);
            Assert.AreEqual("configunittest_setting15_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component15, TestSettings.configunittest_setting15);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15", sValue);

            sValue = Config.GetSetting(Config.Environment, -1, Config.Server, TestComponents.dummy_component15, TestSettings.configunittest_setting15);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15", sValue);

            // configunittest_setting16 has an override for site = -1, server = dummy_server16, component = ALL
            sValue = Config.GetSetting(TestSettings.configunittest_setting16);
            Assert.AreEqual("configunittest_setting16_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component16, TestSettings.configunittest_setting16);
            Assert.AreEqual("configunittest_setting16_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, -1, "dummy_server16", Config.ComponentName, TestSettings.configunittest_setting16);
            Assert.AreEqual("ALL sites, server dummy_server16, ALL components", sValue);

            // configunittest_setting17 has an override for site = 1017, server = ALL, component = ALL
            sValue = Config.GetSetting(TestSettings.configunittest_setting17);
            Assert.AreEqual("configunittest_setting17_default_value", sValue);

            sValue = Config.GetSetting(TestComponents.dummy_component17, TestSettings.configunittest_setting17);
            Assert.AreEqual("configunittest_setting17_default_value", sValue);

            sValue = Config.GetSetting(Config.Environment, 1017, Config.Server, Config.ComponentName, TestSettings.configunittest_setting17);
            Assert.AreEqual("site 1017, ALL servers, ALL components", sValue);

            AppEntry[]  appEntries = {
            };
            Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }*/

        // need a member variable to tell the SettingChange handlers what event args to expect
        private SettingChangeEventArgs _expectedSettingChangeEventArgs;
        private SettingChangeEventArgs _acceptSettingChangeEventArgs;
        private SettingChangeEventArgs _rejectSettingChangeEventArgs;
        private SettingChangeEventArgs _throwSettingChangeEventArgs;

        private bool _acceptSettingChangeFired;
        private bool _rejectSettingChangeFired;
        private bool _throwSettingChangeFired;

        public void AcceptSettingsChange(object sender, SettingChangeEventArgs e)
        {
            _acceptSettingChangeFired = true;

            string     eEnvironment = null;
            int        eSiteId = 0;
            string     eServer = null;
            string  eComponent = Component.unknown;
            string    eSetting = TestSettings.configunittest_setting_missing;
            string     eValueOld = null;
            string     eValueNew = null;
            bool       fUnexpected = false;

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Setting != e.Setting) 
            {
                eSetting = e.Setting;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptSettingChangeEventArgs
                    = new SettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eSetting,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectSettingsChange(object sender, SettingChangeEventArgs e)
        {
            _rejectSettingChangeFired = true;

            string     eEnvironment = null;
            int        eSiteId = 0;
            string     eServer = null;
            string  eComponent = Component.unknown;
            string    eSetting = TestSettings.configunittest_setting_missing;
            string     eValueOld = null;
            string     eValueNew = null;
            bool       fUnexpected = false;

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Setting != e.Setting) 
            {
                eSetting = e.Setting;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectSettingChangeEventArgs
                    = new SettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eSetting,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoSettingChange();
        }

        public void ThrowSettingsChange(object sender, SettingChangeEventArgs e)
        {
            _throwSettingChangeFired = true;

            string     eEnvironment = null;
            int        eSiteId = 0;
            string     eServer = null;
            string  eComponent = Component.unknown;
            string    eSetting = TestSettings.configunittest_setting_missing;
            string     eValueOld = null;
            string     eValueNew = null;
            bool       fUnexpected = false;

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedSettingChangeEventArgs.Setting != e.Setting) 
            {
                eSetting = e.Setting;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwSettingChangeEventArgs
                    = new SettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eSetting,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowSettingsChange: Throw exception");
        }

        [TestCase]
        public void GetSetting_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            SettingChangeEventHandler acceptHandler 
                = AcceptSettingsChange;
            bool acceptHandlerAttached = false;

            SettingChangeEventHandler rejectHandler 
                = RejectSettingsChange;
            bool rejectHandlerAttached = false;

            SettingChangeEventHandler throwHandler
                = ThrowSettingsChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm the Setting cache is indeed empty
                    string settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    string[] settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(4, settingsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);

                    // read a setting to trigger cache creation
                    Config.GetSetting(TestSettings.configunittest_setting3);

                    // now there should be 1 Setting in the cache
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    string settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting3);
                    string[] settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    string[] settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    string[] settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting3, settingXmgmtSetting[4]);

                    string[] settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual("configunittest_setting3_default_value", settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    Assert.AreEqual("Error: No setting cache line found matching key {" + _npdbEnvironment + ",1001," + _testServer + "," + Component.unknown + "," + TestSettings.configunittest_setting4 + "}\r\n", settingXmgmtString);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, null);
                    Assert.IsTrue(settingXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, "");
                    Assert.IsTrue(settingXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    // register a SettingChange handler, this one accepts changes
                    Config.SettingChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set the _settingChangeHandlerFired to false, so we can confirm the handler is called
                    _acceptSettingChangeFired = false;

                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_a' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the setting change handler did NOT fire.
                    // setting should NOT be in any cached setting list
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptSettingChangeFired);

                    // there should still be 1 Setting in the cache
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_