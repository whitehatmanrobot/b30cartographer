                          = 0x80150027; // error decrypting incoming request
        public const uint XONLINE_E_DESERIALIZATION_ERROR                            = 0x80150028; // error deserializing incoming request
        public const uint XONLINE_E_SERVICE_KEY_ERROR                                = 0x80150029; // error accessing service key (generic, look for inner exception, hr)
        public const uint XONLINE_E_MASTER_KEY_ERROR                                 = 0x80150030; // error accessing master key (generic, look for inner exception, hr)
        public const uint XONLINE_E_USER_NOT_FOUND                                   = 0x80150031; // user not found in t_users 
        public const uint XONLINE_E_MACHINE_NOT_FOUND                                = 0x80150032; // user not found in t_machines 

        //
        // SQL errors of various sorts                                               = 0x801501xx
        //
        public const uint XONLINE_E_DATABASE_ERROR                                   = 0x80150100; // unspecified database error
        public const uint XONLINE_E_DATABASE_EXECUTE_ERROR                           = 0x80150101; // database query failed, typically a sql exception
        public const uint XONLINE_E_DATABASE_RESULT_ERROR                            = 0x80150102; // too many, too few results, or unexpected return value
        public const uint XONLINE_E_DATABASE_TRANSACTION_ERROR                       = 0x80150103; // transaction operation has no transaction
        public const uint XONLINE_E_DATABASE_PARAMETER_NOT_FOUND                     = 0x80150104; // parameter name not found in GetXxxParameter
        public const uint XONLINE_E_DATABASE_DEADLOCK                                = 0x80150105; // sql detected a deadlock and terminated call
        public const uint XONLINE_E_DATABASE_PARAMETER_INVALID                       = 0x80150106; // failed sproc specific parameter validation
        public const uint XONLINE_E_DATABASE_FOREIGN_KEY_VIOLATION                   = 0x80150107; // a SQL operation would have resulted in a foreign key exception
        public const uint XONLINE_E_DATABASE_DUPLICATE_KEY                           = 0x80150108; // duplicate primary or unique key
        public const uint XONLINE_E_DATABASE_TIMEOUT                                 = 0x80150109; // what it says, the query did not response within a specified time

        //
        // XOnlineLogon HRESULTS                                                     = 0x80151XXX
        //
        // Failures from XOnlineLogon                                                = 0x801510XX
        public const uint XONLINE_E_LOGON_NO_NETWORK_CONNECTION                      = 0x80151000;

        // XOnlineLogon task successful return states
        public const uint XONLINE_S_LOGON_CONNECTION_ESTABLISHED                     = 0x001510F0;

        // XOnlineLogon task failure return values
        public const uint XONLINE_E_LOGON_CANNOT_ACCESS_SERVICE                      = 0x80151001;
        public const uint XONLINE_E_LOGON_UPDATE_REQUIRED                            = 0x80151002;
        public const uint XONLINE_E_LOGON_SERVERS_TOO_BUSY                           = 0x80151003;
        public const uint XONLINE_E_LOGON_CONNECTION_LOST                            = 0x80151004;
        public const uint XONLINE_E_LOGON_KICKED_BY_DUPLICATE_LOGON                  = 0x80151005;
        public const uint XONLINE_E_LOGON_INVALID_USER                               = 0x80151006;
        public const uint XONLINE_E_LOGON_FLASH_UPDATE_REQUIRED                      = 0x80151007;
        public const uint XONLINE_E_LOGON_TITLE_ACTIVATION_REQUIRED                  = 0x80151008;
        public const uint XONLINE_E_LOGON_USER_TITLE_ACTIVATION_REQUIRED             = 0x80151009;
        public const uint XONLINE_E_LOGON_OTHER_TITLE_ACTIVATED                      = 0x8015100A;
        public const uint XONLINE_E_LOGON_SG_CONNECTION_TERMINATED                   = 0x8015100B;
        public const uint XONLINE_E_LOGON_SG_CONNECTION_TIMEDOUT                     = 0x8015100C;
        public const uint XONLINE_E_LOGON_SG_CONNECTION_RESET                        = 0x8015100D;
        public const uint XONLINE_E_LOGON_SG_CONNECTION_FAILED                       = 0x8015100E;
        public const uint XONLINE_E_LOGON_USER_NOT_TRUSTED                           = 0x8015100F;
        public const uint XONLINE_E_LOGON_USER_RPS_EXPIRED                           = 0x80151010;
        public const uint XONLINE_E_LOGON_PPLOGIN_PASSWORD_PROBLEM                   = 0x80151011;
        public const uint XONLINE_E_LOGON_PPLOGIN_VERIFICATION_REQUIRED              = 0x80151012;
        public const uint XONLINE_E_LOGON_USER_UNKNOWN_TRUST                         = 0x80151013;
        public const uint XONLINE_E_LOGON_PPLOGIN_MISMATCH                           = 0x80151014;
        public const uint XONLINE_E_LOGON_SETTINGS_SYNC_FAILED                       = 0x80151015;
        public const uint XONLINE_E_LOGON_SETTINGS_SYNC_CONFLICT                     = 0x80151016;
        public const uint XONLINE_E_LOGON_BLOCKED_BY_CURFEW                          = 0x80151017;

        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102A
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102B
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102C
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102D
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102E
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x8015102F
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x80151030
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x80151031
        // Accidentally used in XONLINE_E_ACCOUNTS_XXX                               = 0x80151032

        // Failures from XOnlineSilentLogon
        public const uint XONLINE_E_SILENT_LOGON_DISABLED                            = 0x80151080;
        public const uint XONLINE_E_SILENT_LOGON_NO_ACCOUNTS                         = 0x80151081;
        public const uint XONLINE_E_SILENT_LOGON_PASSCODE_REQUIRED                   = 0x80151082;

        // Service errors after XOnlineLogon task completion                         = 0x801511XX
        public const uint XONLINE_E_LOGON_SERVICE_NOT_REQUESTED                      = 0x80151100;
        public const uint XONLINE_E_LOGON_SERVICE_NOT_AUTHORIZED                     = 0x80151101;
        public const uint XONLINE_E_LOGON_SERVICE_TEMPORARILY_UNAVAILABLE            = 0x80151102;

        // User warnings after XOnlineLogon task completion                          = 0x801512XX
        public const uint XONLINE_S_LOGON_USER_HAS_MESSAGE                           = 0x001512F0;
        public const uint XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED            = 0x001512F1;

        // User errors after XOnlineLogon task completion
        public const uint XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT           = 0x80151200;

        // XOnlineChangeLogonUsers task successful return states                     = 0x801513XX
        public const uint XONLINE_S_LOGON_COMMIT_USER_CHANGE                         = 0x001513F0;
        public const uint XONLINE_S_LOGON_USER_CHANGE_COMPLETE                       = 0x001513F1;

        // XOnlineChangeLogonUsers task failure return values
        public const uint XONLINE_E_LOGON_CHANGE_USER_FAILED                         = 0x80151300;

        // Other generic auth related errors                                         = 0x801518XX
        public const uint XONLINE_E_LOGON_MU_NOT_MOUNTED                             = 0x80151800;
        public const uint XONLINE_E_LOGON_MU_IO_ERROR                                = 0x80151801;
        public const uint XONLINE_E_LOGON_NOT_LOGGED_ON                              = 0x80151802;


        // XKDC client errors (error codes ranging from 80151901-8015191A)
        public const uint XONLINE_E_LOGON_NO_IP_ADDRESS                              = 0x80151901;
        public const uint XONLINE_E_LOGON_NO_DNS_SERVICE                             = 0x80151902;
        public const uint XONLINE_E_LOGON_DNS_LOOKUP_FAILED                          = 0x80151903;
        public const uint XONLINE_E_LOGON_DNS_LOOKUP_TIMEDOUT                        = 0x80151904;
        public const uint XONLINE_E_LOGON_INVALID_XBOX_ONLINE_INFO                   = 0x80151905;
        public const uint XONLINE_E_LOGON_MACS_FAILED                                = 0x80151906;
        public const uint XONLINE_E_LOGON_MACS_TIMEDOUT                              = 0x80151907;
        public const uint XONLINE_E_LOGON_AUTHENTICATION_FAILED                      = 0x80151908;
        public const uint XONLINE_E_LOGON_AUTHENTICATION_TIMEDOUT                    = 0x80151909;
        public const uint XONLINE_E_LOGON_AUTHORIZATION_FAILED                       = 0x8015190A;
        public const uint XONLINE_E_LOGON_AUTHORIZATION_TIMEDOUT                     = 0x8015190B;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_INVALID                       = 0x8015190C;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED                        = 0x8015190D;
        public const uint XONLINE_E_LOGON_SG_SERVICE_FAILED                          = 0x8015190E;
        public const uint XONLINE_E_LOGON_PRESENCE_SERVICE_FAILED                    = 0x8015190F;
        public const uint XONLINE_E_LOGON_PRESENCE_SERVICE_TIMEDOUT                  = 0x80151910;
        public const uint XONLINE_E_LOGON_TIMEDOUT                                   = 0x80151911;
        public const uint XONLINE_E_LOGON_UNKNOWN_TITLE                              = 0x80151912;
        public const uint XONLINE_E_LOGON_INTERNAL_ERROR                             = 0x80151913;
        public const uint XONLINE_E_LOGON_MACHINE_AUTHENTICATION_FAILED              = 0x80151914;
        public const uint XONLINE_E_LOGON_TGT_REVOKED                                = 0x80151915;
        public const uint XONLINE_E_LOGON_CACHE_MISS                                 = 0x80151916;
        public const uint XONLINE_E_LOGON_NOT_UPNP_NAT                               = 0x80151917;
        public const uint XONLINE_E_LOGON_INCONCLUSIVE_UPNP_NAT                      = 0x80151918;
        public const uint XONLINE_E_LOGON_UPNP_NAT_HARD_FAILURE                      = 0x80151919;
        public const uint XONLINE_E_LOGON_UPNP_PORT_UNAVAILABLE                      = 0x8015191A;
        public const uint XONLINE_E_LOGON_PPLOGIN_OFFLINE                            = 0x8015191B;
        public const uint XONLINE_E_LOGON_KERBEROS_BIND_FAILURE                      = 0x8015191C;
        public const uint XONLINE_E_LOGON_LIVE_PORT_UNAVAILABLE                      = 0x8015191D;
        public const uint XONLINE_E_LOGON_LIVE_PORT_OVERRIDE_UNAVAILABLE             = 0x8015191E;
        public const uint XONLINE_E_LOGON_SG_SERVICE_NIC_MISMATCH                    = 0x8015191F;
        public const uint XONLINE_E_LOGON_WLID_XUID_MISMATCH                         = 0x80151920;
        public const uint XONLINE_E_LOGON_SU_MANIFEST_MISMATCH                       = 0x80151921;
        public const uint XONLINE_E_LOGON_SU_FLASH_MISMATCH                          = 0x80151922;
        public const uint XONLINE_E_LOGON_SYSTEM_UPDATE_REQUIRED                     = 0x80151923;
        public const uint XONLINE_E_LOGON_UPDATE_NOT_PROPPED                         = 0x80151924;
        public const uint XONLINE_E_LOGON_LIVEHIVE_FAILED                            = 0x80151925;
        public const uint XONLINE_E_LOGON_INVALID_CONSOLE_ID                         = 0x80151926;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED_TEMP                   = 0x80151927;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED_REPAIR                 = 0x80151928;
        public const uint XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID                       = 0x80151929;
        public const uint XONLINE_E_LOGON_MISSING_CONSOLE_ID                         = 0x8015192A;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_TITLE_BANNED                  = 0x8015192B;
        public const uint XONLINE_E_LOGON_XBOX_ACCOUNT_TITLE_BANNED_TEMP             = 0x8015192C;

        //
        // Presence/Notification HRESULTS                                            = 0x801520XX
        //
        public const uint XONLINE_E_NOTIFICATION_ERROR                               = 0x80152000;
        public const uint XONLINE_E_NOTIFICATION_SERVER_BUSY                         = 0x80152001;
        public const uint XONLINE_E_NOTIFICATION_LIST_FULL                           = 0x80152002;
        public const uint XONLINE_E_NOTIFICATION_BLOCKED                             = 0x80152003;
        public const uint XONLINE_E_NOTIFICATION_FRIEND_PENDING                      = 0x80152004;
        public const uint XONLINE_E_NOTIFICATION_FLUSH_TICKETS                       = 0x80152005;
        public const uint XONLINE_E_NOTIFICATION_TOO_MANY_REQUESTS                   = 0x80152006;
        public const uint XONLINE_E_NOTIFICATION_USER_ALREADY_EXISTS                 = 0x80152007;
        public const uint XONLINE_E_NOTIFICATION_USER_NOT_FOUND                      = 0x80152008;
        public const uint XONLINE_E_NOTIFICATION_OTHER_LIST_FULL                     = 0x80152009;
        public const uint XONLINE_E_NOTIFICATION_SELF                                = 0x8015200A;
        public const uint XONLINE_E_NOTIFICATION_SAME_TITLE                          = 0x8015200B;
        public const uint XONLINE_E_NOTIFICATION_NO_TASK                             = 0x8015200C;
        public const uint XONLINE_E_NOTIFICATION_NO_DATA                             = 0x8015200D;
        public const uint XONLINE_E_NOTIFICATION_NO_PEER_SUBSCRIBE                   = 0x0015200E;
        public const uint XONLINE_E_NOTIFICATION_THREAD_ERROR                        = 0x8015200F; // thread wait timeout
        public const uint XONLINE_E_NOTIFICATION_STATE_ERROR                         = 0x80152010;
        public const uint XONLINE_S_NOTIFICATION_NO_PEER_SUBSCRIBE                   = 0x0015200E;

        //
        // Errors returned by Teams                                                  = 0x801521XX
        //
        public const uint XONLINE_E_TEAMS_SERVER_BUSY                                = 0x80152100;
        public const uint XONLINE_E_TEAMS_TEAM_FULL                                  = 0x80152101;
        public const uint XONLINE_E_TEAMS_MEMBER_PENDING                             = 0x80152102;
        public const uint XONLINE_E_TEAMS_TOO_MANY_REQUESTS                          = 0x80152103;
        public const uint XONLINE_E_TEAMS_USER_ALREADY_EXISTS                        = 0x80152104;
        public const uint XONLINE_E_TEAMS_USER_NOT_FOUND                             = 0x80152105;
        public const uint XONLINE_E_TEAMS_USER_TEAMS_FULL                            = 0x80152106;
        public const uint XONLINE_E_TEAMS_SELF                                       = 0x80152107;
        public const uint XONLINE_E_TEAMS_NO_TASK                                    = 0x80152108;
        public const uint XONLINE_E_TEAMS_TOO_MANY_TEAMS                             = 0x80152109;
        public const uint XONLINE_E_TEAMS_TEAM_ALREADY_EXISTS                        = 0x8015210A;
        public const uint XONLINE_E_TEAMS_TEAM_NOT_FOUND                             = 0x8015210B;
        public const uint XONLINE_E_TEAMS_INSUFFICIENT_PRIVILEGES                    = 0x8015210C;
        public const uint XONLINE_E_TEAMS_NAME_CONTAINS_BAD_WORDS                    = 0x8015210D;
        public const uint XONLINE_E_TEAMS_DESCRIPTION_CONTAINS_BAD_WORDS             = 0x8015210E;
        public const uint XONLINE_E_TEAMS_MOTTO_CONTAINS_BAD_WORDS                   = 0x8015210F;
        public const uint XONLINE_E_TEAMS_URL_CONTAINS_BAD_WORDS                     = 0x80152110;
        public const uint XONLINE_E_TEAMS_NOT_A_MEMBER                               = 0x80152111;
        public const uint XONLINE_E_TEAMS_NO_ADMIN                                   = 0x80152112;

        // errors returned by XUSER                                                  = 0x801522XX
        public const uint XONLINE_E_XUSER_ERROR                                      = 0x80152200;
        public const uint XONLINE_E_XUSER_KEY_NOT_FOUND                              = 0x80152201;
        public const uint XONLINE_E_XUSER_KEY_DECRYPTION_ERROR                       = 0x80152202;

        //
        // XBOS HRESULTS                                                             = 0x801530XX + 0x801531XX
        //
        public const uint XOFF_E_BAD_REQUEST                                         = 0x80153001;
        public const uint XOFF_E_INVALID_USER                                        = 0x80153002;
        public const uint XOFF_E_INVALID_OFFER_ID                                    = 0x80153003;
        public const uint XOFF_E_INELIGIBLE_FOR_OFFER                                = 0x80153004;
        public const uint XOFF_E_OFFER_EXPIRED                                       = 0x80153005;
        public const uint XOFF_E_SERVICE_UNREACHABLE                                 = 0x80153006;
        public const uint XOFF_E_PURCHASE_BLOCKED                                    = 0x80153007;
        public const uint XOFF_E_PURCHASE_DENIED                                     = 0x80153008;
        public const uint XOFF_E_BILLING_SERVER_ERROR                                = 0x80153009;
        public const uint XOFF_E_OFFER_NOT_CANCELABLE                                = 0x8015300A;
        public const uint XOFF_E_NOTHING_TO_CANCEL                                   = 0x8015300B;
        public const uint XOFF_E_ALREADY_OWN_MAX                                     = 0x8015300C;
        public const uint XOFF_E_NO_CHARGE                                           = 0x8015300D;
        public const uint XOFF_E_PERMISSION_DENIED                                   = 0x8015300E;
        public const uint XOFF_E_INVALID_PRODUCT                                     = 0x8015300F;

        public const uint XONLINE_E_BILLING_ERROR                                    = 0x80153000;  // server received incorrectly formatted request
        public const uint XONLINE_E_OFFERING_BAD_REQUEST                             = 0x80153001;  // server received incorrectly formatted request
        public const uint XONLINE_E_OFFERING_INVALID_USER                            = 0x80153002;  // cannot find account for this user
        public const uint XONLINE_E_OFFERING_INVALID_OFFER_ID                        = 0x80153003;  // offer does not exist
        public const uint DEPRECATED_XONLINE_E_OFFERING_INELIGIBLE_FOR_OFFER         = 0x80153004;  // )] private /title not allowed to purchase offer
        public const uint XONLINE_E_OFFERING_OFFER_EXPIRED                           = 0x80153005;  // offer no longer available
        public const uint XONLINE_E_OFFERING_SERVICE_UNREACHABLE                     = 0x80153006;  // apparent connectivity problems
        public const uint XONLINE_E_OFFERING_PURCHASE_BLOCKED                        = 0x80153007;  // this user is not allowed to make purchases
        public const uint XONLINE_E_OFFERING_PURCHASE_DENIED                         = 0x80153008;  // this user's payment is denied by billing provider
        public const uint XONLINE_E_OFFERING_BILLING_SERVER_ERROR                    = 0x80153009;  // nonspecific billing provider error
        public const uint XONLINE_E_OFFERING_OFFER_NOT_CANCELABLE                    = 0x8015300A;  // either this offer doesn't exist, or it's marked as un-cancelable
        public const uint XONLINE_E_OFFERING_NOTHING_TO_CANCEL                       = 0x8015300B;  // this user doesn't have one of these anyways
        public const uint XONLINE_E_OFFERING_ALREADY_OWN_MAX                         = 0x8015300C;  // this user already owns the maximum allowed
        public const uint XONLINE_E_OFFERING_NO_CHARGE                               = 0x8015300D;  // this is a free offer; no purchase is necessary
        public const uint XONLINE_E_OFFERING_PERMISSION_DENIED                       = 0x8015300E;  // permission denied
        public const uint XONLINE_E_OFFERING_NAME_TAKEN                              = 0x8015300F;  // Name given to XOnlineVerifyNickname is taken (dosen't vet)
        public const uint XONLINE_E_OFFERING_BASE_OFFER_NOT_CANCELABLE               = 0x80153010;  // Base subscription not cancelable due to dependent subscriptions
        public const uint XONLINE_E_AUTOUPD_MACHINE_BLOCKED                          = 0x80153011;  // No autoupd referrals given because machine puid is blocked
        public const uint XONLINE_E_OFFERING_INVALID_OFFER_TYPE                      = 0x80153012;  // PurchaseSubscription called with non-subscription offer or PurchaseContent called with non-content offer
        public const uint XONLINE_E_OFFERING_INVALID_CONSUME_ITEMS                   = 0x80153013;  // Consume was called with an asset that had insufficient quantity owned by the user.
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_OFFER_TYPE                = 0x80153014;  // A multi purchase was requested, but not all of the offers were of the allowed type for a multi-purchase
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_PAYMENT_TYPE              = 0x80153015;  // A multi purchase was requested with an unsupported payment type
        public const uint XONLINE_E_OFFERING_PRICE_CHANGED                           = 0x80153016;  // The client expected a certain price but that price didn't match the server-defined price
        public const uint DEPRECATED_XONLINE_E_OFFERING_NOT_ACQUIRABLE               = 0x80153017;  // A purchase was attempted on a video offer which is currently not Acquirable
        public const uint XONLINE_E_PENDING_POINTS_PURCHASE                          = 0x80153018;  // A points purchase is already pending, and so a new points purchase cannot be started
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_NOT_FOUND                  = 0x80153019;  // User has no subscription for given service component or service id
        public const uint XONLINE_E_OFFERING_UNKNOWN_OFFER_TYPE                      = 0x8015301A;  // Unknown offer type.
        public const uint XONLINE_E_OFFERING_UNKNOWN_PAYMENT_TYPE                    = 0x8015301B;  // Unknown payment type.
        public const uint DEPRECATED_XONLINE_E_OFFERING_INVALID_SOURCE_MACHINE       = 0x8015301C;  // The source machine is not allowed to participate in license transfers of this type
        public const uint DEPRECATED_XONLINE_E_OFFERING_INVALID_DEST_MACHINE         = 0x8015301D;  // The destination machine is not allowed to participate in license transfers of this type
        public const uint DEPRECATED_XONLINE_S_OTHER_LICENSE_TRANSFER_FAILED         = 0x0015301E;  // Success code indicating that the license transfer succeeded for the calling user, but one or more licenses on the box belonging to other users could not be migrated.
        public const uint XONLINE_S_USER_OWNS_NO_LICENSES                            = 0x0015301F;  // Success code indicating that the license transfer aborted for the calling user because he does not own any licenses on the old console.
        public const uint XONLINE_E_MEDIA_INSTANCE_NOT_ACQUIRABLE                    = 0x80153020;  // Success code indicating that the license transfer aborted for the calling user because he does not own any licenses on the old console.
        public const uint XONLINE_E_PURCHASE_PENDING                                 = 0x80153021;  // The user has a pending purchase transaction already.  Please wait and try again later.
        public const uint XONLINE_E_OFFERING_OFFER_MISCONFIGURED                     = 0x80153022;  // offer exists but is misconfigured in some way
        public const uint XONLINE_E_OFFERING_OFFER_NOT_VISIBLE                       = 0x80153023;  // offer exists but has a visibilityDate in the future
        public const uint XONLINE_E_OFFERING_VISIBLITY_STATUS_NOT_ALLOWED            = 0x80153024;  // offer exists but has a visibilityStatusId that does not allow purchase
        public const uint XONLINE_E_OFFERING_GRANTS_NOTHING                          = 0x80153025;  // offer exists but currently grants no mediaInstances, so purchase was blocked
        public const uint XONLINE_E_OFFERING_INVALID_PAYMENT_TYPE                    = 0x80153026;  // offer does not allow the given payment type
        public const uint XONLINE_E_OFFERING_MEDIA_TYPE_MISMATCH                     = 0x80153027;  // offer media type in the catalog does not match the given media type
        public const uint XONLINE_E_MULTI_PURCHASE_INVALID_PLATFORM_TYPE             = 0x80153028;  // A multi purchase was requested from a platform type that either could not be determed or is unsupported.
        public const uint XONLINE_E_BILLING_NOT_CONNECTED                            = 0x80153029;  // connection to billing system is not configured
        public const uint XONLINE_E_OFFERING_MISSING_RESULTS                         = 0x8015302A;  // expected additional results from sproc
        public const uint XONLINE_E_OFFERING_PAYMENT_INFO_TOO_LONG                   = 0x8015302B;  // length of payment info exceeds width of database columsn
        public const uint XONLINE_E_OFFERING_MIGRATION_ERROR                         = 0x8015302C;  // error migrating xbox1 offer to xenon offer
        public const uint XONLINE_E_GEOFENCING_LOOKUP_ERROR                          = 0x8015302D;  // geofencing returned an exception during lookup
        public const uint XONLINE_E_GEOFENCING_RETURNED_NULL                         = 0x8015302E;  // returned null from IP lookup
        public const uint XONLINE_E_OFFERING_VERIFY_TOKEN_ERROR                      = 0x8015302F;  // exception while verifying token
        public const uint XONLINE_E_BILLING_USER_QUEUED                              = 0x80153030;  // operation not allowed because user is queued
        public const uint XONLINE_E_BILLING_KEY_NOT_FOUND                            = 0x80153031;  // billing provider key is not configured
        public const uint XONLINE_E_BILLING_COUNTRY_ID_NOT_FOUND                     = 0x80153032;  // invalid country id
        public const uint XONLINE_E_BILLING_LOCALE_NOT_FOUND                         = 0x80153033;  // locale not found
        public const uint XONLINE_E_BILLING_QUEUED_ACCOUNT_NOT_FOUND                 = 0x80153034;  // error loading billing queue item
        public const uint XONLINE_E_OFFERING_AUTOUPD_ERROR                           = 0x80153035;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_BANNER_LIST_ERROR                       = 0x80153036;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_AVAILABLE_ERROR                 = 0x80153037;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_DETAILS_ERROR                   = 0x80153038;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_ENUMERATE_ERROR                 = 0x80153039;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_HISTORY_ERROR                   = 0x8015303A;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_REFERRAL_ERROR                  = 0x8015303B;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_UPDATE_ERROR                    = 0x8015303C;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_ENUMERATE_GENRES_ERROR                  = 0x8015303D;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_ENUMERATE_TITLES_ERROR                  = 0x8015303E;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_FIND_MEDIA_INSTANCE_URLS_ERROR          = 0x8015303F;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_GET_TITLE_ACTIVATION_ERROR              = 0x80153040;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_GET_TITLE_DETAILS_ERROR                 = 0x80153041;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_IN_GAME_CONTENT_AVAILABLE_ERROR         = 0x80153042;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_IN_GAME_CONTENT_ENUMERATE_ERROR         = 0x80153043;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_DETAILS_ERROR                           = 0x80153044;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_DETAILS_NO_USER_ERROR                   = 0x80153045;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_DETAILS_ERROR              = 0x80153046;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CANCEL_ERROR                            = 0x80153047;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_PURCHASE_OFFERS_ERROR                   = 0x80153048;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_SUBSCRIPTION_ENUMERATE_ERROR            = 0x80153049;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_VERIFY_NICKNAME_ERROR                   = 0x8015304A;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CONTENT_REFRESH_LICENSE_ERROR           = 0x8015304B;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_GET_POINTS_PURCHASE_STATUS_ERROR        = 0x8015304C;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_GET_REVOCATION_LIST_ERROR               = 0x8015304D;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_OFFER_PURCHASE_ERROR                    = 0x8015304E;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_PURCHASE_MUSIC_ERROR                    = 0x8015304F;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_CREATE_CERTIFICATE_ERROR                = 0x80153050;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_PURCHASE_GAMERTAG_ERROR                 = 0x80153051;  // non-specific (catch all) api error
        public const uint XONLINE_E_BILLING_PAYMENT_INFO_NOT_FOUND_ERROR             = 0x80153052;  // payment info not found
        public const uint XONLINE_E_BILLING_FRIENDLY_NAME_NOT_FOUND_ERROR            = 0x80153053;  // friendly name not found
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_ANNIVERSARY_DATE_ERROR    = 0x80153054;  // anniversary date was specified
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_ACCOUNT_ID_ERROR          = 0x80153055;  // account id was specified
        public const uint XONLINE_E_BILLING_CANNOT_SPECIFY_PAYMENT_ID_ERROR          = 0x80153056;  // payment instrument id was specified
        public const uint XONLINE_E_BILLING_AREA_CODE_NOT_FOUND_ERROR                = 0x80153057;  // area code not found
        public const uint XONLINE_E_BILLING_PHONE_NUMBER_NOT_FOUND_ERROR             = 0x80153058;  // phone number not found
        public const uint XONLINE_E_BILLING_ADDRESS_NOT_FOUND_ERROR                  = 0x80153059;  // address not found
        public const uint XONLINE_E_BILLING_ACCOUNT_HOLDER_NAME_NOT_FOUND_ERROR      = 0x8015305A;  // account holder name not found
        public const uint XONLINE_E_BILLING_ACCOUNT_NUMBER_NOT_FOUND_ERROR           = 0x8015305B;  // account number not found
        public const uint XONLINE_E_BILLING_EXPIRATION_DATE_NOT_FOUND_ERROR          = 0x8015305C;  // expiration date not found
        public const uint XONLINE_E_BILLING_BAD_CREDIT_CARD_TYPE_ERROR               = 0x8015305D;  // bad credit card type
        public const uint XONLINE_E_BILLING_BRANCH_CODE_NOT_FOUND_ERROR              = 0x8015305E;  // expiration date not found
        public const uint XONLINE_E_BILLING_EXTERNAL_REFERENCE_ID_NOT_FOUND          = 0x8015305F;  // external reference id not found
        public const uint XONLINE_E_BILLING_WHOLESALE_PARTNER_NOT_FOUND              = 0x80153060;  // wholesale partner id not found
        public const uint XONLINE_E_BILLING_ENCRYPTED_PASSWORD_NOT_FOUND             = 0x80153061;  // encrypted password id not found
        public const uint XONLINE_E_BILLING_STREET_1_NOT_FOUND_ERROR                 = 0x80153062;  // street 1 id not found
        public const uint XONLINE_E_BILLING_CITY_NOT_FOUND_ERROR                     = 0x80153063;  // city id not found
        public const uint XONLINE_E_BILLING_COUNTRY_CODE_NOT_FOUND_ERROR             = 0x80153064;  // country code not found
        public const uint XONLINE_E_BILLING_CHILD_CONTENT_PURCHASE_NOT_ALLOWED       = 0x80153065;  // child accounts not allowed to purchase content in the user's country
        public const uint XONLINE_E_BILLING_CALCULATE_TAX_ERROR                      = 0x80153066;  // non-specific error calling SCS CalculateTax
        public const uint XONLINE_E_BILLING_SUBMIT_ORDER_ERROR                       = 0x80153067;  // non-specific error calling SCS SubmitOrder
        public const uint XONLINE_E_BILLING_SCS_SQL_TRANSACTION_FAILED               = 0x80153068;  // a SQL transaction failed during an SCS SubmitOrder purchase
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_NOT_FOUND                = 0x80153069;  // the SCS SubmitOrder tracking guid could not be found
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_CANCELLED                = 0x8015306A;  // the SCS SubmitOrder tracking guid has already been cancelled
        public const uint XONLINE_E_BILLING_SCS_TRANSACTION_UNEXPECTED_STATE         = 0x8015306B;  // the SCS SubmitOrder tracking guid was found with an unexpected status id
        public const uint XONLINE_E_BILLING_CHILD_OFFER_PURCHASE_NOT_ALLOWED         = 0x8015306C;  // child accounts not allowed to purchase offer in user's country
        public const uint XONLINE_E_OFFERING_ASSET_CONSUME_ERROR                     = 0x8015306D;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_ASSET_ENUMERATE_ERROR                   = 0x8015306E;  // non-specific (catch all) api error
        public const uint XONLINE_E_OFFERING_SIGN_ASSETS_ERROR                       = 0x8015306F;  // non-specific (catch all) api error
        public const uint XONLINE_E_BILLING_FINBUS_MISSING_XNA_CREATOR_ID_ERROR      = 0x80153070;  // Media purchased is of type XNA Community Game but catalog looking did not find an XNA Creator Id
        public const uint XONLINE_E_BILLING_CTP_COMMUNICATION_ERROR                  = 0x80153075;  // Error raised when we communication exception is received from CTP
        public const uint XONLINE_E_BILLING_CTP_VALIDATION_RENEWAL_ERROR             = 0x80153076;   //Renewal Path Error
        public const uint XONLINE_E_BILLING_CTP_INVALIDRESPONSE                      = 0x80153077;   //Multiple nodes returned for Purchase call.Should not be happening.
        public const uint XONLINE_E_BILLING_CTP_AUTHORIZATION                        = 0x80153078;   //CTP Auth error
        public const uint XONLINE_E_BILLING_CTP_INVALID_PAYMENT                      = 0x80153079;   //Payment instrument errors
        public const uint XONLINE_E_BILLING_CTP_INVALID_TRACKING_GUID                = 0x8015307A;   //Invalid Tracking Guid
        public const uint XONLINE_E_BILLING_CTP_INVALID_PAYMENTPROVIDER              = 0x8015307B;   //Invalid Payment Provider
        public const uint XONLINE_E_BILLING_CTP_INVALID_CALLINGPARTNER               = 0x8015307C;   //Invalid Calling partner
        public const uint XONLINE_E_BILLING_CTP_INVALID_ITEM                         = 0x8015307D;   //Invalid Purchase Item passed
        public const uint XONLINE_E_BILLING_CTP_INVALID_TRANSACTIONSTATUS            = 0x8015307E;   //Invalid Transaction status
        public const uint XONLINE_E_BILLING_CTP_UNKNOWN                              = 0x8015307F;   //Unknown Error
        public const uint XONLINE_E_BILLING_CTP_INVALID_OFFER_NOTFOUND               = 0x80153080;   //OfferId not found for Billing OfferId
        public const uint XONLINE_E_BILLING_CTP_NOTSUPPORTED_MEDIATYPE               = 0x80153081;   //Mediatype not supported
        public const uint XONLINE_E_BILLING_CTP_INVALID_TOKEN                        = 0x80153082;   //Token is invalid
        public const uint XONLINE_E_BILLING_CTP_INVALID_SUB_OFFER_COUNT              = 0x80153083;   //More than one offer found for subscription purchase
        public const uint XONLINE_E_OFFERING_GET_LEGACYOFFER_ERROR                   = 0x80153084;   //Error encountered looking up legacy offerId
        public const uint XONLINE_E_OFFERING_GET_OFFERINSTANCE_ERROR                 = 0x80153085;   //Error looking up the mapping for OfferInstance and Offer
        public const uint XONLINE_E_OFFERING_INVALID_RENEWAL                         = 0x80153086;   //No renewal path existing
        public const uint XONLINE_E_OFFERING_MULTIPLE_RENEWAL                        = 0x80153087;   //Multiple renewal path existing
        public const uint XONLINE_E_BILLING_CTP_INVALID_TIMEEXTENSION                = 0x80153088;   //Time Extension passed is invalid
        public const uint XONLINE_E_BILLING_CTP_RATING_RULES_ERROR                   = 0x80153089;   //Invalid rating rules
        public const uint XONLINE_E_BILLING_CTP_INVALID_MODE                         = 0x8015308A;   //CTP Convert mode is invalid.Renewal not supported
        public const uint XONLINE_E_BILLING_CTP_NO_RETRYABLE_PURCHASE                = 0x8015308B;   //No retryable items in CTP queue
        public const uint XONLINE_E_BILLING_CTP_TRANSACTION_NOT_FOUND                = 0x8015308C;   //No transaction found update
        public const uint XONLINE_E_BILLING_CTP_RETRY_INTERVAL_EXCEEDED              = 0x8015308D;   //Retry interval exceeded
        public const uint XONLINE_E_BILLING_CTP_TRANSACTION_SQL_ERROR                = 0x8015308E;   //Unknown SQL error
        public const uint XONLINE_E_BILLING_CTP_QUEUE_ITERATOR_ERROR                 = 0x8015308F;   //Cannot build Queue Iterator
        public const uint XONLINE_E_BILLING_CTP_QUEUE_PURCHASE_INTENT_FAILURE        = 0x80153090;   //Error creating CTP Purchase intent
        public const uint XONLINE_E_BILLING_SUBSCRIPTION_CREDIT_VALUE_MAPPING_ERROR  = 0x80153091;   //Error loading CTP SubscriptionCreditValue mapping
        public const uint XONLINE_E_BILLING_BAD_CREDIT_VALUE                         = 0x80153092;   //Negative credit value configured
        public const uint XONLINE_E_OFFERING_GET_OFFERINGGUID_ERROR                  = 0x80153093;   //Error encountered looking up mapping for legacy id to guid
        public const uint XONLINE_E_OFFERING_GET_LEGACYID_ERROR                      = 0x80153094;   //Error encountered looking up mapping for guid to legacy id
        public const uint XONLINE_E_BILLING_CTP_PARTNERCONFIG_UNKNOWN_ERROR          = 0x80153095;   // Error encountered during CTP Partner Configuration
        public const uint XONLINE_E_BILLING_CTP_INVALID_OVERRIDDEN_PRICE             = 0x80153096;   // Overridden Price is negative
        public const uint XONLINE_E_BILLING_NOUNLIST_NOT_CONFIGURED                  = 0x80153097;   // Noun List not configured for country id
        public const uint XONLINE_E_BILLING_ADJECTIVELIST_NOT_CONFIGURED             = 0x80153098;   // Adjective List not configured for country id
        public const uint XONLINE_E_OFFERING_FAMILY_TO_CLASSIC_DOWNGRADE_NOT_ALLOWED = 0x80153099;  // Family Gold users cannot purchase a Classic Gold subscription. They must wait for their subscription to expire to Silver before they can downgrade to Gold.
        public const uint XONLINE_E_BILLING_CTP_DIRECT_DEBIT_NOT_SUPPORTED           = 0x8015309A;   // Direct Debit operation like convert is not supported in Mega API
        public const uint XONLINE_E_OFFERING_FAMILY_DEPENDENT_PURCHASE_NOT_ALLOWED   = 0x8015309B;   // Family Gold dependents cannot purchase classic gold or family gold subscriptions
        public const uint XONLINE_E_OFFERING_FAMILY_CHILD_PURCHASE_NOT_ALLOWED       = 0x8015309C;   // Child/Juvenille users cannot purchase family gold subscriptions
        public const uint XONLINE_E_OFFERING_ALREADY_OWN_MAX_MACHINE                 = 0x8015309D;   // PPV offer has already been purchased within the past 24 hours on the same machine/device i.e. this user already owns the maximum allowed on the machine -- see also XONLINE_E_OFFERING_ALREADY_OWN_MAX
        public const uint XONLINE_E_OFFERING_LICENSE_AVAILABLE                       = 0x8015309E;   // There is an existing license available that has not been downloaded and acknowledged for that offer -- see also XONLINE_E_OFFERING_ALREADY_OWN_MAX
        public const uint XONLINE_E_BILLING_CTP_INVALID_PRICE                        = 0x8015309F;   //Price passed from console does not match compute only
        public const uint XONLINE_E_BILLING_INVALID_TRACKING_GUID                    = 0x801530A0;   // Transaction id passed is not valid for this API or user

        //
        // XBOS success HRESULTS                                                     = 0x001531XX
        //
        public const uint XONLINE_S_OFFERING_NEW_CONTENT                             = 0x00153101;
        public const uint XONLINE_S_OFFERING_NO_NEW_CONTENT                          = 0x00153102;

        //
        // Internal DMP HRESULTS                                                     = 0x801532XX
        //
        public const uint XONLINE_E_DMP_TRANSACTION_CANCELLED                        = 0x80153200;  // the DMP transaction was cancelled
        public const uint XONLINE_E_DMP_CANT_GRANT_LICENSE                           = 0x80153201;  // there was an error adding a row to t_licenses
        public const uint XONLINE_E_DMP_CANT_REMOVE_LICENSE                          = 0x80153202;  // there was an error removing a row from t_licenses
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_CANCELLED                 = 0x80153203;  // there was an error marking a DMP transaction as cancelled
        public const uint XONLINE_E_DMP_CANCEL_SUCCESSFULL                           = 0x80153204;  // the call to CancelPurchaseItem returned successfully
        public const uint XONLINE_E_DMP_CANCEL_TRANS_NOT_FOUND                       = 0x80153205;  // the call to CancelPurchaseItem returned "transaction not found"
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_SUCCESS                   = 0x80153206;  // there was an error marking a DMP transaction as successfull
        public const uint XONLINE_E_DMP_UNEXPECTED_STATE                             = 0x80153207;  // the DMP transaction service encountered an unexpected state
        public const uint XONLINE_E_DMP_TRANSACTION_NOT_FOUND                        = 0x80153208;  // the DMP transaction guid could not be found in the table
        public const uint XONLINE_S_DMP_TRANSACTION_ALREADY_CANCELLED                = 0x00153209;  // the DMP transaction has already been cancelled
        public const uint XONLINE_S_DMP_NO_CANCELABLE_TRANSACTIONS                   = 0x0015320A;  // there are no DMP purchase transactions to be cancelled
        public const uint XONLINE_E_DMP_CANT_MARK_PURCHASE_CANCEL_FAILED             = 0x8015320B;  // there was an error marking a DMP transaction as cancelFailed
        public const uint XONLINE_S_DMP_NO_RETRYABLE_REWARD                          = 0x0015320C;  // there are no DMP reward transactions to be retriedg
        public const uint XONLINE_E_DMP_INVALID_REWARD                               = 0x8015320D;  // the reward does not exist or is misconfigured
        public const uint XONLINE_E_DMP_SQL_TRANSACTION_FAILED                       = 0x8015320E;  // a transaction failed to complete during a DMP operation
        public const uint XONLINE_S_DMP_RETRY_INTERVAL_EXCEEDED                      = 0x0015320F;  // a transaction was moved more to failure state because the retry interval was exceeded
        public const uint XONLINE_E_DMP_E_DELEGATE_NOT_SUPPORTED                     = 0x80153210;  // delegation not supported
        public const uint XONLINE_E_DMP_E_DESTINATION_ZERO                           = 0x80153211;  // error in destination puid's account
        public const uint XONLINE_E_DMP_E_INVALID_DESTINATION_ACCOUNT                = 0x80153212;  // destination billing account is invalid
        public const uint XONLINE_E_DMP_E_MAX_BALANCE_TRANSFER_PROVISIONAL_EXCEEDED  = 0x80153213;  // transfer maximum exceeded
        public const uint XONLINE_E_DMP_E_SOURCE_TRANSFER_PUIDS_SAME                 = 0x80153214;  // source and destination puids are the same
        public const uint XONLINE_E_DMP_E_SOURCE_ZERO                                = 0x80153215;  // error in source puid's account
        public const uint XONLINE_E_DMP_E_ZERO_NEGTIVE_TRANSFER                      = 0x80153216;  // error when source has zero points in account
        public const uint XONLINE_E_DMP_E_RISK_UNEXPECTED_RESULT                     = 0x80153217;  // Unexpected error in Risk data


        //
        // Internal XBOS HRESULTS                                                    = 0x801533XX
        //
        public const uint XONLINE_S_NO_RETRYABLE_SCS_PURCHASES                       = 0x00153300;  // there are no retryable SCS::PurchaseItem transactions
        public const uint XONLINE_E_SCS_TRANSACTION_NOT_FOUND                        = 0x80153301;  // the SCS transaction guid could not be found in the table
        public const uint XONLINE_E_CONTENT_NOT_FOUND                                = 0x80153302;  // Content not found
        public const uint XONLINE_E_MACHINE_ID_NOT_FOUND                             = 0x80153303;  // Machine id not found

        // DMP-specific XBOS HRESULTS                                                = 0x801534XX

        // internal hresults
        public const uint XONLINE_E_DMP_E_STATUS_UNREGISTERED                        = 0x80153400; // User is not registered with DMP.
        public const uint XONLINE_E_DMP_E_ORIGINAL_TRANSACTION_NOT_FOUND             = 0x80153401; // The original record was not found, possibly archived
        public const uint XONLINE_E_DMP_E_DUPLICATE_EXTERNAL_ORDER_ID                = 0x80153402; // returned from OrderItems if a duplicate orderId was passed into wcmusic.  Calling GetOrderByExternalOrderId should be called to get the updated status on that transaction, if needed.  Otherwise a new externalOrderID needs to be generated.

        // hresults that the client must be able to handle
        public const uint XONLINE_E_DMP_E_UNKNOWN_ERROR                              = 0x80153410; // Generic DMP error.  See server event log for specific details about what went wrong.
        public const uint XONLINE_E_DMP_E_REQUEST_CANNOT_BE_COMPLETED                = 0x80153411; // The request cannot be completed due to user state. If the user is disabled then AddPromotionalBalance cannot be called upon that user.
        public const uint XONLINE_E_DMP_E_INSUFFICIENT_BALANCE                       = 0x80153412; // There is not sufficient balance to support this transaction
        public const uint XONLINE_E_DMP_E_MAX_BALANCE_EXCEEDED                       = 0x80153413; // The result point balance will exceed the policy max balance
        public const uint XONLINE_E_DMP_E_MAX_ACQUISITION_EXCEEDED                   = 0x80153414; // The point amount exceeds the policy max acquisition limit per transaction
        public const uint XONLINE_E_DMP_E_MAX_CONSUMPTION_EXCEEDED                   = 0x80153415; // The user consumption per period of time would exceed the policy limit
        public const uint XONLINE_E_DMP_E_NO_MORE_PROMO_POINTS                       = 0x80153416; // There are no more points to distribute for this tenant sku combination. All the promo points for this partner's promotional SKU are gone already!
        public const uint XONLINE_E_DMP_E_PROMOTION_LIMIT_LIFE_MAX                   = 0x80153417; // The promotional points user obtained would exceed the sku limit. There is a configurable per user limit on each promotion. The partner sets it in offer modeling time
        public const uint XONLINE_E_DMP_E_PROMO_EXPIRED                              = 0x80153418; // The promotional SKU has expired. The enddate for a promo is a configured limit set by the partner. If a request comes in after that configured deadline then the request is rejected
        public const uint XONLINE_E_DMP_E_MAX_ACQUISITIONPERSPAN_EXCEEDED            = 0x80153419; // User attempt to acquire more points than is allowed in a given time span
        public const uint XONLINE_E_DMP_E_TARGETTRANSFER_INITIATED_WITHIN_NO_TRANSFER_WINDOW = 0x8015341A; // TransferBalance initiated within the no transfer window for the target account
        public const uint XONLINE_E_DMP_E_COUNTRY_CODE_MISMATCH                      = 0x8015341B; // TransferBalance failed because DMP source and destination accounts are in different countries
        public const uint XONLINE_E_DMP_E_USER_REGISTERED                            = 0x8015341C; // RegisterUser called for user already registered with DMP
        public const uint XONLINE_E_DMP_E_UNKNOWNSERVER_ERROR                        = 0x8015341D; // Unknown Server Error.
        public const uint XONLINE_E_DMP_E_SYSTEM_INTERNAL_ERROR                      = 0x8015341E; // A system internal error has occurred.
        public const uint XONLINE_E_DMP_E_INVALID_SOURCE_ACCOUNT                     = 0x8015341F; // Source Account is not in Active State for the Transaction.
        public const uint XONLINE_E_DMP_E_USER_DISABLED                              = 0x80153420; // User is disabled.
        public const uint XONLINE_E_DMP_E_PROMO_POINTS_UNAVAILIABLE                  = 0x80153421; // Promo points is unavailable
        public const uint XONLINE_E_DMP_E_INVALID_SKU                                = 0x80153422; // Sku passed for DMP purchase is invalid
        public const uint XONLINE_E_DMP_E_SOURCETRANSFER_INITIATED_WITHIN_NO_TRANSFER_WINDOW = 0x80153423; // TransferBalance initiated within the no transfer window for the source account

        //
        // XCBK HRESULTS                                                             = 0x801535XX
        //
        public const uint XCBK_E_INVALID_SVC_COMPONENT                               = 0x80153500;
        public const uint XCBK_E_SUBSCRIPTION_NOT_FOUND                              = 0x80153501;
        public const uint XCBK_E_KEY_NOT_FOUND_IN_MESSAGE                            = 0x80153502;
        public const uint XCBK_E_SETTING_KEY_NOT_FOUND                               = 0x80153503;
        public const uint XCBK_E_UNAUTHORIZED_REQUEST                                = 0x80153504;
        public const uint XCBK_E_UNKNOWN_ERROR                                       = 0x80153505;
        public const uint XCBK_E_SUBSCRIPTION_ACCOUNT_MISMATCH                       = 0x80153506;

        //
        // Diet Orange HResults                                                      = 0x8015360X
        //
        public const uint XONLINE_E_ORANGE_INVALID_REQUEST                           = 0x80153601;

        // MusicNet-specific XBOS HRESULTS                                           = 0x801537XX

        public const uint XONLINE_E_MUSICNET_BEGIN_ERROR_RANGE                       = 0x80153700; // marks beginning of musicnet-related error codes

        public const uint XONLINE_E_MUSICNET_UNKNOWN_ERROR                           = 0x80153700; // Generic MusicNet error.  See server event log for specific details about what went wrong.
        public const uint XONLINE_S_MUSICNET_NO_RETRYABLE_PURCHASE_ASSETS            = 0x00153701; // no retryable MusicNet.PurchaseAssets transactions were found
        public const uint XONLINE_E_MUSICNET_TRANSACTION_NOT_FOUND                   = 0x80153702; // the transaction guid could not be found in the table
        public const uint XONLINE_E_MUSICNET_ORDERITEMS_ITEMS_WITH_ERRORS            = 0x80153703; // a musicnet.orderitems call returned a non-empty itemsWithErrors
        public const uint XONLINE_E_MUSICNET_INVALID_ORDER_ID                        = 0x80153704; // musicnet already has processed the transaction with the specified order id (209)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_SUSPENDED_OR_CLOSED             = 0x80153705; // the musicnet account referenced has been suspended or is closed (424)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_SUBSCRIBER              = 0x80153706; // the musicnet account already has an active subscription offer. (216)
        public const uint XONLINE_E_MUSICNET_INVALID_CANCEL_REQUEST                  = 0x80153707; // Invalid cancelation request.  This account is already canceled. (204)
        public const uint XONLINE_E_MUSICNET_SUBSCRIPTION_ACCOUNT_CLOSED             = 0x80153708; // Subscription account closed. (233)
        public const uint XONLINE_E_MUSICNET_INVALID_SKU_NUMBER                      = 0x80153709; // Invalid SKU number. (207)
        public const uint XONLINE_E_MUSICNET_INVALID_TRANSACTION_DATE                = 0x8015370A; // Transaction date is in the future. Request denied. (206)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_CANCELED                        = 0x8015370B; // This account is canceled.  Requested operation not allowed. (205)
        public const uint XONLINE_E_MUSICNET_INVALID_RESUME_REQUEST                  = 0x8015370C; // Invalid resume request. This account is already active. (203)
        public const uint XONLINE_E_MUSICNET_CANNOT_CHANGE_OFFER                     = 0x8015370D; // Cannot change to an offer that is the same as the current offer. (202)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_HAS_EXPIRED_TRIAL               = 0x8015370E; // This account has an expired trial. Cannot change the queued offer. (201)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_TRIAL               = 0x8015370F; // Already have a trial. (228)
        public const uint XONLINE_E_MUSICNET_TRIAL_OFFER_EXPIRED                     = 0x80153710; // Trial offer has expired. (210)
        public const uint XONLINE_E_MUSICNET_MAXIMUM_PURCHASE_COMPONENTS_EXCEEDED    = 0x80153711; // Maximum number of purchase components per order exceeded. (229)
        public const uint XONLINE_E_MUSICNET_DUPLICATE_USER_NAME                     = 0x80153712; // Duplicate user name found (25)
        public const uint XONLINE_E_MUSICNET_INSUFFICIENT_FREE_TRACKS                = 0x80153713; // Insufficient free tracks remain to complete purchase (432)
        public const uint XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_QUEUED_OFFER        = 0x80153714; // Account already has a queued subscription offer (212)
        public const uint XONLINE_E_MUSICNET_INVALID_SUBSCRIPTION_FREE_PURCHASE       = 0x80153715; // Invalid subscription free purchase type(434)
        public const uint XONLINE_E_MUSICNET_CONTENT_RIGHT_UNAVAILABLE                = 0x80153716; // Content right not available for requested component(312)
        public const uint XONLINE_E_MUSICNET_END_ERROR_RANGE                         = 0x801537FF; // marks end of musicnet-related error codes

        // WMIS-specific XBOS HRESULTS                                               = 0x801538XX

        public const uint XONLINE_E_WMIS_UNKNOWN_ERROR                               = 0x80153800; // Generic WMIS error.  See server event log for specific details about what went wrong.
        public const uint XONLINE_E_WMIS_PURCHASE_DETAILS_NULL                       = 0x80153801; // WMIS is returning null on a GetVideoPurchaseDetails call.
        public const uint XONLINE_E_WMIS_UNKNOWN_ERROR_CONSOLE                       = 0x80153802; // Generic WMIS error on the console side.  The server should never return this error.
        public const uint DEPRECATED_XONLINE_E_WMIS_EMPTY_TITLE_TEXT                 = 0x80153803; // WMIS GetVideoPurchaseDetails returned an invalid empty title text field.

        // SyncCast-specific XBOS HRESULTS                                           = 0x801539XX
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_UNKNOWN_ERROR                = 0x80153900; // Generic SyncCast error.  See server event log for specific details about what went wrong.
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_LICENSE_TOO_LARGE            = 0x80153901; // SyncCast has returned a license too large to return to the client.
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_LICENSE_EMPTY                = 0x80153902; // SyncCast has returned an empty license when an exception was expected
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_CLIENT_CERT_INVALID          = 0x80153903; // Client cert is missing or invalid
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_CLIENT_CERT_ACCESS_DENIED    = 0x80153904; // Client cert access denied on the web service or the offer
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_INVALID_OFFER_ACTION         = 0x80153905; // An invalid action was requested for the given offer
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_REACHED_COUNTER_LIMIT        = 0x80153906; // Attempted to fulfill a request beyond the counter limit
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_REACHED_EXPIRATION_DATE      = 0x80153907; // Attempted to fulfill a request beyond the expiration date
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_EMPTY_DEVICE_NAME            = 0x80153908; // An empty device name was provided

        public const uint DEPRECATED_XONLINE_E_SYNCCAST_PLAYER_APP_REVOKED           = 0x80153A00; // The player application has been revoked
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_PLAYER_APP_SECURITY_UPGRADE  = 0x80153A01; // A security upgrade id required for the player application
        public const uint DEPRECATED_XONLINE_E_SYNCCAST_DEVICE_REVOKED               = 0x80153A02; // The device has been revoked


        // DRM License specific HRESULTS
        public const uint DEPRECATED_XONLINE_E_NO_VALID_LICENSE                      = 0x80153B01; // No license was available to acquire.
        public const uint DEPRECATED_XONLINE_E_VOD_LICENSE_EXPIRED                   = 0x80153B02; // Could not issue license as the VOD license acquisition window has closed
        public const uint DEPRECATED_XONLINE_E_NO_SCOID                              = 0x80153B03; // Could not retrieve SyncCast OfferId from WMIS
        public const uint DEPRECATED_XONLINE_E_VOD_INVALID_MACHINE                   = 0x80153B04; // Invalid machine.  Can only issue licenses to the purchasing machine.
        public const uint DEPRECATED_XONLINE_E_VOD_LICENSE_DELIVERED                 = 0x80153B05; // License has already been delivered and acknowledged
        // Internal FinBus HRESULTS                                                  = 0x80153CXX
        //

        public const uint XONLINE_S_FINBUS_NO_RETRYABLE_TRANSACTIONS                 = 0x00153C00;  // there are no retryable FinBus transactions in the t_finbus_transactions table
        public const uint XONLINE_E_FINBUS_TRANSACTION_NOT_FOUND                     = 0x80153C01;  // the FinBus transation does not exist in the t_finbus_transactions table
        public const uint XONLINE_E_FINBUS_SQL_TRANSACTION_FAILED                    = 0x80153C02;  // a SQL transaction using the t_finbus_transactions_table failed
        public const uint XONLINE_E_FINBUS_REDEMPTION_TRANSACTION_FAILED             = 0x80153C03;  // there was an error updating the FinBus item's status to Pending from PrePending
        public const uint XONLINE_S_FINBUS_RETRY_INTERVAL_EXCEEDED                   = 0x00153C04;  // a FinBus transaction was moved more to failure state becuase the retry interval was exceeded
        public const uint XONLINE_E_FINBUS_HEALTH_CHECK_ERROR                        = 0x80153C05;  // Error calling the finbus health check
        public const uint XONLINE_E_FINBUS_FAST_FAIL_ERROR                           = 0x80153C06;  // Fast fail error when calling FinBus endpoint
        public const uint XONLINE_E_FINBUS_PUBLISH_MESSAGE_ERROR                     = 0x80153C07;  // non-specific (catch all) FinBus PublishMessage error
        public const uint XONLINE_E_FINBUS_IS_SERVICE_ALIVE_ERROR                    = 0x80153C08;  // non-specific (catch all) FinBus IsServiceAlive error

        // Tracked API HRESULTs                                                      = 0x80153DXX
        public const uint XONLINE_E_TRACKED_API_DUPLICATE_TRACKING_GUID              = 0x80153D00;  // duplicate tracking guid found
        public const uint XONLINE_E_TRACKED_API_DATABASE_ERROR                       = 0x80153D01;  // error recording tracked api to database

        //
        // xuacs HRESULTS                                                            = 0x801540XX
        //
        public const uint XONLINE_S_ACCOUNTS_NAME_TAKEN                              = 0x00000010;

        public const uint XONLINE_E_ACCOUNTS_NAME_TAKEN                              = 0x80154000;
        public const uint XONLINE_E_ACCOUNTS_INVALID_KINGDOM                         = 0x80154001;
        public const uint XONLINE_E_ACCOUNTS_INVALID_USER                            = 0x80154002;
        public const uint XONLINE_E_ACCOUNTS_BAD_CREDIT_CARD                         = 0x80154003;
        public const uint XONLINE_E_ACCOUNTS_BAD_BILLING_ADDRESS                     = 0x80154004;
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_BANNED                          = 0x80154005;
        public const uint XONLINE_E_ACCOUNTS_PERMISSION_DENIED                       = 0x80154006;
        public const uint XONLINE_E_ACCOUNTS_INVALID_VOUCHER                         = 0x80154007;
        public const uint XONLINE_E_ACCOUNTS_DATA_CHANGED                            = 0x80154008; // unexpected modifications made during request.  commit is aborted to avoid overwriting modifcations.
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_ALREADY_USED                    = 0x80154009;
        public const uint XONLINE_E_ACCOUNTS_OPERATION_BLOCKED                       = 0x8015400A;
        public const uint XONLINE_E_ACCOUNTS_POSTAL_CODE_REQUIRED                    = 0x8015400B;
        public const uint XONLINE_E_ACCOUNTS_TRY_AGAIN_LATER                         = 0x8015400C;
        public const uint XONLINE_E_ACCOUNTS_NOT_A_RENEWAL_OFFER                     = 0x8015400D;
        public const uint XONLINE_E_ACCOUNTS_RENEWAL_IS_LOCKED                       = 0x8015400E;
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_REQUIRED                        = 0x8015400F;
        public const uint XONLINE_E_ACCOUNTS_ALREADY_DEPROVISIONED                   = 0x80154010;
        public const uint XONLINE_E_ACCOUNTS_INVALID_PRIVILEGE                       = 0x80154011;
        public const uint XONLINE_E_ACCOUNTS_INVALID_SIGNED_PASSPORT_PUID            = 0x80154012;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_ALREADY_LINKED                 = 0x80154013;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOX1_USER                  = 0x80154014;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_BAD_SUBSCRIPTION                = 0x80154015;
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_NOT_LINKED                     = 0x80154016;
        public const uint XONLINE_E_ACCOUNTS_NOT_XENON_USER                          = 0x80154017;
        public const uint XONLINE_E_ACCOUNTS_CREDIT_CARD_REQUIRED                    = 0x80154018;
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_NOT_XBOXCOM_USER                = 0x80154019;
        public const uint XONLINE_E_ACCOUNTS_NOT_A_VOUCHER_OFFER                     = 0x8015401A;
        public const uint XONLINE_E_ACCOUNTS_REACHED_TRIAL_OFFER_LIMIT               = 0x8015401B; // Can't use trial offer because the limit for this console has already been reached
        public const uint XONLINE_E_ACCOUNTS_XBOX1_MANAGEMENT_BLOCKED                = 0x8015401C; // A Xenon user is not allowed to access certain features (such as account management) from an xbox1 console
        public const uint XONLINE_E_ACCOUNTS_OFFLINE_XUID_ALREADY_USED               = 0x8015401D; // The provided offline xuid has already been used to create an account
        public const uint XONLINE_E_ACCOUNTS_BILLING_PROVIDER_TIMEOUT                = 0x8015401E; // The billing provider operation timed out
        public const uint XONLINE_E_ACCOUNTS_MIGRATION_OFFER_NOT_FOUND               = 0x8015401F; // The billing offer id for the Xbox1 migration offer was not found
        public const uint XONLINE_E_ACCOUNTS_UNDER_AGE                               = 0x80154020; // Request cannot be processed because user is under-age.
        public const uint XONLINE_E_ACCOUNTS_XBOX1_LOGON_BLOCKED                     = 0x80154021; // The user account is restricted from signing on with Xbox1 titles
        public const uint XONLINE_E_ACCOUNTS_VOUCHER_INVALID_FOR_TIER                = 0x80154022; // The voucher supplied is valid but not for the user's tier
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_QUEUED                  = 0x80154023; // The SwitchUserPassport operation was interrupted due to SCS or DB error and will be retried
        public const uint XONLINE_E_ACCOUNTS_SERVICE_NOT_PROVISIONED                 = 0x80154024; // The user account is not provisioned for this service type
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_UNBAN_BLOCKED                   = 0x80154025; // The user account has been permantely banned and cannot be revoked by a CUST tool
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_INELIGIBLE              = 0x80154026; // The user has switched passports less than 30 days ago
        public const uint XONLINE_E_ACCOUNTS_ADDITIONAL_DATA_REQUIRED                = 0x80154027; // The user has not provided address or phone information for XeSetAccountInfo
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_SCS_PENDING             = 0x80154028; // The user has a pending SCS points purchase request
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_NO_BIRTHDATE            = 0x80154029; // The user has no birthdate present in their Passport profile
        // NOTE - THE NUMBERS BELOW ARE OUT OF ORDER, BUT WE RELEASED IT SO IT STAYS
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NO_PRIVILEGE              = 0x8015102A; // User does not have privilege to graduate
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NOT_CHILD                 = 0x8015102B; // User does not have a child account
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NOT_ADULT                 = 0x8015102C; // User is not an adult (in their country)
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_NO_PI                     = 0x8015102D; // Client didn't specify payment instrument when one was required
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_PI_MISMATCH               = 0x8015102E; // User supplied existing payment instrument but personal information does not match
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_ALREADY                   = 0x8015102F; // User supplied is already graduated
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_ADULT_TO_CHILD          = 0x80154030; // The user has an adult account but is trying to switch to a juvenile Passport
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_QUEUED                    = 0x80151031; // Graduation of the user was queued
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_NEW_PASSPORT_INELIGIBLE = 0x80151032; // Cannot switch ownership of the specified account
        // NOTE - THE NUMBERS ABOVE ARE OUT OF ORDER, BUT WE RELEASED IT SO IT STAYS
        public const uint XONLINE_E_ACCOUNTS_NO_AUTHENTICATION_DATA                  = 0x80154033; // no authentication data was provided
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_CONFIG_ERROR                = 0x80154034; // npdb configuration of client types in t_multisettings is invalid
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_MISSING                     = 0x80154035; // client type is missing,  was not provided
        public const uint XONLINE_E_ACCOUNTS_CLIENT_TYPE_INVALID                     = 0x80154036; // client type provided is invalid
        public const uint XONLINE_E_ACCOUNTS_COUNTRY_NOT_AUTHORIZED                  = 0x80154037; // service type / client type combination is not authorized for specified country
        public const uint XONLINE_E_ACCOUNTS_TAG_CHANGE_REQUIRED                     = 0x80154038; // account is required to change their gamertag
        public const uint XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED                       = 0x80154039; // account is otherwise disabled, banned, suspended, etc. and requires management
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_NOT_ACCEPTED           = 0x8015403A; // account is otherwise disabled, banned, suspended, etc. and requires management
        public const uint XONLINE_E_ACCOUNTS_SET_NO_AGE_OUT_QUEUED                   = 0x8015403B; // set passport no age out flag operation has been queued
        public const uint XONLINE_E_BILLING_USERACCOUNT_USER_NOT_FOUND               = 0x8015403C; // User not found in GetANID call.
        public const uint XONLINE_E_BILLING_USERACCOUNT_INVALID_CLIENT               = 0x8015403D; // Invalid client in GetANID call.
        public const uint XONLINE_E_BILLING_USERACCOUNT_XUID_DOES_NOT_MATCH_USER     = 0x8015403E; // Xuid does not match user in GetANID call.
        public const uint XONLINE_E_ACCOUNTS_MIGRATION_ERROR                         = 0x8015403F; // unspecified error migrating an XBOX 1 offer
        public const uint XONLINE_E_ACCOUNTS_PUID_TO_ANID_ERROR                      = 0x80154040; // unspecified error converting puid to anid
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_LOAD_USER_ERROR                = 0x80154041; // Error loading user by pasport puid
        public const uint XONLINE_E_ACCOUNTS_SWITCH_PASSPORT_ERROR                   = 0x80154042; // unspecified error switching user passport
        public const uint XONLINE_E_ACCOUNTS_OFFLINE_XUID                            = 0x80154043; // offline xuid prevents operation
        public const uint XONLINE_E_ACCOUNTS_RECOVER_ACCOUNT_ERROR                   = 0x80154044; // unspecified error recovering account
        public const uint XONLINE_E_ACCOUNTS_RENEWAL_ERROR                           = 0x80154045; // unspecified subscription renewal error
        public const uint XONLINE_E_BILLING_USERACCOUNT_CONTACTLIST_GAMERTAGS_ERROR  = 0x80154046; // Failed to talk to ABCH.
        public const uint XONLINE_E_ACCOUNTS_PUID_TO_ANID_FAILED                     = 0x80154047; // Couldn't transform a puid to an anid.
        public const uint XONLINE_E_ACCOUNTS_UPDATE_XBOX_COM_ACTIVITY_ERROR          = 0x80154048; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_UPS_GET_PROFILE_ERROR                   = 0x80154059; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_UPS_UPDATE_PROFILE_ERROR                = 0x8015404A; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_ACCOUNT_INFO_ERROR                  = 0x8015404B; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ADD_PAYMENT_INSTRUMENT_ERROR            = 0x8015404C; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_ENCRYPTED_PROXY_PARAMETERS_ERROR = 0x8015404D; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_FRIEND_MEMBER_NAME_ERROR   = 0x8015404E; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_PUID_FROM_MEMBER_NAME_ERROR = 0x8015404F; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_SECRET_QUESTIONS_ERROR     = 0x80154050; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_LOGIN_ERROR                    = 0x80154051; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_ERROR                  = 0x80154052; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_STATUS_ERROR                = 0x80154053; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ARGO_SIGN_IN_ERROR                      = 0x80154054; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ARGO_AUTHENTICATE_ACCOUNT_ERROR         = 0x80154055; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_CHANGE_SUBSCRIPTION_PAYMENT_INSTRUMENT_ERROR = 0x80154056; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_CLEAR_SUBSCRIPTIONS_ERROR               = 0x80154057; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_CREATE_ACCOUNT_ERROR                    = 0x80154058; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_DISABLE_SUBSCRIPTION_ERROR              = 0x80154059; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ENUMERATE_ELIGIBLE_ERROR                = 0x8015405A; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_ANID_ERROR                          = 0x8015405B; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_LINKED_GAMERTAG_ERROR               = 0x8015405C; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_NO_AGE_OUT_ERROR                    = 0x8015405D; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_PAYMNET_INFO_ERROR                  = 0x8015405E; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_PAYMENT_INSTRUMENTS_ERROR           = 0x8015405F; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_POSTAL_CODE_ERROR                   = 0x80154060; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_STATUS_ERROR           = 0x80154061; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_INFO_ERROR                     = 0x80154062; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GRADUATE_USER_ERROR                     = 0x80154063; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_LINK_ACCOUNT_ERROR                      = 0x80154064; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_MIGRATE_USER_ERROR                      = 0x80154065; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_USER_DATA_ERROR            = 0x80154066; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_REMOVE_PAYMENT_INSTRUMENT_ERROR         = 0x80154067; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_RESERVE_NAME_ERROR                      = 0x80154068; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_RESTORE_ACCOUNT_ERROR                   = 0x80154069; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_NO_AGE_OUT_ERROR                    = 0x80154070; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_TERMS_OF_USE_ERROR                      = 0x80154071; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_PAYMENT_INFO_ERROR                  = 0x80154072; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_ACCOUNT_STATUS_ERROR                = 0x80154073; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_USER_PIN_ERROR                      = 0x80154074; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_USER_SETTINGS_ERROR                 = 0x80154075; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_TROUBLESHOOT_ACCOUNT_ERROR              = 0x80154076; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PARENTAL_CONTROLS_ERROR          = 0x80154077; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PAYMENT_INSTRUMENT_ERROR         = 0x80154078; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_VERIFY_BILLING_INFO_ERROR               = 0x80154079; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_VERIFY_BILLING_PIN_ERROR                = 0x8015407A; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_VERIFY_PARENT_CREDIT_CARD_ERROR         = 0x8015407B; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_VERIFY_VOUCHER_ERROR                    = 0x8015407C; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_VERIFY_VOUCHER_GET_OFFER_ERROR          = 0x8015407D; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_WEB_GET_USER_SETTINGS_ERROR             = 0x8015407E; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ACKNOWLEDGE_DOWNGRADE_ERROR             = 0x8015407F; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_INFO_ERROR                  = 0x80154080; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_ACCOUNT_INFO_FROM_PASSPORT_ERROR    = 0x80154081; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_POINTS_BALANCE_ERROR                = 0x80154082; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_SUBSCRIPTION_DETAILS_ERROR     = 0x80154083; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TYPE_ERROR                     = 0x80154084; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_WEB_INFO_ERROR                 = 0x80154085; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_CHANGE_PASSWORD_ERROR          = 0x80154086; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_CREATE_ERROR                   = 0x80154087; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_BUDDY_GAMERTAG_ERROR       = 0x80154088; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_RESERVE_GAMERTAG_ERROR                  = 0x80154089; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_MEMBER_NAME_ERROR          = 0x8015408A; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PAYPAL_UNSUPPORTED_COUNTRY              = 0x8015408B; // PayPal not supported in user's country
        public const uint XONLINE_E_ACCOUNTS_CANNOT_REPLACE_VALID_PASSPORT           = 0x8015408D;
        public const uint XONLINE_E_ACCOUNTS_REPLACE_OWNER_PASSPORT_ERROR            = 0x8015408E; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_REPLACE_USER_PASSPORT_ERROR             = 0x8015408F; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_REPLACE_PASSPORT_QUEUED                 = 0x80154090; // The XeReplaceUserPassport operation was interrupted due to SCS or DB error and will be retried
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_ERROR                   = 0x80154091; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_DATABASE_ERROR          = 0x80154092;
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_DATE_OF_BIRTH_ERROR         = 0x80154093; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SWITCH_OWNER_PASSPORT_ERROR             = 0x80154094; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_INVALID_OWNER_PASSPORT_ERROR            = 0x80154095;
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_INFO_ERROR             = 0x80154096; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_GET_BILLING_NOTIFICATIONS_ERROR         = 0x80154097; // no notifications found
        public const uint XONLINE_E_ACCOUNTS_USER_GET_ACCOUNT_INFO_ERROR             = 0x80154098; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_USER_OPTED_OUT                          = 0x80154099;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_POLICY               = 0x8015409A; // a configuration error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_TENURE               = 0x8015409B;
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_LEVELS               = 0x8015409C; // a configuration error
        public const uint XONLINE_E_ACCOUNTS_GET_USER_TENURE_NO_MILESTONES           = 0x8015409D; // a configuration error
        public const uint XONLINE_I_ACCOUNTS_GET_USER_TENURE_NO_NEXT_MILESTONE       = 0x0015409E; // a configuration error
        public const uint XONLINE_E_ACCOUNTS_GET_SUBSCRIPTION_INFO_SILVER_USER       = 0x8015409F; // User is a silver account...
        public const uint XONLINE_E_ACCOUNTS_CANNOT_UNGRADUATE_USER                  = 0x801540A0; // cannot change a user's birthday from adult to child
        public const uint XONLINE_E_ACCOUNTS_INVALID_AGE                             = 0x801540A1; // cannot change a user's birthday to a date in the future, or long ago
        public const uint XONLINE_E_ACCOUNTS_MAX_ACCOUNTS_REACHED                    = 0x801540A2; // Max number of xbox accounts created from a machine has been reached
        public const uint XONLINE_E_ACCOUNTS_GENERATE_GAMERTAG_ERROR                 = 0x801540A3; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_USER_FREE_GAMERTAG_CHANGE_NOT_ELIGIBLE_ERROR = 0x801540A4; // User is not eligible for Free gamertag change
        public const uint XONLINE_E_ACCOUNTS_GET_CONSOLE_TRUST_LEVEL                 = 0x801540A5; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SET_CONSOLE_TRUST_LEVEL                 = 0x801540A6; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_INVALID_CONSOLE_TRUST_LEVEL             = 0x801540A7; // Console Trust Level outside valid range
        public const uint XONLINE_E_ACCOUNTS_CREATE_MOBILE_ACCOUNT_ERROR             = 0x801540A8; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_ENUM_FAMILY_MEMBERS_ERROR               = 0x801540A9; // Error occurred during call to EnumFamilyMembers API
        public const uint XONLINE_E_ACCOUNTS_ADD_DEPENDENT_ERROR                     = 0x801540AA; // Error occurred during call to AddDependent API
        public const uint XONLINE_E_ACCOUNTS_INVALID_FAMILY_SUBSCRIPTION             = 0x801540AB; // No corresponding family subscription offer found in catalog.
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_BASE                  = 0x801540AC; // Dependent does not have base subscription
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_TIER                  = 0x801540AD; // Dependent is not silver
        public const uint XONLINE_E_ACCOUNTS_UNKNOWN_ERROR_CHANGE_STATE              = 0x801540AE; // Unknow error changing the state
        public const uint XONLINE_E_ACCOUNTS_UNKNOWN_ERROR_MOVE_DEP_SUBSCRIPTION     = 0x801540AF; // Unknow error moving dependent subscription
        public const uint XONLINE_E_ACCOUNTS_INVALID_COUNTRYID                       = 0x801540B0; // CountryDictionary.CountryCode returns null
        public const uint XONLINE_E_ACCOUNTS_INVALID_GAMERTAG                        = 0x801540B1; // VerifyGamerTag rejected gamertag
        public const uint XONLINE_E_ACCOUNTS_BIRTHDATE_INVALID                       = 0x801540B2; // Birthdate Invalid (future)
        public const uint XONLINE_E_ACCOUNTS_FORBIDDEN_GAMERTAG                      = 0x801540B3; // VetName failed for gamertag
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_ASSIGNMENT_INELIGIBLE_ERROR = 0x801540B4; // User is not elegible to be granted dependent gold right in family subscription
        public const uint XONLINE_E_ACCOUNTS_GET_PARENTAL_CONTROLS_ERROR             = 0x801540B5; // Error in parental controls
        public const uint XONLINE_E_ACCOUNTS_GET_DEPENDENT_SIGNED_PUID_ERROR         = 0x801540B6; // Error in GetDependentSignedPuid
        public const uint XONLINE_E_ACCOUNTS_GET_BASE_SUBSCRIPTION_ERROR             = 0x801540B7; // No Base subscription for the user
        public const uint XONLINE_E_ACCOUNTS_MULTIPLE_ACTIVE_BASE_SUBSCRIPTION       = 0x801540B8; // Multiple Active base subscription
        public const uint XONLINE_E_ACCOUNTS_NO_ACTIVE_BASE_SUBSCRIPTION             = 0x801540B9; // No Active base subscription
        public const uint XONLINE_E_ACCOUNTS_INVALID_FAMILYGOLD_CONVERTION_VALUE     = 0x801540BA; // Invalid value configured for Family gold convertion value
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_NOT_DEPENDENT_ERROR         = 0x801540BB; // User is not a dependent and can't be granted a gold seat in a family subscription
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_NO_SEATS_REMAIN_ERROR       = 0x801540BC; // A dependent can't be assigned a gold seat in a family subscription because no seats remain.
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_ALREADY_ASSIGNED_ERROR      = 0x801540BD; // A dependent can't be assigned a gold seat because they already occupy one
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_BILLING_REGION_ERROR        = 0x801540BE; // A dependent can't be assigned a gold seat because their billing region does not match the owner's
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_COOLDOWN_ERROR              = 0x801540BF; // A dependent can't be assigned a gold seat because the cooldown period has no expired
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_TOO_MANY_USERS_ERROR        = 0x801540C0; // A dependent can't be assigned a gold seat because too many dependents have been assigned to gold seats recently
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_UNTRUSTED_CONSOLE_ERROR     = 0x801540C1; // A dependent can't be assigned a gold seat because the console is not trusted
        public const uint XONLINE_E_ACCOUNTS_INVALID_MACHINEPUID                     = 0x801540C2; // Can't find the specified machine
        public const uint XONLINE_E_ACCOUNTS_INVALID_BETA_GROUPID                    = 0x801540C3; // Can't find the specified beta group
        public const uint XONLINE_E_ACCOUNTS_POINTS_TRANSFER_ERROR                   = 0x801540C4; // Unkown error transfering points balance
        public const uint XONLINE_E_ACCOUNTS_INVALID_DEPENDENT_PRIMARY               = 0x801540C5; // There is no parent child relationship between users
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_ERROR               = 0x801540C7; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INELIGIBLE          = 0x801540C8; // The user has switched countries less than one year ago
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INVALID_COUNTRY     = 0x801540C9; // The country requested is not a LIVE-enabled country
        public const uint XONLINE_E_ACCOUNTS_FAMILY_GOLD_DEPENDENT_HAS_FAMILY        = 0x801540CA; // A dependent can't be added because they have a family membership.
        public const uint XONLINE_E_ACCOUNTS_GET_PARENTAL_CONTROL_GROUP_TEMPLATES_ERROR = 0x801540CB; // Error in GetParentalControlGroupTemplates
        public const uint XONLINE_E_ACCOUNTS_GET_USER_PARENTAL_CONTROL_GROUP_ERROR   = 0x801540CC; // Error in GetUserParentalControlGroup
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_INVALID_LOCALE      = 0x801540CD; // The locale requested is not a valid LIVE locale
        public const uint XONLINE_S_ACCOUNTS_SWITCH_USER_COUNTRY_SAME_COUNTRY        = 0x001540CE; // The user requested a switch to the country already associated with their account
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_TRY_AGAIN           = 0x801540CF; // The operation was interrupted or timed out. Retry the call to determine the result.
        public const uint XONLINE_E_ACCOUNTS_UPDATE_PARENTAL_CONTROL_GROUP_ERROR     = 0x801540D0; // Error in UpdateParentalControlGroup
        public const uint XONLINE_E_ACCOUNTS_NEGATIVE_POINTS_VALUE                   = 0x801540D1; // Negative points value passed
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_ADULT_TO_CHILD      = 0x801540D2; // The user switching is an adult but would be a child in the new country.
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_DATABASE_ERROR      = 0x801540D3; // Database error as part of executing SwitchUserCountry
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_NO_MIGRATION_OFFER  = 0x801540D4; // No migration offer found for SwitchUserCountry
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_SUSPENDED_SUBSCRIPTION = 0x801540D5; // SwitchUserCountry does not allow migration for users with Xbox subscription which is suspended or expired
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_NON_XBOX_SUBSCRIPTION = 0x801540D6; // SwitchUserCountry does not allow migration for users with non-Xbox subscriptions such as Zune Pass, XNA Creators' Club, etc.
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_CHILD_ACCOUNT       = 0x801540D7; // SwitchUserCountry does not allow child accounts to migrate
        public const uint XONLINE_E_ACCOUNTS_SWITCH_USER_COUNTRY_FAMILY_ACCOUNT      = 0x801540D8; // SwitchUserCountry does not allow family accounts to migrate
        public const uint XONLINE_E_ACCOUNTS_GET_DEPENDENT_POINTS_BALANCE_ERROR      = 0x801540D9; // Unkown error getting dependent point balance
        public const uint XONLINE_E_ACCOUNTS_DEPENDENT_MOVE_SUBSCRIPTION             = 0x801540DA; // Error when moving dependents subscription
        public const uint XONLINE_E_ACCOUNTS_CREDENTIAL_LIST_BY_NAME_ERROR           = 0x801540DB; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_USER_GET_AGE_ERROR                      = 0x801540DC; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_USER_GET_AGE_GROUP_ERROR                = 0x801540DD; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_DEPENDENT_USER_IS_OWNER                 = 0x801540DE; // Error while creating owner a dependent user
        public const uint XONLINE_E_ACCOUNTS_OWNER_IS_DEPENDENT                      = 0x801540DF; // Error while creating dependent user as owner
        public const uint XONLINE_E_CREATE_BULK_USER_ERROR                           = 0x801540E0; // non-specific (catch all) api error
        public const uint XONLINE_E_USER_REWARDS_ELIGIBILITY_ERROR                   = 0x801540E1; // non-specific (catch all) api error
        public const uint XONLINE_E_SET_FAMILY_GOLD_SEAT_EXEMPTION_ERROR             = 0x801540E2; // non-specific (catch all) api error
        public const uint XONLINE_E_SET_FREE_GAMERTAG_ELIGIBLE_ERROR                 = 0x801540E3; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PREVIEW_SWITCH_USER_COUNTRY_ERROR       = 0x801540E4; // non-specific (catch all) api error
        public const uint XONLINE_S_ACCOUNTS_SWITCH_USER_COUNTRY_NO_MIGRATION_PATH   = 0x001540E5; // no country migration allowed from the current subscription offer
        public const uint XONLINE_S_ACCOUNTS_SWITCH_USER_COUNTRY_NO_MIGRATION_OFFER  = 0x001540E6; // no country  migration offer found for the subscription offer
        public const uint XONLINE_E_ACCOUNTS_SWITCH_OWNER_PASSPORT_USER_INELIGIBLE   = 0x801540E7; // user attempting to switch owner passport puids does not meet certain requirements
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_ADD_PROOF_ERROR                = 0x801540E8; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_PROOFS_ERROR               = 0x801540E9; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_PASSPORT_GET_PROOF_TYPES_ERROR          = 0x801540EA; // non-specific (catch all) api error
        public const uint XONLINE_E_ACCOUNTS_HCP_SERVICE_CALL_ERROR                  = 0x801540EB; // HCP service call failed

        // MSN RR-specific XBOS HRESULTS                                             = 0x801541XX
        public const uint XONLINE_E_MSNRR_BEGIN_ERROR_RANGE                          = 0x80154100; // marks beginning of msnrr-related error codes

        public const uint XONLINE_E_MSNRR_UNKNOWN_ERROR                              = 0x80154100; // Generic MSNRR error.  See server event log for specific details about what went wrong.
        public const uint XONLINE_E_MSNRR_INVALID_CONTENT_TYPE_ID                    = 0x80154101; // Invalid content type id. This error also occurs if content type does not have a rating attribute or review field.
        public const uint XONLINE_E_MSNRR_INVALID_ITEM_ID                            = 0x80154102; // Invalid item id
        public const uint XONLINE_E_MSNRR_PUID_CANNOT_BE_ZERO                        = 0x80154103; // PUID cannot be zero
        public const uint XONLINE_E_MSNRR_USE_MULTIPLE_RATING                        = 0x80154104; // Content type has multiple rating attribute ids, use the Multiple Rating Interface.
        public const uint XONLINE_E_MSNRR_INVALID_TRANSACTION_TOKEN                  = 0x80154105; // Token does not match request parameters, start over with no token.


        // Token related HRESULTS                                                    = 0x801542XX
        public const uint XONLINE_E_TOKEN_UNKNOWN_ERROR                              = 0x80154200; // Generic token error.  See server event log for specific details about what went wrong.
        public const uint XONLINE_E_TOKEN_FILE_NOT_FOUND                             = 0x80154201; // Token File Not Found
        public const uint XONLINE_E_TOKEN_REQUESTED_TOKENS_EXCEEDS_MAXIMUM_ALLOWABLE = 0x80154202;
        public const uint XONLINE_E_TOKEN_INVALID_START_PARAMETER                    = 0x80154203;
        public const uint XONLINE_E_TOKEN_MALFORMED_TOKEN_ENTRY_FOUND                = 0x80154204;
        public const uint XONLINE_E_TOKEN_MALFORMED_5X5_TOKEN_CODE_FOUND             = 0x80154205;
        public const uint XONLINE_E_TOKEN_FILE_COULD_NOT_BE_DECRYPTED                = 0x80154206;
        public const uint XONLINE_E_TOKEN_EOF_REACHED_BEFORE_ALL_TOKENS_RETRIEVED    = 0x80154207;
        public const uint XONLINE_E_TOKEN_JOB_NOT_IN_REQUIRED_STATE                  = 0x80154208;
        public const uint XONLINE_E_TOKEN_NOT_YET_REDEEMABLE                         = 0x80154209; // token cannot be redeemed yet because the token category is not flagged as redeemable
        public const uint XONLINE_E_TOKEN_LOAD_SCS_ERROR                             = 0x80154210;

        // Token category related HRESULTS                                           = 0x8015421X;
        public const uint XONLINE_E_TOKEN_DUPLICATE_CATEGORY_NAME                    = 0x80154211; // A duplicate token category name is found when trying to create a new token category.
        public const uint XONLINE_E_TOKEN_NO_CATEGORY_FOUND                          = 0x80154212; // Cannot find the token category.
        public const uint XONLINE_E_TOKEN_CATEGORY_READ_ONLY_PROPERTY_CHANGE         = 0x80154213; // The "read only" properties of token category cannot be changed.
        // Token Job related HRESULTS
        public const uint XONLINE_E_TOKEN_JOB_DATABASE_ERROR                         = 0x80154220; // Unexpected database error manipulating Token Job in NPDB
        public const uint XONLINE_E_TOKEN_JOB_NOT_FOUND                              = 0x80154221; // Token Job either not present or not currently in Pending or abandoned state
    // Token sequence number HRESULTS
        public const uint XONLINE_E_TOKEN_SEQUENCE_NUMBER_INVALID_INDEX              = 0x80154231; // We can't generate sequence number because the index is too large.
        public const uint XONLINE_E_TOKEN_EXPIRED_TOKEN_CATEGORY                     = 0x80154232; // Tokens cannot be generated for an expired token category

        //
        // Notification HRESULTS                                                     = 0x801550XX
        //
        public const uint XONLINE_E_NOTIFICATION_BAD_CONTENT_TYPE                    = 0x80155000;
        public const uint XONLINE_E_NOTIFICATION_REQUEST_TOO_SMALL                   = 0x80155001;
        public const uint XONLINE_E_NOTIFICATION_INVALID_MESSAGE_TYPE                = 0x80155002;
        public const uint XONLINE_E_NOTIFICATION_NO_ADDRESS                          = 0x80155003;
        public const uint XONLINE_E_NOTIFICATION_INVALID_PUID                        = 0x80155004;
        public const uint XONLINE_E_NOTIFICATION_NO_CONNECTION                       = 0x80155005;
        public const uint XONLINE_E_NOTIFICATION_SEND_FAILED                         = 0x80155006;
        public const uint XONLINE_E_NOTIFICATION_RECV_FAILED                         = 0x80155007;
        public const uint XONLINE_E_NOTIFICATION_MESSAGE_TRUNCATED                   = 0x80155008;

        //
        // Match Service HRESULTS                                                    = 0x801551XX
        //
        public const uint XONLINE_E_MATCH_INVALID_SESSION_ID                         = 0x80155100;  // specified session id does not exist
        public const uint XONLINE_E_MATCH_INVALID_TITLE_ID                           = 0x80155101;  // specified title id is zero, or does not exist
        public const uint XONLINE_E_MATCH_INVALID_DATA_TYPE                          = 0x80155102;  // attribute ID or parameter type specifies an invalid data type
        public const uint XONLINE_E_MATCH_REQUEST_TOO_SMALL                          = 0x80155103;  // the request did not meet the minimum length for a valid request
        public const uint XONLINE_E_MATCH_REQUEST_TRUNCATED                          = 0x80155104;  // the self described length is greater than the actual buffer size
        public const uint XONLINE_E_MATCH_INVALID_SEARCH_REQ                         = 0x80155105;  // the search request was invalid
        public const uint XONLINE_E_MATCH_INVALID_OFFSET                             = 0x80155106;  // one of the attribute/parameter offsets in the request was invalid.  Will be followed by the zero based offset number.
        public const uint XONLINE_E_MATCH_INVALID_ATTR_TYPE                          = 0x80155107;  // the attribute type was something other than user or session
        public const uint XONLINE_E_MATCH_INVALID_VERSION                            = 0x80155108;  // bad protocol version in request
        public const uint XONLINE_E_MATCH_OVERFLOW                                   = 0x80155109;  // an attribute or parameter flowed past the end of the request
        public const uint XONLINE_E_MATCH_INVALID_RESULT_COL                         = 0x8015510A;  // referenced stored procedure returned a column with an unsupported data type
        public const uint XONLINE_E_MATCH_INVALID_STRING                             = 0x8015510B;  // string with length-prefix of zero, or string with no terminating null
        public const uint XONLINE_E_MATCH_STRING_TOO_LONG                            = 0x8015510C;  // string exceeded 400 characters
        public const uint XONLINE_E_MATCH_BLOB_TOO_LONG                              = 0x8015510D;  // blob exceeded 800 bytes
        public const uint XONLINE_E_MATCH_INVALID_ATTRIBUTE_ID                       = 0x80155110;  // attribute id is invalid
        public const uint XONLINE_E_MATCH_SESSION_ALREADY_EXISTS                     = 0x80155112;  // session id already exists in the db
        public const uint XONLINE_E_MATCH_CRITICAL_DB_ERR                            = 0x80155115;  // critical error in db
        public const uint XONLINE_E_MATCH_NOT_ENOUGH_COLUMNS                         = 0x80155116;  // search result set had too few columns
        public const uint XONLINE_E_MATCH_PERMISSION_DENIED                          = 0x80155117;  // incorrect permissions set on search sp
        public const uint XONLINE_E_MATCH_INVALID_PART_SCHEME                        = 0x80155118;  // title specified an invalid partitioning scheme
        public const uint XONLINE_E_MATCH_INVALID_PARAM                              = 0x80155119;  // bad parameter passed to sp
        public const uint XONLINE_E_MATCH_DATA_TYPE_MISMATCH                         = 0x8015511D;  // data type specified in attr id did not match type of attr being set
        public const uint XONLINE_E_MATCH_SERVER_ERROR                               = 0x8015511E;  // error on server not correctable by client
        public const uint XONLINE_E_MATCH_NO_USERS                                   = 0x8015511F;  // no authenticated users in search request.
        public const uint XONLINE_E_MATCH_INVALID_BLOB                               = 0x80155120;  // invalid blob attribute
        public const uint XONLINE_E_MATCH_TOO_MANY_USERS                             = 0x80155121;  // too many users in search request
        public const uint XONLINE_E_MATCH_INVALID_FLAGS                              = 0x80155122;  // invalid flags were specified in a search request
        public const uint XONLINE_E_MATCH_PARAM_MISSING                              = 0x80155123;  // required parameter not passed to sp
        public const uint XONLINE_E_MATCH_TOO_MANY_PARAM                             = 0x80155124;  // too many paramters passed to sp or in request structure
        public const uint XONLINE_E_MATCH_DUPLICATE_PARAM                            = 0x80155125;  // a paramter was passed to twice to a search procedure
        public const uint XONLINE_E_MATCH_TOO_MANY_ATTR                              = 0x80155126;  // too many attributes in the request structure
        public const uint XONLINE_E_MATCH_CONCURRENT_REQ_CONFLICT                    = 0x80155127;  // this request conflicted with another that was in progress
        public const uint XONLINE_E_MATCH_SESSION_TYPE_MISMATCH                      = 0x80155128;  // this request was operation of a row type (breadcrumb vs. sandwich) which mismatched.
        public const uint XONLINE_E_MATCH_LOCK_ALREADY_RELEASED                      = 0x80155129;  // the session was expected to be locked, but it was actually unlocked..

        //
        // Session API HRESULTS                                                      = 0x801552XX
        //
        public const uint XONLINE_E_SESSION_NOT_FOUND                                = 0x80155200;   // the specified session was not found
        public const uint XONLINE_E_SESSION_INSUFFICIENT_PRIVILEGES                  = 0x80155201;   // the requester does not have permissions to perform this operation

        //
        // Audit API HRESULTS                                                        = 0x80155300 - 0x8015537F
        // These don't ever go on the wire.
        //
        public const uint XONLINE_E_AUDIT_INVALID_SUBSYSTEM                          = 0x80155300;   // use specified unknown subsystem
        public const uint XONLINE_E_AUDIT_NO_SETTING                                 = 0x80155301;   // npdb setting for subsystem does not defined
        public const uint XONLINE_E_AUDIT_LOG_FAILURE                                = 0x80155302;   // error writing to audit log (database)

        //
        // Fse API HRESULTS                                                          = 0x80155380 - 0x801553FF
        //
        public const uint XONLINE_E_FSE_ERROR                                        = 0x80155380;   // generic unhandled fse exception
        public const uint XONLINE_E_FSE_BOOKMARK_INVALID_SETTING                     = 0x80155381;   // invalid bookmark setting (range)
        public const uint XONLINE_E_FSE_BOOKMARK_NO_SETTING                          = 0x80155382;   // missing bookmark setting

        public const uint XONLINE_E_FSE_HANDLER_MISSING                              = 0x80155388;   // application page or result handler is missing
        public const uint XONLINE_E_FSE_HANDLER_CREATE_ERROR                         = 0x80155389;   // unhandled application exception derializing result
        public const uint XONLINE_E_FSE_HANDLER_MERGE_ERROR                          = 0x8015538A;   // unhandled application exception merge pages
        public const uint XONLINE_E_FSE_HANDLER_EXTRACT_ERROR                        = 0x8015538B;   // unhandled application exception extracting from page
        public const uint XONLINE_E_FSE_HANDLER_SPLIT_ERROR                          = 0x8015538C;   // unhandled application exception splitting page

        public const uint XONLINE_E_FSE_CACHE_INVALID_EXPIRATION                     = 0x80155390;   // invalid cache expriation time
        public const uint XONLINE_E_FSE_CACHE_KEY_TOO_LONG                           = 0x80155391;   // cache key is longer than xbanc configuration setting
        public const uint XONLINE_S_FSE_CACHE_ENTRY_FOUND                            = 0x00155392;   // cache entry found successfully
        public const uint XONLINE_E_FSE_CACHE_TIMEOUT                                = 0x80155393;   // timeout waiting for cache entry
        public const uint XONLINE_E_FSE_CACHE_ERROR                                  = 0x80155394;   // exception thrown out of xbanc proxy
        public const uint XONLINE_E_FSE_CACHE_QUERY_ERROR                            = 0x80155395;   // exception thrown out of xbanc proxy
        public const uint XONLINE_E_FSE_CACHE_INSERT_ERROR                           = 0x80155396;   // exception thrown out of xbanc proxy

        public const uint XONLINE_E_FSE_CONFIG_METHOD_NOT_FOUND                      = 0x801553A0;   // configured method was not found
        public const uint XONLINE_E_FSE_CONFIG_NO_INTERFACE                          = 0x801553A1;   // no interface for configured method
        public const uint XONLINE_E_FSE_CONFIG_PARAM_ERROR                           = 0x801553A2;   // parameter configuration is invalid (couldn't be parsed)
        public const uint XONLINE_E_FSE_CONFIG_UNKNOWN_TYPE                          = 0x801553A3;   // unknown parameter type (won't be able to convert)
        public const uint XONLINE_E_FSE_CONFIG_MIN_OCCURS_INVALID                    = 0x801553A4;   // minOccurs < 0
        public const uint XONLINE_E_FSE_CONFIG_MAX_OCCURS_INVALID                    = 0x801553A5;   // maxOccurs < 1
        public const uint XONLINE_E_FSE_CONFIG_OCCURENCE_INVERSION                   = 0x801553A6;   // minOccurs > maxOccurs
        public const uint XONLINE_E_FSE_CONFIG_DUPLICATE_DELEGATE                    = 0x801553A7;   // parameter delegate already exists
        public const uint XONLINE_E_FSE_CONFIG_PAGE_SIZE_INVALID                     = 0x801553A8;   // cache page size or db page size are invalid

        public const uint XONLINE_E_FSE_DATABASE_ERROR                               = 0x801553B0;   // generic database error
        public const uint XONLINE_E_FSE_DATABASE_CONNECT_ERROR                       = 0x801553B1;   // generic database connection error
        public const uint XONLINE_E_FSE_DATABASE_EXECUTE_ERROR                       = 0x801553B2;   // generic database execute error

        public const uint XONLINE_E_FSE_METHOD_ERROR                                 = 0x801553C0;   // generic method error
        public const uint XONLINE_E_FSE_METHOD_NOT_FOUND                             = 0x801553C1;   // method called by user does not exist
        public const uint XONLINE_E_FSE_METHOD_RETRY_COUNT_EXCEEDED                  = 0x801553C2;   // retry count exceeded when calling database
        public const uint XONLINE_E_FSE_METHOD_RESULT_NOT_PAGED                      = 0x801553C3;   // error constructing paged result

        public const uint XONLINE_E_FSE_PARAM_LIST_INVALID                           = 0x801553D0;   // number of names and values do not match
        public const uint XONLINE_E_FSE_PARAM_MISSING                                = 0x801553D1;   // missing required (non-optional) parameter
        public const uint XONLINE_E_FSE_PARAM_UNEXPECTED                             = 0x801553D2;   // extra unrecognized / unexpected parameter
        public const uint XONLINE_E_FSE_PARAM_INTERNAL_ERROR                         = 0x801553D3;   // internal programming error
        public const uint XONLINE_E_FSE_PARAM_TOO_MANY                               = 0x801553D4;   // too many parameters
        public const uint XONLINE_E_FSE_PARAM_INVALID_VALUE                          = 0x801553D5;   // invalid param value (fails regex checks)
        public const uint XONLINE_E_FSE_PARAM_CONVERSION_ERROR                       = 0x801553D6;   // error converting value to configured type
        public const uint XONLINE_E_FSE_PARAM_DELEGATE_FAILURE                       = 0x801553D7;   // a parameter modifying delegate defined by the application threw an exception
        public const uint XONLINE_E_FSE_PARAM_IS_NULL                                = 0x801553D8;   // required parameter is null
        public const uint XONLINE_E_FSE_PARAM_TOO_FEW                                = 0x801553D9;   // number of values are is too few
        public const uint XONLINE_E_FSE_PARAM_INTERNAL                               = 0x801553DA;   // supplied parameter is internal only
        public const uint XONLINE_E_FSE_PARAM_RESERVED                               = 0x801553DB;   // supplied parameter name is reserved

        public const uint XONLINE_E_FSE_BIN_ERROR_EXECUTING                          = 0x801553E0;   // Error executing the FsePlugin
        public const uint XONLINE_E_FSE_BIN_ERROR_CONSTRUCTING                       = 0x801553E1;   // Error contructing the FsePlugin

        //
        // Catalog Stored Procedure HRESULTS                                         = 0x80155400 - 0x8015547F
        //
        public const uint XONLINE_E_CATALOG_INVALID_DETAIL_VIEW                      = 0x80155400;   // detail view value is invalid
        public const uint XONLINE_E_CATALOG_INVALID_OFFER_FILTER_LEVEL               = 0x80155401;   // offer filter level value is invalid
        public const uint XONLINE_E_CATALOG_INVALID_ORDER_BY                         = 0x80155402;   // order by value is invalid
        public const uint XONLINE_E_CATALOG_INVALID_ORDER_DIRECTION                  = 0x80155403;   // order direction value is invalid
        public const uint XONLINE_E_CATALOG_INVALID_RANKING_TYPE                     = 0x80155404;   // invalid ranking type in full text search
        public const uint XONLINE_E_CATALOG_INVALID_LOCALE                           = 0x80155405;   // invalid locale in full text search
        public const uint XONLINE_E_CATALOG_INVALID_VIDEO_FILTER                     = 0x80155406;   // invalid video filter in FindVideos
        public const uint XONLINE_E_CATALOG_INVALID_EDITORIAL_PRIV                   = 0x80155407;   // invalid editorial privilege

        public const uint XONLINE_E_CATALOG_INVALID_SETTING                          = 0x80155410;   // catalog service could not process a setting update
        public const uint XONLINE_E_CATALOG_ERROR                                    = 0x80155411;   // unspecified catalog error
        public const uint XONLINE_E_CATALOG_DESERIALIZATION_ERROR                    = 0x80155412;   // could not deserialize catalog result
        public const uint XONLINE_E_CATALOG_SUBSCRIPTIONS_INVALID_ARGS               = 0x80155413;   // Invalid Argument passed to FindSubscriptionProducts API

        // Service Tunnel HRESULTS                                                   = 0x80155480 - 0x801554FF

        public const uint XONLINE_E_SVCTUNNEL_ERROR                                  = 0x80155480; // unspecified svctunnel error
        public const uint XONLINE_E_SVCTUNNEL_TIMEOUT                                = 0x80155481; // svctunnel timeout error
        public const uint XONLINE_E_SVCTUNNEL_GET_USER_INFO_ERROR                    = 0x80155482; // unspecified svctunnel get user info error
        public const uint XONLINE_E_SVCTUNNEL_SEND_USER_FEEDBACK_ERROR               = 0x80155483; // unspecified svctunnel send feedback error
        public const uint XONLINE_E_SVCTUNNEL_GET_GAMERTAG_ERROR                     = 0x80155484; // unspecified svctunnel get gamertag error
        public const uint XONLINE_E_SVCTUNNEL_GET_USER_ID_ERROR                      = 0x80155485; // unspecified svctunnel get user id error
        public const uint XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR                      = 0x80155486; // unspecified svctunnel get friends error
        public const uint XONLINE_E_SVCTUNNEL_GET_MESSAGES_ERROR                     = 0x80155487; // unspecified svctunnel get messages error
        public const uint XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR                   = 0x80155488; // unspecified svctunnel friend request error
        public const uint XONLINE_E_SVCTUNNEL_GAME_INVITE_ERROR                      = 0x80155489; // unspecified svctunnel game invite error
        public const uint XONLINE_E_SVCTUNNEL_MUTE_USER_ERROR                        = 0x8015548A; // unspecified svctunnel mute user error
        public const uint XONLINE_E_SVCTUNNEL_SET_NOTIFICATION_ERROR                 = 0x8015548B; // unspecified svctunnel set notification error

        //
        // XCrypto HRESULTS                                                          = 0x801555XX
        //
        public const uint XONLINE_E_XCRYPTO_ERROR                                    = 0x80155500;   // Generic error
        public const uint XONLINE_E_XCRYPTO_CONFIG_ERROR                             = 0x80155501;   // NPDB configuration error.
        public const uint XONLINE_E_XCRYPTO_KEY_ERROR                                = 0x80155502;   // Error creating crypto key.
        public const uint XONLINE_E_XCRYPTO_CACHE_ERROR                              = 0x80155503;   // Error creating / refreshing a cache.  Most likely due to a key error.
        public const uint XONLINE_E_XCRYPTO_REQUEST_FAILED                           = 0x80155504;   // An xcrypto request has failed.
        public const uint XONLINE_E_XCRYPTO_NCIPHER_ERROR                            = 0x80155505;   // Error calling down into nCipher wrap, which goes down to the nCipher hardware device.

        //
        // Messaging Service HRESULTS                                                = 0x80155AXX
        //
        public const uint XONLINE_E_MESSAGE_INVALID_MESSAGE_ID                       = 0x80155A01;   // the specified message was not found
        public const uint XONLINE_E_MESSAGE_PROPERTY_DOWNLOAD_REQUIRED               = 0x80155A02;   // the property was too large to fit into the details block, it must be retrieved separately using XOnlineMessageDownloadAttachmentxxx
        public const uint XONLINE_E_MESSAGE_PROPERTY_NOT_FOUND                       = 0x80155A03;   // the specified property tag was not found
        public const uint XONLINE_E_MESSAGE_NO_VALID_SENDS_TO_REVOKE                 = 0x80155A04;   // no valid sends to revoke were found
        public const uint XONLINE_E_MESSAGE_NO_MESSAGE_DETAILS                       = 0x80155A05;   // the specified message does not have any details
        public const uint XONLINE_E_MESSAGE_INVALID_TITLE_ID                         = 0x80155A06;   // an invalid title ID was specified
        public const uint XONLINE_E_MESSAGE_SENDER_BLOCKED                           = 0x80155A07;   // a send failed because the recipient has blocked the sender
        public const uint XONLINE_E_MESSAGE_MAX_DETAILS_SIZE_EXCEEDED                = 0x80155A08;   // the property couldn't be added because the maximum details size would be exceeded
        public const uint XONLINE_E_MESSAGE_INVALID_MESSAGE_TYPE                     = 0x80155A09;
        public const uint XONLINE_E_MESSAGE_USER_OPTED_OUT                           = 0x80155A0A;
        public const uint XONLINE_E_MESSAGE_INSUFFICIENT_PRIVILEGES                  = 0x80155A0B;   // the sender does not have permissions to send this message
        public const uint XONLINE_E_MESSAGE_UNDELIVERABLE                            = 0x80155A0C;   // the recipient does not have permissions to receive this message
        public const uint XONLINE_E_MESSAGE_THROTTLED                                = 0x80155A0D;  // the sender has sent too many messages today.
        // Success codes returned by Messages                                        = 0x00155AXX
        public const uint XONLINE_S_MESSAGE_PENDING_SYNC                             = 0x00155A01;   // updated message list is currently being retrieved (after logon or disabling summary refresh), returned results may be out of date

        //
        // Errors returned by uodb procs                                             = 0x801560XX
        //
        public const uint XONLINE_E_UODB_KEY_ALREADY_EXISTS                          = 0x80156000;  // service key already exists when attempting to insert key
        public const uint XONLINE_E_UODB_INEXISTENT_TITLE_ID                         = 0x80156001;
        public const uint XONLINE_E_UODB_KEY_NOT_FOUND                               = 0x80156002;
        public const uint XONLINE_E_SERVICE_KEY_NOT_FOUND                            = 0x80156002;
        public const uint XONLINE_E_UODB_INEXISTENT_OFFER_ID                         = 0x80156003;
        public const uint XONLINE_E_SERVICE_KEY_IMPORT_ERROR                         = 0x80156004;
        public const uint XONLINE_E_UODB_INVALID_SUBSCRIPTION_PAYMENT_TYPE           = 0x80156005;
        public const uint XONLINE_E_UODB_DUPLICATE_SUBSCRIPTION_INFO                 = 0x80156006;

        //
        // Query service HRESULTS                                                    = 0x801561XX
        //
        public const uint XONLINE_E_QUERY_ERROR                                      = 0x80156100; // unspecified query error
        public const uint XONLINE_E_QUERY_QUOTA_FULL                                 = 0x80156101; // this user or team's quota for the dataset is full.  you must remove an entity first.
        public const uint XONLINE_E_QUERY_ENTITY_NOT_FOUND                           = 0x80156102; // the requested entity didn't exist in the provided dataset.
        public const uint XONLINE_E_QUERY_PERMISSION_DENIED                          = 0x80156103; // the user tried to update or delete an entity that he didn't own.
        public const uint XONLINE_E_QUERY_ATTRIBUTE_TOO_LONG                         = 0x80156104; // attribute passed exceeds schema definition
        public const uint XONLINE_E_QUERY_UNEXPECTED_ATTRIBUTE                       = 0x80156105; // attribute passed was a bad param for the database operation
        public const uint XONLINE_E_QUERY_RETHROW_ERROR                              = 0x80156106; // rethrow the original exception (used internally only)
        public const uint XONLINE_E_QUERY_INVALID_ACTION                             = 0x80156107; // the specified action (or dataset) doesn't have a select action associated with it.
        public const uint XONLINE_E_QUERY_SPEC_COUNT_MISMATCH                        = 0x80156108; // the provided number of QUERY_ATTRIBUTE_SPECs doesn't match the number returned by the procedure
        public const uint XONLINE_E_QUERY_DATASET_NOT_FOUND                          = 0x80156109; // The specified dataset id was not found.
        public const uint XONLINE_E_QUERY_PROCEDURE_NOT_FOUND                        = 0x8015610A; // The specified proc index was not found.
        public const uint XONLINE_E_QUERY_DUPLICATE_ENTRY                            = 0x8015610B; // An entry already exists that conflicts with the unique data index specified for this dataset
        public const uint XONLINE_E_QUERY_RETRY                                      = 0x8015610C; // Retry if possible

        //
        // Competitions plugin HRESULTS                                              = 0x801562XX
        //
        public const uint XONLINE_E_COMP_ERROR                                       = 0x80156200; // Unspecified comp error
        public const uint XONLINE_E_COMP_ACCESS_DENIED                               = 0x80156202; // The specified source (client) is not permitted to execute this method
        public const uint XONLINE_E_COMP_REGISTRATION_CLOSED                         = 0x80156203; // The competition is closed to registration
        public const uint XONLINE_E_COMP_FULL                                        = 0x80156204; // The competition has reached it's max enrollment
        public const uint XONLINE_E_COMP_NOT_REGISTERED                              = 0x80156205; // The user or team isn't registered for the competition
        public const uint XONLINE_E_COMP_CANCELLED                                   = 0x80156206; // The competition has been cancelled, and the operation is invalid.
        public const uint XONLINE_E_COMP_CHECKIN_TIME_INVALID                        = 0x80156207; // The user is attempting to checkin to an event outside the allowed time.
        public const uint XONLINE_E_COMP_CHECKIN_BAD_EVENT                           = 0x80156208; // The user is attempting to checkin to an event in which they are not a valid participant.
        public const uint XONLINE_E_COMP_CHECKIN_EVENT_SCORED                        = 0x80156209; // The user is attempting to checkin to an event which has already been scored by the service (user has forfeited or been ejected)
        public const uint XONLINE_S_COMP_CHECKIN_EVENT_SCORED                        = 0x00156209; // The user is attempting to checkin to an event but the users event has been updated. Re-query for a new event
        public const uint XONLINE_E_COMP_UNEXPECTED                                  = 0x80156210; // Results from the Database are unexpected or inconsistent with the current operation.
        public const uint XONLINE_E_COMP_TOPOLOGY_ERROR                              = 0x80156216; // The topology request cannot be fulfilled by the server
        public const uint XONLINE_E_COMP_TOPOLOGY_PENDING                            = 0x80156217; // The topology request has not completed yet
        public const uint XONLINE_E_COMP_CHECKIN_TOO_EARLY                           = 0x80156218; // The user is attempting to checkin to an event outside the allowed time.
        public const uint XONLINE_E_COMP_ALREADY_REGISTERED                          = 0x80156219; // The user has already registered for this competition
        public const uint XONLINE_E_COMP_INVALID_ENTRANT_TYPE                        = 0x8015621A; // A team was specified for a non-team competition, or a user was specified for a team competition
        public const uint XONLINE_E_COMP_TOO_LATE                                    = 0x8015621B; // The time alloted for performing the requested action has already passed.
        public const uint XONLINE_E_COMP_TOO_EARLY                                   = 0x8015621C; // The specified action cannot yet be peformed.
        public const uint XONLINE_E_COMP_NO_BYES_AVAILABLE                           = 0x8015621D; // No byes remain to be granted
        public const uint XONLINE_E_COMP_SERVICE_OUTAGE                              = 0x8015621E; // A service outage has occured, try again in a bit
        public const uint XONLINE_S_COMP_SERVICE_OUTAGE                              = 0x0000000F; // A service outage was detected, evevnts were successfully rescheduled.  (used by cron/logging only)

        //
        // v1 Message Service HRESULTS                                               = 0x801570XX
        //
        public const uint XONLINE_E_MSGSVR_INVALID_REQUEST                           = 0x80157001; // request type was not one of the expected values

        //
        // String Service HRESULTS                                                   = 0x801571XX
        //
        public const uint XONLINE_E_STRING_ERROR                                     = 0x80157100;  // unspecified error
        public const uint XONLINE_E_STRING_TOO_LONG                                  = 0x80157101; // the string was longer than the allowed maximum
        public const uint XONLINE_E_STRING_OFFENSIVE_TEXT                            = 0x80157102; // the string contains offensive text
        public const uint XONLINE_E_STRING_NO_DEFAULT_STRING                         = 0x80157103; // returned by AddString when no string of the language specified as the default is found
        public const uint XONLINE_E_STRING_INVALID_LANGUAGE                          = 0x80157104; // returned by AddString when an invalid language is specified for a string
        public const uint XONLINE_E_STRING_LANGUAGE_DUPLICATE                        = 0x80157105; // returned by AddString when a language is specified more than once in a single request
        public const uint XONLINE_E_STRING_ADD_STRING_ERROR                          = 0x80157106;  // unspecified error in stringsvr add string
        public const uint XONLINE_E_STRING_GET_STRING_ERROR                          = 0x80157107;  // unspecified error in stringsvr get string
        public const uint XONLINE_E_STRING_LOAD_STRING_ERROR                         = 0x80157108;  // unspecified error in stringsvr load string
        public const uint XONLINE_E_STRING_LOG_STRING_ERROR                          = 0x80157109;  // unspecified error in stringsvr log string
        public const uint XONLINE_E_STRING_TITLE_ID_ERROR                            = 0x8015710A;  // unspecified error in stringsvr v1titleid
        public const uint XONLINE_E_STRING_VET_STRING_ERROR                          = 0x8015710B;  // unspecified error in stringsvr vet string

        //
        // Alerts Service HRESULTS                                                   = 0x801572XX
        //
        public const uint XONLINE_E_ALERTS_SUBSCRIPTION_NOT_FOUND                    = 0x80157201;   // user attempted to operate on a subscriptionid not present in the DB
        public const uint XONLINE_E_ALERTS_SUBSCRIBER_NOT_FOUND                      = 0x80157202;   // user attempted to operate on a subscriber not present in the DB

        //
        // Support (cxsuppapi) Service HRESULTS                                      = 0x801573XX
        //
        public const uint XONLINE_E_SUPPORT_ERROR                                    = 0x80157300;   // unspecified support error

        //
        // Feedback Service HRESULTS                                                 = 0x801580XX
        //
        public const uint XONLINE_E_FEEDBACK_ERROR                                   = 0x80158000;
        public const uint XONLINE_E_FEEDBACK_NULL_TARGET                             = 0x80158001;
        public const uint XONLINE_E_FEEDBACK_BAD_TYPE                                = 0x80158002;
        public const uint XONLINE_E_FEEDBACK_USER_NOT_FOUND                          = 0x80158003;
        public const uint XONLINE_E_FEEDBACK_CANNOT_LOG                              = 0x80158006;
        public const uint XONLINE_E_FEEDBACK_REVIEW_INVALID                          = 0x80158007;
        public const uint XONLINE_E_FEEDBACK_DATABASE_ERROR                          = 0x80158008;
        public const uint XONLINE_E_FEEDBACK_REVIEW_LIMIT_EXCEEDED                   = 0x80158009;
        public const uint XONLINE_E_FEEDBACK_GET_AGGREGATE_REVIEW_ERROR              = 0x8015800A;
        public const uint XONLINE_E_FEEDBACK_USER_NOT_PRESENT                        = 0x8015800B;
        public const uint XONLINE_E_FEEDBACK_SUBMIT_COMPLAINT_ERROR                  = 0x8015800C;
        public const uint XONLINE_E_FEEDBACK_SUBMIT_REVIEW_ERROR                     = 0x8015800D;

        //
        // Lists Service HRESULTS                                                    = 0x801581XX
        //
        public const uint XONLINE_E_LISTS_ERROR                                      = 0x80158100; // non-specific (catch-all) component error
        public const uint XONLINE_E_LISTS_PROPERTIES_TOO_LONG                        = 0x80158101; // list properties XML exceeds maximum length (1000)
        public const uint XONLINE_E_LISTS_INVALID_XML                                = 0x80158102; // XML failed schema validation
        public const uint XONLINE_E_LISTS_MALFORMED_XML                              = 0x80158103; // XML not well-formed
        public const uint XONLINE_E_LISTS_ID_MUST_BE_WILDCARD                        = 0x80158104; // list ID must be wildcard when list type is wildcard
        public const uint XONLINE_E_LISTS_ITEM_TOO_LONG                              = 0x80158105; // list item XML exceeds maximum length
        public const uint XONLINE_E_LISTS_DUPLICATE_IDS                              = 0x80158106; // arguments contain duplicate item IDs
        public const uint XONLINE_E_LISTS_EMPTY_PARAMETER                            = 0x80158107; // null or empty parameter array
        public const uint XONLINE_E_LISTS_NONEXISTENT_LIST_TYPE                      = 0x80158108; // nonexistent list type
        public const uint XONLINE_E_LISTS_TOO_MANY_INSTANCES                         = 0x80158109; // new list would exceed maximum instances
        public const uint XONLINE_E_LISTS_NAME_TOO_LONG                              = 0x8015810A; // list name exceeds maximum length (100)
        public const uint XONLINE_E_LISTS_NONEXISTENT_LIST                           = 0x80158110; // nonexistent list instance
        public const uint XONLINE_E_LISTS_TOO_MANY_ITEMS                             = 0x80158111; // new items would exceed maximum items
        public const uint XONLINE_E_LISTS_DUPLICATE_ITEM                             = 0x80158112; // item with given ID already exists in the list
        public const uint XONLINE_E_LISTS_NONEXISTENT_ITEM                           = 0x80158113; // nonexistent list item
        public const uint XONLINE_E_LISTS_DUPLICATE_INDEX                            = 0x80158114; // duplicate index given
        public const uint XONLINE_E_LISTS_INVALID_INDEX                              = 0x80158115; // invalid index given
        public const uint XONLINE_E_LISTS_DUPLICATE_LIST                             = 0x80158116; // user already has list with given name
        public const uint XONLINE_E_LISTS_INVALID_PAGE_SIZE                          = 0x80158117; // invalid page size (1 <= pageSize <= max results)
        public const uint XONLINE_E_LISTS_INCONSISTENT_VIEW                          = 0x80158118; // timestamp argument does not match list timestamp
        public const uint XONLINE_E_LISTS_INVALID_ORDER                              = 0x80158119; // invalid order direction (1 ascending, 2 descending)
        public const uint XONLINE_E_LISTS_API_MISMATCH                               = 0x80158120; // lists of this type should use a different API set

        public const uint XONLINE_E_LISTS_CREATE_LIST_ERROR                          = 0x80158180; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_DELETE_ITEMS_ERROR                         = 0x80158181; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_DELETE_LIST_ERROR                          = 0x80158182; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_GRANT_ACCESS_ERROR                         = 0x80158183; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_INSERT_ITEMS_ERROR                         = 0x80158184; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_MODIFY_ITEMS_ERROR                         = 0x80158185; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_MODIFY_LIST_ERROR                          = 0x80158186; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_QUERY_ITEMS_ERROR                          = 0x80158187; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_QUERY_LISTS_ERROR                          = 0x80158188; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_REVOKE_ACCESS_ERROR                        = 0x80158189; // non-specific (catch-all) api error
        public const uint XONLINE_E_LISTS_MOVE_ITEMS_ERROR                           = 0x8015818A; // non-specific (catch-all) api error

        public const uint XONLINE_E_DOWNLOAD_QUEUE_CREATE_QUEUE_ERROR                = 0x801581C0; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_DELETE_ITEMS_ERROR                = 0x801581C1; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_DELETE_QUEUE_ERROR                = 0x801581C2; // non-specific (catch-all) api error (not used)
        public const uint XONLINE_E_DOWNLOAD_QUEUE_GRANT_ACCESS_ERROR                = 0x801581C3; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_INSERT_ITEMS_ERROR                = 0x801581C4; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MODIFY_ITEMS_ERROR                = 0x801581C5; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MODIFY_QUEUE_ERROR                = 0x801581C6; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_QUERY_ITEMS_ERROR                 = 0x801581C7; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_QUERY_QUEUES_ERROR                = 0x801581C8; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_REVOKE_ACCESS_ERROR               = 0x801581C9; // non-specific (catch-all) api error
        public const uint XONLINE_E_DOWNLOAD_QUEUE_MOVE_ITEMS_ERROR                  = 0x801581CA; // non-specific (catch-all) api error

        //
        // Stats HRESULTS                                                            = 0x801590XX
        //
        public const uint XONLINE_E_STAT_ERROR                                       = 0x80159000;  // unspecified stat error
        public const uint XONLINE_E_STAT_BAD_REQUEST                                 = 0x80159001;  // server received incorrectly formatted request.
        public const uint XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD                = 0x80159002;  // title or leaderboard id were not recognized by the server.
        public const uint XONLINE_E_STAT_USER_NOT_FOUND                              = 0x80159003;  // user not found.
        public const uint XONLINE_E_STAT_TOO_MANY_SPECS                              = 0x80159004;  // too many stat specs in a request.
        public const uint XONLINE_E_STAT_TOO_MANY_STATS                              = 0x80159005;  // too manu stats in a spec.
        public const uint XONLINE_E_STAT_SET_FAILED_0                                = 0x80159100;  // set operation failed on spec index 0
        public const uint XONLINE_E_STAT_PERMISSION_DENIED                           = 0x80159200;  // operation failed because of credentials. UserId is not logged in or this operation is not supported in production (e.g. userId=0 in XOnlineStatReset)
        public const uint XONLINE_E_STAT_LEADERBOARD_WAS_RESET                       = 0x80159201;  // operation failed because user was logged on before the leaderboard was reset.
        public const uint XONLINE_E_STAT_INVALID_ATTACHMENT                          = 0x80159202;  // attachment is invalid.
        public const uint XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT                       = 0x00159203;  // Use XOnlineStatWriteGetResults to get a handle to upload a attachment.
        public const uint XONLINE_E_STAT_TOO_MANY_PARAMETERS                         = 0x80159204;
        public const uint XONLINE_E_STAT_TOO_MANY_PROCEDURES                         = 0x80159205;
        public const uint XONLINE_E_STAT_NOT_ENOUGH_PARAMETERS                       = 0x80159208;
        public const uint XONLINE_E_STAT_INVALID_PROCEDURE                           = 0x80159209;
        public const uint XONLINE_E_STAT_EXCEEDED_WRITE_READ_LIMIT                   = 0x8015920a;
        public const uint XONLINE_E_STAT_LEADERBOARD_READONLY                        = 0x8015920b;
        public const uint XONLINE_E_STAT_MUSIGMA_ARITHMETIC_OVERFLOW                 = 0x8015920c;
        public const uint XONLINE_E_STAT_READ_NO_SPEC                                = 0x8015920d;
        public const uint XONLINE_E_STAT_MUSIGMA_NO_GAME_MODE                        = 0x8015920e;  // no game mode found for this leaderboard
        public const uint XONLINE_E_STAT_MISSING_RESULTS                             = 0x8015920f;  // not enough results returned from lb server
        public const uint XONLINE_E_STAT_EXTRA_RESULTS                               = 0x80159210;  // too many results returned from lb server
        public const uint XONLINE_E_STAT_SERVER_NOT_FOUND                            = 0x80159211;  // server not found
        public const uint XONLINE_E_STAT_ACHIEVEMENTS_NOT_SUPPORTED                  = 0x80159212;  // achievements not supported for title/platform
        public const uint XONLINE_E_STAT_AVATAR_ASSETS_NOT_SUPPORTED                 = 0x80159213;  // avatar assets not supported for title/platform
        public const uint XONLINE_E_STAT_CONSOLE_LIST_NOT_SUPPORTED                  = 0x80159214;  // console audit list not supported for platform
        public const uint XONLINE_E_STAT_CONSOLE_LIST_EMPTY                          = 0x80159215;  // console audit list is empty

        //
        // XSUPPAPI HRESULTS                                                         = 0x8015A0XX
        //
        public const uint XSUPP_E_EMAIL_ALREADY_SENT                                 = 0x8015A000;
        public const uint XSUPP_E_INVALID_PUID_OR_SUB                                = 0x8015A001;
        public const uint XSUPP_E_INVALID_EMAIL_SENT_DATE                            = 0x8015A002;
        public const uint XSUPP_E_INVALID_SUBSCRIPTION_CODE                          = 0x8015A003;
        public const uint XSUPP_E_USER_DOES_NOT_OWN_OFFER                            = 0x8015A004;
        public const uint XSUPP_E_TOO_MANY_EXTRA_LICENSES                            = 0x8015A005;
        public const uint XSUPP_E_LICENSE_INCREMENT_GENERIC_ERROR                    = 0x8015A006;
        public const uint XSUPP_E_OWNER_PASSPORT_SWAP_CHILD_ONLY                     = 0x8015A007;
        public const uint XSUPP_E_NO_NEW_PASSPORT_SPECIFIED                          = 0x8015A008;
        public const uint XSUPP_E_USER_PASSPORT_SWAP                                 = 0x8015A009;
        public const uint XSUPP_E_OWNER_PASSPORT_SWAP                                = 0x8015A00A;
        public const uint XSUPP_E_USER_DATE_OF_BIRTH_SWAP                            = 0x8015A00B;
        public const uint XSUPP_E_NEW_PASSPORT_MEMBER_NAME_MISMATCH                  = 0x8015A00C;
        public const uint XSUPP_E_INVALID_NEW_PASSPORT_MEMBER_NAME                   = 0x8015A00D;
        public const uint XSUPP_E_MULTIPLE_CREDENTIALS_FOR_THIS_MEMBER_NAME          = 0x8015A00E;
        public const uint XSUPP_E_USER_NOT_FOUND                                     = 0x8015A00F;
        public const uint XSUPP_E_USER_MACHINE_NOT_FOUND                             = 0x8015A010;
        public const uint XSUPP_E_USER_UNIQUE_MACHINE_NOT_FOUND                      = 0x8015A011;

        //
        // Signature Service HRESULTS                                                = 0x8015b0XX
        //
        public const uint XONLINE_E_SIGNATURE_ERROR                                  = 0x8015b000;   // unspecified signature error
        public const uint XONLINE_E_SIGNATURE_VER_INVALID_SIGNATURE                  = 0x8015b001;   // presented signature does not match
        public const uint XONLINE_E_SIGNATURE_VER_UNKNOWN_KEY_VER                    = 0x8015b002;   // signature key version specified is not found among the valid signature keys
        public const uint XONLINE_E_SIGNATURE_VER_UNKNOWN_SIGNATURE_VER              = 0x8015b003;   // signature version is unknown, currently only version 1 is supported
        public const uint XONLINE_E_SIGNATURE_BANNED_XBOX                            = 0x8015b004;   // signature is not calculated or revoked because Xbox is banned
        public const uint XONLINE_E_SIGNATURE_BANNED_USER                            = 0x8015b005;   // signature is not calculated or revoked because at least one user is banned
        public const uint XONLINE_E_SIGNATURE_BANNED_TITLE                           = 0x8015b006;   // signature is not calculated or revoked because the given title and version is banned
        public const uint XONLINE_E_SIGNATURE_BANNED_DIGEST                          = 0x8015b007;   // signature is not calculated or revoked because the digest is banned
        public const uint XONLINE_E_SIGNATURE_GET_BAD_AUTH_DATA                      = 0x8015b008;   // fail to retrieve AuthData from SG, returned by GetSigningKey api
        public const uint XONLINE_E_SIGNATURE_SERVICE_UNAVAILABLE                    = 0x8015b009;   // fail to retrieve a signature server master key, returned by GetSigningKey or SignOnBehalf api
        public const uint XONLINE_E_SIGNATURE_LICENSE_NOT_ACQUIRABLE                 = 0x8015b00a;   // AcquireMediaLicenses will not be able to acquire the license without a state change (like repurchase)
        public const uint XONLINE_E_SIGNATURE_LICENSE_COUNT_EXCEEDED                 = 0x8015B00B;   // The user already has the limit of licenses allowed.
        public const uint XONLINE_E_SIGNATURE_LICENSE_TRANSFER_BAD_COMMAND           = 0x8015B00C;   // Tried to send a command that is inconsistent with the curent state of the transfer.
//      public const uint XONLINE_E_SIGNATURE_LICENSE_TRANSFER_UNAUTHORIZED          = 0x8015B00D;   // The user requesting a transfer is not authorized due to a missing profile setting.
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_INVALID                    = 0x8015B00E;   // this is what we return to the user for invalid certificates
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_USAGE_INVALID              = 0x8015B00F;   // this an internal only code
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_CHAIN_INVALID              = 0x8015B010;   // this an internal only code
        public const uint XONLINE_E_SIGNATURE_CERTIFICATE_EXPIRED                    = 0x8015B011;   // this an internal only code
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_EMPTY            = 0x8015B012;   // The playready device certificate we generated is empty (internal only)
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_TOO_BIG          = 0x8015B013;   // The playready device certificate we generated is too big (internal only)
        public const uint XONLINE_E_SIGNATURE_PLAYREADY_DEVICE_CERT_FAILED           = 0x8015B014;   // Failed to generate a playready device certificate. This is what we return to the caller.
        public const uint XONLINE_E_SIGNATURE_INVALID_WMRM_RSA_VERSION               = 0x8015B015;   // Bad ClientInfo Block

        // non-specific (catch-all) signature API errors
        public const uint XONLINE_E_SIGNATURE_ACKNOWLEDGE_LICENSE_DELIVERY_ERROR     = 0x8015b080; // non-specific acknowldege license delivery error
        public const uint XONLINE_E_SIGNATURE_ACQUIRE_MEDIA_LICENSES_ERROR           = 0x8015b081; // non-specific acquire media licenses error
        public const uint XONLINE_E_SIGNATURE_CREATE_CERTIFICATE_ERROR               = 0x8015b082; // non-specific create certificate error
        public const uint XONLINE_E_SIGNATURE_GET_AA_INFO_ERROR                      = 0x8015b083; // non-specific get aa info error
        public const uint XONLINE_E_SIGNATURE_GET_SIGNED_HEADER_ERROR                = 0x8015b084; // non-specific get signed header error
        public const uint XONLINE_E_SIGNATURE_GENERATE_LICENSE_RESPONSE_ERROR        = 0x8015b085; // non-specific generate license response error
        public const uint XONLINE_E_SIGNATURE_REFRESH_GAME_LICENSE_ERROR             = 0x8015b086; // non-specific refresh game license error
        public const uint XONLINE_E_SIGNATURE_TRANSFER_USER_LICENSES_ERROR           = 0x8015b087; // non-specific transfer user licenses error
        public const uint XONLINE_E_SIGNATURE_VALIDATE_CERTIFICATE_ERROR             = 0x8015b089; // non-specific validate certificate error

        //
        // Arbitration HRESULTS                                                      = 0x8015b1XX
        //
        public const uint XONLINE_E_ARBITRATION_SERVICE_UNAVAILABLE                  = 0x8015b101; // Service temporarily unavailable
        public const uint XONLINE_E_ARBITRATION_INVALID_REQUEST                      = 0x8015b102; // The request is invalidly formatted
        public const uint XONLINE_E_ARBITRATION_SESSION_NOT_FOUND                    = 0x8015b103; // The session is not found or has expired
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_FLAGS_MISMATCH          = 0x8015b104; // The session was registered with different flags by another Xbox
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_SESSION_TIME_MISMATCH   = 0x8015b105; // The session was registered with a different session time by another Xbox
        public const uint XONLINE_E_ARBITRATION_REGISTRATION_TOO_LATE                = 0x8015b106; // Registration came too late, the session has already been arbitrated
        public const uint XONLINE_E_ARBITRATION_NEED_TO_REGISTER_FIRST               = 0x8015b107; // Must register in seesion first, before any other activity
        public const uint XONLINE_E_ARBITRATION_TIME_EXTENSION_NOT_ALLOWED           = 0x8015b108; // Time extension of this session not allowed, or session is already arbitrated
        public const uint XONLINE_E_ARBITRATION_INCONSISTENT_FLAGS                   = 0x8015b109; // Inconsistent flags are used in the request
        public const uint XONLINE_E_ARBITRATION_INCONSISTENT_COMPETITION_STATUS      = 0x8015b10A; // Whether the session is a competition is inconsistent between registration and report
        public const uint XONLINE_E_ARBITRATION_REPORT_ALREADY_CALLED                = 0x8015b10B; // Report call for this session already made by this client
        public const uint XONLINE_E_ARBITRATION_TOO_MANY_XBOXES_IN_SESSION           = 0x8015b10C; // Only up to 255 Xboxes can register in a session
        public const uint XONLINE_E_ARBITRATION_1_XBOX_1_USER_SESSION_NOT_ALLOWED    = 0x8015b10D; // Single Xbox single user sessions should not be arbitrated
        public const uint XONLINE_E_ARBITRATION_REPORT_TOO_LARGE                     = 0x8015b10E; // The stats or query submission is too large
        public const uint XONLINE_E_ARBITRATION_INVALID_TEAMTICKET                   = 0x8015b10F; // An invalid team ticket was submitted

        //
        // Arbitration success HRESULTS
        //
        public const uint XONLINE_S_ARBITRATION_INVALID_XBOX_SPECIFIED               = 0x0015b1F0; // Invalid/duplicate Xbox specified in lost connectivity or suspicious info. Never the less, this report is accepted
        public const uint XONLINE_S_ARBITRATION_INVALID_USER_SPECIFIED               = 0x0015b1F1; // Invalid/duplicate user specified in lost connectivity or suspicious info. Never the less, this report is accepted
        public const uint XONLINE_S_ARBITRATION_DIFFERENT_RESULTS_DETECTED           = 0x0015b1F2; // Differing result submissions have been detected in this session. Never the less, this report submission is accepted

        //
        // Storage Service HRESULTS                                                  = 0x8015C0XX
        //
        public const uint XONLINE_E_STORAGE_ERROR                                    = 0x8015c000; // non-specific storage error
        public const uint XONLINE_E_STORAGE_INVALID_REQUEST                          = 0x8015c001; // Request is invalid
        public const uint XONLINE_E_STORAGE_ACCESS_DENIED                            = 0x8015c002; // Client doesn't have the rights to upload the file
        public const uint XONLINE_E_STORAGE_FILE_IS_TOO_BIG                          = 0x8015c003; // File is too big
        public const uint XONLINE_E_STORAGE_FILE_NOT_FOUND                           = 0x8015c004; // File not found
        public const uint XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN                     = 0x8015c005; // Access token signature is invalid
        public const uint XONLINE_E_STORAGE_CANNOT_FIND_PATH                         = 0x8015c006; // name resolution failed
        public const uint XONLINE_E_STORAGE_FILE_IS_ELSEWHERE                        = 0x8015c007; // redirection request
        public const uint XONLINE_E_STORAGE_INVALID_STORAGE_PATH                     = 0x8015c008; // Invalid storage path
        public const uint XONLINE_E_STORAGE_INVALID_FACILITY                         = 0x8015c009; // Invalid facility code
        public const uint XONLINE_E_STORAGE_UNKNOWN_DOMAIN                           = 0x8015c00A; // Name resolver has no idea where to send you.
        public const uint XONLINE_E_STORAGE_SYNC_TIME_SKEW                           = 0x8015c00B; // SyncDomain timestamp skew
        public const uint XONLINE_E_STORAGE_SYNC_TIME_SKEW_LOCALTIME                 = 0x8015c00C; // SyncDomain timestamp appears to be localtime
        public const uint XONLINE_E_STORAGE_QUOTA_EXCEEDED                           = 0x8015c00D; // Quota exceeded for storage domain
        public const uint XONLINE_E_STORAGE_FILE_ALREADY_EXISTS                      = 0x8015c011; // File already exists and storage domain does not allow overwrites
        public const uint XONLINE_E_STORAGE_DATABASE_ERROR                           = 0x8015c012; // Unknown database error
        public const uint XONLINE_S_STORAGE_FILE_NOT_MODIFIED                        = 0x0015c013; // File hasn't been modified since given date
        public const uint XONLINE_E_STORAGE_INVALID_PATH                             = 0x8015c014; // Invalid file path
        public const uint XONLINE_E_STORAGE_TITLE_FILES_NOT_FOUND                    = 0x8015c015; // No storage files were found for the specified title

        //
        // Live Info Service HRESULTS                                                = 0x8015C1XX
        //
        public const uint XONLINE_E_LIVEINFO_ERROR                                   = 0x8015C100;
        public const uint XONLINE_E_LIVEINFO_HIVE_INVALID_CONFIG                     = 0x8015c101; // Config name is invalid
        public const uint XONLINE_E_LIVEINFO_HIVE_ERROR_LOADING_CONFIG               = 0x8015C102; // Error occured loading config
        public const uint XONLINE_E_LIVEINFO_CLIENT_ERROR                            = 0x8015C103; // General error for client failures

        //
        // Lsp HRESULTS                                                              = 0x8015C2xx
        //
        public const uint XONLINE_E_LSP_ERROR                                        = 0x8015C200;
        public const uint XONLINE_E_LSP_BUCKET_INTERFACE_CONFIG_ERROR                = 0x8015C201; // Bucket Interface not configured

        //
        // KDC Internal HRESULTS
        //
        public const uint XONLINE_E_KDCINTERNAL_RESOURCE_TOO_BUSY                    = 0x8015C301; // A backend resource was too busy to service the request

        //
        // Passport HRESULTS (mapped from idsapi/passport return codes) 0x8015d0XX
        //
        public const uint XONLINE_E_PASSPORT_ERROR                                   = 0x8015d000; // generic passport error for when we can't find a mapping
        public const uint XONLINE_E_PASSPORT_NAME_ALREADY_TAKEN                      = 0x8015d001; // Failed to create passport: name already taken
        public const uint XONLINE_E_PASSPORT_WRONG_NAME_OR_PASSWORD                  = 0x8015d002; // Wrong password and/or membername dose not exist.
        public const uint XONLINE_E_PASSPORT_LOCKED_OUT                              = 0x8015d003; // The credential is locked out.
        public const uint XONLINE_E_PASSPORT_FORCE_RENAME                            = 0x8015d004; // The credential is in a forced renamed state
        public const uint XONLINE_E_PASSPORT_FORCE_CHANGE_PASSWORD                   = 0x8015d005; // The password has to be changed.
        public const uint XONLINE_E_PASSPORT_FORCE_CHANGE_SQ_SA                      = 0x8015d006; // The secret question and answer has to be changed.
        public const uint XONLINE_E_PASSPORT_PASSWORD_EXPIRED                        = 0x8015d007; // The password for the account has expired.
        public const uint XONLINE_E_PASSPORT_REQUIRE_EMAIL_VALIDATION                = 0x8015d008; // The account is blocked pending email address validation.
        public const uint XONLINE_E_FORBIDDEN_WORD                                   = 0x8015d009; // String contained words that are forbidden by namespace administrator, examine input.
        public const uint XONLINE_E_PASSWORD_BLANK                                   = 0x8015d00a; // The password is blank.
        public const uint XONLINE_E_PASSWORD_TOO_SHORT                               = 0x8015d00b; // The password is too short
        public const uint XONLINE_E_PASSWORD_TOO_LONG                                = 0x8015d00c; // The password is too long
        public const uint XONLINE_E_PASSWORD_CONTAINS_MEMBER_NAME                    = 0x8015d00d; // The password contains the member name.
        public const uint XONLINE_E_PASSWORD_CONTAINS_INVALID_CHARACTERS             = 0x8015d00e; // The password contains invalid characters.
        public const uint XONLINE_E_SQ_CONTAINS_PASSWORD                             = 0x8015d00f; // The secret question contains the password.
        public const uint XONLINE_E_SA_CONTAINS_PASSWORD                             = 0x8015d010; // The answer for the secret question contains the password.
        public const uint XONLINE_E_PASSWORD_CONTAINS_SA                             = 0x8015d011; // The password validation code detected the answer to the secret question in the password.
        public const uint XONLINE_E_SQ_CONTAINS_SA                                   = 0x8015d015; // The secret question contains the answer.
        public const uint XONLINE_E_SA_TOO_SHORT                                     = 0x8015d017;
        public const uint XONLINE_E_SA_CONTAINS_SQ                                   = 0x8015d018; // The answer to the secret question contains that question.
        public const uint XONLINE_E_SA_CONTAINS_MEMBER_NAME                          = 0x8015d019; // The answer for the secret question contains the member name.
        public const uint XONLINE_E_MEMBER_NAME_TOO_SHORT                            = 0x8015d01a; // The signin name is too short.
        public const uint XONLINE_E_MEMBER_NAME_INVALID                              = 0x8015d01b; // The signin name is incomplete or has invalid characters.
        public const uint XONLINE_E_PASSPORT_INVALID_DOMAIN                          = 0x8015d01c; // Cannot create EASI passport on reserved domain (e.g. hotmail.com)
        public const uint XONLINE_E_PASSPORT_INVALID_POSTAL_CODE                     = 0x8015d01d; // The postal code specified is invalid
        public const uint XONLINE_E_PASSPORT_SQ_TOO_SHORT                            = 0x8015d01f; // Secret question is too short
        public const uint XONLINE_E_PASSPORT_SQ_TOO_LONG                             = 0x8015d020; // Secret question is too long
        public const uint XONLINE_E_PASSPORT_KIDS_ACCOUNT_NO_CONSENT                 = 0x8015d021; // The PP Kids account does not have consent
        public const uint XONLINE_E_PASSPORT_SITE_NOT_AUTHORIZED                     = 0x8015d022; // xbox live service is not authorized to call the passport api

        // errors above are translations of passport errors
        // update PassportHelper.IsUserError() as necessary
        // errors below are xonline error codes

        public const uint XONLINE_E_PASSPORT_INVALID_ID                              = 0x8015d080; // passport could not find id (passport puid)
        public const uint XONLINE_E_PASSPORT_INVALID_RESPONSE                        = 0x8015d081; // passport could not find id (passport puid)
        public const uint XONLINE_E_PASSPORT_TOO_MANY_SECRET_QUESTIONS               = 0x8015d082; // too many secret questions
        public const uint XONLINE_E_PASSPORT_TIMEOUT                                 = 0x8015d083; // timeout talking to passport
        public const uint XONLINE_E_PASSPORT_NO_SECRET_QUESTIONS                     = 0x8015d084; // no secret questions for country and language
        public const uint XONLINE_E_PASSPORT_NO_DATA                                 = 0x8015d085; // passport could not find any data to return
        public const uint XONLINE_E_PASSPORT_ASM_KEY_NOT_FOUND                       = 0x8015d086; // key sent to passport is not valid (old version, expired, etc.)


        public const uint XONLINE_E_UPS_ERROR                                        = 0x8015d100; // error talking to UPS
        public const uint XONLINE_E_UPS_TIMEOUT_ERROR                                = 0x8015d101; // timeout error talking to UPS
        public const uint XONLINE_E_UPS_GET_PROFILE_ERROR                            = 0x8015d102; // non-specific (catch-all) error calling get profile
        public const uint XONLINE_E_UPS_UPDATE_PROFILE_ERROR                         = 0x8015d103; // non-specific (catch-all) error calling update profile

        //
        //RATINGS hresults                                                           = Ox8015d2xx
        //
        public const uint XONLINE_E_RATINGS_UNKNOWNERROR                             = 0x8015D200; //Unhandled/unknownError
        public const uint XONLINE_E_RATINGS_INVALID_COUNTRY                          = 0x8015D201; //Invalid country passed
        public const uint XONLINE_E_RATINGS_INVALID_USER                             = 0x8015D203; //Invalid user not presetn in UODB
        public const uint XONLINE_E_RATINGS_INVALID_RATING                           = 0x8015D204; //Invalid Rating value (<0 or >5)
        public const uint XONLINE_E_RATINGS_INVALID_MEDIATYPE                        = 0x8015D205; //Invalid Mediatype which cannot be rated
        public const uint XONLINE_E_RATINGS_MSN_ERROR                                = 0x8015D206; //General Error saving the rating
        public const uint XONLINE_E_RATINGS_UNKNOWNCATALOG_ERROR                     = 0x8015D207; //Unknown Catalog error cannling getbasicmediainfo
        public const uint XONLINE_E_RATINGS_MULTISETTING_ERROR                       = 0x8015D208; //Error getting the Multisettign for ratings mediatypes
        public const uint XONLINE_E_RATINGS_MEDIATYPE_VALIDATION                     = 0x8015D209; //Error validatign the mediatype for ratigns
        public const uint XONLINE_E_RATINGS_ERROR_GETUSER                            = 0x8015D20A; //Error getting the user details
        public const uint XONLINE_E_RATINGS_ERROR_MEDIAGET                           = 0x8015D20B; //Error getting thr Media Information from Catalog
        public const uint XONLINE_E_RATINGS_CONTENTTYPE_SETTING_ERROR                = 0x8015D20C; //Error retrieving contentTypesetting from npdb
        public const uint XONLINE_E_RATINGS_CONTENTTYPE_MAPPING_ERROR                = 0x8015D20D; //Error mapping contentType to Mediatype
        public const uint XONLINE_E_RATINGS_MSN_CONNECTION_ERROR                     = 0x8015D20E; //Error connecting to MSN Ratings service
        public const uint XONLINE_E_RATINGS_CRON_UNKNOWN_ERROR                       = 0x8015D20F; //Unknown Error in MSNRRAverages CRON plug-in
        public const uint XONLINE_E_RATINGS_CRON_SAVE_AVERAGE_ERROR                  = 0x8015D211; //Error saving Rating averages
        public const uint XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_ERROR              = 0x8015D212; //Error retrieving TransactionDate
        public const uint XONLINE_E_RATINGS_CRON_NPDB_SETTING_ERROR                  = 0x8015D213; //Error retrieving npdb setting
        public const uint XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_SAVE_ERROR         = 0x8015D214; //Error saving transaction date
        public const uint XONLINE_E_RATINGS_MISSING_COUNTRY_CODE_ON_GET_MEDIA_INFO   = 0x8015D215; //GetMediaInfo invoked without specifying countryCode when retrieving user aggregate
        public const uint XONLINE_E_RATINGS_MISSING_MEDIA_ID_ON_GET_MEDIA_INFO       = 0x8015D216; //GetMediaInfo invoked with empty/null guid for media id
        public const uint XONLINE_E_RATINGS_INVALID_MEDIA                            = 0x8015D217; //Media Queried for does not exist in the catalog

        //
        //ContentIngestion WebService                                                = 0x8015d3xx
        //
        public const uint XONLINE_E_CONTENTINGESTION_UNKNOWNERROR                    = 0x8015d300; //Unhandled/Unknown Error
        public const uint XONLINE_E_CONTENTINGESTION_INVALIDARGS                     = 0x8015d301; //Invalid Argument Specified


        //
        // Reflector HRESULTS                                                        = 0x8015d4xx
        //
        public const uint XONLINE_E_REFLECTOR_GENERIC_ERROR                          = 0x8015D400; // Generic error
        public const uint XONLINE_E_REFLECTOR_NO_TOKEN                               = 0x8015D401; // The user does not have a token for the specified network Id


        //
        //MigrateUser HRESULTS                                                       = 0x8015d5xx
        //
        public const uint XONLINE_E_MIGRATEUSER_GENERIC_ERROR                        = 0x8015D500; // generic error
        public const uint XONLINE_E_MIGRATEUSER_USER_DOES_NOT_EXIST_ERROR            = 0x8015D501; // specified user does not exist
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_LOAD_USER_ERROR            = 0x8015D502; // failed to load the user for some reason.
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_WRITE_XML_ERROR            = 0x8015D503; // failed to write the user's data to xml for some reason.
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_READ_XML_ERROR             = 0x8015D504; // failed to read the user's data from xml for some reason.
        public const uint XONLINE_E_MIGRATEUSER_FAILED_TO_CREATE_USER_ERROR          = 0x8015D505; // failed to create the user for some reason.
        public const uint XONLINE_E_MIGRATEUSER_USER_ALREADY_EXISTS_ERROR            = 0x8015D506; // specified user already exists
        public const uint XONLINE_E_MIGRATEUSER_WRITE_TO_PROD_ERROR                  = 0x8015D507; // can't write a user to prod

        //TESTFD hresults                                                            = 0x8015d6xx
        //
        public const uint XONLINE_E_TESTFD_GENERIC_ERROR                             = 0x8015D600; // generic error
        public const uint XONLINE_E_TESTFD_API_NOT_AVAILABLE_ERROR                   = 0x8015D601; // insufficient permissions to access this API
        public const uint XONLINE_E_TESTFD_INVALID_DATABASE_ERROR                    = 0x8015D602; // database specified could not be found
        public const uint XONLINE_E_TESTFD_INVALID_TABLE_ERROR                       = 0x8015D603; // table specified could not be found
        public const uint XONLINE_E_TESTFD_INVALID_COLUMN_ERROR                      = 0x8015D604; // column specified could not be found
        public const uint XONLINE_E_TESTFD_INVALID_VALUE_ERROR                       = 0x8015D605; // value for specified column invalid
        public const uint XONLINE_E_TESTFD_INVALID_SQL_ERROR                         = 0x8015D606; // invalid sql statement
        public const uint XONLINE_E_TESTFD_BAD_COMMAND_ERROR                         = 0x8015D607; // command failed
        public const uint XONLINE_E_TESTFD_COMMAND_TIMEOUT_ERROR                     = 0x8015D608; // command took longer than expected to run
        public const uint XONLINE_E_TESTFD_BAD_PARTITION_ERROR                       = 0x8015D609; // invalid partition parameter
        public const uint XONLINE_E_TESTFD_BAD_PARTITION_HASH_TYPE_ERROR             = 0x8015D60A; // invalid partition hashtype parameter
        public const uint XONLINE_E_TESTFD_SQL_NO_VALUE_ERROR                        = 0x8015D60B; // no value returned for a sql query
        public const uint XONLINE_E_TESTFD_NOT_ENOUGH_TITLES_PROPPED                 = 0x8015D60C; // not enough titles are propped to the environment to fufil the request

        // Social query HRESULTs
        public const uint XONLINE_E_SOCIAL_QUERY_GENERIC_ERROR                       = 0x8015D700; // generic error

        //Cert Grabber hresults                                                      = 0x8015d8xx

        //
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_GET_NEW_CERT              = 0x8015D800; // failed to query/retrieve the latest cert
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_PARSE_NEW_CERT            = 0x8015D801; // failed to parse the latest cert
        public const uint XONLINE_E_CERT_GRABBER_FAILED_TO_UPDATE_CERT               = 0x8015D802; // failed to update npdb with the latest cert

        //XTOU hresults                                                              = 0x8015d9xx
        //
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_GENERIC_ERROR                 = 0x8015D900; // generic error for GetTermsOfUse
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_URL_PARSE_ERROR               = 0x8015D901; // GetTermsOfUse failed to parse the URL
        public const uint XONLINE_E_XTOU_GETTERMSOFUSE_URL_GET_FILE_ERROR            = 0x8015D902; // GetTermsOfUse failed to retrieve a TOU file from the database
        public const uint XONLINE_E_XTOU_GETLANGUAGESFORCOUNTRY_GENERIC_ERROR        = 0x8015D903; // generic error for GetLanguagesForCountry

        //
        // XSTS HRESULTS                                                             = 0x8015DAxx
        //
        public const uint XONLINE_E_XSTS_RST_ACTASSTS                                = 0x8015DA00; // Invalid RST ActAs
        public const uint XONLINE_E_XSTS_RST_ADDITIONALCONTEXT                       = 0x8015DA01; // Invalid RST AdditionalContext
        public const uint XONLINE_E_XSTS_RST_CANCELTARGET                            = 0x8015DA02; // Invalid RST CancelTarget
        public const uint XONLINE_E_XSTS_RST_CLIENTPSEUDONYM                         = 0x8015DA03; // Invalid RST ClientPseudonym
        public const uint XONLINE_E_XSTS_RST_COMPUTEDKEYALGORITHM                    = 0x8015DA04; // Invalid RST ComputedKeyAlgorithm
        public const uint XONLINE_E_XSTS_RST_DELEGATABLE                             = 0x8015DA05; // Invalid RST Delegatable
        public const uint XONLINE_E_XSTS_RST_DELEGATETO                              = 0x8015DA06; // Invalid RST DelegateTo
        public const uint XONLINE_E_XSTS_RST_DISPLAYTOKENLANGUAGE                    = 0x8015DA07; // Invalid RST DisplayTokenLanguage
        public const uint XONLINE_E_XSTS_RST_ENCRYPTION                              = 0x8015DA08; // Invalid RST Encryption
        public const uint XONLINE_E_XSTS_RST_FORWARDABLE                             = 0x8015DA09; // Invalid RST Forwardable
        public const uint XONLINE_E_XSTS_RST_INFORMATIONCARDREFERENCE                = 0x8015DA0A; // Invalid RST InformationCardReference
        public const uint XONLINE_E_XSTS_RST_ISSUER                                  = 0x8015DA0B; // Invalid RST Issuer
        public const uint XONLINE_E_XSTS_RST_ONBEHALFOF                              = 0x8015DA0C; // Invalid RST OnBehalfOf
        public const uint XONLINE_E_XSTS_RST_PARTICIPANTS                            = 0x8015DA0D; // Invalid RST Participants
        public const uint XONLINE_E_XSTS_RST_PROOFENCRYPTION                         = 0x8015DA0E; // Invalid RST ProofEncryption
        public const uint XONLINE_E_XSTS_RST_RENEWING                                = 0x8015DA0F; // Invalid RST Renewing
        public const uint XONLINE_E_XSTS_RST_RENEWTARGET                             = 0x8015DA10; // Invalid RST RenewTarget
        public const uint XONLINE_E_XSTS_RST_REQUESTDISPLAYTOKEN                     = 0x8015DA11; // Invalid RST RequestDisplayToken
        public const uint XONLINE_E_XSTS_RST_SECONDARYPARAMETERS                     = 0x8015DA12; // Invalid RST SecondaryParameters
        public const uint XONLINE_E_XSTS_RST_VALIDATETARGET                          = 0x8015DA13; // Invalid RST ValidateTarget

        public const uint XONLINE_E_XSTS_RST_ALLOWPOSTDATING                         = 0x8015DA20; // Invalid RST AllowPostdating
        public const uint XONLINE_E_XSTS_RST_APPLIESTO                               = 0x8015DA21; // Invalid RST AppliesTo 
        public const uint XONLINE_E_XSTS_RST_APPLIESTO_BY_WIF                        = 0x80131940; // AppliesTo is deemed invalid by WIF (Added for documentation purposes only, do not use in code)
        public const uint XONLINE_E_XSTS_RST_AUTHENTICATIONTYPE                      = 0x8015DA22; // Invalid RST AuthenticationType
        public const uint XONLINE_E_XSTS_RST_BINARYEXCHANGE                          = 0x8015DA23; // Invalid RST BinaryExchange
        public const uint XONLINE_E_XSTS_RST_CANONICALIZATIONALGORITHM               = 0x8015DA24; // Invalid RST CanonicalizationAlgorithm
        public const uint XONLINE_E_XSTS_RST_ENCRYPTIONALGORITHM                     = 0x8015DA25; // Invalid RST EncryptionAlgorithm
        public const uint XONLINE_E_XSTS_RST_ENCRYPTWITH                             = 0x8015DA26; // Invalid RST EncryptWith
        public const uint XONLINE_E_XSTS_RST_ENTROPY                                 = 0x8015DA27; // Invalid RST Entropy
        public const uint XONLINE_E_XSTS_RST_KEYSIZEINBITS                           = 0x8015DA28; // Invalid RST KeySizeInBits
        public const uint XONLINE_E_XSTS_RST_KEYTYPE                                 = 0x8015DA29; // Invalid RST KeyType
        public const uint XONLINE_E_XSTS_RST_KEYWRAPALGORITHM                        = 0x8015DA2A; // Invalid RST KeyWrapAlgorithm
        public const uint XONLINE_E_XSTS_RST_LIFETIME                                = 0x8015DA2B; // Invalid RST Lifetime
        public const uint XONLINE_E_XSTS_RST_REPLYTO                                 = 0x8015DA2C; // Invalid RST ReplyTo
        public const uint XONLINE_E_XSTS_RST_REQUESTTYPE                             = 0x8015DA2D; // Invalid RST RequestType
        public const uint XONLINE_E_XSTS_RST_SIGNATUREALGORITHM                      = 0x8015DA2E; // Invalid RST SignatureAlgorithm
        public const uint XONLINE_E_XSTS_RST_SIGNWITH                                = 0x8015DA2F; // Invalid RST SignWith
        public const uint XONLINE_E_XSTS_RST_TOKENTYPE                               = 0x8015DA30; // Invalid RST TokenType
        public const uint XONLINE_E_XSTS_RST_USEKEY                                  = 0x8015DA31; // Invalid RST UseKey

        public const uint XONLINE_E_XSTS_CONFIGURATIONPROVIDER_LOAD                  = 0x8015DA40; // Error in configuration provider loading XSts configuration data
        public const uint XONLINE_E_XSTS_LOADCONFIGURATION                           = 0x8015DA41; // General failure loading XSts configuration
        public const uint XONLINE_E_XSTS_CONFIGURATION_NOAPPIESTOES                  = 0x8015DA42; // Configuration data does not contain any AppliesToes or could not be loaded
        public const uint XONLINE_E_XSTS_CONFIGURATION_NOCLAIMPROVIDERS              = 0x8015DA43; // Configuration data does not contain any Claim Providers or could not be loaded
        public const uint XONLINE_E_XSTS_APPLIESTO_NOTFOUND                          = 0x8015DA44; // Token requested for an AppliesTo XSts is not configured to support
        public const uint XONLINE_E_XSTS_PRINCIPAL_NOTAUTHORIZED                     = 0x8015DA45; // Principal not authorized
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_NO_CERTCLAIM       = 0x8015DA46; // Delegation operation invalid. No client cert claim.
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_MULTIPLE_CERTCLAIMS = 0x8015DA47; // Delegation operation invalid. Multiple client cert claims.
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_CLIENTCERT_SALT_MISMATCH = 0x8015DA48; // Delegation operation invalid. Delegation token to client certificate mismatch.
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_NO_PRINCIPAL       = 0x8015DA49; // Delegation operation invalid. No principal.
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_HASXUID            = 0x8015DA4A; // Delegation operation invalid. Principal already has a xuid.
        public const uint XONLINE_E_XSTS_DELEGATION_NOTAUTHORIZED_HASPUID            = 0x8015DA4B; // Delegation operation invalid. Principal already has a puid.

        public const uint XONLINE_E_XSTS_CONFIG_CP_INVALID                           = 0x8015DA50; // The claim provider descriptor is empty or null
        public const uint XONLINE_E_XSTS_CONFIG_CP_TYPE_INVALID                      = 0x8015DA51; // The claim provider type name is empty or null
        public const uint XONLINE_E_XSTS_CONFIG_CP_ASSEMBLY_INVALID                  = 0x8015DA52; // The claim provider assembly name is empty or null
        public const uint XONLINE_E_XSTS_CONFIG_CP_LOAD_ERROR                        = 0x8015DA53; // The claim provider type could not be loaded from the claim provider assembly
        public const uint XONLINE_E_XSTS_CONFIG_CP_CLAIM_TYPE_NOT_SUPPORTED          = 0x8015DA54; // The claim provider does not support one of the configured claim types
        public const uint XONLINE_E_XSTS_CONFIG_CP_DUPLICATE_CLAIM_TYPE              = 0x8015DA55; // Multiple claim providers offer the same claim type
        
        public const uint XONLINE_E_XSTS_CONFIG_RP_CLAIM_TYPE_NOT_SUPPORTED          = 0x8015DA60; // No claim providers offers the claim configured for the relying party        
        public const uint XONLINE_E_XSTS_ATCTCP_ACQUIRE_FAILURE                      = 0x8015DA61; // Failed to acquire valid ATCTCP configuration

        public const uint XONLINE_E_XSTS_TITLE_NOTVALID_NO_CERTCLAIM                 = 0x8015DA70; // Title claim invalid. No client cert claim
        public const uint XONLINE_E_XSTS_TITLE_NOTVALID_MULTIPLE_CERTCLAIMS          = 0x8015DA71; // Title claim invalid. Multiple client cert claims
        public const uint XONLINE_E_XSTS_TITLE_NOTVALID_UNTRUSTED_CALLER             = 0x8015DA72; // Title claim invalid. Not a trusted caller
        public const uint XONLINE_E_XSTS_TITLE_NOTVALID_UNTRUSTED_DEVICE             = 0x8015DA73; // Title claim invalid. Not a trusted device
        public const uint XONLINE_E_XSTS_TITLEID_PARSE_FAILURE                       = 0x8015DA74; // Could not parse TitleId
        public const uint XONLINE_E_XSTS_TITLEVERSION_PARSE_FAILURE                  = 0x8015DA75; // Could not parse TitleVersion
        public const uint XONLINE_E_XSTS_CLIENTVERSION_PARSE_FAILURE                 = 0x8015DA76; // Could not parse ClientVersion
        
        public const uint XONLINE_E_XSTS_PROVIDER_GETOUTPUTCLAIMSIDENTITY            = 0x8015DB00; // Exception calling Provider IClaimProvider::GetOutputClaimsIdentity
        public const uint XONLINE_E_XSTS_PROVIDER_SERVICEHOSTOPENED                  = 0x8015DB01; // Exception calling Provider IClaimProvider::ServiceHostOpened
        public const uint XONLINE_E_XSTS_PROVIDER_SERVICEHOSTCLOSED                  = 0x8015DB02; // Exception calling Provider IClaimProvider::ServiceHostClosed

        //
        // Passport RPS HRESULTS
        //
        public const uint XONLINE_E_RPS_NOT_INITIALIZED                              = 0x8015e200; // RPS is not initialized. Other RPS methods can be called only after the RPS.Initialize method has succeeded.
        public const uint XONLINE_E_RPS_FAILED_TO_CREATE_DOM                         = 0x8015e201; // Failed to create DOM object.
        public const uint XONLINE_E_RPS_INTERNAL_ERROR                               = 0x8015e202; // Internal program or unexpected error. Could also be caused by programming or configuration error.
        public const uint XONLINE_E_RPS_INVALID_OBJECT_ID                            = 0x8015e203; // The object ID is invalid. This condition can be caused by an internal RPS error or an error from a custom component.
        public const uint XONLINE_E_RPS_OBJECT_ID_CANNOT_OVERWRITE                   = 0x8015e204; // The object ID cannot be overridden. Custom component only: this error is caused by an attempt to override an object that cannot be overridden.
        public const uint XONLINE_E_RPS_FAILED_TO_TLS                                = 0x8015e205; // TLS (thread local storage) call failed. The system is in a bad state. TlsAlloc failed.
        public const uint XONLINE_E_RPS_XML_FILE_ERROR                               = 0x8015e206; // XML file error. RPS has encountered an invalid XML configuration file.
        public const uint XONLINE_E_RPS_READ_ONLY                                    = 0x8015e207; // Property is read only. This error is caused by an attempt to write to a read-only property bag.
        public const uint XONLINE_E_RPS_SERVER_CONFIG_ALREADY_INITTED                = 0x8015e208; // The server configuration has already been initialized. This condition is caused by an internal RPS error.
        public const uint XONLINE_E_RPS_INVALIDCONFIG                                = 0x8015e209; // Invalid configuration.
        public const uint XONLINE_E_RPS_CERT_NOT_FOUND                               = 0x8015e20a; // Certificate cannot be found. A certificate required for the operation was not found.
        public const uint XONLINE_E_RPS_SKIBUFFER_TOO_SMALL                          = 0x8015e20b; // Buffer for subject key identifier (SKI) is too small. This condition is caused by an internal RPS error or an invalid certificate with a large SKI.
        public const uint XONLINE_E_RPS_FILE_TOO_LARGE                               = 0x8015e20c; // File is too large. This condition is caused by large certificate file. The maximum size is 512 kilobytes.
        public const uint XONLINE_E_RPS_INVALID_DATATYPE                             = 0x8015e20d; // Data type is invalid. The data type is different from the expected data type.
        public const uint XONLINE_E_RPS_MORE_DATA                                    = 0x8015e20e; // Insufficient data buffer.
        public const uint XONLINE_E_RPS_INVALID_SIGNATURE                            = 0x8015e20f; // Signatures do not match.
        public const uint XONLINE_E_RPS_ENCRYPTEDKEY_TOO_LARGE                       = 0x8015e211; // The encrypted key data is too large. The maximum size is 1024 bytes.
        public const uint XONLINE_E_RPS_DATA_INTEGRITY_CHECK_FAILED                  = 0x8015e212; // The data integrity check failed. There was a hash mismatch.
        public const uint XONLINE_E_RPS_CERT_WITHOUT_PRIVATE_KEY                     = 0x8015e214; // The certificate used for decryption did not have private key.
        public const uint XONLINE_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED             = 0x8015e215; // Network configuration cache has already been initialized. Caused by an internal RPS error.
        public const uint XONLINE_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND                   = 0x8015e216; // The requested domain attribute was not found in RPSNetwork.xml.
        public const uint XONLINE_E_RPS_INVALIDDATA                                  = 0x8015e217; // The data to pack or unpack is not valid RPS data.
        public const uint XONLINE_E_RPS_TICKET_NOT_INITIALIZED                       = 0x8015e218; // Ticket was not initialized.
        public const uint XONLINE_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE  = 0x8015e219; // Ticket has already been initialized. A ticket object cannot be reused.
        public const uint XONLINE_E_RPS_SAML_ASSERTION_MISSINGDATA                   = 0x8015e21a; // A SAML assertion or WebSSO ticket is missing a data member. Invalid assertion.
        public const uint XONLINE_E_RPS_INVALID_TIMEWINDOW                           = 0x8015e21b; // Invalid time window. The time window parameter in the site configuration or supplied as an input parameter is either too large or too small.
        public const uint XONLINE_E_RPS_HTTP_BODY_REQUIRED                           = 0x8015e21d; // The HTTP body is required to authenticate. The application should call the method again with the HTTP body.
        public const uint XONLINE_E_RPS_INVALID_TICKET_TYPE                          = 0x8015e21e; // The ticket type is invalid. This condition could be caused by an incorrect ticket type or a switching of the RPSAuth and RPSSecAuth cookies.
        public const uint XONLINE_E_RPS_INVALID_SLIDINGWINDOW                        = 0x8015e21f; // Sliding time window is invalid. The input parameter for the sliding time window must be smaller than the parameter for the time window. These values can come from site configuration or method arguments.
        public const uint XONLINE_E_RPS_REASON_INVALID_AUTHMETHOD                    = 0x8015e220; // The Validate call failed because the AuthMethod check failed.
        public const uint XONLINE_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE                    = 0x8015e222; // The attribute index requested is greater than the attribute count in the profile schema.
        public const uint XONLINE_E_RPS_INVALID_PROFILESCHEMA_TYPE                   = 0x8015e223; // The data type requested is not defined in the profile schema. The data type is not supported.
        public const uint XONLINE_E_RPS_FAILED_DOWNLOAD                              = 0x8015e224; // The RPS service failed to download RPSNetwork.xml.
        public const uint XONLINE_E_RPS_INVALID_SITEID                               = 0x8015e226; // The SiteId does not match the Ticket TargetId or audience.
        public const uint XONLINE_E_RPS_BASE64DECODE_FAILED                          = 0x8015e227; // Failed to do base64 decoding.
        public const uint XONLINE_E_RPS_REASON_TIMEWINDOW_EXPIRED                    = 0x8015e228; // The Validate call failed because the time window expired.
        public const uint XONLINE_E_RPS_REASON_SLIDINGWINDOW_EXPIRED                 = 0x8015e229; // The Validate call failed because the sliding time window expired.
        public const uint XONLINE_E_RPS_CERT_INVALID_KEY_SPEC                        = 0x8015e22a; // The certificate private key has an invalid key spec. The key spec should be AT_KEYEXCHANGE.
        public const uint XONLINE_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION       = 0x8015e22b; // Internal program error.
        public const uint XONLINE_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE          = 0x8015e22c; // An invalid AuthInstant data type was encountered during time-window validation.
        public const uint XONLINE_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED      = 0x8015e22d; // HTTPS or an encrypted ticket is needed.
        public const uint XONLINE_E_RPS_REASON_INCORRECT_IV_BYTES                    = 0x8015e22e; // HTTPS or an encrypted ticket is needed.
        public const uint XONLINE_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED          = 0x8015e22f; // Passport f-code error was encountered in the query string.
        public const uint XONLINE_E_RPS_NO_SESSION_KEY                               = 0x8015e230; // There is no session key in the ticket.
        public const uint XONLINE_E_RPS_INVALID_COOKIE_NAME                          = 0x8015e231; // The reserved cookie name is specified.
        public const uint XONLINE_E_RPS_INVALID_AUTHPOLICY                           = 0x8015e232; // The AuthPolicy parameter in site configuration or input parameter is invalid or missing. Check the RPSNetwork.xml file for valid AuthPolicy names.
        public const uint XONLINE_E_RPS_INVALID_ENCRYPT_ALGID                        = 0x8015e233; // The encryption method algId is invalid.
        public const uint XONLINE_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED        = 0x8015e234; // Post ticket time window expired. Ticket could be reposted.
        public const uint XONLINE_E_RPS_TICKET_HAS_NO_SESSIONKEY                     = 0x8015e235; // The ticket does not have a session key.
        public const uint XONLINE_E_RPSDATA_DATA_TOO_LARGE                           = 0x8015e400; // The data is larger than the RPSData limit.
        public const uint XONLINE_E_RPSDATA_INVALID_DATATYPE                         = 0x8015e401; // The data type in the data schema is not supported.
        public const uint XONLINE_E_RPSDATA_MORE_DATA                                = 0x8015e402; // The data buffer is insufficient.
        public const uint XONLINE_E_RPSDATA_INVALID_DATAOFFSET                       = 0x8015e403; // The data offset is too large or invalid.
        public const uint XONLINE_E_RPSDATA_INVALIDDATA                              = 0x8015e404; // The data is invalid.
        public const uint XONLINE_E_PP_E_RPS_TICKET_HAS_NO_OFFERACTIONS              = 0x8015e405; // The ticket does not have any offerActions.
        public const uint XONLINE_E_PP_E_RPS_REASON_INVALID_OFFERACTIONS_DATATYPE    = 0x8015e406; // Invalid offerActions data type encountered during validation.
        public const uint XONLINE_E_PP_E_RPS_REASON_OFFERACTIONS_INVALID             = 0x8015e407; // All the offerActions provided in the property bag cannot be validated for the token.
        public const uint XONLINE_E_PP_E_RPS_NO_OFFERACTIONS                         = 0x8015e408; // No offerActions were provided for validating consent.
        public const uint XONLINE_E_PP_E_RPS_REASON_INVALID_ISSUEINSTANT_DATATYPE    = 0x8015e409; // Invalid IssueInstant encountered during validation.
        public const uint XONLINE_E_PP_E_RPS_REASON_INVALID_EXPIRYTIME_DATATYPE      = 0x8015e40a; // Invalid ExpiryTime data type encountered during validation.

        public const uint XONLINE_E_PP_E_RPS_NOT_ALL_OFFER_ACTIONS_CONSENTED         = 0x8015e40b; // Not a true Passport error code: Not all offer actions have been consented
        public const uint XONLINE_E_PP_E_RPS_REASON_APPID_NOT_IN_ALLOWLIST           = 0x8015e40c; // Not a true Passport error code: Delegation token AppId not in allowlist

        //
        //
        // NOTE: For new services, please use a range of 100 return codes, preferably between some existing services
        //
        //


        //
        // Billing Service HRESULTS                                                  = 0x80160000 - 0x8016FFFF
        //

        // IMPORTANT: DO NOT INTRODUCE ANY HRESULT VALUES IN THE RANGE: 0x80160000-0x8016ffff!
        //
        // The const definitions for the SCS/Billing HRESULTS are no longer defined here
        // but instead are autogenerated from the SCS bdkerror.xml file using an XSL script.
        //
        // Previously, this list was hand-generated or built from quick-and-dirty Perl script
        // that was not part of the build environment.  By making sure these errors are
        // always generated from the errors defined by current SCS SDK, the Xbox translations
        // of those errors should never lag too far behind SCS.
        //

        // Unfortunately, two Xbox-specific errors were introduced into this range which the
        // client now has a dependency on.  At present, SCS is not returning either of these
        // two error codes but if they ever do, code will need to be introduced to the BdkError
        // constructor to recognize and re-map them or there will be a potential ambiguity as to
        // what this error actually means.
        public const uint XONLINE_E_BILLING_PAYMENT_INSTRUMENT_CHANGES_RESTRICTED                  = 0x8016148b;  // Payment instrument changes are restricted through user (or tier or offer) privilege
        public const uint XONLINE_E_BILLING_PASSPORT_SWITCHING_RESTRICTED                          = 0x8016148c;  // Payment instrument changes are restricted through user (or tier or offer) privilege

        //
        // Private server-internal HRESULTS (never exposed to clients)
        // (range of 0x8017xxxx)
        //
        public const uint XONLINE_E_PUID_IS_MACHINE     = 0x80170000;

        // tools management server
        public const uint TOOLS_SERVER_E_FILE_NOT_FOUND                              = 0x80170100; // tools service failed to find a file on file share to be propped to the data center
        public const uint TOOLS_SERVER_E_SD_ADD_FAILED                               = 0x80170101; // tools service failed to add a file to title manager repository
        public const uint TOOLS_SERVER_E_SD_SUBMIT_FAILED                            = 0x80170102; // tools service failed to submit a file into title manager repository
        public const uint TOOLS_SERVER_E_TMR_STATS                                   = 0x80170103; // title manager failed to prop the package
        public const uint TOOLS_SERVER_E_INTERRUPTED_TASK                            = 0x80170104; // tools service was stopped while processing a job. The job should be rolled back manually
        public const uint TOOLS_SERVER_E_INVALID_TITLE_ID                            = 0x80170105; // tools service cannot process the job because title id is invalid

        //
        // livecache hresult (not exposed to consoles)                               = 0x80171xxx
        //
        public const uint XONLINE_E_LIVECACHE_EMPTY_RESULT                           = 0x80171001; // live service replied with empty result, this should not happen
        public const uint XONLINE_E_LIVECACHE_FORWARD_FAILED                         = 0x80171002; // failed to forward the request to live service: failed to connect or not getting response
        public const uint XONLINE_E_LIVECACHE_OFFLINE                                = 0x80171003; // the requested service has been turned off at livecache
        public const uint XONLINE_E_LIVECACHE_USER_OVERHEAT                          = 0x80171004; // too many requests from this same user within the current hour
        public const uint XONLINE_E_LIVECACHE_INEXIST_KEY                            = 0x80171005; // the key specified in LoadData request was not found, timed out?
        public const uint XONLINE_E_LIVECACHE_MAX_HEADER_COLLECTION_LIMIT            = 0x80171006; // max header limit exceeded.


        //
        // wcmusic hresults (exposed to mtv, not consoles)                              = 0x80172xxx
        //
        public const uint XONLINE_E_WCMUSIC_TEST_FAULT                                  = 0x80172000; // returned by TestConnection in order to test throwing faults
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_SUSPENDED                           = 0x80172001; // returned by orderItems if account is suspended because of unconfirmed free trial
        public const uint XONLINE_E_WCMUSIC_INSUFFICIENT_BALANCE                        = 0x80172002; // returned by orderItems if no points available
        public const uint XONLINE_E_WCMUSIC_ITEM_ALREADY_PURCHASED                      = 0x80172003; // returned by orderItems if repurchaseOverride is false, which it never is currently
        public const uint XONLINE_E_WCMUSIC_ITEM_UNAVAILABLE                            = 0x80172004; // returned by orderItems if the component is unavailable from MusicNet
        public const uint XONLINE_E_WCMUSIC_TOO_MANY_ITEMS                              = 0x80172005; // returnded by orderItems if item count > 100
        public const uint XONLINE_E_WCMUSIC_NOT_SUSPENDED_BY_PARTNER                    = 0x80172006; // returned by orderItems if account is suspended manually by Customer Service Rep, or returned by resumeAccount if account is suspended manually by a Customer Service Rep
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_NOT_ELIGIBLE                        = 0x80172007; // returned by AuthenticateAccount if user is not eligible for the Argo service due to country, age, restrictions, etc.
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_NOT_PROVISIONED                     = 0x80172008; // returned by AuthenticateAccount if user has not been provisioned for Argo service
        public const uint XONLINE_E_WCMUSIC_INVALID_ARGUMENT                            = 0x80172009; // returned when an argument passed in to the API was not allowed/expected.
        public const uint XONLINE_E_WCMUSIC_TRANSACTION_PENDING                         = 0x8017200A; // returned from OrderItems when something went wrong and the purchase transaction is in an inderterminate state.  Calling GetOrderByExternalOrderId should be called to get the updated status on the transaction.
        public const uint XONLINE_E_WCMUSIC_DUPLICATE_EXTERNAL_ORDER_ID                 = 0x8017200B; // returned from OrderItems if a duplicate orderId was passed into wcmusic.  Calling GetOrderByExternalOrderId should be called to get the updated status on that transaction, if needed.  Otherwise a new externalOrderID needs to be generated.
        public const uint XONLINE_E_WCMUSIC_RPS_TICKET_EXPIRED                          = 0x8017200C; // returned from AuthenticateAccount when the Passport RPS ticket has expired
        public const uint XONLINE_E_WCMUSIC_INVALID_RETAILER_ID                         = 0x8017200D; // returned by any API that takes a retailerID, if the value specified was not expected
        public const uint XONLINE_E_WCMUSIC_MAX_CONSUMPTION_EXCEEDED                    = 0x8017200E; // returned by orderItems if the maximum number of points (defined by DMP policy) has been reached for the user making the purchase
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_REQUIRES_MANAGEMENT                 = 0x8017200F; // returned if the account is otherwise disabled, banned, suspended, etc. and requires management on Argo.com
        public const uint XONLINE_E_WCMUSIC_ACCOUNT_INVALID_USER                        = 0x80172010; // returned if the RPS ticket is valid but for a user without an account
        public const uint XONLINE_E_WCMUSIC_MUSICNET_ERROR                              = 0x80172011; // returned if there was some sort of error returned from MusicNet
        public const uint XONLINE_E_WCMUSIC_MUSICNET_COMMUNICATION_ERROR                = 0x80172012; // returned if there was communication error talking to musicnet


        //
        // Sts hresults                                                                 = 0x80173xxx
        //
        public const uint XONLINE_E_STS_ERROR                                           = 0x80173000; // Unsepecified STS error
        public const uint XONLINE_E_STS_CONFIGURATION_ERROR                             = 0x80173001; // STS configuration error
        public const uint XONLINE_E_STS_INVALID_ARGUMENT                                = 0x80173002; // STS invalid argument error
        public const uint XONLINE_E_STS_INVALID_PLATFORM_TYPE                           = 0x80173003; // STS token requested for unsupported platform type
        public const uint XONLINE_E_STS_XSTSTOKEN_NULL                                  = 0x80173004; // GetXStsToken returned NULL token
        public const uint XONLINE_E_STS_GETXSTSTOKEN_ERROR                              = 0x80173005; // GetXStsToken caught exception


        //
        // ConfigDB hresults                                                            = 0x80174xxx
        //
        public const uint XONLINE_E_CONFIGDB_INVALID_COMPONENT                          = 0x80174000; // Caller specified a component name that does not exist in t_components
        public const uint XONLINE_E_CONFIGDB_INVALID_INSTANCE                           = 0x80174001; // Caller specified an instance name that does not exist in t_instances
        public const uint XONLINE_E_CONFIGDB_NO_DEFAULT_INSTANCE                        = 0x80174002; // This operation cannot be completed without a default instance specified in t_instances
        public const uint XONLINE_E_CONFIGDB_INVALID_SERVER                             = 0x80174003; // Caller specified a server name that does not exist in t_servers
        public const uint XONLINE_E_CONFIGDB_INVALID_SETTING                            = 0x80174004; // Caller specified a setting name that does not exist in t_settings
        public const uint XONLINE_E_CONFIGDB_INVALID_PARENT                             = 0x80174005; // Caller specified an instance that is already a child and cannot be used as a parent instance.
        public const uint XONLINE_E_CONFIGDB_CANNOT_DEMOTE_PARENT                       = 0x80174006; // Parent instances cannot be demoted back into children.
        public const uint XONLINE_E_CONFIGDB_INVALID_INTERFACE                          = 0x80174007; // Caller specified an interface that does not exist in t_interfaces.
        public const uint XONLINE_E_CONFIGDB_NAME_TOO_LONG                              = 0x80174008; // Caller specified a named item (component, server, setting, etc.) whose name exceeeded the allowable limit.
        public const uint XONLINE_E_CONFIGDB_NO_PARAMETERS_SPECIFIED                    = 0x80174009; // Call specified no parameters where at least one is required.

        /// <summary>
        /// Catalog Watcher Events                                                      = 0x80175xxx
        /// </summary>
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_ID                           = 0x80175000; // The ID does not exist in the database
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_ERROR                       = 0x80175001; // Generic producer error
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_ERROR                      = 0x80175002; // Generic publisher error
        public const uint XONLINE_E_CATALOGWATCHER_WATCHER_ERROR                        = 0x80175003; // Generic Watcher error
        public const uint XONLINE_E_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR    = 0x80175004; // ESP operation error
        public const uint XONLINE_E_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING  = 0x80175005; // ESP operation warning
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_DESTINATION_NAME             = 0x80175006; // The destination name is invalid
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_RESOURCE_NAME                = 0x80175007; // The resource name is invalid
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_INVALID_QUEUE_OPERATION     = 0x80175008; // The producer did not add anything to the queue
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_UPDATE_LSN_FAILED          = 0x80175009; // The publisher could not update the LSN
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_INVALID_QUEUE_OPERATION    = 0x8017500A; // The publisher did not dequeue
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_INCORRECT_LSN_ORDER        = 0x8017500B; // LSN's were not in monotonically increasing order
        public const uint XONLINE_E_CATALOGWATCHER_MEDIA_EXTRACTOR_MISSING_DOCUMENT     = 0x8017500C; // Missing Document
        public const uint XONLINE_E_CATALOGWATCHER_NULL_DOCUMENT_IN_QUEUE               = 0x8017500D; // Null document in queue
        public const uint XONLINE_E_CATALOGWATCHER_ZERO_QUEUE_SIZE                      = 0x8017500E; // Queue is being initialized with size 0
        public const uint XONLINE_E_CATALOGWATCHER_GENERATE_DOCUMENTS_INVALID_COUNT     = 0x8017500F; // Count of <= 0 passed to GenerateDocuments
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NOT_INITIALIZED_CORRECTLY   = 0x80175010; // Producer not initialized correctly
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_NEGATIVE_BUCKET            = 0x80175011; // Bucket identifier is negative
        public const uint XONLINE_E_CATALOGWATCHER_PUBLISHER_NULL_DOCUMENT              = 0x80175012; // Document is null
        public const uint XONLINE_E_CATALOGWATCHER_NULL_LSN                             = 0x80175013; // LSN is null
        public const uint XONLINE_E_CATALOGWATCHER_INVALID_INPUT_PARAMETER              = 0x80175014; // Invalid input parameter
        public const uint XONLINE_E_CATALOGWATCHER_MISSING_PARAMETER                    = 0x80175015; // Missing input parameter
        public const uint XONLINE_E_CATALOGWATCHER_COMMAND_FAILURE                      = 0x80175016; // Generic Command Failure
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_INVALID_STATE               = 0x80175017; // Producer method has been invoked either without initializing or after an exception was thrown.
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_PDLC_CONFIG              = 0x80175018; // pdlc_mediatypes setting is absent in t_multisettings in npdb
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_RATEABLE_CONFIG          = 0x80175019; // ratings_mediatypes setting is absent in t_multisettings in npdb
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NOT_AN_INTEGER_SETTING      = 0x8017501A; // The setting is not an integer
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_EXEMPTGCFORTITLES        = 0x8017501B; // Missing exempt game content for titles multisetting
        public const uint XONLINE_E_CATALOGWATCHER_PRODUCER_NO_EXEMPTMEDIATYPES         = 0x8017501C; // Missing exempt media types multisetting
        public const uint XONLINE_E_CATALOGWATCHER_DOCUMENT_TOO_LARGE                   = 0x8017501D; // Document has been generated that is larger then FAST ESP can store
        public const uint XONLINE_E_CATALOGWATCHER_AZURESTORAGE_PUBLISHER_ERROR         = 0x8017501E; // AzureStorage Publisher Error
        public const uint XONLINE_E_CATALOGWATCHER_SPEECH_EXTRACTOR_MISSING_DOCUMENT    = 0x8017501F; // Missing Document

        ///<summary>
        ///Mix Common HResults                                                          = 0x80176xxx
        ///</summary>
        public const uint XONLINE_E_MIX_UNKNOWNERROR                                    = 0x80176000; // Unknown Error
        public const uint XONLINE_E_MIX_ENTITYFRAMEWORK_CONNECTION_ERROR                = 0x80176001; // SQL & Entity Framework Connection Error
        public const uint XONLINE_E_MIX_CONFIGUREPRODUCT                                = 0x80176002; // Configure Product Error
        public const uint XONLINE_E_MIX_GETPRODUCT                                      = 0x80176003; // Get Product Error
        public const uint XONLINE_E_MIX_CONFIGUREOFFER                                  = 0x80176004; // Configure Offer Error
        public const uint XONLINE_E_MIX_GETOFFER                                        = 0x80176005; // Get Offer Error
        public const uint XONLINE_E_MIX_WEBSGVALIDATIONERROR                            = 0x80176006; // WebSG Validation Error
        public const uint XONLINE_E_MIX_ARGUMENT_NULL                                   = 0x80176007; // Null input to mix
        public const uint XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL                          = 0x80176008; // Null input within mix
        public const uint XONLINE_E_MIX_NOT_FOUND_IN_CATALOG                            = 0x80176009; // Item not found in catalog
        public const uint XONLINE_E_MIX_INVALID_MEDIA_RELATIONSHIP_TYPE                 = 0x8017600A; // MediaRelationShipType is invalid
        public const uint XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_TYPE                 = 0x8017600B; // Offer relationship type is invalid
        public const uint XONLINE_E_MIX_NEW_MEDIA_FOR_EXISTING_OFFER                    = 0x8017600C; // New media id given for existing offer
        public const uint XONLINE_E_MIX_NEW_OFFER_FOR_EXISTING_OFFERINSTANCE            = 0x8017600D; // New offer id given for existing offer instance
        public const uint XONLINE_E_MIX_INVALID_DURATION_TYPE                           = 0x8017600E; // DurationType is Invalid
        public const uint XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_MEDIA                = 0x8017600F; // related Medias are Invalid
        public const uint XONLINE_E_MIX_INVALID_OFFERTYPE_MEDIA                         = 0x80176010; // Offertype and MediaIds mismatch
        public const uint XONLINE_E_MIX_INVALID_TITLE_ID                                = 0x80176011; // Invalid Title ID Used
        public const uint XONLINE_E_MIX_INVALID_LEADERBOARD_ID                          = 0x80176012; // Invalid Leaderboard ID Used
        public const uint XONLINE_E_MIX_INVALID_XLAST                                   = 0x80176013; // Invalid Xlast Used
        public const uint XONLINE_E_MIX_DECOMPRESSION_ERROR                             = 0x80176014; // Decompression error when decompressing xlast
        public const uint XONLINE_E_MIX_INVALID_VERSION                                 = 0x80176015; // Invalid Version Used
        public const uint XONLINE_E_MIX_INVALID_PLATFORM                                = 0x80176016; // Invalid Platform Used
        public const uint XONLINE_E_MIX_INVALID_FILE_TYPE                               = 0x80176017; // Invalid File Type Used
        public const uint XONLINE_E_MIX_INVALID_GUID                                    = 0x80176018; // Empty GUID Used
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY                  = 0x80176019; // Unknown game attribute property encountered
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_TYPE             = 0x8017601A; // Unknown game attribute property type encountered
        public const uint XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE            = 0x8017601B; // Unknown game attribute property value encountered
        public const uint XONLINE_E_MIX_MEDIALOCALEMAPS_INVALID_MAPPING                 = 0x8017601C; // Invalid mapping encountered processing MediaLocaleMaps
        public const uint XONLINE_E_MIX_INVALID_CONSUMABLE_QUANTITY                     = 0x8017601D; // Invalid quantity for game consumable offer
        public const uint XONLINE_E_MIX_FORBIDDEN_ENVIRONMENT                           = 0x8017601E; // Environment not allowed
        public const uint XONLINE_E_MIX_INVALID_MEDIATYPE                               = 0x8017601F; // Invalid MediaType used for a Product
        public const uint XONLINE_E_MIX_NEW_LIVEOFFERID_FOR_EXISTING_OFFER              = 0x80176020; // Attempt to change a live offer id mapping
        public const uint XONLINE_E_MIX_UNIQUE_RATINGSYSTEMS_ERROR                      = 0x80176021; // The rating list contains at least more than one instance from the same rating system
        public const uint XONLINE_E_MIX_PRODUCT_LOCALIZATION_NOT_FOUND                  = 0x80176022; // No localization text for this product is found the particular country for the offer instance
        public const uint XONLINE_E_MIX_CONCURRENCY_ERROR                               = 0x80176023; // Concurrency issue occured in Entity Framework
        public const uint XONLINE_E_MIX_INVALID_SERVICE_TYPE                            = 0x80176024; // invalid service type - xbox or zune
        public const uint XONLINE_E_MIX_INVALID_SUBSCRIPTION_TYPE                       = 0x80176025; // invalid subscription type - base, game, content
        public const uint XONLINE_E_MIX_INVALID_TIER                                    = 0x80176026; // invalid tier (0, 3, 6 ...)
        public const uint XONLINE_E_MIX_INVALID_SERVICE_PRIVILEGE_SET                   = 0x80176027; // invalid service privilege set (e.g. gold, silver, family, zune pass, phantasy star ...)
        public const uint XONLINE_E_MIX_CATALOG_CONSTRAINT_ERROR                        = 0x80176028; // Catalog SQL Constraint error occured
        public const uint XONLINE_E_MIX_ZERO_GUID_NOT_ALLOWED                           = 0x80176029; // The API does not support empty guids.
        public const uint XONLINE_E_MIX_GROUP_DOES_NOT_EXIST                            = 0x8017602A; // The group requested does not exist.
        public const uint XONLINE_E_MIX_INVALID_PRODUCTFAMILY                           = 0x8017602B; //product ->offerInstance mapping is happening even before service sets are defined
        public const uint XONLINE_E_MIX_INVALID_SKU_DELETE                              = 0x8017602C; // Invalid sku delete operation
        public const uint XONLINE_E_MIX_DUPLICATE_GROUP_NAME_NOT_ALLOWED                = 0x8017602D; // Group names must be unique
        public const uint XONLINE_E_MIX_INVALID_GROUP_NAME                              = 0x8017602E; // The group name is invalid.
        public const uint XONLINE_E_MIX_INVALID_GROUP_CREATOR                           = 0x8017602F; // The group creator is invalid.
        public const uint XONLINE_E_MIX_ARGUMENT_EMPTY                                  = 0x80176030; // Empty string passed into mix that needs to be filled in
        public const uint XONLINE_E_MIX_INVALID_CONFIG                                  = 0x80176031; // Invalid combination of configuration parameters.
        public const uint XONLINE_E_MIX_STATS_FORCE_REQUIRED                            = 0x80176032; // Leaderboard update needs force parameter to be successful
        public const uint XONLINE_E_MIX_MATCH_MISSING_REMOVE_MODE                       = 0x80176033; // MixMatch attemped to remove a mode with removeMode set to false
        public const uint XONLINE_E_MIX_MATCH_NEW_MODE_FOUND                            = 0x80176034; // MixMatch found a new mode added to the XLAST. This must be configured manually.
        public const uint XONLINE_E_MIX_MATCH_SQL_EXCEPTION                             = 0x80176035; // MixMatch encountered a SQL exception. This may be due to dropTable being set to false.
        public const uint XONLINE_E_MIX_GROUP_MUST_BE_EMPTY                             = 0x80176036; // The operation is not valid unless the group is empty.
        public const uint XONLINE_E_MIX_STRING_TOO_LONG                                 = 0x80176037; // A string parameter is too long
        public const uint XONLINE_E_MIX_MACHINE_NOT_IN_GROUP                            = 0x80176038; // The machine was not in the given group.
        public const uint XONLINE_E_MIX_CANNOT_MIGRATE_TO_SELF                          = 0x80176039; // Cannot migrate a group to itself.
        public const uint XONLINE_E_MIX_DUPLICATE_XRL_NOT_ALLOWED                       = 0x8017603A; // Duplicate title update location XRLs aren't allowed.
        public const uint XONLINE_E_MIX_FRONT_DOOR_RESET_ERROR                          = 0x8017603B; // Front Door Reset Error
        public const uint XONLINE_E_MIX_DUPLICATE_APP_NOT_ALLOWED                       = 0x8017603C; // Duplicate App Not Allowed
        public const uint XONLINE_E_MIX_ARRAY_TOO_LONG                                  = 0x80176040; // An array parameter is too long
        public const uint XONLINE_E_MIX_DUPLICATE_RANK_NOT_ALLOWED                      = 0x80176041; // Duplicate title update location ranks aren't allowed.
        public const uint XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTIONFAMILY_CONFIG         = 0x80176042; // Wrong LiveSubscriptionFamily Configuration
        public const uint XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG               = 0x80176043; // Wrong LiveSubscription Configuration
        public const uint XONLINE_E_MIX_OFFER_NO_TIER_FOUND                             = 0x80176044; // No tier found
        public const uint XONLINE_E_MIX_OFFER_NO_FREQUENCY_FOUND                        = 0x80176045; // No Offer frequency found
        public const uint XONLINE_E_MIX_OFFER_ERROR_FAMILY_INGESTION                    = 0x80176046; //No family content ingestion supported
        public const uint XONLINE_E_MIX_OFFER_ERROR_LEGACY_OFFER                        = 0x80176047; //No Legacy offer mapping
        public const uint XONLINE_E_MIX_DUPLICATE_CONTENTID                             = 0x80176048; // A ContentId can only be associated with one MediaInstance/ProductPackage
        public const uint XONLINE_E_MIX_ERROR_INGESTING_MANIFEST                        = 0x80176049; // There was an error ingesting a new Etx manifest
        public const uint XONLINE_E_MIX_INVALID_VISIBILITY_STATUS                       = 0x80176050; // Invalid visibilitystatus (only allows 3,5 through mix)
        public const uint XONLINE_E_MIX_PRODUCT_DUPLICATE_IMAGE_INSTANCE_ID             = 0x80176051; // Duplicate Image Instance Id (ImageId, Lcid, SizeId, FormatId) not allowed through MIX
        public const uint XONLINE_E_MIX_OPERATION_NOT_SUPPORTED                         = 0x80176052; // Operation not supported or not yet implemented.
        public const uint XONLINE_E_MIX_PRODUCT_TOOMANYPUBLISHERBITCATEGORIES           = 0x80176053; // More than one Publisher Bit Category provided. Only 1 publisher bit is supported for in game browsing apis.
        public const uint XONLINE_E_MIX_NO_SETTING                                      = 0x80176054; // NPDB setting value is missing
        public const uint XONLINE_E_MIX_DUPLICATE_RATINGDESCRIPTOR                      = 0x80176056; // Duplicate RatingDescriptor provided
        public const uint XONLINE_E_MIX_PRODUCT_PUBLISHERBITCATEGORYMISSING             = 0x80176057; // Publisher Bit Category was not provided but is needed for this GameContent type
        public const uint XONLINE_E_MIX_BUSINESS_PARTNER_DOES_NOT_EXIST                 = 0x80176058; // STS Business Partner doesn't exist.
        public const uint XONLINE_E_MIX_TITLE_HAS_NO_BUSINESS_PARTNER                   = 0x80176059; // Setting a title's endpoints doesn't work when the title doesn't have a business partner.
        public const uint XONLINE_E_MIX_TITLE_TOO_MANY_ENDPOINTS                        = 0x8017605A; // Setting a title's endpoints doesn't work when the title doesn't have a business partner.
        public const uint XONLINE_E_MIX_APPLIES_TO_DOES_NOT_EXIST                       = 0x8017605B; // Setting a title's endpoint to an applies to that doesn't exist.
        public const uint XONLINE_E_MIX_UNSUPPORTED_TOKEN_TYPE                          = 0x8017605C; // Setting an applies to to an unsupported token type.
        public const uint XONLINE_E_MIX_UNSUPPORTED_ENDPOINT_PROTOCOL                   = 0x8017605D; // Invalid protocol for a title endpoint.
        public const uint XONLINE_E_MIX_INVALID_CLAIM_TYPE                              = 0x8017605E; // Invalid claim type.
        public const uint XONLINE_E_MIX_PRIVATE_CLAIM_TYPE                              = 0x8017605F; // Cannot use a private claim type in an applies to.
        public const uint XONLINE_E_MIX_PRODUCT_DUPLICATETERM                           = 0x80176060; // Duplicate Term in SearchInformation 
        public const uint XONLINE_E_MIX_PRODUCT_DUPLICATESEARCHLOCALE                   = 0x80176061; // Duplicate SearchInformation with the same Locale
        public const uint XONLINE_E_MIX_PRIVATE_BUSINESS_PARTNER                        = 0x80176062; // Cannot use mix APIs to modify a private Business Partner
        public const uint XONLINE_E_MIX_INVALID_HOSTNAME                                = 0x80176063; // hostname must not be an ip address
        public const uint XONLINE_E_MIX_HOSTNAME_IP_EXCLUSION                           = 0x80176064; // hostname and to/from ips are mutually exclusive
        public const uint XONLINE_E_MIX_INVALID_PORT                                    = 0x80176065; // port must be in range 0-65534 inclusive
        public const uint XONLINE_E_MIX_INVALID_IP_RANGE                                = 0x80176066; // invalid IP range, to is > from

        ///<summary>
        ///FML Common HResults                                                          = 0x80177xxx
        ///<summary>
        public const uint XONLINE_E_FML_UNKNOWN_ERROR                                   = 0x80177000; // Unknown Error
        public const uint XONLINE_E_FML_ALREADY_EXECUTING                               = 0x80177001; // Trying to start a new job while a job is currently executing.
        public const uint XONLINE_E_FML_ARGUMENT_NOT_FOUND                              = 0x80177002; // An argument was not found during the running of a job.
        public const uint XONLINE_E_FML_JOB_FAILED                                      = 0x80177003; // A job encountered an exception and was stopped.
        public const uint XONLINE_E_FML_OPERATION_FAILED                                = 0x80177004; // A job encountered an exception and was stopped.

        /// <summary>
        /// FAST ESP Engine Events                                                      = 0x80178xxx
        /// </summary>
        public const uint XONLINE_E_ESP_ENGINE_UNKNOWN_ERROR                            = 0x80178000; // Unknown error
        public const uint XONLINE_E_ESP_ENGINE_INVALID_PARAMETER                        = 0x80178001; // An invalid datatype was used
        public const uint XONLINE_E_ESP_ENGINE_INVALID_SYNTAX                           = 0x80178002; // Invalid syntax used for value type
        public const uint XONLINE_E_ESP_ENGINE_INVALID_DATA_TYPE                        = 0x80178003; // Invalid data type was used
        public const uint XONLINE_E_ESP_ENGINE_PARAMETER_NOT_FOUND                      = 0x80178004; // Could not find the parameter in the filter criteria
        public const uint XONLINE_E_ESP_ENGINE_INVALID_RULE                             = 0x80178005; // Rule could not be processed and had invalid data
        public const uint XONLINE_E_ESP_ENGINE_SEARCH_TERM_TO_LONG                      = 0x80178006; // Search term used is beyond the proper length allowed
        public const uint XONLINE_E_ESP_ENGINE_INVALID_PARAMETER_GROUPING               = 0x80178007; // An invalid grouping of parameters was used

        /// <summary>
        /// Marketplace Catalog Events                                                  = 0x80179xxx
        /// </summary>
        public const uint XONLINE_E_MARKETPLACECATALOG_UNKNOWN_ERROR                    = 0x80179000; // Unknown error
        public const uint XONLINE_E_MARKETPLACECATALOG_PARAMETER_MISSING                = 0x80179001; // A parameter is missing
        public const uint XONLINE_E_MARKETPLACECATALOG_BAD_FORMAT                       = 0x80179002; // A parameter is not formatted properly
        public const uint XONLINE_E_MARKETPLACECATALOG_DETAIL_LEVEL_MISSING             = 0x80179003; // A detail level is missing for a search hit

        //
        // XboxLive Token HRESULTS
        //
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_VERSION                       = 0x80180000; // Token Major or Minor version number invalid
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_ISSUER                        = 0x80180001; // Token Issuer invalid
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_STATEMENT_COUNT               = 0x80180002; // Token contains an unexpected number of statements
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_STATEMENT_TYPE                = 0x80180003; // Token statement is not of the expected type
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_THUMBPRINT                    = 0x80180004; // Token not signed by expected certificate
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_CLIENTTHUMBPRINT              = 0x80180005; // Token not being used with the certificate for which it was issued
        public const uint XONLINE_E_XBOXLIVETOKEN_INVALID_PLATFORMTYPE                  = 0x80180006; // Platform type not valid or inconsistent with token claims

        public const uint XONLINE_E_XBOXLIVETOKEN_CERT_CONFIG                           = 0x80180020; // Configuration problem caused GetCertificate failure

        //
        // Active Auth HRESULTS
        //
        public const uint XONLINE_E_AAINFO_TOKEN_DATA_NOTFOUND                          = 0x80180101; // AA Token Data not found
        public const uint XONLINE_E_AAINFO_TOKEN_FIELD_NOTVALID                         = 0x80180102; // AA Token field not valid with Token

        public const uint XONLINE_E_AUTHSG_TRANSFERENCODING_HEADER_NOTVALID             = 0x80180201; // Transfer-Encoding header MUST include chunked

        //DO NOT ADD EVENTS IN 0x80190000 to 0x8019FFFF.These are new ctp error codes


        //
        // XClaimProvider HRESULTS                                                      = 0x801A05xx
        //
        public const uint XONLINE_E_XCLAIMPROVIDER_NOXUIDCLAIM                          = 0x801A0500; // A Xuid Claim is not present, user specific claim types are not possible
        public const uint XONLINE_E_XCLAIMPROVIDER_DELEGATIONTOKEN_INVALID              = 0x801A0501; // Invalid Delegation Token
        public const uint XONLINE_E_XCLAIMPROVIDER_DELEGATIONTOKEN_VERSION_INVALID      = 0x801A0502; // Invalid Delegation Token version
        public const uint XONLINE_E_XCLAIMPROVIDER_XUIDCLAIM_INVALID                    = 0x801A0503; // Invalid Xuid claim
        public const uint XONLINE_E_XCLAIMPROVIDER_PUIDCLAIM_INVALID                    = 0x801A0504; // Invalid Puid claim
        public const uint XONLINE_E_XCLAIMPROVIDER_GETUSER_FAILURE                      = 0x801A0505; // Error calling Uodb (p_xuser_user_get)

        /// <summary>
        /// Zune DB Catalog Watcher Events                                           = 0x801A1xxx
        /// </summary>
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_INVALID_ID                           = 0x801A1000; // The ID does not exist in the database
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_ERROR                       = 0x801A1001; // Generic producer error
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PUBLISHER_ERROR                      = 0x801A1002; // Generic publisher error
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_WATCHER_ERROR                        = 0x801A1003; // Generic Watcher error
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_ERROR    = 0x801A1004; // ESP operation error
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_ESPPUBLISHER_FAST_OPERATION_WARNING  = 0x801A1005; // ESP operation warning
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_INVALID_DESTINATION_NAME             = 0x801A1006; // The destination name is invalid
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_INVALID_RESOURCE_NAME                = 0x801A1007; // The resource name is invalid
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_INVALID_QUEUE_OPERATION     = 0x801A1008; // The producer did not add anything to the queue
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PUBLISHER_UPDATE_LSN_FAILED          = 0x801A1009; // The publisher could not update the LSN
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PUBLISHER_INVALID_QUEUE_OPERATION    = 0x801A100A; // The publisher did not dequeue
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_ESPPUBLISHER_INCORRECT_LSN_ORDER     = 0x801A100B; // LSN's were not in monotonically increasing order
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_MEDIA_EXTRACTOR_MISSING_DOCUMENT     = 0x801A100C; // Missing Document
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_NULL_DOCUMENT_IN_QUEUE               = 0x801A100D; // Null document in queue
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_ZERO_QUEUE_SIZE                      = 0x801A100E; // Queue is being initialized with size 0
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_GENERATE_DOCUMENTS_INVALID_COUNT     = 0x801A100F; // Count of <= 0 passed to GenerateDocuments
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_NOT_INITIALIZED_CORRECTLY   = 0x801A1010; // Producer not initialized correctly
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PUBLISHER_NEGATIVE_BUCKET            = 0x801A1011; // Bucket identifier is negative
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PUBLISHER_NULL_DOCUMENT              = 0x801A1012; // Document is null
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_NULL_LSN                             = 0x801A1013; // LSN is null
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_INVALID_INPUT_PARAMETER              = 0x801A1014; // Invalid input parameter
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_MISSING_PARAMETER                    = 0x801A1015; // Missing input parameter
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_COMMAND_FAILURE                      = 0x801A1016; // Generic Command Failure
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_INVALID_STATE               = 0x801A1017; // Producer method has been invoked either without initializing or after an exception was thrown.
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_NO_PDLC_CONFIG              = 0x801A1018; // pdlc_mediatypes setting is absent in t_multisettings in npdb
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_NO_RATEABLE_CONFIG          = 0x801A1019; // ratings_mediatypes setting is absent in t_multisettings in npdb
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_NOT_AN_INTEGER_SETTING      = 0x801A101A; // The setting is not an integer
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_PRODUCER_OPERATION_ERROR             = 0x801A101B; // producer operation error
        public const uint XONLINE_E_ZUNEDB_CATALOGWATCHER_DOCUMENT_TOO_LARGE                   = 0x801A101D; // Document has been generated that is larger then FAST ESP can store

        // implementation to make this behave like a value type

        private uint _value;


        private HResult(uint value)
        {
            _value = value;
        }


        public override int GetHashCode()
        {
            return _value.GetHashCode();
        }


        public override string ToString()
        {
            // the one way to display an HResult
            return "0x" + _value.ToString("X08");
        }


        public bool HasName
        {
            get { return _nameMap.ContainsKey(_value); }
        }

        public string Name
        {
            get
            {
                string s = null;
                if (!_nameMap.TryGetValue(_value, out s))
                {
                    s = ToString();
                }
                return s;
            }
        }

        public static implicit operator HResult(uint value)
        {
            return  new HResult(value);
        }

        public static implicit operator uint(HResult hResult)
        {
            // convert a HResult to uint
            return hResult._value;
        }

        #region IEquatable<HResult> Members


        public bool Equals(HResult other)
        {
            return _value == other._value;
        }

        #endregion

        public static HResult Parse(string s)
        {
            if (s.StartsWith("0x", true, CultureInfo.CurrentCulture)) s = s.Substring(2);
            return new HResult(Convert.ToUInt32(s, 16));
        }


        public static bool TryParse(string s, out HResult hr)
        {
            try
            {
                hr = HResult.Parse(s);
                return true;
            }
            catch
            {
                hr = new HResult(0);
                return false;
            }
        }

        #region IXmlSerializable Members

        public void ReadXml(XmlReader reader)
        {
            _value = (uint) XmlConvert.ToUInt32(reader.ReadElementContentAsString());
        }

        public void WriteXml(XmlWriter writer)
        {
            writer.WriteValue(_value.ToString());
        }

        public XmlSchema GetSchema()
        {
            return (null);
        }

        #endregion

        public static XmlQualifiedName HResultSchema(XmlSchemaSet xs)
        {
            return new XmlQualifiedName("unsignedInt", XmlSchema.Namespace);
        }

        public bool IsFailure()
        {
            return (_value >> 31 == 1);
        }

        public bool IsSuccess()
        {
            return (_value >> 31 == 0);
        }

        public bool IsOk()
        {
            return (_value == HResult.S_OK);
        }

        public static bool Failed(HResult hr)
        {
            return hr.IsFailure();
        }

        public static bool Succeeded(HResult hr)
        {
            return hr.IsSuccess();
        }

        static Dictionary<uint, string> _nameMap;

        static object lockObject = new object();
        static internal void AddConstsAsHResults(Type t, Func<object, uint> selector)
        {
            lock (lockObject)
            {
                var newDict = new Dictionary<uint, string>(_nameMap);

                var enums = from f in t.GetFields(BindingFlags.Static | BindingFlags.DeclaredOnly | BindingFlags.Public)
                            where f.IsLiteral
                            let key = selector(f.GetValue(null))
                            where !newDict.ContainsKey(key)
                            select new KeyValuePair<uint, string>(key, f.Name);

                foreach (var e in enums)
                {
                    newDict[e.Key] = e.Value;
                }

                _nameMap = newDict;
            }
        }

        static HResult()
        {
            _nameMap = new Dictionary<uint, string>();

            try
            {
                AddConstsAsHResults(typeof(HResult), o => (uint)o);
            }
            catch (Exception)
            {
                // Nothing really to do, dictionary will just be empty
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\service\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__service_3_none_12.4.56.0_none_7ce7139d33355c0c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_service_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.manifest
XP_MANIFEST_PATH=manifests\x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.cat
XP_CATALOG_PATH=manifests\x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.cat
XP_PAYLOAD_PATH=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_service_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\service\XRLRequest.cs ===
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.diagnostics;

#if MOCK_NET
using xonline.test.mock.system.net;
#else 
using System.Net;
#endif

#if MOCK_WEB
using xonline.test.mock.system.web;
#else
using System.Web;
#endif


namespace xonline.common.service
{
    [ComVisible(false)]
    public class XrlRequest
    {
        
        // Interface to send request to
        public string TargetInterface
        {
            get { return _targetInterface; }
            set 
            { 
                _targetInterface = value;
                _targetVirtualInterface = VirtualInterface.None; 
                _targetInterfaceInfo = null;
            }
        }
        
        // Virutal interface to send request to
        public string TargetVirtualInterface
        {
            get { return _targetVirtualInterface; }
            set 
            { 
                _targetVirtualInterface = value;
                _targetInterface = Interface.None; 
                _targetInterfaceInfo = null;
            }
        }

        public IInterfaceInfo TargetInterfaceInfo
        {
            get { return _targetInterfaceInfo; }
            set 
            { 
                _targetInterfaceInfo = value;
                _targetInterface = Interface.None; 
                _targetVirtualInterface = VirtualInterface.None; 
            }
        }

        public Uri TargetUrl
        {
            get { return _targetUrl; }
            set
            {
                _targetUrl = value;
                
                _targetVirtualInterface = VirtualInterface.None; 
                _targetInterface = Interface.None; 
                _targetInterfaceInfo = null;
            }
        }    
        
        
        // Path of request
        public string Path = null;
        
        
        public Uri Url
        {
            get 
            {
                UriBuilder uribldr = new UriBuilder();
                
                if (_targetVirtualInterface != VirtualInterface.None)
                {
                    uribldr = new UriBuilder();
                    IVirtualInterfaceInfo interfaceInfo = Config.GetVirtualInterface(_targetVirtualInterface, Site.main);
                    uribldr.Host = interfaceInfo.IPAddressString;
                    uribldr.Port = interfaceInfo.Port;
                    uribldr.Scheme = interfaceInfo.Protocol;
                }
                else if (_targetInterface != Interface.None)
                {
                    uribldr = new UriBuilder();
                    IInterfaceInfo interfaceInfo = Config.GetSingleInterface(_targetInterface);
                    uribldr.Host = interfaceInfo.IPAddressString;
                    uribldr.Port = interfaceInfo.Port;
                    uribldr.Scheme = interfaceInfo.Protocol;
                }
                else if (_targetInterfaceInfo != null)
                {
                    uribldr = new UriBuilder();
                    uribldr.Host = _targetInterfaceInfo.IPAddressString;
                    uribldr.Port = _targetInterfaceInfo.Port;
                    uribldr.Scheme = _targetInterfaceInfo.Protocol;
                }
                else
                {
                    Assert.IsTrue(_targetUrl != null, "TargetVirtualInterface, TargetInterface, or TargetInterfaceInfo must be set!");
                    
                    uribldr = new UriBuilder(_targetUrl);
                }
                            
                uribldr.Path = Path;
                
                return uribldr.Uri;
            }    
        }    

        public int ServiceId
        {
            get 
            {
                if (_targetVirtualInterface != VirtualInterface.None)
                {
                    IVirtualInterfaceInfo interfaceInfo = Config.GetVirtualInterface(_targetVirtualInterface, Site.main);
                    return interfaceInfo.ServiceId;
                }
                else if (_targetInterface != Interface.None)
                {
                    IInterfaceInfo interfaceInfo = Config.GetSingleInterface(_targetInterface);
                    return interfaceInfo.ServiceId;
                }
                else if (_targetInterfaceInfo != null)
                {
                    return _targetInterfaceInfo.ServiceId;
                }
                else
                {
                    // the caller may have set TargetUrl, return 0 which is the old behavior
                    return 0;
                }
            }    
        }

        // auth data to include HttpAuthData header of the
        // http request.
        // 
        // defaults to the auth data included in the existing
        // request.  If none exists, the current SG Auth data
        // is used for the header value.   If no SG Auth is 
        // availble, the header is null.   
        //
        public string AuthData = null;

        private bool _IsBundleAuth = false;// this tells whether the AuthData is a Bundle Auth or a plain AuthData

        public bool IsBundleAuth
        {
            get
            {
                return _IsBundleAuth;
            }

            set
            {
                _IsBundleAuth = value;
            }
        }

        // Platform type of the source of this request. optional
        //
        public byte? PlatformType
        {
            get 
            { 
                return _PlatformType; 
            }
            set
            {
                _PlatformType = value;
            }
        }

        private byte? _PlatformType;



        // binary post data to send.
        // 
        // This value can also be set via PostXrlObject.
        //
        public byte[] PostData = null;
        
        //
        // XRLObject2 to send.
        // 
        // Setting this also sets the value of Path.
        //
        public XRLObject2 RequestOb
        {
            get { return _postOb; }
            set 
            { 
                _postOb = value; 
                //Path = (Path != null ? Path : _postOb.GetXRL());
                SchemaVersion = _postOb.SchemaVersion;
            }    
        }

        // Default if RequestOb isn't used
        public uint SchemaVersion = WireData.CurrentSchemaVersion;

        // Override setting for the default "xon/xx" value.  If the default is specified, it
        // will be computed from the other parameters, so the value will be set to null.
        private string _contentType = null;
        public string ContentTypeOverride
        {
            get { return _contentType; }
            set { _contentType = (value == null || value.StartsWith("xon/")) ? null : value; }
        }
        
        // Other headers to include in the request.
        //
        public WebHeaderCollection RequestHeaders = new WebHeaderCollection();
        
        
        // Raw bytes received from posting the request
        //
        public byte[] ResponseData = null;

        // XRLObject2 to translate the response to. 
        // 
        // Set this before calling one of the Send*() 
        // methods to have the response automatically
        // converted to this type.
        //
        public XRLObject2 ResponseOb = null;

        public WebHeaderCollection ResponseHeaders = null;


        
        // HResult received from sending the request
        // 
        public HResult Hr = HResult.S_FALSE;
        
        
        // Exception thrown during async posting of the request
        // 
        public Exception AsyncException = null;
        
        // WaitHandle for async requests.  Handle is set when 
        // request is complete.  Valid only after calling
        // SendAsync()
        // 
        public ManualResetEvent AsyncWaitHandle = null;
        
        // True when an asynchrnous send request is completed.
        //
        public bool IsCompleted = false;
    

                
                
        //-----------------------------------------------------
        // Send
        //      
        //      Sends an http POST request to another server
        //      with xrl-compliant header information.
        //
        //      The HRESULT returned in the server response is
        //      returned. 
        //
        //      If the status code is 500, but no X-Err header is
        //      present in the response, an exception is thrown. 
        //      If the status code is anything else but 200, an
        //      exception is thrown. 
        //
        public HResult Send()
        {
            HResult hr;
            string xErr;
            string contentTypeOverride = _contentType;
            
            if (AuthData == null)
            {
                AuthData = SGInfo.ToBase64String();
            }

            if (_postOb != null)
            {
                PostData = (byte[])_postOb;
                
                // Override based on the xrl, since if specified will know the proper value
                contentTypeOverride = _postOb.ContentType;
            }    
            
            if (PostData == null)
            {
                PostData = new byte[0];
            }
            
            WebClient myWebClient = new WebClient();

            if (IsBundleAuth)
            {
                myWebClient.Headers.Add(XHttpHdr.BUNDLEDAUTHDATA, AuthData);
            }
            else
            {
                myWebClient.Headers.Add(XHttpHdr.HTTPAUTHDATA, AuthData);                
            }
            
            //
            // XRLScan looks at these two headers
            //
            string serviceId = ServiceId.ToString("x");
            
            if (_PlatformType != null)
            {
                myWebClient.Headers.Add(XHttpHdr.XPLT, _PlatformType.ToString());
            }
            myWebClient.Headers.Add("Content-Type", contentTypeOverride ?? "xon/"+serviceId);
            myWebClient.Headers.Add("User-Agent", (serviceId+"/1.0.4325"));
            myWebClient.Headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(SchemaVersion));                
            
            myWebClient.Headers.Add(RequestHeaders);
            
            try
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "POSTing " + PostData.Length + " bytes to " + this.Url + "...");
                
                ResponseData = myWebClient.UploadData(Url.ToString(), "POST", PostData);
                ResponseHeaders = myWebClient.ResponseHeaders;

                // if we have a response that contains an error and/or  an
                // event header, then get that info to make some decisions

                hr = HResult.S_OK;
                xErr = ResponseHeaders["X-Err"];
                string xEvent = ResponseHeaders["X-Event"];

                if (! string.IsNullOrEmpty(xErr))
                {
                    hr = HResult.Parse(xErr);
                }

                // if we have HttpContext and we get back  an  X-Event
                // header,  then propagate the value  between  servers

                if (HttpContext.Current != null)
                {
                    HttpContext context = HttpContext.Current;
                    if (! string.IsNullOrEmpty(xEvent)) context.Items["X-Event"] = xEvent;
                }
                
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, Url.ToString() + " returned hr = " + hr);
            }
            catch (WebException e)
            {
                xErr = null;

                if (e.Response != null && e.Response.Headers != null)
                {
                    xErr = e.Response.Headers["X-Err"];
                    string xEvent = e.Response.Headers["X-Event"];

                    // if we have HttpContext and we get back  an  X-Event
                    // header,  then propagate the value  between  servers

                    if (HttpContext.Current != null)
                    {
                        HttpContext context = HttpContext.Current;
                        if (!string.IsNullOrEmpty(xEvent)) context.Items["XEvent"] = xEvent;
                    }
                }
                
                if (xErr == null)
                {
                    // not a normal failure, so throw
                    // default to BadRequest if no response is available. 
                    HttpStatusCode status = (e.Response == null ? HttpStatusCode.BadRequest : ((HttpWebResponse)e.Response).StatusCode); 
                    
                    throw new XrlRequestException(Url.ToString(), e.Message, (System.Net.HttpStatusCode)status, PostData, e);
                }

                hr = HResult.Parse(xErr);
                ResponseData = null;
                
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, Url.ToString() + " returned hr = " + hr);
            }
            
            if (ResponseData != null && ResponseOb != null)
            {
                ResponseOb.ReadBytes(ResponseData);
            }    
            
            Hr = hr;
            return hr;
        }
        
        //-----------------------------------------------------
        // SendAsync
        //      
        //      Posts the XRL request asynchronously
        //      
        //
        
        public void SendAsync()
        {
            string contentTypeOverride = _contentType;
            
            if (AuthData == null)
            {
                AuthData = SGInfo.ToBase64String();
            }

            if (_postOb != null)
            {
                PostData = (byte[])_postOb;
                contentTypeOverride = _postOb.ContentType;
            }    
            
            
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "Getting request stream to post to " + Url.ToString() + "...");
            
            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(Url);
            req.UnsafeAuthenticatedConnectionSharing = true;
            if (_PlatformType != null)
            {
                req.Headers.Add(XHttpHdr.XPLT, _PlatformType.ToString());
            }
            req.Headers.Add(XHttpHdr.HTTPAUTHDATA, AuthData);
            req.Headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(SchemaVersion));                
            req.Method = "POST";
            req.ContentLength = PostData.Length;
            
            //
            // XRLScan looks at these two headers
            //
            string serviceId = ServiceId.ToString("x");

            req.ContentType = contentTypeOverride ?? "xon/" + serviceId;
            req.UserAgent = serviceId+"/1.0.4325";
            
            req.Headers.Add(RequestHeaders);
            
            _httpRequest = req;
            AsyncWaitHandle = new ManualResetEvent(false);
            IsCompleted = false;

            
            req.BeginGetRequestStream(new AsyncCallback(this.SendAsyncStreamCallback), null);
        }

        private void SendAsyncStreamCallback(IAsyncResult asyncResult)
        {
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "Writing " + PostData.Length + " bytes to " + _httpRequest.RequestUri.ToString() + "...");
            
            Stream s = _httpRequest.EndGetRequestStream(asyncResult);
            s.Write(PostData, 0, PostData.Length);
            s.Close();
            
            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "POSTing  to " + _httpRequest.RequestUri.ToString() + "...");
            _httpRequest.BeginGetResponse(new AsyncCallback(this.SendAsyncCallback), null);
        }
            
            
        
        private void SendAsyncCallback(IAsyncResult asyncResult)
        {
            HttpWebResponse httpResponse = null;
            
            try
            {
                httpResponse = (HttpWebResponse)_httpRequest.EndGetResponse(asyncResult);
                HttpStatusCode status = (httpResponse == null ? HttpStatusCode.BadRequest : httpResponse.StatusCode); 
    
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "Async POST to " + _httpRequest.RequestUri.ToString() + " completed!   Status " + status);
                Hr = HResult.S_OK;
                
                string xErr = httpResponse.Headers["X-Err"];
                if (xErr != null)
                {
                    Hr = HResult.Parse(xErr);
                }
                    
                if (status != HttpStatusCode.OK && Hr.IsOk())
                {
                    // not a normal failure, so throw
                    // default to BadRequest if no response is available. 
                    throw new XrlRequestException(_httpRequest.RequestUri.ToString(), "The asynchronous POST failed!", status,
                                null, null);
                }
                
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, _httpRequest.RequestUri.ToString() + " returned " + Hr + " (" + httpResponse.ContentLength + " bytes)");
                
                
                if (httpResponse.ContentLength > 0)
                {
                    BinaryReader reader = new BinaryReader(httpResponse.GetResponseStream());
                    ResponseData = reader.ReadBytes((int)httpResponse.ContentLength);
                    
                    if (ResponseOb != null)
                    {
                        ResponseOb.ReadBytes(ResponseData);
                    }    
                }        
                
                ResponseHeaders = httpResponse.Headers;
                
            }
            catch(Exception e)
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_ERROR, "PostAsyncXrlRequestCallback encountered an error! " + e.ToString());
                AsyncException = e;
                Hr = HResult.XONLINE_E_RESPONSE_ERROR;
            }
            finally
            {
                if (httpResponse != null) httpResponse.Close();

                IsCompleted = true;    
                AsyncWaitHandle.Set();
            }
                
        }
        
        
        private string _targetInterface = Interface.None; 
        private string _targetVirtualInterface = VirtualInterface.None;
        private IInterfaceInfo _targetInterfaceInfo = null; 
        private Uri _targetUrl;

        private XRLObject2 _postOb = null;
   

        private HttpWebRequest _httpRequest;
        
    }
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\service\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__service_3_none_12.4.56.0_none_7ce7139d33355c0c
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_service_3
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.manifest
XP_MANIFEST_PATH=manifests\x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.cat
XP_CATALOG_PATH=manifests\x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00.cat
XP_PAYLOAD_PATH=x86__service_3_no-public-key_12.4.56.0_x-ww_c366cc00
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_service_3,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\service\xon.cs ===
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Reflection;

namespace xonline.common.service
{
    [ComVisible(false)]
    public class XOn
    {


        public const uint UTF8_MULT = 3;

        // Since most dateimes on the server are FILETIMEs on the
        // client, the miniumus are different and one causes
        // an overflow of the other.   So use this instead.
        // (look familiar?)
        public static DateTime MinDateTime = new DateTime(2002, 11, 15);



        //
        // special title ids
        //

        public const uint WEB_TITLE_ID               = 0xFFED0000;
        public const uint DASH_TITLE_ID              = 0xFFFE0000;
        public const uint XENON_DASH_TITLE_ID        = 0xFFFE07D1;
        public const uint XENON_LIVE_SIGNUP_TITLE_ID = 0xFFFE07DE;
        public const uint FUSION_TITLE_ID            = 0xFFFE07D2;
        public const uint XENON_LAUNCHER_TITLE_ID    = 0xFFFE07FF;
        public const uint TITLE_FAMILY_MASK          = 0xffff0000;
        public const uint XARCADE_TITLE_FAMILY       = 0x58410000;
        public const uint X_CUSTOM_PICTURE_TITLEID   = 0xFFFE0700;
        public const uint X_AVATAR_PICTURE_TITLEID   = 0xFFFE0854;
        public const uint PC_DASH_TITLE_ID           = 0x585207d1;
        public const uint MOBILE_TITLE_ID            = 0x4D5308EC;

        // this is the title id used by crux for music subscriptions, wcmusic security checks,
        // and crux video offers modeled in t_offers
        public const uint CRUX_TITLE_ID              = 0xFFFE0777;
        public const uint ZUNE_TITLE_ID              = 0xFFFD0000;

        //
        // general globals
        //
        public const uint MAX_TITLE_NAME_LEN                       = 255;
        public const uint XONLINE_MAX_LOGON_USERS                  = 4;
        public const uint XONLINE_MAX_ALTERNATE_TITLE_ID           = 4;
        public const uint XONLINE_MAX_DWORD_SERVICEIDS             = 4;
        public const uint XONLINE_GAMERTAG_SIZE                    = 16;
        public const uint MAX_TEAM_NAME_SIZE                       = 16;
        public const uint XONLINE_MAX_CONSOLE_SERIAL_NUMBER_LENGTH = 12;

        //
        // offer types
        //
        public const uint XONLINE_OFFERING_SUBSCRIPTION = 1;
        public const uint XONLINE_OFFERING_CONTENT      = 2;
        public const uint XONLINE_OFFERING_RENEWAL      = 4;

        //
        //  Ticket flags
        //

        public const uint XONLINE_USER_VOICE_NOT_ALLOWED    = 0x00010000;
        public const uint XONLINE_USER_PURCHASE_NOT_ALLOWED = 0x00020000;
        public const uint XONLINE_USER_NICKNAME_NOT_ALLOWED = 0x00040000;

        //
        // Parental control groups
        //
        public const int PARENTAL_CONTROL_GROUP_OPEN       = 0;
        public const int PARENTAL_CONTROL_GROUP_MEDIUM     = 1;
        public const int PARENTAL_CONTROL_GROUP_RESTRICTED = 2;


        // privilege bits
        ///////////////////////////////////////////////////////////////////////

        public const int XONLINE_MAX_PRIVILEGE_ID              = 256;
        public const int XONLINE_NUM_PRIVILEGE_DWORDS          = 8;
        public const int XONLINE_NUM_BASE_SERVICES_DWORDS      = 4;
        public const int XONLINE_NUM_MACHINE_PRIVILEGES_DWORDS = 1;
        public const int XONLINE_NUM_COMMON_PRIVILEGES_DWORDS  = 5; // Sum of machine privileges + base privileges
        public const int XONLINE_NUM_USER_PRIVILEGES_DWORDS    = 3;

        // machine privileges
        ///////////////////////////////////////////////////////////////////////

        public const int MPRIVILEGE_MIN                   = 128;
        public const int MPRIVILEGE_XONWATCH              = 128;
        public const int MPRIVILEGE_EDITORIAL             = 129;
        public const int MPRIVILEGE_NULL_ENCRYPTION       = 130;
        public const int MPRIVILEGE_CHALLENGE_BYPASS      = 131;
        public const int MPRIVILEGE_GEOFENCE_EXEMPT       = 132;
        public const int MPRIVILEGE_NETWORK_AUTH_LIST     = 133;
        public const int MPRIVILEGE_MAX                   = 160;

        // user privilege bits
        ///////////////////////////////////////////////////////////////////////

        public const int XPRIVILEGE_MAX = 255;
        public const int XPRIVILEGE_MIN = 209;

        // Add Friends
        public const byte XPRIVILEGE_ADD_FRIEND                                 = 255;

        // Sessions
        public const byte XPRIVILEGE_MULTIPLAYER_SESSIONS                       = 254;
        public const byte XPRIVILEGE_MULTIPLAYER_ENABLED_BY_TIER                = 253;

        // Communications
        public const byte XPRIVILEGE_COMMUNICATIONS                             = 252;
        public const byte XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY                = 251;

        // sending video messages is restricted by tier and needs a second bit
        public const byte XPRIVILEGE_VIDEO_MESSAGING_SEND                       = 250;

        // Profile
        public const byte XPRIVILEGE_PROFILE_VIEWING                            = 249;
        public const byte XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY               = 248;

        // Viewing of User Created Content
        public const byte XPRIVILEGE_USER_CREATED_CONTENT                       = 247;
        public const byte XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY          = 246;

        // Premium Content Purchases
        public const byte XPRIVILEGE_PURCHASE_CONTENT                           = 245;

        // Presence
        public const byte XPRIVILEGE_PRESENCE                                   = 244;
        public const byte XPRIVILEGE_PRESENCE_FRIENDS_ONLY                      = 243;

        // Xbox1 Live Access
        public const byte XPRIVILEGE_XBOX1_LIVE_ACCESS                          = 242;

        // Cross platform gameplay (PCs <-> Consoles)
        public const byte XPRIVILEGE_CROSS_PLATFORM_MULTIPLAYER                 = 241;

        // Cross platform system communication (PCs <-> Consoles)
        public const byte XPRIVILEGE_CROSS_PLATFORM_SYSTEM_COMMUNICATION        = 240;

        // Only users on consoles flagged for selective updates will have this
        public const byte XPRIVILEGE_PREVIOUS_LIVE_PROTOCOLS                    = 239;

        // Player-to-player trading
        public const byte XPRIVILEGE_TRADE_CONTENT                              = 238;

        // Argo explicit content
        public const byte XPRIVILEGE_MUSIC_EXPLICIT_CONTENT                     = 237;

        // Ability to test beta Live features
        public const byte XPRIVILEGE_TESTER_ACCESS                              = 236; // on (allow) | off (disallow)

        // Video Communications
        public const byte XPRIVILEGE_VIDEO_COMMUNICATIONS                       = 235;
        public const byte XPRIVILEGE_VIDEO_COMMUNICATIONS_FRIENDS_ONLY          = 234;

        // Discoverability - let XBL-Friends send me a WL-Buddy request
        public const byte XPRIVILEGE_SHARE_WLID_WITH_FRIENDS                    = 233; // on (allow) | off (disallow)

        // Discoverability - let WL-Buddies send me an XBL-Friend request
        public const byte XPRIVILEGE_SHARE_GAMERTAG_WITH_BUDDIES                = 232; // on (allow) | off (disallow)

        public const byte XPRIVILEGE_METRO_ACCESS                               = 231; // on (allow) | off (disallow)

        public const byte XPRIVILEGE_SHARE_FRIENDS_LIST                         = 230; // on (allow) | off (disallow)
        public const byte XPRIVILEGE_SHARE_FRIENDS_LIST_FRIENDS_ONLY            = 229; // on (allow) | off (disallow)

        // Allow passport switching
        public const byte XPRIVILEGE_PASSPORT_SWITCHING                         = 228; // on (allow) | off (disallow)

        // Allow user to manage their payment instruments
        public const byte XPRIVILEGE_BILLING_SWITCHING                          = 227; // on (allow) | off (disallow)

        // Use of dedicated servers for multiplayer games (mainly PCs)
        public const byte XPRIVILEGE_MULTIPLAYER_DEDICATED_SERVER               = 226; // on (allow) | off (disallow)

        // user has a child account and is eligible to graduate
        public const byte XPRIVILEGE_USER_GRADUATION                            = 225; // on (allow) | off (disallow)

        // access to Netflix app
        public const byte XPRIVILEGE_PREMIUM_VIDEO                              = 224; // on (allow) | off (disallow)

        // access to Xbox Live Primetime (Server-Backed Games)
        public const byte XPRIVILEGE_PRIMETIME                                  = 223; // on (allow) | off (disallow)

        // user can publish content to their console
        public const byte XPRIVILEGE_CONTENT_AUTHOR                             = 222; // on (allow) | off (disallow)

        // user can query user PII
        public const byte XPRIVILEGE_PII_ACCESS                                 = 221; // on (allow) | off (disallow)

        // user can change their social network discoverability
        public const byte XPRIVILEGE_SOCIAL_NETWORK_SHARING                     = 220; // on (allow) | off (disallow)

        // user has subscription title privilege
        public const byte XPRIVILEGE_SUBSCRIPTION_TITLE                         = 219; // true | false

        // user has subscription content privilege   
        public const byte XPRIVILEGE_SUBSCRIPTION_CONTENT                       = 218; // true | false

        // purchase privilege can be onbtained with pin
        public const byte XPRIVILEGE_PURCHASE_CONTENT_REQUIRES_PIN              = 217; // true | false

        // passport switching can be obtained with pin
        public const byte XPRIVILEGE_PASSPORT_SWITCHING_REQUIRES_PIN            = 216; // true | false

        // billing switching can be obtain with pin
        public const byte XPRIVILEGE_BILLING_SWITCHING_REQUIRES_PIN             = 215; // true | false

        // user is entitled to premium content
        public const byte XPRIVILEGE_PREMIUM_CONTENT                            = 214; // true | false

        // user is entitled to family subscription functionality (family center)
        public const byte XPRIVILEGE_FAMILY                                     = 213; // true | false

        // unsafe or family programming for the user.
        public const byte XPRIVILEGE_UNSAFE_PROGRAMMING                         = 212; // on (regular programming) | off (family programming)

        // user is allowed to upload content to external providers
        public const byte XPRIVILEGE_SHARE_CONTENT                              = 211; // on (allow) | off (disallow)

        // used by customer support personnel to override default behaviour
        public const byte XPRIVILEGE_SUPPORT_OVERRIDE                           = 210; // on (allow) | off (disallow)

        // user is allowed to save games in cloud storage
        public const byte XPRIVILEGE_CLOUD_SAVED_GAMES                          = 209; // on (allow) | off (disallow)

        //
        //  User status flags
        //

        public const uint XONLINE_USER_STATUS_ACTIVE            = ((ushort)0x0001);
        public const uint XONLINE_USER_STATUS_LOCKED_OUT        = ((ushort)0x0002);
        public const uint XONLINE_USER_STATUS_MUST_CHANGE_NAME  = ((ushort)0x0004);

        //
        // User Machine Trust Level
        // 
        public const int  XONLINE_USER_MACHINE_TRUST_LEVEL_UNKNOWN_MACHINE = -2;
        public const int  XONLINE_USER_MACHINE_TRUST_LEVEL_NOT_TRUSTED     = 0;
        public const int  XONLINE_USER_MACHINE_TRUST_LEVEL_TRUSTED         = 1;

        //
        // Presence
        //

        public const uint XONLINE_MAX_FRIEND_COUNT        = 100;


        //
        // Supported Dash languages
        //

        public const uint XONLINE_LANGUAGE_MIN = 1;
        public const uint XONLINE_LANGUAGE_MAX = 12;

        //
        // XONLINEP_USER fields
        //

        public const uint XONLINE_NAME_SIZE               = 16;
        public const uint XONLINE_NAME_MAX_SIZE           = 15;
        public const uint XONLINE_KINGDOM_SIZE            = 12;
        public const uint XONLINE_KINGDOM_MAX_SIZE        = 11;
        public const uint XONLINE_PIN_LENGTH              = 4;
        public const uint XONLINE_MAX_STORED_ONLINE_USERS = 8;
        public const uint XONLINE_USER_SIGNATURE_LENGTH   = 8;
        public const uint XONLINE_USERDOMAIN_SIZE         = 20;
        public const uint XONLINE_REALM_NAME_SIZE         = 24;
        public const uint XONLINE_KEY_LENGTH              = 16;

        public const uint XONLINE_NICKNAME_MAX_SIZE       = 63;

        public const string XONLINE_REALM_NAME            = "PASSPORT.NET";


        //
        // USER_ACCOUNT_INFO fields
        //
        public const int MAX_FIRSTNAME_SIZE              = 64;
        public const int MAX_LASTNAME_SIZE               = 64;
        public const int MAX_EMAIL_SIZE                  = 129;
        public const int MAX_PHONE_PREFIX_SIZE           = 12;
        public const int MAX_PHONE_NUMBER_SIZE           = 12;
        public const int MAX_PHONE_EXTENSION_SIZE        = 12;
        public const int MAX_STREET_SIZE                 = 128;
        public const int MAX_CITY_SIZE                   = 64;
        public const int MAX_DISTRICT_SIZE               = 64;
        public const int MAX_STATE_SIZE                  = 64;
        public const int MAX_COUNTRYCODE_SIZE            = 2;
        public const int MAX_POSTALCODE_SIZE             = 16;
        public const int MAX_CC_NAME_SIZE                = 64;
        public const int MAX_CC_TYPE_SIZE                = 32;
        public const int MAX_CC_NUMBER_SIZE              = 24;
        public const int MAX_CC_EXPIRATION_SIZE          = 6;
        public const int MAX_BANK_CODE_SIZE              = 64;
        public const int MAX_BRANCH_CODE_SIZE            = 64;
        public const int MAX_CHECK_DIGITS_SIZE           = 64;

        public const int PRIVILEGE_DWORD_LENGTH          = 8;
        public const int ACCOUNT_PIN_LENGTH              = 4;
        public const int ACTIVATION_CODE_LENGTH          = 25;

        //
        // Number of XC_LANGUAGE_ defines in xbox.h (eg XC_LANGUAGE_ENGLISH).
        // Also the number of v1LanguageId members.
        //
        public const uint MAX_DASH_LANG_ID = 12;

        //
        // Passport
        //
        public const int XONLINE_PASSPORT_MEMBER_NAME_MAX_LEN           = 113;
        public const int XONLINE_PASSPORT_PASSWORD_MAX_LEN              = 32;
        public const int XONLINE_PASSPORT_SECRET_QUESTION_MIN_LEN       = 5;
        public const int XONLINE_PASSPORT_SECRET_QUESTION_MAX_LEN       = 64;
        public const int XONLINE_PASSPORT_SECRET_ANSWER_MIN_LEN         = 5;
        public const int XONLINE_PASSPORT_SECRET_ANSWER_MAX_LEN         = 64;
        public const int XONLINE_PASSPORT_LOGIN_TOKEN_REQUEST_MAX_LEN   = 2000;
        public const int XONLINE_PASSPORT_PUBLIC_KEY_MODULUS_MAX_LEN    = 128;
        public const int XONLINE_PASSPORT_SESSION_TOKEN_LEN             = 28;
        public const int XONLINE_PASSPORT_ENCRYPTED_PASSWORD_MAX_LEN    = 384;
        public const int XONLINE_PASSPORT_ENCRYPTED_SESSION_KEY_MAX_LEN = 128;
        public const int XONLINE_PASSPORT_PUBLIC_KEY_DIGEST_LEN         = 20;
        public const int XONLINE_PASSPORT_SECRET_QUESTION_MAX_COUNT     = 10;
        public const int XONLINE_PASSPORT_LOGIN_NONCE_MIN_LEN           = 32;
        public const int XONLINE_PASSPORT_LOGIN_NONCE_MAX_LEN           = 32;
        public const int XONLINE_PASSPORT_LOGIN_CIPHER_VALUE_MAX_LEN    = 8192;
        public const int XONLINE_PASSPORT_LOGIN_SERVICE_ID_MIN          = 0;
        public const int XONLINE_PASSPORT_LOGIN_LEGACY_SERVICE_ID       = 0;
        public const int XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID     = 1;
        public const int XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID    = 2;
        public const int XONLINE_PASSPORT_LOGIN_SERVICE_ID_MAX          = 2;
        public const ulong XONLINE_PASSPORT_INVALID_ID                  = 0xFFFFFFFFFFFFFFFF;

        //
        // Content
        //
        public const uint XONLINE_CONTENT_ID_LEN              = 20;
        public const uint XONLINE_CONTENT_SYMMETRIC_KEY_LEN   = 16;
        public const uint XONLINE_CONTENT_PUBLIC_KEY_LEN      = 284;
        public const uint XONLINE_CONTENT_XRL_MAX_LEN         = 256;
        public const uint XONLINE_CONTENT_LOCATIONS_MAX_COUNT = 10;
        public const uint XONLINE_CONTENT_LICENSE_MAX_LEN     = 2048;

        //
        // Diet Orange
        //
        public const uint REVOCATION_LIST_CLIENT_NONCE_SIZE   = 16;
        public const uint REVOCATION_LIST_SIGNATURE_SIZE      = 256;
        public const uint REVOCATION_LIST_SERVER_NONCE_SIZE   = 16;
        public const uint REVOCATION_LIST_MAX_ENTRIES         = 400;
        public const uint REVOCATION_LIST_ENTRY_DIGEST_SIZE   = 20;

        //
        // Title activation (China)
        //
        public const uint TITLE_ACTIVATION_LIST_SIGNATURE_SIZE = 256;
        public const uint TITLE_ACTIVATION_LIST_MAX_LEN        = 200; // arbitrary

        //
        // Storage
        //
        public const int  MAX_STORAGE_PATHNAME_LENGTH        = 255;
        public const int  MAX_STORAGE_PATHNAME_DOMAIN_LENGTH = 63;

        //
        // Query
        //
        public const int XONLINE_QUERY_MAX_STRING_ATTRIBUTE_LEN = 400;
        public const int XONLINE_QUERY_MAX_BLOB_ATTRIBUTE_LEN   = 800;
        public const int XONLINE_QUERY_MAX_PAGE                 = 255;
        public const int XONLINE_QUERY_MAX_PAGE_SIZE            = 1024;
        public const int XONLINE_QUERY_MAX_SPECS                = 255;
        public const int XONLINE_QUERY_MAX_ATTRIBUTES           = 255;


        public const int X_ATTRIBUTE_DATATYPE_MASK              = 0x00F00000;
        public const int X_ATTRIBUTE_DATATYPE_INTEGER           = 0x00000000;
        public const int X_ATTRIBUTE_DATATYPE_STRING            = 0x00100000;
        public const int X_ATTRIBUTE_DATATYPE_BLOB              = 0x00200000;
        public const int X_ATTRIBUTE_DATATYPE_NULL              = 0x00F00000;

        public const int X_ATTRIBUTE_DATAFLAG_MASK              = 0x07000000;
        public const int X_ATTRIBUTE_DATAFLAG_MAPPED            = 0x01000000;
        public const int X_ATTRIBUTE_DATAFLAG_PARAM             = 0x02000000;
        public const int X_ATTRIBUTE_DATAFLAG_CONSTANT          = 0x04000000;

        public const uint XONLINE_TITLELOG_ATTR_DATE            = 0x8000000a;
        public const uint XONLINE_TITLELOG_ATTR_SERVICE         = 0x8000000b;
        public const uint XONLINE_TITLELOG_ATTR_SEVERITY        = 0x8000000c;
        public const uint XONLINE_TITLELOG_ATTR_MESSAGE         = 0x8010000d;
        public const uint XONLINE_TITLELOG_DATASET_ID           = 0xffff;

        //
        // Cron
        //
        public const int XONLINE_CRON_MIN_INTERVAL_SECS         = 60;

        //
        // event IDs - MUST MATCH VALUES IN xeventids.h
        //
        public const uint XeventStatusInfo                    = 0x40000001;
        public const uint XeventCodeError                     = 0xC0000002;
        public const uint XeventConfigError                   = 0xC0000003;
        public const uint XeventConfigWarning                 = 0x80000004;
        public const uint XeventCommFailedError               = 0xC0000005;
        public const uint XeventCommUnexpectedError           = 0xC0000006;
        public const uint XeventHackWarning                   = 0x80000007;
        public const uint XeventGameError                     = 0xC0000008;
        public const uint XeventPartnerError                  = 0xC0000009;


        //
        // protocol version number - MUST MATCH VALUES IN xonline.x !!!
        //
        public const uint XONLINE_MATCHMAKING_SERVICE_VER         = 0x00010000;
        public const uint XONLINE_STATISTICS_SERVICE_VER          = 0x00010000;
        public const uint XONLINE_FEEDBACK_SERVICE_VER            = 0x00010000;
        public const uint XONLINE_BILLING_OFFERING_SERVICE_VER    = 0x00010000;
        public const uint XONLINE_PRESENCE_SERVICE_VER            = 0x00010000;
        public const uint XONLINE_MESSAGE_SERVICE_VER             = 0x00010000;
        public const uint XONLINE_AUTO_UPDATE_SERVICE_VER         = 0x00010000;
        public const uint XONLINE_BASE_SUBSCRIPTION_SERVICE_VER   = 0x00010000;
        public const uint XONLINE_USER_ACCOUNT_SERVICE_VER        = 0x00010000;

        public static uint ParseMajorVersion(uint uiversion)
        {
            return (uiversion >> 16);
        }

        public static uint ParseMinorVersion(uint uiversion)
        {
            return (uiversion & 0x0000ffff);
        }

        //
        // message types - required or recommended
        //
        public const uint XONLINE_MSGTYPE_RECOMMENDED       = 0;
        public const uint XONLINE_MSGTYPE_REQUIRED          = 1;

        //
        // message ids - these correspond to messages that can be put into a users message queue
        //
        public const uint XONLINE_MSGID_VOICEBAN_1_DAY      = 1;
        public const uint XONLINE_MSGID_VOICEBAN_1_WEEK     = 2;
        public const uint XONLINE_MSGID_VOICEBAN_2_WEEKS    = 3;
        public const uint XONLINE_MSGID_VOICEBAN_PERMANENT  = 4;
        public const uint XONLINE_MSGID_GAMECLIP_REMOVED    = 5;
        public const uint XONLINE_MSGID_RENEWAL             = 6;

        // key in httpcontext used to track error performance counters
        public const string ERROR_PERF_COUNTERS = "ErrorPerformanceCounters";
        public const string SOAP_ERROR_PERF_COUNTERS = "SoapErrorPerfCtrs";

        // From xbox.x, used by the String server and Messaging widget
        public const ushort XC_LANGUAGE_UNKNOWN             = 0;
        public const ushort XC_LANGUAGE_ENGLISH             = 1;
        public const ushort XC_LANGUAGE_JAPANESE            = 2;
        public const ushort XC_LANGUAGE_GERMAN              = 3;
        public const ushort XC_LANGUAGE_FRENCH              = 4;
        public const ushort XC_LANGUAGE_SPANISH             = 5;
        public const ushort XC_LANGUAGE_ITALIAN             = 6;
        public const ushort XC_LANGUAGE_KOREAN              = 7;
        public const ushort XC_LANGUAGE_TCHINESE            = 8;
        public const ushort XC_LANGUAGE_PORTUGUESE          = 9;
        public const ushort XC_LANGUAGE_SCHINESE            = 10;
        public const ushort XC_LANGUAGE_POLISH              = 11;
        public const ushort XC_LANGUAGE_RUSSIAN             = 12;

        //
        // Country Codes
        //
        public const uint XONLINE_COUNTRY_UNITED_ARAB_EMIRATES = 1;
        public const uint XONLINE_COUNTRY_ALBANIA              = 2;
        public const uint XONLINE_COUNTRY_ARMENIA              = 3;
        public const uint XONLINE_COUNTRY_ARGENTINA            = 4;
        public const uint XONLINE_COUNTRY_AUSTRIA              = 5;
        public const uint XONLINE_COUNTRY_AUSTRALIA            = 6;
        public const uint XONLINE_COUNTRY_AZERBAIJAN           = 7;
        public const uint XONLINE_COUNTRY_BELGIUM              = 8;
        public const uint XONLINE_COUNTRY_BULGARIA             = 9;
        public const uint XONLINE_COUNTRY_BAHRAIN              = 10;
        public const uint XONLINE_COUNTRY_BRUNEI_DARUSSALAM    = 11;
        public const uint XONLINE_COUNTRY_BOLIVIA              = 12;
        public const uint XONLINE_COUNTRY_BRAZIL               = 13;
        public const uint XONLINE_COUNTRY_BELARUS              = 14;
        public const uint XONLINE_COUNTRY_BELIZE               = 15;
        public const uint XONLINE_COUNTRY_CANADA               = 16;
        public const uint XONLINE_COUNTRY_SWITZERLAND          = 18;
        public const uint XONLINE_COUNTRY_CHILE                = 19;
        public const uint XONLINE_COUNTRY_CHINA                = 20;
        public const uint XONLINE_COUNTRY_COLOMBIA             = 21;
        public const uint XONLINE_COUNTRY_COSTA_RICA           = 22;
        public const uint XONLINE_COUNTRY_CZECH_REPUBLIC       = 23;
        public const uint XONLINE_COUNTRY_GERMANY              = 24;
        public const uint XONLINE_COUNTRY_DENMARK              = 25;
        public const uint XONLINE_COUNTRY_DOMINICAN_REPUBLIC   = 26;
        public const uint XONLINE_COUNTRY_ALGERIA              = 27;
        public const uint XONLINE_COUNTRY_ECUADOR              = 28;
        public const uint XONLINE_COUNTRY_ESTONIA              = 29;
        public const uint XONLINE_COUNTRY_EGYPT                = 30;
        public const uint XONLINE_COUNTRY_SPAIN                = 31;
        public const uint XONLINE_COUNTRY_FINLAND              = 32;
        public const uint XONLINE_COUNTRY_FAROE_ISLANDS        = 33;
        public const uint XONLINE_COUNTRY_FRANCE               = 34;
        public const uint XONLINE_COUNTRY_GREAT_BRITAIN        = 35;
        public const uint XONLINE_COUNTRY_GEORGIA              = 36;
        public const uint XONLINE_COUNTRY_GREECE               = 37;
        public const uint XONLINE_COUNTRY_GUATEMALA            = 38;
        public const uint XONLINE_COUNTRY_HONG_KONG            = 39;
        public const uint XONLINE_COUNTRY_HONDURAS             = 40;
        public const uint XONLINE_COUNTRY_CROATIA              = 41;
        public const uint XONLINE_COUNTRY_HUNGARY              = 42;
        public const uint XONLINE_COUNTRY_INDONESIA            = 43;
        public const uint XONLINE_COUNTRY_IRELAND              = 44;
        public const uint XONLINE_COUNTRY_ISRAEL               = 45;
        public const uint XONLINE_COUNTRY_INDIA                = 46;
        public const uint XONLINE_COUNTRY_IRAQ                 = 47;
        public const uint XONLINE_COUNTRY_IRAN                 = 48;
        public const uint XONLINE_COUNTRY_ICELAND              = 49;
        public const uint XONLINE_COUNTRY_ITALY                = 50;
        public const uint XONLINE_COUNTRY_JAMAICA              = 51;
        public const uint XONLINE_COUNTRY_JORDAN               = 52;
        public const uint XONLINE_COUNTRY_JAPAN                = 53;
        public const uint XONLINE_COUNTRY_KENYA                = 54;
        public const uint XONLINE_COUNTRY_KYRGYZSTAN           = 55;
        public const uint XONLINE_COUNTRY_KOREA                = 56;
        public const uint XONLINE_COUNTRY_KUWAIT               = 57;
        public const uint XONLINE_COUNTRY_KAZAKHSTAN           = 58;
        public const uint XONLINE_COUNTRY_LEBANON              = 59;
        public const uint XONLINE_COUNTRY_LIECHTENSTEIN        = 60;
        public const uint XONLINE_COUNTRY_LITHUANIA            = 61;
        public const uint XONLINE_COUNTRY_LUXEMBOURG           = 62;
        public const uint XONLINE_COUNTRY_LATVIA               = 63;
        public const uint XONLINE_COUNTRY_LIBYA                = 64;
        public const uint XONLINE_COUNTRY_MOROCCO              = 65;
        public const uint XONLINE_COUNTRY_MONACO               = 66;
        public const uint XONLINE_COUNTRY_MACEDONIA            = 67;
        public const uint XONLINE_COUNTRY_MONGOLIA             = 68;
        public const uint XONLINE_COUNTRY_MACAU                = 69;
        public const uint XONLINE_COUNTRY_MALDIVES             = 70;
        public const uint XONLINE_COUNTRY_MEXICO               = 71;
        public const uint XONLINE_COUNTRY_MALAYSIA             = 72;
        public const uint XONLINE_COUNTRY_NICARAGUA            = 73;
        public const uint XONLINE_COUNTRY_NETHERLANDS          = 74;
        public const uint XONLINE_COUNTRY_NORWAY               = 75;
        public const uint XONLINE_COUNTRY_NEW_ZEALAND          = 76;
        public const uint XONLINE_COUNTRY_OMAN                 = 77;
        public const uint XONLINE_COUNTRY_PANAMA               = 78;
        public const uint XONLINE_COUNTRY_PERU                 = 79;
        public const uint XONLINE_COUNTRY_PHILIPPINES          = 80;
        public const uint XONLINE_COUNTRY_PAKISTAN             = 81;
        public const uint XONLINE_COUNTRY_POLAND               = 82;
        public const uint XONLINE_COUNTRY_PUERTO_RICO          = 83;
        public const uint XONLINE_COUNTRY_PORTUGAL             = 84;
        public const uint XONLINE_COUNTRY_PARAGUAY             = 85;
        public const uint XONLINE_COUNTRY_QATAR                = 86;
        public const uint XONLINE_COUNTRY_ROMANIA              = 87;
        public const uint XONLINE_COUNTRY_RUSSIAN_FEDERATION   = 88;
        public const uint XONLINE_COUNTRY_SAUDI_ARABIA         = 89;
        public const uint XONLINE_COUNTRY_SWEDEN               = 90;
        public const uint XONLINE_COUNTRY_SINGAPORE            = 91;
        public const uint XONLINE_COUNTRY_SLOVENIA             = 92;
        public const uint XONLINE_COUNTRY_SLOVAK_REPUBLIC      = 93;
        public const uint XONLINE_COUNTRY_EL_SALVADOR          = 95;
        public const uint XONLINE_COUNTRY_SYRIA                = 96;
        public const uint XONLINE_COUNTRY_THAILAND             = 97;
        public const uint XONLINE_COUNTRY_TUNISIA              = 98;
        public const uint XONLINE_COUNTRY_TURKEY               = 99;
        public const uint XONLINE_COUNTRY_TRINIDAD_AND_TOBAGO  = 100;
        public const uint XONLINE_COUNTRY_TAIWAN               = 101;
        public const uint XONLINE_COUNTRY_UKRAINE              = 102;
        public const uint XONLINE_COUNTRY_UNITED_STATES        = 103;
        public const uint XONLINE_COUNTRY_URUGUAY              = 104;
        public const uint XONLINE_COUNTRY_UZBEKISTAN           = 105;
        public const uint XONLINE_COUNTRY_VENEZUELA            = 106;
        public const uint XONLINE_COUNTRY_VIET_NAM             = 107;
        public const uint XONLINE_COUNTRY_YEMEN                = 108;
        public const uint XONLINE_COUNTRY_SOUTH_AFRICA         = 109;
        public const uint XONLINE_COUNTRY_ZIMBABWE             = 110;

        //
        // Tiers
        //
        public const uint XONLINE_TIER_NEWUSER      = 0;
        public const uint XONLINE_TIER_SILVER       = 3;
        public const uint XONLINE_TIER_GOLD         = 6;
        public const uint XONLINE_TIER_FAMILY_GOLD  = 9;

        public static string UserTierToString(uint tier)
        {
            switch (tier)
            {
            case XOn.XONLINE_TIER_NEWUSER:
                return "None";
            case XOn.XONLINE_TIER_SILVER:
                return "Silver";
            case XOn.XONLINE_TIER_GOLD:
                return "Gold";
            case XOn.XONLINE_TIER_FAMILY_GOLD:
                return "FamilyGold";
            default:
                return tier.ToString();
            }
        }

        //
        // Gamer Profile stuff, used in statsfd
        //
        public const ushort XONLINE_MAX_SETTING_VALUE_BYTES = 1000;
        public const ushort XONLINE_MAX_SETTING_COUNT       = 32;
        public const ushort XONLINE_MAX_SETTING_RESPONSE_COUNT = 128;
        public const ushort XONLINE_MAX_SETTING_USERS       = 16;

        public const uint XSOURCE_NO_VALUE                  = 0;
        public const uint XSOURCE_DEFAULT                   = 1;
        public const uint XSOURCE_TITLE                     = 2;
        public const uint XSOURCE_PERMISSION_DENIED         = 3;

        // these are the enforcement bits applied to the setting ids
        public const uint XPROFILE_SETTING_ENFORCE_ACTIVITY     = 0x01;
        public const uint XPROFILE_SETTING_ENFORCE_UCC          = 0x02;
        public const uint XPROFILE_SETTING_ENFORCE_FRIENDS_ONLY = 0x04;

        public const uint XPROFILE_SETTING_TRANSIENT_ONLY       = 0x08;

        public const uint XPROFILE_SETTING_ENFORCE_CONSOLE_RO   = 0x10;
        public const uint XPROFILE_SETTING_ENFORCE_WEB_RO       = 0x20;
        public const uint XPROFILE_SETTING_ENFORCE_TITLE_RO     = 0x40;
        public const uint XPROFILE_SETTING_ENFORCE_NOT_SHARED   = 0x80;

        public const uint XPROFILE_SETTING_ENFORCE_VIDEO        = 0x100;

        // these are the permissions users can select for themselves
        public const byte XPROFILE_PERMISSION_SHARE_ACTIVITY_NOONE   = 0x01;
        public const byte XPROFILE_PERMISSION_SHARE_ACTIVITY_FRIENDS = 0x02;
        public const byte XPROFILE_PERMISSION_SHARE_UCC_NOONE        = 0x04;
        public const byte XPROFILE_PERMISSION_SHARE_UCC_FRIENDS      = 0x08;
        public const byte XPROFILE_PERMISSION_SHARE_MUSIC_NOONE      = 0x10;
        public const byte XPROFILE_PERMISSION_SHARE_MUSIC_FRIENDS    = 0x20;
        public const byte XPROFILE_PERMISSION_SHARE_VIDEO_OPTION     = 0x40;
        public const byte XPROFILE_PERMISSION_SHARE_VIDEO_EVERYONE   = 0x80;
        public const uint XPROFILE_PERMISSION_SHARE_AUDIO_DATA_COLL = 0x100;

        public const uint XPROFILE_PERMISSIONS                  = 0x10040000;


        // title types
        public const uint TITLE_TYPE_SYSTEM = 0;
        public const uint TITLE_TYPE_STANDARD = 1;
        public const uint TITLE_TYPE_DEMO = 2;
        public const uint TITLE_TYPE_ARCADE = 3;
        public const uint TITLE_TYPE_APPLICATION = 5;

        // achievement flags
        public const uint XACHIEVEMENT_DETAILS_MASK_TYPE = 0x00000007;
        public const uint XACHIEVEMENT_DETAILS_SHOWUNACHIEVED = 0x00000008;
        public const uint XACHIEVEMENT_DETAILS_ACHIEVED_ONLINE = 0x00010000;
        public const uint XACHIEVEMENT_DETAILS_ACHIEVED = 0x00020000;
        public const uint XACHIEVEMENT_DETAILS_NOT_ACHIEVABLE = 0x00040000;
        public const uint XACHIEVEMENT_DETAILS_WAS_NOT_ACHIEVABLE = 0x00080000;

        public const uint XACHIEVEMENT_DETAILS_PLATFORM_MASK = 0x00700000;
        public const uint XACHIEVEMENT_DETAILS_PLATFORM_360 = 0x00100000;
        public const uint XACHIEVEMENT_DETAILS_PLATFORM_PC = 0x00200000;
        public const uint XACHIEVEMENT_DETAILS_PLATFORM_MOBILE = 0x00300000;
        public const uint XACHIEVEMENT_DETAILS_PLATFORM_WEB_GAMES = 0x00400000;
        public const int XACHIEVEMENT_DETAILS_PLATFORM_SHIFT = 20;

        // avatar asset flags
        public const uint XAVATAR_DETAILS_MASK_TYPE = 0x00000007;
        public const uint XAVATAR_DETAILS_SHOWUNACHIEVED = 0x00000008;

        public const uint XAVATAR_DETAILS_STATUS_MASK = 0x010F0000;
        public const uint XAVATAR_DETAILS_ACHIEVED_ONLINE = 0x00010000;
        public const uint XAVATAR_DETAILS_ACHIEVED = 0x00020000;
        public const uint XAVATAR_DETAILS_NOT_ACHIEVABLE = 0x00040000;
        public const uint XAVATAR_DETAILS_WAS_NOT_ACHIEVABLE = 0x00080000;
        public const uint XAVATAR_DETAILS_COLORIZABLE = 0x01000000;

        public const uint XAVATAR_DETAILS_PLATFORM_MASK = 0x00700000;
        public const uint XAVATAR_DETAILS_PLATFORM_360 = 0x00100000;
        public const uint XAVATAR_DETAILS_PLATFORM_PC = 0x00200000;
        public const uint XAVATAR_DETAILS_PLATFORM_MOBILE = 0x00300000;
        public const uint XAVATAR_DETAILS_PLATFORM_WEB_GAMES = 0x00400000;
        public const int XAVATAR_DETAILS_PLATFORM_SHIFT = 20;

        // marketplace genre constants that will be hardcoded into the client
        public const int XONLINE_GENRE_BASE           = 0;
        public const int XONLINE_GENRE_XARCADE      = 116000000;

        //
        // Achievements (statsfd)
        //
        public const ushort XONLINE_MAX_ACHIEVEMENTS = 32;
        public const uint XONLINE_SERVER_ACHIEVEMENT_SEQUENCE = 0xffffffff;
        public const uint XACHIEVEMENT_INVALID_ID = 0xffffffff;

        //
        // Avatar Assets (statsfd)
        //
        public const ushort XONLINE_MAX_AVATAR_ASSETS       = 32;

        // body types that that an asset applies to.
        public const byte XAVATAR_BODY_TYPE_UNKNOWN         = 0x00;
        public const byte XAVATAR_BODY_TYPE_MALE            = 0x01;
        public const byte XAVATAR_BODY_TYPE_FEMALE          = 0x02;
        public const byte XAVATAR_BODY_TYPE_ALL             = 0x03;

        // body component associated with each asset.
        public const uint XAVATAR_COMPONENT_MASK_NONE       = 0x0000;
        public const uint XAVATAR_COMPONENT_MASK_HEAD       = 0x0001;
        public const uint XAVATAR_COMPONENT_MASK_BODY       = 0x0002;
        public const uint XAVATAR_COMPONENT_MASK_HAIR       = 0x0004;
        public const uint XAVATAR_COMPONENT_MASK_SHIRT      = 0x0008;
        public const uint XAVATAR_COMPONENT_MASK_TROUSERS   = 0x0010;
        public const uint XAVATAR_COMPONENT_MASK_SHOES      = 0x0020;
        public const uint XAVATAR_COMPONENT_MASK_HAT        = 0x0040;
        public const uint XAVATAR_COMPONENT_MASK_GLOVES     = 0x0080;
        public const uint XAVATAR_COMPONENT_MASK_GLASSES    = 0x0100;
        public const uint XAVATAR_COMPONENT_MASK_WRISTWEAR  = 0x0200;
        public const uint XAVATAR_COMPONENT_MASK_EARRINGS   = 0x0400;
        public const uint XAVATAR_COMPONENT_MASK_RING       = 0x0800;
        public const uint XAVATAR_COMPONENT_MASK_CARRYABLE  = 0x1000;
        public const uint XAVATAR_COMPONENT_MASK_ALL        = 0x1FFF;

        //
        // Titles (statsfd)
        //
        public const ushort XPROFILE_MAX_ENUM_TITLE         = 32;

        //
        // Leaderboard/Stats API (statsfd)
        //
        public const ushort XONLINE_MAX_STATS_OP_COUNT      = 1000;
        public const ushort XONLINE_MAX_STATS_OP_PARAMS     = 256;
        public const ushort XONLINE_MAX_STATS_OP_PARAM_DATA = 1024;
        public const ushort XONLINE_MAX_STATS_COL_COUNT     = 64;
        public const ushort XONLINE_MAX_STATS_ROW_COUNT     = 1000;
        public const ushort XONLINE_MAX_STATS_SPEC_COUNT    = 1000;
        public const ushort XONLINE_MAX_STATS_USER_COUNT    = 101;
        public const ushort XONLINE_MAX_STATS_ENUM_COUNT    = 100;
        public const ushort XONLINE_MAX_STATS_ENUM_SPEC_COUNT = 10;
        public const ushort XONLINE_MAX_STATS_ESTIMATE_RATING_COUNT = 101;
        public const ushort XONLINE_MAX_STATS_ATTACHMENT_COUNT = 65535; //in xlast it is USHORT

        //
        // liveinfo
        //
        public const ushort XONLINE_MAX_LIVEINFO_CONFIG_NAME_LENGTH = 64;

        //
        // xsig
        //
        public const uint XONLINE_SIG_MAX_CONTENT_TUPLES    = 32;

        //
        // parental controls
        //
        public const short XONLINE_MAX_PARENTAL_CONTROLS_SOURCE_LENGTH = 100;

        //
        // Ids
        //
        public class XboxId
        {
            public const UInt64 Mask                = 0xFFFF000000000000;
            public const UInt64 UserBase            = 0x0009000000000000;
            public const UInt64 XboxMachineBase     = 0x0009000000000000;
            public const UInt64 XenonConsoleBase    = 0xF000000000000000;
            public const UInt64 XenonMachineBase    = 0xFA00000000000000;
            public const UInt64 PcMachineBase       = 0xFB00000000000000;
            public const UInt64 MobileMachineBase   = 0xFC00000000000000;

            // note this is not a real machine base.  xbox.com is  faking
            // machine ids by passing session ids with this 2 byte prefix

            public const UInt64 XboxComMachineBase  = 0xFFED000000000000;


            public static bool IsUserPuid(UInt64 id)          { return (id & Mask) == UserBase; }
            public static bool IsXboxMachinePuid(UInt64 id)   { return (id & Mask) == XboxMachineBase; }
            public static bool IsXenonMachinePuid(UInt64 id)  { return (id & Mask) == XenonMachineBase; }
            public static bool IsPcMachinePuid(UInt64 id)     { return (id & Mask) == PcMachineBase; }
            public static bool IsMobileMachinePuid(UInt64 id) { return (id & Mask) == MobileMachineBase; }
            public static bool IsXboxcomMachinePuid(UInt64 id) { return (id & Mask) == XboxComMachineBase; }    // Note: Intentionally omitted from IsMachinePuid (it's not a real machine we can verify)
            public static bool IsMachinePuid(UInt64 id)       { return IsXboxMachinePuid(id) || IsXenonMachinePuid(id) || IsPcMachinePuid(id) || IsMobileMachinePuid(id); }

            public static byte GetPlatformType(UInt64 id)
            {
                if(IsXboxMachinePuid(id))
                {
                    return XOn.XPLT_XBOX1;
                }
                else if(IsXenonMachinePuid(id))
                {
                    return XOn.XPLT_XBOX360;
                }
                else if(IsPcMachinePuid(id))
                {
                    return XOn.XPLT_PC;
                }
                else if(IsMobileMachinePuid(id))
                {
                    return XOn.XPLT_MOBILE;
                }
                else if(IsXboxcomMachinePuid(id))
                {
                    return XOn.XPLT_WEB;
                }
                else
                {
                    throw new Exception(string.Format("Invalid platform type. Machine-id=0x{0}", id));
                }
            }

        }

        // -----------------------------------------------------------------------------
        // Platform types
        // These constants are used by CAuthData3 and SGADDR2 to identify the platform
        // type
        // -----------------------------------------------------------------------------
        public const byte XPLT_XBOX1            = 0;
        public const byte XPLT_XBOX360          = 1;
        public const byte XPLT_PC               = 2;
        public const byte XPLT_INTERNAL         = 3;
        public const byte XPLT_WEB              = 4;
        public const byte XPLT_INTERNAL_XBOXCOM = 5;
        public const byte XPLT_INTERNAL_ZUNE    = 6;
        public const byte XPLT_INTERNAL_XNA     = 7;
        public const byte XPLT_INTERNAL_WGX     = 8;

        public const byte XPLT_ZUNEV1           = 9;
        public const byte XPLT_ZUNEV2           = 10;
        public const byte XPLT_MEDIA_CENTER     = 11;
        public const byte XPLT_ZUNEV3           = 12;
        public const byte XPLT_ZUNE_MOBILE      = 13;

        public const byte XPLT_INTERNAL_LIVEN   = 14;
        public const byte XPLT_MOBILE           = 15;
        public const byte XPLT_WEB_GAMES        = 16;

        public const byte XPLT_INVALID          = 255;


        //
        // Console audit list (statsfd)
        //
        public const ushort XONLINE_MAX_CONSOLE_AUDIT_LIST = 100;

        //
        // Offers
        //
        public const ulong FREE_GAMERTAG_OFFER = 0xFFFE07D10AA00002;
        public const ulong SILVER_OFFER = 0xFFFE07D180000011;
    }


    // -----------------------------------------------------------------------------
    // Xbox Live Http Headers (Internal) - Never seen by a client
    // -----------------------------------------------------------------------------
    public static class XHttpHdr
    {
        public const string XPLT                = "XPLT";                     // SGInfo
        public const string XPLT_I              = "XPLTOnBehalfOf";           // SGInfo
        public const string SGIPPORT            = "SGIPPort";                 // SGInfo, XRLScan
        public const string SERVERPORT          = "ServerPort";               // SGInfo, XRLScan
        public const string HTTPAUTHDATA        = "HTTPAuthData";             // SGInfo
        public const string BUNDLEDAUTHDATA     = "BundledAuthData";          // SGInfo
        public const string AUTHZ               = "AuthZ";                    // AAInfo
        public const string LOADBALANCER_ISSSL  = "X-LB-Is-Ssl";              // SSL LB -> AAModule
        public const string CERT_SUBJECT        = "X-LB-Cert-Subject-Name";   // SSL LB -> AAModule
        public const string CERT_THUMBPRINT     = "X-LB-Cert-Thumbprint";     // SSL LB -> AAModule
        public const string CERT_EKULIST        = "X-LB-Cert-EKU-List";       // SSL LB -> AAModule
        public const string SUBJECTNAME         = "Subject-Name";             // WebSG
        public const string CLIENTIPPORT        = "Client-IP-Port";           // WebSG
        public const string REQUESTID           = "RequestId";                // WebSG
        public const string WEBCACHEREQUEST     = "WebCacheSource";           // WebCache, Query
        public const string HEADERCOLLECTION    = "HTTPHeaderCollection";     // LiveCache
        public const string THMSESSIONID        = "THM_session_id";           // LiveCache, Billing


        public static bool IsKnownInternalHeader(string header)
        {
            if (String.IsNullOrEmpty(header))
                return false;
            else
                return _InternalHeaders.ContainsKey(header.ToLower());
        }

        static XHttpHdr()
        {
            _InternalHeaders = new Dictionary<string, string>();

            FieldInfo[] fi = typeof(XHttpHdr).GetFields(
                BindingFlags.Static |
                BindingFlags.DeclaredOnly |
                BindingFlags.Public);

            foreach (FieldInfo f in fi)
            {
                try
                {
                    string h = (string)f.GetValue(null);
                    _InternalHeaders[h.ToLower()] = f.Name;
                }
                catch {}  // not much we can do in a static constructor
            }
        }

        private static Dictionary<string, string> _InternalHeaders;

    }

    public static class XDateTime
    {
        public static DateTime Now
        {
            get 
            {
                return DateTime.UtcNow;
            }
        }

        public static string NowStr
        {
            get
            {
                return ToString(XDateTime.Now);
            }
        }

        public static string ToString(DateTime now)
        {
            // Gets a consistently-formatted string of the form:
            //   2010/07/23 23:53:47.487
            //   
            // For 1M iterations, the timings are:
            //   1.877s: str = now.ToString("yyyy/MM/dd HH:mm:ss.fff");
            //   0.440s: the unrolled ugliness below
            // Blech. Sorry.

            char[] charstr = new char[23];
            int idx = 0;
            int n = now.Year;
            charstr[idx++] = (char)('0' + (n / 1000) % 10);
            charstr[idx++] = (char)('0' + (n / 100) % 10);
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = '/';
            n = now.Month;
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = '/';
            n = now.Day;
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = ' ';
            n = now.Hour;
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = ':';
            n = now.Minute;
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = ':';
            n = now.Second;
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            charstr[idx++] = '.';
            n = now.Millisecond;
            charstr[idx++] = (char)('0' + (n / 100) % 10);
            charstr[idx++] = (char)('0' + (n / 10) % 10);
            charstr[idx++] = (char)('0' + (n / 1) % 10);
            return new string(charstr);
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\service\XRLUtil.cs ===
using System;
using System.Net;
using System.IO;
using System.Web;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Globalization;
using System.Diagnostics;

using xonline.common.config;
using xonline.common.mgmt;


namespace xonline.common.service
{
    [ComVisible(false)]
    public class XRLUtil
    {

        //-----------------------------------------------------
        // SetXRLResponse
        //
        //      Sets up the response header and (optionally)
        //      the body in accordace with the XRL spec.
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, HResult hr)
        {

            SetXRLResponse(resp, svc, GetCurrentTitleId(), hr);
        }


        //-----------------------------------------------------
        // SetXRLResponse
        //
        //      Sets up the response header and (optionally)
        //      the body in accordace with the XRL spec.
        //
        //      use this version if you don't want to load SGInfo to get titleId.
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, uint titleId, HResult hr)
        {
            SetXRLResponse(HttpContext.Current, resp, svc, titleId, hr);
        }

        public static void SetXRLResponse(HttpContext ctx, HttpResponse resp, XOService svc, uint titleId, HResult hr)
        {
            resp.ClearContent();
            resp.ClearHeaders();

            resp.ContentType = "xon/" + ((int)svc).ToString("x");
            resp.StatusCode = (HResult.Succeeded(hr) ? 200 : 500);

//          The following line has been commented out due to a change in behavior in Win2k3 SP1, which no
//          longer updates Content-Length if it is ever explicitly set
//
//          resp.AppendHeader("Content-Length", "0");

            Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLUtil.SetXRLResponse: Returning hr = " + hr);

            // add the X-Err header only if there's a non S_OK
            // result.
            //
            if (hr != HResult.S_OK)
            {
                // the xerr header is hex but the client is not expecting a
                // leading 0x, so we convert to uint and then do a ToString

                resp.AppendHeader("X-Err", ((uint) hr).ToString("x08"));
                resp.AppendToLog("X-Err(" + hr + ")");

                // this shouldn't fail, but if it does oh well
                try
                {
                    ctx.Items["XErr"] = hr;
                }
                catch {}

                // If this is a Xbox 360 console, also include the X-Server
                // header in the response.

                if (SGInfo.IsAvailableInContext(ctx) && SGInfo.Current._IsXbox360())
                {
                    resp.AppendHeader("X-Server", Environment.MachineName);
                }

                // if it is not an Xbox1, and there was an event logged
                // under this context, then include an  X-Event  header

                if (!SGInfo.IsAvailableInContext(ctx) || !SGInfo.Current._IsXbox())
                {
                    if ((ctx.Items["XEvent"] != null) && (ctx.Response.Headers["X-Event"] == null))
                    {
                        resp.AppendHeader("X-Event", (string)ctx.Items["XEvent"]);
                    }
                }
            }

            XDelay.AddDelayHeader(resp, titleId, GetCurrentPageName(ctx.Request));
        }


        //-----------------------------------------------------
        // SetXRLResponse
        //
        //      Sets up the response header and (optionally)
        //      the body in accordace with the XRL spec.
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, HResult hr, XRLObject2 data)
        {
            SetXRLResponse(resp, svc, GetCurrentTitleId(), hr, data);
        }

        //-----------------------------------------------------
        // SetXRLResponse
        //
        //      Sets up the response header and (optionally)
        //      the body in accordace with the XRL spec.
        //
        public static void SetXRLResponse(HttpResponse resp, XOService svc, uint titleId, HResult hr, XRLObject2 data)
        {
            SetXRLResponse(resp, svc, titleId, hr);

            if (data != null)
            {
                data.WriteToResponse(resp);

                // this shouldn't fail, but if it does oh well
                try
                {
                    HttpContext.Current.Items["XRLResponse"] = data;
                }
                catch {}


                //Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLUtil.SetXRLResponse: Returning hr = " + hr + ", response:" + LogBinary(data));
            }
        }

        public static void SetXRLResponse(HttpResponse resp, XOService svc, HResult hr, byte[] response)
        {
            SetXRLResponse(resp, svc, hr);

            if (response != null)
            {
                BinaryWriter writer = new BinaryWriter(resp.OutputStream);
                writer.Write(response);

                //Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLUtil.SetXRLResponse: Returning hr = " + hr + ", response:" + LogBinary(response));
            }
        }

        public static void SetXRLResponse(HttpResponse resp, XOService svc, uint titleId, HResult hr, byte[] response)
        {
            SetXRLResponse(HttpContext.Current, resp, svc, titleId, hr, response);
        }

        public static void SetXRLResponse(HttpContext ctx, HttpResponse resp, XOService svc, uint titleId, HResult hr, byte[] response)
        {
            SetXRLResponse(ctx, resp, svc, titleId, hr);

            if (response != null)
            {
                BinaryWriter writer = new BinaryWriter(resp.OutputStream);
                writer.Write(response);

                //Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "XRLUtil.SetXRLResponse: Returning hr = " + hr + ", response:" + LogBinary(response));
            }
        }

        public static uint GetCurrentTitleId()
        {
            // this should create an sginfo if it doesn't exist
            // in the case that the interface requires "real" sg, it will make the request
            // in the case where the httpauthdata header is sent, it will use the titleid from there
            // in the case where no authdata was sent at all, it will return 0

            if (AuthToggle.Off)
                return 0;

            return SGInfo.Current.TitleId;
        }

        public static string GetCurrentPageName(HttpRequest req)
        {
            return Path.GetFileNameWithoutExtension(req.FilePath);
        }


        //-----------------------------------------------------
        // SetNoPostBufferInErrorLog
        //
        //      Call this at the start of any ProcessRequest
        //      calls, for requests that contain sensitive
        //      information that shouldn't be shown in the
        //      event log in the case of an error.
        //
        public static void SetNoPostBufferInErrorLog()
        {
            HttpContext.Current.Items["NoPostBufferLog"] = true;
        }

        public static void AddErrorPerfCounters(params PerformanceCounter[] ctrs)
        {
            AddErrorPerfCounters(ctrs, XOn.ERROR_PERF_COUNTERS);
        }

        public static void AddErrorPerfCounters(PerformanceCounter[] ctrs, string ctrsName)
        {
            PerformanceCounter[] newPerfCtrs = ctrs;
            PerformanceCounter[] curPerfCtrs = (PerformanceCounter[])HttpContext.Current.Items[ctrsName];
            if (curPerfCtrs != null)
            {
                newPerfCtrs = new PerformanceCounter[curPerfCtrs.Length + ctrs.Length];
                curPerfCtrs.CopyTo(newPerfCtrs, 0);
                ctrs.CopyTo(newPerfCtrs, curPerfCtrs.Length);
            }

            HttpContext.Current.Items[ctrsName] = newPerfCtrs;
        }


        public static bool IsFromBrowser()
        {
            if (HttpContext.Current==null)
                return false;

            if (HttpContext.Current.Request.UserAgent == null)
                return false;

            return (HttpContext.Current.Request.UserAgent.IndexOf("MSIE") != -1);

        }

        //------------------------------------------------------
        // GetServiceID
        //
        //      Retrieve the XOnline Service ID from the HTTP
        //      request.  The Content-Type header is in the form
        //      xon/<service ID>.
        //
        public static XOService GetServiceID(HttpRequest request)
        {
            // If the Content-Type header doesn't start with 'xon/' it is not
            // a valid XOnline request.
            //
            if (0 != System.String.Compare(request.ContentType, 0, "xon/", 0, 4, true))
            {
                return XOService.InvalidService;
            }

            return (XOService)System.UInt32.Parse(request.ContentType.Substring(4), NumberStyles.AllowHexSpecifier);
        }

        //------------------------------------------------------
        // ParseUserAgent
        //
        //      Break a user agent string into substrings.
        //
        public static string[] ParseUserAgent(HttpRequest request)
        {
            if (request.UserAgent == null)
                throw new XRLException(HResult.XONLINE_E_INVALID_REQUEST, XEvent.Id.USER_AGENT_MISSING, "User-Agent header not found!");

            string[] strings = request.UserAgent.Split(new char[] { '/', '.' });

            // 3 or 4 part user agent strings accepted. The Build Number is optional.
            if ((strings.Length < 3) || (strings.Length > 5))
                throw new XRLException(HResult.XONLINE_E_INVALID_REQUEST, XEvent.Id.USER_AGENT_INVALID, "Invalid format for user agent! (not like 6/1.0.4567) '" + request.UserAgent + "'");

            return(strings);
        }

        //------------------------------------------------------
        // GetMajorVersion
        //
        //      Retrieve the XOnline major version from the HTTP
        //      request.  The User-Agent header is in the form
        //      <service ID>/<vermajor>.<verminor>.<build>.
        //
        public static uint GetMajorVersion(HttpRequest request)
        {
            string[] strings = ParseUserAgent(request);

            return System.UInt32.Parse(strings[1]);
        }

        //------------------------------------------------------
        // GetMinorVersion
        //
        //      Retrieve the XOnline minor version from the HTTP
        //      request.  The User-Agent header is in the form
        //      <service ID>/<vermajor>.<verminor>.<build>.
        //
        public static uint GetMinorVersion(HttpRequest request)
        {
            string[] strings = ParseUserAgent(request);

            return System.UInt32.Parse(strings[2]);
        }

        //------------------------------------------------------
        // GetClientBuild
        //
        //      Retrieve the XOnline client build from the HTTP
        //      request.  The User-Agent header is in the form
        //      <service ID>/<vermajor>.<verminor>.<build>.
        //
        public static uint GetClientBuild(HttpRequest request)
        {
            string[] strings = ParseUserAgent(request);

            return System.UInt32.Parse(strings[3]);
        }

        //------------------------------------------------------
        // IsValidXOnlineRequest
        //
        //      Makes sure that the service identified in the request
        //      header is the one desired by this service.
        //
        public static bool IsValidXOnlineRequest(HttpRequest request, XOService service)
        {
            string[] strings = ParseUserAgent(request);

            if (GetServiceID(request) != service ||
                (XOService)System.UInt32.Parse(strings[0], NumberStyles.AllowHexSpecifier) != service
                )
            {
                return false;
            }

            return true;
        }


        //-----------------------------------------------------
        // VerifyParam
        //
        //      Simple helper to throw an exception if
        //      the provided test is false. Handy when doing lots
        //      of param checks.
        //
        public static void VerifyParam(bool test, string message)
        {
            if (test == false)
            {
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.MC_BAD_PARAMETER_2, message);
            }
        }

        //-----------------------------------------------------
        // IsTeamPuid
        //
        //      Simple helper to see if a puid is a team or user
        //      puid.
        //
        public static bool IsTeamPuid(ulong puid)
        {
            return ((0xFEFE000000000000 & puid) == 0xFEFE000000000000);
        }



        //-----------------------------------------------------
        // GetServiceAddress
        //
        //      Returns an address from the service configuration
        //      that can be used to contact the given service id.
        //
        public static string GetServiceAddress( XOService service )
        {
            string                  viface;
            IVirtualInterfaceInfo   fdInfo;

            switch (service)
            {
            case XOService.PresNotification:  viface = VirtualInterface.xpnfd_presence_int; break;
            case XOService.StringService:     viface = VirtualInterface.stringsvr_int; break;
            //case XOService.Auto_Update:       viface = VirtualInterface.xbos_autoupdate; break; // no internal interface
            //case XOService.Base_Subscription:  viface = VirtualInterface.xbos_base_subscription; break; // no internal interface
            case XOService.User_Account:      viface = VirtualInterface.xuacs_int; break;
            case XOService.Matchmaking:       viface = VirtualInterface.xmatchfd_int; break;
            case XOService.Stats:             viface = VirtualInterface.xstatsfd_int; break;
            case XOService.Feedback:          viface = VirtualInterface.fbserver_int; break;
            case XOService.Billing_Offering:  viface = VirtualInterface.xbos_int; break;
            case XOService.Lists:             viface = VirtualInterface.Lists_int; break;
            case XOService.Signature_Server:  viface = VirtualInterface.xsig_int; break;
            case XOService.Query:             viface = VirtualInterface.xqry_int; break;
            case XOService.Name_Resolution:   viface = VirtualInterface.stfd_name_resolution_int; break;    // should this have an XdnsIIS VirtualInterface?
            case XOService.Storage:           viface = VirtualInterface.stfd_storage_int; break;
            case XOService.Arbitration:       viface = VirtualInterface.xarb_int; break;
            case XOService.Cron:              viface = VirtualInterface.cron_int; break;
            case XOService.MessagingService:  viface = VirtualInterface.xpnfd_messaging_int; break;
            case XOService.Teams:             viface = VirtualInterface.xpnfd_teams_int; break;
            case XOService.Liveinfo:          viface = VirtualInterface.liveinfo_int; break;
            case XOService.Connection_Server: viface = VirtualInterface.XConnSrv; break;
            case XOService.Profile:           viface = VirtualInterface.profilefd_int; break;
            case XOService.Progress:          viface = VirtualInterface.progressfd_int; break;

            default:
                throw new XRLException(HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CODE_66, "Internal virtual interface for service " + service + " not found!   Add it to XRLUtil::GetServiceAddress.");
            }

            fdInfo = Config.GetVirtualInterface(viface, 1);
            if (fdInfo == null)
            {
                throw new XRLException(HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CONFIG_278, "Virtual interface for service " + viface.ToString() + " not found!  Check the config file.");
            }

            return String.Format("{0}://{1}:{2}", fdInfo.Protocol, fdInfo.IPAddressString, fdInfo.Port);
        }



        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Sends an http POST request to the given service
        //      id,  with xrl-compliant header information.
        //
        //      NOTE: error hresults returned in the X-Err header
        //      of the response are returned without exception.
        //      If no x-err is found, and the status is not 200,
        //      then an exception is thrown.
        //
        public static HResult PostXrlRequest( XOService service, string url, string authData, byte[] postData, WebHeaderCollection headers, out byte[] responseData )
        {
            Version ver = Assembly.GetExecutingAssembly().GetName().Version;
            HResult hr;
            string  xErr;

            WebClient myWebClient = new WebClient();
            if (authData != null)
            {
                myWebClient.Headers.Add(XHttpHdr.HTTPAUTHDATA, authData);
            }
            myWebClient.Headers.Add("Content-Type", "xon/"+((int)service).ToString("x"));
            // TODO: Ensure the assembly is versioned and use the right version
            myWebClient.Headers.Add("User-Agent", ((int)service).ToString("x")+"/1.0.4325");
            if ((headers == null) || (headers["X-Schema-Ver"] == null))
            {
                myWebClient.Headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(WireData.CurrentSchemaVersion));
            }
            if (headers != null)
            {
                myWebClient.Headers.Add(headers);
            }

            // If any behavior injections have requested to be passed along, do so.
            RequestHeaderBehaviorInjectionMgr.AddPassThroughBehaviorInjections(myWebClient.Headers);

            try
            {
                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, "POSTing " + postData.Length+ " bytes to " + url + "...");

                responseData = myWebClient.UploadData(url, "POST", postData);
                hr = HResult.S_OK;

                xErr = myWebClient.ResponseHeaders["X-Err"];
                if (xErr != null)
                {
                    hr = HResult.Parse(xErr);
                }

                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, url + " returned " + hr);

            }
            catch (WebException e)
            {
                xErr = null;
                if (e.Response != null && e.Response.Headers != null)
                {
                    xErr = e.Response.Headers["X-Err"];
                }

                if (xErr == null)
                {
                    // not a normal failure, so throw
                    // default to BadRequest if no response is available.
                    HttpStatusCode status = (e.Response == null ? HttpStatusCode.BadRequest : ((HttpWebResponse)e.Response).StatusCode);

                    throw new XrlRequestException(url, e.Message, status, postData, e);
                }

                hr = HResult.Parse(xErr);
                responseData = null;

                Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, url + " returned " + hr);
            }

            return hr;
        }

        public static HResult PostXrlRequest( string viface, string path, string authData, byte[] postData, WebHeaderCollection headers, out byte[] responseData )
        {
            IVirtualInterfaceInfo   fdInfo = Config.GetVirtualInterface(viface, 1);
            XOService               service = XOService.InvalidService;
            UriBuilder              uribldr;

            uribldr = new UriBuilder(fdInfo.Protocol, fdInfo.IPAddressString, fdInfo.Port, path);

            service = (XOService)fdInfo.ServiceId;

            if (XOService.InvalidService == service)
            {
                throw new XrlRequestException(uribldr.ToString(), "PostXrlRequest can't find XOService for VirtualInterface '" + viface.ToString() + "'", HttpStatusCode.BadRequest, postData, null);
            }

            if (fdInfo.Protocol.ToLower() != "http")
            {
                throw new XrlRequestException(uribldr.ToString(), "PostXrlRequest only supports 'http' scheme", HttpStatusCode.BadRequest, postData, null);
            }

            return PostXrlRequest( service, uribldr.ToString(), authData, postData, headers, out responseData);
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically and allows custom auth data.
        //
        //
        public static HResult PostXrlRequest( string viface, string path, string authData, XRLObject2 postOb, WebHeaderCollection headers, ref XRLObject2 respOb )
        {
            HResult hr;
            byte[] respData;

            if ( headers == null )
            {
                headers = new WebHeaderCollection();
            }

            headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(postOb.SchemaVersion));

            hr = PostXrlRequest(viface, path, authData, (byte[]) postOb, headers, out respData);

            if( respOb != null && respData != null && respData.Length != 0 )
            {
                respOb.ReadBytes(respData);
            }

            return hr;
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically and allows custom auth data.
        //
        //
        public static HResult PostXrlRequest( string viface, string path, string authData, XRLObject2 postOb, ref XRLObject2 respOb )
        {
            WebHeaderCollection headers = null;
            return PostXrlRequest( viface, path, authData, postOb, headers, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically and allows custom auth data.
        //
        //
        public static HResult PostXrlRequest( string viface, string path, XRLObject2 postOb )
        {
            XRLObject2 respOb = null;

            return PostXrlRequest( viface, path, SGInfo.ToBase64String(), postOb, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but allows for XRLObject2 response object
        //
        //
        public static HResult PostXrlRequest( string viface, string path, XRLObject2 postOb, ref XRLObject2 respOb )
        {
            return PostXrlRequest( viface, path, SGInfo.ToBase64String(), postOb, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same as above but this method will use the port specified in the
        //      config file if -1 is specified for the port. If no
        //      port is specified in the config file, the default service
        //      port 8080 is used.
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, int port, string authData, byte[] postData, WebHeaderCollection headers, out byte[] responseData )
        {
            UriBuilder uribldr;

            uribldr = new UriBuilder(GetServiceAddress(service));

            if (port != -1)
            {
                uribldr.Port = port;
            }

            if (uribldr.Port == -1)
            {
                uribldr.Port = 8080;
            }

            uribldr.Path = path;
            uribldr.Scheme = "http";

            return PostXrlRequest( service, uribldr.ToString(), authData, postData, headers, out responseData);
        }

        public static HResult PostXrlRequest( XOService service, string path, int port, string authData, byte[] postData, out byte[] responseData )
        {
            return PostXrlRequest(service, path, port, authData, postData, null, out responseData);
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but uses default authdata
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, byte[] postData, out byte[] responseData )
        {
            return PostXrlRequest(service, path, -1, SGInfo.ToBase64String(), postData, null, out responseData);
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically and allows custom auth data.
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, string authData, XRLObject2 postOb, WebHeaderCollection headers, ref XRLObject2 respOb )
        {
            HResult hr;
            byte[] respData;

            if ( headers == null )
            {
                headers = new WebHeaderCollection();
            }

            headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(postOb.SchemaVersion));

            hr = PostXrlRequest( service, path, -1, authData, (byte[]) postOb, headers, out respData );

            if( respOb != null && respData != null && respData.Length != 0 )
            {
                respOb.ReadBytes(respData);
            }

            return hr;
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically and allows custom auth data.
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, string authData, XRLObject2 postOb, ref XRLObject2 respOb )
        {
            WebHeaderCollection headers = null;
            return PostXrlRequest( service, path, authData, postOb, headers, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      Same thing as above, but marshalls XRLOjbect2s
        //      automatically.
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, XRLObject2 postOb, ref XRLObject2 respOb )
        {
            return PostXrlRequest( service, path, SGInfo.ToBase64String(), postOb, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequest
        //
        //      no reponse object version
        //
        //
        public static HResult PostXrlRequest( XOService service, string path, XRLObject2 postOb )
        {
            XRLObject2 respOb = null;

            return PostXrlRequest( service, path, SGInfo.ToBase64String(), postOb, ref respOb );
        }

        //-----------------------------------------------------
        // PostXrlRequestToAlternate
        //
        // This version allows the caller to specify an url directly, bypassing
        // interface lookups from npdb. This shouldn't be allowed in production,
        // but is useful in test environments so we can point our front doors
        // at emulators during stress runs.
        //
        // If the setting xrlutil_allowAlternateUrl is false, then calling this
        // method will throw an exception with an event id of XEvent.Id.COMMON_HACK_78.
        // Presuming the service is not misconfigured, this means that a hacker
        // may be trying to mess with a production environment by sending alternate
        // destination headers.
        //
        public static HResult PostXrlRequestToAlternate(
            XOService service,
            string url,
            string authData,
            XRLObject2 postOb,
            WebHeaderCollection headers,
            XRLObject2 respOb)
        {
            if (!Config.GetBoolSetting(Setting.xrlutil_allowAlternateUrl))
            {
                throw new XRLException(HResult.XONLINE_E_INVALID_REQUEST, XEvent.Id.COMMON_HACK_79,
                    "PostXrlRequestToAlternate called when xrlutil_allowAlternateUrl setting is false");
            }

            HResult hr;
            byte[] respData;

            hr = PostXrlRequest(service, url, authData, (byte[]) postOb, headers, out respData);

            if( respOb != null && respData != null && respData.Length != 0 )
            {
                BinaryReader reader = new BinaryReader(new MemoryStream(respData));
                respOb.ReadBytes(respData);
            }

            return hr;
        }

        private static string LogBinary(byte[] bytes)
        {
            string result = "";

            if ( bytes != null )
            {
                string[] lines = ByteConvert.ToFormattedStrings(bytes);
                foreach (string s in lines)
                {
                    Xom.Trace(XomAreaName.xrltrace, LogLevel.L_LOW, s);
                }
            }
            else
            {
                result = "(null)";
            }

            return result;
        }

        private static string LogBinary(XRLObject2 xrlo)
        {
            if (xrlo != null)
            {
                return LogBinary((byte[])xrlo);
            }

            return "(null)";
        }

        //------------------------------------------------------
        // GetClientInfo
        //
        //      Retrieve the ip address and machine id from the SG Info
        //      or Active Auth info
        //
        public static void GetClientInfo(out string ipAddress, out ulong machineId)
        {
            ipAddress = string.Empty;
            machineId = 0;

            if (AAInfo.IsActiveAuthAvailable)
            {
                if (AAInfo.Current.XblSamlToken != null &&
                    !ulong.TryParse(AAInfo.Current.XblSamlToken.GetAttributeValue(XblSamlToken.name_attribute_machineid), out machineId))
                {
                    Xom.Trace(XomAreaName.aainfo, LogLevel.L_LOW, "GetClientInfo: Failed to parse name_attribute_machineid attribute '{0}'",
                        AAInfo.Current.XblSamlToken.GetAttributeValue(XblSamlToken.name_attribute_machineid));
                }
                ipAddress = AAInfo.Current.IpAddressInternet;
            }
            else if (SGInfo.IsAvailable)
            {
                machineId = SGInfo.Current.MachineId;
                ipAddress = SGInfo.Current.ClientIP.ToString();
            }
        }
    }

    [ComVisible(false)]
    public class XrlRequestException : ExceptionWithEventId
    {

        public XrlRequestException(string url, string message, HttpStatusCode statusCode, byte[] postData, Exception innerException) :
                base(XEvent.Id.MC_XRL_REQUEST_ERROR, "Error hitting URL " + url + "!!\r\n" + message + "\r\nStatus: " + statusCode + "\r\nPost data:" + ByteConvert.ToString(postData), innerException)
        {
            _url        = url;
            _statusCode = statusCode;
            _postData   = postData;
        }


        public string Url
        {
            get { return _url; }
        }

        public byte[] PostData
        {
            get { return _postData; }
        }

        public HttpStatusCode StatusCode
        {
            get { return _statusCode; }
        }


        private string         _url;
        private byte[]         _postData;
        private HttpStatusCode _statusCode;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\user\UserPrivileges.cs ===
using System;
using System.Diagnostics;
using System.Text;

using xonline.common.config;
using xonline.common.exceptions;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

using Microsoft.Webstore.WstClient;


namespace xonline.core.user
{
    /// <summary>
    /// Class that loads up privileges for a user with respect to
    /// a specific title.   Allows 
    /// </summary>
    public class UserPrivileges
    {
        public const int PRIVILEGE_MIN = XOn.XPRIVILEGE_MIN;
        public const int PRIVILEGE_MAX = XOn.XPRIVILEGE_MAX;

        private byte[] privileges;

        private UserPrivileges()
        {
            Debug.Assert(PRIVILEGE_MIN <= PRIVILEGE_MAX);
            this.privileges = new byte[(PRIVILEGE_MAX + 7) / 8];
        }

        /// <summary>
        /// Construct an instance of UserPrivileges using a passed  in  set
        /// of bits representing the set privileges in the range MIN to MAX
        /// </summary>
        /// <param name="privileges">array of bytes with privilege bits</param>
        public UserPrivileges(byte[] privileges) : this()
        {
            if (privileges == null)
                throw new ArgumentNullException("privileges");
            else if (privileges.Length != this.privileges.Length)
                throw new ArgumentException("Invalid number of bytes", "privileges");
            else {
                this.privileges = (byte[]) privileges.Clone();
            }
        }

        /// <summary>
        /// Construct an instance of UserPrivileges based on specific user
        /// but not a particular title.  Currently reads from the database
        /// </summary>
        /// <param name="xuid">The user for which privileges are calculated</param>
        public UserPrivileges(Puid xuid) : this(xuid, 0)
        {
        }

        /// <summary>
        /// Construct an instance of UserPrivileges based on specific user
        /// and a particular title.  Currently reads  from  the  database
        /// </summary>
        /// <param name="xuid">The user for which privileges are calculated</param>
        public UserPrivileges(Puid xuid, uint titleId) : this()
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE)) {
                ws.SetHashVal(xuid);

                ws.StoredProc = "dbo.p_signin_get_user_privileges";
                ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                ws.AddParameter(ParamType.INPUT, "@bi_user_puid", xuid);

                // the i_title_id parameter is optional and will be null if not specified
                if (titleId != 0) {
                    ws.AddParameter(ParamType.INPUT, "@i_title_id", titleId);
                }

                // service type used to be important.  now it should be  the  same
                // everywhere. client type is still useful, but not supported here

                ws.AddParameter(ParamType.INPUT, "@ti_service_type", (byte) ServiceTypeEnum.XboxLive);
                ws.AddParameter(ParamType.INPUT, "@ti_client_type", (byte) ClientTypeEnum.Xenon);

                using (WstDataReader r = ws.Execute()) {

                    // for each privilege returned set the value to true

                    while (r.Read()) {
                        byte privilege = r.GetByte(0);
                        this[privilege] = true;
                    }

                    HResult hr = (uint) ws.GetIntParameter("@RETVAL");

                    if (HResult.Failed(hr)) {
                        throw new XblException(hr, "Error calling p_signin_get_user_privileges");
                    }
                }
            }
        }

        /// <summary>
        /// Convert the privileges to a string of privilege numbers
        /// </summary>
        /// <returns>space separated string of integers</returns>
        public override string ToString()
        {
            // generates a space separated string with the privilege numbers

            StringBuilder stringBuilder = new StringBuilder();

            for (int i = PRIVILEGE_MIN; i <= PRIVILEGE_MAX; i++)
            {
                if (! this[(byte) i]) continue;
                if (stringBuilder.Length > 0) stringBuilder.Append(" ");
                stringBuilder.Append(i.ToString());
            }

            return stringBuilder.ToString();
        }

        public bool this[int privilege]
        {
            // get or set individual bits within the privilege set

            get {
                if ((privilege < PRIVILEGE_MIN) || (privilege > PRIVILEGE_MAX)) {
                    throw new XblException(HResult.E_INVALIDARG, "Invalid privilege, {0}", privilege);
                }

                int bits   = privileges[privilege / 8];
                int mask   =  (1 << (privilege % 8));

                return (bits & mask) == mask;
            }

            private set {
                if ((privilege < PRIVILEGE_MIN) || (privilege > PRIVILEGE_MAX)) {
                    throw new XblException(HResult.E_INVALIDARG, "Invalid privilege, {0}", privilege);
                }

                int bits   = privileges[privilege / 8];
                int mask   = (1 << (privilege % 8));

                if (value == true)
                    bits = bits | mask;
                else {
                    bits = bits & ~mask;
                }

                privileges[privilege / 8] = (byte) bits;
            }
        }

        /// <summary>
        /// Convert the object into a byte array.
        /// </summary>
        /// <param name="userPrivileges">The user privilege object</param>
        /// <returns>byte array containing privilege bits</returns>
        public static explicit operator byte[] (UserPrivileges userPrivileges) {
            return (byte[]) userPrivileges.privileges.Clone();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\ArrayUtil.cs ===
using System;

namespace xonline.common.utilities2
{
    public static class ArrayUtil
    {
        public static bool CompareArrays<T>(T[] left, T[] right) where T: IEquatable<T>
        {
            if (left.Length != right.Length)
            {
                return false;
            }

            for (int idx = 0; idx < left.Length; ++idx)
            {
                if (!left[idx].Equals(right[idx]))
                {
                    return false;
                }
            }

            return true;
        }

        public static void SplitArray<T>(T[] orig, int splitIdx, out T[] left, out T[] right)
        {
            if (orig.Length < splitIdx)
            {
                throw new ArgumentException(String.Format(
                        "Splitting an array that's smaller than the split index. Array length is {0}. Split index is {1}.",
                        orig.Length, splitIdx));
            }

            left = new T[splitIdx];
            right = new T[orig.Length - splitIdx];

            Array.ConstrainedCopy(orig, 0, left, 0, left.Length);
            Array.ConstrainedCopy(orig, splitIdx, right, 0, right.Length);
        }

        public static T[] CombineArrays<T>(params T[][] arrays)
        {
            // Iterate once to get the size.
            int size = 0;
            Array.ForEach(arrays, delegate(T[] ts) { size += ts.Length; } );

            // Iterate again to copy.
            T[] combined = new T[size];
            int copied = 0;
            Array.ForEach(arrays, delegate(T[] ts) { ts.CopyTo(combined, copied); copied += ts.Length; } );
            return combined;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\sql\wsclient3.cs ===
/*==========================================================================
 *
 *  wsclient3.cs
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 ***************************************************************************/
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Text;
using System.Xml;

using Microsoft.Webstore.MetaData;
using Microsoft.Webstore.WstClient;

using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.sql.sqlclient;

#if !NOCSPP
[assembly: XomAreaDefinition(XomAreaName.wsttrace)]
#endif

namespace xonline.common.sql.webstore
{
    /// <summary>
    /// The WSTCommandType that determines how the command will be executed.
    ///
    /// Explained as follows:
    ///
    /// WRITEONLY_COMMANDTYPE       -   Use only Write database for the execution.
    /// READTHENWRITE_COMMANDTYPE   -   First use Read database for the execution and, if fail over, use Write database.
    /// READONLY_COMMANDTYPE        -   Use only Read database for the execution.
    /// WRITETHENREAD_COMMANDTYPE   -   First use Write database for the execution and, if fail over, use Read database.
    /// READORWRITE_COMMANDTYPE     -   Use any database (write or read) in the partition and, if fail over, use any other available database.
    ///                                 This balances database access equally.
    /// </summary>
    public enum CmdType : int
    {
        WRITEONLY_COMMANDTYPE       = WstFailoverMode.PrimaryOnly,
        READTHENWRITE_COMMANDTYPE   = WstFailoverMode.SecondaryThenPrimary,
        READONLY_COMMANDTYPE        = WstFailoverMode.SecondaryOnly,
        WRITETHENREAD_COMMANDTYPE   = WstFailoverMode.PrimaryThenSecondary,
        READORWRITE_COMMANDTYPE     = WstFailoverMode.PrimaryOrSecondary,
        WRITE_DEFAULT               = WstFailoverMode.DefaultWrite,
    }

    public enum ParamType : int
    {
        INPUT   = ParameterDirection.Input,
        OUTPUT  = ParameterDirection.Output,
        RETVAL  = ParameterDirection.ReturnValue,
        INOUT   = ParameterDirection.InputOutput
    }


    /// <summary>
    /// WsClient is a thin wrapper around the webstore and SqlClient
    /// classes.   It serves a few functions:
    ///   - according to webstore docs, at least one WstCommand should
    ///     be kept in memory at all times, to track initialization data.
    ///     this class holds one instance for each app used.
    ///   - default values are given in leiu of DbNull (null for strings
    ///     and datetimes, 0 for numeric values).   This saves the consumer
    ///     from having to check IsDbNull any time a column is accessed, and
    ///     the errors resulting from it if they dont check.
    ///   - exceptions thrown as a result of one of the Execute*() functions
    ///     include the stored proc and param values used in the call.
    ///   - stord proc and param values are also show in XomTrace statements.
    ///   - interface is fairly close to WSClient used for 2.1, so transition
    ///     pain from one to another should be minimal.
    /// </summary>
    ///

    public class WSClient : IDisposable
    {
        /// <summary>
        /// for testing only, never use it in server code
        /// </summary>
        public static string SiteName = String.Empty;

        // special values for Partition property
        //
        public const int ANY_PARTITION = -2;
        public const int ALL_PARTITIONS = -1;


        private WstConnection       _cxn        = null;
        private WstCommand          _cmd        = null;
        private WstTransaction      _txn        = null;
        WebstoreDeployment           _dep        = null;
        private int                 _txnNestLevel = 0;
        private bool                _isFirstParam = true;
        private CmdType             _mode = CmdType.WRITE_DEFAULT;
        private string              _simpleDbName = String.Empty;


        private StringBuilder       _paramString      = new StringBuilder();





        // uses CmdType for backwards compat.
        public WSClient(string  applicationName, CmdType cmdType) : this(applicationName, (WstFailoverMode)cmdType) {}

        public WSClient(string applicationName, WstFailoverMode failoverMode)
        {
            _simpleDbName = applicationName;

            // for testing only. In server code the SiteName should be always empty
            applicationName = SiteName + applicationName;

            _cxn = new WstConnection(applicationName);
            _cxn.Open();

            _cmd = _cxn.CreateCommand();
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.WstFailoverMode = failoverMode;

            _dep = GetWebStoreDeployment(applicationName);

            _mode = (CmdType)failoverMode;
        }

        public WstCommand Command
        {
            get { return _cmd; }
        }

        public int SetHashVal(int val)
        {
            if(null != _txn)
            {
                throw new XRLException(HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_182, "Transaction in progress. Cannot change hash value!");
            }

            _cmd.Partition  = WstHash.GetHash(val, _dep.Partitions.Count);

            return _cmd.Partition;
        }

        public int SetHashVal(long val)
        {
            if(null != _txn)
            {
                throw new XRLException(HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_183, "Transaction in progress. Cannot change  hash value!");
            }

            _cmd.Partition = WstHash.GetHash(val, _dep.Partitions.Count);
            return _cmd.Partition;
        }

        public int SetHashVal(ulong val)
        {
            return SetHashVal((long)val);
        }

        public int SetHashVal(Puid val)
        {
            return SetHashVal((long) val);
        }

        public int SetHashVal(string val)
        {
            if(null != _txn)
            {
                throw new XRLException(HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_184, "Transaction in progress. Cannot change  hash value!");
            }

            // NOTE: hashing on string is forced to be case-insensitive!
            _cmd.Partition = WstHash.GetHash(val.ToLower(), _dep.Partitions.Count);
            return _cmd.Partition;
        }

        public int SetHashVal(Guid val)
        {
            _cmd.Partition = WstHash.GetHash(val, _dep.Partitions.Count);
            return _cmd.Partition;
        }

        public int CalcPartition( string val )
        {
            return WstHash.GetHash(val.ToLower(), _dep.Partitions.Count);
        }

        public int CalcPartition(int val)
        {
            return WstHash.GetHash(val, _dep.Partitions.Count);
        }

        public int CalcPartition(long val)
        {
            return WstHash.GetHash(val, _dep.Partitions.Count);
        }

        public int CalcPartition(ulong val)
        {
            return CalcPartition((long)val);
        }

        public int CalcPartition(Guid val)
        {
            return WstHash.GetHash(val, _dep.Partitions.Count);
        }

        public int GetPhysicalPartition(int logicalPartition)
        {
            return _cxn.GetSqlPartition(logicalPartition);
        }

        public int Partition
        {
            get { return _cmd.Partition; }
            set
            {
                if(null != _txn)
                {
                    throw new XRLException(HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_185, "Transaction in progress. Cannot change  hash value!");
                }
                _cmd.Partition = value;
            }
        }

        public int PhysicalPartition
        {
            get { return (_cmd.PartitionType == WstPartitionType.Physical ? _cmd.Partition : _cmd.LastPartitionExecuted); }
            set
            {
                _cmd.PartitionType = WstPartitionType.Physical;
                _cmd.Partition = value;
            }
        }


        public WstPartitionType PartitionType
        {
            get { return _cmd.PartitionType; }
            set { _cmd.PartitionType = value; }
        }

        public int PhysicalPartitions
        {
            get { return _cxn.SqlPartitions.Count; }
        }

        public int LogicalPartitions
        {
            get { return _dep.Partitions.Count; }
        }

        public string SimpleName
        {
            get { return _simpleDbName; }
        }

        public SqlParameterCollection Parameters {
            get { return _cmd.Parameters; }
        }

        /// <summary>
        /// Wrapper for AddParameter junk.  This version assumes INPUT parameter type.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="val">The value of the parameter</param>
        public void AddParameter(string name, Guid val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, Guid val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.UniqueIdentifier;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "='" + val.ToString() + "'");
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Wrapper for AddParameter junk.  This version assumes INPUT parameter type.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="val">The value of the parameter</param>
        public void AddParameter(string name, string val)
        {
            AddParameter(ParamType.INPUT, name, val, val.Length);
        }
        public void AddParameter(ParamType pt, string name, string val)
        {
            AddParameter(pt,name,val,val.Length);
        }
        public void AddParameter(ParamType pt, string name, string val, int len)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.NVarChar;
            param.Value = val;
            param.Size = len;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "='" + val + "'");
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Wrapper for AddParameter junk.  This version assumes INPUT parameter type.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="val">The value of the parameter</param>
        public void AddParameter(string name, byte[] val)
        {
            // The old wsclient wrapper would insert a single byte of 0 if the
            // given byte array was null.  Emulate that behavior here.
            // (use the full param list if you want to actually specify null)
            if ( val == null )
            {
                val = new byte[]{0x0};
            }
            AddParameter(ParamType.INPUT, name, val, (val == null ? 0 : val.Length));
        }
        public void AddParameter(ParamType pt, string name, byte[] val, int len)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Binary;
            param.Value = val;
            param.Size = len;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=0x" + ByteConvert.ToString(val));
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }


        }

        /// <summary>
        /// Overloaded method for ints.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, byte val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, byte val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.TinyInt;
            param.Value = val;

            _cmd.Parameters.Add(param);


            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for shorts.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, short val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, short val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.SmallInt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }


        /// <summary>
        /// Overloaded method for ushorts.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, ushort val)
        {
            AddParameter(ParamType.INPUT, name, (short)val);
        }
        public void AddParameter(ParamType pt, string name, ushort val)
        {
            AddParameter(pt, name, (short)val);
        }


        /// <summary>
        /// Overloaded method for ints.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, int val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, int val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Int;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for uints.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, uint val)
        {
            AddParameter(ParamType.INPUT, name, (int)val);
        }
        public void AddParameter(ParamType pt, string name, uint val)
        {
            AddParameter(pt, name, (int)val);
        }

        /// <summary>
        /// Overloaded method for longs.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, long val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, long val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.BigInt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for ulongs.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, ulong val)
        {
            AddParameter(ParamType.INPUT, name, (long)val);
        }
        public void AddParameter(ParamType pt, string name, ulong val)
        {
            AddParameter(pt, name, (long)val);
        }

        /// <summary>
        /// Overloaded method for doubles.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, double val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, double val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Float;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Overloaded method for decimal.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, decimal val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }

        public void AddParameter(ParamType pt, string name, decimal val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Decimal;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for DateTimes.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, DateTime val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, DateTime val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.DateTime;

            // force value within range of SqlDateTime
            val = (val < (DateTime)SqlDateTime.MinValue) ? (DateTime)SqlDateTime.MinValue : val;
            val = (val > (DateTime)SqlDateTime.MaxValue) ? (DateTime)SqlDateTime.MaxValue : val;

            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Overloaded method for XmlNode.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, XmlNode val)
        {
            AddParameter(ParamType.INPUT, name, val);
        }
        public void AddParameter(ParamType pt, string name, XmlNode val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Xml;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Overloaded method for DataTable.  Always an INPUT parameter
        /// </summary>
        public void AddParameter(string name, string typeName, DataTable val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)ParamType.INPUT;
            param.SqlDbType = SqlDbType.Structured;
            param.TypeName = typeName;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (!_isFirstParam)
            {
                _paramString.Append(", ");
            }
            _paramString.Append(name + "=" + val);
            _isFirstParam = false;
        }

        /// <summary>
        /// Overloaded method for DbType'd Objects.  Unless noted, assumes INPUT parameter.
        /// </summary>
        public void AddParameter(string name, object val, DbType dbType)
        {
            AddParameter(ParamType.INPUT, name, val, dbType);
        }
        public void AddParameter(ParamType pt, string name, object val, DbType dbType)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.DbType = dbType;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParamType.OUTPUT) _paramString.Append(" output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Add object parameter. Useful if you want to pass a DBNull value for example. I
        /// opted to name this differently from 'AddParameter' to avoid conflicts.
        /// </summary>
        /// <param name="name">Name of the parameter.</param>
        /// <param name="val">Value to assign to the parameter.</param>
        public void AddParameterObject(string name, object val)
        {
            AddParameterObject(ParamType.INPUT, name, val);
        }
        public void AddParameterObject(ParamType pt, string name, object val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParamType.RETVAL)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val.ToString());
                if (pt == ParamType.OUTPUT) _paramString.Append(" Output");
                _isFirstParam = false;
            }
        }

        public string GetStringParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_7, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (string) null : (string) param.Value);
        }

        public byte[] GetByteArrayParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_8, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (byte[])null : (byte[])param.Value);
        }

        public byte GetByteParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_9, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (byte) 0 : (byte) param.Value);
        }

        public short GetShortParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_10, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (short) 0 : (short) param.Value);
        }

        public int GetIntParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_11, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (int) 0 : (int)param.Value);
        }

        public long GetLongParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_12, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (long) 0 : (long) param.Value);
        }

        public double GetDoubleParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_13, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? (double) 0.0 : (double) param.Value);
        }

        public Guid GetGuidParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_13, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? Guid.Empty : (Guid)param.Value);
        }

        /// <summary>
        /// If the OUTPUT parameter is null, DateTime.MinValue is returned.
        /// Use IsNullParameter to determine if the DateTime parameter is
        /// actually null.
        /// </summary>
        public DateTime GetDateParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_14, "No parameter found with the name " + name + "!");
            return (Convert.IsDBNull(param.Value) ? DateTime.MinValue : (DateTime) param.Value);
        }

        /// <summary>
        /// Used to determine if an OUTPUT parameter is null.
        /// </summary>
        public bool IsNullParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.COMMON_CODE_85, "No parameter found with the name " + name + "!");
            return Convert.IsDBNull(param.Value);
        }

        public static bool IsDBNull(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.IsDBNull(ordinal);
        }

        public static long GetInt64(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.GetInt64(ordinal);
        }

        public static ulong GetUInt64(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return (ulong) rdr.GetInt64(ordinal);
        }

        public static int GetInt32(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.GetInt32(ordinal);
        }

        public static int? GetNullableInt32(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;
            return rdr.GetInt32(ordinal);
        }

        public static uint GetUInt32(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return (uint) rdr.GetInt32(ordinal);
        }

        public static short GetInt16(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.GetInt16(ordinal);
        }

        public static int? GetNullableInt16(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;
            return rdr.GetInt16(ordinal);
        }

        public static ushort GetUInt16(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return (ushort) rdr.GetInt16(ordinal);
        }

        public static byte GetByte(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.GetByte(ordinal);
        }

        public static byte[] GetBytes(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return GetBytes(rdr, ordinal);
        }

        public static byte[] GetNullableBytes(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;
            return GetBytes(rdr, ordinal);
        }

        private static byte[] GetBytes(WstDataReader rdr, int ordinal)
        {
            // find the number of bytes to be read
            long numBytes = rdr.GetBytes(ordinal, 0, null, 0, 0);

            // allocate the new buffer based on the size
            byte[] b = new byte[numBytes];

            // read the bytes
            rdr.GetBytes(ordinal, 0, b, 0, b.Length);

            return b;
        }

        public static string GetString(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.GetString(ordinal);
        }

        public static string GetNullableString(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;
            return rdr.GetString(ordinal);
        }

        public static DateTime GetDateTime(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.IsDBNull(ordinal) ? DateTime.MinValue : rdr.GetDateTime(ordinal);
        }

        public static DateTime? GetNullableDateTime(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;
            return rdr.GetDateTime(ordinal);
        }

        public static XmlNode GetXml(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);

            XmlDocument document = new XmlDocument();
            document.LoadXml(rdr.GetString(ordinal));
            return document.FirstChild;
        }

        public static XmlNode GetNullableXml(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            if (rdr.IsDBNull(ordinal)) return null;

            XmlDocument document = new XmlDocument();
            document.LoadXml(rdr.GetString(ordinal));
            return document.FirstChild;
        }

        public static Guid GetGuid(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.IsDBNull(ordinal) ? Guid.Empty : rdr.GetSqlGuid(ordinal).Value;
        }

        public static bool GetBoolean(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return rdr.IsDBNull(ordinal) ? false : rdr.GetBoolean(ordinal);
        }

        public static Puid GetPuid(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return (Puid) rdr.GetInt64(ordinal);
        }

        public static HResult GetHResult(WstDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);
            return (HResult) (uint) rdr.GetInt32(ordinal);
        }

        public static int GetHashPartition(byte[] val, string wstApp)
        {
            return WstHash.GetHash(BitConverter.ToInt64(val, 0), GetPartitionCount(wstApp));
        }

        public static int GetHashPartition(string val, string wstApp)
        {
            return WstHash.GetHash(val.ToLower(), GetPartitionCount(wstApp));
        }

        public static int GetHashPartition(ulong val, string wstApp)
        {
            return GetHashPartition((long)val, wstApp);
        }

        public static int GetHashPartition(long val, string wstApp)
        {
            return WstHash.GetHash(val, GetPartitionCount(wstApp));
        }

        public static int GetPartitionCount(string wstApp)
        {
           WebstoreDeployment dep = GetWebStoreDeployment(wstApp);
           return dep.Partitions.Count;
        }

        public static int GetPhysicalPartitionCount(string wstApp)
        {
           WebstoreDeployment dep = GetWebStoreDeployment(wstApp);
           return dep.SQLFailSafeSets.Count;
        }

        public static WebstoreDeployment GetWebStoreDeployment(string applicationName)
        {
            WebstoreDeployment dep = null;

            string szSiteName = null;
            string szApplicationNameOnly = applicationName;
            string [] arrSiteAndApplication = applicationName.Split(new Char [] {'\\'});

            if (arrSiteAndApplication.Length > 1)
            {
                szSiteName = arrSiteAndApplication[0];
                szApplicationNameOnly = arrSiteAndApplication[1];
            }

            if (null != szSiteName && null != WebstoreMetaData.Instance.Sites[szSiteName])
            {
                dep = WebstoreMetaData.Instance.Sites[szSiteName].Deployments[szApplicationNameOnly];
            }
            else
            {
                dep = WebstoreMetaData.Instance.DefaultConfig.Deployments[szApplicationNameOnly];
            }

            return dep;
        }

        public static IEnumerable<int> GetPhysicalPartitions(string applicationName)
        {
            WebstoreDeployment wstDep = GetWebStoreDeployment(applicationName);
            foreach (WebstoreSQLFss sqlFss in wstDep.SQLFailSafeSets)
            {
                if ( sqlFss.Status == WebstoreFssStatus.NotDeployed )
                    continue;

                yield return sqlFss.FssId;
            }
        }

        public string GetCallSignature()
        {
            return StoredProc + " " + _paramString.ToString();
        }

        public void ClearParameters()
        {
            _isFirstParam = true;
            _cmd        = _cxn.CreateCommand();
            _cmd.WstFailoverMode = (WstFailoverMode)_mode;
            _paramString = new StringBuilder("");
        }

        /// <summary>
        /// The string SQL command to be executed.  In OLE DB this looks something
        /// like this: "{ call p_MySproc(?, ?) }".
        /// </summary>
        public string CommandText
        {
            get { return _cmd.CommandText; }
            set { _cmd.CommandText = value; }
        }


        /// <summary>
        /// The stored proc to be executed.
        /// </summary>
        public string StoredProc
        {
            get { return CommandText; }
            set { _cmd.CommandType = CommandType.StoredProcedure;  CommandText = value; }
        }

        /// <summary>
        /// The sql statement to be executed.
        /// </summary>
        public string CommandSql
        {
            get { return CommandText; }
            set { _cmd.CommandType = CommandType.Text;  CommandText = value; }
        }

        /// <summary>
        /// Used to start a transaction.
        /// </summary>
        public void BeginTransaction()
        {
            if(null != _txn || _txnNestLevel > 0)
            {
                throw new Exception("Transaction already started!");
            }

            _txn = _cxn.BeginTransaction();
            _txnNestLevel++;
        }

        /// <summary>
        /// Used to commit a transaction.
        /// </summary>
        public void CommitTransaction()
        {
            if(null == _txn)
            {
                throw new Exception("No transaction started!");
            }

            _txn.Commit();
            _txnNestLevel--;
            if (0 != _txnNestLevel)
            {
                throw new Exception("Transaction count should be 0!");
            }
            _txn = null;
        }

        /// <summary>
        /// Used to rollback a transaction.
        /// </summary>
        public void RollbackTransaction()
        {
            if(null == _txn)
            {
                throw new Exception("No transaction started!");
            }

            _txn.Rollback();
            _txnNestLevel--;
            if (0 != _txnNestLevel)
            {
                throw new Exception("Transaction count should be 0!");
            }
            _txn = null;
        }

        /// <summary>
        /// Used to Execute the given string on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public WstDataReader Execute(string cmd)
        {
            _cmd.CommandText = cmd;
            if (_txn != null)
            {
                _cmd.Transaction = _txn;
            }
            return Execute();
        }


        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public WstDataReader Execute()
        {
#if !NOCSPP
            Xom.Trace(XomAreaName.wsttrace, LogLevel.L_LOW, "Executing " + StoredProc + " " + _paramString.ToString());
#endif
            if (_txn != null)
            {
                _cmd.Transaction = _txn;
            }

            try {
                SprocFailure.HandleBehaviorInjection(_simpleDbName, StoredProc);
                return _cmd.ExecuteReader();
            }

            catch (Exception e) {
                HResult hr = SqlClient.GetHResult(e);

                throw new XRLException(
                    hr, GetEventId(hr), e,
                    "Error executing {0}\r\nParameters {1}", CommandText, _paramString.ToString()
                );
            }
        }


        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound, without returning a resultset.
        /// </summary>
        public int ExecuteNonQuery(string cmd)
        {
            this.CommandText = cmd;
            return this.ExecuteNonQuery();
        }

        public int ExecuteNonQuery()
        {
#if DEBUG && !NOCSPP
            Xom.Trace(XomAreaName.wsttrace, LogLevel.L_LOW, "Executing " + StoredProc + " " + _paramString.ToString() );
#endif
            try
            {
                if (_txn != null)
                {
                    _cmd.Transaction = _txn;
                }
                SprocFailure.HandleBehaviorInjection(_simpleDbName, StoredProc);
                return _cmd.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                HResult hr = SqlClient.GetHResult(e);

                throw new XRLException(
                    hr, GetEventId(hr), e,
                    "Error executing {0}\r\nParameters {1}", CommandText, _paramString.ToString()
                );
            }
        }


        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound, returning the first column of the first row
        /// </summary>
        public object ExecuteScalar(string cmd)
        {
            this.CommandText = cmd;
            return this.ExecuteScalar();
        }

        public object ExecuteScalar()
        {
#if !NOCSPP
            Xom.Trace(XomAreaName.wsttrace, LogLevel.L_LOW, "Executing " + StoredProc + " " + _paramString.ToString());
#endif
            if (_txn != null)
            {
                _cmd.Transaction = _txn;
            }

            try {
                SprocFailure.HandleBehaviorInjection(_simpleDbName, StoredProc);
                return _cmd.ExecuteScalar();
            }
            catch (Exception e) {
                HResult hr = SqlClient.GetHResult(e);

                throw new XRLException(
                    hr, GetEventId(hr), e,
                    "Error executing {0}\r\nParameters {1}", CommandText, _paramString.ToString()
                );
            }
        }

        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound, without returning a resultset.
        /// </summary>
        public XmlReader ExecuteXmlReader(string cmd)
        {
            this.CommandText = cmd;
            return this.ExecuteXmlReader();
        }

        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public XmlReader ExecuteXmlReader()
        {
#if !NOCSPP
            Xom.Trace(XomAreaName.wsttrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString());
#endif
            if (_txn != null)
            {
                _cmd.Transaction = _txn;
            }

            try {
                SprocFailure.HandleBehaviorInjection(_simpleDbName, StoredProc);
                return _cmd.ExecuteXmlReader();
            }
            catch (Exception e) {
                HResult hr = SqlClient.GetHResult(e);

                throw new XRLException(
                    hr, GetEventId(hr), e,
                    "Error executing {0}\r\nParameters {1}", CommandText, _paramString.ToString()
                );
            }
        }

        private XEvent.Id GetEventId(HResult hr)
        {
            switch (hr)
            {
                case HResult.XONLINE_E_DATABASE_TIMEOUT  :
                    return XEvent.Id.WEBSTORE_EXECUTE_TIMEOUT_ERROR;
                case HResult.XONLINE_E_DATABASE_DEADLOCK :
                    return XEvent.Id.WEBSTORE_EXECUTE_DEADLOCK_ERROR;

                default:
                    return XEvent.Id.WEBSTORE_EXECUTE_ERROR;
            }
        }

        public void Close()
        {
            Dispose();
        }

        public void Dispose()
        {
            if (_cmd != null) _cmd.Dispose();
            if (_cxn != null) _cxn.Dispose();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\sql\sqlclient.cs ===
/*==========================================================================
 *
 *  sqlclient.cs
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 ***************************************************************************/

using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;

[assembly: XomAreaDefinition(XomAreaName.sqltrace)]

namespace xonline.common.sql.sqlclient
{
    public class SqlClient : IDisposable
    {
        private StringBuilder _paramString = new StringBuilder();
        private bool _isFirstParam = true;
        private bool _closeUnderlyingConnection = true;
        private SqlCommand _cmd;


        // Allow initialization for typed interfaces such as NPDB
        public SqlClient(IInterfaceInfo iface)
        {
            Initialize(BuildConnectionString(iface));
        }

        // Allow initialization for typed virtualized interfaces such as CatalogDB
        public SqlClient(IVirtualInterfaceInfo viface)
        {
            Initialize(BuildConnectionString(viface));
        }

        // Assume the interface in question is a singleton, such as NPDB
        public SqlClient(string iface) : this(iface, false)
        {
        }

        // Find the referenced interface or virtualInterface
        public SqlClient(string iface, bool isVirtual)
        {
            if (iface == Interface.npdb)
            {
                // Special case for npdb connections, because it isn't required to
                // load the config from npdb in order to figure out how to talk to npdb
                Initialize(Config.NpdbConnectionString);
            }
            else if (isVirtual)
            {
                IVirtualInterfaceInfo iVirtualInterfaceInfo = null;
                iVirtualInterfaceInfo = Config.GetVirtualInterface(iface);
                Initialize(BuildConnectionString(iVirtualInterfaceInfo));
            }

            else
            {
                IInterfaceInfo iInterfaceInfo = null;
                iInterfaceInfo = Config.GetSingleInterface(iface);
                Initialize(BuildConnectionString(iInterfaceInfo));
            }
        }

        // Lookup based partitioning
        public SqlClient(string iface, uint titleid, uint bucket)
        {
            IBucketServer bucketServer = Config.GetTitleBucketServer(iface, titleid, bucket);

            if (null == bucketServer)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.MC_BAD_CONFIG_DATA_5,
                        "SqlClient.SqlClient: BucketServer not found for " + iface.ToString() + " titleid " + titleid + " bucket " + bucket);
            }

            IInterfaceInfo iInterfaceInfo = bucketServer.CurrentServer;

            Initialize(BuildConnectionString(iInterfaceInfo));
        }


        private string Initialize(string cxnStr)
        {
            SqlConnection cxn;

            cxn = new SqlConnection(cxnStr);
            cxn.Open();

            _cmd = new SqlCommand("", cxn);

            // Propagate the timeout value from NPDB to the command
            SqlConnectionStringBuilder  scsb = new SqlConnectionStringBuilder(cxnStr);
            _cmd.CommandTimeout = scsb.ConnectTimeout;

            return cxnStr;
        }

        public string StoredProc
        {
            get { return _cmd.CommandText; }
            set
            {
                _cmd.CommandText = value;
                _cmd.CommandType = CommandType.StoredProcedure;
            }
        }

        public SqlCommand Command
        {
            get { return _cmd; }
            set { _cmd = value; }
        }

        /// <summary>
        /// Wrapper for AddParameter junk.  This version assumes Input parameter type.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="val">The value of the parameter</param>
        public void AddParameter(string name, string val)
        {
            AddParameter(ParameterDirection.Input, name, val, val.Length);
        }
        public void AddParameter(ParameterDirection pt, string name, string val, int len)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.NVarChar;
            param.Value = val;
            param.Size = len;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "='" + val + "'");
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Wrapper for AddParameter junk.  This version assumes Input parameter type.
        /// </summary>
        /// <param name="name">The name of the parameter</param>
        /// <param name="val">The value of the parameter</param>
        public void AddParameter(string name, byte[] val)
        {
            AddParameter(ParameterDirection.Input, name, val, (val == null ? 0 : val.Length));
        }
        public void AddParameter(ParameterDirection pt, string name, byte[] val, int len)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Binary;
            param.Value = val;
            param.Size = len;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=0x" + ByteConvert.ToString(val));
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }


        }

        /// <summary>
        /// Overloaded method for ints.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, byte val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, byte val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.TinyInt;
            param.Value = val;

            _cmd.Parameters.Add(param);


            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for shorts.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, short val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, short val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.SmallInt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }


        /// <summary>
        /// Overloaded method for ushorts.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, ushort val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, ushort val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.SmallInt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }


        /// <summary>
        /// Overloaded method for ints.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, int val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, int val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Int;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for uints.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, uint val)
        {
            AddParameter(ParameterDirection.Input, name, (int)val);
        }
        public void AddParameter(ParameterDirection pt, string name, uint val)
        {
            AddParameter(pt, name, (int)val);
        }

        /// <summary>
        /// Overloaded method for longs.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, long val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, long val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.BigInt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for ulongs.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, ulong val)
        {
            AddParameter(ParameterDirection.Input, name, (long)val);
        }
        public void AddParameter(ParameterDirection pt, string name, ulong val)
        {
            AddParameter(pt, name, (long)val);
        }

        /// </summary>
        public void AddParameter(string name, DateTime val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, DateTime val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.DateTime;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }

        }

        /// <summary>
        /// Overloaded method for Guids.  Unless noted, assumes Input parameter.
        /// </summary>
        /// <param name="name">Name of the parameter.</param>
        /// <param name="val">Value to assign to the parameter.</param>
        public void AddParameter(string name, Guid val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, Guid val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.UniqueIdentifier;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val.ToString());
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Overloaded method for doubles.  Unless noted, assumes Input parameter.
        /// </summary>
        public void AddParameter(string name, double val)
        {
            AddParameter(ParameterDirection.Input, name, val);
        }
        public void AddParameter(ParameterDirection pt, string name, double val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.SqlDbType = SqlDbType.Float;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val);
                if (pt == ParameterDirection.Output) _paramString.Append(" output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Overloaded method for DbType'd Objects.  Unless noted, assumes Input parameter.
        /// </summary>
        /// <param name="name">Name of the parameter.</param>
        /// <param name="val">Value to assign to the parameter.</param>
        /// <param name="dbType">The database type of the parameter</param>
        public void AddParameter(string name, object val, DbType dbType)
        {
            AddParameter(ParameterDirection.Input, name, val, dbType);
        }
        public void AddParameter(ParameterDirection pt, string name, object val, DbType dbType)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = (ParameterDirection)pt;
            param.DbType = dbType;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val.ToString());
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }
        }

        /// <summary>
        /// Add object parameter. Useful if you want to pass a DBNull value for example. I
        /// opted to name this differently from 'AddParameter' to avoid conflicts.
        /// </summary>
        /// <param name="name">Name of the parameter.</param>
        /// <param name="val">Value to assign to the parameter.</param>
        public void AddParameterObject(string name, object val)
        {
            AddParameterObject(ParameterDirection.Input, name, val);
        }
        public void AddParameterObject(ParameterDirection pt, string name, object val)
        {
            SqlParameter param = new SqlParameter();
            param.ParameterName = name;
            param.Direction = pt;
            param.Value = val;

            _cmd.Parameters.Add(param);

            if (pt != ParameterDirection.ReturnValue)
            {
                if (!_isFirstParam) _paramString.Append(", ");
                _paramString.Append(name + "=" + val.ToString());
                if (pt == ParameterDirection.Output) _paramString.Append(" Output");
                _isFirstParam = false;
            }
        }

        public string GetStringParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE, "No parameter found with the name " + name + "!");
            return (string)(param.Value == DBNull.Value ? null : param.Value);
        }

        public byte[] GetByteArrayParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_1, "No parameter found with the name " + name + "!");
            return (byte[])(param.Value == DBNull.Value ? null : param.Value);
        }

        public byte GetByteParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_2, "No parameter found with the name " + name + "!");
            return (byte)(param.Value == DBNull.Value ? 0 : param.Value);
        }

        public short GetShortParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_3, "No parameter found with the name " + name + "!");
            return (short)(param.Value == DBNull.Value ? 0 : param.Value);
        }

        public int GetIntParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_4, "No parameter found with the name " + name + "!");
            return (int)(param.Value == DBNull.Value ? 0 : param.Value);
        }

        public long GetLongParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_5, "No parameter found with the name " + name + "!");
            return (long)(param.Value == DBNull.Value ? 0 : param.Value);
        }

        public DateTime GetDateParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_6, "No parameter found with the name " + name + "!");
            return (DateTime)(param.Value == DBNull.Value ? null : param.Value);
        }

        public Decimal GetDecimalParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_15, "No parameter found with the name " + name + "!");
            return (Decimal)(param.Value == DBNull.Value ? null : param.Value);
        }

        public Guid GetGuidParameter(string name)
        {
            SqlParameter param = _cmd.Parameters[name];
            if (param == null) throw new XRLException(HResult.XONLINE_E_DATABASE_PARAMETER_NOT_FOUND, XEvent.Id.MC_BAD_CODE_16, "No parameter found with the name " + name + "!");
            return (Guid)(param.Value == DBNull.Value ? null : param.Value);
        }

        public static byte[] GetBytes(SqlDataReader rdr, string columnName)
        {
            int ordinal = rdr.GetOrdinal(columnName);

            // find the number of bytes to be read
            long numBytes = rdr.GetBytes(ordinal, 0, null, 0, 0);

            // allocate the new buffer based on the size
            byte[] b = new byte[numBytes];

            // read the bytes
            rdr.GetBytes(ordinal, 0, b, 0, b.Length);

            return b;
        }

        /// <summary>
        /// Used to Execute the given string on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public SqlDataReader Execute(string cmd)
        {
            _cmd.CommandText = cmd;
            return Execute();
        }


        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public SqlDataReader Execute()
        {
#if !NOCSPP
            Xom.Trace(XomAreaName.sqltrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString());
#endif
            try
            {
                SprocFailure.HandleBehaviorInjection(_cmd.Connection.Database, StoredProc);
                return _cmd.ExecuteReader();
            }
            catch(Exception e)
            {
                string msg = (e is SqlException ? BuildSqlExceptionMessage((SqlException)e) : e.Message);
                msg += "\r\nConnection string: " + _cmd.Connection.ConnectionString;

                throw new XRLException(
                    GetHResult(e), XEvent.Id.SQL_EXECUTE_READER,
                    "Error executing " +  _cmd.CommandText + " " + _paramString.ToString() + "\r\n" + msg, e
                );
            }
        }

        /// <summary>
        /// Used to Execute the property Cmd to which the client is bound with specific CommandBehaviors
        /// </summary>
        /// <remarks>
        /// Specifying CommandBehavior.CloseConnection as one of the passed behaviors will alter the way that the
        /// SqlClient handles its Close() and Dispose() functionality. If CommandBehavior.CloseConnection is specified,
        /// it is expected that the caller is responsible for closing the connection by calling the Close method of the
        /// returned SqlDataReader. This allows for the separation of the code that is performing the query from the code
        /// that is processing the results, allowing the data processing code to close the connection (through SqlDataReader.Close())
        /// when it is done with it. See the code below for an example of how this is used.
        /// </remarks>
        /// <example>
        /// class CultureDataAccess
        /// {
        ///     public static SqlDataReader GetSupportedCultures()
        ///     {
        ///         SqlDataReader reader = null;
        ///         SqlClient client = new SqlClient(iface);
        ///
        ///         using (client)
        ///         {
        ///             client.StoredProc = "p_culture_GetSupportedCultures";
        ///             reader = client.Execute(CommandBehavior.CloseConnection | CommandBehavior.SingleResult);
        ///         }
        ///
        ///         return reader;
        ///     }
        /// }
        ///
        /// class SupportedCultures
        /// {
        ///     public Hashtable Cultures = null;
        ///     private void PopulateCultures()
        ///     {
        ///         Hashtable newCultures = new Hashtable();
        ///
        ///         SqlDataReader reader = CultureDataAccess.GetSupportedCultures();
        ///         using(reader)
        ///         {
        ///             int userLanguageOrdinal = reader.GetOrdinal("UserLanguage");
        ///             int cultureOrdinal = reader.GetOrdinal("CultureName");
        ///
        ///             while (reader.Read())
        ///             {
        ///                 newCultures.Add((string) reader.GetValue(userLanguageOrdinal), (string) reader.GetValue(cultureOrdinal));
        ///             }
        ///         }
        ///         cultures = newCultures;
        ///     }
        /// }
        /// </example>
        /// <param name="behavior">Provides a description of the results of the query and its effect on the database.</param>
        /// <returns>A SqlDataReader containing the results of the query.</returns>
        public SqlDataReader Execute(CommandBehavior behavior)
        {
#if !NOCSPP
            Xom.Trace(XomAreaName.sqltrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString());
#endif
            SqlDataReader reader = null;

            try
            {
                SprocFailure.HandleBehaviorInjection(_cmd.Connection.Database, StoredProc);
                reader = _cmd.ExecuteReader(behavior);
            }
            catch(Exception e)
            {
                string msg = (e is SqlException ? BuildSqlExceptionMessage((SqlException)e) : e.Message);
                msg += "\r\nConnection string: " + _cmd.Connection.ConnectionString;

                throw new XRLException(GetHResult(e),
                    XEvent.Id.SQL_EXECUTE_READER_BEHAVIOR,
                    "Error executing " +  _cmd.CommandText + " " + _paramString.ToString() + "\r\n" + msg, e
                );
            }

            if ((behavior & CommandBehavior.CloseConnection) == CommandBehavior.CloseConnection)
            {
                _closeUnderlyingConnection = false;
            }

            return reader;

        }
        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound, without returning a resultset.
        /// </summary>
        public void ExecuteNonQuery(string cmd)
        {
            _cmd.CommandText = cmd;
            ExecuteNonQuery();
        }

        public void ExecuteNonQuery()
        {
#if DEBUG && !NOCSPP
            Xom.Trace(XomAreaName.sqltrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString() );
#endif
            try
            {
                SprocFailure.HandleBehaviorInjection(_cmd.Connection.Database, StoredProc);
                _cmd.ExecuteNonQuery();
            }
            catch(Exception e)
            {
                string msg = (e is SqlException ? BuildSqlExceptionMessage((SqlException)e) : e.Message);
                msg += "\r\nConnection string: " + _cmd.Connection.ConnectionString;

                throw new XRLException(
                    GetHResult(e), XEvent.Id.SQL_EXECUTE_NON_QUERY,
                    "Error executing " +  _cmd.CommandText + " " + _paramString.ToString() + "\r\n" + msg, e
                );
            }
        }


        public object ExecuteScalar()
        {
#if DEBUG && !NOCSPP
            Xom.Trace(XomAreaName.sqltrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString() );
#endif
            try
            {
                SprocFailure.HandleBehaviorInjection(_cmd.Connection.Database, StoredProc);
                return _cmd.ExecuteScalar();
            }
            catch(Exception e)
            {
                string msg = (e is SqlException ? BuildSqlExceptionMessage((SqlException)e) : e.Message);

                throw new XRLException(
                    GetHResult(e), XEvent.Id.SQL_EXECUTE_SCALAR,
                    "Error executing " +  _cmd.CommandText + " " + _paramString.ToString() + "\r\n" + msg, e
                );
            }
        }

        /// <summary>
        /// Used to Execute the property Cmd on the WebStore hash bucket
        /// to which the client is bound.
        /// </summary>
        public XmlReader ExecuteXmlReader()
        {
#if DEBUG && !NOCSPP
            Xom.Trace(XomAreaName.sqltrace, LogLevel.L_LOW, "Executing " + _cmd.CommandText + " " + _paramString.ToString());
#endif
            try
            {
                SprocFailure.HandleBehaviorInjection(_cmd.Connection.Database, StoredProc);
                return _cmd.ExecuteXmlReader();
            }
            catch(Exception e)
            {
                string msg = (e is SqlException ? BuildSqlExceptionMessage((SqlException)e) : e.Message);
                msg += "\r\nConnection string: " + _cmd.Connection.ConnectionString;

                throw new XRLException(
                    GetHResult(e), XEvent.Id.SQL_EXECUTE_READER,
                    "Error executing " +  _cmd.CommandText + " " + _paramString.ToString() + "\r\n" + msg, e
                );
            }
        }



        public void BeginTransaction()
        {
            if (_cmd.Transaction != null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_74,
                    "Attempted to create a transaction when one is already pending!"
                );
            }

            _cmd.Transaction = _cmd.Connection.BeginTransaction();
        }

        public void CommitTransaction()
        {
            if (_cmd.Transaction == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_75,
                    "Attempting to commit a non-existent transaction!"
                );
            }

            _cmd.Transaction.Commit();
            _cmd.Transaction = null;
        }

        public void RollbackTransaction()
        {
            if (_cmd.Transaction == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_DATABASE_TRANSACTION_ERROR, XEvent.Id.COMMON_CODE_76,
                    "Attempting to roll back a non-existent transaction!"
                );
            }

            _cmd.Transaction.Rollback();
            _cmd.Transaction = null;
        }


        public void ClearParameters()
        {
            _paramString = new StringBuilder();
            _cmd.Parameters.Clear();
        }


        public void Close()
        {
            if (_closeUnderlyingConnection)
            {
                _cmd.Connection.Close();
            }
        }

        public void Dispose()
        {
            if (_closeUnderlyingConnection)
            {
                _cmd.Connection.Dispose();
            }
        }



        private string BuildConnectionString(IInterfaceInfo iInterfaceInfo)
        {
            if (null == iInterfaceInfo)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.MC_BAD_CONFIG_DATA_6,
                        "SqlClient.BuildConnectionString: Interface provided is null!");
            }

            string connectString;

            try
            {
                connectString = iInterfaceInfo.SqlConnectionString;
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.MC_BAD_CONFIG_DATA_7,
                    "SqlClient.BuildConnectionString: Can't get connection string", ex);
            }

            return connectString;
        }

        private string BuildConnectionString(IVirtualInterfaceInfo viInterfaceInfo)
        {
            if (null == viInterfaceInfo)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.MC_BAD_CONFIG_DATA_6,
                        "SqlClient.BuildConnectionString: VirtualInterface provided is null!");
            }

            string connectString;

            try
            {
                connectString = viInterfaceInfo.SqlConnectionString;
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.MC_BAD_CONFIG_DATA_7,
                    "SqlClient.BuildConnectionString: Can't get connection string", ex);
            }

            return connectString;
        }


        private static string BuildSqlExceptionMessage(SqlException e)
        {
            StringBuilder bldr = new StringBuilder();
            bldr.Append(e.Message + "\r\n\r\n");

            foreach (SqlError serr in e.Errors)
            {
                bldr.Append(serr.ToString() + "\r\n");
            }

            return bldr.ToString();
        }

        public static HResult GetHResult(Exception e)
        {
            if (e is SqlException)
            {
                // to lower up front to ease comparisons
                string message = e.Message.ToLower();

                if (message.Contains("timeout"))
                    return HResult.XONLINE_E_DATABASE_TIMEOUT;
                else if (message.Contains("deadlock"))
                    return HResult.XONLINE_E_DATABASE_DEADLOCK;
                else if (message.Contains("primary key constraint") || message.Contains("unique key constraint"))
                    return HResult.XONLINE_E_DATABASE_DUPLICATE_KEY;
                else if (message.Contains("reference constraint") || message.Contains("foreign key constraint")) {
                    return HResult.XONLINE_E_DATABASE_FOREIGN_KEY_VIOLATION;
                }
            }

            return HResult.XONLINE_E_DATABASE_EXECUTE_ERROR;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\ByteOrder.cs ===
using System;
using System.Runtime.InteropServices;
using System.Net;

namespace xonline.common.utilities2
{

[ComVisible(false)]
public static class ByteOrder
{
    public static Int16 Revert(Int16 value)
    {
        return (Int16)Revert((UInt16)value);
    }

    public static UInt16 Revert(UInt16 value)
    {
        return (UInt16)(
            (0x00FF & (value >> 8)) |
            (0xFF00 & (value << 8))
            );
    }

    public static Int32 Revert(Int32 value)
    {
        return (Int32)Revert((UInt32)value);
    }

    public static UInt32 Revert(UInt32 value)
    {
        return (
            (0x000000FF & (value >> 24)) |
            (0x0000FF00 & (value >> 8)) |
            (0x00FF0000 & (value << 8)) |
            (0xFF000000 & (value << 24))
            );
    }

    public static Int64 Revert(Int64 value)
    {
        return (Int64)Revert((UInt64)value);
    }

    public static UInt64 Revert(UInt64 value)
    {
        return (
            (0x00000000000000FF & (value >> 56)) |
            (0x000000000000FF00 & (value >> 40)) |
            (0x0000000000FF0000 & (value >> 24)) |
            (0x00000000FF000000 & (value >> 8)) |
            (0x000000FF00000000 & (value << 8)) |
            (0x0000FF0000000000 & (value << 24)) |
            (0x00FF000000000000 & (value << 40)) |
            (0xFF00000000000000 & (value << 56))
            );
    }

    public static float Revert(float value)
    {
        byte[] bytes = BitConverter.GetBytes(value);

        Array.Reverse(bytes);

        return BitConverter.ToSingle(bytes, 0);
    }

    public static double Revert(double value)
    {
        byte[] bytes = BitConverter.GetBytes(value);

        Array.Reverse(bytes);

        return BitConverter.ToDouble(bytes, 0);
    }

    public static Guid Revert(Guid value)
    {
        return new Guid(RevertGuidBytesInline(value.ToByteArray()));
    }

    public static byte[] RevertGuidBytesInline(byte[] bytes)
    {
        if (bytes == null)
        {
            return null;
        }

        if (bytes.Length != 16)
        {
            throw new ArgumentException("Cannot revert Guid byte array, length '" + bytes.Length + "' invalid, must be 16");
        }

        Array.Reverse(bytes, 0, 4);
        Array.Reverse(bytes, 4, 2);
        Array.Reverse(bytes, 6, 2);

        return bytes;
    }

    public static UInt32 IpStringToUInt32(string ip)
    {
        return IpAddressToUInt32(IPAddress.Parse(ip));
    }

    public static UInt32 IpAddressToUInt32(IPAddress ip)
    {
        byte[] addr = ip.GetAddressBytes();
        return 
            ((UInt32)addr[0]) + 
            ((UInt32)addr[1] << 8) + 
            ((UInt32)addr[2] << 16) + 
            ((UInt32)addr[3] << 24);
    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\Blob.cs ===
// 
// Blob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Blob class
// Xbox Online Service
//
// Represents a byte array, but provides lots of helpers for dealing with it, including 
// equality, to/from string, implicit casting, hashcodes, xml serialization, and more.

using System;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace xonline.common.utilities2
{
    // ------------------------------------------------------------------------------
    // class Blob
    //
    // This is a lightweight wrapper around byte[].  It provides lots of nice functions 
    // and helpers, but DOES NOT DEEP CLONE the original array or blob. So if you make a 
    // blob around a byte array and then change the byte array, your blob will change.  
    // Ditto if you create a new blob from another blob.  
    // ------------------------------------------------------------------------------
    public struct Blob : IEquatable<Blob>, IComparable<Blob>, IXmlSerializable
    {
        private byte[] _value;

        public static Blob Empty
        {
            get { return new Blob(); }
        }

        private Blob(byte[] value)
        {
            _value = value;
        }

        private Blob(string s)
        {
            if (String.IsNullOrEmpty(s))
                throw new ArgumentException("s cannot be null");

            if (s.StartsWith("0x"))
                s = s.Substring(2);

            if ((s.Length % 2) == 1)
                s = "0" + s;

            _value = new byte[s.Length / 2];
            for (int i = 0; i < s.Length / 2; i++)
            {
                _value[i] = (byte)((unhex(s[i*2]) << 4) + unhex(s[i*2+1]));
            }
        }

        private static byte unhex(char c)
        {
            if (c >= '0' && c <= '9')
                return (byte)(c - '0');
            else if (c >= 'a' && c <= 'f')
                return (byte)(c - 'a' + 10);
            else if (c >= 'A' && c <= 'F')
                return (byte)(c - 'A' + 10);
            throw new FormatException("Invalid hex character: " + c);
        }

        public int Length
        {
            get 
            { 
                return (_value != null) ? _value.Length : 0; 
            }
        }

        public byte this[int i]
        {
            get { return _value[i]; }
            set { _value[i] = value; }
        }

        public override int GetHashCode()
        {
            if (_value == null)
                return 0;

            int hashCode = _value[0];
            for(int i = 1; i < _value.Length; i++)
            {
                // 1718205583 is prime
                hashCode = hashCode * 1718205583 + _value[i];
            }
            return hashCode;
        }

        public static implicit operator Blob(byte[] value)
        {
            return new Blob(value);
        }

        public static implicit operator byte[](Blob blob)
        {
            return blob._value;
        }

        public static bool operator ==(Blob b1, Blob b2)
        {
            return b1.Equals(b2);
        }

        public static bool operator !=(Blob b1, Blob b2)
        {
            return !b1.Equals(b2);
        }

        public override bool Equals(object o)
        {
            if (o == null) 
                return base.Equals(o);
            if (!(o is Blob))
                throw new InvalidCastException("The object argument is not a Blob object");
            return Equals((Blob)o);
        }

        public bool Equals(Blob other)
        {
            return CompareTo(other) == 0;
        }

        public int CompareTo(Blob other)
        {
            if (this.Length == 0 && other.Length == 0)
            {
                return 0;
            }
            else if (this.Length == 0)
            {
                return -1;
            }
            else if (other.Length == 0)
            {
                return 1;
            }
            else if (this.Length != other.Length)
            {
                // bit odd, but what else to do?
                return this.Length - other.Length;
            }
            else
            {
                for (int i = 0; i < this.Length; i++)
                {
                    if (this[i] != other[i])
                    {
                        return this[i] - other[i];
                    }
                }
                return 0;
            }
        }

        public static Blob Parse(string s)
        {
            return new Blob(s);
        }

        public static bool TryParse(string s, out Blob blob)
        {
            try
            {
                blob = Blob.Parse(s);
                return true;
            }
            catch
            {
                blob = new Blob();
                return false;
            }
        }           

        public void ReadXml(XmlReader reader)
        {
            string s = reader.ReadElementContentAsString();

        }

        public void WriteXml(XmlWriter writer)
        {
            writer.WriteValue(_value.ToString());
        }

        public XmlSchema GetSchema()
        {
            return (null);
        }

        private readonly static char[] _hexCharLookup = new char[] { 
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' 
        };

        public override string ToString()
        {
            if (_value == null)
                return String.Empty;

            char[] charstr = new char[_value.Length * 2];
            int charPos = 0;
            for (int i = 0; i < _value.Length; i++)
            {
                byte v = _value[i];
                charstr[charPos++] = _hexCharLookup[(v & 0xF0) >> 4];
                charstr[charPos++] = _hexCharLookup[(v & 0x0F)];
            }
            return new string(charstr);
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\CollectionUtil.cs ===
using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;

namespace xonline.common.utilities2
{

[ComVisible(false)]
public class CollectionUtil
{
    public static string ToString(ICollection items)
    {
        if (items == null)
        {
            return "<null>";
        }

        StringBuilder sb = new StringBuilder();
        sb.Append("{");
        foreach (Object o in items)
        {
            sb.Append(o.ToString());
            sb.Append(",");
        }
        // pop the last "," off the string, but only if there
        // was at least one element in the collection
        if (items.Count > 0)
        {
            sb.Remove(sb.Length-1, 1);
        }
        sb.Append("}");
        return sb.ToString();
    }

    // note: do not use this method with a type of collection where
    // order is not deterministic. This method considers two collections
    // equal if, when you enumerate through each collection in lockstep,
    // each element of the collection compares equal. This will work fine
    // for objects of type Array, ArrayList, SortedList, Queue, and any
    // other class that implements ICollection where the order is 
    // deterministic in some fashion. For example, you may find that the
    // results of this method are unpredictable when used on Hashtable objects
    public static bool Equals(ICollection items1, ICollection items2)
    {
        // if both are null, then they are considered equal
        if (items1 == null && items2 == null)
        {
            return true;
        }

        // if either one by itself is null, they are not considered equal
        if (items1 == null || items2 == null)
        {
            return false;
        }

        // if they are not the same size, they are not considered equal
        if (items1.Count != items2.Count)
        {
            return false;
        }

        // if each corresponding element does compare equal (according to Object.Equals)
        // note, since we've already checked the length, this loop assumes the lengths
        // are equal
        IEnumerator enum1 = items1.GetEnumerator();
        IEnumerator enum2 = items2.GetEnumerator();
        while (enum1.MoveNext())
        {
            enum2.MoveNext();
            if (!enum1.Current.Equals(enum2.Current))
            {
                return false;
            }
        }

        // if we get here, all the elements matched, so the collections are considered equal
        return true;
    }
}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\CertUtil.cs ===
//
// CertUtil.cs
//
// Stuff to deal with certificates
//

using System;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Security.Cryptography.X509Certificates;

namespace xonline.common.utilities2
{
    //
    // CertUtil
    //
    // Exposes one public static method: GetCertificate - that returns a
    // X509Certificate given the subject of the certificate
    //

    [ComVisible(false)]
    public class CertUtil
    {
        public static X509Certificate GetCurrentUserCertificate(string certSubject)
        {
            // call LoadUserProfile
            IntPtr logonToken = WindowsIdentity.GetCurrent().Token;

            PROFILEINFO info = new PROFILEINFO();
            info.dwSize = Marshal.SizeOf(info);
            info.lpUserName = WindowsIdentity.GetCurrent().Name;
            info.dwFlags = 1; // P_NOUI

            if ( false == WinApiLoadUserProfile(logonToken, ref info) )
            {
                throw new System.ComponentModel.Win32Exception();
            }

            uint dwFlags = CERT_SYSTEM_STORE_CURRENT_USER | CERT_STORE_READONLY_FLAG;
            return GetCertificate(dwFlags, certSubject);
        }

        public static X509Certificate GetLocalMachineCertificate(string certSubject)
        {
            uint dwFlags = CERT_SYSTEM_STORE_LOCAL_MACHINE | CERT_STORE_READONLY_FLAG;
            return GetCertificate(dwFlags, certSubject);
        }

        public static X509Certificate GetCertificate(uint dwFlags, string certSubject)
        {
            IntPtr hSystemStore = IntPtr.Zero;
            IntPtr hCert        = IntPtr.Zero;

            try
            {
                hSystemStore = WinApiCertOpenStore(CERT_STORE_PROV_SYSTEM_W,
                    0, IntPtr.Zero, dwFlags, "MY");

                if(hSystemStore == IntPtr.Zero)
                {
                    throw new Exception("WinApiCertOpenStore failed. Error=" +
                        Marshal.GetLastWin32Error());
                }

                hCert = WinApiCertFindCertificateInStore(hSystemStore,
                    PKCS_7_ASN_ENCODING | X509_ASN_ENCODING, 0,
                    CERT_FIND_SUBJECT_STR_W, certSubject, IntPtr.Zero);

                if(hCert == IntPtr.Zero)
                {
                    throw new Exception(string.Format("Failed to find certificate '{0}'. Error={1}",
                        certSubject, Marshal.GetLastWin32Error()));
                }

                return new X509Certificate(hCert);
            }
            finally
            {
                if(hCert != IntPtr.Zero)
                    WinApiCertFreeCertificateContext(hCert);

                if(hSystemStore != IntPtr.Zero)
                {
                    if(WinApiCertCloseStore(hSystemStore, 0) == 0)
                    {
                        throw new Exception("WinApiCertCloseStore failed. Error=" + Marshal.GetLastWin32Error());
                    }
                }
            }
        }

        public static string GetKeyFileName(X509Certificate cert)
        {
            IntPtr hProvider = IntPtr.Zero;
            bool freeProvider = false;
            UInt32 acquireFlags = CRYPT_ACQUIRE_COMPARE_KEY_FLAG | CRYPT_ACQUIRE_SILENT_FLAG;
            int _keyNumber = 0;
            string keyFileName = null;
            byte[] keyFileBytes = null;

            //
            // Determine whether there is private key information available for this certificate in the key store
            //
            if (WinApiCryptAcquireCertificatePrivateKey(cert.Handle,
                 acquireFlags,
                 IntPtr.Zero,
                 ref hProvider,
                 ref _keyNumber,
                 ref freeProvider))
            {
                IntPtr pBytes = IntPtr.Zero;    // Native Memory for the CRYPT_KEY_PROV_INFO structure
                int cbBytes = 0;                // Native Memory size

                try
                {
                    if (WinApiCryptGetProvParam(hProvider,
                            CryptGetProvParamType.PP_UNIQUE_CONTAINER,
                            IntPtr.Zero,
                            ref cbBytes,
                            0))
                    {
                        pBytes = Marshal.AllocHGlobal(cbBytes);

                        if (WinApiCryptGetProvParam(hProvider,
                                CryptGetProvParamType.PP_UNIQUE_CONTAINER,
                                pBytes,
                                ref cbBytes,
                                0))
                        {
                            keyFileBytes = new byte[cbBytes];
                            Marshal.Copy(pBytes, keyFileBytes, 0, cbBytes);

                            keyFileName = System.Text.Encoding.ASCII.GetString(keyFileBytes, 0, keyFileBytes.Length - 1);
                        }
                    }
                }
                finally
                {
                    if (freeProvider)
                        WinApiCryptReleaseContext(hProvider, 0);

                    if (pBytes != IntPtr.Zero)
                    {
                        Marshal.FreeHGlobal(pBytes);
                    }
                }
            }
            else
            {
                throw new Exception("WinApiCryptAcquireCertificatePrivateKey failed. Error = " + Marshal.GetLastWin32Error());
            }

            if (keyFileName == null)
            {
                throw new Exception("GetKeyFileName: Unable to obtain private key file name. Error = " + Marshal.GetLastWin32Error());
            }

            return keyFileName;
        }

        struct PROFILEINFO {
            public int dwSize;
            public int dwFlags;
            public String lpUserName;
            public String lpProfilePath;
            public String lpDefaultPath;
            public String lpServerName;
            public String lpPolicyPath;
            public IntPtr hProfile;
        }

        [DllImport("userenv.dll", EntryPoint="LoadUserProfile", SetLastError=true, CallingConvention=CallingConvention.StdCall, CharSet=CharSet.Auto)]
        static extern bool WinApiLoadUserProfile(IntPtr hToken, ref PROFILEINFO lpProfileInfo);


        [DllImport("crypt32.dll",  EntryPoint="CryptDecodeObject",
            ExactSpelling=true, SetLastError=true,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern int WinApiCryptDecodeObject(
            UInt32 dwCertEncodingType,
            UInt32 structType,
            byte[] pbEncoded,
            UInt32 cbEncoded,
            UInt32 dwFlags,
            byte[] pvStructInfo,
            ref UInt32 pcbStructInfo);

        [DllImport("crypt32.dll", EntryPoint="CertCreateCertificateContext",
            SetLastError=true, ExactSpelling=true,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern IntPtr WinApiCertCreateCertificateContext(
            UInt32 dwCertEncodingType,
            byte[] pbCertEncoded,
            UInt32 cbCertEncoded);

        [DllImport("crypt32.dll", EntryPoint="CertGetCertificateContextProperty",
            SetLastError=true, ExactSpelling=true,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern UInt32 WinApiCertGetCertificateContextProperty(
            IntPtr pCertContext,
            UInt32 dwPropId,
            byte[] pvData,
            ref UInt32 pcbData);

        [DllImport("crypt32.dll", EntryPoint="CertFreeCertificateContext",
            SetLastError=true, ExactSpelling=true,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern UInt32 WinApiCertFreeCertificateContext(
            IntPtr pCertContext);

        [DllImport("crypt32.dll", EntryPoint="CertOpenStore",
            SetLastError=true, ExactSpelling=true, CharSet=CharSet.Unicode,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern IntPtr WinApiCertOpenStore(
            UInt32 storeProvider,
            UInt32 dwMsgAndCertEncodingType,
            IntPtr hCryptProv,
            UInt32 dwFlags,
            string pvPara);

        [DllImport("crypt32.dll", EntryPoint="CertFindCertificateInStore",
            SetLastError=true, ExactSpelling=true, CharSet=CharSet.Unicode,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern IntPtr WinApiCertFindCertificateInStore(
          IntPtr hCertStore,
          UInt32 dwCertEncodingType,
          UInt32 dwFindFlags,
          UInt32 dwFindType,
          string pvFindPara,
          IntPtr pPrevCertContext);

        [DllImport("crypt32.dll", EntryPoint="CertCloseStore",
            SetLastError=true, ExactSpelling=true,
            CallingConvention=CallingConvention.StdCall)]
        protected static extern UInt32 WinApiCertCloseStore(
            IntPtr hCertStore,
            UInt32 dwFlags);


        [DllImport("crypt32.dll", EntryPoint = "CryptAcquireCertificatePrivateKey",
            SetLastError = true, ExactSpelling = true,
            CallingConvention = CallingConvention.StdCall)]
        protected static extern bool WinApiCryptAcquireCertificatePrivateKey(
            IntPtr pCert,
            UInt32 dwFlags,
            IntPtr pvReserved,
            ref IntPtr phCryptProv,
            ref int pdwKeySpec,
            ref bool pfCallerFreeProv);

        [DllImport("advapi32.dll", EntryPoint = "CryptGetProvParam",
            SetLastError = true, ExactSpelling = true,
            CallingConvention = CallingConvention.StdCall)]
        internal extern static bool WinApiCryptGetProvParam(
            IntPtr hCryptProv,
            CryptGetProvParamType dwParam,
            IntPtr pvData,
            ref int pcbData,
            uint dwFlags);

        [DllImport("advapi32.dll", EntryPoint = "CryptReleaseContext",
            SetLastError = true, ExactSpelling = true,
            CallingConvention = CallingConvention.StdCall)]
        internal extern static bool WinApiCryptReleaseContext(IntPtr hProv, uint dwFlags);

        protected const UInt32 CRYPT_ASN_ENCODING       = 0x00000001;
        protected const UInt32 CERT_KEY_IDENTIFIER_PROP_ID = 20;
        protected const UInt32 RSA_CSP_PUBLICKEYBLOB    = 19;
        protected const UInt32 X509_ASN_ENCODING        = 0x00000001;
        protected const UInt32 PKCS_7_ASN_ENCODING      = 0x00010000;
        protected const byte   PUBLICKEYBLOB            = 0x6;
        protected const byte   CUR_BLOB_VERSION         = 2;
        protected const UInt32 ALG_CLASS_SIGNATURE      = (1 << 13);
        protected const UInt32 ALG_CLASS_KEY_EXCHANGE   = (5 << 13);
        protected const UInt32 ALG_TYPE_RSA             = (2 << 9);
        protected const UInt32 ALG_SID_RSA_ANY          = 0;
        protected const UInt32 CALG_RSA_SIGN            = (ALG_CLASS_SIGNATURE | ALG_TYPE_RSA | ALG_SID_RSA_ANY);
        protected const UInt32 CALG_RSA_KEYX            = (ALG_CLASS_KEY_EXCHANGE|ALG_TYPE_RSA|ALG_SID_RSA_ANY);
        protected const UInt32 CERT_STORE_PROV_SYSTEM_W = 10;
        protected const Int32  CERT_SYSTEM_STORE_LOCATION_SHIFT =16;
        protected const UInt32 CERT_SYSTEM_STORE_CURRENT_USER_ID = 1;
        protected const UInt32 CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2;
        protected const UInt32 CERT_SYSTEM_STORE_CURRENT_USER = (CERT_SYSTEM_STORE_CURRENT_USER_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT);
        protected const UInt32 CERT_SYSTEM_STORE_LOCAL_MACHINE = (CERT_SYSTEM_STORE_LOCAL_MACHINE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT);
        protected const UInt32 CERT_COMPARE_NAME_STR_W  = 8;
        protected const Int32  CERT_COMPARE_SHIFT       = 16;
        protected const UInt32 CERT_INFO_SUBJECT_FLAG   = 7;
        protected const UInt32 CERT_FIND_SUBJECT_STR_W  = (CERT_COMPARE_NAME_STR_W << CERT_COMPARE_SHIFT | CERT_INFO_SUBJECT_FLAG);
        protected const UInt32 CERT_CLOSE_STORE_FORCE_FLAG = 0x00000001;
        protected const UInt32 CERT_CLOSE_STORE_CHECK_FLAG = 0x00000002;
        protected const UInt32 CERT_STORE_READONLY_FLAG = 0x00008000;

        protected const UInt32 CRYPT_ACQUIRE_COMPARE_KEY_FLAG   = 0x00000004;
        protected const UInt32 CRYPT_ACQUIRE_SILENT_FLAG        = 0x00000040;

        internal enum CryptGetProvParamType
        {
            PP_ENUMALGS = 1,
            PP_ENUMCONTAINERS = 2,
            PP_IMPTYPE = 3,
            PP_NAME = 4,
            PP_VERSION = 5,
            PP_CONTAINER = 6,
            PP_CHANGE_PASSWORD = 7,
            PP_KEYSET_SEC_DESCR = 8,
            PP_CERTCHAIN = 9,
            PP_KEY_TYPE_SUBTYPE = 10,
            PP_PROVTYPE = 16,
            PP_KEYSTORAGE = 17,
            PP_APPLI_CERT = 18,
            PP_SYM_KEYSIZE = 19,
            PP_SESSION_KEYSIZE = 20,
            PP_UI_PROMPT = 21,
            PP_ENUMALGS_EX = 22,
            PP_ENUMMANDROOTS = 25,
            PP_ENUMELECTROOTS = 26,
            PP_KEYSET_TYPE = 27,
            PP_ADMIN_PIN = 31,
            PP_KEYEXCHANGE_PIN = 32,
            PP_SIGNATURE_PIN = 33,
            PP_SIG_KEYSIZE_INC = 34,
            PP_KEYX_KEYSIZE_INC = 35,
            PP_UNIQUE_CONTAINER = 36,
            PP_SGC_INFO = 37,
            PP_USE_HARDWARE_RNG = 38,
            PP_KEYSPEC = 39,
            PP_ENUMEX_SIGNING_PROT = 40,
            PP_CRYPT_COUNT_KEY_USE = 41,
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\CountryConfig.cs ===
/*
 * CountryConfig.cs
 *
 */

namespace xonline.common.utilities
{
    //
    // For the Spring 2006 release, this is just a placeholder class.
    //
    // For the Fall 2006 release, this class should be extended to incorporate
    // the range of config information that is currently represented in the
    // country info XML files (*.cixml) that are compiled and kept on the
    // content download servers for the clients to consume.
    //
    public class CountryConfig
    {
        public static CountryConfig GetCountryConfig(byte countryId)
        {
            CountryConfig cc = new CountryConfig();

            cc.CountryId = countryId;
            cc.RegionName = CountryDictionary.CountryCode(countryId);
            cc.PhoneRequired = true;

            if ( cc.RegionName == "DE" )
            {
                cc.PhoneRequired = false;
            }

            return cc;
        }

        public string RegionName;
        public bool PhoneRequired;
        public byte CountryId;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\IpRangeList.cs ===
// 
// IpRangeList.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// IpRangeList class
// Xbox Online Service
//
//
// Author: kgoodier 9/2007
//

using System;
using System.Text;
using System.Collections.Generic;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;


// "a reference to a volatile field will not be treated as volatile"
#pragma warning disable 420

namespace xonline.common.utilities2
{


// -----------------------------------------------------------------------------------
// IpRangeList
//
// Provides a mapping of IP addresses to some record. Also maps a range of ips to a single 
// base IP.  
// -----------------------------------------------------------------------------------
[ComVisible(false)]
public class IpRangeList<TValue> 
    where TValue : IIpRangeUserRecord, new()
{
    public IpRangeList()
    {
    }

    public IpRangeList(string[] ipOverrideSettings)
    {
        Reload(ipOverrideSettings);
    }


    // -------------------------------------------------------------------------------
    // Lookup - maps a given ip to a record, taking into consideration ip ranges. Returns 
    // true if record was found, or false if not. If false is returned, ipMapped will be 
    // set to ip.
    // -------------------------------------------------------------------------------
    internal bool Lookup(IPAddress ip, out IPAddress ipMapped, out TValue userRecord)
    {

        // Get local copy of list in case it gets swapped out on us
        List<IpRangeListRecord<TValue> > ipList = _IpList;

        IpRangeListRecord<TValue> dummyRecord = new IpRangeListRecord<TValue>(ip);
        int index = ipList.BinarySearch(dummyRecord);

        if (index < 0)
        {
            ipMapped = ip;
            userRecord = default(TValue);
            return false;
        }

        ipMapped = new IPAddress(ipList[index].IpBase);
        userRecord = ipList[index].UserRecord;
        return true;
    }


    // -------------------------------------------------------------------------------
    // Reload - given an array of ip override settings, configures the internal data 
    // structure.
    //
    // Format for each setting. "ip" is required. "ipEnd" is optional and allows an 
    // inclusive range to be defined. Any other parameters are passed directly to the 
    // IIpRangeUserRecord "SetParam" method.
    //
    //   ip=<ip address>;[ipEnd=<ip address>;][param1=value1;][param2=value2;]...
    //
    // Examples:
    //   ip=10.198.102.210;throttle=2
    //   ip=10.198.102.220;ipEnd=10.198.102.230;throttle=10
    // -------------------------------------------------------------------------------
    internal void Reload(string[] ipOverrideSettings)
    {
        // Local copy!
        List<IpRangeListRecord<TValue> > ipList = new List<IpRangeListRecord<TValue> >();

        // Add them all
        foreach (string setting in ipOverrideSettings)
        {
            IpRangeListRecord<TValue> record = new IpRangeListRecord<TValue>(setting);
            ipList.Add(record);
        }

        // Sort 'em
        ipList.Sort();

        // Validate no illegal ranges. Easy to do by walking through the now-sorted list.
        IpRangeListRecord<TValue> prevRecord = null;
        foreach (IpRangeListRecord<TValue> record in ipList)
        {
            if (prevRecord != null)
            {
                if (prevRecord.OverlapsWith(record))
                {
                    throw new ArgumentException(String.Format(
                            "Range {0} overlaps with {1}",
                            prevRecord,
                            record));
                }
            }
            prevRecord = record;
        }

        // Swap in new one. Interlocked.Exchange will ensure a memory barrier.
        Interlocked.Exchange(ref _IpList, ipList);
    }
   
    public override string ToString()
    {
        // Local copy!
        List<IpRangeListRecord<TValue> > ipList = _IpList;
        StringBuilder sb = new StringBuilder();

        foreach (IpRangeListRecord<TValue> record in ipList)
        {
            sb.Append(record + "\r\n");
        }
        return sb.ToString();
    }

    private volatile List<IpRangeListRecord<TValue> > _IpList = null;
    
}


// -----------------------------------------------------------------------------------
// IIpRangeUserRecord
//
// This is to be implemented by any consumers of the IpRangeList class. 
//
// -----------------------------------------------------------------------------------
[ComVisible(false)]
public interface IIpRangeUserRecord 
{
    void SetParam(string paramName, string paramValue);
}



// -----------------------------------------------------------------------------------
// IpRangeListRecord
//
// Internal class that gets plopped into our List.
// -----------------------------------------------------------------------------------
internal class IpRangeListRecord<TValue> : IComparable
    where TValue : IIpRangeUserRecord, new()
{

    // -------------------------------------------------------------------------------
    // Default constructor
    // -------------------------------------------------------------------------------
    internal IpRangeListRecord()
    {
        IpBase = 0;
        IpEnd  = 0;
        UserRecord = default(TValue);
    }

    // -------------------------------------------------------------------------------
    // Constructor for generic config strings
    // Sample format:
    //   ip=<ip address>;[ipEnd=<ip address>;][param1=value1;][param2=value2;]...
    // -------------------------------------------------------------------------------
    internal IpRangeListRecord(string configString)
        : this()
    {
        char[] majorSep = new char[] { ';', ',' };
        char[] minorSep = new char[] { '=' };

        UserRecord = new TValue();

        string[] majorTokens = configString.Split(majorSep);

        foreach (string nameValuePair in majorTokens)
        {
            if (String.IsNullOrEmpty(nameValuePair))
            {
                // Something like "ip=1.1.1.1;" would cause this
                continue;
            }

            string[] minorTokens = nameValuePair.Split(minorSep);
            if (minorTokens.Length != 2)
            {
                throw new ArgumentException("Token format must be <name>=<value>, \"" + nameValuePair + "\" is invalid");
            }
           
            string paramName = minorTokens[0].Trim();
            string paramValue = minorTokens[1].Trim();
           
            // Note: we store the IP in big-endian format, so that something like 1.2.3.4 
            // becomes 0x01020304. This makes our ranges work a whole lot better.

            if (String.Compare(paramName, "ip", true) == 0 ||
                String.Compare(paramName, "ipBase", true) == 0)
            {
                IpBase = ByteOrder.IpStringToUInt32(paramValue);
            }
            else if (String.Compare(paramName, "ipEnd", true) == 0)
            {
                IpEnd = ByteOrder.IpStringToUInt32(paramValue);
            }
            else
            {
                UserRecord.SetParam(paramName, paramValue);
            }
        }

        if (IpEnd == 0)
        {
            IpEnd = IpBase;
        }

        // Comparisons must use internal members
        if (_IpEnd < _IpBase)
        {
            throw new ArgumentException("Invalid ip range " + this.ToString());
        }

    }

    // -------------------------------------------------------------------------------
    // Constructor for searching
    // -------------------------------------------------------------------------------
    internal IpRangeListRecord(IPAddress ip)
        : this()
    {
        IpBase  = ByteOrder.IpAddressToUInt32(ip);
        IpEnd   = IpBase;
    }

    // -------------------------------------------------------------------------------
    // CompareTo - implements the IComparable interface. See ascii art below for how this 
    // works..
    // -------------------------------------------------------------------------------
    public int CompareTo(object o)
    {
        // Note: use the big-endian format (the internal, non-accessor format) for 
        // accurate range comparisons. 

        if (!(o is IpRangeListRecord<TValue>))
        {
            throw new ArgumentException("Comparison object is not an IpRangeListRecord");
        }

        IpRangeListRecord<TValue> r = (IpRangeListRecord<TValue>)o;
    
        //  [ASCII Art Extraordinaire]
        //      IpBase <--> IpEnd
        //
        // Us:           |===========|    
        //       |   | |   | |   | |   | |   |
        //  o:   ----- |   | |   | |   | |   |   : return +2
        //  o:         ----- |   | |   | |   |   : return +1
        //  o:               ----- |   | |   |   : return  0
        //  o:                     ----- |   |   : return -1
        //  o: |                         ----- | : return -2 
        //  o: --------------------------------- : return  0
        //

        if (_IpEnd < r._IpEnd)
        {
            // This instance is less than o, or maybe engulfing
            if (_IpBase > r._IpBase)
                return 0;
            else if (_IpEnd >= r._IpBase)
                return -1;
            else
                return -2;
        }
        else if (_IpBase > r._IpBase)
        {
            // This instance is greater than o
            if (_IpBase <= r._IpEnd)
                return 1;
            else
                return 2;
        }
        else
        {
            // Just right
            return 0;
        }

    }

    // -------------------------------------------------------------------------------
    // OverlapsWith - does this record overlap another one?
    // -------------------------------------------------------------------------------
    public bool OverlapsWith(IpRangeListRecord<TValue> r)
    {
        // -2 or +2 mean no overlap
        int c = CompareTo(r);
        return (c >= -1 && c <= 1);
    }

    public override string ToString()
    {
        return String.Format(
            "[{0} - {1}, {2}]", 
            new IPAddress(IpBase),
            new IPAddress(IpEnd),
            UserRecord);
    }


    // Handles little-endian format
    internal UInt32 IpBase
    {
        get { return ByteOrder.Revert(_IpBase); }
        set { _IpBase = ByteOrder.Revert(value); }
    }

    internal UInt32 IpEnd
    {
        get { return ByteOrder.Revert(_IpEnd); }
        set { _IpEnd = ByteOrder.Revert(value); }
    }

    internal TValue UserRecord
    {
        get { return _UserRecord; }
        set { _UserRecord = value; }
    }


    // Stored in big-endian format for accurate range comparisons. We want "2.1.1.1" to be 
    // 0x02010101 and "1.1.1.2" to be 0x01010102, not the other way around.

    private UInt32     _IpBase;
    private UInt32     _IpEnd;
    private TValue     _UserRecord;
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\EnumerableFormatter.cs ===
//
// This class handles formatting for anything that implements IEnumerable.
// You can use it like any other formatter and format string, but the easiest way will 
// generally be to use the static wrapper:
//
// List<int> ilist = new List<int>();
// AddStuffToList(ilist);
// string allitems = EnumerableFormatter.FormatEnumerable(ilist);
//
// If you want to pass a formatting string to each item in the list to format it, you can 
// do this:
// string allitems = EnumerableFormatter.FormatEnumerable(ilist, "format");
//
// So the following code:
// int[] ints = new int[] {1, 2, 10, 20};
// Console.WriteLine(EnumerableFormatter.FormatEnumerable(ints));
// Console.WriteLine(EnumerableFormatter.FormatEnumerable(ints, "X"));
//
// prints:
// [1, 2, 10, 20]
// [1, 2, A, 14]
//
// The same can be accomplished with this:
// Console.WriteLine(String.Format(EnumerableFormatter.Instance, "{0:ef}", ints));
// Console.WriteLine(String.Format(EnumerableFormatter.Instance, "{0:efX}", ints));
//
// For a simple formatting job like this, the static wrapper is probably preferred. For a 
// more complex thing, perhaps not.
// 

using System;
using System.Collections;
using System.Text;

namespace xonline.common.utilities2
{
    public class EnumerableFormatter: ICustomFormatter, IFormatProvider
    {
        public static EnumerableFormatter Instance
        {
            get { return _instance; }
        }

        public static string FormatEnumerable(IEnumerable enumerable)
        {
            return FormatEnumerable(enumerable, String.Empty);
        }

        public static string FormatEnumerable(IEnumerable enumerable, string format)
        {
            string wholeFormat = String.Format(COMPLETE_FORMAT, FORMAT_PREFIX, format);
            return String.Format(Instance, wholeFormat, enumerable);
        }

        public object GetFormat(Type argType)
        {
            if (argType == typeof(ICustomFormatter))
            {
                return this;
            }
            else
            {
                return null;
            }
        }

        public string Format(string formatString, object argToBeFormatted, IFormatProvider nextProvider)
        {
            if (!CanHandleFormatRequest(formatString, argToBeFormatted))
            {
                return PassThroughFormat(formatString, argToBeFormatted, nextProvider);
            }

            IEnumerable args = (IEnumerable) argToBeFormatted;
            string passThroughFormat = GetPassThroughFormat(formatString);

            StringBuilder sb = new StringBuilder();
            sb.Append(BEGINNING_WRAPPER);

            bool firstItem = true;
            foreach (object o in args)
            {
                if (!firstItem)
                {
                    sb.Append(DELIMITTER);
                }
                firstItem = false;
                sb.Append(String.Format(passThroughFormat, o));
            }

            if (firstItem)
            {
                sb.Append(EMPTY);
            }

            sb.Append(ENDING_WRAPPER);
            return sb.ToString();
        }

        private static bool CanHandleFormatRequest(string formatString, object argToBeFormatted)
        {
            return !String.IsNullOrEmpty(formatString) && formatString.StartsWith(FORMAT_PREFIX) && argToBeFormatted is IEnumerable;
        }

        private static string PassThroughFormat(string formatString, object argToBeFormatted, IFormatProvider nextProvider)
        {
            if (argToBeFormatted is IFormattable)
            {
                return ((IFormattable) argToBeFormatted).ToString(formatString, nextProvider);
            }
            else
            {
                return argToBeFormatted.ToString();
            }
        }

        private static string GetPassThroughFormat(string wholeFormat)
        {
            string format = wholeFormat.Substring(FORMAT_PREFIX.Length);
            if (String.IsNullOrEmpty(format))
            {
                return SINGLE_ITEM_FORMAT;
            }
            else
            {
                return String.Format(SINGLE_ITEM_PASSTHROUGH_FORMAT, format);
            }
        }

        public const string FORMAT_PREFIX = "ef";
        private const string SINGLE_ITEM_FORMAT = "{0}";
        private const string SINGLE_ITEM_PASSTHROUGH_FORMAT = "{{0:{0}}}";
        private const string BEGINNING_WRAPPER = "[";
        private const string ENDING_WRAPPER = "]";
        private const string DELIMITTER = ", ";
        private const string EMPTY = "empty";
        private const string COMPLETE_FORMAT = "{{0:{0}{1}}}";

        private static EnumerableFormatter _instance = new EnumerableFormatter();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\ExtensionMethods.cs ===
// 
// ExtensionMethods.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Miscellaneous handy extension methods with no where else to live.
// Xbox Online Service
//

using System;

namespace xonline.common.utilities2
{

public static class ExtensionMethods
{
    public static string ReplaceControlCharacters(this String str, char replacementChar)
    {
        // Optimized for the "no control character" case

        if (String.IsNullOrEmpty(str))
        {
            return str;
        }

        char[] chars = null;
        for (int i = 0; i < str.Length; i++)
        {
            if (char.IsControl(str[i]))
            {
                if (chars == null)
                {
                    // This is somewhat expensive, avoid until necessary
                    chars = str.ToCharArray();
                }
                chars[i] = replacementChar;
            }
        }
        if (chars != null)
            return new string(chars);
        else
            return str;

    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\Locale.cs ===
/*
 * Locale.cs
 *
 * Supports locales
 *
 * Copyright (c) Microsoft Corporation. All Rights Reserved.
 *
 * Author: Ben Zotto (benzotto)
 */

using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using xonline.common.config;
using xonline.common.service;

namespace xonline.common.utilities
{
    public class Locale
    {

        private static string[] _validLocales = null;

        //
        // Get's a valid LCID from a real/fake LCID
        //
        public static int GetValidLCID(int LCID)
        {
            // Since LCIDs are short values, the max value would be 65535.  Fake LCIDs, then, will be based on real LCIDs plus multiples of 100000.
            // to get a real LCID from a dummy lcid, simply remove all multiples of 100000.
            LCID %= 100000;

            try
            {
                CultureInfo ci = new CultureInfo(LCID);
            }
            catch
            {
                throw new Exception("Locale.GetValidLCID: provided LCID does not map to a real LCID");
            }

            return LCID;
        }

        //
        // Get's a valid LCID from a locale
        //
        public static int GetLcidFromLocaleCode(string localeCode)
        {
            int lcid;
            try
            {
                CultureInfo ci = new CultureInfo(localeCode);
                lcid = ci.LCID;
            }
            catch
            {
                throw new Exception("Locale.GetLcidFromLocaleCode: provided locale does is not valid");
            }

            return lcid;
        }

        //
        // Default locale for a country
        //
        public static string DefaultByCountry(string countryCode)
        {
            string setting = "locale_" + countryCode;
            string locale = Config.GetSetting(setting).Trim();

            if (locale == null || locale == String.Empty)
            {
                throw new Exception("Locale.DefaultLocale: could not find default mapping in config file locale section for " + countryCode );
            }

            return locale;
        }

        public static string DefaultByLanguage(uint language)
        {
            string setting = "locale_language" + language;
            string val = Config.GetSetting(setting).Trim();

            if (val == null || val == String.Empty)
            {
                throw new Exception("Locale.DefaultByLanguage: could not find default language" + language + " mapping in config file locale section" );
            }

            return val;
        }

        public static string NeutralCultureFromLanguage(uint language)
        {
            string setting = "locale_language" + language;
            string val = Config.GetSetting(setting).Trim();

            if (val == null || val == String.Empty)
            {
                throw new Exception("Locale.NeutralCultureFromLanguage: could not find default language" + language + " mapping in config file locale section" );
            }

            return val.Substring(0, 2);
        }

        //
        // Determine if a given locale is considered a valid locale by the service
        //
        public static bool IsValidLocale(string candidate)
        {
            if (_validLocales == null)
            {
                string val = Config.GetSetting(Setting.locale_validLocales);
                if (val == null || val == String.Empty)
                {
                    throw new Exception("A ValidLocales setting is required in the config database");
                }

                string[] vals = val.Split(new char[] { ';', ',' });

                for (int i = 0; i < vals.Length; i++)
                {
                    vals[i] = vals[i].Trim().ToUpper();
                }

                Array.Sort(vals);

                _validLocales = vals;
            }

            if (Array.BinarySearch(_validLocales, candidate.ToUpper()) >= 0)
            {
                return true;
            }

            return false;
        }


        public static string BuildLocale(uint language, string countryCode)
        {
            Debug.Assert(countryCode != null);
            Debug.Assert(countryCode.Length == 2);

            return( NeutralCultureFromLanguage(language) + "-" + countryCode );
        }

        // BuildValidLocaleList
        // Build a list of valid locales sorted by priority based on two
        // languages and a country.
        public static string[] BuildValidLocaleList(uint language1, uint language2, string countryCode)
        {
            string     candidate;
            ArrayList  list = new ArrayList(3);

            if(language1 != 0)
            {
                // Try to patch together a valid locale from language + country
                candidate = BuildLocale(language1, countryCode);
                if(IsValidLocale(candidate))
                {
                    list.Add(candidate);
                }

                // Also get the raw language to locale mapping regardless of country
                candidate = LocaleFromv1LanguageId((ushort)language1);

                if(IsValidLocale(candidate))
                {
                    list.Add(candidate);
                }
            }

            if((language1 != language2) && (language2 != 0))
            {
                // We only need to evaluate language2 if it's different from
                // language1
                candidate = BuildLocale(language2, countryCode);

                if (IsValidLocale(candidate))
                {
                    list.Add(candidate);
                }

                // Also get the raw language to locale mapping regardless of country
                candidate = LocaleFromv1LanguageId((ushort)language2);

                if(IsValidLocale(candidate))
                {
                    list.Add(candidate);
                }
            }

            if (CountryDictionary.CountryId(countryCode) != 0)
            {
                // Try Country's default language
                candidate = DefaultByCountry(countryCode);

                if (IsValidLocale(candidate))
                {
                    list.Add(candidate);
                }
            }

            if(list.Count == 0)
            {
                throw new Exception(string.Format(
                    "Locale.BuildValidLocale: Cannot build a valid locale from "+
                    "languages {0} or {1} and country {2}! Bad country?",
                    language1.ToString(), language2.ToString(), countryCode));
            }

            return (string[])list.ToArray(typeof(string));
        }

        public static string BuildValidLocale(uint language, string countryCode)
        {
            return BuildValidLocaleList(language, language, countryCode)[0];
        }

        // From xbox.x, used by the String server and Messaging widget
        public enum v1LanguageID : ushort
        {
            unknown             = 0,
            english             = 1,
            japanese            = 2,
            german              = 3,
            french              = 4,
            spanish             = 5,
            italian             = 6,
            korean              = 7,
            chinese_traditional = 8,
            portuguese          = 9,
            chinese_simplified  = 10,
            polish              = 11,
            russian             = 12,
        };

        public static string LocaleFromv1LanguageId( ushort languageId )
        {
            string locale = "default";

            switch ((v1LanguageID)languageId)
            {
                case v1LanguageID.unknown:       locale = "default"; break;
                case v1LanguageID.english:       locale = "en-US"; break;
                case v1LanguageID.japanese:      locale = "ja-JP"; break;
                case v1LanguageID.german:        locale = "de-DE"; break;
                case v1LanguageID.french:        locale = "fr-FR"; break;
                case v1LanguageID.spanish:       locale = "es-ES"; break;
                case v1LanguageID.italian:       locale = "it-IT"; break;
                case v1LanguageID.korean:        locale = "ko-KR"; break;
                case v1LanguageID.chinese_traditional: locale = "zh-TW"; break;
                case v1LanguageID.portuguese:    locale = "pt-PT"; break;
                case v1LanguageID.chinese_simplified:  locale = "zh-CN"; break;
                case v1LanguageID.polish:        locale = "pl-PL"; break;
                case v1LanguageID.russian:       locale = "ru-RU"; break;
            }

            return locale;
        }

        public static ushort v1LanguageIdFromLocale( string locale )
        {
            v1LanguageID languageId = v1LanguageID.unknown;

            switch (locale)
            {
                case "default": languageId = v1LanguageID.unknown; break;
                case "en-US": languageId = v1LanguageID.english; break;
                case "en-AE": languageId = v1LanguageID.english; break;
                case "en-ZA": languageId = v1LanguageID.english; break;
                case "ja-JP": languageId = v1LanguageID.japanese; break;
                case "de-DE": languageId = v1LanguageID.german; break;
                case "fr-FR": languageId = v1LanguageID.french; break;
                case "es-CL": languageId = v1LanguageID.spanish; break;
                case "es-CO": languageId = v1LanguageID.spanish; break;
                case "es-ES": languageId = v1LanguageID.spanish; break;
                case "it-IT": languageId = v1LanguageID.italian; break;
                case "ko-KR": languageId = v1LanguageID.korean; break;
                case "zh-CHT": languageId = v1LanguageID.chinese_traditional; break;
                case "zh-TW": languageId = v1LanguageID.chinese_traditional; break;
                case "pt-BR": languageId = v1LanguageID.portuguese; break;
                case "pt-PT": languageId = v1LanguageID.portuguese; break;
                case "zh-CHS": languageId = v1LanguageID.chinese_simplified; break;
                case "zh-CN": languageId = v1LanguageID.chinese_simplified; break;
                case "pl-PL": languageId = v1LanguageID.polish; break;
                case "ru-RU": languageId = v1LanguageID.russian; break;
            }

            return (ushort)languageId;
        }

        public static uint CountryCodeFromv1LanguageId(ushort languageId)
        {
            uint countryCode = XOn.XONLINE_COUNTRY_UNITED_STATES;

            switch ((v1LanguageID)languageId)
            {
                case v1LanguageID.english: countryCode = XOn.XONLINE_COUNTRY_UNITED_STATES; break;
                case v1LanguageID.japanese: countryCode = XOn.XONLINE_COUNTRY_JAPAN; break;
                case v1LanguageID.german: countryCode = XOn.XONLINE_COUNTRY_GERMANY; break;
                case v1LanguageID.french: countryCode = XOn.XONLINE_COUNTRY_FRANCE; break;
                case v1LanguageID.spanish: countryCode = XOn.XONLINE_COUNTRY_SPAIN; break;
                case v1LanguageID.italian: countryCode = XOn.XONLINE_COUNTRY_ITALY; break;
                case v1LanguageID.korean: countryCode = XOn.XONLINE_COUNTRY_KOREA; break;
                case v1LanguageID.chinese_traditional: countryCode = XOn.XONLINE_COUNTRY_TAIWAN; break;
                case v1LanguageID.portuguese: countryCode = XOn.XONLINE_COUNTRY_PORTUGAL; break;
                case v1LanguageID.chinese_simplified: countryCode = XOn.XONLINE_COUNTRY_CHINA; break;
                case v1LanguageID.polish: countryCode = XOn.XONLINE_COUNTRY_POLAND; break;
                case v1LanguageID.russian: countryCode = XOn.XONLINE_COUNTRY_RUSSIAN_FEDERATION; break;
            }

            return countryCode;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\CountryList.cs ===
/*
 * CountryList.cs
 *
 * Class CountryDictionary represents a mapping from country code (byte) to
 * two-letter ISO country code.
 *
 * Copyright (c) Micrsoft Corporation. All Rights Reserved.
 *
 * Author: Steve Lamb (SLamb)
 */

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

using xonline.common.config;
using xonline.common.service;

namespace xonline.common.utilities
{
    public class MinAge
    {
        public byte User;
        public byte Billing;
    }

    public class CountryInfo
    {
        public byte CountryId;
        public string CountryCode;
        public byte User;
        public byte Billing;
        public bool AllowDirectDebit;
        public bool AllowPayPal;
        public bool RequireCCAgeVerification;
    }

    public class CountryDictionary
    {
        private static readonly object    _countryLockObject = new object();
        private static volatile Hashtable _countryInfo = null;
        private static volatile Hashtable _countryInfoByCode = null;


        public static string CountryCode(byte countryId)
        {
            if (_countryInfo == null) Init();

            CountryInfo ci = CountryInfo(countryId);

            return (ci == null) ? null : ci.CountryCode;
        }

        public static byte CountryId(string countryCode)
        {
            if (_countryInfoByCode == null) Init();

            CountryInfo ci = CountryInfo(countryCode);

            return (ci == null) ? (byte)0 : ci.CountryId;

        }

        public static MinAge MinAge(byte countryId)
        {
            if (_countryInfo == null) Init();

            CountryInfo info = (CountryInfo) _countryInfo[countryId];

            MinAge age = new MinAge();
            age.User = info.User;
            age.Billing = info.Billing;
            return age;
        }

        public static CountryInfo CountryInfo(byte countryId)
        {
            if (_countryInfo == null) Init();

            return (CountryInfo) _countryInfo[countryId];

        }

        public static CountryInfo CountryInfo(string countryCode)
        {
            if (_countryInfoByCode == null) Init();

            if (String.IsNullOrEmpty(countryCode))
                return null;

            return (CountryInfo) _countryInfoByCode[countryCode.ToUpper()];
        }

        static void Init()
        {
            // the hash tables are not synchronized.  protect against
            // multiple threads initializing the  country  dictionary

            lock (_countryLockObject)
            {
                if (_countryInfo != null)
                {
                    return;
                }

                try
                {
                    // build up local hashtables and then assign into the
                    // member variables to prevent use before we are done

                    Hashtable countryInfo = new Hashtable();
                    Hashtable countryInfoByCode = new Hashtable();

                    using (SqlConnection conn = new SqlConnection(ConfigUtil.NpdbConnectionString))
                    {
                        conn.Open();

                        // Execute stored procedure
                        using (SqlCommand cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = "dbo.p_xuacs_get_countries";
                            cmd.CommandType = CommandType.StoredProcedure;

                            using (SqlDataReader rdr = cmd.ExecuteReader())
                            {

                                while (rdr.Read())
                                {
                                    byte countryId = rdr.GetByte(0);
                                    string countryCode = rdr.GetString(1).ToUpper();

                                    CountryInfo info = new CountryInfo();

                                    info.CountryId = countryId;
                                    info.CountryCode = countryCode;
                                    info.User = rdr.GetByte(2);
                                    info.Billing = rdr.GetByte(3);
                                    info.AllowDirectDebit = (rdr.GetByte(4) != 0);
                                    info.RequireCCAgeVerification = (rdr.GetByte(5) != 0);
                                    info.AllowPayPal = (rdr.GetByte(6) != 0);

                                    countryInfo[countryId] = info;
                                    countryInfoByCode[countryCode] = info;
                                }


                                if (countryInfo.Count == 0)
                                {
                                    throw new XRLException(HResult.XONLINE_E_DATABASE_RESULT_ERROR,
                                                            XEvent.Id.COUNTRY_LIST_MISSING,
                                                            "Calling 'p_xuacs_get_countries' returned 0 results!   (is the table populated?)");
                                }

                                // make the hashtables available to everyone

                                _countryInfo = countryInfo;
                                _countryInfoByCode = countryInfoByCode;
                            }
                        }
                    }
                }
                catch {
                    // ignore
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\LimitedSizeDictionary.cs ===
// 
// LimitedSizeDictionary.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// LimitedSizeDictionary class
// Xbox Online Service
//
// This is a useful class for anti-dos request tracking, for when you need to track a 
// bunch of items in a hashtable, but don't want the hashtable to grow indefinitely. Think 
// of an anti-dos hashtable that hashes incoming ip addresses.
// 
// Example of usage (need to implement your own value class)
//
// class TestRecord : ILimitedSizeDictionaryValue<string>
// {
//     public string Key 
//     {
//         get { return _Key; }
//         set { _Key = value; }
//     }
// 
//     public void Init(string key)
//     {
//         _Key = key;
//         _Count = 0;
//     }
// 
//     public int      _Count;
//     public string   _Key;
// 
//     public override string ToString()
//     {
//         return String.Format("({0}, {1})", _Key, _Count);
//     }
// }
// 
// // Sample code snippet, pretty simple
//
// ...
//    LimitedSizeDictionary<string, TestRecord> dict;
//    dict = new LimitedSizeDictionary<string, TestRecord>(100);
//    string ip = "10.192.0.0";
//    TestRecord record = dict.Get(ip);
//    record._Count++;
// ...
//
//
// Author: kgoodier 9/2007
//

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace xonline.common.utilities2
{


// -----------------------------------------------------------------------------------
// LimitedSizeDictionary 
// 
// This is a hashtable that will grow up to a certain size, at which point it will start 
// re-purposing existing records. That means records may be removed from the hashtable at 
// any point, but only the least-recently-used ones are repurposed. 
//
// Every single time you call Get, the record is marked as "touched" and moved to the top 
// of the LRU list.
//
// It is not thread safe.
// -----------------------------------------------------------------------------------
[ComVisible(false)]
public class LimitedSizeDictionary<TKey, TValue> 
    where TValue : ILimitedSizeDictionaryValue<TKey>, new()
{

    public LimitedSizeDictionary(
        uint maxSize)
    {
        _MaxSize = maxSize;
        // should we set the initial size of these? seems like no perf difference..
        _Dictionary = new Dictionary<TKey, LinkedListNode<TValue> >(); 
        _LruList = new LinkedList<TValue>();
    }

    public uint MaxSize
    {
        get { return _MaxSize; }
        set { _MaxSize = value; }
    }

    public uint Count
    {
        get { return (uint)_Dictionary.Count; }
    }

    // -------------------------------------------------------------------------------
    // Get - this will lookup a record and return the value. If a record is not found, a 
    // new one will be created or repurposed from the LRU list. 
    //
    // This function is guaranteed to return a valid record.
    //
    // Please remember this is not thread safe.
    // -------------------------------------------------------------------------------
    public TValue Get(TKey key)
    {
        LinkedListNode<TValue> record;
        if (_Dictionary.TryGetValue(key, out record))
        {
            // Found a record. Move position in LRU to the top
            _LruList.Remove(record);
            _LruList.AddFirst(record);
        }
        else
        {
            // No record found. Room to grow?
            if (_Dictionary.Count < _MaxSize)
            {
                // Create a new record.
                TValue val = new TValue();
                val.Init(key);
                record = new LinkedListNode<TValue>(val);

                _Dictionary[key] = record;
                _LruList.AddFirst(record);
            }
            else
            {
                // Repurpose an existing record as long as it isn't in use.
                int numTries = _LruList.Count;
                int currentTries;
                for (currentTries = 0; currentTries < numTries; currentTries++)
                {
                    record = _LruList.Last;
                    Debug.Assert(record != null);
                    Debug.Assert(record.Value != null);
                    _LruList.RemoveLast();
                    _LruList.AddFirst(record);
                    if (record.Value.IsReusable)
                    {
                        break;
                    }
                }
                if (currentTries == numTries)
                {
                    throw new Exception("No records found in LRU that are not in use after trying all " + 
                                        numTries + " records.");
                }

                // Remove old entry from dictionary using old key, and re-init it with the 
                // new key, and then stick it back in the dictionary. Remove then 
                // re-insert immediately to reduce risk of leaking records if Init() 
                // throws.
                _Dictionary.Remove(record.Value.Key);
                _Dictionary[key] = record;
                record.Value.Init(key);
            }
        }

        return record.Value;
    }



    internal bool TryGetWithoutUpdate(TKey key, out TValue val)
    {
        LinkedListNode<TValue> record;
        if (_Dictionary.TryGetValue(key, out record))
        {
            val = record.Value;
            return true;
        }
        val = default(TValue);
        return false;
    }


    public override string ToString()
    {
        StringBuilder sb = new StringBuilder(1000);
        foreach (TValue record in _LruList)
        {
             sb.AppendFormat("Key[{0}], Value[{1}]\n", record.Key, record);
        }
        return sb.ToString();
    }



    private Dictionary<TKey, LinkedListNode<TValue> > _Dictionary;
    private LinkedList<TValue>                        _LruList;
    private uint                                      _MaxSize;
}

// -----------------------------------------------------------------------------------
// ILimitedSizeDictionaryValue 
// 
// Interface for the value supplied to the LimitedSizeDictionary class. Your value must 
// also store the key, and it must support re-initialization for when the record gets 
// re-purposed.
// -----------------------------------------------------------------------------------
[ComVisible(false)]
public interface ILimitedSizeDictionaryValue<TKey>
{
    TKey Key { get; set; }
    bool IsReusable { get; }

    void Init(TKey key);
}



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\MkcKeyDescriptor.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace xonline.common.utilities2
{
    /// <summary>
    /// Describes essential details for MultiKeyCollection key's
    /// </summary>
    /// <typeparam name="TDescId">Type associated with unique descriptor identifier.</typeparam>
    /// <typeparam name="TValue">Value type associated with the collection.</typeparam>
    public interface IKeyDescriptor<TDescId, TValue>
    {
        /// <summary>
        /// Gets the type associated with the key.
        /// </summary>
        Type KeyType
        {
            get;
        }

        /// <summary>
        /// Gets a delegate responsible for extracting the key from the value.
        /// </summary>
        Func<TValue, object> KeyExtractor
        {
            get;
        }

        /// <summary>
        /// Gets the identifier associated with this descriptor.  This identifier must be 
        /// unique within the scope of a MultiKeyCollection.
        /// </summary>
        TDescId Identifier
        {
            get;
        }
    }

    /// <summary>
    /// Describes essential details for MultiKeyCollection key's.  The key type
    /// is strongly typed in this interface.
    /// </summary>
    /// <typeparam name="TDescId">Type associated with unique descriptor identifier.</typeparam>
    /// <typeparam name="TKey">Type associated with the key.</typeparam>
    /// <typeparam name="TValue">Value type associated with the collection.</typeparam>
    public interface IKeyDescriptor<TDescId, TKey, TValue> : IKeyDescriptor<TDescId, TValue>
    {
        /// <summary>
        /// Gets a delegate responsible for extracting the strongly typed key from the value.
        /// </summary>
        Func<TValue, TKey> TypedKeyExtractor
        {
            get;
        }
    }

    /// <summary>
    /// This class describes MultiKeyCollection key details in a strongly typed fashion.
    /// </summary>
    /// <typeparam name="TDescId">Type associated with unique descriptor identifier.</typeparam>
    /// <typeparam name="TKey">Type associated with the key.</typeparam>
    /// <typeparam name="TValue">Value type associated with the collection.</typeparam>
    public sealed class KeyDescriptor<TDescId, TKey, TValue> : IKeyDescriptor<TDescId, TKey, TValue>
    {
        private TDescId identifier;
        private Func<TValue, TKey> typed_extractor;
        private Func<TValue, object> untyped_extractor;

        /// <summary>
        /// Initializes a new instance of the KeyDescriptor.
        /// </summary>
        /// <param name="identifier">Identifier associated with the descriptor.</param>
        /// <param name="extractor">Delegate used to extract the key from the value.</param>
        public KeyDescriptor(TDescId identifier, Func<TValue, TKey> extractor)
        {
            if (null == extractor)
            {
                throw new ArgumentNullException("extractor");
            }

            if (null == identifier)
            {
                throw new ArgumentNullException("identifier");
            }

            this.identifier = identifier;
            this.typed_extractor = extractor;
            this.untyped_extractor = o => typed_extractor(o);
        }

        /// <summary>
        /// Gets a delegate responsible for extracting the strongly typed key from the value.
        /// </summary>
        public Func<TValue, TKey> TypedKeyExtractor
        {
            get { return typed_extractor; }
        }

        /// <summary>
        /// Gets the type associated with the key.
        /// </summary>
        public Type KeyType
        {
            get { return typeof(TKey); }
        }

        /// <summary>
        /// Gets a delegate responsible for extracting the key from the value.
        /// </summary>
        Func<TValue, object> IKeyDescriptor<TDescId, TValue>.KeyExtractor
        {
            get { return untyped_extractor; }
        }

        /// <summary>
        /// Gets the identifier associated with this descriptor.  This identifier must be 
        /// unique within the scope of a MultiKeyCollection.
        /// </summary>
        public TDescId Identifier
        {
            get { return identifier; }
        }

        /// <summary>
        /// Converts the object to a string represention.
        /// </summary>
        /// <returns>Returns the string representation of the object.</returns>
        public override string ToString()
        {
            if (null == Identifier)
            {
                return "(null)";
            }

            return Identifier.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\PriorityQueue.cs ===
using System;
using System.Collections;
using System.Threading;
using xonline.common.service;


namespace xonline.common.utilities 
{
    public class PriorityQueue
    {
        private ArrayList _heap;
        private int _count;
        
        public PriorityQueue(int InitialSize)
        {
            _heap = new ArrayList(InitialSize);
            _count = 0;
        }

        // Inserts a new object into the priority queue
        public int Insert(IComparable obj)
        {
            int count;
            lock(this)
            {
                if (_count < _heap.Count)
                {
                    _heap[_count] = obj;
                }
                else
                {
                    _heap.Add(obj);
                }
                _count++;

                if (_count > 1)
                {
                    heapify(_count - 1);
                }
                count = _count;
            }
            return count;
        }

        // Returns the highest priority object without removing it
        // Returns null if the queue is empty
        public IComparable PeekHead()
        {
            IComparable head = null;
            lock(this)
            {
                if (_count > 0)
                {
                    head = (IComparable)_heap[0];
                }
            }
            return head;
        }

        // Removes the highest priority object and returns it
        // Returns null if the queue is empty
        public IComparable GetHead()
        {
            IComparable head = null;
            lock(this)
            {
                if (_count > 0)
                {
                    head = (IComparable)_heap[0];

                    --_count;
                    _heap[0] = _heap[_count];
                    _heap[_count] = null;
                    reheapify(0, _count);
                }
            }
            return head;
        }

        // Peek at a leaf item
        public IComparable PeekItem(int i)
        {
            IComparable item = null;
            lock(this)
            {
                if ((_count/2) < i && i < _count)
                {
                    item = (IComparable)_heap[i];
                }
            }
            return item;
        }

        // Remove a leaf item
        public IComparable GetItem(int i)
        {
            IComparable item = null;
            lock(this)
            {
                if ((_count/2) < i && i < _count)
                {
                    item = (IComparable)_heap[i];

                    --_count;
                    _heap[i] = _heap[_count];
                    _heap[_count] = null;
                    heapify(i);
                }
            }
            return item;
        }

        public int Count
        {
            get { return _count; }
        }

        private void heapify(int start)
        {
            // always gets a heap with at least 2 elements
            int c_node, p_node;       // c_node = current node, p_node = parent node
            c_node = start;           // last element in the heap
            object temp;
            
            while (c_node > 0)
            {
                p_node  = (c_node - 1)/2;  // p_node is index of parent
                if ( ((IComparable)_heap[p_node]).CompareTo(_heap[c_node]) >= 0 )
                {
                    break;
                }
                temp = _heap[p_node];
                _heap[p_node] = _heap[c_node];
                _heap[c_node] = temp;
                c_node = p_node;
            }
        }

        private void reheapify (int n, int stop)
        {
            object temp;
            int leftchild, rightchild, k;
            while (n < stop/2)
            {
                leftchild = 2 * n + 1;
                rightchild = 2 * n + 2;
                
                // handle special case of no rightchild
                if (rightchild >= stop)
                {
                    k = leftchild;
                }
                else // usual case
                {
                    if ( ((IComparable)_heap[leftchild]).CompareTo(_heap[rightchild]) > 0 )
                    {
                        k = leftchild;
                    }
                    else
                    {
                        k = rightchild;
                    }
                }

                // k now is the index of the larger of the 2 children of n
                if ( ((IComparable)_heap[n]).CompareTo(_heap[k]) >= 0 )
                {
                    break;
                }
                temp = _heap[n];
                _heap[n] = _heap[k];
                _heap[k] = temp;
                n = k;
            }
        }

        
    }

    public interface IPrioritizedTask : IComparable
    {
        TimeSpan Delay { get; }
    }
        
    public delegate void HandleTask( IPrioritizedTask task );
    public delegate object QueueExaminer( PriorityQueue queue );

    public class PrioritizedThreadPool
    {
        private PriorityQueue _queue;
        private XboxLiveThread[] _threads;
        private ManualResetEvent _tasksAvailable;
        private ManualResetEvent _noTasksLeft;
        private HandleTask _taskHandler;
        private bool _enforceDelay;
        
        public PrioritizedThreadPool(int NumberOfThreads, ThreadPriority priority, int InitialQueueSize, HandleTask TaskHandler)
        {
            _queue = new PriorityQueue( InitialQueueSize );
            _tasksAvailable = new ManualResetEvent(false);
            _noTasksLeft = new ManualResetEvent(false);
            _taskHandler = TaskHandler;
            _threads = new XboxLiveThread[ NumberOfThreads ];
            _enforceDelay = true;

            for( int i = 0; i < NumberOfThreads; i++ )
            {
                _threads[i] = new XboxLiveThread( new ThreadStart( ThreadLoop ) );
                _threads[i].Priority = priority;
                _threads[i].Start();
            }
        }

        ~PrioritizedThreadPool()
        {
            lock(this)
            {
                _noTasksLeft.Reset();
                _enforceDelay = false;
                _tasksAvailable.Set();
            }
            _noTasksLeft.WaitOne();
        }

        public object ExamineQueue( QueueExaminer examiner )
        {
            object o;
            lock(this)
            {
                o = examiner(_queue);
            }
            return o;
        }
            
        public int SubmitTask(IPrioritizedTask task)
        {
            int count;
            lock(this)
            {
                count = _queue.Insert(task);
                _tasksAvailable.Set();
            }
            return count;
        }

        public void FlushAllTasks()
        {
            lock(this)
            {
                _noTasksLeft.Reset();
                _enforceDelay = false;
                _tasksAvailable.Set();
            }
            _noTasksLeft.WaitOne();
            _enforceDelay = true;
        }
        
        public int TaskCount
        {
            get { return _queue.Count; }
        }

        private void ThreadLoop()
        {
            IPrioritizedTask nextTask;
            IPrioritizedTask processTask;
            TimeSpan delay;
            TimeSpan tempDelay;
            while (true)
            {
                try
                {
                    lock(this)
                    {
                        delay = TimeSpan.Zero;
                        nextTask = (IPrioritizedTask)_queue.PeekHead();
                        processTask = null;
                        if (nextTask == null)
                        {
                            _noTasksLeft.Set();
                            _tasksAvailable.Reset();
                        }
                        else
                        {
                            tempDelay = nextTask.Delay;
                            if (_enforceDelay && tempDelay > TimeSpan.Zero)
                            {
                                delay = tempDelay;
                                _tasksAvailable.Reset();
                            }
                            else
                            {
                                // We know we will consume the task, remove it from queue
                                processTask = (IPrioritizedTask)_queue.GetHead();
                                if (processTask != nextTask)
                                {
                                    EventBuilder.LogEvent(XEvent.Id.MC_APPLICATION_ERROR_5, "PrioritizedThreadPool processTask == nextTask assertion failed", null);
                                }
                            }
                        }
                    }

                    if (nextTask == null)
                    {
                        // no tasks available, wait until one is available
                        _tasksAvailable.WaitOne();
                    }
                    else
                    {
                        if (delay > TimeSpan.Zero)
                        {
                            // Wait until delayed task schedule time or event, whichever comes first
                            _tasksAvailable.WaitOne(delay,false);
                        }
                        else // do this task immediately
                        {
                            try
                            {
                                _taskHandler(processTask);
                            }
                            catch (Exception e)
                            {
                                EventBuilder.LogEvent(XEvent.Id.MC_APPLICATION_ERROR_6, "PrioritizedThreadPool task handler threw exception:", e);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    EventBuilder.LogEvent(XEvent.Id.MC_APPLICATION_ERROR_7, "PrioritizedThreadPool ThreadLoop threw exception:", e);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\MkcKeyLookup.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace xonline.common.utilities2
{
    /// <summary>
    /// Facade for key lookup against a IMultiKeyCollection.
    /// </summary>
    /// <typeparam name="TDescId">Type associated with unique descriptor identifier.</typeparam>
    /// <typeparam name="TKey">Type associated with key for the specified descriptor id.</typeparam>
    /// <typeparam name="TValue">Value type associated with the collection.</typeparam>
    public class MultiKeyLookup<TDescId, TKey, TValue> : IEnumerable<TKey>
    {
        IMultiKeyCollection<TDescId, TValue> owner;
        TDescId descId;

        /// <summary>
        /// Initializes a new instance of the MultiKeyLookup class.
        /// </summary>
        /// <param name="owner">Owner MultiKeyCollection.</param>
        /// <param name="descId">Descriptor id associated with the keys handled by this class.</param>
        public MultiKeyLookup(IMultiKeyCollection<TDescId, TValue> owner, TDescId descId)
        {
            if (null == owner)
            {
                throw new ArgumentNullException("owner");
            }

            if (null == descId)
            {
                throw new ArgumentNullException("descId");
            }

            this.owner = owner;
            this.descId = descId;
        }

        /// <summary>
        /// Gets the value associated with the specified key.
        /// </summary>
        /// <param name="key">Key to lookup.</param>
        /// <returns>Returns the value associated with the specified oridinal.</returns>
        public TValue this[TKey key]
        {
            get
            {
                return owner[descId, key];
            }
        }

        /// <summary>
        /// Determines whether the specified key is present under the specified key descriptor.
        /// </summary>
        /// <param name="id">Identifier associated with the target key descriptor.</param>
        /// <param name="key">Key associated with the target key descripotor to query against.</param>
        /// <returns>Return true if the key is present under the specified descriptor; otherwise, false.</returns>
        public bool ContainsKey(TKey key)
        {
            return owner.ContainsKey(descId, key);
        }

        /// <summary>
        /// Gets a value from the collection with the specified key.
        /// </summary>
        /// <param name="id">Identifer associated with the target key descriptor.</param>
        /// <param name="key">Key of the value under the specified key descriptor.</param>
        /// <param name="value">
        /// When this method returns, contains the value associated with the specified 
        /// key/descriptor pair, if both are found; otherwise, the default value for 
        /// the associated type.
        /// </param>
        /// <returns>Returns true when the value is found; otherwise, false.</returns>
        public bool TryGetValue(TKey key, out TValue value)
        {
            return owner.TryGetValue(descId, key, out value);
        }

        /// <summary>
        /// Returns an enumerator that iterates through a collection.
        /// </summary>
        /// <returns>An IEnumerator(TKey) object that can be used to iterate through the collection.</returns>
        public IEnumerator<TKey> GetEnumerator()
        {
            return owner.GetKeys<TKey>(descId).GetEnumerator();
        }

        /// <summary>
        /// Returns an enumerator that iterates through a collection
        /// </summary>
        /// <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return owner.GetKeys<TKey>(descId).GetEnumerator();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\SerializableDictionary.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

namespace xonline.common.utilities2
{
    #region SerializableDictionary

    // --------------------------------------------------------------------------------------
    // SerializableDictionary
    //
    // Basic generic Dictionary<,> that can be used with XmlSerialize. Borrowed from 
    // http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx.
    // --------------------------------------------------------------------------------------
    public class SerializableDictionary<TKey, TValue>
        : Dictionary<TKey, TValue>, IXmlSerializable
    {
        public SerializableDictionary()
            : base()
        {
        }

        public SerializableDictionary(IEqualityComparer<TKey> comparer)
            : base(comparer)
        {
        }

        public System.Xml.Schema.XmlSchema GetSchema()
        {
            return null;
        }

        public void ReadXml(System.Xml.XmlReader reader)
        {
            XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));
            XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

            bool wasEmpty = reader.IsEmptyElement;
            reader.Read();

            if (wasEmpty)
                return;

            while (reader.NodeType != System.Xml.XmlNodeType.EndElement)
            {
                reader.ReadStartElement("item");

                reader.ReadStartElement("key");
                TKey key = (TKey)keySerializer.Deserialize(reader);
                reader.ReadEndElement();

                reader.ReadStartElement("value");
                TValue value = (TValue)valueSerializer.Deserialize(reader);
                reader.ReadEndElement();

                this.Add(key, value);

                reader.ReadEndElement();
                reader.MoveToContent();
            }
            reader.ReadEndElement();
        }

        public void WriteXml(System.Xml.XmlWriter writer)
        {
            XmlSerializer keySerializer = new XmlSerializer(typeof(TKey));
            XmlSerializer valueSerializer = new XmlSerializer(typeof(TValue));

            foreach (TKey key in this.Keys)
            {
                writer.WriteStartElement("item");

                writer.WriteStartElement("key");
                keySerializer.Serialize(writer, key);
                writer.WriteEndElement();

                writer.WriteStartElement("value");
                TValue value = this[key];
                valueSerializer.Serialize(writer, value);
                writer.WriteEndElement();

                writer.WriteEndElement();
            }
        }
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\MkcMultiKeyCollection.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace xonline.common.utilities2
{
    /// <summary>
    /// Represents a collection of multiple key/value tuples.
    /// </summary>
    /// <typeparam name="TKeyId">Type associated with key identifier.</typeparam>
    /// <typeparam name="TValue">Type associated with values in the collection.</typeparam>
    public interface IMultiKeyCollection<TDescId, TValue> : ICollection<TValue>
    {
        /***** Descriptor Access *****/

        /// <summary>
        /// Get the IKeyDescriptor associated with the specified key identifier.
        /// </summary>
        /// <param name="id">Identifier associated with a descriptor.</param>
        /// <returns>Returns the IKeyDescriptor associated with the specified identifier.</returns>
        IKeyDescriptor<TDescId, TValue> this[TDescId id] { get; }

        /// <summary>
        /// Gets an enumerator of the key descriptors registered with this collection.
        /// </summary>
        IEnumerable<IKeyDescriptor<TDescId, TValue>> Descriptors { get; }

        /// <summary>
        /// Indicates whether a descriptor is mapped to the specified identifier.
        /// </summary>
        /// <param name="id">Descriptor identifier to perform the query against.</param>
        /// <returns>Returns true if a key descriptor is registered to the specified identifier; otherwise false.</returns>
        bool ContainsDescriptor(TDescId id);

        /// <summary>
        /// Gets the descriptor associated with the specified descriptor identifier.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="descriptor">
        /// When this method returns, contains the descriptor associated with the identifier if found; 
        /// otherwise, the default value for the associated type.
        /// </param>
        /// <returns>Returns true if the descriptor is found; otherwise, false.</returns>
        bool TryGetDescriptor(TDescId id, out IKeyDescriptor<TDescId, TValue> descriptor);

        /// <summary>
        /// Gets the strongly typed descriptor associated with the specified descriptor identifier.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="descriptor">
        /// When this method returns, contains the descriptor associated with the identifier if found; 
        /// otherwise, the default value for the associated type.
        /// </param>
        /// <returns>Returns true if the descriptor is found; otherwise, false.</returns>
        bool TryGetDescriptor<TKey>(TDescId id, out IKeyDescriptor<TDescId, TKey, TValue> descriptor);

        /// <summary>
        /// Rebuilds a key lookup table for the specified descriptor.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        void RebuildKey(TDescId id);

        /// <summary>
        /// Rebuilds the keys associated with the specified value.
        /// </summary>
        /// <param name="value">Value whose key set will be rebuilt for.</param>
        void RebuildValueKeys(TValue value);

        /***** Value Access *****/

        /// <summary>
        /// Gets the value associated with the specified key descriptor key.
        /// </summary>
        /// <param name="id">Identifier for the descriptor.</param>
        /// <param name="key">The key of the value to get.</param>
        /// <returns>Returns the value associated with the key descriptor key.</returns>
        TValue this[TDescId id, object key] { get; }

        /// <summary>
        /// Gets an enumerator for the values in this collection.
        /// </summary>
        IEnumerable<TValue> Values { get; }

        /// <summary>
        /// Gets an enumerator for the keys in the specified key descriptor.
        /// </summary>
        /// <typeparam name="TKey">Type associated with the keys being returned.</typeparam>
        /// <param name="id">Identifier for the target key descriptor.</param>
        /// <returns>Returns an enumerator for the keys of the specified descriptor.</returns>
        IEnumerable<TKey> GetKeys<TKey>(TDescId id);

        /// <summary>
        /// Determines whether the specified key is present under the specified key descriptor.
        /// </summary>
        /// <param name="id">Identifier associated with the target key descriptor.</param>
        /// <param name="key">Key associated with the target key descripotor to query against.</param>
        /// <returns>Return true if the key is present under the specified descriptor; otherwise, false.</returns>
        bool ContainsKey(TDescId id, object key);

        /// <summary>
        /// Adds multiple values to the collection.
        /// </summary>
        /// <param name="values">Enumeration of values to add.</param>
        void AddRange(IEnumerable<TValue> values);

        /// <summary>
        /// Removes an element from the collection via its key.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="key">Key associated with the value.</param>
        /// <returns>Return true if an item was removed; otherwise, false.</returns>
        bool Remove(TDescId id, object key);
        
        /// <summary>
        /// Gets a value from the collection with the specified key.
        /// </summary>
        /// <param name="id">Identifer associated with the target key descriptor.</param>
        /// <param name="key">Key of the value under the specified key descriptor.</param>
        /// <param name="value">
        /// When this method returns, contains the value associated with the specified 
        /// key/descriptor pair, if both are found; otherwise, the default value for 
        /// the associated type.
        /// </param>
        /// <returns>Returns true when the value is found; otherwise, false.</returns>
        bool TryGetValue(TDescId id, object key, out TValue value);
    }

    /// <summary>
    /// Represents a coupled-key associative collection of values.  In this construct multiple
    /// key mappings may be mapped to the values in this collection.
    /// </summary>
    /// <typeparam name="TDescId">Type associated with the key descriptor.</typeparam>
    /// <typeparam name="TValue">Type associated with the value.</typeparam>
    public class MultiKeyCollection<TDescId, TValue> : IMultiKeyCollection<TDescId, TValue>
    {
        private Dictionary<TDescId, DescriptorContext> descriptors;
        private LinkedList<TValue> values;
        private ReaderWriterLockSlim sync;
        private MultiKeyCollectionOptions<TDescId> options;

        #region Construction Helpers

        /// <summary>
        /// Initializes the descriptors.
        /// </summary>
        /// <param name="descriptors">Key descriptors to associate with the collection.</param>
        /// <param name="options">Key collection options.</param>
        private void InitializeDescriptors(IEnumerable<IKeyDescriptor<TDescId, TValue>> descriptors, MultiKeyCollectionOptions<TDescId> options)
        {
            this.options = options;
            this.options.NullOmittingDescriptors = null; // no need to persist this array

            if (null != descriptors)
            {
                TDescId[] nod; // null omitting descriptors

                nod = options.NullOmittingDescriptors ?? new TDescId[0];

                foreach (var descriptor in descriptors)
                {
                    DescriptorContext dc;
   
                    if (this.descriptors.ContainsKey(descriptor.Identifier))
                    {
                        throw new ArgumentException(
                            "Duplicate descriptor key for descriptor identifier: " + ((descriptor.Identifier == null) ? "(null)" : descriptor.Identifier.ToString()),
                            "descriptor");
                    }

                    dc = new DescriptorContext(descriptor);
                    dc.OmitNullKeys = nod.Contains(descriptor.Identifier);

                    this.descriptors.Add(descriptor.Identifier, dc);
                }
            }
        }

        #endregion

        /// <summary>
        /// Initializes a new instance of the MultiKeyCollection.
        /// </summary>
        private MultiKeyCollection()
        {
            this.descriptors = new Dictionary<TDescId, DescriptorContext>();
            this.sync = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
            this.values = new LinkedList<TValue>();
        }

        /// <summary>
        /// Initializes a new instance of the MultiKeyCollection.
        /// </summary>
        /// <param name="descriptors">Key descriptors to associate with the collection.</param>
        public MultiKeyCollection(params IKeyDescriptor<TDescId, TValue>[] descriptors) : this()
        {
            InitializeDescriptors(descriptors, new MultiKeyCollectionOptions<TDescId>());
        }

        /// <summary>
        /// Initializes a new instance of the MultiKeyCollection.
        /// </summary>
        /// <param name="descriptors">Key descriptors to associate with the collection.</param>
        public MultiKeyCollection(IEnumerable<IKeyDescriptor<TDescId, TValue>> descriptors) : this()
        {
            InitializeDescriptors(descriptors, new MultiKeyCollectionOptions<TDescId>());
        }

        /// <summary>
        /// Initializes a new instance of the MultiKeyCollection.
        /// </summary>
        /// <param name="options">Key collection options.</param>
        /// <param name="descriptors">Key descriptors to associate with the collection.</param>
        public MultiKeyCollection(MultiKeyCollectionOptions<TDescId> options, IEnumerable<IKeyDescriptor<TDescId, TValue>> descriptors) : this()
        {
            InitializeDescriptors(descriptors, options);
        }

        /// <summary>
        /// Initializes a new instance of the MultiKeyCollection.
        /// </summary>
        /// <param name="options">Key collection options.</param>
        /// <param name="descriptors">Key descriptors to associate with the collection.</param>
        public MultiKeyCollection(MultiKeyCollectionOptions<TDescId> options, params IKeyDescriptor<TDescId, TValue>[] descriptors)
            : this()
        {
            InitializeDescriptors(descriptors, options);
        }

        /// <summary>
        /// Get the IKeyDescriptor associated with the specified key identifier.
        /// </summary>
        /// <param name="id">Identifier associated with a descriptor.</param>
        /// <returns>Returns the IKeyDescriptor associated with the specified identifier.</returns>
        public IKeyDescriptor<TDescId, TValue> this[TDescId id]
        {
            get 
            {
                Sync.EnterReadLock();

                try
                {
                    return descriptors[id].Descriptor;
                }
                finally
                {
                    Sync.ExitReadLock();
                }
            }
        }

        /// <summary>
        /// Gets the ReaderWriterLockSlim used internally for synchronization to allow
        /// for external consumer synchronization.
        /// </summary>
        public ReaderWriterLockSlim Sync
        {
            get
            {
                return sync;
            }
        }

        /// <summary>
        /// Gets an enumerator of the key descriptors registered with this collection.
        /// </summary>
        public IEnumerable<IKeyDescriptor<TDescId, TValue>> Descriptors
        {
            get 
            {
                Sync.EnterReadLock();

                try
                {
                    return descriptors.Values.Select(dc => dc.Descriptor);
                }
                finally
                {
                    Sync.ExitReadLock();
                }
            }
        }

        /// <summary>
        /// Indicates whether a descriptor is mapped to the specified identifier.
        /// </summary>
        /// <param name="id">Descriptor identifier to perform the query against.</param>
        /// <returns>Returns true if a key descriptor is registered to the specified identifier; otherwise false.</returns>
        public bool ContainsDescriptor(TDescId id)
        {
            Sync.EnterReadLock();

            try
            {
                return descriptors.ContainsKey(id);
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Gets the descriptor associated with the specified descriptor identifier.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="descriptor">
        /// When this method returns, contains the descriptor associated with the identifier if found; 
        /// otherwise, the default value for the associated type.
        /// </param>
        /// <returns>Returns true if the descriptor is found; otherwise, false.</returns>
        public bool TryGetDescriptor(TDescId id, out IKeyDescriptor<TDescId, TValue> descriptor)
        {
            Sync.EnterReadLock();

            try
            {
                DescriptorContext desc;

                if (descriptors.TryGetValue(id, out desc))
                {
                    descriptor = desc.Descriptor;
                    return true;
                }

                descriptor = null;

                return false;
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Gets the strongly typed descriptor associated with the specified descriptor identifier.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="descriptor">
        /// When this method returns, contains the descriptor associated with the identifier if found; 
        /// otherwise, the default value for the associated type.
        /// </param>
        /// <returns>Returns true if the descriptor is found; otherwise, false.</returns>
        public bool TryGetDescriptor<TKey>(TDescId id, out IKeyDescriptor<TDescId, TKey, TValue> descriptor)
        {
            Sync.EnterReadLock();

            try
            {
                DescriptorContext desc;

                if (descriptors.TryGetValue(id, out desc))
                {
                    if (desc.Descriptor is IKeyDescriptor<TDescId, TKey, TValue>)
                    {
                        descriptor = (IKeyDescriptor<TDescId, TKey, TValue>)desc.Descriptor;
                        return true;
                    }
                }

                descriptor = null;

                return false;
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Rebuilds a key lookup table for the specified descriptor.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <remarks>
        /// This construct is ideal for structures with read-only keys, but
        /// when they are not, this method should be invoked to rebuild the
        /// key table.  In the event that a duplicate is found an exception
        /// will be throw, the collection will be left in the same state it
        /// was in prior to invoking this method.
        /// </remarks>
        public void RebuildKey(TDescId id)
        {
            Sync.EnterWriteLock();

            try
            {
                DescriptorContext oldDesc;

                if (descriptors.TryGetValue(id, out oldDesc))
                {
                    DescriptorContext newDesc;
                    var value = values.First;

                    newDesc = new DescriptorContext(oldDesc.Descriptor);
                    newDesc.OmitNullKeys = oldDesc.OmitNullKeys;

                    while (value != null)
                    {
                        object key;

                        key = oldDesc.Descriptor.KeyExtractor(value.Value);

                        // add null keys only if permitted
                        if (null != key)
                        {
                            if (newDesc.Values.ContainsKey(key))
                            {
                                throw new ArgumentException(
                                    string.Format("Duplicate key found for descriptor identifier: {0}, key: {1}", ((id == null) ? "(null)" : id.ToString()), key), 
                                    "id");
                            }

                            newDesc.Values.Add(key, value);
                        }
                        else if (newDesc.OmitNullKeys == false)
                        {
                            throw new ArgumentException("Null key for descriptor identifier: " + ((id == null) ? "(null)" : id.ToString()), "id");
                        }

                        value = value.Next;
                    }

                    descriptors[id] = newDesc;

                    oldDesc.Values.Clear();
                }
                else
                {
                    throw new ArgumentException(
                        "Descriptor not found with identifier: " + ((id == null) ? "(null)" : id.ToString()),
                        "id");
                }
            }
            finally
            {
                Sync.ExitWriteLock();
            }
        }

        /// <summary>
        /// Rebuilds the keys associated with the specified value.
        /// </summary>
        /// <param name="value">Value whose key set will be rebuilt for.</param>
        /// <remarks>
        /// This construct is ideal for structures with read-only keys, but
        /// when they are not, this method should be invoked to rebuild the
        /// key table.  Encountering an exception here may leave the collection 
        /// in a bad state.
        /// </remarks>
        public void RebuildValueKeys(TValue value)
        {
            LinkedListNode<TValue> target;

            Sync.EnterUpgradeableReadLock();

            try
            {
                // locate the correct linked list node
                target = values.Find(value);
                
                if (null == target)
                {
                    throw new ArgumentException("The specified value is not a member of the collection.", "value");
                }

                Sync.EnterWriteLock();

                try
                {
                    // remove mapping via value (instead of key)
                    foreach (var desc in descriptors.Values)
                    {
                        var pair = desc.Values.FirstOrDefault(p => p.Value == target);

                        // item may not be present if key is null
                        if (null != pair.Value)
                        {
                            desc.Values.Remove(pair.Key);
                        }
                    }

                    // remove the value for the linked list
                    values.Remove(target);
                }
                finally
                {
                    Sync.ExitWriteLock();
                }

                // add the item to the collection
                Add(value);
            }
            finally
            {
                Sync.ExitUpgradeableReadLock();
            }
        }

        /// <summary>
        /// Gets the value associated with the specified key descriptor key.
        /// </summary>
        /// <param name="id">Identifier for the descriptor.</param>
        /// <param name="key">The key of the value to get.</param>
        /// <returns>Returns the value associated with the key descriptor key.</returns>
        public TValue this[TDescId id, object key]
        {
            get
            {
                Sync.EnterReadLock();

                try
                {
                    return descriptors[id].Values[key].Value;
                }
                finally
                {
                    Sync.ExitReadLock();
                }
            }
        }

        /// <summary>
        /// Gets an enumerator for the values in this collection.
        /// </summary>
        public IEnumerable<TValue> Values
        {
            get
            {
                Sync.EnterReadLock();

                try
                {
                    return values.AsEnumerable();
                }
                finally
                {
                    Sync.ExitReadLock();
                }
            }
        }

        /// <summary>
        /// Gets an enumerator for the keys in the specified key descriptor.
        /// </summary>
        /// <typeparam name="TKey">Type associated with the keys being returned.</typeparam>
        /// <param name="id">Identifier for the target key descriptor.</param>
        /// <returns>Returns an enumerator for the keys of the specified descriptor.</returns>
        public IEnumerable<TKey> GetKeys<TKey>(TDescId id)
        {
            Sync.EnterReadLock();

            try
            {
                return descriptors[id].Values.Keys.Cast<TKey>();
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Determines whether the specified key is present under the specified key descriptor.
        /// </summary>
        /// <param name="id">Identifier associated with the target key descriptor.</param>
        /// <param name="key">Key associated with the target key descripotor to query against.</param>
        /// <returns>Return true if the key is present under the specified descriptor; otherwise, false.</returns>
        public bool ContainsKey(TDescId id, object key)
        {
            Sync.EnterReadLock();

            try
            {
                DescriptorContext dc;

                if (descriptors.TryGetValue(id, out dc))
                {
                    return dc.Values.ContainsKey(key);
                }

                return false;
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Removes an element from the collection via its key.
        /// </summary>
        /// <param name="id">Identifier associated with the key descriptor.</param>
        /// <param name="key">Key associated with the value.</param>
        /// <returns>Return true if an item was removed; otherwise, false.</returns>
        public bool Remove(TDescId id, object key)
        {
            Sync.EnterUpgradeableReadLock();

            try
            {
                DescriptorContext dc;

                if (descriptors.TryGetValue(id, out dc))
                {
                    LinkedListNode<TValue> node;

                    if (dc.Values.TryGetValue(key, out node))
                    {
                        Remove(node);

                        return true;
                    }
                }

                return false;
            }
            finally
            {
                Sync.ExitUpgradeableReadLock();
            }
        }

        /// <summary>
        /// Gets a value from the collection with the specified key.
        /// </summary>
        /// <param name="id">Identifer associated with the target key descriptor.</param>
        /// <param name="key">Key of the value under the specified key descriptor.</param>
        /// <param name="value">
        /// When this method returns, contains the value associated with the specified 
        /// key/descriptor pair, if both are found; otherwise, the default value for 
        /// the associated type.
        /// </param>
        /// <returns>Returns true when the value is found; otherwise, false.</returns>
        public bool TryGetValue(TDescId id, object key, out TValue value)
        {
            Sync.EnterReadLock();

            try
            {
                DescriptorContext dc;

                if (descriptors.TryGetValue(id, out dc))
                {
                    LinkedListNode<TValue> node;

                    if (dc.Values.TryGetValue(key, out node))
                    {
                        value = node.Value;

                        return true;
                    }
                }

                value = default(TValue);

                return false;
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Adds a new item to the collection.  The keys will automatically be
        /// associated with this item.
        /// </summary>
        /// <param name="item">Item to add to the collection.</param>
        public void Add(TValue item)
        {
            Sync.EnterUpgradeableReadLock();

            try
            {
                var keys = new List<KeyValuePair<DescriptorContext, object>>();

                // Verify that there are no duplicate keys
                foreach (var descriptor in descriptors.Values)
                {
                    TDescId id;
                    object key;

                    key = descriptor.Descriptor.KeyExtractor(item);
                    id = descriptor.Descriptor.Identifier;

                    // add null keys only if permitted
                    if (null != key)
                    {
                        if (descriptor.Values.ContainsKey(key))
                        {
                            throw new ArgumentException(
                                string.Format("Duplicate key found for descriptor identifier: {0}, key: {1}", ((id == null) ? "(null)" : id.ToString()), key),
                                "id");
                        }

                        keys.Add(new KeyValuePair<DescriptorContext, object>(descriptor, key));
                    }
                    else if (descriptor.OmitNullKeys == false)
                    {
                        throw new ArgumentException("Null key for descriptor identifier: " + ((id == null) ? "(null)" : id.ToString()), "id");
                    }
                }

                Sync.EnterWriteLock();

                try
                {
                    // Create the linked list node
                    var node = values.AddFirst(item);

                    // Attach the node to each key
                    foreach (var key in keys)
                    {
                        key.Key.Values.Add(key.Value, node);
                    }
                }
                finally
                {
                    Sync.ExitWriteLock();
                }
            }
            finally
            {
                Sync.ExitUpgradeableReadLock();
            }
        }

        /// <summary>
        /// Removes all values and key mappings in this collection.
        /// </summary>
        public void Clear()
        {
            Sync.EnterWriteLock();

            try
            {
                values.Clear();

                foreach (var descriptor in descriptors.Values)
                {
                    descriptor.Values.Clear();
                }
            }
            finally
            {
                Sync.ExitWriteLock();
            }
        }

        /// <summary>
        /// Determines whether the specified item is present in the collection.
        /// </summary>
        /// <remarks>
        /// This lookup is done against the collection instead of the key mappings.  There is
        /// a linear cost to this lookup.
        /// </remarks>
        /// <param name="item">Value in the collection to lookup.</param>
        /// <returns>Returns true if the item is found; otherwise, false.</returns>
        public bool Contains(TValue item)
        {
            Sync.EnterReadLock();

            try
            {
                return values.Contains(item);
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Copies the entire collection to a compatible one-dimensional array, 
        /// starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">
        /// The one-dimensional array that is the destination of the elements copied 
        /// from the collection.
        /// </param>
        /// <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        public void CopyTo(TValue[] array, int arrayIndex)
        {
            Sync.EnterReadLock();

            try
            {
                values.CopyTo(array, arrayIndex);
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Gets the number of elements in the collection.
        /// </summary>
        public int Count
        {
            get
            {
                Sync.EnterReadLock();

                try
                {
                    return values.Count;
                }
                finally
                {
                    Sync.ExitReadLock();
                }
            }
        }

        /// <summary>
        /// Gets a value indicating whether the collection is read-only. This property 
        /// always returns false, indicating that the collection can be updated.
        /// </summary>
        public bool IsReadOnly
        {
            get
            {
                return false;
            }
        }

        /// <summary>
        /// Adds multiple values to the collection.
        /// </summary>
        /// <param name="values">Enumeration of values to add.</param>
        public void AddRange(IEnumerable<TValue> values)
        {
            if (null != values)
            {
                Sync.EnterWriteLock();

                try
                {
                    foreach (var value in values)
                    {
                        Add(value);
                    }
                }
                finally
                {
                    Sync.ExitWriteLock();
                }
            }
        }

        /// <summary>
        /// Removes a value and key mappings from the collection.
        /// </summary>
        /// <param name="item">Value to remove from the collection.</param>
        /// <returns>Returns true if an item was removed; otherwise, false.</returns>
        public bool Remove(TValue item)
        {
            Sync.EnterUpgradeableReadLock();

            try
            {
                var node = values.Find(item);

                if (null != node)
                {
                    Remove(node);

                    return true;
                }

                return false;
            }
            finally
            {
                Sync.ExitUpgradeableReadLock();
            }
        }

        /// <summary>
        /// Removes a value and key mappings from the collection.
        /// </summary>
        /// <param name="node">Node in the linked list to remove.</param>
        private void Remove(LinkedListNode<TValue> node)
        {
            Sync.EnterWriteLock();

            try
            {
                foreach (var descriptor in descriptors.Values)
                {
                    LinkedListNode<TValue> target;
                    object key;
                    TDescId id;

                    key = descriptor.Descriptor.KeyExtractor(node.Value);
                    id = descriptor.Descriptor.Identifier;

                    // Attempt to quickly remove the node via a current key.

                    if (null != key)
                    {
                        if (descriptor.Values.TryGetValue(key, out target))
                        {
                            if (node == target)
                            {
                                descriptor.Values.Remove(key);

                                continue;
                            }
                        }
                    }

                    // Key not current or null, perform collection scan for node.

                    var pair = descriptor.Values.FirstOrDefault(p => p.Value == node);

                    if (pair.Value == node)
                    {
                        descriptor.Values.Remove(pair.Key);

                        continue;
                    }
                    else if (key != null)
                    {
                        // Impossible!!
                        throw new InvalidOperationException(
                            string.Format("Unable to remove element due to null key for key descriptor: {0}", id));
                    }
                    else if (descriptor.OmitNullKeys == false)
                    {
                        // Impossible!!
                        throw new InvalidOperationException(
                            string.Format("Null key found for non-null omitting key descriptor: {0}", id));
                    }
                }

                values.Remove(node);
            }
            finally
            {
                Sync.ExitWriteLock();
            }
        }

        /// <summary>
        /// Gets a typed enumerator for the values in the collection.
        /// </summary>
        /// <returns>Returns an enumerator of the values in the collection.</returns>
        public IEnumerator<TValue> GetEnumerator()
        {
            Sync.EnterReadLock();

            try
            {
                return values.GetEnumerator();
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        /// <summary>
        /// Gets an untyped enumerator for the values in the collection.
        /// </summary>
        /// <returns>Returns an enumerator of the values in the collection.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            Sync.EnterReadLock();

            try
            {
                return values.GetEnumerator();
            }
            finally
            {
                Sync.ExitReadLock();
            }
        }

        #region Support Classes

        /// <summary>
        /// Key descriptor wrapper class that pairs the key descriptor with
        /// the value lookup dictionary.
        /// </summary>
        private class DescriptorContext
        {
            /// <summary>
            /// Initializes a DescriptorContext.
            /// </summary>
            /// <param name="descriptor">Key descriptor to associate with the context.</param>
            public DescriptorContext(IKeyDescriptor<TDescId, TValue> descriptor)
            {
                Values = new Dictionary<object, LinkedListNode<TValue>>();
                Descriptor = descriptor;
            }

            /// <summary>
            /// Gets the key descriptor.
            /// </summary>
            public IKeyDescriptor<TDescId, TValue> Descriptor
            {
                get;
                private set;
            }

            /// <summary>
            /// Gets the value lookup dictionary.
            /// </summary>
            public Dictionary<object, LinkedListNode<TValue>> Values
            {
                get;
                private set;
            }

            /// <summary>
            /// Gets or sets a value indicating whether null keys are omitted.
            /// </summary>
            public bool OmitNullKeys
            {
                get;
                set;
            }

            /// <summary>
            /// Gets the string representation of this object.
            /// </summary>
            /// <returns>Returns the string representation of this object.</returns>
            public override string ToString()
            {
                return string.Format("({0}, OmitNullKeys={1})", Descriptor, OmitNullKeys);
            }
        }

        #endregion
    }

    /// <summary>
    /// Behavior options for MultiKeyCollection.
    /// </summary>
    public struct MultiKeyCollectionOptions<TDescId>
    {
        /// <summary>
        /// Gets or sets an array of key descriptors which omit null
        /// keys.
        /// </summary>
        public TDescId[] NullOmittingDescriptors
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\utilities\XmlUtil.cs ===
//
// XmlUtil.cs
//
// Pretty-print XML documents into a formatted string
//

using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace xonline.common.utilities2
{
    //
    // XmlPrettyPrint
    //

    [ComVisible(false)]
    public class XmlUtil
    {
        public static string PrettyPrint(string xml)
        {
            return PrettyPrint(xml, 4);
        }

        public static string PrettyPrint(string xml, int indentLevel)
        {
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(xml);
            return PrettyPrint(xmlDoc, indentLevel);
        }

        public static string PrettyPrint(XmlDocument xmlDoc)
        {
            return PrettyPrint(xmlDoc, 4);
        }

        public static string PrettyPrint(XmlDocument xmlDoc, int indentLevel)
        {
            StringWriter sw = new StringWriter();

            XmlTextWriter xw = new XmlTextWriter(sw);
            xw.Namespaces = true;
            xw.Formatting = Formatting.Indented;
            xw.Indentation = indentLevel;
            xw.QuoteChar = '\'';
            xmlDoc.WriteTo(xw);
            xw.Close();

            // return the pretty-printed XML string
            return sw.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wiredata\ILGeneratorWrapper.cs ===
using System;
using System.Diagnostics.SymbolStore;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace xonline.core.wiredata
{
    public class ILGeneratorWrapper
    {
        protected ILGenerator _ilgen;
        
        public ILGeneratorWrapper(ILGenerator ilgen) {
            _ilgen = ilgen;
        }
    
        public virtual void BeginCatchBlock(Type exceptionType) {
            _ilgen.BeginCatchBlock(exceptionType);
        }
        
        public virtual void BeginExceptFilterBlock() {
            _ilgen.BeginExceptFilterBlock();
        }        
        
        public virtual Label BeginExceptionBlock() {
            return _ilgen.BeginExceptionBlock();
        }
        
        public virtual void BeginFaultBlock() {
            _ilgen.BeginFaultBlock();
        }

        public virtual void BeginFinallyBlock() {
            _ilgen.BeginFinallyBlock();
        }
        
        public virtual void BeginScope() {
            _ilgen.BeginScope();
        }

        public virtual LocalBuilder DeclareLocal(Type localType) {
            return _ilgen.DeclareLocal(localType);
        }

        public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) {
            return _ilgen.DeclareLocal(localType, pinned);
        }

        public virtual Label DefineLabel() {
            return _ilgen.DefineLabel();
        }
        
        public virtual void Emit(OpCode opcode) {
            _ilgen.Emit(opcode);
        }
        
        public virtual void Emit(OpCode opcode, byte arg) {
            _ilgen.Emit(opcode, arg);
        }

        [ComVisible(true)]
        public virtual void Emit(OpCode opcode, ConstructorInfo con) {
            _ilgen.Emit(opcode, con);
        }

        public virtual void Emit(OpCode opcode, double arg) {
            _ilgen.Emit(opcode, arg);
        }

        public virtual void Emit(OpCode opcode, FieldInfo field) {
            _ilgen.Emit(opcode, field);
        }

        public virtual void Emit(OpCode opcode, float arg) {
            _ilgen.Emit(opcode, arg);
        }

        public virtual void Emit(OpCode opcode, int arg) {
            _ilgen.Emit(opcode, arg);
        }
        
        public virtual void Emit(OpCode opcode, Label label) {
            _ilgen.Emit(opcode, label);
        }

        public virtual void Emit(OpCode opcode, Label[] labels) {
            _ilgen.Emit(opcode, labels);
        }
        
        public virtual void Emit(OpCode opcode, LocalBuilder local) {
            _ilgen.Emit(opcode, local);
        }
        
        public virtual void Emit(OpCode opcode, long arg) {
            _ilgen.Emit(opcode, arg);
        }

        public virtual void Emit(OpCode opcode, MethodInfo meth) {
            _ilgen.Emit(opcode, meth);
        }

        public void Emit(OpCode opcode, sbyte arg) {
            _ilgen.Emit(opcode, arg);
        }

        public virtual void Emit(OpCode opcode, short arg) {
            _ilgen.Emit(opcode, arg);
        }

        public virtual void Emit(OpCode opcode, SignatureHelper signature) {
            _ilgen.Emit(opcode, signature);
        }

        public virtual void Emit(OpCode opcode, string str) {
            _ilgen.Emit(opcode, str);
        }
        
        public virtual void Emit(OpCode opcode, Type cls) {
            _ilgen.Emit(opcode, cls);
        }

        public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) {
            _ilgen.EmitCall(opcode, methodInfo, optionalParameterTypes);
        }

        public virtual void EmitCalli(OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes) {
            _ilgen.EmitCalli(opcode, unmanagedCallConv, returnType, parameterTypes);
        }

        public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes) {
            _ilgen.EmitCalli(opcode, callingConvention, returnType, parameterTypes, optionalParameterTypes);
        }
        
        public virtual void EmitWriteLine(FieldInfo fld) {
            _ilgen.EmitWriteLine(fld);
        }
        
        public virtual void EmitWriteLine(LocalBuilder localBuilder) {
            _ilgen.EmitWriteLine(localBuilder);
        }
        
        public virtual void EmitWriteLine(string value) {
            _ilgen.EmitWriteLine(value);
        }
        
        public virtual void EndExceptionBlock() {
            _ilgen.EndExceptionBlock();
        }
        
        public virtual void EndScope() {
            _ilgen.EndScope();
        }
        
        public virtual void MarkLabel(Label loc) {
            _ilgen.MarkLabel(loc);
        }

        public virtual void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn) {
            _ilgen.MarkSequencePoint(document, startLine, startColumn, endLine, endColumn);
        }
        
        public virtual void ThrowException(Type excType) {
            _ilgen.ThrowException(excType);
        }
        
        public virtual void UsingNamespace(string usingNamespace) {
            _ilgen.UsingNamespace(usingNamespace);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wiredata\WireDataGenerator.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Reflection;
using System.Reflection.Emit;

// need to make this go away
using xonline.common.service;

namespace xonline.core.wiredata
{
    public class WireDataGenerator : ILGeneratorWrapper
    {

        public WireDataGenerator(MethodBuilder methodBuilder) : base(methodBuilder.GetILGenerator())
        {
        }

        public void EmitArrayLength(Action loadField)
        {
            EmitArrayLength(loadField, false);
        }

        public void EmitArrayLength(Action loadField, bool shouldBox)
        {
            loadField();
            Emit(OpCodes.Ldlen);
            if (shouldBox)
            {
                Emit(OpCodes.Box, typeof(int));
            }
        }

        public void EmitClassConvert(Type fromType, Type toType)
        {
            string convertMethod;

            if (toType == typeof(byte) || toType == typeof(sbyte) ||
                toType == typeof(short) || toType == typeof(ushort) ||
                toType == typeof(int) || toType == typeof(uint) ||
                toType == typeof(long) || toType == typeof(ulong) ||
                toType == typeof(char) || toType == typeof(bool) ||
                toType == typeof(float) || toType == typeof(double) ||
                toType == typeof(decimal) || toType == typeof(DateTime)
                )
            {
                convertMethod = "To" + toType.Name;
            }
            else
            {
                throw new Exception("Unsupported type for conversion: " + toType.FullName);
            }

            Emit(OpCodes.Call, typeof(Convert).GetMethod(convertMethod,
                        BindingFlags.DeclaredOnly | BindingFlags.ExactBinding | BindingFlags.Public | BindingFlags.Static,
                        null,
                        new Type[] { fromType },
                        null));

        }

        public void EmitConst(int val)
        {
            EmitConst(typeof(int), val);
        }

        public void EmitConst(Type forType, int val)
        {
            if (forType == typeof(bool) || forType == typeof(sbyte) ||
                forType == typeof(byte) || forType == typeof(char) ||
                forType == typeof(Int16) || forType == typeof(UInt16) ||
                forType == typeof(Int32) || forType == typeof(UInt32))
            {
                switch (val)
                {
                    case -1:
                        Emit(OpCodes.Ldc_I4_M1);
                        break;
                    case 0:
                        EmitZero(forType);
                        break;
                    case 1:
                        Emit(OpCodes.Ldc_I4_1);
                        break;
                    case 2:
                        Emit(OpCodes.Ldc_I4_2);
                        break;
                    case 3:
                        Emit(OpCodes.Ldc_I4_3);
                        break;
                    case 4:
                        Emit(OpCodes.Ldc_I4_4);
                        break;
                    case 5:
                        Emit(OpCodes.Ldc_I4_5);
                        break;
                    case 6:
                        Emit(OpCodes.Ldc_I4_6);
                        break;
                    case 7:
                        Emit(OpCodes.Ldc_I4_7);
                        break;
                    case 8:
                        Emit(OpCodes.Ldc_I4_8);
                        break;
                    default:
                        if (val > -128 && val <= 128)
                        {
                            Emit(OpCodes.Ldc_I4_S, unchecked((byte)val));
                        }
                        else
                        {
                            Emit(OpCodes.Ldc_I4, val);
                        }
                        break;
                }
            }
            else if (forType == typeof(Int64) || forType == typeof(UInt64))
            {
                Emit(OpCodes.Ldc_I8, (long)val);
            }
            //else if (forType == typeof(decimal))
            //{
            //    Emit(OpCodes.Ldfld, typeof(decimal).GetField("Zero", BindingFlags.public | BindingFlags.Public));
            //}
            else if (forType == typeof(float))
            {
                Emit(OpCodes.Ldc_R4, (float)val);
            }
            else if (forType == typeof(double))
            {
                Emit(OpCodes.Ldc_R8, (double)val);
            }
            else
            {
                throw new Exception("Can't load a constant value for type " + forType.Name);
            }
        }

        // Emit a OpCodes.Conv_* instruction based on a type.
        public void EmitConvert(Type type)
        {
            OpCode opcode =
                type == typeof(byte) || type == typeof(sbyte) ? OpCodes.Conv_I1 :
                type == typeof(UInt16) || type == typeof(Int16) ? OpCodes.Conv_I2 :
                type == typeof(UInt32) || type == typeof(Int32) ? OpCodes.Conv_I4 :
                type == typeof(UInt64) || type == typeof(Int64) ? OpCodes.Conv_I8 :
                OpCodes.Nop;

            if (opcode == OpCodes.Nop)
            {
                throw new Exception();
            }

            Emit(opcode);
        }

        public void EmitDelegateCall(string str)
        {
            EmitDelegateCall(delegate() { Emit(OpCodes.Ldstr, str); });
        }

        public void EmitDelegateCall(Action loadString)
        {
            //EmitNullCheck(
            //    ilgen,
            //    delegate()
            //    {
            //        Emit(OpCodes.Ldloc_0);
            //        Emit(OpCodes.Ldfld, typeof(WireData).GetField("fieldDelegate"));
            //    },
            //    delegate()
            //    {
            //        Emit(OpCodes.Ldloc_0);
            //        Emit(OpCodes.Ldfld, typeof(WireData).GetField("fieldDelegate"));
            //        loadString();
            //        Emit(OpCodes.Callvirt, typeof(DebugTraceHandler).GetMethod("Invoke"));
            //    },
            //    null);
        }

        // Emit IL to generate a incremental loop. The emitWork delegate will be used to 
        // generate the work done by the loop (it includes a reference to the local 
        // contains the index). The emitLength delegate will be used to push the value 
        // that the index will be compared against (e.g. the size of an array).
        public void EmitIncrementalLoop(
            Action<LocalBuilder> emitWork,
            Action<LocalBuilder> emitLength
        )
        {
            LocalBuilder i = DeclareLocal(typeof(int));
            Label labelBegin = DefineLabel();
            Label labelEnd = DefineLabel();

            // Initialize i and jump to the bottom of the for
            EmitZero();
            Emit(OpCodes.Stloc, i);
            Emit(OpCodes.Br, labelEnd);

            // Emit Work
            MarkLabel(labelBegin);
            emitWork(i);

            // Increment i 
            Emit(OpCodes.Ldloc, i);
            EmitConst(1);
            Emit(OpCodes.Add);
            Emit(OpCodes.Stloc, i);

            // Jump to beginning of the loop if i < length
            MarkLabel(labelEnd);
            Emit(OpCodes.Ldloc, i);
            emitLength(i);
            Emit(OpCodes.Blt, labelBegin);
        }

        public void EmitLoad(FieldInfo fieldInfo)
        {
            LoadDelegate(fieldInfo)();
        }

        public void EmitLoadAddress(FieldInfo fieldInfo)
        {
            LoadAddressDelegate(fieldInfo)();
        }

        // Emit the first instructions in a method.
        public void EmitMethodHeader(Type type)
        {
            // The signature of the method takes an 'object' not the type of the class. To 
            // simplify things, we'll use the first local (index 0) to store the object 
            // cast'd to type.
            DeclareLocal(type);
            Emit(OpCodes.Ldarg_0);
            Emit(OpCodes.Castclass, type);
            Emit(OpCodes.Stloc_0);
        }

        public void EmitMinMaxCheck(
            uint minValue,
            uint maxValue,
            Action loadTask,
            Action emitTask
        )
        {
            Label labelSkipTask = DefineLabel();

            if (minValue > 0)
            {
                Emit(OpCodes.Ldloc_0);
                loadTask();
                EmitConst((int)minValue);
                Emit(OpCodes.Blt_Un, labelSkipTask);
            }

            if (maxValue < uint.MaxValue)
            {
                Emit(OpCodes.Ldloc_0);
                loadTask();
                EmitConst((int)maxValue);
                Emit(OpCodes.Bgt_Un, labelSkipTask);
            }

            emitTask();

            MarkLabel(labelSkipTask);
        }

        public void EmitNullCheck(
            Action loadField,
            Action emitTask
        ) {
            EmitNullCheck(loadField, emitTask, null);
        }

        public void EmitNullCheck(
            Action loadField,
            Action emitTask,
            Action emitIsNullTask
        )
        {
            Label labelIsNullTask = DefineLabel();

            loadField();
            Emit(OpCodes.Brfalse, labelIsNullTask);

            emitTask();

            if (emitIsNullTask != null)
            {
                Label labelSkipTask = DefineLabel();
                Emit(OpCodes.Br, labelSkipTask);
                MarkLabel(labelIsNullTask);
                emitIsNullTask();
                MarkLabel(labelSkipTask);
            }
            else
            {
                MarkLabel(labelIsNullTask);
            }
        }

        public void EmitStringConcat(params object[] args)
        {
            EmitStringConcatHelper(false, args);
        }

        public void EmitStringConcatAllStrings(params object[] args)
        {
            EmitStringConcatHelper(true, args);
        }

        public void EmitStringConcatHelper(bool forceAllStrings, params object[] args)
        {
            Type[] toStringParams;

            if (args.Length == 0)
            {
                Emit(OpCodes.Ldstr, String.Empty);
                return;
            }

            Type arrType = (Array.Exists(args, (o) => o is Action) &&
                            !forceAllStrings) ? typeof(object[]) : typeof(string[]);

            bool useArray = args.Length > 4 || (args.Length == 4 && arrType == typeof(object[]));

            LocalBuilder arrLoc = null;
            if (useArray)
            {
                arrLoc = DeclareLocal(arrType);
                EmitConst(args.Length);
                Emit(OpCodes.Newarr, arrType.GetElementType());
                Emit(OpCodes.Stloc, arrLoc);
            }

            bool allString = true;
            for (int i=0; i < args.Length; i++)
            {
                object o = args[i];
                if (useArray)
                {
                    Emit(OpCodes.Ldloc, arrLoc);
                    EmitConst(i);
                }
                if (o is string)
                {
                    Emit(OpCodes.Ldstr, (string)o);
                }
                else if (o is Action)
                {
                    ((Action)o)();
                    allString = forceAllStrings;
                }
                else
                {
                    Emit(OpCodes.Ldstr, o.ToString());
                }
                if (useArray)
                {
                    Emit(OpCodes.Stelem_Ref);
                }
            }

            if (useArray)
            {
                Emit(OpCodes.Ldloc, arrLoc);

                Type param = allString ? typeof(string[]) : typeof(object[]);
                toStringParams = new Type[] { param };
            }
            else
            {
                Type param = allString ? typeof(string) : typeof(object);
                toStringParams = new Type[args.Length];
                for (int i = 0; i < args.Length; i++)
                {
                    toStringParams[i] = param;
                }
            }

            EmitCall(OpCodes.Call, typeof(string).GetMethod("Concat", toStringParams), null);
        }

        public void EmitThrowException(string message)
        {
            EmitThrowException(typeof(Exception),
                delegate()
                {
                    Emit(OpCodes.Ldstr, message);
                });
        }

        public void EmitThrowException(Action loadMsg)
        {
            EmitThrowException(typeof(Exception), loadMsg);
        }

        public void EmitThrowException(Type type, Action loadMsg)
        {
            loadMsg();
            Emit(OpCodes.Newobj, type.GetConstructor(new Type[] { typeof(string) }));
            Emit(OpCodes.Throw);
        }

        // Emit a call to Encoding.UTF8.GetBytes(). The delegate loadString is used to 
        // push the string to be encoded on the stack.
        public void EmitUtf8Encode(Action loadString)
        {
            Emit(OpCodes.Ldloc_1);
            loadString();
            EmitCall(OpCodes.Callvirt,
                           typeof(Encoding).GetMethod("GetBytes", new Type[] { typeof(string) }),
                           null);
        }

        // Emit a call to Encoding.UTF8.GetString(). The delegate loadBytes is used to 
        // push the byte array to be decoded on the stack.
        public void EmitUtf8Decode(Action loadBytes)
        {
            Emit(OpCodes.Ldloc_1);
            loadBytes();
            EmitCall(OpCodes.Callvirt,
                           typeof(Encoding).GetMethod("GetString", new Type[] { typeof(byte[]) }),
                           null);

        }

        public void EmitZero()
        {
            EmitZero(typeof(int), false);
        }

        public void EmitZero(Type forType)
        {
            EmitZero(forType, false);
        }

        public void EmitZero(Type forType, bool emitAddress)
        {
            OpCode op = emitAddress ? OpCodes.Ldsflda : OpCodes.Ldsfld;
            if (forType == typeof(bool))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(sbyte))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(byte))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(char))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(Int16))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(UInt16))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(Int32))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(UInt32))
            {
                Emit(OpCodes.Ldc_I4_0);
            }
            else if (forType == typeof(Int64))
            {
                Emit(OpCodes.Ldc_I8, 0L);
            }
            else if (forType == typeof(UInt64))
            {
                Emit(OpCodes.Ldc_I8, 0L);
            }
            else if (forType == typeof(decimal))
            {
                Emit(op, typeof(decimal).GetField("Zero", BindingFlags.Static | BindingFlags.Public));
                emitAddress = false;
            }
            else if (forType == typeof(float))
            {
                Emit(OpCodes.Ldc_R4, 0F);
            }
            else if (forType == typeof(double))
            {
                Emit(OpCodes.Ldc_R8, 0D);
            }
            else if (forType == typeof(DateTime))
            {
                Emit(op, typeof(WireData).GetField("MinDateTimeValue", BindingFlags.Static | BindingFlags.Public));
                emitAddress = false;
            }
            else if (forType == typeof(Guid))
            {
                Emit(op, typeof(Guid).GetField("Empty", BindingFlags.Static | BindingFlags.Public));
                emitAddress = false;
            }
            else if (forType.IsEnum)
            {
                EmitZero(Enum.GetUnderlyingType(forType), emitAddress);
            }
            else
            {
                throw new Exception("Can't load a zero value for type " + forType.Name);
            }

            if (emitAddress)
            {
                throw new Exception("Can't get address to emit zero for type '" + forType.ToString() + "'");
            }
        }

        public Action LoadDelegate(FieldInfo fieldInfo)
        {
            return delegate()
            {
                Emit(OpCodes.Ldloc_0);
                Emit(OpCodes.Ldfld, fieldInfo);
            };
        }

        public Action LoadAddressDelegate(FieldInfo fieldInfo)
        {
            return delegate()
            {
                Emit(OpCodes.Ldloc_0);
                Emit(OpCodes.Ldflda, fieldInfo);
            };
        }

        public string PrettyPrintTypeName(Type t)
        {
            if (!t.IsGenericType)
                return t.Name;

            StringBuilder sb = new StringBuilder();
            sb.Append(t.Name.Split('`')[0] +"<");
            List<string> names = new List<string>();
            foreach (Type m in t.GetGenericArguments())
            {
                names.Add(PrettyPrintTypeName(m));
            }
            sb.Append(String.Join(",", names.ToArray()));
            sb.Append(">");
            return sb.ToString();
        }

        #region Static Methods
        // Determines the supported field types.
        public static bool IsSupportedFieldType(Type fieldType)
        {
            return
                fieldType == typeof(bool) || fieldType == typeof(decimal) ||
                fieldType == typeof(sbyte) || fieldType == typeof(byte) ||
                fieldType == typeof(Int16) || fieldType == typeof(UInt16) ||
                fieldType == typeof(Int32) || fieldType == typeof(UInt32) ||
                fieldType == typeof(Int64) || fieldType == typeof(UInt64) ||
                fieldType == typeof(float) || fieldType == typeof(double) ||
                fieldType == typeof(string) || fieldType == typeof(char) ||
                fieldType == typeof(DateTime) || fieldType == typeof(Guid) ||
                fieldType.IsEnum || fieldType.IsSubclassOf(typeof(WireData));
        }

        public static bool IsSupportedBigEndianType(Type fieldType)
        {
            return
                fieldType == typeof(Int16) || fieldType == typeof(UInt16) ||
                fieldType == typeof(Int32) || fieldType == typeof(UInt32) ||
                fieldType == typeof(Int64) || fieldType == typeof(UInt64) ||
                fieldType == typeof(float) || fieldType == typeof(double) ||
                fieldType == typeof(DateTime) || fieldType == typeof(Guid);
        }

        // Determines the supported field types.
        public static bool IsUnsignedFieldType(Type fieldType)
        {
            return
                fieldType == typeof(byte) || fieldType == typeof(UInt16) ||
                fieldType == typeof(UInt32) || fieldType == typeof(UInt64);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsApplicationPool.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsApplicationPool
    public class IIsApplicationPool : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsApplicationPool";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsApplicationPool() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPool(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPool.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPool(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPool.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPool(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsApplicationPool(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPool(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPool(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsApplicationPool(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsApplicationPool(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsApplicationPool";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsApplicationPoolCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsApplicationPoolCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsApplicationPoolCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsApplicationPoolCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsApplicationPoolCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsApplicationPool";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsApplicationPoolCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsApplicationPoolCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsApplicationPoolCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsApplicationPoolCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsApplicationPool", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsApplicationPoolCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsApplicationPool CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsApplicationPool(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void EnumAppsInPool(out string[] Applications) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("EnumAppsInPool", inParams, null);
                Applications = ((string[])(outParams.Properties["Applications"].Value));
            }
            else {
                Applications = null;
            }
        }
        
        public void Recycle() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Recycle", inParams, null);
            }
        }
        
        public void Start() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Start", inParams, null);
            }
        }
        
        public void Stop() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Stop", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsApplicationPoolCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsApplicationPoolCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsApplicationPool(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsApplicationPoolEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsApplicationPoolEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsApplicationPoolEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsApplicationPool(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsApplicationPools.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsApplicationPools
    public class IIsApplicationPools : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsApplicationPools";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsApplicationPools() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPools(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPools.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPools(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPools.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPools(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsApplicationPools(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPools(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPools(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsApplicationPools(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsApplicationPools(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsApplicationPools";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsApplicationPoolsCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsApplicationPoolsCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsApplicationPoolsCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsApplicationPoolsCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsApplicationPoolsCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsApplicationPools";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsApplicationPoolsCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsApplicationPoolsCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsApplicationPoolsCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsApplicationPoolsCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsApplicationPools", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsApplicationPoolsCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsApplicationPools CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsApplicationPools(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsApplicationPoolsCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsApplicationPoolsCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsApplicationPools(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsApplicationPoolsEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsApplicationPoolsEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsApplicationPoolsEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsApplicationPools(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsApplicationPoolSetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsApplicationPoolSetting
    public class IIsApplicationPoolSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsApplicationPoolSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsApplicationPoolSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPoolSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPoolSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsApplicationPoolSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolAutoStartNull {
            get {
                if ((curObj["AppPoolAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolAutoStart {
            get {
                if ((curObj["AppPoolAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolAutoStart"]));
            }
            set {
                curObj["AppPoolAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolCommandNull {
            get {
                if ((curObj["AppPoolCommand"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolCommand {
            get {
                if ((curObj["AppPoolCommand"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolCommand"]));
            }
            set {
                curObj["AppPoolCommand"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolIdentityTypeNull {
            get {
                if ((curObj["AppPoolIdentityType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolIdentityType {
            get {
                if ((curObj["AppPoolIdentityType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolIdentityType"]));
            }
            set {
                curObj["AppPoolIdentityType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolQueueLengthNull {
            get {
                if ((curObj["AppPoolQueueLength"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolQueueLength {
            get {
                if ((curObj["AppPoolQueueLength"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolQueueLength"]));
            }
            set {
                curObj["AppPoolQueueLength"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleConfigChangeNull {
            get {
                if ((curObj["AppPoolRecycleConfigChange"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleConfigChange {
            get {
                if ((curObj["AppPoolRecycleConfigChange"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleConfigChange"]));
            }
            set {
                curObj["AppPoolRecycleConfigChange"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleIsapiUnhealthyNull {
            get {
                if ((curObj["AppPoolRecycleIsapiUnhealthy"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleIsapiUnhealthy {
            get {
                if ((curObj["AppPoolRecycleIsapiUnhealthy"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleIsapiUnhealthy"]));
            }
            set {
                curObj["AppPoolRecycleIsapiUnhealthy"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleMemoryNull {
            get {
                if ((curObj["AppPoolRecycleMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleMemory {
            get {
                if ((curObj["AppPoolRecycleMemory"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleMemory"]));
            }
            set {
                curObj["AppPoolRecycleMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleOnDemandNull {
            get {
                if ((curObj["AppPoolRecycleOnDemand"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleOnDemand {
            get {
                if ((curObj["AppPoolRecycleOnDemand"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleOnDemand"]));
            }
            set {
                curObj["AppPoolRecycleOnDemand"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecyclePrivateMemoryNull {
            get {
                if ((curObj["AppPoolRecyclePrivateMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecyclePrivateMemory {
            get {
                if ((curObj["AppPoolRecyclePrivateMemory"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecyclePrivateMemory"]));
            }
            set {
                curObj["AppPoolRecyclePrivateMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleRequestsNull {
            get {
                if ((curObj["AppPoolRecycleRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleRequests {
            get {
                if ((curObj["AppPoolRecycleRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleRequests"]));
            }
            set {
                curObj["AppPoolRecycleRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleScheduleNull {
            get {
                if ((curObj["AppPoolRecycleSchedule"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleSchedule {
            get {
                if ((curObj["AppPoolRecycleSchedule"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleSchedule"]));
            }
            set {
                curObj["AppPoolRecycleSchedule"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleTimeNull {
            get {
                if ((curObj["AppPoolRecycleTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleTime {
            get {
                if ((curObj["AppPoolRecycleTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleTime"]));
            }
            set {
                curObj["AppPoolRecycleTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolStateNull {
            get {
                if ((curObj["AppPoolState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolState {
            get {
                if ((curObj["AppPoolState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolState"]));
            }
            set {
                curObj["AppPoolState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AutoShutdownAppPoolExe {
            get {
                return ((string)(curObj["AutoShutdownAppPoolExe"]));
            }
            set {
                curObj["AutoShutdownAppPoolExe"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AutoShutdownAppPoolParams {
            get {
                return ((string)(curObj["AutoShutdownAppPoolParams"]));
            }
            set {
                curObj["AutoShutdownAppPoolParams"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPUActionNull {
            get {
                if ((curObj["CPUAction"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPUAction {
            get {
                if ((curObj["CPUAction"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPUAction"]));
            }
            set {
                curObj["CPUAction"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPULimitNull {
            get {
                if ((curObj["CPULimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPULimit {
            get {
                if ((curObj["CPULimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPULimit"]));
            }
            set {
                curObj["CPULimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPUResetIntervalNull {
            get {
                if ((curObj["CPUResetInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPUResetInterval {
            get {
                if ((curObj["CPUResetInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPUResetInterval"]));
            }
            set {
                curObj["CPUResetInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisallowOverlappingRotationNull {
            get {
                if ((curObj["DisallowOverlappingRotation"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisallowOverlappingRotation {
            get {
                if ((curObj["DisallowOverlappingRotation"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisallowOverlappingRotation"]));
            }
            set {
                curObj["DisallowOverlappingRotation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisallowRotationOnConfigChangeNull {
            get {
                if ((curObj["DisallowRotationOnConfigChange"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisallowRotationOnConfigChange {
            get {
                if ((curObj["DisallowRotationOnConfigChange"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisallowRotationOnConfigChange"]));
            }
            set {
                curObj["DisallowRotationOnConfigChange"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsIdleTimeoutNull {
            get {
                if ((curObj["IdleTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int IdleTimeout {
            get {
                if ((curObj["IdleTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["IdleTimeout"]));
            }
            set {
                curObj["IdleTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLoadBalancerCapabilitiesNull {
            get {
                if ((curObj["LoadBalancerCapabilities"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LoadBalancerCapabilities {
            get {
                if ((curObj["LoadBalancerCapabilities"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LoadBalancerCapabilities"]));
            }
            set {
                curObj["LoadBalancerCapabilities"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogEventOnRecycleNull {
            get {
                if ((curObj["LogEventOnRecycle"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogEventOnRecycle {
            get {
                if ((curObj["LogEventOnRecycle"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogEventOnRecycle"]));
            }
            set {
                curObj["LogEventOnRecycle"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxProcessesNull {
            get {
                if ((curObj["MaxProcesses"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxProcesses {
            get {
                if ((curObj["MaxProcesses"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxProcesses"]));
            }
            set {
                curObj["MaxProcesses"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OrphanActionExe {
            get {
                return ((string)(curObj["OrphanActionExe"]));
            }
            set {
                curObj["OrphanActionExe"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OrphanActionParams {
            get {
                return ((string)(curObj["OrphanActionParams"]));
            }
            set {
                curObj["OrphanActionParams"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsOrphanWorkerProcessNull {
            get {
                if ((curObj["OrphanWorkerProcess"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool OrphanWorkerProcess {
            get {
                if ((curObj["OrphanWorkerProcess"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["OrphanWorkerProcess"]));
            }
            set {
                curObj["OrphanWorkerProcess"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartMemoryNull {
            get {
                if ((curObj["PeriodicRestartMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartMemory {
            get {
                if ((curObj["PeriodicRestartMemory"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartMemory"]));
            }
            set {
                curObj["PeriodicRestartMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartPrivateMemoryNull {
            get {
                if ((curObj["PeriodicRestartPrivateMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartPrivateMemory {
            get {
                if ((curObj["PeriodicRestartPrivateMemory"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartPrivateMemory"]));
            }
            set {
                curObj["PeriodicRestartPrivateMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartRequestsNull {
            get {
                if ((curObj["PeriodicRestartRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartRequests {
            get {
                if ((curObj["PeriodicRestartRequests"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartRequests"]));
            }
            set {
                curObj["PeriodicRestartRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] PeriodicRestartSchedule {
            get {
                return ((string[])(curObj["PeriodicRestartSchedule"]));
            }
            set {
                curObj["PeriodicRestartSchedule"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartTimeNull {
            get {
                if ((curObj["PeriodicRestartTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartTime {
            get {
                if ((curObj["PeriodicRestartTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartTime"]));
            }
            set {
                curObj["PeriodicRestartTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingingEnabledNull {
            get {
                if ((curObj["PingingEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool PingingEnabled {
            get {
                if ((curObj["PingingEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["PingingEnabled"]));
            }
            set {
                curObj["PingingEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingIntervalNull {
            get {
                if ((curObj["PingInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PingInterval {
            get {
                if ((curObj["PingInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PingInterval"]));
            }
            set {
                curObj["PingInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingResponseTimeNull {
            get {
                if ((curObj["PingResponseTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PingResponseTime {
            get {
                if ((curObj["PingResponseTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PingResponseTime"]));
            }
            set {
                curObj["PingResponseTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionNull {
            get {
                if ((curObj["RapidFailProtection"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool RapidFailProtection {
            get {
                if ((curObj["RapidFailProtection"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["RapidFailProtection"]));
            }
            set {
                curObj["RapidFailProtection"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionIntervalNull {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionInterval {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionInterval"]));
            }
            set {
                curObj["RapidFailProtectionInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionMaxCrashesNull {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionMaxCrashes {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionMaxCrashes"]));
            }
            set {
                curObj["RapidFailProtectionMaxCrashes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSMPAffinitizedNull {
            get {
                if ((curObj["SMPAffinitized"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SMPAffinitized {
            get {
                if ((curObj["SMPAffinitized"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SMPAffinitized"]));
            }
            set {
                curObj["SMPAffinitized"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSMPProcessorAffinityMaskNull {
            get {
                if ((curObj["SMPProcessorAffinityMask"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SMPProcessorAffinityMask {
            get {
                if ((curObj["SMPProcessorAffinityMask"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SMPProcessorAffinityMask"]));
            }
            set {
                curObj["SMPProcessorAffinityMask"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartupTimeLimitNull {
            get {
                if ((curObj["StartupTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int StartupTimeLimit {
            get {
                if ((curObj["StartupTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["StartupTimeLimit"]));
            }
            set {
                curObj["StartupTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserName {
            get {
                return ((string)(curObj["WAMUserName"]));
            }
            set {
                curObj["WAMUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }

        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserPass
        {
            get
            {
                return ((string)(curObj["WAMUserPass"]));
            }
            set
            {
                curObj["WAMUserPass"] = value;
                if (((isEmbedded == false)
                            && (AutoCommitProp == true)))
                {
                    PrivateLateBoundObject.Put();
                }
            }
        }

        public const string ManagedPipelineModeIntegrated = "0";
        public const string ManagedPipelineModeClassic = "1";

        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagedPipelineMode
        {
            get
            {
                return ((string)(curObj["ManagedPipelineMode"]));
            }
            set
            {
                curObj["ManagedPipelineMode"] = value;
                if (((isEmbedded == false)
                            && (AutoCommitProp == true)))
                {
                    PrivateLateBoundObject.Put();
                }
            }
        }

        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool Enable32BitAppOnWin64
        {
            get
            {
                return ((bool)(curObj["Enable32BitAppOnWin64"]));
            }
            set
            {
                curObj["Enable32BitAppOnWin64"] = value;
                if (((isEmbedded == false)
                            && (AutoCommitProp == true)))
                {
                    PrivateLateBoundObject.Put();
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolAutoStart() {
            if ((IsAppPoolAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolAutoStart() {
            curObj["AppPoolAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolCommand() {
            if ((IsAppPoolCommandNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolCommand() {
            curObj["AppPoolCommand"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolIdentityType() {
            if ((IsAppPoolIdentityTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolIdentityType() {
            curObj["AppPoolIdentityType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolQueueLength() {
            if ((IsAppPoolQueueLengthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolQueueLength() {
            curObj["AppPoolQueueLength"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleConfigChange() {
            if ((IsAppPoolRecycleConfigChangeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleConfigChange() {
            curObj["AppPoolRecycleConfigChange"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleIsapiUnhealthy() {
            if ((IsAppPoolRecycleIsapiUnhealthyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleIsapiUnhealthy() {
            curObj["AppPoolRecycleIsapiUnhealthy"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleMemory() {
            if ((IsAppPoolRecycleMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleMemory() {
            curObj["AppPoolRecycleMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleOnDemand() {
            if ((IsAppPoolRecycleOnDemandNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleOnDemand() {
            curObj["AppPoolRecycleOnDemand"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecyclePrivateMemory() {
            if ((IsAppPoolRecyclePrivateMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecyclePrivateMemory() {
            curObj["AppPoolRecyclePrivateMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleRequests() {
            if ((IsAppPoolRecycleRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleRequests() {
            curObj["AppPoolRecycleRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleSchedule() {
            if ((IsAppPoolRecycleScheduleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleSchedule() {
            curObj["AppPoolRecycleSchedule"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleTime() {
            if ((IsAppPoolRecycleTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleTime() {
            curObj["AppPoolRecycleTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolState() {
            if ((IsAppPoolStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolState() {
            curObj["AppPoolState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAutoShutdownAppPoolExe() {
            curObj["AutoShutdownAppPoolExe"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAutoShutdownAppPoolParams() {
            curObj["AutoShutdownAppPoolParams"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPUAction() {
            if ((IsCPUActionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPUAction() {
            curObj["CPUAction"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPULimit() {
            if ((IsCPULimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPULimit() {
            curObj["CPULimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPUResetInterval() {
            if ((IsCPUResetIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPUResetInterval() {
            curObj["CPUResetInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisallowOverlappingRotation() {
            if ((IsDisallowOverlappingRotationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisallowOverlappingRotation() {
            curObj["DisallowOverlappingRotation"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisallowRotationOnConfigChange() {
            if ((IsDisallowRotationOnConfigChangeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisallowRotationOnConfigChange() {
            curObj["DisallowRotationOnConfigChange"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeIdleTimeout() {
            if ((IsIdleTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetIdleTimeout() {
            curObj["IdleTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLoadBalancerCapabilities() {
            if ((IsLoadBalancerCapabilitiesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLoadBalancerCapabilities() {
            curObj["LoadBalancerCapabilities"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogEventOnRecycle() {
            if ((IsLogEventOnRecycleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogEventOnRecycle() {
            curObj["LogEventOnRecycle"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxProcesses() {
            if ((IsMaxProcessesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxProcesses() {
            curObj["MaxProcesses"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetOrphanActionExe() {
            curObj["OrphanActionExe"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetOrphanActionParams() {
            curObj["OrphanActionParams"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeOrphanWorkerProcess() {
            if ((IsOrphanWorkerProcessNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetOrphanWorkerProcess() {
            curObj["OrphanWorkerProcess"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartMemory() {
            if ((IsPeriodicRestartMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartMemory() {
            curObj["PeriodicRestartMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartPrivateMemory() {
            if ((IsPeriodicRestartPrivateMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartPrivateMemory() {
            curObj["PeriodicRestartPrivateMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartRequests() {
            if ((IsPeriodicRestartRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartRequests() {
            curObj["PeriodicRestartRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPeriodicRestartSchedule() {
            curObj["PeriodicRestartSchedule"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartTime() {
            if ((IsPeriodicRestartTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartTime() {
            curObj["PeriodicRestartTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingingEnabled() {
            if ((IsPingingEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingingEnabled() {
            curObj["PingingEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingInterval() {
            if ((IsPingIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingInterval() {
            curObj["PingInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingResponseTime() {
            if ((IsPingResponseTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingResponseTime() {
            curObj["PingResponseTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtection() {
            if ((IsRapidFailProtectionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtection() {
            curObj["RapidFailProtection"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionInterval() {
            if ((IsRapidFailProtectionIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionInterval() {
            curObj["RapidFailProtectionInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionMaxCrashes() {
            if ((IsRapidFailProtectionMaxCrashesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionMaxCrashes() {
            curObj["RapidFailProtectionMaxCrashes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSMPAffinitized() {
            if ((IsSMPAffinitizedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSMPAffinitized() {
            curObj["SMPAffinitized"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSMPProcessorAffinityMask() {
            if ((IsSMPProcessorAffinityMaskNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSMPProcessorAffinityMask() {
            curObj["SMPProcessorAffinityMask"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeStartupTimeLimit() {
            if ((IsStartupTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetStartupTimeLimit() {
            curObj["StartupTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserName() {
            curObj["WAMUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserPass() {
            curObj["WAMUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsApplicationPoolSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsApplicationPoolSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsApplicationPoolSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsApplicationPoolSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsApplicationPoolSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsApplicationPoolSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsApplicationPoolSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsApplicationPoolSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsApplicationPoolSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsApplicationPoolSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsApplicationPoolSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsApplicationPoolSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsApplicationPoolSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsApplicationPoolSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsApplicationPoolSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsApplicationPoolSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\HttpError.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.HttpError
    public class HttpError : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "HttpError";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public HttpError() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public HttpError(string keyHandlerLocation, string keyHandlerType, string keyHttpErrorCode, string keyHttpErrorSubcode) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(HttpError.ConstructPath(keyHandlerLocation, keyHandlerType, keyHttpErrorCode, keyHttpErrorSubcode)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public HttpError(System.Management.ManagementScope mgmtScope, string keyHandlerLocation, string keyHandlerType, string keyHttpErrorCode, string keyHttpErrorSubcode) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(HttpError.ConstructPath(keyHandlerLocation, keyHandlerType, keyHttpErrorCode, keyHttpErrorSubcode)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public HttpError(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public HttpError(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public HttpError(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public HttpError(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public HttpError(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public HttpError(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HandlerLocation {
            get {
                return ((string)(curObj["HandlerLocation"]));
            }
            set {
                curObj["HandlerLocation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HandlerType {
            get {
                return ((string)(curObj["HandlerType"]));
            }
            set {
                curObj["HandlerType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpErrorCode {
            get {
                return ((string)(curObj["HttpErrorCode"]));
            }
            set {
                curObj["HttpErrorCode"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpErrorSubcode {
            get {
                return ((string)(curObj["HttpErrorSubcode"]));
            }
            set {
                curObj["HttpErrorSubcode"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyHandlerLocation, string keyHandlerType, string keyHttpErrorCode, string keyHttpErrorSubcode) {
            string strPath = "ROOT\\MicrosoftIISv2:HttpError";
            strPath = (strPath 
                        + (".HandlerLocation=" 
                        + ("\"" 
                        + (keyHandlerLocation + "\""))));
            strPath = (strPath 
                        + (",HandlerType=" 
                        + ("\"" 
                        + (keyHandlerType + "\""))));
            strPath = (strPath 
                        + (",HttpErrorCode=" 
                        + ("\"" 
                        + (keyHttpErrorCode + "\""))));
            strPath = (strPath 
                        + (",HttpErrorSubcode=" 
                        + ("\"" 
                        + (keyHttpErrorSubcode + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static HttpErrorCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static HttpErrorCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static HttpErrorCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static HttpErrorCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static HttpErrorCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "HttpError";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new HttpErrorCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static HttpErrorCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static HttpErrorCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static HttpErrorCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("HttpError", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new HttpErrorCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static HttpError CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new HttpError(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class HttpErrorCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public HttpErrorCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new HttpError(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new HttpErrorEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class HttpErrorEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public HttpErrorEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new HttpError(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsFilters.cs ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsFilters
    public class IIsFilters : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFilters";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFilters() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFilters(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFilters.ConstructPath(keyName)), null);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFilters.ConstructPath(keyName)), null);
        }
        
        public IIsFilters(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFilters(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFilters(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFilters(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            System.DateTime initializer = System.DateTime.MinValue;
            int year = initializer.Year;
            int month = initializer.Month;
            int day = initializer.Day;
            int hour = initializer.Hour;
            int minute = initializer.Minute;
            int second = initializer.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = string.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = int.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = int.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = int.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = int.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = int.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = int.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (long.Parse(tempString) * ((long)((System.TimeSpan.TicksPerMillisecond / 1000))));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception e) {
                throw new System.ArgumentOutOfRangeException(null, e.Message);
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            int OffsetToBeAdjusted = 0;
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "******")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = int.Parse(tempString);
                }
                catch (System.Exception e) {
                    throw new System.ArgumentOutOfRangeException(null, e.Message);
                }
                OffsetToBeAdjusted = ((int)((OffsetMins - UTCOffset)));
                datetime = datetime.AddMinutes(((double)(OffsetToBeAdjusted)));
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = string.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = string.Concat("+", ((System.Int64 )((tickOffset.Ticks / System.TimeSpan.TicksPerMinute))).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = ((System.Int64 )(OffsetMins)).ToString();
                    utcString = string.Concat("-", strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = ((System.Int32 )(date.Year)).ToString().PadLeft(4, '0');
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Month)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Day)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Hour)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Minute)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Second)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = ((long)((((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond)));
            string strMicrosec = ((System.Int64 )(microsec)).ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = string.Concat(dmtfDateTime, strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((this.IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilters";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFiltersCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFiltersCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFiltersCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilters";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFiltersCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilters", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFiltersCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilters CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilters(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFiltersCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFiltersCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilters(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFiltersEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFiltersEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFiltersEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilters(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsFilter.cs ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsFilter
    public class IIsFilter : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFilter";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFilter() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFilter(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFilter.ConstructPath(keyName)), null);
        }
        
        public IIsFilter(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFilter.ConstructPath(keyName)), null);
        }
        
        public IIsFilter(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFilter(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFilter(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFilter(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFilter(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFilter(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            System.DateTime initializer = System.DateTime.MinValue;
            int year = initializer.Year;
            int month = initializer.Month;
            int day = initializer.Day;
            int hour = initializer.Hour;
            int minute = initializer.Minute;
            int second = initializer.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = string.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = int.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = int.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = int.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = int.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = int.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = int.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (long.Parse(tempString) * ((long)((System.TimeSpan.TicksPerMillisecond / 1000))));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception e) {
                throw new System.ArgumentOutOfRangeException(null, e.Message);
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            int OffsetToBeAdjusted = 0;
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "******")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = int.Parse(tempString);
                }
                catch (System.Exception e) {
                    throw new System.ArgumentOutOfRangeException(null, e.Message);
                }
                OffsetToBeAdjusted = ((int)((OffsetMins - UTCOffset)));
                datetime = datetime.AddMinutes(((double)(OffsetToBeAdjusted)));
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = string.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = string.Concat("+", ((System.Int64 )((tickOffset.Ticks / System.TimeSpan.TicksPerMinute))).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = ((System.Int64 )(OffsetMins)).ToString();
                    utcString = string.Concat("-", strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = ((System.Int32 )(date.Year)).ToString().PadLeft(4, '0');
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Month)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Day)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Hour)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Minute)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Second)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = ((long)((((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond)));
            string strMicrosec = ((System.Int64 )(microsec)).ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = string.Concat(dmtfDateTime, strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((this.IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilter";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFilterCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFilterCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFilterCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilter";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFilterCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilter", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFilterCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilter CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilter(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFilterCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFilterCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilter(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFilterEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFilterEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFilterEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilter(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsFiltersSetting.cs ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsFiltersSetting
    public class IIsFiltersSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFiltersSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFiltersSetting() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFiltersSetting(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFiltersSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFiltersSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFiltersSetting(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFiltersSetting(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public byte[] AdminACLBin {
            get {
                return ((byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterLoadOrder {
            get {
                return ((string)(curObj["FilterLoadOrder"]));
            }
            set {
                curObj["FilterLoadOrder"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterLoadOrder() {
            curObj["FilterLoadOrder"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFiltersSetting";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFiltersSettingCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFiltersSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFiltersSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFiltersSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFiltersSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFiltersSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFiltersSetting(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFiltersSettingCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFiltersSettingCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFiltersSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFiltersSettingEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFiltersSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFiltersSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFiltersSetting(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsFilterSetting.cs ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsFilterSetting
    public class IIsFilterSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFilterSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFilterSetting() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFilterSetting(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFilterSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFilterSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFilterSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFilterSetting(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFilterSetting(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFilterSetting(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public byte[] AdminACLBin {
            get {
                return ((byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterDescription {
            get {
                return ((string)(curObj["FilterDescription"]));
            }
            set {
                curObj["FilterDescription"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterEnableCacheNull {
            get {
                if ((curObj["FilterEnableCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FilterEnableCache {
            get {
                if ((curObj["FilterEnableCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FilterEnableCache"]));
            }
            set {
                curObj["FilterEnableCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterEnabledNull {
            get {
                if ((curObj["FilterEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FilterEnabled {
            get {
                if ((curObj["FilterEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FilterEnabled"]));
            }
            set {
                curObj["FilterEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterFlagsNull {
            get {
                if ((curObj["FilterFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int FilterFlags {
            get {
                if ((curObj["FilterFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["FilterFlags"]));
            }
            set {
                curObj["FilterFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterPath {
            get {
                return ((string)(curObj["FilterPath"]));
            }
            set {
                curObj["FilterPath"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterStateNull {
            get {
                if ((curObj["FilterState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int FilterState {
            get {
                if ((curObj["FilterState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["FilterState"]));
            }
            set {
                curObj["FilterState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAccessDeniedNull {
            get {
                if ((curObj["NotifyAccessDenied"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAccessDenied {
            get {
                if ((curObj["NotifyAccessDenied"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAccessDenied"]));
            }
            set {
                curObj["NotifyAccessDenied"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAuthCompleteNull {
            get {
                if ((curObj["NotifyAuthComplete"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAuthComplete {
            get {
                if ((curObj["NotifyAuthComplete"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAuthComplete"]));
            }
            set {
                curObj["NotifyAuthComplete"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAuthenticationNull {
            get {
                if ((curObj["NotifyAuthentication"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAuthentication {
            get {
                if ((curObj["NotifyAuthentication"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAuthentication"]));
            }
            set {
                curObj["NotifyAuthentication"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyEndOfNetSessionNull {
            get {
                if ((curObj["NotifyEndOfNetSession"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyEndOfNetSession {
            get {
                if ((curObj["NotifyEndOfNetSession"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyEndOfNetSession"]));
            }
            set {
                curObj["NotifyEndOfNetSession"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyEndOfRequestNull {
            get {
                if ((curObj["NotifyEndOfRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyEndOfRequest {
            get {
                if ((curObj["NotifyEndOfRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyEndOfRequest"]));
            }
            set {
                curObj["NotifyEndOfRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyLogNull {
            get {
                if ((curObj["NotifyLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyLog {
            get {
                if ((curObj["NotifyLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyLog"]));
            }
            set {
                curObj["NotifyLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyNonSecurePortNull {
            get {
                if ((curObj["NotifyNonSecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyNonSecurePort {
            get {
                if ((curObj["NotifyNonSecurePort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyNonSecurePort"]));
            }
            set {
                curObj["NotifyNonSecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderHighNull {
            get {
                if ((curObj["NotifyOrderHigh"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderHigh {
            get {
                if ((curObj["NotifyOrderHigh"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderHigh"]));
            }
            set {
                curObj["NotifyOrderHigh"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderLowNull {
            get {
                if ((curObj["NotifyOrderLow"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderLow {
            get {
                if ((curObj["NotifyOrderLow"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderLow"]));
            }
            set {
                curObj["NotifyOrderLow"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderMediumNull {
            get {
                if ((curObj["NotifyOrderMedium"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderMedium {
            get {
                if ((curObj["NotifyOrderMedium"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderMedium"]));
            }
            set {
                curObj["NotifyOrderMedium"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyPreProcHeadersNull {
            get {
                if ((curObj["NotifyPreProcHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyPreProcHeaders {
            get {
                if ((curObj["NotifyPreProcHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyPreProcHeaders"]));
            }
            set {
                curObj["NotifyPreProcHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyReadRawDataNull {
            get {
                if ((curObj["NotifyReadRawData"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyReadRawData {
            get {
                if ((curObj["NotifyReadRawData"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyReadRawData"]));
            }
            set {
                curObj["NotifyReadRawData"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySecurePortNull {
            get {
                if ((curObj["NotifySecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySecurePort {
            get {
                if ((curObj["NotifySecurePort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySecurePort"]));
            }
            set {
                curObj["NotifySecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySendRawDataNull {
            get {
                if ((curObj["NotifySendRawData"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySendRawData {
            get {
                if ((curObj["NotifySendRawData"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySendRawData"]));
            }
            set {
                curObj["NotifySendRawData"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySendResponseNull {
            get {
                if ((curObj["NotifySendResponse"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySendResponse {
            get {
                if ((curObj["NotifySendResponse"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySendResponse"]));
            }
            set {
                curObj["NotifySendResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyUrlMapNull {
            get {
                if ((curObj["NotifyUrlMap"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyUrlMap {
            get {
                if ((curObj["NotifyUrlMap"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyUrlMap"]));
            }
            set {
                curObj["NotifyUrlMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterDescription() {
            curObj["FilterDescription"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterEnableCache() {
            if ((this.IsFilterEnableCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterEnableCache() {
            curObj["FilterEnableCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterEnabled() {
            if ((this.IsFilterEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterEnabled() {
            curObj["FilterEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterFlags() {
            if ((this.IsFilterFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterFlags() {
            curObj["FilterFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterPath() {
            curObj["FilterPath"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterState() {
            if ((this.IsFilterStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterState() {
            curObj["FilterState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAccessDenied() {
            if ((this.IsNotifyAccessDeniedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAccessDenied() {
            curObj["NotifyAccessDenied"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAuthComplete() {
            if ((this.IsNotifyAuthCompleteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAuthComplete() {
            curObj["NotifyAuthComplete"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAuthentication() {
            if ((this.IsNotifyAuthenticationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAuthentication() {
            curObj["NotifyAuthentication"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyEndOfNetSession() {
            if ((this.IsNotifyEndOfNetSessionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyEndOfNetSession() {
            curObj["NotifyEndOfNetSession"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyEndOfRequest() {
            if ((this.IsNotifyEndOfRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyEndOfRequest() {
            curObj["NotifyEndOfRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyLog() {
            if ((this.IsNotifyLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyLog() {
            curObj["NotifyLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyNonSecurePort() {
            if ((this.IsNotifyNonSecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyNonSecurePort() {
            curObj["NotifyNonSecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderHigh() {
            if ((this.IsNotifyOrderHighNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderHigh() {
            curObj["NotifyOrderHigh"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderLow() {
            if ((this.IsNotifyOrderLowNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderLow() {
            curObj["NotifyOrderLow"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderMedium() {
            if ((this.IsNotifyOrderMediumNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderMedium() {
            curObj["NotifyOrderMedium"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyPreProcHeaders() {
            if ((this.IsNotifyPreProcHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyPreProcHeaders() {
            curObj["NotifyPreProcHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyReadRawData() {
            if ((this.IsNotifyReadRawDataNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyReadRawData() {
            curObj["NotifyReadRawData"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySecurePort() {
            if ((this.IsNotifySecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySecurePort() {
            curObj["NotifySecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySendRawData() {
            if ((this.IsNotifySendRawDataNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySendRawData() {
            curObj["NotifySendRawData"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySendResponse() {
            if ((this.IsNotifySendResponseNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySendResponse() {
            curObj["NotifySendResponse"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyUrlMap() {
            if ((this.IsNotifyUrlMapNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyUrlMap() {
            curObj["NotifyUrlMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((this.IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilterSetting";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFilterSettingCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilterSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFilterSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilterSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFilterSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilterSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilterSetting(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFilterSettingCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFilterSettingCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilterSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFilterSettingEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFilterSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFilterSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilterSetting(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsApplicationPoolsSetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsApplicationPoolsSetting
    public class IIsApplicationPoolsSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsApplicationPoolsSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsApplicationPoolsSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolsSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPoolsSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsApplicationPoolsSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsApplicationPoolsSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolAutoStartNull {
            get {
                if ((curObj["AppPoolAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolAutoStart {
            get {
                if ((curObj["AppPoolAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolAutoStart"]));
            }
            set {
                curObj["AppPoolAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolIdentityTypeNull {
            get {
                if ((curObj["AppPoolIdentityType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolIdentityType {
            get {
                if ((curObj["AppPoolIdentityType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolIdentityType"]));
            }
            set {
                curObj["AppPoolIdentityType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolQueueLengthNull {
            get {
                if ((curObj["AppPoolQueueLength"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppPoolQueueLength {
            get {
                if ((curObj["AppPoolQueueLength"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppPoolQueueLength"]));
            }
            set {
                curObj["AppPoolQueueLength"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleConfigChangeNull {
            get {
                if ((curObj["AppPoolRecycleConfigChange"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleConfigChange {
            get {
                if ((curObj["AppPoolRecycleConfigChange"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleConfigChange"]));
            }
            set {
                curObj["AppPoolRecycleConfigChange"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleIsapiUnhealthyNull {
            get {
                if ((curObj["AppPoolRecycleIsapiUnhealthy"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleIsapiUnhealthy {
            get {
                if ((curObj["AppPoolRecycleIsapiUnhealthy"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleIsapiUnhealthy"]));
            }
            set {
                curObj["AppPoolRecycleIsapiUnhealthy"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleMemoryNull {
            get {
                if ((curObj["AppPoolRecycleMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleMemory {
            get {
                if ((curObj["AppPoolRecycleMemory"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleMemory"]));
            }
            set {
                curObj["AppPoolRecycleMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleOnDemandNull {
            get {
                if ((curObj["AppPoolRecycleOnDemand"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleOnDemand {
            get {
                if ((curObj["AppPoolRecycleOnDemand"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleOnDemand"]));
            }
            set {
                curObj["AppPoolRecycleOnDemand"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecyclePrivateMemoryNull {
            get {
                if ((curObj["AppPoolRecyclePrivateMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecyclePrivateMemory {
            get {
                if ((curObj["AppPoolRecyclePrivateMemory"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecyclePrivateMemory"]));
            }
            set {
                curObj["AppPoolRecyclePrivateMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleRequestsNull {
            get {
                if ((curObj["AppPoolRecycleRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleRequests {
            get {
                if ((curObj["AppPoolRecycleRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleRequests"]));
            }
            set {
                curObj["AppPoolRecycleRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleScheduleNull {
            get {
                if ((curObj["AppPoolRecycleSchedule"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleSchedule {
            get {
                if ((curObj["AppPoolRecycleSchedule"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleSchedule"]));
            }
            set {
                curObj["AppPoolRecycleSchedule"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppPoolRecycleTimeNull {
            get {
                if ((curObj["AppPoolRecycleTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppPoolRecycleTime {
            get {
                if ((curObj["AppPoolRecycleTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppPoolRecycleTime"]));
            }
            set {
                curObj["AppPoolRecycleTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AutoShutdownAppPoolExe {
            get {
                return ((string)(curObj["AutoShutdownAppPoolExe"]));
            }
            set {
                curObj["AutoShutdownAppPoolExe"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AutoShutdownAppPoolParams {
            get {
                return ((string)(curObj["AutoShutdownAppPoolParams"]));
            }
            set {
                curObj["AutoShutdownAppPoolParams"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPUActionNull {
            get {
                if ((curObj["CPUAction"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPUAction {
            get {
                if ((curObj["CPUAction"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPUAction"]));
            }
            set {
                curObj["CPUAction"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPULimitNull {
            get {
                if ((curObj["CPULimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPULimit {
            get {
                if ((curObj["CPULimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPULimit"]));
            }
            set {
                curObj["CPULimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCPUResetIntervalNull {
            get {
                if ((curObj["CPUResetInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CPUResetInterval {
            get {
                if ((curObj["CPUResetInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CPUResetInterval"]));
            }
            set {
                curObj["CPUResetInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisallowOverlappingRotationNull {
            get {
                if ((curObj["DisallowOverlappingRotation"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisallowOverlappingRotation {
            get {
                if ((curObj["DisallowOverlappingRotation"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisallowOverlappingRotation"]));
            }
            set {
                curObj["DisallowOverlappingRotation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisallowRotationOnConfigChangeNull {
            get {
                if ((curObj["DisallowRotationOnConfigChange"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisallowRotationOnConfigChange {
            get {
                if ((curObj["DisallowRotationOnConfigChange"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisallowRotationOnConfigChange"]));
            }
            set {
                curObj["DisallowRotationOnConfigChange"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsIdleTimeoutNull {
            get {
                if ((curObj["IdleTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int IdleTimeout {
            get {
                if ((curObj["IdleTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["IdleTimeout"]));
            }
            set {
                curObj["IdleTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLoadBalancerCapabilitiesNull {
            get {
                if ((curObj["LoadBalancerCapabilities"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LoadBalancerCapabilities {
            get {
                if ((curObj["LoadBalancerCapabilities"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LoadBalancerCapabilities"]));
            }
            set {
                curObj["LoadBalancerCapabilities"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogEventOnRecycleNull {
            get {
                if ((curObj["LogEventOnRecycle"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogEventOnRecycle {
            get {
                if ((curObj["LogEventOnRecycle"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogEventOnRecycle"]));
            }
            set {
                curObj["LogEventOnRecycle"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxProcessesNull {
            get {
                if ((curObj["MaxProcesses"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxProcesses {
            get {
                if ((curObj["MaxProcesses"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxProcesses"]));
            }
            set {
                curObj["MaxProcesses"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OrphanActionExe {
            get {
                return ((string)(curObj["OrphanActionExe"]));
            }
            set {
                curObj["OrphanActionExe"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OrphanActionParams {
            get {
                return ((string)(curObj["OrphanActionParams"]));
            }
            set {
                curObj["OrphanActionParams"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsOrphanWorkerProcessNull {
            get {
                if ((curObj["OrphanWorkerProcess"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool OrphanWorkerProcess {
            get {
                if ((curObj["OrphanWorkerProcess"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["OrphanWorkerProcess"]));
            }
            set {
                curObj["OrphanWorkerProcess"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartMemoryNull {
            get {
                if ((curObj["PeriodicRestartMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartMemory {
            get {
                if ((curObj["PeriodicRestartMemory"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartMemory"]));
            }
            set {
                curObj["PeriodicRestartMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartPrivateMemoryNull {
            get {
                if ((curObj["PeriodicRestartPrivateMemory"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartPrivateMemory {
            get {
                if ((curObj["PeriodicRestartPrivateMemory"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartPrivateMemory"]));
            }
            set {
                curObj["PeriodicRestartPrivateMemory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartRequestsNull {
            get {
                if ((curObj["PeriodicRestartRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartRequests {
            get {
                if ((curObj["PeriodicRestartRequests"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartRequests"]));
            }
            set {
                curObj["PeriodicRestartRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] PeriodicRestartSchedule {
            get {
                return ((string[])(curObj["PeriodicRestartSchedule"]));
            }
            set {
                curObj["PeriodicRestartSchedule"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPeriodicRestartTimeNull {
            get {
                if ((curObj["PeriodicRestartTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PeriodicRestartTime {
            get {
                if ((curObj["PeriodicRestartTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PeriodicRestartTime"]));
            }
            set {
                curObj["PeriodicRestartTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingingEnabledNull {
            get {
                if ((curObj["PingingEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool PingingEnabled {
            get {
                if ((curObj["PingingEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["PingingEnabled"]));
            }
            set {
                curObj["PingingEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingIntervalNull {
            get {
                if ((curObj["PingInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PingInterval {
            get {
                if ((curObj["PingInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PingInterval"]));
            }
            set {
                curObj["PingInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPingResponseTimeNull {
            get {
                if ((curObj["PingResponseTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PingResponseTime {
            get {
                if ((curObj["PingResponseTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PingResponseTime"]));
            }
            set {
                curObj["PingResponseTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionNull {
            get {
                if ((curObj["RapidFailProtection"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool RapidFailProtection {
            get {
                if ((curObj["RapidFailProtection"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["RapidFailProtection"]));
            }
            set {
                curObj["RapidFailProtection"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionIntervalNull {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionInterval {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionInterval"]));
            }
            set {
                curObj["RapidFailProtectionInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionMaxCrashesNull {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionMaxCrashes {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionMaxCrashes"]));
            }
            set {
                curObj["RapidFailProtectionMaxCrashes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSMPAffinitizedNull {
            get {
                if ((curObj["SMPAffinitized"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SMPAffinitized {
            get {
                if ((curObj["SMPAffinitized"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SMPAffinitized"]));
            }
            set {
                curObj["SMPAffinitized"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSMPProcessorAffinityMaskNull {
            get {
                if ((curObj["SMPProcessorAffinityMask"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SMPProcessorAffinityMask {
            get {
                if ((curObj["SMPProcessorAffinityMask"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SMPProcessorAffinityMask"]));
            }
            set {
                curObj["SMPProcessorAffinityMask"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartupTimeLimitNull {
            get {
                if ((curObj["StartupTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int StartupTimeLimit {
            get {
                if ((curObj["StartupTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["StartupTimeLimit"]));
            }
            set {
                curObj["StartupTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserName {
            get {
                return ((string)(curObj["WAMUserName"]));
            }
            set {
                curObj["WAMUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserPass {
            get {
                return ((string)(curObj["WAMUserPass"]));
            }
            set {
                curObj["WAMUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolAutoStart() {
            if ((IsAppPoolAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolAutoStart() {
            curObj["AppPoolAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolIdentityType() {
            if ((IsAppPoolIdentityTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolIdentityType() {
            curObj["AppPoolIdentityType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolQueueLength() {
            if ((IsAppPoolQueueLengthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolQueueLength() {
            curObj["AppPoolQueueLength"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleConfigChange() {
            if ((IsAppPoolRecycleConfigChangeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleConfigChange() {
            curObj["AppPoolRecycleConfigChange"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleIsapiUnhealthy() {
            if ((IsAppPoolRecycleIsapiUnhealthyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleIsapiUnhealthy() {
            curObj["AppPoolRecycleIsapiUnhealthy"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleMemory() {
            if ((IsAppPoolRecycleMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleMemory() {
            curObj["AppPoolRecycleMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleOnDemand() {
            if ((IsAppPoolRecycleOnDemandNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleOnDemand() {
            curObj["AppPoolRecycleOnDemand"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecyclePrivateMemory() {
            if ((IsAppPoolRecyclePrivateMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecyclePrivateMemory() {
            curObj["AppPoolRecyclePrivateMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleRequests() {
            if ((IsAppPoolRecycleRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleRequests() {
            curObj["AppPoolRecycleRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleSchedule() {
            if ((IsAppPoolRecycleScheduleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleSchedule() {
            curObj["AppPoolRecycleSchedule"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppPoolRecycleTime() {
            if ((IsAppPoolRecycleTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppPoolRecycleTime() {
            curObj["AppPoolRecycleTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAutoShutdownAppPoolExe() {
            curObj["AutoShutdownAppPoolExe"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAutoShutdownAppPoolParams() {
            curObj["AutoShutdownAppPoolParams"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPUAction() {
            if ((IsCPUActionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPUAction() {
            curObj["CPUAction"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPULimit() {
            if ((IsCPULimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPULimit() {
            curObj["CPULimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCPUResetInterval() {
            if ((IsCPUResetIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCPUResetInterval() {
            curObj["CPUResetInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisallowOverlappingRotation() {
            if ((IsDisallowOverlappingRotationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisallowOverlappingRotation() {
            curObj["DisallowOverlappingRotation"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisallowRotationOnConfigChange() {
            if ((IsDisallowRotationOnConfigChangeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisallowRotationOnConfigChange() {
            curObj["DisallowRotationOnConfigChange"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeIdleTimeout() {
            if ((IsIdleTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetIdleTimeout() {
            curObj["IdleTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLoadBalancerCapabilities() {
            if ((IsLoadBalancerCapabilitiesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLoadBalancerCapabilities() {
            curObj["LoadBalancerCapabilities"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogEventOnRecycle() {
            if ((IsLogEventOnRecycleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogEventOnRecycle() {
            curObj["LogEventOnRecycle"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxProcesses() {
            if ((IsMaxProcessesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxProcesses() {
            curObj["MaxProcesses"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetOrphanActionExe() {
            curObj["OrphanActionExe"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetOrphanActionParams() {
            curObj["OrphanActionParams"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeOrphanWorkerProcess() {
            if ((IsOrphanWorkerProcessNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetOrphanWorkerProcess() {
            curObj["OrphanWorkerProcess"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartMemory() {
            if ((IsPeriodicRestartMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartMemory() {
            curObj["PeriodicRestartMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartPrivateMemory() {
            if ((IsPeriodicRestartPrivateMemoryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartPrivateMemory() {
            curObj["PeriodicRestartPrivateMemory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartRequests() {
            if ((IsPeriodicRestartRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartRequests() {
            curObj["PeriodicRestartRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPeriodicRestartSchedule() {
            curObj["PeriodicRestartSchedule"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePeriodicRestartTime() {
            if ((IsPeriodicRestartTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPeriodicRestartTime() {
            curObj["PeriodicRestartTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingingEnabled() {
            if ((IsPingingEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingingEnabled() {
            curObj["PingingEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingInterval() {
            if ((IsPingIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingInterval() {
            curObj["PingInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePingResponseTime() {
            if ((IsPingResponseTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPingResponseTime() {
            curObj["PingResponseTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtection() {
            if ((IsRapidFailProtectionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtection() {
            curObj["RapidFailProtection"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionInterval() {
            if ((IsRapidFailProtectionIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionInterval() {
            curObj["RapidFailProtectionInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionMaxCrashes() {
            if ((IsRapidFailProtectionMaxCrashesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionMaxCrashes() {
            curObj["RapidFailProtectionMaxCrashes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSMPAffinitized() {
            if ((IsSMPAffinitizedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSMPAffinitized() {
            curObj["SMPAffinitized"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSMPProcessorAffinityMask() {
            if ((IsSMPProcessorAffinityMaskNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSMPProcessorAffinityMask() {
            curObj["SMPProcessorAffinityMask"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeStartupTimeLimit() {
            if ((IsStartupTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetStartupTimeLimit() {
            curObj["StartupTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserName() {
            curObj["WAMUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserPass() {
            curObj["WAMUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsApplicationPoolsSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsApplicationPoolsSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsApplicationPoolsSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsApplicationPoolsSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsApplicationPoolsSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsApplicationPoolsSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsApplicationPoolsSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsApplicationPoolsSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsApplicationPoolsSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsApplicationPoolsSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsApplicationPoolsSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsApplicationPoolsSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsApplicationPoolsSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsApplicationPoolsSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsApplicationPoolsSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsApplicationPoolsSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsMimeMapSetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsMimeMapSetting
    public class IIsMimeMapSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsMimeMapSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsMimeMapSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMapSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMapSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsMimeMapSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsMimeMapSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsMimeMapSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsMimeMapSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsMimeMapSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsMimeMapSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsMimeMapSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsMimeMapSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsMimeMapSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsMimeMapSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsMimeMapSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsMimeMapSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsMimeMapSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsMimeMapSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsMimeMapSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsMimeMapSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsMimeMapSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsMimeMapSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsSmtpServer.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsSmtpServer
    public class IIsSmtpServer : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServer";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServer() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServer(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServer(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainRouting {
            get {
                return ((string[])(curObj["DomainRouting"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] LocalDomains {
            get {
                return ((string[])(curObj["LocalDomains"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PostmasterEmail {
            get {
                return ((string)(curObj["PostmasterEmail"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PostmasterName {
            get {
                return ((string)(curObj["PostmasterName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RoutingSources {
            get {
                return ((string[])(curObj["RoutingSources"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerStateNull {
            get {
                if ((curObj["ServerState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerState {
            get {
                if ((curObj["ServerState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerState"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpServiceVersionNull {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpServiceVersion {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpServiceVersion"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServerState() {
            if ((IsServerStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeSmtpServiceVersion() {
            if ((IsSmtpServiceVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpServer";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServerCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServerCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpServer";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServerCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpServer", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServerCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpServer CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpServer(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServerCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServerCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpServer(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServerEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServerEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServerEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpServer(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsMimeMap.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsMimeMap
    public class IIsMimeMap : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsMimeMap";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsMimeMap() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMap.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMap.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsMimeMap(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsMimeMap(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsMimeMap";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsMimeMapCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsMimeMapCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsMimeMapCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsMimeMap";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsMimeMapCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsMimeMap", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsMimeMapCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsMimeMap CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsMimeMap(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsMimeMapCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsMimeMapCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsMimeMap(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsMimeMapEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsMimeMapEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsMimeMapEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsMimeMap(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsIPSecuritySetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsIPSecuritySetting
    public class IIsIPSecuritySetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsIPSecuritySetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsIPSecuritySetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsIPSecuritySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsIPSecuritySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainDeny {
            get {
                return ((string[])(curObj["DomainDeny"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainGrant {
            get {
                return ((string[])(curObj["DomainGrant"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsGrantByDefaultNull {
            get {
                if ((curObj["GrantByDefault"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool GrantByDefault {
            get {
                if ((curObj["GrantByDefault"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["GrantByDefault"]));
            }
            set {
                curObj["GrantByDefault"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] IPDeny {
            get {
                return ((string[])(curObj["IPDeny"]));
            }
            set {
                curObj["IPDeny"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] IPGrant {
            get {
                return ((string[])(curObj["IPGrant"]));
            }
            set {
                curObj["IPGrant"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeGrantByDefault() {
            if ((IsGrantByDefaultNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsIPSecuritySetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsIPSecuritySettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsIPSecuritySetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsIPSecuritySettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsIPSecuritySetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsIPSecuritySettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsIPSecuritySetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsIPSecuritySetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsIPSecuritySettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsIPSecuritySettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsIPSecuritySetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsIPSecuritySettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsIPSecuritySettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsIPSecuritySettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsIPSecuritySetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsSmtpService.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsSmtpService
    public class IIsSmtpService : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpService";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpService() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpService(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpService(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptPauseNull {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptPause {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptPause"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptStopNull {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptStop {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptStop"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCheckPointNull {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 CheckPoint {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["CheckPoint"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CreationClassName {
            get {
                return ((string)(curObj["CreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDesktopInteractNull {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DesktopInteract {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DesktopInteract"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DisplayName {
            get {
                return ((string)(curObj["DisplayName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainRouting {
            get {
                return ((string[])(curObj["DomainRouting"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ErrorControl {
            get {
                return ((string)(curObj["ErrorControl"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsExitCodeNull {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ExitCode {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ExitCode"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] LocalDomains {
            get {
                return ((string[])(curObj["LocalDomains"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PathName {
            get {
                return ((string)(curObj["PathName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsProcessIdNull {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ProcessId {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ProcessId"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RoutingSources {
            get {
                return ((string[])(curObj["RoutingSources"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServiceSpecificExitCodeNull {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ServiceSpecificExitCode {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ServiceSpecificExitCode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServiceType {
            get {
                return ((string)(curObj["ServiceType"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpServiceVersionNull {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpServiceVersion {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpServiceVersion"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartedNull {
            get {
                if ((curObj["Started"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool Started {
            get {
                if ((curObj["Started"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["Started"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartMode {
            get {
                return ((string)(curObj["StartMode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartName {
            get {
                return ((string)(curObj["StartName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string State {
            get {
                return ((string)(curObj["State"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemCreationClassName {
            get {
                return ((string)(curObj["SystemCreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemName {
            get {
                return ((string)(curObj["SystemName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTagIdNull {
            get {
                if ((curObj["TagId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 TagId {
            get {
                if ((curObj["TagId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["TagId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWaitHintNull {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 WaitHint {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["WaitHint"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptPause() {
            if ((IsAcceptPauseNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptStop() {
            if ((IsAcceptStopNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeCheckPoint() {
            if ((IsCheckPointNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeDesktopInteract() {
            if ((IsDesktopInteractNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeExitCode() {
            if ((IsExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeProcessId() {
            if ((IsProcessIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServiceSpecificExitCode() {
            if ((IsServiceSpecificExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeSmtpServiceVersion() {
            if ((IsSmtpServiceVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeStarted() {
            if ((IsStartedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTagId() {
            if ((IsTagIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeWaitHint() {
            if ((IsWaitHintNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpService";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServiceCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServiceCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpService";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServiceCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpService", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServiceCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpService CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpService(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public System.UInt32 Change(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Change");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Change", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ChangeStartMode(string StartMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("ChangeStartMode");
                inParams["StartMode"] = StartMode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ChangeStartMode", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Create(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string Name, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Create");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["Name"] = Name;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Create", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Delete0() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Delete", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 InterrogateService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("InterrogateService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 PauseService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("PauseService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ResumeService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ResumeService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StartService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StartService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StopService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StopService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 UserControlService(System.Byte ControlCode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("UserControlService");
                inParams["ControlCode"] = ControlCode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("UserControlService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServiceCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServiceCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpService(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServiceEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServiceEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServiceEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpService(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsWebDirectory.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebDirectory
    public class IIsWebDirectory : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebDirectory";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebDirectory() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectory.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectory.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebDirectory(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebDirectory(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebDirectory";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebDirectoryCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebDirectoryCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebDirectory";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebDirectoryCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebDirectory", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebDirectoryCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebDirectory CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebDirectory(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AppCreate(bool InProcFlag) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate");
                inParams["InProcFlag"] = InProcFlag;
                PrivateLateBoundObject.InvokeMethod("AppCreate", inParams, null);
            }
        }
        
        public void AppCreate2(int AppMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate2");
                inParams["AppMode"] = AppMode;
                PrivateLateBoundObject.InvokeMethod("AppCreate2", inParams, null);
            }
        }
        
        public void AppCreate3(int AppMode, string AppPoolName, bool bCreate) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate3");
                inParams["AppMode"] = AppMode;
                inParams["AppPoolName"] = AppPoolName;
                inParams["bCreate"] = bCreate;
                PrivateLateBoundObject.InvokeMethod("AppCreate3", inParams, null);
            }
        }
        
        public void AppDelete(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDelete");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDelete", inParams, null);
            }
        }
        
        public void AppDisable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDisable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDisable", inParams, null);
            }
        }
        
        public void AppEnable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppEnable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppEnable", inParams, null);
            }
        }
        
        public System.UInt32 AppGetStatus() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("AppGetStatus", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void AppUnLoad(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppUnLoad");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppUnLoad", inParams, null);
            }
        }
        
        public void AspAppRestart() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("AspAppRestart", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebDirectoryCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebDirectoryCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebDirectory(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebDirectoryEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebDirectoryEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebDirectoryEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebDirectory(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsWebServer.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebServer
    public class IIsWebServer : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebServer";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebServer() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebServer(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebServer(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerStateNull {
            get {
                if ((curObj["ServerState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerState {
            get {
                if ((curObj["ServerState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerState"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementObjectCollection GetRelated()
        {
            return PrivateLateBoundObject.GetRelated();
        }

        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServerState() {
            if ((IsServerStateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebServer";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebServerCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebServerCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebServerCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebServer";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebServerCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebServer", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebServerCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebServer CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebServer(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void Continue() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Continue", inParams, null);
            }
        }
        
        public void Pause() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Pause", inParams, null);
            }
        }
        
        public void Start() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Start", inParams, null);
            }
        }
        
        public void Stop() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Stop", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebServerCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebServerCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebServer(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebServerEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebServerEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebServerEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebServer(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsWebService.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebService
    public class IIsWebService : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebService";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebService() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebService(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebService(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptPauseNull {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptPause {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptPause"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptStopNull {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptStop {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptStop"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCheckPointNull {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 CheckPoint {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["CheckPoint"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CreationClassName {
            get {
                return ((string)(curObj["CreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDesktopInteractNull {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DesktopInteract {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DesktopInteract"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DisplayName {
            get {
                return ((string)(curObj["DisplayName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ErrorControl {
            get {
                return ((string)(curObj["ErrorControl"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsExitCodeNull {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ExitCode {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ExitCode"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PathName {
            get {
                return ((string)(curObj["PathName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsProcessIdNull {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ProcessId {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ProcessId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServiceSpecificExitCodeNull {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ServiceSpecificExitCode {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ServiceSpecificExitCode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServiceType {
            get {
                return ((string)(curObj["ServiceType"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartedNull {
            get {
                if ((curObj["Started"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool Started {
            get {
                if ((curObj["Started"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["Started"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartMode {
            get {
                return ((string)(curObj["StartMode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartName {
            get {
                return ((string)(curObj["StartName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string State {
            get {
                return ((string)(curObj["State"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemCreationClassName {
            get {
                return ((string)(curObj["SystemCreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemName {
            get {
                return ((string)(curObj["SystemName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTagIdNull {
            get {
                if ((curObj["TagId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 TagId {
            get {
                if ((curObj["TagId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["TagId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWaitHintNull {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 WaitHint {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["WaitHint"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptPause() {
            if ((IsAcceptPauseNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptStop() {
            if ((IsAcceptStopNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeCheckPoint() {
            if ((IsCheckPointNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeDesktopInteract() {
            if ((IsDesktopInteractNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeExitCode() {
            if ((IsExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeProcessId() {
            if ((IsProcessIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServiceSpecificExitCode() {
            if ((IsServiceSpecificExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeStarted() {
            if ((IsStartedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTagId() {
            if ((IsTagIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeWaitHint() {
            if ((IsWaitHintNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebService";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebServiceCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebServiceCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebServiceCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebService";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebServiceCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebService", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebServiceCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebService CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebService(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AddDependency(string Application, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AddDependency");
                inParams["Application"] = Application;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("AddDependency", inParams, null);
            }
        }
        
        public void AddExtensionFile(bool bCanDelete, bool bEnable, string Description, string ExtensionFile, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AddExtensionFile");
                inParams["bCanDelete"] = bCanDelete;
                inParams["bEnable"] = bEnable;
                inParams["Description"] = Description;
                inParams["ExtensionFile"] = ExtensionFile;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("AddExtensionFile", inParams, null);
            }
        }
        
        public System.UInt32 Change(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Change");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Change", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ChangeStartMode(string StartMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("ChangeStartMode");
                inParams["StartMode"] = StartMode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ChangeStartMode", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Create(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string Name, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Create");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["Name"] = Name;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Create", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public string CreateNewSite(string PathOfRootVirtualDir, System.Management.ManagementBaseObject[] ServerBindings, string ServerComment, int ServerId) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("CreateNewSite");
                inParams["PathOfRootVirtualDir"] = PathOfRootVirtualDir;
                inParams["ServerBindings"] = ServerBindings;
                inParams["ServerComment"] = ServerComment;
                inParams["ServerId"] = ServerId;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("CreateNewSite", inParams, null);
                return System.Convert.ToString(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToString(0);
            }
        }
        
        public System.UInt32 Delete0() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Delete", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void DeleteExtensionFileRecord(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DeleteExtensionFileRecord");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("DeleteExtensionFileRecord", inParams, null);
            }
        }
        
        public void DisableExtensionFile(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DisableExtensionFile");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("DisableExtensionFile", inParams, null);
            }
        }
        
        public void DisableWebServiceExtension(string Extension) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DisableWebServiceExtension");
                inParams["Extension"] = Extension;
                PrivateLateBoundObject.InvokeMethod("DisableWebServiceExtension", inParams, null);
            }
        }
        
        public void EnableApplication(string Application) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableApplication");
                inParams["Application"] = Application;
                PrivateLateBoundObject.InvokeMethod("EnableApplication", inParams, null);
            }
        }
        
        public void EnableExtensionFile(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableExtensionFile");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("EnableExtensionFile", inParams, null);
            }
        }
        
        public void EnableWebServiceExtension(string Extension) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableWebServiceExtension");
                inParams["Extension"] = Extension;
                PrivateLateBoundObject.InvokeMethod("EnableWebServiceExtension", inParams, null);
            }
        }
        
        public int GetCurrentMode() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GetCurrentMode", inParams, null);
                return System.Convert.ToInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToInt32(0);
            }
        }
        
        public System.UInt32 InterrogateService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("InterrogateService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void ListApplications(out string[] Applications) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListApplications", inParams, null);
                Applications = ((string[])(outParams.Properties["Applications"].Value));
            }
            else {
                Applications = null;
            }
        }
        
        public void ListExtensionFiles(out string[] ExtensionFiles) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListExtensionFiles", inParams, null);
                ExtensionFiles = ((string[])(outParams.Properties["ExtensionFiles"].Value));
            }
            else {
                ExtensionFiles = null;
            }
        }
        
        public void ListWebServiceExtensions(out string[] Extensions) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListWebServiceExtensions", inParams, null);
                Extensions = ((string[])(outParams.Properties["Extensions"].Value));
            }
            else {
                Extensions = null;
            }
        }
        
        public System.UInt32 PauseService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("PauseService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void QueryGroupIDStatus(string GroupID, out string[] Applications) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("QueryGroupIDStatus");
                inParams["GroupID"] = GroupID;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("QueryGroupIDStatus", inParams, null);
                Applications = ((string[])(outParams.Properties["Applications"].Value));
            }
            else {
                Applications = null;
            }
        }
        
        public void RemoveApplication(string Application) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("RemoveApplication");
                inParams["Application"] = Application;
                PrivateLateBoundObject.InvokeMethod("RemoveApplication", inParams, null);
            }
        }
        
        public void RemoveDependency(string Application, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("RemoveDependency");
                inParams["Application"] = Application;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("RemoveDependency", inParams, null);
            }
        }
        
        public System.UInt32 ResumeService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ResumeService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StartService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StartService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StopService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StopService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 UserControlService(System.Byte ControlCode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("UserControlService");
                inParams["ControlCode"] = ControlCode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("UserControlService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebServiceCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebServiceCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebService(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebServiceEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebServiceEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebServiceEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebService(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsWebDirectorySetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsWebDirectorySetting
    public class IIsWebDirectorySetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebDirectorySetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebDirectorySetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectorySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectorySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowClientDebugNull {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowClientDebug {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowClientDebug"]));
            }
            set {
                curObj["AppAllowClientDebug"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowDebuggingNull {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowDebugging {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowDebugging"]));
            }
            set {
                curObj["AppAllowDebugging"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppFriendlyName {
            get {
                return ((string)(curObj["AppFriendlyName"]));
            }
            set {
                curObj["AppFriendlyName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppOopRecoverLimitNull {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppOopRecoverLimit {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppOopRecoverLimit"]));
            }
            set {
                curObj["AppOopRecoverLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPoolId {
            get {
                return ((string)(curObj["AppPoolId"]));
            }
            set {
                curObj["AppPoolId"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppWamClsid {
            get {
                return ((string)(curObj["AppWamClsid"]));
            }
            set {
                curObj["AppWamClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowOutOfProcComponentsNull {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowOutOfProcComponents {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowOutOfProcComponents"]));
            }
            set {
                curObj["AspAllowOutOfProcComponents"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowSessionStateNull {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowSessionState {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowSessionState"]));
            }
            set {
                curObj["AspAllowSessionState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAppServiceFlagsNull {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspAppServiceFlags {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspAppServiceFlags"]));
            }
            set {
                curObj["AspAppServiceFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingLimitNull {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspBufferingLimit {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspBufferingLimit"]));
            }
            set {
                curObj["AspBufferingLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingOnNull {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspBufferingOn {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspBufferingOn"]));
            }
            set {
                curObj["AspBufferingOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCalcLineNumberNull {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspCalcLineNumber {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspCalcLineNumber"]));
            }
            set {
                curObj["AspCalcLineNumber"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCodepageNull {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspCodepage {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspCodepage"]));
            }
            set {
                curObj["AspCodepage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspDiskTemplateCacheDirectory {
            get {
                return ((string)(curObj["AspDiskTemplateCacheDirectory"]));
            }
            set {
                curObj["AspDiskTemplateCacheDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableApplicationRestartNull {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableApplicationRestart {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableApplicationRestart"]));
            }
            set {
                curObj["AspEnableApplicationRestart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableAspHtmlFallbackNull {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableAspHtmlFallback {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableAspHtmlFallback"]));
            }
            set {
                curObj["AspEnableAspHtmlFallback"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableChunkedEncodingNull {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableChunkedEncoding {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableChunkedEncoding"]));
            }
            set {
                curObj["AspEnableChunkedEncoding"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableParentPathsNull {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableParentPaths {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableParentPaths"]));
            }
            set {
                curObj["AspEnableParentPaths"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableSxsNull {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableSxs {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableSxs"]));
            }
            set {
                curObj["AspEnableSxs"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTrackerNull {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTracker {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTracker"]));
            }
            set {
                curObj["AspEnableTracker"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTypelibCacheNull {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTypelibCache {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTypelibCache"]));
            }
            set {
                curObj["AspEnableTypelibCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspErrorsToNTLogNull {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspErrorsToNTLog {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspErrorsToNTLog"]));
            }
            set {
                curObj["AspErrorsToNTLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExceptionCatchEnableNull {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspExceptionCatchEnable {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspExceptionCatchEnable"]));
            }
            set {
                curObj["AspExceptionCatchEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExecuteInMTANull {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspExecuteInMTA {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspExecuteInMTA"]));
            }
            set {
                curObj["AspExecuteInMTA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspKeepSessionIDSecureNull {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspKeepSessionIDSecure {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspKeepSessionIDSecure"]));
            }
            set {
                curObj["AspKeepSessionIDSecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLCIDNull {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspLCID {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspLCID"]));
            }
            set {
                curObj["AspLCID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLogErrorRequestsNull {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspLogErrorRequests {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspLogErrorRequests"]));
            }
            set {
                curObj["AspLogErrorRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxDiskTemplateCacheFilesNull {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxDiskTemplateCacheFiles {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxDiskTemplateCacheFiles"]));
            }
            set {
                curObj["AspMaxDiskTemplateCacheFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxRequestEntityAllowedNull {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxRequestEntityAllowed {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxRequestEntityAllowed"]));
            }
            set {
                curObj["AspMaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspPartitionID {
            get {
                return ((string)(curObj["AspPartitionID"]));
            }
            set {
                curObj["AspPartitionID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspProcessorThreadMaxNull {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspProcessorThreadMax {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspProcessorThreadMax"]));
            }
            set {
                curObj["AspProcessorThreadMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueConnectionTestTimeNull {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueConnectionTestTime {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueConnectionTestTime"]));
            }
            set {
                curObj["AspQueueConnectionTestTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueTimeoutNull {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueTimeout {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueTimeout"]));
            }
            set {
                curObj["AspQueueTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRequestQueueMaxNull {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspRequestQueueMax {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspRequestQueueMax"]));
            }
            set {
                curObj["AspRequestQueueMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRunOnEndAnonymouslyNull {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspRunOnEndAnonymously {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspRunOnEndAnonymously"]));
            }
            set {
                curObj["AspRunOnEndAnonymously"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptEngineCacheMaxNull {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptEngineCacheMax {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptEngineCacheMax"]));
            }
            set {
                curObj["AspScriptEngineCacheMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptErrorMessage {
            get {
                return ((string)(curObj["AspScriptErrorMessage"]));
            }
            set {
                curObj["AspScriptErrorMessage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptErrorSentToBrowserNull {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspScriptErrorSentToBrowser {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspScriptErrorSentToBrowser"]));
            }
            set {
                curObj["AspScriptErrorSentToBrowser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptFileCacheSizeNull {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptFileCacheSize {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptFileCacheSize"]));
            }
            set {
                curObj["AspScriptFileCacheSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptLanguage {
            get {
                return ((string)(curObj["AspScriptLanguage"]));
            }
            set {
                curObj["AspScriptLanguage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptTimeoutNull {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptTimeout {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptTimeout"]));
            }
            set {
                curObj["AspScriptTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionMaxNull {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionMax {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionMax"]));
            }
            set {
                curObj["AspSessionMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionTimeoutNull {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionTimeout {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionTimeout"]));
            }
            set {
                curObj["AspSessionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspSxsName {
            get {
                return ((string)(curObj["AspSxsName"]));
            }
            set {
                curObj["AspSxsName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspTrackThreadingModelNull {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspTrackThreadingModel {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspTrackThreadingModel"]));
            }
            set {
                curObj["AspTrackThreadingModel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspUsePartitionNull {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspUsePartition {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspUsePartition"]));
            }
            set {
                curObj["AspUsePartition"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistenceNull {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthPersistence {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthPersistence"]));
            }
            set {
                curObj["AuthPersistence"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistSingleRequestNull {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPersistSingleRequest {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPersistSingleRequest"]));
            }
            set {
                curObj["AuthPersistSingleRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzImpersonationLevelNull {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AzImpersonationLevel {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AzImpersonationLevel"]));
            }
            set {
                curObj["AzImpersonationLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CacheControlCustom {
            get {
                return ((string)(curObj["CacheControlCustom"]));
            }
            set {
                curObj["CacheControlCustom"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlMaxAgeNull {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CacheControlMaxAge {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CacheControlMaxAge"]));
            }
            set {
                curObj["CacheControlMaxAge"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlNoCacheNull {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheControlNoCache {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheControlNoCache"]));
            }
            set {
                curObj["CacheControlNoCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheISAPINull {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheISAPI {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheISAPI"]));
            }
            set {
                curObj["CacheISAPI"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCGITimeoutNull {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CGITimeout {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CGITimeout"]));
            }
            set {
                curObj["CGITimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsContentIndexedNull {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ContentIndexed {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ContentIndexed"]));
            }
            set {
                curObj["ContentIndexed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateCGIWithNewConsoleNull {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateCGIWithNewConsole {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateCGIWithNewConsole"]));
            }
            set {
                curObj["CreateCGIWithNewConsole"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateProcessAsUserNull {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateProcessAsUser {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateProcessAsUser"]));
            }
            set {
                curObj["CreateProcessAsUser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDoc {
            get {
                return ((string)(curObj["DefaultDoc"]));
            }
            set {
                curObj["DefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDocFooter {
            get {
                return ((string)(curObj["DefaultDocFooter"]));
            }
            set {
                curObj["DefaultDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseFlagsNull {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DirBrowseFlags {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DirBrowseFlags"]));
            }
            set {
                curObj["DirBrowseFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowDateNull {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowDate {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowDate"]));
            }
            set {
                curObj["DirBrowseShowDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowExtensionNull {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowExtension {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowExtension"]));
            }
            set {
                curObj["DirBrowseShowExtension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowLongDateNull {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowLongDate {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowLongDate"]));
            }
            set {
                curObj["DirBrowseShowLongDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowSizeNull {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowSize {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowSize"]));
            }
            set {
                curObj["DirBrowseShowSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowTimeNull {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowTime {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowTime"]));
            }
            set {
                curObj["DirBrowseShowTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableStaticFileCacheNull {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableStaticFileCache {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableStaticFileCache"]));
            }
            set {
                curObj["DisableStaticFileCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoDynamicCompressionNull {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoDynamicCompression {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoDynamicCompression"]));
            }
            set {
                curObj["DoDynamicCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoStaticCompressionNull {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoStaticCompression {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoStaticCompression"]));
            }
            set {
                curObj["DoStaticCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDefaultDocNull {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDefaultDoc {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDefaultDoc"]));
            }
            set {
                curObj["EnableDefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDirBrowsingNull {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDirBrowsing {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDirBrowsing"]));
            }
            set {
                curObj["EnableDirBrowsing"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDocFooterNull {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDocFooter {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDocFooter"]));
            }
            set {
                curObj["EnableDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsNull {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDns {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDns"]));
            }
            set {
                curObj["EnableReverseDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFrontPageWebNull {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FrontPageWeb {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FrontPageWeb"]));
            }
            set {
                curObj["FrontPageWeb"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpCustomHeaders {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpCustomHeaders"]));
            }
            set {
                curObj["HttpCustomHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpErrors {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpErrors"]));
            }
            set {
                curObj["HttpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpExpires {
            get {
                return ((string)(curObj["HttpExpires"]));
            }
            set {
                curObj["HttpExpires"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] HttpPics {
            get {
                return ((string[])(curObj["HttpPics"]));
            }
            set {
                curObj["HttpPics"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpRedirect {
            get {
                return ((string)(curObj["HttpRedirect"]));
            }
            set {
                curObj["HttpRedirect"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRequestEntityAllowedNull {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRequestEntityAllowed {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRequestEntityAllowed"]));
            }
            set {
                curObj["MaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPassportRequireADMappingNull {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PassportRequireADMapping {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PassportRequireADMapping"]));
            }
            set {
                curObj["PassportRequireADMapping"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPoolIdcTimeoutNull {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PoolIdcTimeout {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PoolIdcTimeout"]));
            }
            set {
                curObj["PoolIdcTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RedirectHeaders {
            get {
                return ((string[])(curObj["RedirectHeaders"]));
            }
            set {
                curObj["RedirectHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ScriptMaps {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ScriptMaps"]));
            }
            set {
                curObj["ScriptMaps"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSSIExecDisableNull {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SSIExecDisable {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SSIExecDisable"]));
            }
            set {
                curObj["SSIExecDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUploadReadAheadSizeNull {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int UploadReadAheadSize {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["UploadReadAheadSize"]));
            }
            set {
                curObj["UploadReadAheadSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUseDigestSSPNull {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UseDigestSSP {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UseDigestSSP"]));
            }
            set {
                curObj["UseDigestSSP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWebDAVMaxAttributesPerElementNull {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int WebDAVMaxAttributesPerElement {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["WebDAVMaxAttributesPerElement"]));
            }
            set {
                curObj["WebDAVMaxAttributesPerElement"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowClientDebug() {
            if ((IsAppAllowClientDebugNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowClientDebug() {
            curObj["AppAllowClientDebug"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowDebugging() {
            if ((IsAppAllowDebuggingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowDebugging() {
            curObj["AppAllowDebugging"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppFriendlyName() {
            curObj["AppFriendlyName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppOopRecoverLimit() {
            if ((IsAppOopRecoverLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppOopRecoverLimit() {
            curObj["AppOopRecoverLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppPoolId() {
            curObj["AppPoolId"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppWamClsid() {
            curObj["AppWamClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowOutOfProcComponents() {
            if ((IsAspAllowOutOfProcComponentsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowOutOfProcComponents() {
            curObj["AspAllowOutOfProcComponents"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowSessionState() {
            if ((IsAspAllowSessionStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowSessionState() {
            curObj["AspAllowSessionState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAppServiceFlags() {
            if ((IsAspAppServiceFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAppServiceFlags() {
            curObj["AspAppServiceFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingLimit() {
            if ((IsAspBufferingLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingLimit() {
            curObj["AspBufferingLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingOn() {
            if ((IsAspBufferingOnNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingOn() {
            curObj["AspBufferingOn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCalcLineNumber() {
            if ((IsAspCalcLineNumberNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCalcLineNumber() {
            curObj["AspCalcLineNumber"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCodepage() {
            if ((IsAspCodepageNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCodepage() {
            curObj["AspCodepage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspDiskTemplateCacheDirectory() {
            curObj["AspDiskTemplateCacheDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableApplicationRestart() {
            if ((IsAspEnableApplicationRestartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableApplicationRestart() {
            curObj["AspEnableApplicationRestart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableAspHtmlFallback() {
            if ((IsAspEnableAspHtmlFallbackNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableAspHtmlFallback() {
            curObj["AspEnableAspHtmlFallback"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableChunkedEncoding() {
            if ((IsAspEnableChunkedEncodingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableChunkedEncoding() {
            curObj["AspEnableChunkedEncoding"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableParentPaths() {
            if ((IsAspEnableParentPathsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableParentPaths() {
            curObj["AspEnableParentPaths"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableSxs() {
            if ((IsAspEnableSxsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableSxs() {
            curObj["AspEnableSxs"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTracker() {
            if ((IsAspEnableTrackerNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTracker() {
            curObj["AspEnableTracker"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTypelibCache() {
            if ((IsAspEnableTypelibCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTypelibCache() {
            curObj["AspEnableTypelibCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspErrorsToNTLog() {
            if ((IsAspErrorsToNTLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspErrorsToNTLog() {
            curObj["AspErrorsToNTLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExceptionCatchEnable() {
            if ((IsAspExceptionCatchEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExceptionCatchEnable() {
            curObj["AspExceptionCatchEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExecuteInMTA() {
            if ((IsAspExecuteInMTANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExecuteInMTA() {
            curObj["AspExecuteInMTA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspKeepSessionIDSecure() {
            if ((IsAspKeepSessionIDSecureNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspKeepSessionIDSecure() {
            curObj["AspKeepSessionIDSecure"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLCID() {
            if ((IsAspLCIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLCID() {
            curObj["AspLCID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLogErrorRequests() {
            if ((IsAspLogErrorRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLogErrorRequests() {
            curObj["AspLogErrorRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxDiskTemplateCacheFiles() {
            if ((IsAspMaxDiskTemplateCacheFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxDiskTemplateCacheFiles() {
            curObj["AspMaxDiskTemplateCacheFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxRequestEntityAllowed() {
            if ((IsAspMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxRequestEntityAllowed() {
            curObj["AspMaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspPartitionID() {
            curObj["AspPartitionID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspProcessorThreadMax() {
            if ((IsAspProcessorThreadMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspProcessorThreadMax() {
            curObj["AspProcessorThreadMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueConnectionTestTime() {
            if ((IsAspQueueConnectionTestTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueConnectionTestTime() {
            curObj["AspQueueConnectionTestTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueTimeout() {
            if ((IsAspQueueTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueTimeout() {
            curObj["AspQueueTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRequestQueueMax() {
            if ((IsAspRequestQueueMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRequestQueueMax() {
            curObj["AspRequestQueueMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRunOnEndAnonymously() {
            if ((IsAspRunOnEndAnonymouslyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRunOnEndAnonymously() {
            curObj["AspRunOnEndAnonymously"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptEngineCacheMax() {
            if ((IsAspScriptEngineCacheMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptEngineCacheMax() {
            curObj["AspScriptEngineCacheMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptErrorMessage() {
            curObj["AspScriptErrorMessage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptErrorSentToBrowser() {
            if ((IsAspScriptErrorSentToBrowserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptErrorSentToBrowser() {
            curObj["AspScriptErrorSentToBrowser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptFileCacheSize() {
            if ((IsAspScriptFileCacheSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptFileCacheSize() {
            curObj["AspScriptFileCacheSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptLanguage() {
            curObj["AspScriptLanguage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptTimeout() {
            if ((IsAspScriptTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptTimeout() {
            curObj["AspScriptTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionMax() {
            if ((IsAspSessionMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionMax() {
            curObj["AspSessionMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionTimeout() {
            if ((IsAspSessionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionTimeout() {
            curObj["AspSessionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspSxsName() {
            curObj["AspSxsName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspTrackThreadingModel() {
            if ((IsAspTrackThreadingModelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspTrackThreadingModel() {
            curObj["AspTrackThreadingModel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspUsePartition() {
            if ((IsAspUsePartitionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspUsePartition() {
            curObj["AspUsePartition"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistence() {
            if ((IsAuthPersistenceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistence() {
            curObj["AuthPersistence"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistSingleRequest() {
            if ((IsAuthPersistSingleRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistSingleRequest() {
            curObj["AuthPersistSingleRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzImpersonationLevel() {
            if ((IsAzImpersonationLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzImpersonationLevel() {
            curObj["AzImpersonationLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetCacheControlCustom() {
            curObj["CacheControlCustom"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlMaxAge() {
            if ((IsCacheControlMaxAgeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlMaxAge() {
            curObj["CacheControlMaxAge"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlNoCache() {
            if ((IsCacheControlNoCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlNoCache() {
            curObj["CacheControlNoCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheISAPI() {
            if ((IsCacheISAPINull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheISAPI() {
            curObj["CacheISAPI"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCGITimeout() {
            if ((IsCGITimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCGITimeout() {
            curObj["CGITimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeContentIndexed() {
            if ((IsContentIndexedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetContentIndexed() {
            curObj["ContentIndexed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateCGIWithNewConsole() {
            if ((IsCreateCGIWithNewConsoleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateCGIWithNewConsole() {
            curObj["CreateCGIWithNewConsole"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateProcessAsUser() {
            if ((IsCreateProcessAsUserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateProcessAsUser() {
            curObj["CreateProcessAsUser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDoc() {
            curObj["DefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDocFooter() {
            curObj["DefaultDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseFlags() {
            if ((IsDirBrowseFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseFlags() {
            curObj["DirBrowseFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowDate() {
            if ((IsDirBrowseShowDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowDate() {
            curObj["DirBrowseShowDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowExtension() {
            if ((IsDirBrowseShowExtensionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowExtension() {
            curObj["DirBrowseShowExtension"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowLongDate() {
            if ((IsDirBrowseShowLongDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowLongDate() {
            curObj["DirBrowseShowLongDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowSize() {
            if ((IsDirBrowseShowSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowSize() {
            curObj["DirBrowseShowSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowTime() {
            if ((IsDirBrowseShowTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowTime() {
            curObj["DirBrowseShowTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableStaticFileCache() {
            if ((IsDisableStaticFileCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableStaticFileCache() {
            curObj["DisableStaticFileCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoDynamicCompression() {
            if ((IsDoDynamicCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoDynamicCompression() {
            curObj["DoDynamicCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoStaticCompression() {
            if ((IsDoStaticCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoStaticCompression() {
            curObj["DoStaticCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDefaultDoc() {
            if ((IsEnableDefaultDocNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDefaultDoc() {
            curObj["EnableDefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDirBrowsing() {
            if ((IsEnableDirBrowsingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDirBrowsing() {
            curObj["EnableDirBrowsing"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDocFooter() {
            if ((IsEnableDocFooterNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDocFooter() {
            curObj["EnableDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDns() {
            if ((IsEnableReverseDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDns() {
            curObj["EnableReverseDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFrontPageWeb() {
            if ((IsFrontPageWebNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFrontPageWeb() {
            curObj["FrontPageWeb"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpCustomHeaders() {
            curObj["HttpCustomHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpErrors() {
            curObj["HttpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpExpires() {
            curObj["HttpExpires"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpPics() {
            curObj["HttpPics"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpRedirect() {
            curObj["HttpRedirect"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRequestEntityAllowed() {
            if ((IsMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRequestEntityAllowed() {
            curObj["MaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePassportRequireADMapping() {
            if ((IsPassportRequireADMappingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPassportRequireADMapping() {
            curObj["PassportRequireADMapping"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePoolIdcTimeout() {
            if ((IsPoolIdcTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPoolIdcTimeout() {
            curObj["PoolIdcTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRedirectHeaders() {
            curObj["RedirectHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetScriptMaps() {
            curObj["ScriptMaps"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSSIExecDisable() {
            if ((IsSSIExecDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSSIExecDisable() {
            curObj["SSIExecDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUploadReadAheadSize() {
            if ((IsUploadReadAheadSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUploadReadAheadSize() {
            curObj["UploadReadAheadSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUseDigestSSP() {
            if ((IsUseDigestSSPNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUseDigestSSP() {
            curObj["UseDigestSSP"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWebDAVMaxAttributesPerElement() {
            if ((IsWebDAVMaxAttributesPerElementNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWebDAVMaxAttributesPerElement() {
            curObj["WebDAVMaxAttributesPerElement"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebDirectorySetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebDirectorySettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebDirectorySetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebDirectorySettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebDirectorySetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebDirectorySettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebDirectorySetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebDirectorySetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebDirectorySettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebDirectorySettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebDirectorySetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebDirectorySettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebDirectorySettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebDirectorySettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebDirectorySetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsWebVirtualDir.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebVirtualDir
    public class IIsWebVirtualDir : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebVirtualDir";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebVirtualDir() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDir.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDir.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebVirtualDir(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebVirtualDir(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebVirtualDir";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebVirtualDirCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebVirtualDirCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebVirtualDir";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebVirtualDirCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebVirtualDir", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebVirtualDirCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebVirtualDir CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebVirtualDir(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AppCreate(bool InProcFlag) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate");
                inParams["InProcFlag"] = InProcFlag;
                PrivateLateBoundObject.InvokeMethod("AppCreate", inParams, null);
            }
        }
        
        public void AppCreate2(int AppMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate2");
                inParams["AppMode"] = AppMode;
                PrivateLateBoundObject.InvokeMethod("AppCreate2", inParams, null);
            }
        }
        
        public void AppCreate3(int AppMode, string AppPoolName, bool bCreate) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate3");
                inParams["AppMode"] = AppMode;
                inParams["AppPoolName"] = AppPoolName;
                inParams["bCreate"] = bCreate;
                PrivateLateBoundObject.InvokeMethod("AppCreate3", inParams, null);
            }
        }
        
        public void AppDelete(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDelete");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDelete", inParams, null);
            }
        }
        
        public void AppDisable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDisable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDisable", inParams, null);
            }
        }
        
        public void AppEnable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppEnable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppEnable", inParams, null);
            }
        }
        
        public System.UInt32 AppGetStatus() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("AppGetStatus", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void AppUnLoad(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppUnLoad");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppUnLoad", inParams, null);
            }
        }
        
        public void AspAppRestart() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("AspAppRestart", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebVirtualDirCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebVirtualDirCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebVirtualDir(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebVirtualDirEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebVirtualDirEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebVirtualDirEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebVirtualDir(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\MimeMap.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.MimeMap
    public class MimeMap : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "MimeMap";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public MimeMap() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(string keyExtension, string keyMimeType) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(MimeMap.ConstructPath(keyExtension, keyMimeType)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, string keyExtension, string keyMimeType) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(MimeMap.ConstructPath(keyExtension, keyMimeType)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public MimeMap(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public MimeMap(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Extension {
            get {
                return ((string)(curObj["Extension"]));
            }
            set {
                curObj["Extension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MimeType {
            get {
                return ((string)(curObj["MimeType"]));
            }
            set {
                curObj["MimeType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyExtension, string keyMimeType) {
            string strPath = "ROOT\\MicrosoftIISv2:MimeMap";
            strPath = (strPath 
                        + (".Extension=" 
                        + ("\"" 
                        + (keyExtension + "\""))));
            strPath = (strPath 
                        + (",MimeType=" 
                        + ("\"" 
                        + (keyMimeType + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static MimeMapCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static MimeMapCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static MimeMapCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "MimeMap";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new MimeMapCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("MimeMap", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new MimeMapCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static MimeMap CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new MimeMap(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class MimeMapCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public MimeMapCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new MimeMap(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new MimeMapEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class MimeMapEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public MimeMapEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new MimeMap(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\cronlib\ICronJob.cs ===
// 
// ICronJob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Collections;

namespace xonline.server.cron.plugins.cronlib 
{
    public interface ICronJob
    {
        void Execute(uint jobId, uint titleId, ref Hashtable args);

        bool ShareHealthBlock
        {
            get;
        }
    }    
    
    
    public class CronJobException : Exception
    {
        public CronJobException() : base() {}
        public CronJobException(bool retry) : base() 
        {
            _retry = retry;
        }
        public CronJobException(bool retry, string error) : base(error)
        {
            _retry = retry;
        }
        public CronJobException(bool retry, string error, Exception inner) : base(error, inner)
        {
            _retry = retry;
        }
        
                    
            
        public bool Retry
        {
            get { return _retry; }
            set { _retry = value; }
        }
        
        public override string ToString()
        {
            return base.ToString() + "\r\nRetry: " + Retry;
        }    

        private bool _retry = true;
        
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\cronlib\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\ServerBinding.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.ServerBinding
    public class ServerBinding : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "ServerBinding";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public ServerBinding() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(string keyHostname, string keyIP, string keyPort) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(ServerBinding.ConstructPath(keyHostname, keyIP, keyPort)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, string keyHostname, string keyIP, string keyPort) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(ServerBinding.ConstructPath(keyHostname, keyIP, keyPort)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public ServerBinding(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public ServerBinding(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Hostname {
            get {
                return ((string)(curObj["Hostname"]));
            }
            set {
                curObj["Hostname"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string IP {
            get {
                return ((string)(curObj["IP"]));
            }
            set {
                curObj["IP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Port {
            get {
                return ((string)(curObj["Port"]));
            }
            set {
                curObj["Port"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyHostname, string keyIP, string keyPort) {
            string strPath = "ROOT\\MicrosoftIISv2:ServerBinding";
            strPath = (strPath 
                        + (".Hostname=" 
                        + ("\"" 
                        + (keyHostname + "\""))));
            strPath = (strPath 
                        + (",IP=" 
                        + ("\"" 
                        + (keyIP + "\""))));
            strPath = (strPath 
                        + (",Port=" 
                        + ("\"" 
                        + (keyPort + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static ServerBindingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static ServerBindingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static ServerBindingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "ServerBinding";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new ServerBindingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("ServerBinding", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new ServerBindingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static ServerBinding CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new ServerBinding(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class ServerBindingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public ServerBindingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new ServerBinding(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new ServerBindingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class ServerBindingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public ServerBindingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new ServerBinding(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\errlookup\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\errlookup\ErrorsSchema.cs ===
// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.1.0
// Schema file: errors.xsd
// Creation Date: 11/8/2005 5:19:34 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace xonline.common.errlookup
{

	public struct Declarations
	{
		public const string SchemaVersion = "http://www.xboxlive.com/errors";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ErrorCollection : ArrayList
	{
		public xonline.common.errlookup.Error Add(xonline.common.errlookup.Error obj)
		{
			base.Add(obj);
			return obj;
		}

		public xonline.common.errlookup.Error Add()
		{
			return Add(new xonline.common.errlookup.Error());
		}

		public void Insert(int index, xonline.common.errlookup.Error obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(xonline.common.errlookup.Error obj)
		{
			base.Remove(obj);
		}

		new public xonline.common.errlookup.Error this[int index]
		{
			get { return (xonline.common.errlookup.Error) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlType(TypeName="Error",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Error
	{

		[XmlElement(ElementName="errorCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __errorCode;
		
		[XmlIgnore]
		public string errorCode
		{ 
			get { return __errorCode; }
			set { __errorCode = value; }
		}

		[XmlElement(ElementName="symbolicName",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __symbolicName;
		
		[XmlIgnore]
		public string symbolicName
		{ 
			get { return __symbolicName; }
			set { __symbolicName = value; }
		}

		[XmlElement(ElementName="source",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __source;
		
		[XmlIgnore]
		public string source
		{ 
			get { return __source; }
			set { __source = value; }
		}

		[XmlElement(ElementName="description",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __description;
		
		[XmlIgnore]
		public string description
		{ 
			get { return __description; }
			set { __description = value; }
		}

		public Error()
		{
		}
	}


	[XmlRoot(ElementName="Errors",Namespace=Declarations.SchemaVersion,IsNullable=false),Serializable]
	public class Errors
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
			return errorCollection.GetEnumerator();
		}

		public xonline.common.errlookup.Error Add(xonline.common.errlookup.Error obj)
		{
			return errorCollection.Add(obj);
		}

		[XmlIgnore]
		public xonline.common.errlookup.Error this[int index]
		{
			get { return (xonline.common.errlookup.Error) errorCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return errorCollection.Count; }
        }

        public void Clear()
		{
            errorCollection.Clear();
        }

		public xonline.common.errlookup.Error Remove(int index) 
		{ 
            xonline.common.errlookup.Error obj = errorCollection[index];
            errorCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            errorCollection.Remove(obj);
        }

		[XmlElement(Type=typeof(xonline.common.errlookup.Error),ElementName="error",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ErrorCollection __errorCollection;
		
		[XmlIgnore]
		public ErrorCollection errorCollection
		{
			get
			{
				if (__errorCollection == null) __errorCollection = new ErrorCollection();
				return __errorCollection;
			}
			set {__errorCollection = value;}
		}

		public Errors()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\errlookup\ErrLookup.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Text;
using System.Xml;
using System.Globalization;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Xml.Serialization;
using System.Threading;
using System.ServiceProcess;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Collections;
using System.Reflection;
using System.Xml.Schema;

namespace xonline.common.errlookup
{
    public class ErrLookupUtil
    {
        private Hashtable m_errors;

        public Hashtable Errors
        {
            get
            {
                if (m_errors == null)
                    LoadDefinitions();

                return m_errors;
            }
        }

        public ErrLookupUtil()
        {
            m_errors = null;
        }

        public string ExplainErr(string error)
        {
            return "";
        }
        
        private void LoadDefinitions()
        {
            if (m_errors == null)
                m_errors = new Hashtable();

            string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            string [] files = Directory.GetFiles(path, "*.errors.xml");
            foreach (string file in files)
            {
                string filePath = Path.Combine(path, file);

                try
                {
                    LoadDefinitions(filePath);
                }
                catch
                {
                    // eat any errors, to keep things simple
                }
            }
        }

        public void LoadDefinitions(string file)
        {
            if (m_errors == null)
                m_errors = new Hashtable();

            XmlSerializer serializer = new XmlSerializer(typeof(Errors));
            XmlReader validatingReader = CreateValidatingReader(file);
            Errors errors = (Errors) serializer.Deserialize(validatingReader);

            foreach (Error error in errors)
            {
                uint err = ParseUint(error.errorCode);
                
                m_errors[err] = error;
            }
        }

        private XmlReader CreateValidatingReader(string file)
        {
            string schemaPath = Path.Combine(
                Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                "Errors.xsd");
            if (!File.Exists(schemaPath))
                throw new Exception(string.Format("cannot find Errors.xsd at {0}", schemaPath));

            XmlReaderSettings readerSettings = new XmlReaderSettings();
            readerSettings.Schemas.Add(null, new XmlTextReader(schemaPath));
            readerSettings.ValidationType = ValidationType.Schema;

            StreamReader streamReader = new StreamReader(file);
            XmlReader validatingReader = XmlReader.Create(new XmlTextReader(streamReader), readerSettings);

            return validatingReader;
        }

        private static ulong ParseUlong(string s)
        {
            s = s.Trim().ToUpper();

            ulong u;

            if (s.Length > 2 && s[0] == '0' && s[1] == 'X')
                u = UInt64.Parse(s.Substring(2), NumberStyles.HexNumber);
            else
            {
                try
                {
                    u = (ulong) Int64.Parse(s);
                }
                catch (FormatException)
                {
                    u = UInt64.Parse(s, NumberStyles.HexNumber);
                }
            }

            return u;
        }

        private static uint ParseUint(string s)
        {
            s = s.Trim().ToUpper();

            uint i;

            if (s.Length > 2 && s[0] == '0' && s[1] == 'X')
                i = UInt32.Parse(s.Substring(2), NumberStyles.HexNumber);
            else
            {
                try
                {
                    i = (uint) Int32.Parse(s);
                }
                catch (FormatException)
                {
                    i = UInt32.Parse(s, NumberStyles.HexNumber);
                }
            }

            return i;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsSmtpServiceSetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsSmtpServiceSetting
    public class IIsSmtpServiceSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServiceSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServiceSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAddNoHeadersNull {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AddNoHeaders {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AddNoHeaders"]));
            }
            set {
                curObj["AddNoHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowAnonymousNull {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowAnonymous {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowAnonymous"]));
            }
            set {
                curObj["AllowAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAlwaysUseSslNull {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AlwaysUseSsl {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AlwaysUseSsl"]));
            }
            set {
                curObj["AlwaysUseSsl"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousOnlyNull {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousOnly {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousOnly"]));
            }
            set {
                curObj["AnonymousOnly"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string BadMailDirectory {
            get {
                return ((string)(curObj["BadMailDirectory"]));
            }
            set {
                curObj["BadMailDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsConnectionTimeoutNull {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ConnectionTimeout {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ConnectionTimeout"]));
            }
            set {
                curObj["ConnectionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ConnectResponse {
            get {
                return ((string)(curObj["ConnectResponse"]));
            }
            set {
                curObj["ConnectResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDomain {
            get {
                return ((string)(curObj["DefaultDomain"]));
            }
            set {
                curObj["DefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableSocketPoolingNull {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableSocketPooling {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableSocketPooling"]));
            }
            set {
                curObj["DisableSocketPooling"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoMasqueradeNull {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoMasquerade {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoMasquerade"]));
            }
            set {
                curObj["DoMasquerade"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DropDirectory {
            get {
                return ((string)(curObj["DropDirectory"]));
            }
            set {
                curObj["DropDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsLookupNull {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDnsLookup {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDnsLookup"]));
            }
            set {
                curObj["EnableReverseDnsLookup"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnDaysNull {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int EtrnDays {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["EtrnDays"]));
            }
            set {
                curObj["EtrnDays"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnSubdomainsNull {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EtrnSubdomains {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EtrnSubdomains"]));
            }
            set {
                curObj["EtrnSubdomains"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FullyQualifiedDomainName {
            get {
                return ((string)(curObj["FullyQualifiedDomainName"]));
            }
            set {
                curObj["FullyQualifiedDomainName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHopCountNull {
            get {
                if ((curObj["HopCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HopCount {
            get {
                if ((curObj["HopCount"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HopCount"]));
            }
            set {
                curObj["HopCount"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLimitRemoteConnectionsNull {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LimitRemoteConnections {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LimitRemoteConnections"]));
            }
            set {
                curObj["LimitRemoteConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryAttemptsNull {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryAttempts {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryAttempts"]));
            }
            set {
                curObj["LocalRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryIntervalNull {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryInterval {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryInterval"]));
            }
            set {
                curObj["LocalRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesRecvNull {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesRecv {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesRecv"]));
            }
            set {
                curObj["LogExtFileBytesRecv"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesSentNull {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesSent {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesSent"]));
            }
            set {
                curObj["LogExtFileBytesSent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileClientIpNull {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileClientIp {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileClientIp"]));
            }
            set {
                curObj["LogExtFileClientIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileComputerNameNull {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileComputerName {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileComputerName"]));
            }
            set {
                curObj["LogExtFileComputerName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileCookieNull {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileCookie {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileCookie"]));
            }
            set {
                curObj["LogExtFileCookie"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileDateNull {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileDate {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileDate"]));
            }
            set {
                curObj["LogExtFileDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileFlagsNull {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogExtFileFlags {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogExtFileFlags"]));
            }
            set {
                curObj["LogExtFileFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHostNull {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHost {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHost"]));
            }
            set {
                curObj["LogExtFileHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpStatusNull {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpStatus {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpStatus"]));
            }
            set {
                curObj["LogExtFileHttpStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpSubStatusNull {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpSubStatus {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpSubStatus"]));
            }
            set {
                curObj["LogExtFileHttpSubStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileMethodNull {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileMethod {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileMethod"]));
            }
            set {
                curObj["LogExtFileMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileProtocolVersionNull {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileProtocolVersion {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileProtocolVersion"]));
            }
            set {
                curObj["LogExtFileProtocolVersion"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileRefererNull {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileReferer {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileReferer"]));
            }
            set {
                curObj["LogExtFileReferer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerIpNull {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerIp {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerIp"]));
            }
            set {
                curObj["LogExtFileServerIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerPortNull {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerPort {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerPort"]));
            }
            set {
                curObj["LogExtFileServerPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileSiteNameNull {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileSiteName {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileSiteName"]));
            }
            set {
                curObj["LogExtFileSiteName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeNull {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTime {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTime"]));
            }
            set {
                curObj["LogExtFileTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeTakenNull {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTimeTaken {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTimeTaken"]));
            }
            set {
                curObj["LogExtFileTimeTaken"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriQueryNull {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriQuery {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriQuery"]));
            }
            set {
                curObj["LogExtFileUriQuery"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriStemNull {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriStem {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriStem"]));
            }
            set {
                curObj["LogExtFileUriStem"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserAgentNull {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserAgent {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserAgent"]));
            }
            set {
                curObj["LogExtFileUserAgent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserNameNull {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserName {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserName"]));
            }
            set {
                curObj["LogExtFileUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileWin32StatusNull {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileWin32Status {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileWin32Status"]));
            }
            set {
                curObj["LogExtFileWin32Status"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogFileDirectory {
            get {
                return ((string)(curObj["LogFileDirectory"]));
            }
            set {
                curObj["LogFileDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFilePeriodNull {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFilePeriod {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFilePeriod"]));
            }
            set {
                curObj["LogFilePeriod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileTruncateSizeNull {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFileTruncateSize {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFileTruncateSize"]));
            }
            set {
                curObj["LogFileTruncateSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogModuleList {
            get {
                return ((string)(curObj["LogModuleList"]));
            }
            set {
                curObj["LogModuleList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcDataSource {
            get {
                return ((string)(curObj["LogOdbcDataSource"]));
            }
            set {
                curObj["LogOdbcDataSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcPassword {
            get {
                return ((string)(curObj["LogOdbcPassword"]));
            }
            set {
                curObj["LogOdbcPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcTableName {
            get {
                return ((string)(curObj["LogOdbcTableName"]));
            }
            set {
                curObj["LogOdbcTableName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcUserName {
            get {
                return ((string)(curObj["LogOdbcUserName"]));
            }
            set {
                curObj["LogOdbcUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogPluginClsid {
            get {
                return ((string)(curObj["LogPluginClsid"]));
            }
            set {
                curObj["LogPluginClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogTypeNull {
            get {
                if ((curObj["LogType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogType {
            get {
                if ((curObj["LogType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogType"]));
            }
            set {
                curObj["LogType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MasqueradeDomain {
            get {
                return ((string)(curObj["MasqueradeDomain"]));
            }
            set {
                curObj["MasqueradeDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBandwidthNull {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBandwidth {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBandwidth"]));
            }
            set {
                curObj["MaxBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBatchedMessagesNull {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBatchedMessages {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBatchedMessages"]));
            }
            set {
                curObj["MaxBatchedMessages"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxConnectionsNull {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxConnections {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxConnections"]));
            }
            set {
                curObj["MaxConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxDirChangeIOSizeNull {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxDirChangeIOSize {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxDirChangeIOSize"]));
            }
            set {
                curObj["MaxDirChangeIOSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxEndpointConnectionsNull {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxEndpointConnections {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxEndpointConnections"]));
            }
            set {
                curObj["MaxEndpointConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMailObjectsNull {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMailObjects {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMailObjects"]));
            }
            set {
                curObj["MaxMailObjects"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMessageSizeNull {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMessageSize {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMessageSize"]));
            }
            set {
                curObj["MaxMessageSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsNull {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnections {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnections"]));
            }
            set {
                curObj["MaxOutConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsPerDomainNull {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnectionsPerDomain {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnectionsPerDomain"]));
            }
            set {
                curObj["MaxOutConnectionsPerDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRecipientsNull {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRecipients {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRecipients"]));
            }
            set {
                curObj["MaxRecipients"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSessionSizeNull {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSessionSize {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSessionSize"]));
            }
            set {
                curObj["MaxSessionSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSmtpErrorsNull {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSmtpErrors {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSmtpErrors"]));
            }
            set {
                curObj["MaxSmtpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNameResolutionTypeNull {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int NameResolutionType {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["NameResolutionType"]));
            }
            set {
                curObj["NameResolutionType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PickupDirectory {
            get {
                return ((string)(curObj["PickupDirectory"]));
            }
            set {
                curObj["PickupDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string QueueDirectory {
            get {
                return ((string)(curObj["QueueDirectory"]));
            }
            set {
                curObj["QueueDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRelayForAuthNull {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RelayForAuth {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RelayForAuth"]));
            }
            set {
                curObj["RelayForAuth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] RelayIpList {
            get {
                return ((System.Byte[])(curObj["RelayIpList"]));
            }
            set {
                curObj["RelayIpList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryAttemptsNull {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryAttempts {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryAttempts"]));
            }
            set {
                curObj["RemoteRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryIntervalNull {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryInterval {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryInterval"]));
            }
            set {
                curObj["RemoteRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpPortNull {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpPort {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpPort"]));
            }
            set {
                curObj["RemoteSmtpPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpSecurePortNull {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpSecurePort {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpSecurePort"]));
            }
            set {
                curObj["RemoteSmtpSecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteTimeoutNull {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteTimeout {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteTimeout"]));
            }
            set {
                curObj["RemoteTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRouteActionNull {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RouteAction {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RouteAction"]));
            }
            set {
                curObj["RouteAction"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutePassword {
            get {
                return ((string)(curObj["RoutePassword"]));
            }
            set {
                curObj["RoutePassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RouteUserName {
            get {
                return ((string)(curObj["RouteUserName"]));
            }
            set {
                curObj["RouteUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutingDll {
            get {
                return ((string)(curObj["RoutingDll"]));
            }
            set {
                curObj["RoutingDll"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SaslLogonDomain {
            get {
                return ((string)(curObj["SaslLogonDomain"]));
            }
            set {
                curObj["SaslLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendBadTo {
            get {
                return ((string)(curObj["SendBadTo"]));
            }
            set {
                curObj["SendBadTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendNdrTo {
            get {
                return ((string)(curObj["SendNdrTo"]));
            }
            set {
                curObj["SendNdrTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerAutoStartNull {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ServerAutoStart {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ServerAutoStart"]));
            }
            set {
                curObj["ServerAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServerComment {
            get {
                return ((string)(curObj["ServerComment"]));
            }
            set {
                curObj["ServerComment"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenTimeoutNull {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenTimeout {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenTimeout"]));
            }
            set {
                curObj["ServerListenTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldDeliverNull {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldDeliver {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldDeliver"]));
            }
            set {
                curObj["ShouldDeliver"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPickupMailNull {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPickupMail {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPickupMail"]));
            }
            set {
                curObj["ShouldPickupMail"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineInNull {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineIn {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineIn"]));
            }
            set {
                curObj["ShouldPipelineIn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineOutNull {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineOut {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineOut"]));
            }
            set {
                curObj["ShouldPipelineOut"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmartHost {
            get {
                return ((string)(curObj["SmartHost"]));
            }
            set {
                curObj["SmartHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmartHostTypeNull {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmartHostType {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmartHostType"]));
            }
            set {
                curObj["SmartHostType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpAdvQueueDll {
            get {
                return ((string)(curObj["SmtpAdvQueueDll"]));
            }
            set {
                curObj["SmtpAdvQueueDll"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAqueueWaitNull {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAqueueWait {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAqueueWait"]));
            }
            set {
                curObj["SmtpAqueueWait"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAuthTimeoutNull {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAuthTimeout {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAuthTimeout"]));
            }
            set {
                curObj["SmtpAuthTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpBdatTimeoutNull {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpBdatTimeout {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpBdatTimeout"]));
            }
            set {
                curObj["SmtpBdatTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpClearTextProvider {
            get {
                return ((string)(curObj["SmtpClearTextProvider"]));
            }
            set {
                curObj["SmtpClearTextProvider"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpCommandLogMaskNull {
            get {
                if ((curObj["SmtpCommandLogMask"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpCommandLogMask {
            get {
                if ((curObj["SmtpCommandLogMask"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpCommandLogMask"]));
            }
            set {
                curObj["SmtpCommandLogMask"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpConnectTimeoutNull {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpConnectTimeout {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpConnectTimeout"]));
            }
            set {
                curObj["SmtpConnectTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDataTimeoutNull {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDataTimeout {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDataTimeout"]));
            }
            set {
                curObj["SmtpDataTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDisableRelayNull {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDisableRelay {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDisableRelay"]));
            }
            set {
                curObj["SmtpDisableRelay"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDomainValidationFlagsNull {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDomainValidationFlags {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDomainValidationFlags"]));
            }
            set {
                curObj["SmtpDomainValidationFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDotStuffPickupDirFilesNull {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDotStuffPickupDirFiles {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDotStuffPickupDirFiles"]));
            }
            set {
                curObj["SmtpDotStuffPickupDirFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNLanguageIDNull {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNLanguageID {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNLanguageID"]));
            }
            set {
                curObj["SmtpDSNLanguageID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNOptionsNull {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNOptions {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNOptions"]));
            }
            set {
                curObj["SmtpDSNOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpEventlogLevelNull {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpEventlogLevel {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpEventlogLevel"]));
            }
            set {
                curObj["SmtpEventlogLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpFlushMailFileNull {
            get {
                if ((curObj["SmtpFlushMailFile"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpFlushMailFile {
            get {
                if ((curObj["SmtpFlushMailFile"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpFlushMailFile"]));
            }
            set {
                curObj["SmtpFlushMailFile"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloNoDomainNull {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpHeloNoDomain {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpHeloNoDomain"]));
            }
            set {
                curObj["SmtpHeloNoDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloTimeoutNull {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpHeloTimeout {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpHeloTimeout"]));
            }
            set {
                curObj["SmtpHeloTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpInboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpInboundCommandSupportOptions {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpInboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpInboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpIpRestrictionFlagNull {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpIpRestrictionFlag {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpIpRestrictionFlag"]));
            }
            set {
                curObj["SmtpIpRestrictionFlag"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalDelayExpireMinutes {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalNDRExpireMinutes {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailFromTimeoutNull {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMailFromTimeout {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMailFromTimeout"]));
            }
            set {
                curObj["SmtpMailFromTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailNoHeloNull {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpMailNoHelo {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpMailNoHelo"]));
            }
            set {
                curObj["SmtpMailNoHelo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMaxRemoteQThreadsNull {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMaxRemoteQThreads {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMaxRemoteQThreads"]));
            }
            set {
                curObj["SmtpMaxRemoteQThreads"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpOutboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpOutboundCommandSupportOptions {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpOutboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpOutboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRcptToTimeoutNull {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRcptToTimeout {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRcptToTimeout"]));
            }
            set {
                curObj["SmtpRcptToTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteDelayExpireMinutes {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteNDRExpireMinutes {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpRemoteProgressiveRetry {
            get {
                return ((string)(curObj["SmtpRemoteProgressiveRetry"]));
            }
            set {
                curObj["SmtpRemoteProgressiveRetry"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteRetryThresholdNull {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteRetryThreshold {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteRetryThreshold"]));
            }
            set {
                curObj["SmtpRemoteRetryThreshold"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRsetTimeoutNull {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRsetTimeout {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRsetTimeout"]));
            }
            set {
                curObj["SmtpRsetTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSaslTimeoutNull {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpSaslTimeout {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpSaslTimeout"]));
            }
            set {
                curObj["SmtpSaslTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLCertHostnameValidationNull {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLCertHostnameValidation {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLCertHostnameValidation"]));
            }
            set {
                curObj["SmtpSSLCertHostnameValidation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLRequireTrustedCANull {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLRequireTrustedCA {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLRequireTrustedCA"]));
            }
            set {
                curObj["SmtpSSLRequireTrustedCA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpTurnTimeoutNull {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpTurnTimeout {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpTurnTimeout"]));
            }
            set {
                curObj["SmtpTurnTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpUseTcpDnsNull {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpUseTcpDns {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpUseTcpDns"]));
            }
            set {
                curObj["SmtpUseTcpDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedDefaultDomainNull {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedDefaultDomain {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedDefaultDomain"]));
            }
            set {
                curObj["UpdatedDefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedFQDNNull {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedFQDN {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedFQDN"]));
            }
            set {
                curObj["UpdatedFQDN"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAddNoHeaders() {
            if ((IsAddNoHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAddNoHeaders() {
            curObj["AddNoHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAllowAnonymous() {
            if ((IsAllowAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAllowAnonymous() {
            curObj["AllowAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAlwaysUseSsl() {
            if ((IsAlwaysUseSslNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAlwaysUseSsl() {
            curObj["AlwaysUseSsl"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousOnly() {
            if ((IsAnonymousOnlyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousOnly() {
            curObj["AnonymousOnly"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetBadMailDirectory() {
            curObj["BadMailDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeConnectionTimeout() {
            if ((IsConnectionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetConnectionTimeout() {
            curObj["ConnectionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetConnectResponse() {
            curObj["ConnectResponse"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDomain() {
            curObj["DefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableSocketPooling() {
            if ((IsDisableSocketPoolingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableSocketPooling() {
            curObj["DisableSocketPooling"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoMasquerade() {
            if ((IsDoMasqueradeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoMasquerade() {
            curObj["DoMasquerade"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDropDirectory() {
            curObj["DropDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDnsLookup() {
            if ((IsEnableReverseDnsLookupNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDnsLookup() {
            curObj["EnableReverseDnsLookup"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnDays() {
            if ((IsEtrnDaysNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnDays() {
            curObj["EtrnDays"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnSubdomains() {
            if ((IsEtrnSubdomainsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnSubdomains() {
            curObj["EtrnSubdomains"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFullyQualifiedDomainName() {
            curObj["FullyQualifiedDomainName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHopCount() {
            if ((IsHopCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHopCount() {
            curObj["HopCount"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLimitRemoteConnections() {
            if ((IsLimitRemoteConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLimitRemoteConnections() {
            curObj["LimitRemoteConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryAttempts() {
            if ((IsLocalRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryAttempts() {
            curObj["LocalRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryInterval() {
            if ((IsLocalRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryInterval() {
            curObj["LocalRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesRecv() {
            if ((IsLogExtFileBytesRecvNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesRecv() {
            curObj["LogExtFileBytesRecv"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesSent() {
            if ((IsLogExtFileBytesSentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesSent() {
            curObj["LogExtFileBytesSent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileClientIp() {
            if ((IsLogExtFileClientIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileClientIp() {
            curObj["LogExtFileClientIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileComputerName() {
            if ((IsLogExtFileComputerNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileComputerName() {
            curObj["LogExtFileComputerName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileCookie() {
            if ((IsLogExtFileCookieNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileCookie() {
            curObj["LogExtFileCookie"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileDate() {
            if ((IsLogExtFileDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileDate() {
            curObj["LogExtFileDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileFlags() {
            if ((IsLogExtFileFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileFlags() {
            curObj["LogExtFileFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHost() {
            if ((IsLogExtFileHostNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHost() {
            curObj["LogExtFileHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpStatus() {
            if ((IsLogExtFileHttpStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpStatus() {
            curObj["LogExtFileHttpStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpSubStatus() {
            if ((IsLogExtFileHttpSubStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpSubStatus() {
            curObj["LogExtFileHttpSubStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileMethod() {
            if ((IsLogExtFileMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileMethod() {
            curObj["LogExtFileMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileProtocolVersion() {
            if ((IsLogExtFileProtocolVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileProtocolVersion() {
            curObj["LogExtFileProtocolVersion"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileReferer() {
            if ((IsLogExtFileRefererNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileReferer() {
            curObj["LogExtFileReferer"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerIp() {
            if ((IsLogExtFileServerIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerIp() {
            curObj["LogExtFileServerIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerPort() {
            if ((IsLogExtFileServerPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerPort() {
            curObj["LogExtFileServerPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileSiteName() {
            if ((IsLogExtFileSiteNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileSiteName() {
            curObj["LogExtFileSiteName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTime() {
            if ((IsLogExtFileTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTime() {
            curObj["LogExtFileTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTimeTaken() {
            if ((IsLogExtFileTimeTakenNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTimeTaken() {
            curObj["LogExtFileTimeTaken"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriQuery() {
            if ((IsLogExtFileUriQueryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriQuery() {
            curObj["LogExtFileUriQuery"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriStem() {
            if ((IsLogExtFileUriStemNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriStem() {
            curObj["LogExtFileUriStem"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserAgent() {
            if ((IsLogExtFileUserAgentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserAgent() {
            curObj["LogExtFileUserAgent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserName() {
            if ((IsLogExtFileUserNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserName() {
            curObj["LogExtFileUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileWin32Status() {
            if ((IsLogExtFileWin32StatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileWin32Status() {
            curObj["LogExtFileWin32Status"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogFileDirectory() {
            curObj["LogFileDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFilePeriod() {
            if ((IsLogFilePeriodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFilePeriod() {
            curObj["LogFilePeriod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFileTruncateSize() {
            if ((IsLogFileTruncateSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFileTruncateSize() {
            curObj["LogFileTruncateSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogModuleList() {
            curObj["LogModuleList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcDataSource() {
            curObj["LogOdbcDataSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcPassword() {
            curObj["LogOdbcPassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcTableName() {
            curObj["LogOdbcTableName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcUserName() {
            curObj["LogOdbcUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogPluginClsid() {
            curObj["LogPluginClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogType() {
            if ((IsLogTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogType() {
            curObj["LogType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMasqueradeDomain() {
            curObj["MasqueradeDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBandwidth() {
            if ((IsMaxBandwidthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBandwidth() {
            curObj["MaxBandwidth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBatchedMessages() {
            if ((IsMaxBatchedMessagesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBatchedMessages() {
            curObj["MaxBatchedMessages"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxConnections() {
            if ((IsMaxConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxConnections() {
            curObj["MaxConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxDirChangeIOSize() {
            if ((IsMaxDirChangeIOSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxDirChangeIOSize() {
            curObj["MaxDirChangeIOSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxEndpointConnections() {
            if ((IsMaxEndpointConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxEndpointConnections() {
            curObj["MaxEndpointConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMailObjects() {
            if ((IsMaxMailObjectsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMailObjects() {
            curObj["MaxMailObjects"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMessageSize() {
            if ((IsMaxMessageSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMessageSize() {
            curObj["MaxMessageSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnections() {
            if ((IsMaxOutConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnections() {
            curObj["MaxOutConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnectionsPerDomain() {
            if ((IsMaxOutConnectionsPerDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnectionsPerDomain() {
            curObj["MaxOutConnectionsPerDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRecipients() {
            if ((IsMaxRecipientsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRecipients() {
            curObj["MaxRecipients"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSessionSize() {
            if ((IsMaxSessionSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSessionSize() {
            curObj["MaxSessionSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSmtpErrors() {
            if ((IsMaxSmtpErrorsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSmtpErrors() {
            curObj["MaxSmtpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNameResolutionType() {
            if ((IsNameResolutionTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNameResolutionType() {
            curObj["NameResolutionType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPickupDirectory() {
            curObj["PickupDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetQueueDirectory() {
            curObj["QueueDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRelayForAuth() {
            if ((IsRelayForAuthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRelayForAuth() {
            curObj["RelayForAuth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRelayIpList() {
            curObj["RelayIpList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryAttempts() {
            if ((IsRemoteRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryAttempts() {
            curObj["RemoteRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryInterval() {
            if ((IsRemoteRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryInterval() {
            curObj["RemoteRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpPort() {
            if ((IsRemoteSmtpPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpPort() {
            curObj["RemoteSmtpPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpSecurePort() {
            if ((IsRemoteSmtpSecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpSecurePort() {
            curObj["RemoteSmtpSecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteTimeout() {
            if ((IsRemoteTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteTimeout() {
            curObj["RemoteTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRouteAction() {
            if ((IsRouteActionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRouteAction() {
            curObj["RouteAction"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutePassword() {
            curObj["RoutePassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRouteUserName() {
            curObj["RouteUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutingDll() {
            curObj["RoutingDll"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSaslLogonDomain() {
            curObj["SaslLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendBadTo() {
            curObj["SendBadTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendNdrTo() {
            curObj["SendNdrTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerAutoStart() {
            if ((IsServerAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerAutoStart() {
            curObj["ServerAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerComment() {
            curObj["ServerComment"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenTimeout() {
            if ((IsServerListenTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenTimeout() {
            curObj["ServerListenTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldDeliver() {
            if ((IsShouldDeliverNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldDeliver() {
            curObj["ShouldDeliver"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPickupMail() {
            if ((IsShouldPickupMailNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPickupMail() {
            curObj["ShouldPickupMail"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineIn() {
            if ((IsShouldPipelineInNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineIn() {
            curObj["ShouldPipelineIn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineOut() {
            if ((IsShouldPipelineOutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineOut() {
            curObj["ShouldPipelineOut"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmartHost() {
            curObj["SmartHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmartHostType() {
            if ((IsSmartHostTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmartHostType() {
            curObj["SmartHostType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpAdvQueueDll() {
            curObj["SmtpAdvQueueDll"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAqueueWait() {
            if ((IsSmtpAqueueWaitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAqueueWait() {
            curObj["SmtpAqueueWait"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAuthTimeout() {
            if ((IsSmtpAuthTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAuthTimeout() {
            curObj["SmtpAuthTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpBdatTimeout() {
            if ((IsSmtpBdatTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpBdatTimeout() {
            curObj["SmtpBdatTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpClearTextProvider() {
            curObj["SmtpClearTextProvider"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpCommandLogMask() {
            if ((IsSmtpCommandLogMaskNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpCommandLogMask() {
            curObj["SmtpCommandLogMask"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpConnectTimeout() {
            if ((IsSmtpConnectTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpConnectTimeout() {
            curObj["SmtpConnectTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDataTimeout() {
            if ((IsSmtpDataTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDataTimeout() {
            curObj["SmtpDataTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDisableRelay() {
            if ((IsSmtpDisableRelayNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDisableRelay() {
            curObj["SmtpDisableRelay"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDomainValidationFlags() {
            if ((IsSmtpDomainValidationFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDomainValidationFlags() {
            curObj["SmtpDomainValidationFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDotStuffPickupDirFiles() {
            if ((IsSmtpDotStuffPickupDirFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDotStuffPickupDirFiles() {
            curObj["SmtpDotStuffPickupDirFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNLanguageID() {
            if ((IsSmtpDSNLanguageIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNLanguageID() {
            curObj["SmtpDSNLanguageID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNOptions() {
            if ((IsSmtpDSNOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNOptions() {
            curObj["SmtpDSNOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpEventlogLevel() {
            if ((IsSmtpEventlogLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpEventlogLevel() {
            curObj["SmtpEventlogLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpFlushMailFile() {
            if ((IsSmtpFlushMailFileNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpFlushMailFile() {
            curObj["SmtpFlushMailFile"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloNoDomain() {
            if ((IsSmtpHeloNoDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloNoDomain() {
            curObj["SmtpHeloNoDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloTimeout() {
            if ((IsSmtpHeloTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloTimeout() {
            curObj["SmtpHeloTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpInboundCommandSupportOptions() {
            if ((IsSmtpInboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpInboundCommandSupportOptions() {
            curObj["SmtpInboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpIpRestrictionFlag() {
            if ((IsSmtpIpRestrictionFlagNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpIpRestrictionFlag() {
            curObj["SmtpIpRestrictionFlag"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalDelayExpireMinutes() {
            if ((IsSmtpLocalDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalDelayExpireMinutes() {
            curObj["SmtpLocalDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalNDRExpireMinutes() {
            if ((IsSmtpLocalNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalNDRExpireMinutes() {
            curObj["SmtpLocalNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailFromTimeout() {
            if ((IsSmtpMailFromTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailFromTimeout() {
            curObj["SmtpMailFromTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailNoHelo() {
            if ((IsSmtpMailNoHeloNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailNoHelo() {
            curObj["SmtpMailNoHelo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMaxRemoteQThreads() {
            if ((IsSmtpMaxRemoteQThreadsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMaxRemoteQThreads() {
            curObj["SmtpMaxRemoteQThreads"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpOutboundCommandSupportOptions() {
            if ((IsSmtpOutboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpOutboundCommandSupportOptions() {
            curObj["SmtpOutboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRcptToTimeout() {
            if ((IsSmtpRcptToTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRcptToTimeout() {
            curObj["SmtpRcptToTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteDelayExpireMinutes() {
            if ((IsSmtpRemoteDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteDelayExpireMinutes() {
            curObj["SmtpRemoteDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteNDRExpireMinutes() {
            if ((IsSmtpRemoteNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteNDRExpireMinutes() {
            curObj["SmtpRemoteNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpRemoteProgressiveRetry() {
            curObj["SmtpRemoteProgressiveRetry"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteRetryThreshold() {
            if ((IsSmtpRemoteRetryThresholdNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteRetryThreshold() {
            curObj["SmtpRemoteRetryThreshold"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRsetTimeout() {
            if ((IsSmtpRsetTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRsetTimeout() {
            curObj["SmtpRsetTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSaslTimeout() {
            if ((IsSmtpSaslTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSaslTimeout() {
            curObj["SmtpSaslTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLCertHostnameValidation() {
            if ((IsSmtpSSLCertHostnameValidationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLCertHostnameValidation() {
            curObj["SmtpSSLCertHostnameValidation"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLRequireTrustedCA() {
            if ((IsSmtpSSLRequireTrustedCANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLRequireTrustedCA() {
            curObj["SmtpSSLRequireTrustedCA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpTurnTimeout() {
            if ((IsSmtpTurnTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpTurnTimeout() {
            curObj["SmtpTurnTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpUseTcpDns() {
            if ((IsSmtpUseTcpDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpUseTcpDns() {
            curObj["SmtpUseTcpDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedDefaultDomain() {
            if ((IsUpdatedDefaultDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedDefaultDomain() {
            curObj["UpdatedDefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedFQDN() {
            if ((IsUpdatedFQDNNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedFQDN() {
            curObj["UpdatedFQDN"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpServiceSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServiceSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpServiceSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServiceSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpServiceSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServiceSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpServiceSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpServiceSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServiceSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServiceSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpServiceSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServiceSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServiceSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServiceSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpServiceSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\core\wmi\iisv2\IIsSmtpServerSetting.CS ===
﻿namespace xonline.common.wmi.iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsSmtpServerSetting
    public class IIsSmtpServerSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServerSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServerSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAddNoHeadersNull {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AddNoHeaders {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AddNoHeaders"]));
            }
            set {
                curObj["AddNoHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowAnonymousNull {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowAnonymous {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowAnonymous"]));
            }
            set {
                curObj["AllowAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAlwaysUseSslNull {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AlwaysUseSsl {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AlwaysUseSsl"]));
            }
            set {
                curObj["AlwaysUseSsl"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousOnlyNull {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousOnly {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousOnly"]));
            }
            set {
                curObj["AnonymousOnly"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string BadMailDirectory {
            get {
                return ((string)(curObj["BadMailDirectory"]));
            }
            set {
                curObj["BadMailDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsClusterEnabledNull {
            get {
                if ((curObj["ClusterEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ClusterEnabled {
            get {
                if ((curObj["ClusterEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ClusterEnabled"]));
            }
            set {
                curObj["ClusterEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsConnectionTimeoutNull {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ConnectionTimeout {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ConnectionTimeout"]));
            }
            set {
                curObj["ConnectionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ConnectResponse {
            get {
                return ((string)(curObj["ConnectResponse"]));
            }
            set {
                curObj["ConnectResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDomain {
            get {
                return ((string)(curObj["DefaultDomain"]));
            }
            set {
                curObj["DefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableSocketPoolingNull {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableSocketPooling {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableSocketPooling"]));
            }
            set {
                curObj["DisableSocketPooling"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoMasqueradeNull {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoMasquerade {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoMasquerade"]));
            }
            set {
                curObj["DoMasquerade"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DropDirectory {
            get {
                return ((string)(curObj["DropDirectory"]));
            }
            set {
                curObj["DropDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsLookupNull {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDnsLookup {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDnsLookup"]));
            }
            set {
                curObj["EnableReverseDnsLookup"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnDaysNull {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int EtrnDays {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["EtrnDays"]));
            }
            set {
                curObj["EtrnDays"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnSubdomainsNull {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EtrnSubdomains {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EtrnSubdomains"]));
            }
            set {
                curObj["EtrnSubdomains"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FullyQualifiedDomainName {
            get {
                return ((string)(curObj["FullyQualifiedDomainName"]));
            }
            set {
                curObj["FullyQualifiedDomainName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHopCountNull {
            get {
                if ((curObj["HopCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HopCount {
            get {
                if ((curObj["HopCount"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HopCount"]));
            }
            set {
                curObj["HopCount"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLimitRemoteConnectionsNull {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LimitRemoteConnections {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LimitRemoteConnections"]));
            }
            set {
                curObj["LimitRemoteConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryAttemptsNull {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryAttempts {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryAttempts"]));
            }
            set {
                curObj["LocalRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryIntervalNull {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryInterval {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryInterval"]));
            }
            set {
                curObj["LocalRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesRecvNull {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesRecv {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesRecv"]));
            }
            set {
                curObj["LogExtFileBytesRecv"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesSentNull {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesSent {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesSent"]));
            }
            set {
                curObj["LogExtFileBytesSent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileClientIpNull {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileClientIp {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileClientIp"]));
            }
            set {
                curObj["LogExtFileClientIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileComputerNameNull {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileComputerName {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileComputerName"]));
            }
            set {
                curObj["LogExtFileComputerName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileCookieNull {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileCookie {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileCookie"]));
            }
            set {
                curObj["LogExtFileCookie"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileDateNull {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileDate {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileDate"]));
            }
            set {
                curObj["LogExtFileDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileFlagsNull {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogExtFileFlags {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogExtFileFlags"]));
            }
            set {
                curObj["LogExtFileFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHostNull {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHost {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHost"]));
            }
            set {
                curObj["LogExtFileHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpStatusNull {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpStatus {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpStatus"]));
            }
            set {
                curObj["LogExtFileHttpStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpSubStatusNull {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpSubStatus {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpSubStatus"]));
            }
            set {
                curObj["LogExtFileHttpSubStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileMethodNull {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileMethod {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileMethod"]));
            }
            set {
                curObj["LogExtFileMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileProtocolVersionNull {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileProtocolVersion {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileProtocolVersion"]));
            }
            set {
                curObj["LogExtFileProtocolVersion"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileRefererNull {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileReferer {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileReferer"]));
            }
            set {
                curObj["LogExtFileReferer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerIpNull {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerIp {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerIp"]));
            }
            set {
                curObj["LogExtFileServerIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerPortNull {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerPort {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerPort"]));
            }
            set {
                curObj["LogExtFileServerPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileSiteNameNull {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileSiteName {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileSiteName"]));
            }
            set {
                curObj["LogExtFileSiteName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeNull {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTime {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTime"]));
            }
            set {
                curObj["LogExtFileTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeTakenNull {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTimeTaken {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTimeTaken"]));
            }
            set {
                curObj["LogExtFileTimeTaken"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriQueryNull {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriQuery {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriQuery"]));
            }
            set {
                curObj["LogExtFileUriQuery"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriStemNull {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriStem {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriStem"]));
            }
            set {
                curObj["LogExtFileUriStem"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserAgentNull {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserAgent {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserAgent"]));
            }
            set {
                curObj["LogExtFileUserAgent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserNameNull {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserName {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserName"]));
            }
            set {
                curObj["LogExtFileUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileWin32StatusNull {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileWin32Status {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileWin32Status"]));
            }
            set {
                curObj["LogExtFileWin32Status"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogFileDirectory {
            get {
                return ((string)(curObj["LogFileDirectory"]));
            }
            set {
                curObj["LogFileDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFilePeriodNull {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFilePeriod {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFilePeriod"]));
            }
            set {
                curObj["LogFilePeriod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileTruncateSizeNull {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFileTruncateSize {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFileTruncateSize"]));
            }
            set {
                curObj["LogFileTruncateSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcDataSource {
            get {
                return ((string)(curObj["LogOdbcDataSource"]));
            }
            set {
                curObj["LogOdbcDataSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcPassword {
            get {
                return ((string)(curObj["LogOdbcPassword"]));
            }
            set {
                curObj["LogOdbcPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcTableName {
            get {
                return ((string)(curObj["LogOdbcTableName"]));
            }
            set {
                curObj["LogOdbcTableName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcUserName {
            get {
                return ((string)(curObj["LogOdbcUserName"]));
            }
            set {
                curObj["LogOdbcUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogPluginClsid {
            get {
                return ((string)(curObj["LogPluginClsid"]));
            }
            set {
                curObj["LogPluginClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogTypeNull {
            get {
                if ((curObj["LogType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogType {
            get {
                if ((curObj["LogType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogType"]));
            }
            set {
                curObj["LogType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MasqueradeDomain {
            get {
                return ((string)(curObj["MasqueradeDomain"]));
            }
            set {
                curObj["MasqueradeDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBandwidthNull {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBandwidth {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBandwidth"]));
            }
            set {
                curObj["MaxBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBatchedMessagesNull {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBatchedMessages {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBatchedMessages"]));
            }
            set {
                curObj["MaxBatchedMessages"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxConnectionsNull {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxConnections {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxConnections"]));
            }
            set {
                curObj["MaxConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxDirChangeIOSizeNull {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxDirChangeIOSize {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxDirChangeIOSize"]));
            }
            set {
                curObj["MaxDirChangeIOSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxEndpointConnectionsNull {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxEndpointConnections {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxEndpointConnections"]));
            }
            set {
                curObj["MaxEndpointConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMailObjectsNull {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMailObjects {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMailObjects"]));
            }
            set {
                curObj["MaxMailObjects"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMessageSizeNull {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMessageSize {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMessageSize"]));
            }
            set {
                curObj["MaxMessageSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsNull {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnections {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnections"]));
            }
            set {
                curObj["MaxOutConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsPerDomainNull {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnectionsPerDomain {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnectionsPerDomain"]));
            }
            set {
                curObj["MaxOutConnectionsPerDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRecipientsNull {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRecipients {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRecipients"]));
            }
            set {
                curObj["MaxRecipients"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSessionSizeNull {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSessionSize {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSessionSize"]));
            }
            set {
                curObj["MaxSessionSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSmtpErrorsNull {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSmtpErrors {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSmtpErrors"]));
            }
            set {
                curObj["MaxSmtpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNameResolutionTypeNull {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int NameResolutionType {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["NameResolutionType"]));
            }
            set {
                curObj["NameResolutionType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PickupDirectory {
            get {
                return ((string)(curObj["PickupDirectory"]));
            }
            set {
                curObj["PickupDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string QueueDirectory {
            get {
                return ((string)(curObj["QueueDirectory"]));
            }
            set {
                curObj["QueueDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
              