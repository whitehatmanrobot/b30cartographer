ate\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script language=\"javascript\" type=\"text/javascript\" src=\"JavaScripts/Hourglass" +
                        "Javascript.js\"></script>\r\n<table>\r\n    Add Image<br />\r\n    <hr />\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__ctrl2 = this.@__BuildControllblErrorMsg();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("&nbsp;<br />\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Panel @__ctrl3;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__ctrl3 = this.@__BuildControlPanel2();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Panel @__ctrl4;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__ctrl4 = this.@__BuildControlPanel1();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_alertbox_ascx @__ctrl5;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__ctrl5 = this.@__BuildControlAlertBox1();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n</table>\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_addimagefile_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ktupwmag.7.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "17750B898FEB46E543D65BF2A24845E1"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\AddImageFile.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.IO;

public partial class Component_AddImageFile : System.Web.UI.UserControl
{
    private Guid originalFileGuid = Guid.Empty;

    /// <summary>
    /// Page load Event for the Page
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e">Event Argument</param>
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!(Session["AddImageFile_originalFileGuid"] == null))
        {
            originalFileGuid = (Guid)(Session["AddImageFile_originalFileGuid"]);
        }
        if (!this.IsPostBack)
        {
            ImageFileHandler.LoadPropertyFromWebCfgFile();
            CatalogServices cs = Constants.Proxy;

            Session["ArrayMediaLocale"] = null;
            ImageLocaleMap.PopulateLocales();

            ddlCulture.DataSource = cs.GetLocale();
            ddlCulture.DataBind();
            ddlCulture.Items.FindByValue("1033").Selected = true;
            List<ImageSize> imSizeList = new List<ImageSize>(cs.GetImageSize());

            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (imSizeList[i].Id == -1)//thumbnail size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (//custom size image
                    imSizeList[i].Id == 0)//org size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (
                    imSizeList[i].Id == 4)//thumbnail size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            ddlDim.DataSource = imSizeList.ToArray();
            ddlDim.DataBind();
            ddlMediaType.DataSource = cs.GetMediaType();
            ddlMediaType.DataBind();
            ddlMediaType.Items.FindByValue("14").Selected = true;

            Button add = ImageLocaleMap.FindControl("ButtonAdd") as Button;
            if (add != null)
            {
                add.Enabled = true;
            }

            Button remove = ImageLocaleMap.FindControl("ButtonRemove") as Button;
            if (remove != null)
            {
                remove.Enabled = true;
            }
        }
        lblErrorMsg.Text = "";
        if (Request.Form["hid_f"] == "1")
        {
            Request.Form["hid_f"].Replace("1", "0");
            if ((bool)Session["AddPredefDim"] == false)
                AddCustomDim(false);
            else
                AddPredefDim(false);
        }


    }
    /// <summary>
    /// Upload Button Click Event
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e"></param>
    protected void btnUpload_Click(object sender, EventArgs e)
    {
        if (null != this.uploadImageFile.PostedFile)
        {
            if (!uploadImageFile.PostedFile.ContentType.ToLower().StartsWith("image"))
            {
                lblErrorMsg.Text = "You must select/upload an image file.";
                return;
            }
            try
            {
                Byte[] fileContentBuf = new byte[uploadImageFile.PostedFile.ContentLength];
                uploadImageFile.FileContent.Read(fileContentBuf, 0, fileContentBuf.Length);
                this.originalFileGuid = ImageFileHandler.UploadImage(new FileInfo(uploadImageFile.FileName), fileContentBuf, System.Guid.Empty);
                this.tbxDiscription.Text = uploadImageFile.PostedFile.FileName;
                this.tbxTitle.Text = uploadImageFile.FileName;
                Session.Add("AddImageFile_originalFileGuid", originalFileGuid);
            }
            catch (Exception ex)
            {
                lblErrorMsg.Text = ex.Message;
                return;
            }
        }
        else
        {
            lblErrorMsg.Text = "You must select a file to upload.";
        }


        LoadDimAssign(lbDimAssign);
        Panel1.Enabled = true;
    }
    /// <summary>
    /// Save button click event handler
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e">Event Argument</param>
    protected void btnSave_Click(object sender, EventArgs e)
    {
        Hashtable propImageList = new Hashtable();
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        ListBox currentListBox = null;

        int thumbNailImageSizeID = -1, OriginalImageSizeID = -1, imageFormatID = -1;
        int thumbNailWidth = -1, thumbNailHeight = -1;
        //get original image info.
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }

        foreach (ImageFormat imFormat in Constants.Proxy.GetImageFormat())
        {
            if (("." + imFormat.Name.ToLower()).CompareTo(sourceImageFileExtension.ToLower()) == 0)
            {
                imageFormatID = imFormat.Id;
                break;
            }
        }
        //get image size id
        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Name.CompareTo("Original Image") == 0)
                OriginalImageSizeID = imSize.Id;
            else if (imSize.Name.CompareTo("EMS Tool Thumbnail") == 0)
            {
                thumbNailHeight = imSize.Height;
                thumbNailWidth = imSize.Width;
                thumbNailImageSizeID = imSize.Id;
            }
        }
        OriginalImageSizeID = 0;
        thumbNailImageSizeID = 4;
        //create image 
        Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image();

        ImageInstance[] imageInst = null;
        if (rbtnResizetoSpecificDim.Checked == true)
        {
            imageInst = new ImageInstance[lbDimResize.Items.Count + 2];
            currentListBox = lbDimResize;
        }
        else if (rbtnAssignSpecificDim.Checked)
        {
            if (rbtnPredefine.Checked == true)
            {
                imageInst = new ImageInstance[lbDimAssign.Items.Count + 2];
                currentListBox = lbDimAssign;
            }
            else if (rbtnNativeDim.Checked)
                imageInst = new ImageInstance[2];
            else
                return;
        }
        else
        {
            return;
        }
        ImageSize imSize1;
        //original image file.
        imSize1 = new ImageSize();
        imageInst[0] = new ImageInstance();
        imageInst[0].Id = originalFileGuid;
        imageInst[0].ImageSizeId = OriginalImageSizeID;
        imageInst[0].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
        imageInst[0].ImageFormatId = imageFormatID;
        imSize1.Id = OriginalImageSizeID;
        imSize1.Width = sourceImageFileWidth;
        imSize1.Height = sourceImageFileHeight;
        propImageList.Add(imageInst[0].Id, imSize1);
        //Thumbnail image file
        imageInst[1] = new ImageInstance();
        imageInst[1].Id = Guid.NewGuid();
        imageInst[1].ImageSizeId = thumbNailImageSizeID;
        imageInst[1].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
        imageInst[1].ImageFormatId = imageFormatID;
        imSize1 = new ImageSize();
        imSize1.Id = thumbNailImageSizeID;
        imSize1.Width = thumbNailWidth;
        imSize1.Height = thumbNailHeight;
        propImageList.Add(imageInst[1].Id, imSize1);
        if (currentListBox != null)
        {
            int i = 2;
            foreach (ListItem listItem in currentListBox.Items)
            {
                string[] s = listItem.Value.Split();
                imSize1 = new ImageSize();
                imageInst[i] = new ImageInstance();
                imageInst[i].Id = Guid.NewGuid();
                imageInst[i].ImageSizeId = int.Parse(s[0]);
                imageInst[i].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
                imageInst[i].ImageFormatId = imageFormatID;
                imSize1.Id = imageInst[i].ImageSizeId;
                imSize1.Width = int.Parse(s[1]);
                imSize1.Height = int.Parse(s[2]);
                propImageList.Add(imageInst[i].Id, imSize1);
                imageInst[0].Modified = InsertDataChangeType.None;
                i++;
            }
        }
        image.Instances = (MediaInstance[])imageInst;
        ImageFileHandler.PropImage(image, propImageList, originalFileGuid);


        MediaLocale mediaLocale = new MediaLocale();
        mediaLocale.Description = this.tbxDiscription.Text;
        mediaLocale.Title = this.tbxTitle.Text;
        mediaLocale.Lcid = int.Parse(ddlCulture.SelectedItem.Value);

        ListBox listBoxLeft = this.ImageLocaleMap.FindControl("TextBoxLeft") as ListBox;

        List<MediaLocaleMap> mlmList = new List<MediaLocaleMap>();
        for (int i = 0; i < listBoxLeft.Items.Count; i++)
        {
            int lcid;
            if (int.TryParse(listBoxLeft.Items[i].Value, out lcid))
            {
                MediaLocaleMap mlm = new MediaLocaleMap();
                mlm.Lcid = lcid;
                mlm.Modified = DataChangeType.Add;
                mlmList.Add(mlm);
            }
        }
        mediaLocale.MappedLcids = mlmList.ToArray();

        image.Id = Guid.NewGuid();
        image.Creator = "N/A";
        image.Issuer = "N/A";
        image.Modified = InsertDataChangeType.Add;
        CatalogServices cs = Constants.Proxy;
        image.MediaTypeId = int.Parse(ddlMediaType.SelectedValue);
        image.MetadataProviderId = 2;
        image.VisibilityStatusId = 3;
        image.Locales = new MediaLocale[1];
        image.Locales[0] = mediaLocale;
        image.MediaTypeId = int.Parse(ddlMediaType.SelectedValue);
        image.VisibilityDate = DateTime.Now;
        cs.SaveImage(image);

        if (Session["RecentImageList"] == null)
        {
            Session["RecentImageList"] = new List<ImageSearchResponse>();
        }
        List<ImageSearchResponse> recentImageList = (List<ImageSearchResponse>)(Session["RecentImageList"]);
        bool IsInList = false;
        for (int i = 0; i < recentImageList.Count; i++)
        {
            if (recentImageList[i].MediaId == image.Id)
            {
                ImageSearchResponse tmpResp = recentImageList[i];
                recentImageList.RemoveAt(i);
                recentImageList.Add(tmpResp);
                IsInList = true;
                break;
            }
        }
        if (IsInList == false)
        {
            ImageSearchResponse searchResponse = new ImageSearchResponse();
            searchResponse.MediaId = image.Id;
            searchResponse.Title = image.Locales[0].Title;
            searchResponse.Description = image.Locales[0].Description;
            foreach (ImageInstance imInst in image.Instances)
            {
                if (imInst.ImageSizeId == thumbNailImageSizeID)
                    searchResponse.Url = imInst.FileUrl;
            }
            if (recentImageList.Count == 20)
                recentImageList.RemoveAt(0);
            recentImageList.Add(searchResponse);
        }

        if (Session["AddNewImageReturnURL"] != null)
        {
            string returnULR = Session["AddNewImageReturnURL"].ToString();

            Session["AddNewImageReturnURL"] = null;
            //Session["SelectedImage"] = cs.GetImage(image.Id);
            Session["SelectedImage"] = image;
            Response.Redirect(returnULR);
        }
        else
        {
            Response.Redirect("~/Image.aspx");
        }
    }

    protected void btnAddDim_Click(object sender, EventArgs e)
    {
        AddPredefDim(true);
    }


    protected void btnAddCustomDim_Click(object sender, EventArgs e)
    {
        AddCustomDim(true);
    }

    private void AddPredefDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }
        int width = 0, height = 0;

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Id.ToString() == ddlDim.SelectedItem.Value)
            {
                width = imSize.Width;
                height = imSize.Height;
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to continue?", "hid_f");
                    Session.Add("AddPredefDim", true);
                    return;
                }
                AddDimToListBox(width, height, int.Parse(ddlDim.SelectedItem.Value));
                break;
            }
        }
    }
    private void AddCustomDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }
        int width, height;
        if (int.TryParse(tbxHeight.Text, out height) && int.TryParse(tbxWidth.Text, out width))
        {
            if (width > 0 && width < 100000 && height > 0 && height < 100000)
            {
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    Session.Add("AddPredefDim", false);
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to contineu?", "hid_f");
                    return;
                }
                AddDimToListBox(width, height, -1);
            }
            else
            {
                lblErrorMsg.Text = "Invalidate height or width";
            }
        }
        else
        {
            lblErrorMsg.Text = "Invalidate height or width";
        }
    }
    private void AddDimToListBox(int width, int height, int sizeID)
    {
        foreach (ListItem listItem in lbDimResize.Items)
        {
            //            int itemWidth, itemHeight, itemSizeID;
            string[] s = listItem.Value.Split();

            if (sizeID == -1)
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0
                      && s[1].CompareTo(width.ToString()) == 0
                      && s[2].CompareTo(height.ToString()) == 0
                      )
                {
                    lblErrorMsg.Text = "Custom size image instance with width = " + width.ToString() + " and height = " + height.ToString() + " is in the list already.";
                    return;
                }
            }
            else
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0)
                {
                    lblErrorMsg.Text = "Predefine size image instance with SizeID = " + sizeID.ToString() + " (W x H:" + width.ToString() + " x " + height.ToString() + ")" + " is in the list already.";
                    return;
                }
            }
        }
        string displayStr = string.Empty;
        if (sizeID == -1)
            displayStr = "Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")";
        else
            displayStr = ddlDim.SelectedItem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
        ListItem newListItem = new ListItem();
        newListItem.Text = displayStr;
        newListItem.Attributes.Add("Height", height.ToString());
        newListItem.Attributes.Add("Width", width.ToString());
        ImageInstance inst = new ImageInstance();
        newListItem.Value = sizeID.ToString() + " " + width.ToString() + " " + height.ToString();
        lbDimResize.Items.Add(newListItem);

    }

    protected void btnRemoveDim_Click(object sender, EventArgs e)
    {
        RemoveDim(lbDimResize);
    }
    private void RemoveDim(ListBox listbox)
    {
        if (listbox.SelectedIndex != -1)
        {
            listbox.Items.RemoveAt(listbox.SelectedIndex);
        }
    }

    protected void btnRemovePerdefDim_Click(object sender, EventArgs e)
    {
        RemoveDim(lbDimAssign);
    }

    protected void LoadDimAssign(ListBox listBox)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Width == sourceImageFileWidth && imSize.Height == sourceImageFileHeight)
            {
                int sizeID = imSize.Id;
                int width = imSize.Width;
                int height = imSize.Height;
                string displayStr = string.Empty;
                displayStr = imSize.Name + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
                ListItem newListItem = new ListItem();
                newListItem.Text = displayStr;
                newListItem.Attributes.Add("Height", height.ToString());
                newListItem.Attributes.Add("Width", width.ToString());
                ImageInstance inst = new ImageInstance();
                newListItem.Value = sizeID.ToString() + " " + width.ToString() + " " + height.ToString();
                listBox.Items.Add(newListItem);
            }
        }
    }

    protected void rbtnResizetoSpecificDim_CheckedChanged(object sender, EventArgs e)
    {
        rbtnPredefine.Checked = false;
        rbtnPredefine.Enabled = false;
        rbtnNativeDim.Checked = false;
        rbtnNativeDim.Enabled = false;
    }

    protected void rbtnAssignSpecificDim_CheckedChanged(object sender, EventArgs e)
    {
        rbtnPredefine.Checked = true;
        rbtnPredefine.Enabled = true;

        rbtnNativeDim.Enabled = true;
    }

}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.17.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "E2FA25B6FD422B8752A7EE2F1BC1DBF7"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class CategoriesTreeControl : System.Web.UI.UserControl
{
    private proxy.CategorySystem[] categorySystems;
    private TreeNodeSelectAction categorySysAction = TreeNodeSelectAction.Expand ;

    public TreeNodeSelectAction CategorySystemSelectAction
    {
        set { categorySysAction = value; }
    }

    public proxy.CategorySystem[] CategorySystems
    {
        set
        {
            List<string> allowed = new List<string>(ConfigurationManager.AppSettings["CategorySystemWhiteList"].Split(new char[] { ',' }));
            List<proxy.CategorySystem> categorySystemList = new List<proxy.CategorySystem>();
            foreach (proxy.CategorySystem cs in value)
            {
                if (allowed.Contains(cs.Id.ToString()))
                {
                    categorySystemList.Add(cs);
                }
            }
            categorySystems = (proxy.CategorySystem[])categorySystemList.ToArray();
        }
    }

    public int SelectedCategoryID
    {
        get 
        {
            if (CategoryTreeView.SelectedNode != null)
            {
                return Convert.ToInt32(CategoryTreeView.SelectedNode.Value);
            }
            return -1;
        }
    }

    public string SelectedCategoryPath
    {
        get 
        {
            if (CategoryTreeView.SelectedNode != null)
            {
                string path = string.Empty;
                GetNodePath(CategoryTreeView.SelectedNode, ref path);
                return path;
            }
            return string.Empty;
        }
    }

    public bool EnableCategoryTreeView
    {
        set { CategoryTreeView.Enabled = value; }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            TreeNode nodeRoot = new TreeNode("Category Systems");
            nodeRoot.SelectAction = TreeNodeSelectAction.Expand;
            CategoryTreeView.Nodes.Add(nodeRoot);

            foreach (proxy.CategorySystem cs in categorySystems)
            {
                TreeNode nodeCategorySystem = new TreeNode(cs.Name, cs.Id.ToString());
                nodeCategorySystem.SelectAction = categorySysAction;
                nodeRoot.ChildNodes.Add(nodeCategorySystem);
                PopulateCategoryTree(nodeCategorySystem, cs.Categories);
            }
        }
    }

    private void GetNodePath(TreeNode node, ref string path)
    {
        if (node != null)
        {
            path = @"\" + node.Text + path;
            GetNodePath(node.Parent, ref path);
        }
    }

    private void PopulateCategoryTree(TreeNode node, proxy.Category[] categories)
    {
        Array.Sort
        (
            categories, delegate(proxy.Category c1, proxy.Category c2)
            {
                if (c1.LocalizedName == null)
                    return string.Empty.CompareTo(c2.LocalizedName);
                if (c2.LocalizedName == null)
                    return c1.LocalizedName.CompareTo(string.Empty);
                else                
                    return c1.LocalizedName.CompareTo(c2.LocalizedName);
            }
        );

        foreach (proxy.Category cg in categories)
        {
            string name = cg.LocalizedName;
            if (!string.IsNullOrEmpty(name))
            {
                TreeNode nodeCategory = new TreeNode(name, cg.Id.ToString());                
                nodeCategory.ShowCheckBox = false;
                nodeCategory.SelectAction = TreeNodeSelectAction.Select;
                node.ChildNodes.Add(nodeCategory);
                PopulateCategoryTree(nodeCategory, cg.Categories);
            }
        }
    }

    public bool IsSelectedNodeCategorySystem()
    {
        bool result = true;
        TreeNode node = this.CategoryTreeView.SelectedNode;
        if (node != null)
        {
            int treeLevelCount = 0;
            
            while(node.Parent != null)
            {
                treeLevelCount ++;
                node = node.Parent;

                if (treeLevelCount >= 2)
                {
                    result = false;
                    break;
                }
            }
        }
        return result;
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.3.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "069224AC31D64D237145F3F2BD7B0E51"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
//using Microsoft.Ems.Common.Catalog;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;

public partial class Component_ImageSearch : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        lblErrorMsg.Text = "";
        if (!IsPostBack)
        {

            ImageFileHandler.LoadPropertyFromWebCfgFile();

            CatalogServices cs = Constants.Proxy; 
            lbxCulture.DataSource = cs.GetLocale();
            lbxCulture.DataBind();
            List<ImageSize> imList=new List<ImageSize>();
            foreach (ImageSize imSize in cs.GetImageSize())
            {
                if (imSize.Id != 4)
                    imList.Add(imSize);
            }
            lbxImageSize.DataSource = imList;
            lbxImageSize.DataBind();
        }
    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        if (tbxImageID.Text.Length == 0 && tbxTitle.Text.Length == 0)
        {
            lblErrorMsg.Text = "You need to specify image ID or title for search.";
            return;
        }
        try
        {
            ImageSearchRequest imageSearchRequest = new ImageSearchRequest();
            imageSearchRequest.Dimensions = GetSelectListItemValue(lbxImageSize).ToArray();
            imageSearchRequest.Locale = GetSelectListItemValue(lbxCulture).ToArray();
            if(tbxImageID.Text.Length>0)
                imageSearchRequest.MediaId = new Guid(tbxImageID.Text);
            imageSearchRequest.Title = tbxTitle.Text;
            Session.Add("ImageSearchRequest", imageSearchRequest);

            Response.Redirect("~/ImageSearchResult.aspx");
        }
        catch (Exception ex)
        {
            lblErrorMsg.Text = ex.Message;
        }
    }
    private List<int> GetSelectListItemValue(ListBox listBox)
    {
        List<int> list = new List<int>();
        foreach (ListItem item in listBox.Items)
        {
            
            if (item.Selected)
                list.Add(int.Parse(item.Value));
        }
        return list;
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ktupwmag.5.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\TextBoxUpdateControl.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "3AB5545682067BFADD199DC54D116041"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\TextBoxUpdateControl.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.Editorial;
using System.Text;

public partial class TextBoxUpdateControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        MediaLocale[] arrayMediaLocale = Session["ArrayMediaLocale"] as MediaLocale[];
        CatalogServices proxy = Constants.Proxy;

        if (!this.IsPostBack)
        {            
            string id = this.ID;
            Operation_Mode mode = Operation_Mode.Undefined;

            if (Session["OperationMode"] != null)
            {
                mode = (Operation_Mode)Session["OperationMode"];
            }

            Locale[] locales = proxy.GetLocale();

            if (id.Equals("TextBoxUpdateLocale"))
            {
                this.TextBoxLableReplaceMe.Text = "Locale(s)";
                this.TextBoxLableReplaceMe.Font.Bold = true;

                if (mode != Operation_Mode.Add)
                {
                    Locale[] arrayLocale = new Locale[arrayMediaLocale.Length];
                    for (int i = 0; i < arrayLocale.Length; i++)
                    {
                        arrayLocale[i] = new Locale();
                        arrayLocale[i].LCID = arrayMediaLocale[i].Lcid;
                        Locale locale = (Array.Find(locales, delegate(Locale l) { return l.LCID == arrayMediaLocale[i].Lcid; }));
                        string localeCode = locale.LocaleCode;                            
                        arrayLocale[i].LocaleCode = localeCode;
                    }

                    ListBox listbox = this.MainTextBox;
                    listbox.DataSource = arrayLocale;
                    listbox.DataMember = "LCID";
                    listbox.DataValueField = "LCID";
                    listbox.DataTextField = "LocaleCode";
                    listbox.DataBind();
                }
            }
            else if (id.Equals("TextBoxVideInstance"))
            {
                this.TextBoxLableReplaceMe.Text = "Video Instance";
                this.MainTextBox.Width = 450;

                DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                                            as DoubleListBoxControl;
                if (horizontalAddRemoveControl != null)
                {
                    Label labelTitle = horizontalAddRemoveControl.FindControl("LabelTitle") as Label;
                    if (labelTitle != null)
                    {
                        labelTitle.Text = "Soundtrack Language(s)";
                    }
                }

               // if (mode == Operation_Mode.Edit)
                {
                    Video video = Session["Video"] as Video;
                    if (video != null)
                    {
                        MediaInstance[] arrayMediaInstance = video.Instances;
                        Session["VideoInstances"] = arrayMediaInstance;

                        if (arrayMediaInstance != null)
                        {
                            foreach (MediaInstance mi in arrayMediaInstance)
                            {
                                ListItem item = new ListItem();
                                item.Value = (mi as VideoInstance).Id.ToString();


                                item.Text = DisplayHelper.BuildRepresentStringForVideoInstance((VideoInstance)mi, locales);

                                this.MainTextBox.Items.Add(item);
                            }
                        }
                    }
                }

                Session["VideoInstanceChanged"] = false;
            }
            else if (id.Equals("TextBoxSubtitleOverlay"))
            {
                this.TextBoxLableReplaceMe.Text = "Subtitle Overlay File(s)";
            }
            else if (ID.Equals("CategoriesControl"))
            {
                this.TextBoxLableReplaceMe.Text = "Categories";
                Video video = Session["Video"] as Video;
                MediaCategory[] mediaCategory = video.Categories;
                CategorySystem[] categorySystem = proxy.GetCategorySystem();
            }
            else if (ID.Equals("TextBoxUpdateControlPreview"))
            {
                this.TextBoxUpdate.Width = 350;
                this.TextBoxUpdate.Height = 80;
                this.TextBoxCell.Width = 250;
                this.TextBoxCell.Height = 100;
                this.MainTextBox.Width = 250;
                this.MainTextBox.Height = 100;
                this.TextBoxLableReplaceMe.Text = "Previews";
            }
            else if (this.ID.Equals("TextBoxUpdateControlProviderTerms"))
            {
                TextBoxLableReplaceMe.Text = "Provider Terms";
                VideoSeason season = Session["VideoSeason"] as VideoSeason;
                if (season != null)
                {
                    int providerId = season.MetadataProviderId;

                    Provider[] providers = Session["Proviers"] as Provider[];

                    if (providers == null)
                    {
                        providers = proxy.GetProvider();
                    }

                    foreach (Provider p in providers)
                    {
                        if (p.Id == providerId)
                        {
                            this.MainTextBox.Items.Add(new ListItem(p.Name));
                        }
                    }

                }
            }
            else if (this.ID.Equals("TextBoxUpdateControlSeasons"))
            {
                TextBoxLableReplaceMe.Text = "Seasons";
            }
            else if (this.ID.Equals("TextBoxUpdateControlEpisodes"))
            {
                TextBoxLableReplaceMe.Text = "Episodes";
            }


            if (this.MainTextBox.Items.Count > 0)
            {
                this.MainTextBox.SelectedIndex = 0;
                MainTextBox_OnSelectedIndexChanged(this.MainTextBox, null);
            }
        }
    }


    public void Enable(bool enable)
    {
        this.MainTextBox.Enabled = enable;
        this.ButtonPlus.Enabled = enable;
        this.ButtonEdit.Enabled = enable;
        this.ButtonDelete.Enabled = enable;
        this.TextBoxLableReplaceMe.Enabled = enable;
    }

    public void MainTextBox_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            Locale_OnSelectedIndexChanged(sender, e);
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            VideInstance_OnSelectedIndexChanged(sender, e);
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            SubtitleOverlay_OnSelectedIndexChanged(sender, e);
        }
    }

    private void VideoFile_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        ListBox listbox = sender as ListBox;
        if (listbox.SelectedItem != null)
        {
            TextBox TextBoxVideoFileGuid = base.Parent.FindControl("TextBoxVideoFileGuid") as TextBox;
            TextBoxVideoFileGuid.Text = listbox.SelectedItem.Value;
//            DropDownList dropdownListLanguage = base.Parent.FindControl("DropDownListLang") as DropDownList;
            //foreach (ListItem li in dropdownListLanguage.Items)
            //    li.Selected = false;
            //dropdownListLanguage.Items.FindByText(listbox.SelectedItem.Text).Selected = true;
            UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                         as UpdatePanel;
            if (updatePanelVideoInstanceControl != null)
            {
                updatePanelVideoInstanceControl.Update();
            }
            ListBox listBox1 = base.Parent.FindControl("TextBoxVideInstance").FindControl("MainTextBox") as ListBox;

            Guid MediaInstanceID = new Guid(listBox1.SelectedValue);
            string id =  (sender as ListBox).SelectedItem.Text;

            Guid viId = new Guid(id);

            MediaInstance vi = Array.Find((MediaInstance[])Session["VideoInstances"], delegate(MediaInstance mi) { return mi.Id.Equals(MediaInstanceID); });
            if (vi == null)
                return;

            VideoFile vf = Array.Find(((VideoInstance)(vi)).VideoFiles, delegate(VideoFile vftmp) { return vftmp.Id.Equals(viId); });

            if (vf == null)
                return;

            TextBox TextBoxVideoFileURL = base.Parent.FindControl("TextBoxVideoFileURL") as TextBox;
            TextBoxVideoFileURL.Text = vf.FileUrl;

            TextBox TextBoxFileSize = base.Parent.FindControl("TextBoxFileSize") as TextBox;
            TextBoxFileSize.Text = vf.Size.ToString();
        }
    }

    public void ButtonPlus_OnClick(object sender, EventArgs e)
    {
        if (Session["EnterUserInputModalMode_ActiveTabNumber"] == null)
        {
            Response.Redirect("Default.aspx");
        }

        Enable(false);

        Session["OPERATION_MODE"] = Operation_Mode.Add;

        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            UpdatePanelModeAdjust();
            // disselect main textbox
            if (this.MainTextBox.SelectedItem != null)
            {
                this.MainTextBox.SelectedItem.Selected = false;
            }
            this.MainTextBox.Enabled = false;

            // enable DropDownListLocale
            DropDownList dropDownListLocale = base.Parent.FindControl("DropDownListLocale")
                                                        as DropDownList;
            if (dropDownListLocale != null)
            {
                //Session["ArrayLocaleAll"]
                // remove locales which already exiting in main textbox.

                for (int i = 0; i < this.MainTextBox.Items.Count; i++)
                {
                    ListItem item = this.MainTextBox.Items[i];
                    if (dropDownListLocale.Items.Contains(item))
                    {
                        dropDownListLocale.Items.Remove(item);
                    }
                }

                dropDownListLocale.Visible = true;

                Label labelLocaleSystem = base.Parent.FindControl("LabelLocaleSystem") as Label;
                labelLocaleSystem.Visible = true;
            }

            // enable SaveLocalButton
            ToggleControlAttributes();
            // popupate TextBoxRight
            PrepareEditArea();

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];

            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 2;

            // EditingMediaLoale is checked to determine if we are editing or adding. When adding it should be set to null
            Session["EditingMediaLoale"] = null;
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = true;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Text=string.Empty;

            Button btnSaveVideoSubtitle = base.Parent.FindControl("ButtonSaveSubtitleURL") as Button;
            btnSaveVideoSubtitle.Enabled = true;

            Button btnCancelSaveVideoSubtitle = base.Parent.FindControl("BtnCancelSaveSubtitleURL") as Button;
            btnCancelSaveVideoSubtitle.Enabled = true;

            Enable(false);
            this.TextBoxLableReplaceMe.Enabled = true;

            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = true;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Enabled = true;

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelVideoInstanceControl") as UpdatePanel;
            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            Session["fileName"] = null;
            MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

            Guid viId = Guid.NewGuid();
            MainTextBox.Items.Add(new ListItem(viId.ToString(), viId.ToString()));
            MainTextBox.SelectedIndex = -1;
            MainTextBox.Items.FindByText(viId.ToString()).Selected = true;
            VideoInstance vi = new VideoInstance();
            vi.Id = viId;
            vi.Modified = InsertDataChangeType.Add;
            vi.AudioTrackLanguages = new VideoAudioTrackLanguage[0];
            vi.Subtitles = new VideoSubtitle[0];
            vi.VideoFiles = new VideoFile[0];
            vi.IsAcquirable = true;
            vi.IsPreview = false;
            vi.AudioEncodingId = 1;
            vi.VideoDefinitionId = 1;
            vi.AudioEncodingId = 1;
            vi.VideoEncodingId = 8;
            vi.VideoBitRate = -1;
            vi.VideoAspectRatio = "1.19:1";
            vi.VideoResolution = "240i";
            vi.Enabled = true;
            vi.IsDRM = true;

            MediaInstance[] mList = DisplayHelper.ArrayItemAdd(mediaInstances, (MediaInstance)vi);
            Session["VideoInstances"] = mList;
            Session["VideoInstanceIdAdding"] = vi.Id;
            Session["VideoInstanceAdd"] = true;
            if (vi != null)
            {
                PopulateDisplay(vi);
            }

            // 
            ButtonEdit_OnClick(null, null);
            Session["OPERATION_MODE"] = Operation_Mode.Add;
            
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Visible = true;
            }

            // enable "Save Video Instance" button
            Button btnSaveVideoInstance = base.Parent.FindControl("ButtonSaveVideoInstance") as Button;
            btnSaveVideoInstance.Enabled = true;

            Button btnCancelSaveVideoInstance = base.Parent.FindControl("BtnCancelSaveVideoInstance") as Button;
            btnCancelSaveVideoInstance.Enabled = true;
            
            UpdatePanel updatePanelpreviewData = base.Parent.FindControl("PreviewControlVideoInstance").FindControl("updatePanelPreview") as UpdatePanel;
            if (updatePanelpreviewData != null)
            {
                updatePanelpreviewData.Update();
            }

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelInstanceData") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            Enable(false);

            ((TableRow)(base.Parent.FindControl("TableRowVideoInstance"))).Enabled = true;


            
            // ButtonEdit_OnClick() increased counter already
            //int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            //Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
    }

    private void UpdatePanelModeAdjust()
    {
        UpdatePanel updatePanelLocaleControl = base.Parent.FindControl("updatePanelLocaleControl")
                                                as UpdatePanel;

        if (updatePanelLocaleControl != null)
        {
            updatePanelLocaleControl.ChildrenAsTriggers = true;
            updatePanelLocaleControl.UpdateMode = UpdatePanelUpdateMode.Always;
        }
    }

    private void PrepareEditArea()
    {
        DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                    as DoubleListBoxControl;

        if (horizontalAddRemoveControl != null)
        {
            horizontalAddRemoveControl.PopulateLocales();
        }

        ClearTextBoxes();
    }

    private void ClearTextBoxes()
    {
        TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }
    }

    public void ButtonEdit_OnClick(object sender, EventArgs e)
    {
        if ((this.MainTextBox.Items == null) || (this.MainTextBox.Items.Count == 0) || (this.MainTextBox.SelectedItem == null))
        {
            return;
        }

        if (Session["EnterUserInputModalMode_ActiveTabNumber"] == null)
        {
            Response.Redirect("Default.aspx");
        }

        Session["OPERATION_MODE"] = Operation_Mode.Edit;

        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            UpdatePanelModeAdjust();
            if (this.MainTextBox.SelectedItem != null)
            {
                // enable buttons - Add/Edit. change attributs of other controls
                ToggleControlAttributes();
                this.ButtonEdit.Enabled = false;
                this.ButtonEdit.ImageUrl = "~/Images/Edit_Gray.gif";
                Enable(false);

                int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
                Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 2;
            }
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            Session["VideoInstanceChanged"] = true;
            // enable "Add"/"Remove buttons", 
            DoubleListBoxControl doubleListBoxControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                            as DoubleListBoxControl;

            if (doubleListBoxControl != null)
            {
                Button add = doubleListBoxControl.FindControl("ButtonAdd") as Button;
                if (add != null)
                {
                    add.Enabled = true;
                }

                Button remove = doubleListBoxControl.FindControl("ButtonRemove") as Button;
                remove.Enabled = true;
            }

            // enable "Save Video Instance" button
            Button btnSaveVideoInstance = base.Parent.FindControl("ButtonSaveVideoInstance") as Button;
            btnSaveVideoInstance.Enabled = true;

            Button btnCancelSaveVideoInstance = base.Parent.FindControl("BtnCancelSaveVideoInstance") as Button;
            btnCancelSaveVideoInstance.Enabled = true;

            ((TableRow)(base.Parent.FindControl("TableRowSpokenLanguage"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowEmbeddedSubtitles"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowVideoInstanceInfo"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowVideoInstance"))).Enabled = true;
            this.Enable(false);
            this.updatePanelTextBoxUpdate.Update();

            UpdatePanel updatePanelDoubleListBox = base.Parent.FindControl("updatePanelDoubleListBox") as UpdatePanel;
            VideInstance_OnSelectedIndexChanged(this.MainTextBox, null);
            if (updatePanelDoubleListBox != null)
            {
                updatePanelDoubleListBox.Update();
            }

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelInstanceData") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];

            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            Button btnSaveVideoSubtitle = base.Parent.FindControl("ButtonSaveSubtitleURL") as Button;
            btnSaveVideoSubtitle.Enabled = true;


            Button btnCancelSaveSubtitleURL = base.Parent.FindControl("BtnCancelSaveSubtitleURL") as Button;
            btnCancelSaveSubtitleURL.Enabled = true;

            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = false;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Enabled = true;
            Enable(false);

            // MainTextBox.Enabled = false;
            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelVideoInstanceControl") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
    }

    public void ToggleControlAttributes()
    {
        DoubleListBoxControl horizontalControl = base.Parent.FindControl("DoubleListBoxControl")
                                                            as DoubleListBoxControl;
        if (horizontalControl != null)
        {
            Button buttonAdd = horizontalControl.FindControl("ButtonAdd") as Button;
            if (buttonAdd != null)
            {
                buttonAdd.Enabled = !buttonAdd.Enabled;
            }

            Button buttonRemove = horizontalControl.FindControl("ButtonRemove") as Button;
            if (buttonRemove != null)
            {
                buttonRemove.Enabled = !buttonRemove.Enabled;
            }
        }


        TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        Button buttonSave = base.Parent.FindControl("SaveLocalButton") as Button;
        if (buttonSave != null)
        {
            buttonSave.Enabled = !buttonSave.Enabled;
        }

        Button buttonCancel = base.Parent.FindControl("BtnCancel") as Button;
        if (buttonCancel != null)
        {
            buttonCancel.Enabled = !buttonCancel.Enabled;
        }
        Button ButtonGenerateReducedDescription = base.Parent.FindControl("ButtonGenerateReducedDescription") as Button;
        if (ButtonGenerateReducedDescription != null)
        {
            ButtonGenerateReducedDescription.Enabled = !ButtonGenerateReducedDescription.Enabled;
        }


    }

    public void ButtonDelete_OnClick(object sender, EventArgs e)
    {
        int lcid;

        Session["OPERATION_MODE"] = Operation_Mode.Delete;

        if (int.TryParse(this.MainTextBox.SelectedValue, out lcid))
        {
            UpdatePanelModeAdjust();

            MediaLocale[] mediaLocales = Session["ArrayMediaLocale"] as MediaLocale[];
            MediaLocale[] mediaLocalesNew;

            if (mediaLocales != null)
            {
                if (mediaLocales.Length <= 1)
                {
                    mediaLocalesNew = null;
                }
                else
                {
                    mediaLocalesNew = new MediaLocale[mediaLocales.Length - 1];

                    int j = 0;
                    for (int i = 0; i < mediaLocales.Length; i++)
                    {
                        if (!mediaLocales[i].Lcid.Equals(lcid))
                        {
                            mediaLocalesNew[j++] = mediaLocales[i];
                        }
                    }
                }

                Session["ArrayMediaLocale"] = mediaLocalesNew;
                Session["ArrayMediaLocaleEverChanged"] = true;
            }

            // 1. add it back to Language drop down list.
            DropDownList dropDownListLocale = base.Parent.FindControl("DropDownListLocale")
                                                        as DropDownList;
            if (dropDownListLocale != null)
            {
                if (this.MainTextBox.SelectedItem != null)
                {
                    ListItem item = new ListItem();
                    item.Text = this.MainTextBox.SelectedItem.Text;
                    item.Value = this.MainTextBox.SelectedItem.Value;

                    if (!dropDownListLocale.Items.Contains(item))
                    {
                        dropDownListLocale.Items.Add(item);
                    }
                }
            }

            // 2. remove selected locale from listbox
            ListBox listboxLocale = this.MainTextBox;
            if (this.MainTextBox.SelectedItem != null)
            {
                listboxLocale.Items.Remove(this.MainTextBox.SelectedItem);
            }

            // 3. clean up all text box
            ClearTextBoxes();
            // 4. diable save button
            Button saveLocalButton = base.Parent.FindControl("SaveLocalButton") as Button;
            if (saveLocalButton != null)
            {
                saveLocalButton.Enabled = false;
            }

            // 5.reset mapped locales
            DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                        as DoubleListBoxControl;
            if (horizontalAddRemoveControl != null)
            {
                ListBox listboxLeft = horizontalAddRemoveControl.FindControl("TextBoxLeft") as ListBox;
                if (listboxLeft != null)
                {
                    listboxLeft.Items.Clear();
                }
                ListBox listboxRight = horizontalAddRemoveControl.FindControl("TextBoxRight") as ListBox;
                if (listboxRight != null)
                {
                    listboxRight.Items.Clear();
                }
            }
        }
        if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            ListBox listBox = base.Parent.FindControl("TextBoxVideInstance").FindControl("MainTextBox") as ListBox;
            MediaInstance[] vis = Session["VideoInstances"] as MediaInstance[];
            Guid miId = new Guid(listBox.SelectedValue);
            VideoInstance miSelected = (VideoInstance)(Array.Find(vis, delegate(MediaInstance mi) { return mi.Id.Equals(miId); }));

            if ((this.MainTextBox.Items.Count > 0) && (this.MainTextBox.SelectedItem != null))
            {
                VideoSubtitle vstmp = Array.Find(miSelected.Subtitles,
                delegate(VideoSubtitle vs)
                {
                    return vs.LanguageCode.Equals(MainTextBox.SelectedItem.Text);
                });

                vstmp.Modified = DataChangeType.Delete;
                this.MainTextBox.Items.Remove(this.MainTextBox.SelectedItem);
                // clean up
                TextBox textBoxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;

                if (textBoxUrl != null)
                {
                    textBoxUrl.Text = string.Empty;
                }

                UpdatePanel updatePanelSubtitle = base.Parent.FindControl("UpdatePanelSubtitle") as UpdatePanel;

                if (updatePanelSubtitle != null)
                {
                    updatePanelSubtitle.Update();
                }

                updatePanelTextBoxUpdate.Update();
            }
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

            if (mediaInstances != null)
            {
                if ((this.MainTextBox.Items.Count > 0) && (this.MainTextBox.SelectedItem != null))
                {
                    string id = this.MainTextBox.SelectedValue;
                    Guid viId = new Guid(id);
                    VideoInstance vi = null;

                    // Look for the video instance
                    foreach (VideoInstance videoInstance in mediaInstances)
                    {
                        if (videoInstance.Id.Equals(viId))
                        {
                            vi = videoInstance;
                            break;
                        }
                    }

                    // If we found it, and it was to be added remove it from the video instance list
                    if (vi != null && vi.Modified == InsertDataChangeType.Add)
                    {
                        mediaInstances = DisplayHelper.ArrayItemRemove(mediaInstances, (MediaInstance)vi);
                        Session["VideoInstances"] = mediaInstances;
                        this.MainTextBox.Items.Remove(this.MainTextBox.SelectedItem);
                        updatePanelTextBoxUpdate.Update();
                    }
                    else
                    {
                        MessageBox.Show("Unable to delete video instance that is already submitted");
                    }
                }
            }
        }
    }

    public static event EventHandler BubbleClick;


    private void Locale_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (BubbleClick != null)
        {
            // BubbleClick(sender, e);
        }
        // lets try to post data to "updatePanelLocaleControl"
        UpdatePanel updatePanelLocaleControl = base.Parent.FindControl("updatePanelLocaleControl")
                                                as UpdatePanel;

        if (updatePanelLocaleControl != null)
        {
            updatePanelLocaleControl.ChildrenAsTriggers = true;
            updatePanelLocaleControl.UpdateMode = UpdatePanelUpdateMode.Always;
        }

        ListBox listBoxLocale = (ListBox)sender;

        int lcid;
        if (int.TryParse(listBoxLocale.SelectedValue, out lcid))
        {
            MediaLocale[] arrayMediaLocale = Session["ArrayMediaLocale"] as MediaLocale[];

            //Master_Menu_Item menuItem = (Master_Menu_Item)Session["Master_Menu_Item"];
            //if (menuItem == Master_Menu_Item.Master_Menu_VideoSeries)
            //{
                //arrayMediaLocale = Session["ArrayMediaLocaleVideoSeries"] as MediaLocale[];
            //}
            //else if (menuItem == Master_Menu_Item.Master_Menu_VideoSeason)
            //{
                //arrayMediaLocale = Session["ArrayMediaLocaleVideoSeason"] as MediaLocale[];
            //}

            MediaLocale mediaLocale = null;

            if (arrayMediaLocale != null)
            {
                foreach (MediaLocale ml in arrayMediaLocale)
                {   // this is ok since there are not many entries here.
                    if (ml.Lcid == lcid)
                    {
                        mediaLocale = ml;
                        break;
                    }
                }
            }

            if (mediaLocale != null)
            {
                Session["EditingMediaLoale"] = mediaLocale;
                //
                TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
                textBox.Text = mediaLocale.Title;

                //
                textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
                textBox.Text = mediaLocale.ReducedTitle;

                //
                textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
                textBox.Text = mediaLocale.TitleSort;

                //
                textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
                textBox.Text = mediaLocale.Description;

                //
                textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
                textBox.Text = mediaLocale.ReducedDescription;

                //
                textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
                textBox.Text = mediaLocale.Copyright;

                // deal with mapped locales

                DoubleListBoxControl doubleListBoxControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                            as DoubleListBoxControl;
                MediaLocaleMap[] mediaLocaleMap = mediaLocale.MappedLcids;
                CatalogServices proxy = Constants.Proxy;
                Locale[] locales = proxy.GetLocale();
                // build locale from arrayLocaleAll and arrayMediaLocale.
                Locale[] arrayLocale = new Locale[mediaLocaleMap.Length];
                for (int i = 0; i < mediaLocaleMap.Length; i++)
                {
                    arrayLocale[i] = new Locale();
                    arrayLocale[i].LCID = mediaLocaleMap[i].Lcid;
                    Locale locale = Array.Find(locales, delegate(Locale l) { return (l.LCID == mediaLocaleMap[i].Lcid); });
                    arrayLocale[i].LocaleCode = locale.LocaleCode;
                }

                //doubleListBoxControl = arrayLocale;
                doubleListBoxControl.OnDataBound<Locale>(arrayLocale);                 
            }
        }
    }

    private void VideInstance_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

        if (mediaInstances == null)
        {
            // clean up controls
        }
        else
        {
            if ((sender as ListBox).SelectedItem == null)
                return;

            string id =  (sender as ListBox).SelectedValue;

            Guid viId = new Guid(id);
            
            //VideoInstance vi = mediaInstances[indexSelected] as VideoInstance;
            VideoInstance vi = null;

            foreach (VideoInstance videoInstance in mediaInstances)
            {
                if (videoInstance.Id.Equals(viId))
                {
                    vi = videoInstance;
                    break;
                }
            }

            Session["VideoInstanceIdUpdating"] = vi.Id;

            if (vi != null)
            {
                PopulateDisplay(vi);
            }
        }
    }

    public void PopulateDisplay(VideoInstance vi)
    {
        Debug.Assert(vi != null);
        CatalogServices proxy = Constants.Proxy;
        // spoken languages
        DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                               as DoubleListBoxControl;
        if (horizontalAddRemoveControl != null)
        {
            //VideoAudioTrackLanguage[] vuTrackLanguage = vi.AudioTrackLanguages;
            VideoAudioTrackLanguage[] vuTrackLanguage = Array.FindAll(vi.AudioTrackLanguages, delegate(VideoAudioTrackLanguage vatl)
            { return vatl.Modified != DataChangeType.Delete; });

            horizontalAddRemoveControl.OnDataBound<VideoAudioTrackLanguage>(vuTrackLanguage);
        }

        CheckBox CheckBoxIsAcquirable = base.Parent.FindControl("CheckBoxIsAcquirable") as CheckBox;
        CheckBoxIsAcquirable.Checked = vi.IsAcquirable;

        DropDownList dropDownListAudioChannel = base.Parent.FindControl("DropDownListAudioChannel") as DropDownList;
        if (dropDownListAudioChannel != null)
        {
            if (!string.IsNullOrEmpty(vi.AudioChannel))
            {
                dropDownListAudioChannel.SelectedValue = vi.AudioChannel;
            }
            else
            {
                dropDownListAudioChannel.SelectedValue = "None";
            }
        }


        // embeded subtitles
        int? burnLcid = vi.BurntInSubtitleLcid;
        DropDownList dropDownListEmbeddedTitle = base.Parent.FindControl("DropDownListEmbedded") as DropDownList;
        if (dropDownListEmbeddedTitle != null)
        {
            List<Locale> localeList = new List<Locale>(Constants.Proxy.GetLocale());
            Locale tmpLocale = new Locale();

            tmpLocale.LCID = 99999;
            tmpLocale.LocaleCode = "None";
            localeList.Add(tmpLocale);
            dropDownListEmbeddedTitle.DataSource = localeList.ToArray();
            dropDownListEmbeddedTitle.DataTextField = "LocaleCode";
            dropDownListEmbeddedTitle.DataValueField = "LCID";
            dropDownListEmbeddedTitle.DataBind();
            if (burnLcid != -1 && burnLcid!=null)
                dropDownListEmbeddedTitle.SelectedValue=burnLcid.ToString();
            else
                dropDownListEmbeddedTitle.SelectedValue="99999";
        }
       
        // subtitle
        VideoSubtitle[] subtitles = vi.Subtitles;
        DropDownList dropDownListLang = base.Parent.FindControl("DropDownListLang") as DropDownList;

        List<VideoSubtitle> videoSubtitle = new List<VideoSubtitle>();
        foreach (VideoSubtitle vst in vi.Subtitles)
        {
            if (vst.Modified != DataChangeType.Delete)
            {
                ListItem item = new ListItem();
                item.Text = vst.LanguageCode;
                item.Value = vst.LanguageCode;

                if (dropDownListLang.Items.Contains(item))
                {
                    videoSubtitle.Add(vst);
                }
            }
        }

        TextBoxUpdateControl textBoxUpdateControl = base.Parent.FindControl("TextBoxSubtitleOverlay") as TextBoxUpdateControl;
        textBoxUpdateControl.MainTextBox.DataSource = videoSubtitle;
        textBoxUpdateControl.MainTextBox.DataValueField = "FileUrl";
        textBoxUpdateControl.MainTextBox.DataTextField = "LanguageCode";
        textBoxUpdateControl.MainTextBox.DataBind();


        TextBox TextBoxVideoInstanceID = base.Parent.FindControl("TextBoxVideoInstanceID") as TextBox;
        TextBoxVideoInstanceID.Text = vi.Id.ToString();


        TextBox textBoxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;

        if ((videoSubtitle != null) && (videoSubtitle.Count > 0))
        {
            textBoxUpdateControl.MainTextBox.SelectedIndex = 0;

            ListItem item = new ListItem();
            item.Text = videoSubtitle[0].LanguageCode;
            item.Value = videoSubtitle[0].LanguageCode;

            if (dropDownListLang.Items.Contains(item))
            {
                dropDownListLang.Text = videoSubtitle[0].LanguageCode;
            }

            textBoxUrl.Text = videoSubtitle[0].FileUrl;
        }
        else
        {
            textBoxUrl.Text = string.Empty;
        }

        Session["ArrayVideoSubtitle"] = videoSubtitle;


        //video files
        // subtitle        

        List<VideoFile> videoFiles = new List<VideoFile>();
        foreach (VideoFile vf in vi.VideoFiles)
        {
            if (vf.Modified != DataChangeType.Delete)
            {
                videoFiles.Add(vf);
            }
        }

        TextBox textBoxVideoFileGuid = base.Parent.FindControl("TextBoxVideoFileGuid") as TextBox;
        TextBox textBoxVideoFileURL = base.Parent.FindControl("TextBoxVideoFileURL") as TextBox;
        TextBox textBoxFileSize = base.Parent.FindControl("TextBoxFileSize") as TextBox;

        if ((videoFiles != null) && (videoFiles.Count > 0))
        {
            textBoxVideoFileGuid.Text = videoFiles[0].Id.ToString();
            textBoxVideoFileURL.Text = videoFiles[0].FileUrl;
            textBoxFileSize.Text = videoFiles[0].Size.ToString();
        }
        else
        {
            textBoxVideoFileGuid.Text = string.Empty;
            textBoxVideoFileURL.Text = string.Empty;
            textBoxFileSize.Text =  string.Empty;
        }
       
        

        // finish AP Supported, DRM, Audio Encoding ...
        CheckBox checkBoxIsAdSupported = base.Parent.FindControl("CheckBoxAdSupported") as CheckBox;
        if (checkBoxIsAdSupported != null)
        {
            checkBoxIsAdSupported.Checked = vi.IsAdSupported;
        }

        CheckBox checkBoxIsDRM = base.Parent.FindControl("CheckBoxDRM") as CheckBox;
        if (checkBoxIsDRM != null)
        {
            checkBoxIsDRM.Checked = vi.IsDRM;
        }

        CheckBox enableVideoInstance = base.Parent.FindControl("EnableVideoInstance") as CheckBox;
        if (enableVideoInstance != null)
        {
            enableVideoInstance.Checked = vi.Enabled;
        }

        // audio encoding
        AudioEncoding[] audioEncoding = proxy.GetAudioEncoding();
        DropDownList dropDownListAudioEncoding = base.Parent.FindControl("DropDownListAudioEncoding") as DropDownList;
        if (dropDownListAudioEncoding != null)
        {
            dropDownListAudioEncoding.DataSource = audioEncoding;
            dropDownListAudioEncoding.DataValueField = "Id";
            dropDownListAudioEncoding.DataTextField = "Name";
            dropDownListAudioEncoding.DataBind();
            dropDownListAudioEncoding.SelectedValue = vi.AudioEncodingId.ToString();
        }

        // audio sampling rate
        TextBox textBoxAudioSamplingRate = base.Parent.FindControl("TextBoxAudioSamplingRate") as TextBox;
        if (textBoxAudioSamplingRate != null)
        {
            if (vi.AudioSamplingRate != null)
            {
                textBoxAudioSamplingRate.Text = vi.AudioSamplingRate.ToString();
            }
        }

        // audio bit rate
        int? audioBitRate = vi.AudioBitRate;
        TextBox textBoxAudioBitRate = base.Parent.FindControl("TextBoxAudioBitRate") as TextBox;
        if (textBoxAudioBitRate != null)
        {
            if (audioBitRate != null)
            {
                textBoxAudioBitRate.Text = audioBitRate.ToString();
            }
        }
        // video definition
        DropDownList dropDownListVideoDefinition = base.Parent.FindControl("DropDownListVideoDefinition")
                                                        as DropDownList;
        if (dropDownListVideoDefinition != null)
        {
            VideoDefinition[] arrayVideoDefinition = proxy.GetVideoDefinition();
            dropDownListVideoDefinition.DataSource = arrayVideoDefinition;
            dropDownListVideoDefinition.DataValueField = "Id";
            dropDownListVideoDefinition.DataTextField = "Name";
            dropDownListVideoDefinition.DataValueField = "Id";
            dropDownListVideoDefinition.DataBind();
            dropDownListVideoDefinition.SelectedIndex = -1;
            foreach (ListItem li in dropDownListVideoDefinition.Items)
                li.Selected = false;
            dropDownListVideoDefinition.SelectedValue=vi.VideoDefinitionId.ToString();
            
        }

        // video aspect ration
        DropDownList dropDownListVideoAspectRatio = base.Parent.FindControl("DropDownListVideoAspectRatio") as DropDownList;
        if (dropDownListVideoAspectRatio != null)
        {
            foreach(ListItem li in dropDownListVideoAspectRatio.Items)
                li.Selected = false;
            dropDownListVideoAspectRatio.SelectedValue = vi.VideoAspectRatio;
        }


        DropDownList dropDownListVideoResolution = base.Parent.FindControl("DropDownListVideoResolution") as DropDownList;
        if (dropDownListVideoResolution != null)
        {
            dropDownListVideoResolution.SelectedValue = vi.VideoResolution;
        }

        //
        VideoEncoding[] arrayVideoEncoding = proxy.GetVideoEncoding();
        DropDownList dropDownListVideoEncodingType = base.Parent.FindControl("DropDownListVideoEncodingType")
                                                        as DropDownList;
        if (dropDownListVideoEncodingType != null)
        {
            dropDownListVideoEncodingType.DataSource = arrayVideoEncoding;
            dropDownListVideoEncodingType.DataValueField = "Id";
            dropDownListVideoEncodingType.DataTextField = "Name";
            dropDownListVideoEncodingType.DataBind();
        }
        // video bit rate
        TextBox textBoxVideoBitRate = base.Parent.FindControl("TextBoxVideoBitRate") as TextBox;
        if (textBoxVideoBitRate != null)
        {
            textBoxVideoBitRate.Text = vi.VideoBitRate.ToString();
        }
        // video frame rate
        TextBox textBoxVideoFrameRate = base.Parent.FindControl("TextBoxVideoFrameRate") as TextBox;
        if (textBoxVideoFrameRate != null)
        {
            if (vi.VideoFrame != null)
            {
                textBoxVideoFrameRate.Text = vi.VideoFrame.Value.ToString();
            }
        }

        // Preview
        CheckBox CheckBoxIsPreview = base.Parent.FindControl("CheckBoxIsPreview") as CheckBox;
        CheckBoxIsPreview.Checked = vi.IsPreview;
        PreviewControl previewControlVideoInstance = base.Parent.FindControl("PreviewControlVideoInstance")
                                                               as PreviewControl;

        
    
        if (vi.IsPreview)
        {
            // make preview control invisible.
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Enabled= true;
            }
            
            PreviewMediaInstance pmi = vi.Preview;

            if ((pmi != null) && (previewControlVideoInstance != null))
            {
                previewControlVideoInstance.PopulateControls(pmi);
            }
        }
        else
        {
            previewControlVideoInstance.PopulateControls(null);
            // make preview control invisible.
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Enabled= false;
            }
        }

        UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                        as UpdatePanel;
        if (updatePanelVideoInstanceControl != null)
        {
            updatePanelVideoInstanceControl.Update();
        }
    }

    private void SubtitleOverlay_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        ListBox listbox = sender as ListBox;
        if (listbox.SelectedItem != null)
        {
            TextBox textboxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;
            textboxUrl.Text = listbox.SelectedItem.Value;
            DropDownList dropdownListLanguage = base.Parent.FindControl("DropDownListLang") as DropDownList;
            foreach (ListItem li in dropdownListLanguage.Items)
                li.Selected = false;

            ListItem item = dropdownListLanguage.Items.FindByText(listbox.SelectedItem.Text);
            if (item != null)
            {
                item.Selected = true;
            }

            UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                         as UpdatePanel;
            if (updatePanelVideoInstanceControl != null)
            {
                updatePanelVideoInstanceControl.Update();
            }
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.5.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "82F24BDCDEA9277FB54CCF1F4CB0C59E"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Collections.Generic;

public partial class PreviewControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            // Make the following controls invisible
            // Preview User Type
            // Preview Start Date
            // Preview End Date
            // Per bug #112090
            TableRow4.Visible = false;
            TableRow5.Visible = false;
            TableRow7.Visible = false;
        }
    }

    public void PopulateControls(PreviewMediaInstance pmi)
    {
        if (pmi != null)
        {
            CatalogServices proxy = Constants.Proxy;
            Country[] arrayCountry = proxy.GetCountry();
            this.DropDownListCountryCode.DataSource = arrayCountry;
            this.DropDownListCountryCode.DataValueField = "Id";
            this.DropDownListCountryCode.DataTextField = "Name";
            this.DropDownListCountryCode.DataBind();
            if (pmi.CountryCode != null)
            {
                this.DropDownListCountryCode.SelectedValue = pmi.CountryCode;
            }
            else
            {
                this.DropDownListCountryCode.SelectedValue = "US";
            }


            UserType[] arrayUserType = proxy.GetUserType();
            this.DropDownListUserType.DataSource = arrayUserType;
            this.DropDownListUserType.DataValueField = "Id";
            this.DropDownListUserType.DataTextField = "Name";
            this.DropDownListUserType.DataBind();

            int? userTypeId = pmi.RequiredUserTypeId;
            if (userTypeId != null)
            {
                //foreach (UserType ut in arrayUserType)
                //{
                //    if (ut.Id == userTypeId)
                //    {
                //        this.DropDownListUserType.Text = ut.Name;
                //        break;
                //    }
                //}
                this.DropDownListUserType.SelectedIndex = -1;
                if (this.DropDownListUserType.Items.FindByValue(userTypeId.ToString()) != null)
                    this.DropDownListUserType.Items.FindByValue(userTypeId.ToString()).Selected = true;
            }            

            DateTime? startDate = pmi.StartDate;
            if (startDate != null)
            {
                this.CalendarPreviewStartDate.Text = startDate.ToString();
            }

            DateTime? endDate = pmi.EndDate;
            if (endDate != null)
            {
                this.CalendarPreviewEndDate.Text = endDate.ToString();
            }

            DRMLicenseIssuer[] drmLicenseIssuer = proxy.GetDRMLicenseIssuer();
            this.DropDownListLicenser.DataSource = drmLicenseIssuer;
            this.DropDownListLicenser.DataValueField = "Id";
            this.DropDownListLicenser.DataTextField = "Name";
            this.DropDownListLicenser.DataBind();
            // If this is a new preview media instance, the DRMLicenseIssuerId is 0, otherwise select what is in the pmi
            if (pmi.DRMLicenseIssuerId != 0)
            {
                DropDownListLicenser.SelectedValue = pmi.DRMLicenseIssuerId.ToString();
            }
            //int licenserId = pmi.LicenserId;
            //foreach (ListItem li in DropDownListLicenser.Items)
            //    li.Selected = false;
            //foreach (Licenser lc in licenser)
            //{
            //    if (lc.Id == licenserId)
            //    {
            //        this.DropDownListLicenser.DataValueField = lc.Name;
            //        break;
            //    }
            //}

            this.TextBoxLicenserContentId.Text = pmi.LicenserContentId;

            Provider[] provider = Constants.Proxy.GetProvider();
            List<Provider> sortingArray = new List<Provider>();
            sortingArray.AddRange(provider);
            sortingArray.Sort(delegate(Provider p1, Provider p2) { return p1.Name.CompareTo(p2.Name); });
            this.DropDownListProvider.DataSource = sortingArray.ToArray();
            this.DropDownListProvider.DataValueField = "Id";
            this.DropDownListProvider.DataTextField = "Name";
            this.DropDownListProvider.DataBind();

            Boolean foundProvider = false;
            foreach (Provider p in provider)
            {
                if ( pmi.ProviderId == p.Id )
                {
                    this.DropDownListProvider.SelectedValue = p.Id.ToString();
                    foundProvider = true;
                    break;
                }
            }

            // If the provider cannot be found, use MS
            if (!foundProvider)
            {
                String id = sortingArray.Find(delegate(Provider p) { return p.Name.Equals("Microsoft"); }).Id.ToString();
                if (id != "")
                {
                    DropDownListProvider.SelectedValue = id;

                }
            }
        }
        else
        {
            DropDownListCountryCode.Items.Clear();
            DropDownListProvider.Items.Clear();
            DropDownListUserType.Items.Clear();
            DropDownListLicenser.Items.Clear();
            TextBoxLicenserContentId.Text = string.Empty;
            this.CalendarPreviewStartDate.Text = string.Empty;
            this.CalendarPreviewEndDate.Text = string.Empty;
            
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.10.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "3E8945D0CBB0624EBA02BD745BAF00AD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class HorizontalAddRemoveControl {
    
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.Label LabelTitle;
    
    #line default
    #line hidden
    
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell15;
    
    #line default
    #line hidden
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.ListBox ListBoxLeft;
    
    #line default
    #line hidden
    
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell19;
    
    #line default
    #line hidden
    
    
    #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.Button AddMappedLocaleButton;
    
    #line default
    #line hidden
    
    
    #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell2;
    
    #line default
    #line hidden
    
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow2;
    
    #line default
    #line hidden
    
    
    #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.Button RemoveMappedLocaleButton;
    
    #line default
    #line hidden
    
    
    #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell23;
    
    #line default
    #line hidden
    
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow9;
    
    #line default
    #line hidden
    
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.Table Table2;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell20;
    
    #line default
    #line hidden
    
    
    #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.ListBox ListBoxRight;
    
    #line default
    #line hidden
    
    
    #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell3;
    
    #line default
    #line hidden
    
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow4;
    
    #line default
    #line hidden
    
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    protected global::System.Web.UI.WebControls.Table HorizontalAddRemove;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_horizontaladdremovecontrol_ascx : global::HorizontalAddRemoveControl {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_horizontaladdremovecontrol_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/HorizontalAddRemoveControl.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_horizontaladdremovecontrol_ascx.@__initialized == false)) {
                global::ASP.component_horizontaladdremovecontrol_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_horizontaladdremovecontrol_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabelTitle() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.LabelTitle = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "LabelTitle";
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Text = "Replace me!";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell15() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell15 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell15";
            
            #line default
            #line hidden
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlLabelTitle();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlListBoxLeft() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.ListBoxLeft = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "ListBoxLeft";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.DataValueField = "Lcid";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("SeletionMode", "Multiple");
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell19() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell19 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell19";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlListBoxLeft();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlAddMappedLocaleButton() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.AddMappedLocaleButton = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "AddMappedLocaleButton";
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Text = "< Add";
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(80, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell2() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell2";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl1;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlAddMappedLocaleButton();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell2();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow2() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableRow2";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            this.@__BuildControl__control5(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlRemoveMappedLocaleButton() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.RemoveMappedLocaleButton = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "RemoveMappedLocaleButton";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Text = "Remove >";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(80, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell23() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell23 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell23";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl1;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlRemoveMappedLocaleButton();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell23();
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow9() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow9 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableRow9";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            this.@__BuildControl__control6(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow2();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl2;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl2 = this.@__BuildControlTableRow9();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlTable2() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Table2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "Table2";
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            this.@__BuildControl__control4(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell20() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell20 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell20";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTable2();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlListBoxRight() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.ListBoxRight = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "ListBoxRight";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.DataValueField = "Lcid";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("SeletionMode", "Multiple");
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell3() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableCell3";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl1;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlListBoxRight();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell15();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell19();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl3;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl3 = this.@__BuildControlTableCell20();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl4;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl4 = this.@__BuildControlTableCell3();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow4() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow4 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "TableRow4";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            this.@__BuildControl__control3(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow4();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlHorizontalAddRemove() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.HorizontalAddRemove = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl.ID = "HorizontalAddRemove";
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            this.@__BuildControl__control2(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_horizontaladdremovecontrol_ascx @__ctrl) {
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__ctrl1 = this.@__BuildControlHorizontalAddRemove();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\HorizontalAddRemoveControl.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_horizontaladdremovecontrol_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.14.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "4879668663CF41548BE1C76B2619084C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class Component_ImageSearchResult {
    
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
    protected global::System.Web.UI.WebControls.Label lblTitle;
    
    #line default
    #line hidden
    
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
    protected global::System.Web.UI.WebControls.GridView GridView;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_imagesearchresult_ascx : global::Component_ImageSearchResult {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_imagesearchresult_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/ImageSearchResult.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_imagesearchresult_ascx.@__initialized == false)) {
                global::ASP.component_imagesearchresult_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_imagesearchresult_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblTitle() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblTitle = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ID = "lblTitle";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Text = "Label";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control3() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.DataField = "Title";
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "Title";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control4() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.DataField = "MediaId";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control5() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.DataField = "Description";
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "Description";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageField @__BuildControl__control6() {
            global::System.Web.UI.WebControls.ImageField @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageField();
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.DataImageUrlField = "Url";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "Image";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.NullImageUrl = "~/Images/PreviewNotAvailable.GIF";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ButtonField @__BuildControl__control7() {
            global::System.Web.UI.WebControls.ButtonField @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ButtonField();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "Edit";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Text = "Edit";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ButtonField @__BuildControl__control8() {
            global::System.Web.UI.WebControls.ButtonField @__ctrl;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ButtonField();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Button;
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.CommandName = "SelectImage";
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.HeaderText = "Select it";
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Text = "Select this image";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.BoundField @__ctrl1;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl1 = this.@__BuildControl__control3();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.BoundField @__ctrl2;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl2 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.BoundField @__ctrl3;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl3 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageField @__ctrl4;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl4 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ButtonField @__ctrl5;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl5 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ButtonField @__ctrl6;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl6 = this.@__BuildControl__control8();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlGridView() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.GridView = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.ID = "GridView";
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.DataKeyNames = new string[] {
                    "MediaId"};
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            this.@__BuildControl__control2(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.GridView_RowCommand);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.GridView_RowEditing);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.GridView_RowDataBound);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_imagesearchresult_ascx @__ctrl) {
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl1 = this.@__BuildControllblTitle();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n<hr />\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl2;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__ctrl2 = this.@__BuildControlGridView();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearchResult.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_imagesearchresult_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.7.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8C8B82826A780592A6CFD430A72142B6"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            DataTable dataTable = GetDataTable();
            Session["dataTable"] = dataTable;
            GridViewContributors.DataSource = GetDataTable();
            GridViewContributors.DataBind();
        }
    }

    protected void GridViewContributors_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    protected void GridViewContributors_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

            DataTable mytable = new DataTable();
            DataColumn relationshipIdColumn = new DataColumn("RelationshipId");
            DataColumn relationshipNameColumn = new DataColumn("RelationshipName");

            mytable.Columns.Add(relationshipIdColumn);
            mytable.Columns.Add(relationshipNameColumn);


            DataRow newrow = mytable.NewRow();
            newrow["RelationshipId"] = 1;
            newrow["RelationshipName"] = "Cover art 1";
            mytable.Rows.Add(newrow);


            newrow = mytable.NewRow();
            newrow["RelationshipId"] = 2;
            newrow["RelationshipName"] = "Cover art 2";
            mytable.Rows.Add(newrow);

            newrow = mytable.NewRow();
            newrow["RelationshipId"] = 3;
            newrow["RelationshipName"] = "Cover art 3";
            mytable.Rows.Add(newrow);


            DropDownList ddl = (DropDownList)e.Row.FindControl("DropDownList1");

            ddl.DataSource = mytable;
            ddl.DataTextField = "RelationshipName";
            ddl.DataValueField = "RelationshipId";
            ddl.DataBind();
        }
    }

    protected void ImageButton_Click(object sender, ImageClickEventArgs e)
    {
        DataTable table = (DataTable)Session["dataTable"];

        DataRow row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title";
        table.Rows.Add(row);

        Session["dataTable"] = table;
        GridViewContributors.DataSource = table;
        GridViewContributors.DataBind();
    }

    private DataTable GetDataTable()
    {
        DataTable table = new DataTable();
        DataColumn ColImage = new DataColumn("Image");
        DataColumn ColTitle = new DataColumn("Title");
        table.Columns.Add(ColImage);
        table.Columns.Add(ColTitle);

        DataRow row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title 1";

        table.Rows.Add(row);

        row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title 2";

        table.Rows.Add(row);

        return table;    
    }

    protected void GridViewContributors_OnRowDeleting(object sender, EventArgs e)
    {


    }

    protected void GridViewContributors_OnRowDeleted(object sender, EventArgs e)
    {

    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.16.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "5963F8B8096C20471EFC6D54010101EE"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class CategoriesTreeControl {
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    protected global::System.Web.UI.WebControls.TreeView CategoryTreeView;
    
    #line default
    #line hidden
    
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    protected global::System.Web.UI.WebControls.Panel Panel1;
    
    #line default
    #line hidden
    
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow1;
    
    #line default
    #line hidden
    
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    protected global::System.Web.UI.WebControls.Table CategoriesTree;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_categoriestreecontrol_ascx : global::CategoriesTreeControl {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_categoriestreecontrol_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/CategoriesTreeControl.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_categoriestreecontrol_ascx.@__initialized == false)) {
                global::ASP.component_categoriestreecontrol_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_categoriestreecontrol_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TreeView @__BuildControlCategoryTreeView() {
            global::System.Web.UI.WebControls.TreeView @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TreeView();
            
            #line default
            #line hidden
            this.CategoryTreeView = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ID = "CategoryTreeView";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.NodeWrap = false;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ShowCheckBoxes = System.Web.UI.WebControls.TreeNodeTypes.None;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ExpandDepth = 1;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.NodeStyle.ForeColor = System.Drawing.Color.Black;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.SelectedNodeStyle.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ForeColor = System.Drawing.Color.Black;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ShowExpandCollapse = true;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ShowLines = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Panel @__BuildControlPanel1() {
            global::System.Web.UI.WebControls.Panel @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Panel();
            
            #line default
            #line hidden
            this.Panel1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ID = "Panel1";
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(400, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.BorderWidth = new System.Web.UI.WebControls.Unit(1, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ScrollBars = System.Web.UI.WebControls.ScrollBars.Both;
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TreeView @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl1 = this.@__BuildControlCategoryTreeView();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControl__control4() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Panel @__ctrl1;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl1 = this.@__BuildControlPanel1();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl1 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow1() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ID = "TableRow1";
            
            #line default
            #line hidden
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            this.@__BuildControl__control3(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow1();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlCategoriesTree() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.CategoriesTree = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.ID = "CategoriesTree";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.CssClass = "table";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.BorderWidth = new System.Web.UI.WebControls.Unit(1, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage);
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Percentage);
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            this.@__BuildControl__control2(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_categoriestreecontrol_ascx @__ctrl) {
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__ctrl1 = this.@__BuildControlCategoriesTree();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\CategoriesTreeControl.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_categoriestreecontrol_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ktupwmag.8.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_ktupwmag {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_ktupwmag() {
        }
        
        static object Create_ASP_component_imageedit_ascx() {
            return new ASP.component_imageedit_ascx();
        }
        
        static object Create_ASP_component_categoryparenteditcontrol_ascx() {
            return new ASP.component_categoryparenteditcontrol_ascx();
        }
        
        static object Create_ASP_component_textboxupdatecontrol_ascx() {
            return new ASP.component_textboxupdatecontrol_ascx();
        }
        
        static object Create_ASP_component_addimagefile_ascx() {
            return new ASP.component_addimagefile_ascx();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ur5m3y93.1.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "3320E9D9D4664854ADB70C6B0C3D7A05"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Reflection;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text;

public partial class MasterPage : System.Web.UI.MasterPage
{

    private static string[] PagesContainingTreeView = { "/CategoryAddEdit.aspx", "/Category.aspx", "/AddEditTabs.aspx", "/Search.aspx", "/ContributorAddEdit.aspx", "/Series.aspx", "/PodcastManage.aspx", "/DRMDashBoard.aspx","/domain/EntityList.aspx" };
    public string stJavaScript = string.Empty;
    private static string version = null;
    private string Version
    {
        get
        {
            if (version == null)
            {
                version = Assembly.GetAssembly(typeof(Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.CatalogServices)).GetName().Version.ToString();
            }
            return version;
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        string pagename = Request.Url.AbsolutePath;
        

        // HACK: Each of the following pages contain a TreeView. The TreeView is contained inside of an UpdatePanel
        // and each time the TreeView is selected it fires an onunload event (which calls setHourGlass()). BUT since 
        // the page does not refresh itself (its in an updatepanel) the hourglass never resets and we are stuck with
        // an hourglass forever. So we cannot set the hourglass normall in these pages
        if (!DoesPageContainTreeView(pagename))
        {
            StringBuilder sbJavaScript = new StringBuilder();
            sbJavaScript.Append("<script language='javascript' type='text/javascript'>");
            sbJavaScript.Append("function setHourglass()");
            sbJavaScript.Append("{");
            sbJavaScript.Append("document.body.style.cursor = 'wait';");
            sbJavaScript.Append("}");
            sbJavaScript.Append("</script>");
            stJavaScript = sbJavaScript.ToString();
        }
        else
        {
            StringBuilder sbJavaScript = new StringBuilder();
            sbJavaScript.Append("<script language='javascript' type='text/javascript'>");
            sbJavaScript.Append("function setHourglass()");
            sbJavaScript.Append("{");
            sbJavaScript.Append("}");
            sbJavaScript.Append("</script>");
            stJavaScript = sbJavaScript.ToString();
        }

        VersionLabel.Text = Version;
    }

    private Boolean DoesPageContainTreeView(string pageName)
    {
        foreach (string s in PagesContainingTreeView)
        {
            if (pageName.Contains(s))
            {
                return true;
            }
        }
        return false;
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.4.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "2FEFDC163B90FE9C1E0C7DC013EAA89F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class PreviewControl {
    
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label1;
    
    #line default
    #line hidden
    
    
    #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell3;
    
    #line default
    #line hidden
    
    
    #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.DropDownList DropDownListCountryCode;
    
    #line default
    #line hidden
    
    
    #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell4;
    
    #line default
    #line hidden
    
    
    #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow3;
    
    #line default
    #line hidden
    
    
    #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label2;
    
    #line default
    #line hidden
    
    
    #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell5;
    
    #line default
    #line hidden
    
    
    #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.DropDownList DropDownListUserType;
    
    #line default
    #line hidden
    
    
    #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell6;
    
    #line default
    #line hidden
    
    
    #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow4;
    
    #line default
    #line hidden
    
    
    #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label3;
    
    #line default
    #line hidden
    
    
    #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell7;
    
    #line default
    #line hidden
    
    
    #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TextBox CalendarPreviewStartDate;
    
    #line default
    #line hidden
    
    
    #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell8;
    
    #line default
    #line hidden
    
    
    #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow5;
    
    #line default
    #line hidden
    
    
    #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label7;
    
    #line default
    #line hidden
    
    
    #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell13;
    
    #line default
    #line hidden
    
    
    #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TextBox CalendarPreviewEndDate;
    
    #line default
    #line hidden
    
    
    #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell14;
    
    #line default
    #line hidden
    
    
    #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow7;
    
    #line default
    #line hidden
    
    
    #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label4;
    
    #line default
    #line hidden
    
    
    #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell9;
    
    #line default
    #line hidden
    
    
    #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.DropDownList DropDownListLicenser;
    
    #line default
    #line hidden
    
    
    #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell10;
    
    #line default
    #line hidden
    
    
    #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow6;
    
    #line default
    #line hidden
    
    
    #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label5;
    
    #line default
    #line hidden
    
    
    #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell11;
    
    #line default
    #line hidden
    
    
    #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TextBox TextBoxLicenserContentId;
    
    #line default
    #line hidden
    
    
    #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell12;
    
    #line default
    #line hidden
    
    
    #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow8;
    
    #line default
    #line hidden
    
    
    #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Label Label6;
    
    #line default
    #line hidden
    
    
    #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell15;
    
    #line default
    #line hidden
    
    
    #line 71 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.DropDownList DropDownListProvider;
    
    #line default
    #line hidden
    
    
    #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell16;
    
    #line default
    #line hidden
    
    
    #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow9;
    
    #line default
    #line hidden
    
    
    #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Table Table3;
    
    #line default
    #line hidden
    
    
    #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell2;
    
    #line default
    #line hidden
    
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow2;
    
    #line default
    #line hidden
    
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Table Table2;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell1;
    
    #line default
    #line hidden
    
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow1;
    
    #line default
    #line hidden
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.WebControls.Table Table1;
    
    #line default
    #line hidden
    
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    protected global::System.Web.UI.UpdatePanel updatePanelPreview;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_previewcontrol_ascx : global::PreviewControl {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_previewcontrol_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/PreviewControl.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_previewcontrol_ascx.@__initialized == false)) {
                global::ASP.component_previewcontrol_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_previewcontrol_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel1() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label1";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview Country Code";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell3() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell3";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel1();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDropDownListCountryCode() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.DropDownListCountryCode = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "DropDownListCountryCode";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell4() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell4 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell4";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlDropDownListCountryCode();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell3();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell4();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow3() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow3";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control8(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel2() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label2";
            
            #line default
            #line hidden
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview User Type";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell5() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell5 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell5";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel2();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDropDownListUserType() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.DropDownListUserType = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "DropDownListUserType";
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell6() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell6 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell6";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlDropDownListUserType();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control9(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell5();
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell6();
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow4() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow4 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow4";
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control9(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel3() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label3";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview Start Date";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell7() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell7 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell7";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel3();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlCalendarPreviewStartDate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.CalendarPreviewStartDate = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "CalendarPreviewStartDate";
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell8() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell8 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell8";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlCalendarPreviewStartDate();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control10(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell7();
            
            #line default
            #line hidden
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell8();
            
            #line default
            #line hidden
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow5() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow5 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow5";
            
            #line default
            #line hidden
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control10(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel7() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label7 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label7";
            
            #line default
            #line hidden
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview End Date";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell13() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell13 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell13";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel7();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlCalendarPreviewEndDate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.CalendarPreviewEndDate = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "CalendarPreviewEndDate";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell14() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell14 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell14";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlCalendarPreviewEndDate();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control11(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell13();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell14();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow7() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow7 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow7";
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control11(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel4() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label4 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label4";
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview Licenser";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell9() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell9 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell9";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel4();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDropDownListLicenser() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.DropDownListLicenser = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "DropDownListLicenser";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell10() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell10 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell10";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlDropDownListLicenser();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control12(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell9();
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell10();
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow6() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow6 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow6";
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control12(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel5() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label5 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label5";
            
            #line default
            #line hidden
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Licenser\'s Content Id";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell11() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell11 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell11";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel5();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlTextBoxLicenserContentId() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.TextBoxLicenserContentId = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TextBoxLicenserContentId";
            
            #line default
            #line hidden
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell12() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell12 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell12";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTextBoxLicenserContentId();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control13(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell11();
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell12();
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow8() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow8 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow8";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control13(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel6() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label6 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Label6";
            
            #line default
            #line hidden
            
            #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Text = "Preview Provider";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell15() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell15 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell15";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlLabel6();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlDropDownListProvider() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 71 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.DropDownListProvider = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 71 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "DropDownListProvider";
            
            #line default
            #line hidden
            
            #line 71 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell16() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell16 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell16";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlDropDownListProvider();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control14(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell15();
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell16();
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow9() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow9 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow9";
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control14(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow3();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl2;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl2 = this.@__BuildControlTableRow4();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl3;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl3 = this.@__BuildControlTableRow5();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl4;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl4 = this.@__BuildControlTableRow7();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl5;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl5 = this.@__BuildControlTableRow6();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl6;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl6 = this.@__BuildControlTableRow8();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl7;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl7 = this.@__BuildControlTableRow9();
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl7);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlTable3() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Table3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Table3";
            
            #line default
            #line hidden
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control7(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell2() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell2";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTable3();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell2();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow2() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow2";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control6(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow2();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlTable2() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Table2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Table2";
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control5(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell1() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableCell1";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTable2();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell1();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow1() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "TableRow1";
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control4(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlTable1() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Table1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "Table1";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.BorderWidth = new System.Web.UI.WebControls.Unit(1, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            this.@__BuildControl__control3(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlTable1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanelPreview() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanelPreview = @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.ID = "updatePanelPreview";
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl.UpdateMode = System.Web.UI.UpdatePanelUpdateMode.Conditional;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_previewcontrol_ascx @__ctrl) {
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__ctrl1 = this.@__BuildControlupdatePanelPreview();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\PreviewControl.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_previewcontrol_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.2.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "558086664F944506366245304765C2C4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class Component_ImageSearch {
    
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.Label lblErrorMsg;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.TextBox tbxImageID;
    
    #line default
    #line hidden
    
    
    #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.TextBox tbxTitle;
    
    #line default
    #line hidden
    
    
    #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.ListBox lbxImageSize;
    
    #line default
    #line hidden
    
    
    #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.ListBox lbxCulture;
    
    #line default
    #line hidden
    
    
    #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    protected global::System.Web.UI.WebControls.Button Button1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_imagesearch_ascx : global::Component_ImageSearch {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_imagesearch_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/ImageSearch.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_imagesearch_ascx.@__initialized == false)) {
                global::ASP.component_imagesearch_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_imagesearch_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblErrorMsg = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "lblErrorMsg";
            
            #line default
            #line hidden
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Font.Size = System.Web.UI.WebControls.FontUnit.XXLarge;
            
            #line default
            #line hidden
            
            #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ForeColor = System.Drawing.Color.Red;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControltbxImageID() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.tbxImageID = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "tbxImageID";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(343, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControltbxTitle() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.tbxTitle = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "tbxTitle";
            
            #line default
            #line hidden
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(343, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControllbxImageSize() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.lbxImageSize = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "lbxImageSize";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Multiple;
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(343, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControllbxCulture() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.lbxCulture = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "lbxCulture";
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Multiple;
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(343, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlButton1() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.Button1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.ID = "Button1";
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Text = "Search";
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl.Click += new System.EventHandler(this.Button1_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_imagesearch_ascx @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\nSearch Image<br />\r\n<hr />\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl1 = this.@__BuildControllblErrorMsg();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<table style=\"width: 524px\">\r\n    <tr>\r\n        <td style=\"width: 165px\">\r\n    " +
                        "        Image/Image Instance ID</td>\r\n        <td style=\"width: 688px\">\r\n       " +
                        "     "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl2;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl2 = this.@__BuildControltbxImageID();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"width: 165px\">\r\n            Title<" +
                        "/td>\r\n        <td style=\"width: 688px\">\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl3 = this.@__BuildControltbxTitle();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"width: 165px\">\r\n            Image " +
                        "Size<br />\r\n            (Hold Ctl key to select multiple items)</td>\r\n        <t" +
                        "d style=\"width: 688px\">\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl4;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl4 = this.@__BuildControllbxImageSize();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"width: 165px; height: 59" +
                        "px\">\r\n            Image locale<br />\r\n            (Hold Ctl key to select multip" +
                        "le items)</td>\r\n        <td style=\"height: 59px; width: 688px;\">\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl5;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl5 = this.@__BuildControllbxCulture();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"width: 165px; height: 26" +
                        "px\">\r\n        </td>\r\n        <td align=\"right\" style=\"height: 26px; width: 688px" +
                        ";\">\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl6;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__ctrl6 = this.@__BuildControlButton1();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr>\r\n</table>\r\n&nbsp; &nbsp;\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageSearch.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_imagesearch_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.6.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "73283EDAB95036AB6E8E7C0A44A53458"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class ImageControl {
    
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
    protected global::System.Web.UI.WebControls.GridView GridViewContributors;
    
    #line default
    #line hidden
    
    
    #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
    protected global::System.Web.UI.WebControls.ImageButton ImageButton1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_imagecontrol_ascx : global::ImageControl {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_imagecontrol_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/ImageControl.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_imagecontrol_ascx.@__initialized == false)) {
                global::ASP.component_imagecontrol_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_imagecontrol_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageField @__BuildControl__control3() {
            global::System.Web.UI.WebControls.ImageField @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageField();
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.HeaderText = "Image";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.DataImageUrlField = "Image";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ControlStyle.Width = new System.Web.UI.WebControls.Unit(80, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ControlStyle.Height = new System.Web.UI.WebControls.Unit(26, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control4() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.HeaderText = "Title";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.DataField = "Title";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControl__control7() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ID = "DropDownList1";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(300, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n          "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl1;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl1 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("                        \r\n          "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control5() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control6), null);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.HeaderText = "Relationship";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CommandField @__BuildControl__control8() {
            global::System.Web.UI.WebControls.CommandField @__ctrl;
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.CommandField();
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.DeleteImageUrl = "~/Images/WasteBasket_Button.gif";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ShowDeleteButton = true;
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.EditText = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.ImageField @__ctrl1;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl1 = this.@__BuildControl__control3();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.BoundField @__ctrl2;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl2 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl3 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CommandField @__ctrl4;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl4 = this.@__BuildControl__control8();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlGridViewContributors() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.GridViewContributors = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ID = "GridViewContributors";
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("Style", "z-index: 100;");
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.CssClass = "gridview";
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ToolTip = "Images";
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            this.@__BuildControl__control2(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.SelectedIndexChanged += new System.EventHandler(this.GridViewContributors_SelectedIndexChanged);
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.GridViewContributors_RowDataBound);
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.RowDeleting += new System.Web.UI.WebControls.GridViewDeleteEventHandler(this.GridViewContributors_OnRowDeleting);
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.RowDeleted += new System.Web.UI.WebControls.GridViewDeletedEventHandler(this.GridViewContributors_OnRowDeleted);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlImageButton1() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.ImageButton1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ID = "ImageButton1";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("Style", "z-index: 101;");
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.ImageButton_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_imagecontrol_ascx @__ctrl) {
            global::System.Web.UI.WebControls.GridView @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl1 = this.@__BuildControlGridViewContributors();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n   \r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl2;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__ctrl2 = this.@__BuildControlImageButton1();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\ImageControl.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_imagecontrol_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.18.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_mw1_7faq {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_mw1_7faq() {
        }
        
        static object Create_ASP_component_sessiontimedoutredirect_ascx() {
            return new ASP.component_sessiontimedoutredirect_ascx();
        }
        
        static object Create_ASP_component_imagesearch_ascx() {
            return new ASP.component_imagesearch_ascx();
        }
        
        static object Create_ASP_component_previewcontrol_ascx() {
            return new ASP.component_previewcontrol_ascx();
        }
        
        static object Create_ASP_component_imagecontrol_ascx() {
            return new ASP.component_imagecontrol_ascx();
        }
        
        static object Create_ASP_component_doublelistboxcontrol_ascx() {
            return new ASP.component_doublelistboxcontrol_ascx();
        }
        
        static object Create_ASP_component_horizontaladdremovecontrol_ascx() {
            return new ASP.component_horizontaladdremovecontrol_ascx();
        }
        
        static object Create_ASP_component_alertbox_ascx() {
            return new ASP.component_alertbox_ascx();
        }
        
        static object Create_ASP_component_imagesearchresult_ascx() {
            return new ASP.component_imagesearchresult_ascx();
        }
        
        static object Create_ASP_component_categoriestreecontrol_ascx() {
            return new ASP.component_categoriestreecontrol_ascx();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.8.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "EF06CD64F0A9816FFD4246383E01045C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class DoubleListBoxControl {
    
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Label LabelTitle;
    
    #line default
    #line hidden
    
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Label LabelMsg;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell15;
    
    #line default
    #line hidden
    
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.ListBox TextBoxLeft;
    
    #line default
    #line hidden
    
    
    #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.UpdatePanel updatePanelTextBoxLeft;
    
    #line default
    #line hidden
    
    
    #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell19;
    
    #line default
    #line hidden
    
    
    #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Button ButtonAdd;
    
    #line default
    #line hidden
    
    
    #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell23;
    
    #line default
    #line hidden
    
    
    #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow9;
    
    #line default
    #line hidden
    
    
    #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Button ButtonRemove;
    
    #line default
    #line hidden
    
    
    #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell2;
    
    #line default
    #line hidden
    
    
    #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow2;
    
    #line default
    #line hidden
    
    
    #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Table Table2;
    
    #line default
    #line hidden
    
    
    #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell20;
    
    #line default
    #line hidden
    
    
    #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.ListBox TextBoxRight;
    
    #line default
    #line hidden
    
    
    #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.UpdatePanel updatePanelTextBoxRight;
    
    #line default
    #line hidden
    
    
    #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell3;
    
    #line default
    #line hidden
    
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow4;
    
    #line default
    #line hidden
    
    
    #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell16;
    
    #line default
    #line hidden
    
    
    #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell21;
    
    #line default
    #line hidden
    
    
    #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableCell TableCell22;
    
    #line default
    #line hidden
    
    
    #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.TableRow TableRow8;
    
    #line default
    #line hidden
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.WebControls.Table HorizontalAddRemove;
    
    #line default
    #line hidden
    
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    protected global::System.Web.UI.UpdatePanel updatePanelHorizontal;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class component_doublelistboxcontrol_ascx : global::DoubleListBoxControl {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public component_doublelistboxcontrol_ascx() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx.cs"
            ((global::System.Web.UI.UserControl)(this)).AppRelativeVirtualPath = "~/Component/DoubleListBoxControl.ascx";
            
            #line default
            #line hidden
            if ((global::ASP.component_doublelistboxcontrol_ascx.@__initialized == false)) {
                global::ASP.component_doublelistboxcontrol_ascx.@__stringResource = this.ReadStringResource();
                global::ASP.component_doublelistboxcontrol_ascx.@__initialized = true;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabelTitle() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.LabelTitle = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "LabelTitle";
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Text = "Replace me!";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabelMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.LabelMsg = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "LabelMsg";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ForeColor = System.Drawing.Color.Red;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell15() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell15 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell15";
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlLabelTitle();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("  \r\n            <br/> "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControlLabelMsg();
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlTextBoxLeft() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.TextBoxLeft = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TextBoxLeft";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Multiple;
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataValueField = "LCID";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataMember = "LCID";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("    \r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl1;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTextBoxLeft();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.AsyncPostBackTrigger @__BuildControl__control7() {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl;
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.AsyncPostBackTrigger();
            
            #line default
            #line hidden
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ControlID = "ButtonAdd";
            
            #line default
            #line hidden
            
            #line 28 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.EventName = "Click";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.AsyncPostBackTrigger @__BuildControl__control8() {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl;
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.AsyncPostBackTrigger();
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ControlID = "ButtonRemove";
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.EventName = "Click";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.UpdatePanelTriggerCollection @__ctrl) {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl1;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl2;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControl__control8();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanelTextBoxLeft() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanelTextBoxLeft = @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control5));
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "updatePanelTextBoxLeft";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.UpdateMode = System.Web.UI.UpdatePanelUpdateMode.Conditional;
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ChildrenAsTriggers = false;
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control6(@__ctrl.Triggers);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell19() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell19 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell19";
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlupdatePanelTextBoxLeft();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 14 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlButtonAdd() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.ButtonAdd = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "ButtonAdd";
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Text = "< Add";
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(80, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Click += new System.EventHandler(this.OnAddClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell23() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell23 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell23";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl1;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlButtonAdd();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control10(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell23();
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow9() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow9 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableRow9";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control10(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlButtonRemove() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.ButtonRemove = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "ButtonRemove";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Text = "Remove >";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(80, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Click += new System.EventHandler(this.OnRemoveClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell2() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell2";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl1;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlButtonRemove();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control11(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell2();
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow2() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableRow2";
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control11(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control9(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow9();
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl2;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControlTableRow2();
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlTable2() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Table2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "Table2";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control9(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell20() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell20 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell20";
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTable2();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlTextBoxRight() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.TextBoxRight = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TextBoxRight";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Multiple;
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataValueField = "LCID";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.DataMember = "LCID";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control12(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTextBoxRight();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.AsyncPostBackTrigger @__BuildControl__control14() {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.AsyncPostBackTrigger();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ControlID = "ButtonAdd";
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.EventName = "Click";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.AsyncPostBackTrigger @__BuildControl__control15() {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.AsyncPostBackTrigger();
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ControlID = "ButtonRemove";
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.EventName = "Click";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control13(System.Web.UI.UpdatePanelTriggerCollection @__ctrl) {
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControl__control14();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.AsyncPostBackTrigger @__ctrl2;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControl__control15();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanelTextBoxRight() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanelTextBoxRight = @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control12));
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "updatePanelTextBoxRight";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.UpdateMode = System.Web.UI.UpdatePanelUpdateMode.Conditional;
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ChildrenAsTriggers = false;
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control13(@__ctrl.Triggers);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell3() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell3 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell3";
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlupdatePanelTextBoxRight();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell15();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell19();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl3 = this.@__BuildControlTableCell20();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl4;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl4 = this.@__BuildControlTableCell3();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow4() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow4 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableRow4";
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control4(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell16() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell16 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 68 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell16";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell21() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell21 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell21";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell22() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell22 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableCell22";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control16(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableCell16();
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl2;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControlTableCell21();
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableCell @__ctrl3;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl3 = this.@__BuildControlTableCell22();
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow8() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow8 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "TableRow8";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control16(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlTableRow4();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TableRow @__ctrl2;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl2 = this.@__BuildControlTableRow8();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlHorizontalAddRemove() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.HorizontalAddRemove = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "HorizontalAddRemove";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            this.@__BuildControl__control3(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlHorizontalAddRemove();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanelHorizontal() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanelHorizontal = @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ID = "updatePanelHorizontal";
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.UpdateMode = System.Web.UI.UpdatePanelUpdateMode.Conditional;
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl.ChildrenAsTriggers = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(component_doublelistboxcontrol_ascx @__ctrl) {
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__ctrl1 = this.@__BuildControlupdatePanelHorizontal();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.component_doublelistboxcontrol_ascx.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_mw1_7faq.9.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "5D427C72DEA9194E5684C168DBC5E4EB"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Component\DoubleListBoxControl.ascx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using Microsoft.Ems.Apps.Web.Editorial;

public partial class DoubleListBoxControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        this.LabelMsg.Text = "";
        if (!this.IsPostBack)
        {
            if (this.ID.Equals("DoubleListBoxControl"))
            {
                this.LabelTitle.Text = "Mapped Locale(s)";
            }
            else if (this.ID.Equals("HorizontalVideoInstance"))
            {
                this.LabelTitle.Text = "Spoken Language(s)";
            }
            else if (this.ID.Equals("ImageLocaleMap"))
            {
                this.LabelTitle.Text = string.Empty;
            }
        }
    }

    protected void OnAddClick(object sender, EventArgs e)
    {
        // Build up list of selected items
        List<Locale> rightList = new List<Locale>();
        List<Locale> leftList = new List<Locale>();
        foreach (ListItem item in TextBoxRight.Items)
        {
            if (item != null && item.Selected == true)
            {
                item.Selected = false;
                leftList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                rightList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }

        if (this.ID.CompareTo("DoubleListBoxControl") == 0)
        {
            if (!IsMappedLocaleValid())
            {
                this.LabelMsg.Visible = true;
                this.LabelMsg.Text = "Error: the mapped locale can't be linked to more than one locale";
                this.updatePanelHorizontal.Update();
                return;
            }
        }


        foreach (ListItem item in TextBoxLeft.Items)
        {
            leftList.Add(Locale.Get(Int32.Parse(item.Value)));
        }

        rightList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        leftList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        TextBoxLeft.Items.Clear();
        TextBoxLeft.DataSource = leftList;
        TextBoxLeft.DataBind();

        TextBoxRight.Items.Clear();
        TextBoxRight.DataSource = rightList;
        TextBoxRight.DataBind();

        SyncParentButtonStatus();
        this.updatePanelHorizontal.Update();
    }

    private bool IsMappedLocaleValid()
    {
        MediaLocale[] locales = null;

        if (Session["ArrayMediaLocale"] != null)
        {
            locales = Session["ArrayMediaLocale"] as MediaLocale[];
        }

        if (locales != null)
        {
            MediaLocale editLocale = null;

            if (Session["EditingMediaLoale"] != null)
            {
                editLocale = Session["EditingMediaLoale"] as MediaLocale;
            }

            ListItemCollection leftList = this.TextBoxLeft.Items;
            // For each selected item move it to the other box (its added)
            foreach (ListItem item in leftList)
            {
                int lcid;

                if (int.TryParse(item.Value, out lcid))
                {
                    foreach (MediaLocale ml in locales)
                    {
                        if ((editLocale != null) && (editLocale.Lcid == ml.Lcid))
                        {
                            continue;
                        }

                        if (ml.Modified != DataChangeType.Delete)
                        {
                            foreach (MediaLocaleMap mm in ml.MappedLcids)
                            {
                                if (mm.Modified != DataChangeType.Delete)
                                {
                                    if (mm.Lcid == lcid)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

    protected void OnRemoveClick(object sender, EventArgs e)
    {
        // Build up list of selected items
        List<Locale> leftList = new List<Locale>();
        List<Locale> rightList = new List<Locale>();
        foreach (ListItem item in TextBoxLeft.Items)
        {
            if (item != null && item.Selected == true)
            {
                rightList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                leftList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }

        foreach (ListItem item in TextBoxRight.Items)
        {
            rightList.Add(Locale.Get(Int32.Parse(item.Value)));
        }

        rightList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        leftList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        TextBoxLeft.Items.Clear();
        TextBoxLeft.DataSource = leftList;
        TextBoxLeft.DataBind();

        TextBoxRight.Items.Clear();
        TextBoxRight.DataSource = rightList;
        TextBoxRight.DataBind();    

        SyncParentButtonStatus();
    }

    private void SyncLeftButtonStatus()
    {
        if (this.TextBoxLeft.Items.Count <= 0)
        {
            this.ButtonRemove.Enabled = false;
        }
        else
        {
            if (this.TextBoxLeft.SelectedItem != null)
            {
                this.ButtonRemove.Enabled = true;
            }
            else
            {
                this.ButtonRemove.Enabled = false;
            }
        }

    }
    private void SyncRightButtonStatus()
    {
        if (this.TextBoxRight.Items.Count <= 0)
        {
            this.ButtonAdd.Enabled = false;
        }
        else
        {
            if (this.TextBoxRight.SelectedItem != null)
            {
                this.ButtonAdd.Enabled = true;
            }
            else
            {
                this.ButtonAdd.Enabled = false;
            }
        }
    }

    private void SyncParentButtonStatus()
    {
        Button buttonSave = base.Parent.FindControl("SaveLocalButton") as Button;
        if (buttonSave != null)
        {
            buttonSave.Enabled = true;
        }
    }

    public void OnDataBound<T>(T[] bindingSource)
    {
        if (bindingSource != null)
        {
            if (typeof(T) == typeof(Locale))
            {
                this.TextBoxLeft.DataSource = bindingSource;
            }
            else if (typeof(T) == typeof(VideoAudioTrackLanguage))
            {
                Locale[] locales = new Locale[bindingSource.Length];
                Locale[] tmpLocales= Constants.Proxy.GetLocale();
                for (int i = 0; i < bindingSource.Length; i++)
                {
                    VideoAudioTrackLanguage vtl = bindingSource[i] as VideoAudioTrackLanguage;
                    locales[i] = Array.Find(tmpLocales, delegate(Locale l) { return l.LCID == vtl.Lcid; });
                }
                this.TextBoxLeft.DataSource = locales;
            }
           
            this.TextBoxLeft.DataBind();

            // remove lcids already
            this.TextBoxRight.Items.Clear();
            CatalogServices proxy = Constants.Proxy;
            this.TextBoxRight.DataSource = proxy.GetLocale();
            this.TextBoxRight.DataBind();

            for (int i = 0; i < TextBoxRight.Items.Count; i++)
            {
                ListItem item = TextBoxRight.Items[i];
                if (TextBoxLeft.Items.Contains(item))
                {
                    TextBoxRight.Items.Remove(item);
                }
            }

            if (typeof(T) == typeof(Locale))
            {
                // remove locales already mapped to others
                if (Session["ArrayMediaLocale"] != null)
                {
                    MediaLocale[] locales = Session["ArrayMediaLocale"] as MediaLocale[];
                    if (locales != null)
                    {
                        foreach (MediaLocale ml in locales)
                        {
                            if (ml.Modified != DataChangeType.Delete)
                            {
                                foreach (MediaLocaleMap mm in ml.MappedLcids)
                                {
                                    if (mm.Modified != DataChangeType.Delete)
                                    {
                                        // remove mm from mappedLoales
                                        ListItem item = TextBoxRight.Items.FindByValue(mm.Lcid.ToString());
                                        if (item != null)
                                        {
                                            TextBoxRight.Items.Remove(item);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void PopulateLocales()
    {
        // populate right TextBox
        // remove lcids already
        this.TextBoxLeft.Items.Clear();
        this.TextBoxRight.Items.Clear();

        CatalogServices proxy = Constants.Proxy;
        // by default, map all locales to en-us.
        Locale[] mappedLoales = proxy.GetLocale();

        if ((mappedLoales != null) && (Session["ArrayMediaLocale"] != null))
        {
            // remove items already mapped.
            MediaLocale[] locales = Session["ArrayMediaLocale"] as MediaLocale[];

            if (locales != null)
            {
                foreach (MediaLocale ml in locales)
                {
                    if (ml.Modified != DataChangeType.Delete)
                    {
                        foreach (MediaLocaleMap mm in ml.MappedLcids)
                        {
                            if (mm.Modified != DataChangeType.Delete)
                            {
                                // remove mm from mappedLoales
                                Locale localeToRemove = Array.Find(mappedLoales, delegate(Locale l) { return l.LCID == mm.Lcid; });
                                if (localeToRemove != null)
                                {
                                    mappedLoales = DisplayHelper.ArrayItemRemove(mappedLoales, localeToRemove);
                                }
                            }
                        }
                    }
                }
            }

        }

        this.TextBoxLeft.DataSource = mappedLoales;
        this.TextBoxLeft.DataBind();
    }

    public void Clear()
    {
        this.TextBoxLeft.Items.Clear();
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.3.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "58AAF68670A25F41928FC891B9FECD1B"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseTypeList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                BindLicenseTypeList();
            }
        }

        protected void LicenseTypeGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType licenseType = e.Row.DataItem as Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType;
                ((Label)e.Row.FindControl("IdLabel")).Text = licenseType.Id.ToString();
                ((Label)e.Row.FindControl("NameLabel")).Text = licenseType.Name;
                ((Label)e.Row.FindControl("LicenseClassListLabel")).Text = Constants.Proxy.GetLicenseClass(licenseType.LicenseClassId).Name;
                ((TextBox)e.Row.FindControl("LicenseXmlLabel")).Text = licenseType.LicenseXML;
            }
        }
        protected void LicenseTypeGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            LicenseTypeGrid.PageIndex = e.NewPageIndex;
            BindLicenseTypeList();
        }
        protected void LicenseTypeGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            GridView gridView = (GridView)sender;
            string licenseTypeId = ((Label)gridView.Rows[e.NewEditIndex].FindControl("IdLabel")).Text;
            LicenseTypeGrid.EditIndex = e.NewEditIndex;
            BindLicenseTypeList();
            Response.Redirect("LicenseType.aspx?LicenseTypeID=" + licenseTypeId);

        }
        private void BindLicenseTypeList()
        {
            LicenseTypeGrid.DataSource = Constants.Proxy.GetLicenseType();
            LicenseTypeGrid.DataBind();
        }
        protected void LicenseTypeGrid_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "Insert")
            {
                Response.Redirect("LicenseType.aspx");
            }
        }
    }
}



#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ur5m3y93.2.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_ur5m3y93 {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_ur5m3y93() {
        }
        
        static object Create_ASP_masterpage_master() {
            return new ASP.masterpage_master();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_ur5m3y93.0.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "675DE459B94F2FF4407C8A6C9152D7B4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class MasterPage {
    
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.HtmlControls.HtmlHead Head1;
    
    #line default
    #line hidden
    
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.WebControls.Label VersionLabel;
    
    #line default
    #line hidden
    
    
    #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.WebControls.SiteMapPath SiteMapPath;
    
    #line default
    #line hidden
    
    
    #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.WebControls.Menu MainMenu;
    
    #line default
    #line hidden
    
    
    #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.WebControls.ContentPlaceHolder ContentPlaceHolder;
    
    #line default
    #line hidden
    
    
    #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.WebControls.SiteMapDataSource SiteMapDataSource;
    
    #line default
    #line hidden
    
    
    #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    protected global::System.Web.UI.HtmlControls.HtmlForm form1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class masterpage_master : global::MasterPage {
        
        private System.Web.UI.ITemplate @__Template_ContentPlaceHolder;
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public masterpage_master() {
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master.cs"
            ((global::System.Web.UI.MasterPage)(this)).AppRelativeVirtualPath = "~/MasterPage.master";
            
            #line default
            #line hidden
            if ((global::ASP.masterpage_master.@__initialized == false)) {
                global::ASP.masterpage_master.@__stringResource = this.ReadStringResource();
                global::ASP.masterpage_master.@__initialized = true;
            }
            this.ContentPlaceHolders.Add("contentplaceholder");
        }
        
        [TemplateContainer(typeof(System.Web.UI.MasterPage))]
        [TemplateInstanceAttribute(System.Web.UI.TemplateInstance.Single)]
        public virtual System.Web.UI.ITemplate Template_ContentPlaceHolder {
            get {
                return this.@__Template_ContentPlaceHolder;
            }
            set {
                this.@__Template_ContentPlaceHolder = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlTitle @__BuildControl__control2() {
            global::System.Web.UI.HtmlControls.HtmlTitle @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlTitle();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("Xbox Domain Management Tools"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlLink @__BuildControl__control3() {
            global::System.Web.UI.HtmlControls.HtmlLink @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlLink();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("rel", "stylesheet");
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("type", "text/css");
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.Href = "./EmsTool.css";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlHead @__BuildControlHead1() {
            global::System.Web.UI.HtmlControls.HtmlHead @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlHead("head");
            
            #line default
            #line hidden
            this.Head1 = @__ctrl;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "Head1";
            
            #line default
            #line hidden
            global::System.Web.UI.HtmlControls.HtmlTitle @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl1 = this.@__BuildControl__control2();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.HtmlControls.HtmlLink @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl2 = this.@__BuildControl__control3();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlVersionLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.VersionLabel = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "VersionLabel";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.Style @__ctrl) {
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ForeColor = System.Drawing.Color.White;
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.Font.Size = new System.Web.UI.WebControls.FontUnit(new System.Web.UI.WebControls.Unit(0.85000002384185791, System.Web.UI.WebControls.UnitType.Em));
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.Font.Names = new string[] {
                    "Tahoma"};
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.Style @__ctrl) {
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ForeColor = System.Drawing.Color.White;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.WebControls.Style @__ctrl) {
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.Font.Underline = false;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.SiteMapPath @__BuildControlSiteMapPath() {
            global::System.Web.UI.WebControls.SiteMapPath @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.WebControls.SiteMapPath();
            
            #line default
            #line hidden
            this.SiteMapPath = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "SiteMapPath";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.PathSeparator = " >>";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.NodeStyle.ForeColor = System.Drawing.Color.White;
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            this.@__BuildControl__control4(@__ctrl.NodeStyle);
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            this.@__BuildControl__control5(@__ctrl.PathSeparatorStyle);
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            this.@__BuildControl__control6(@__ctrl.RootNodeStyle);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Menu @__BuildControlMainMenu() {
            global::System.Web.UI.WebControls.Menu @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.WebControls.Menu();
            
            #line default
            #line hidden
            this.MainMenu = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this.Page);
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "MainMenu";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.DataSourceID = "SiteMapDataSource";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.StaticDisplayLevels = 4;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ContentPlaceHolder @__BuildControlContentPlaceHolder() {
            global::System.Web.UI.WebControls.ContentPlaceHolder @__ctrl;
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.WebControls.ContentPlaceHolder();
            
            #line default
            #line hidden
            this.ContentPlaceHolder = @__ctrl;
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "ContentPlaceHolder";
            
            #line default
            #line hidden
            if ((this.ContentTemplates != null)) {
                this.@__Template_ContentPlaceHolder = ((System.Web.UI.ITemplate)(this.ContentTemplates["ContentPlaceHolder"]));
            }
            if ((this.@__Template_ContentPlaceHolder != null)) {
                this.@__Template_ContentPlaceHolder.InstantiateIn(@__ctrl);
            }
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.SiteMapDataSource @__BuildControlSiteMapDataSource() {
            global::System.Web.UI.WebControls.SiteMapDataSource @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.WebControls.SiteMapDataSource();
            
            #line default
            #line hidden
            this.SiteMapDataSource = @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "SiteMapDataSource";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlForm @__BuildControlform1() {
            global::System.Web.UI.HtmlControls.HtmlForm @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlForm();
            
            #line default
            #line hidden
            this.form1 = @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl.ID = "form1";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(0, 278, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl1 = this.@__BuildControlVersionLabel();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</font></b></td>\r\n                <td align=\"right\" style=\"color: #000000; font-s" +
                        "ize:small;\">\r\n                </td>                \r\n            </tr>          " +
                        "  \r\n            <tr>\r\n            <td><br />\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.SiteMapPath @__ctrl2;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl2 = this.@__BuildControlSiteMapPath();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n            <td>\r\n            </td>\r\n            </tr>\r\n    " +
                        "        </table>\r\n            <table id=\"wrapper\" border=\"0\">\r\n            <tr v" +
                        "align=\"top\">\r\n                <td id=\"menu\" style=\"width:130px\">\r\n              " +
                        "      "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Menu @__ctrl3;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl3 = this.@__BuildControlMainMenu();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                </td>\r\n                <td id=\"content\" style=\"width:700px\">\r\n " +
                        "                   "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ContentPlaceHolder @__ctrl4;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl4 = this.@__BuildControlContentPlaceHolder();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                </td>\r\n            </tr>\r\n            </table>\r\n            <ta" +
                        "ble id=\"footer\" border=\"0\" style=\"width:100%\">\r\n            <tr><td>\r\n          " +
                        "      Microsoft Confidential\r\n            </td></tr>\r\n            </table>\r\n    " +
                        "        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.SiteMapDataSource @__ctrl5;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl5 = this.@__BuildControlSiteMapDataSource();
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("            \r\n        </div>\r\n        \r\n    "));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(masterpage_master @__ctrl) {
            global::System.Web.UI.HtmlControls.HtmlHead @__ctrl1;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl1 = this.@__BuildControlHead1();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.HtmlControls.HtmlForm @__ctrl2;
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__ctrl2 = this.@__BuildControlform1();
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            @__ctrl.SetRenderMethodDelegate(new System.Web.UI.RenderMethod(this.@__Render__control1));
        }
        
        private void @__Render__control1(System.Web.UI.HtmlTextWriter @__w, System.Web.UI.Control parameterContainer) {
            @__w.Write("\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3" +
                    ".org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1" +
                    "999/xhtml\">\r\n");
            parameterContainer.Controls[0].RenderControl(@__w);
            @__w.Write("\r\n\r\n<body onbeforeunload=\"setHourglass();\" onunload=\"setHourglass();\">\r\n");
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master"
@__w.Write(stJavaScript );

            
            #line default
            #line hidden
            @__w.Write("\r\n    ");
            parameterContainer.Controls[1].RenderControl(@__w);
            @__w.Write("\r\n</body>\r\n</html>\r\n");
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\MasterPage.master.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.masterpage_master.@__stringResource, 0);
            this.@__BuildControlTree(this);
        }
        
        #line default
        #line hidden
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.7.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "7227C8CD09616C5C96D921F63D9162FB"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx.cs"
using System;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class PricingRuleList : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            DataGrid.DataSource = Constants.Proxy.GetPricingRule();
            DataGrid.DataBind();
        }
    }

    protected void DataGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        DataGrid.PageIndex = e.NewPageIndex;
        DataGrid.DataSource = Constants.Proxy.GetPricingRule();
        DataGrid.DataBind();
    }

    protected void DataGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
    {
        GridView gridView = sender as GridView;
        int ruleId = (int)gridView.DataKeys[e.NewEditIndex].Value;
        Response.Redirect("PricingRule.aspx?" + ruleId.ToString());
    }

    protected void NewRuleAdd_OnClick(object sender, ImageClickEventArgs e)
    {
        Response.Redirect("PricingRule.aspx");
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.10.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_wi8rl708 {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_wi8rl708() {
        }
        
        static object Create_ASP_domain_licensetype_aspx() {
            return new ASP.domain_licensetype_aspx();
        }
        
        static object Create_ASP_domain_licensetypelist_aspx() {
            return new ASP.domain_licensetypelist_aspx();
        }
        
        static object Create_ASP_domain_pricingrule_aspx() {
            return new ASP.domain_pricingrule_aspx();
        }
        
        static object Create_ASP_domain_pricingrulelist_aspx() {
            return new ASP.domain_pricingrulelist_aspx();
        }
        
        static object Create_ASP_domain_entitylist_aspx() {
            return new ASP.domain_entitylist_aspx();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.2.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "1A02E8F40CA1F232B6A446B309A026BF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class LicenseTypeList : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        
        #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.WebControls.GridView LicenseTypeGrid;
        
        #line default
        #line hidden
        
        
        #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_licensetypelist_aspx : global::Microsoft.Ems.Apps.Web.Editorial.LicenseTypeList, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_licensetypelist_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/LicenseTypeList.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_licensetypelist_aspx.@__initialized == false)) {
                global::ASP.domain_licensetypelist_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/LicenseTypeList.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/LicenseTypeList.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_licensetypelist_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_licensetypelist_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control11() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "IdLabel";
            
            #line default
            #line hidden
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control10(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control11();
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control9() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control10), null);
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control14() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "NameLabel";
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control13(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control14();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control12() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control13), null);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "Name";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control17() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseClassListLabel";
            
            #line default
            #line hidden
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control16(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control17();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control15() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control16), null);
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "License Class";
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control20() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseXmlLabel";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(400, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ReadOnly = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control19(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control20();
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control18() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control19), null);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "License Xml";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(400, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control23() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeEdit";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AlternateText = "Edit LicenseType";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control22(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control23();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control25() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeAdd";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CommandName = "Insert";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control24(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control25();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control21() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control22), null);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control24));
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.TemplateField @__ctrl1;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control9();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl2;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl2 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl3 = this.@__BuildControl__control15();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl4 = this.@__BuildControl__control18();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl5;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl5 = this.@__BuildControl__control21();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlLicenseTypeGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.LicenseTypeGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeGrid";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ShowFooter = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderStyle.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.PageSize = 5;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CssClass = "grid";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control3(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control4(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control5(@__ctrl.RowStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control6(@__ctrl.FooterStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control7(@__ctrl.EmptyDataRowStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control8(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.LicenseTypeGrid_OnRowDataBound);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.LicenseTypeGrid_OnRowEditing);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.LicenseTypeGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.LicenseTypeGrid_RowCommand);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n <script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgl" +
                        "assJavascript.js\"></script>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <div>\r\n        <span class=\"heading\">Add/Edit LicenseType:&nbsp;</span> \r\n " +
                        "       "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl3;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl3 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        <br />\r\n    </div>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl4;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl4 = this.@__BuildControlLicenseTypeGrid();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl5;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl5 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_licensetypelist_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_licensetypelist_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_licensetypelist_aspx.@__fileDependencies);
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -819301442;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.9.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "33DCC7DE69694D4EC1A6AD9368A5840C"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx.cs"
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class EntityList : System.Web.UI.Page
{
    //local variables;
    private string _id;
    private string _name;
    private string _externalEntityId;
    private string _contactInfo;
    private string _accountNumber;
    private bool _isProvider;
    private bool _isMetadataProvider;
    private bool _isDrmLicenseIssuer;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            BindEntityList();
        }
    }

    protected void EntityGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Entity entity = e.Row.DataItem as Entity;

            if ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit)
            {
                ((Label)e.Row.FindControl("IdEdit")).Text = entity.Id.ToString();
                ((TextBox)e.Row.FindControl("NameEdit")).Text = entity.Name.ToString();
                ((TextBox)e.Row.FindControl("AccountNumberEdit")).Text = entity.AccountNumber.ToString();
                ((TextBox)e.Row.FindControl("ExternalProviderEdit")).Text = entity.ExternalEntityId;
                ((TextBox)e.Row.FindControl("ContactInfoEdit")).Text = entity.ContactInfo;
                ((CheckBox)e.Row.FindControl("IsProviderEdit")).Checked = entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderEdit")).Checked = entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerEdit")).Checked = entity.IsDrmLicenseIssuer;

                ((CheckBox)e.Row.FindControl("IsProviderEdit")).Enabled = !entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderEdit")).Enabled = !entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerEdit")).Enabled = !entity.IsDrmLicenseIssuer;
            }
            else
            {
                ((Label)e.Row.FindControl("IdLabel")).Text = entity.Id.ToString();
                ((Label)e.Row.FindControl("NameLabel")).Text = entity.Name.ToString();
                ((Label)e.Row.FindControl("AccountNumberLabel")).Text = entity.AccountNumber.ToString();
                ((Label)e.Row.FindControl("ExternalProviderLabel")).Text = entity.ExternalEntityId;
                ((Label)e.Row.FindControl("ContactInfoLabel")).Text = entity.ContactInfo;                
                ((CheckBox)e.Row.FindControl("IsProviderRead")).Checked = entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderRead")).Checked = entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerRead")).Checked = entity.IsDrmLicenseIssuer;
            }
        }
    }

    protected void EntityGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        EntityGrid.PageIndex = e.NewPageIndex;
        BindEntityList();
    }

    protected void EntityGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
    {
        EntityGrid.EditIndex = e.NewEditIndex;       
        BindEntityList();
    }

    protected void EntityGrid_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        EntityGrid.EditIndex = -1;
        BindEntityList();
    }

    protected void EntityGrid_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        _id = ((Label)EntityGrid.Rows[e.RowIndex].FindControl("IdEdit")).Text.Trim();
        _name = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("NameEdit")).Text.Trim();
        _externalEntityId = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("ExternalProviderEdit")).Text.Trim();
        _accountNumber = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("AccountNumberEdit")).Text.Trim();
        _contactInfo = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("ContactInfoEdit")).Text.Trim();
        _isProvider = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsProviderEdit")).Checked;
        _isMetadataProvider = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsMetadataProviderEdit")).Checked;
        _isDrmLicenseIssuer = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsDrmLicenseIssuerEdit")).Checked;

        if (SaveProvider(DataChangeType.Update))
        {
            EntityGrid.EditIndex = -1;
            BindEntityList();
        }
    }

    protected void EntityGrid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName != "Insert")
            return;

        if (e.CommandName == "Insert")
        {
            _name = ((TextBox)EntityGrid.FooterRow.FindControl("NameFooter")).Text.Trim();
            _externalEntityId = ((TextBox)EntityGrid.FooterRow.FindControl("ExternalProviderFooter")).Text;
            _accountNumber = ((TextBox)EntityGrid.FooterRow.FindControl("AccountNumberFooter")).Text;
            _contactInfo = ((TextBox)EntityGrid.FooterRow.FindControl("ContactInfoFooter")).Text;
            _isProvider = ((CheckBox)EntityGrid.FooterRow.FindControl("IsProviderFoot")).Checked;
            _isMetadataProvider = ((CheckBox)EntityGrid.FooterRow.FindControl("IsMetadataProviderFoot")).Checked;
            _isDrmLicenseIssuer = ((CheckBox)EntityGrid.FooterRow.FindControl("IsDrmLicenseIssuerFoot")).Checked;
        }

        if (SaveProvider(DataChangeType.Add))
        {
            BindEntityList();
        }

    }

    private void BindEntityList()
    {
        EntityGrid.DataSource = Constants.Proxy.GetEntity();
        EntityGrid.DataBind();
    }

    private bool SaveProvider(DataChangeType changeType)
    {        
        this.ErrorMsg.Text = "";

        // Must have a name
        if (_name.Length == 0)
        {
            this.ErrorMsg.Text = "Error: Entity name missing.";
            return false;
        }

        // At least one must be checked
        if (!_isProvider && !_isMetadataProvider && !_isDrmLicenseIssuer)
        {
            this.ErrorMsg.Text = "Error: Need at least one entity checked";
            return false;
        }

        //Save to database
        try
        {
            Entity e = new Entity();
            if (changeType == DataChangeType.Update)
            {
                e.Id = Int32.Parse(_id);
            }
            else
            {
                e.Id = 0;
            }
            e.Name = _name;
            e.ContactInfo = _contactInfo;
            e.AccountNumber = _accountNumber;
            e.ExternalEntityId = _externalEntityId;
            e.IsProvider = _isProvider;
            e.IsMetadataProvider = _isMetadataProvider;
            e.IsDrmLicenseIssuer = _isDrmLicenseIssuer;
            e.Modified = changeType;
            Constants.Proxy.SaveEntity(e);

            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Provider.Refresh();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.MetadataProvider.Refresh();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.DRMLicenseIssuer.Refresh();

            this.ErrorMsg.Text = "";
            return true;
        }
        catch(Exception e)
        {
            this.ErrorMsg.Text = String.Format("Error: Unable to save Provider changes: {0}", e.Message);
            return false;
        }
    }
}



#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.1.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "B7283768AAD3ECDFCA6D32AF8C6BAD85"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Services.Protocols;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseType : System.Web.UI.Page
    {

        # region Constants
        private const string emptyErrorMessage = "Error: {0} is not specified";
        private const string legalTextDuplicate = "Legal Text with selected Locale already exists";
        private const string licenseTypeDuplicate = "LicenseType ID {0} already Exists";
        private const string licenseTypeSession = "LicenseType";
        private const string licenseTypeOperationSession = "LicenseTypeOperationMode";
        private const string legalTextOperationModeSession = "legalTextOperationMode";
        private const string legalTextLocaleSession = "legalTextLocale";
        # endregion

        # region Methods
        /// <summary>
        /// Page load event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {

                string licenstypeId = (this.Request.QueryString.Count > 0) ? this.Request.QueryString[0] : null;
                Proxy.LicenseType licenseType = null;
                try
                {
                    if (licenstypeId != null)
                    {
                        licenseType = Constants.Proxy.GetLicenseType(Convert.ToInt32(licenstypeId));
                        this.TitleMsg.Text = "Edit LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Edit;

                    }
                    else
                    {
                        licenseType = new Proxy.LicenseType();
                        licenseType.Name = String.Empty;
                        licenseType.Name = String.Empty;
                        licenseType.LicenseClassId = -1;
                        this.TitleMsg.Text = "Add LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Add;

                    }
                }
                catch (SoapException ex)
                {
                    this.ErrorMsg.Text = String.Format("Unable to retrieve LicenseType information: {0}", ex.Message);
                    return;
                }
                Session[licenseTypeSession] = licenseType;
                Session[legalTextOperationModeSession] = Operation_Mode.Undefined;
                PopulateDomainData();
                PopulateControls(licenseType);
                SetLicenseTypeEditState();
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// The method Populates the Domain Data Drop Down
        /// </summary>
        private void PopulateDomainData()
        {
            LicenseClassList.DataSource = Constants.Proxy.GetLicenseClass();
            LicenseClassList.DataTextField = "Name";
            LicenseClassList.DataValueField = "Id";
            LicenseClassList.DataBind();

            LocaleList.DataSource = Constants.Proxy.GetLocale();
            LocaleList.DataTextField = "LocaleCode";
            LocaleList.DataValueField = "Id";
            LocaleList.DataBind();

            LocaleList.Items.Insert(0, new ListItem("<Select>", "-1"));
        }
        /// <summary>
        /// Populate the Controls from the LicenseType Class
        /// </summary>
        /// <param name="licenseType"></param>
        private void PopulateControls(Proxy.LicenseType licenseType)
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Edit)
            {

                LicenseTypeId.Text = licenseType.Id.ToString();

            }
            else if (licenseTypeOperationMode == Operation_Mode.Add)
            {

                LicenseTypeId.Text = string.Empty;
            }
            LicenseTypeNameLabel.Text = licenseType.Name;
            LicenseTypeName.Text = licenseType.Name;
            LicenseClassList.SelectedValue = licenseType.LicenseClassId.ToString();
            LicenseXML.Text = licenseType.LicenseXML;
            BindLegalText(licenseType);

        }
        /// <summary>
        /// Binds the Legal Text array list to the LegalText Listbox
        /// Exclude the legal texts marked for deletion
        /// </summary>
        /// <param name="licenseType"></param>
        private void BindLegalText(Proxy.LicenseType licenseType)
        {
            if (LegalTextList.Items.Count > 0)
            {
                LegalTextList.Items.Clear();
            }
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        ListItem listItem = new ListItem(legalTextLocale.Locale, legalTextLocale.Legaltextlcid.ToString());
                        LegalTextList.Items.Add(listItem);
                    }
                }
                if (LegalTextList.Items.Count > 0)
                {
                    LegalTextList.SelectedIndex = 0;
                    LegalTextList_SelectedIndexChanged(LegalTextList, EventArgs.Empty);
                }
                else
                {
                    LocaleList.SelectedValue = "-1";
                    LegalText.Text = string.Empty;
                }
            }
        }
        /// <summary>
        /// Selected Index changed Event for LegalText List
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void LegalTextList_SelectedIndexChanged(object sender, EventArgs e)
        {
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = GetLicenseTypeLegalTextLocale(Int32.Parse(LegalTextList.SelectedValue));
            LocaleList.SelectedValue = legalTextLocale.Legaltextlcid.ToString();
            LegalText.Text = legalTextLocale.Text;
        }
        /// <summary>
        /// Validates the LicenseType Data before Save
        /// </summary>
        /// <returns></returns>
        private bool ValidateLicenseTypeData()
        {
            this.ErrorMsg.Text = string.Empty;
            int val;

            if (Int32.TryParse(this.LicenseTypeId.Text.Trim(), out val) == false)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType id");
                return false;
            }

            if (this.LicenseTypeName.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType name");
                return false;
            }
            if (this.LicenseXML.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "License XML");
                return false;
            }

            if (this.LicenseClassList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseClass");
                return false;
            }
            return true;
        }
        /// <summary>
        /// Validates the Legal Text Data
        /// </summary>
        /// <returns></returns>
        private bool ValidateLegalText()
        {
            this.ErrorMsg.Text = string.Empty;

            if (this.LocaleList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;
            }
            if (this.LocaleList.SelectedValue.Equals("-1"))
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;

            }
            if (this.LegalText.Text.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text");
                return false;
            }

            return true;

        }
        /// <summary>
        /// Sets the control's state according to the Mode of Operation
        /// </summary>
        private void SetLicenseTypeEditState()
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                this.LicenseTypeId.Enabled = true;
            }
            this.LicenseTypeName.Enabled = true;
            this.LicenseXML.Enabled = true;
            this.LicenseClassList.Enabled = true;
        }
        /// <summary>
        /// Add legal text Click event 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddLegalText_Click(object sender, ImageClickEventArgs e)
        {
            LocaleList.SelectedValue = "-1";
            LegalText.Text = string.Empty;
            Session[legalTextOperationModeSession] = Operation_Mode.Add;
            SetLegalTextEditState();

        }
        /// <summary>
        /// Sets the Legal Text Edit state
        /// </summary>
        /// <param name="beditLegalText"></param>
        private void SetLegalTextEditState()
        {
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];

            this.btnDeleteLegalText.Enabled = true;
            this.LegalTextList.Enabled = true;
            this.LegalText.Enabled = true;
            this.SaveLegalText.Enabled = true;
            this.CancelLegalText.Enabled = true;
            this.LocaleList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;

            if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.btnEditLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;

            }
            else if (legalTextOperationMode == Operation_Mode.Edit)
            {
                this.btnAddLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;
            }
            else if (legalTextOperationMode == Operation_Mode.Undefined)
            {
                this.SaveLegalText.Enabled = false;
                this.CancelLegalText.Enabled = false;
                this.LocaleList.Enabled = false;
                this.LegalText.Enabled = false;
            }
        }
        /// <summary>
        /// Edit Legal Text Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnEditLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Session[legalTextOperationModeSession] = Operation_Mode.Edit;
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// Click Event for save legal text
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLegalText_Click(object sender, EventArgs e)
        {
            if (!ValidateLegalText())
            {
                return;
            }
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];
            if (legalTextOperationMode == Operation_Mode.Edit)
            {
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocaleInstance in licenseType.LegalTextLocales)
                    {
                        if (legalTextLocale.Legaltextlcid == legalTextLocaleInstance.Legaltextlcid)
                        {
                            legalTextLocaleInstance.Text = this.LegalText.Text;
                            legalTextLocaleInstance.Modified = Proxy.DataChangeType.Update;
                        }

                    }
                }
            }
            else if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.ErrorMsg.Text = string.Empty;
                if (GetLicenseTypeLegalTextLocale(Int32.Parse(this.LocaleList.SelectedValue)) != null)
                {
                    this.ErrorMsg.Text = legalTextDuplicate;
                    return;
                }
                Proxy.LicenseTypeLegalTextLocale legalText = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseTypeLegalTextLocale();
                legalText.Legaltextlcid = Int32.Parse(this.LocaleList.SelectedValue);
                legalText.Locale = this.LocaleList.SelectedItem.Text;
                legalText.Text = this.LegalText.Text;
                legalText.Modified = Proxy.DataChangeType.Add;
                legalText.LicenseTypeId = licenseType.Id;
                licenseType.LegalTextLocales = DisplayHelper.ArrayItemAdd(licenseType.LegalTextLocales, legalText);
            }
            BindLegalText(licenseType);
            ResetLegalTextState();

        }
        /// <summary>
        /// Finds the Legal Text based on lcid
        /// </summary>
        /// <param name="lcid"></param>
        /// <returns></returns>
        private Proxy.LicenseTypeLegalTextLocale GetLicenseTypeLegalTextLocale(int lcid)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Legaltextlcid == lcid && legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        Session[legalTextLocaleSession] = legalTextLocale;
                        return legalTextLocale;
                    }
                }
            }
            Session[legalTextLocaleSession] = null;
            return null;
        }
        /// <summary>
        /// Delete Legal Text Button Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
                Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
                legalTextLocale.Modified = Proxy.DataChangeType.Delete;
                BindLegalText(licenseType);
            }
        }
        /// <summary>
        /// Resets the Legal Text State
        /// </summary>
        private void ResetLegalTextState()
        {
            this.LegalText.Enabled = false;
            this.LocaleList.Enabled = false;
            this.SaveLegalText.Enabled = false;
            this.LegalTextList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnDeleteLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;
            this.CancelLegalText.Enabled = false;

        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Cancel_Click(object sender, EventArgs e)
        {
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Save License Type Button Click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLicenseType_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (!ValidateLicenseTypeData())
            {
                return;
            }
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                if (Constants.Proxy.GetLicenseType(Int32.Parse(LicenseTypeId.Text)) != null)
                {
                    this.ErrorMsg.Text = String.Format(licenseTypeDuplicate, LicenseTypeId.Text);
                    return;
                }
                licenseType.Id = Int32.Parse(LicenseTypeId.Text);
                licenseType.Modified = Proxy.DataChangeType.Add;
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                    {
                        legalTextLocale.LicenseTypeId = licenseType.Id;
                    }
                }
            }
            else if (licenseTypeOperationMode == Operation_Mode.Edit)
            {
                licenseType.Modified = Proxy.DataChangeType.Update;
            }
            licenseType.LicenseClassId = Int32.Parse(LicenseClassList.SelectedValue.Trim());
            licenseType.LicenseXML = LicenseXML.Text.Trim();
            licenseType.Name = LicenseTypeName.Text.Trim();
            try
            {
                Constants.Proxy.SaveLicenseType(licenseType);
            }
            catch (SoapException ex)
            {
                this.ErrorMsg.Text = String.Format("Unable to save LicenseType information: {0}", ex.Message);
                return;
            }
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void CancelLegalText_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            ResetLegalTextState();
            BindLegalText(licenseType);
        }
        # endregion

    }
}

#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.5.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "0C0AF967A3C97F5D3D9818B6674F241F"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Net;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class PricingRuleEdit : System.Web.UI.Page
    {
        string _priceId;
        string _priceFrom;
        string _priceTo;
        string _pointsRetail;
        string _priceRetail;

        const int maxPrecisionDigits = 18;
        const int maxScaleDigits = 4;


        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                //Retrieve current PricingRule objec to edit/add
                int ruleId = -1;
                if (this.ClientQueryString.Length > 0)
                {
                    if (Int32.TryParse(this.ClientQueryString, out ruleId) == false)
                        ruleId = -1;
                }
                this.ErrorMsg.Text = "";

                //Store list of PricingRuleInstance in memory as list for easy manipulation
                PricingRule price;
                List<PricingRuleInstance> priceMap = new List<PricingRuleInstance>();
                if (ruleId == -1)
                {
                    this.TitleMsg.Text = "Add New Pricing Rule";
                    price = new PricingRule();
                    price.PrimaryId = -1;
                    price.RetailCurrencyCode = "USD";
                    price.WholesaleCurrencyCode = "USD";
                }
                else
                {
                    this.TitleMsg.Text = "Edit Pricing Rule";
                    price = Constants.Proxy.GetPricingRule(ruleId);
                    foreach (PricingRuleInstance pi in price.PricingRuleInstances)
                        priceMap.Add(pi);
                }
                Session["Price"] = price;
                Session["PriceMap"] = priceMap;

                this.RetailCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.RetailCurrencyList.DataBind();
                this.RetailCurrencyList.SelectedValue = "USD";

                this.WholesaleCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.WholesaleCurrencyList.DataBind();
                this.WholesaleCurrencyList.SelectedValue = "USD";

                //Display PriceRule for edit
                DisplayPrice();
            }
        }

        private void BindPriceMap()
        {
            PriceGrid.DataSource = Session["PriceMap"] as List<PricingRuleInstance>;
            PriceGrid.DataBind();
        }

        protected void PriceGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                PricingRuleInstance priceMap = e.Row.DataItem as PricingRuleInstance;

                if ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit)
                {
                    ((Label)e.Row.FindControl("PriceIdEdit")).Text = priceMap.Id.ToString();
                    ((TextBox)e.Row.FindControl("PriceFromEdit")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((TextBox)e.Row.FindControl("PriceToEdit")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((TextBox)e.Row.FindControl("PointsRetailEdit")).Text = priceMap.PointsRetail.ToString();
                    ((TextBox)e.Row.FindControl("PriceRetailEdit")).Text = priceMap.PriceRetail.ToString();
                }
                else
                {
                    ((Label)e.Row.FindControl("PriceIdLabel")).Text = priceMap.Id.ToString();
                    ((Label)e.Row.FindControl("PriceFromLabel")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((Label)e.Row.FindControl("PriceToLabel")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((Label)e.Row.FindControl("PointsRetailLabel")).Text = priceMap.PointsRetail.ToString();
                    ((Label)e.Row.FindControl("PriceRetailLabel")).Text = priceMap.PriceRetail.ToString();
                }
            }
        }

        protected void PriceGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            PriceGrid.PageIndex = e.NewPageIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            PriceGrid.EditIndex = e.NewEditIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            PriceGrid.EditIndex = -1;
            BindPriceMap();
        }

        private bool ValidateNotNullOrNegative(string str, string field)
        {
            Decimal d;
            if (Decimal.TryParse(str, out d) == false)
            {
                this.ErrorMsg.Text = field + " must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = field +  " must be numeric and non-negative.";
                return false;
            }
            return true;
        }

        protected void PriceGrid_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (ValidateNotNullOrNegative(((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim(), "Price ID"))
            {
                _priceId = ((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim(), "Price From"))
            {
                _priceFrom = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim(), "Price To"))            
            {
                _priceTo = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim(), "Points Retail"))
            {
                _pointsRetail = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim();
            }
            else
            {
                return;
            }

            PricingRuleInstance priceMap = (Session["PriceMap"] as List<PricingRuleInstance>)[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            if (SavePricingRuleInstance(DataChangeType.Update, priceMap))
            {
                PriceGrid.EditIndex = -1;
                BindPriceMap();
            }
        }

        protected void PriceGrid_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            List<PricingRuleInstance> priceMapList = Session["PriceMap"]as List<PricingRuleInstance>;
            PricingRuleInstance priceMap = priceMapList[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            priceMapList.Remove(priceMap);

            Session["PriceMap"] = priceMapList;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName != "Insert" && e.CommandName != "InsertEmpty")
                return;
            
            if (e.CommandName == "Insert")
            {
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim(),"Price ID"))
                {
                    _priceId     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim(),"Price From"))
                {
                    _priceFrom   = ((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim(), "Price To"))
                {
                    _priceTo     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim(),"Points Retail"))
                {
                    _pointsRetail= ((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim();
                }                                             
            }
            else if (e.CommandName == "InsertEmpty")
            {
                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim(), "Price ID"))
                {
                    _priceId = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim(), "Price From"))
                {
                    _priceFrom = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim(), "Price To"))
                {
                    _priceTo = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim(), "Points Retail"))
                {
                    _pointsRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }
            }

            if (SavePricingRuleInstance(DataChangeType.Add, null))
            {
                BindPriceMap();
            }
        }

        protected void PriceSave_OnClick(object sender, EventArgs e)
        {
            if (SavePricingRule())
            {
                Response.Redirect("PricingRuleList.aspx");
            }
        }

        protected void PriceCancel_OnClick(object sender, EventArgs e)
        {
            Response.Redirect("PricingRuleList.aspx");
        }

        private void DisplayPrice()
        {
            PricingRule price = Session["Price"] as PricingRule;

            //Display the data list
            this.ProviderList.DataSource = Constants.Proxy.GetProvider();
            this.ProviderList.DataBind();

            if (price.PrimaryId != -1)
            {
                this.RuleID.Text = price.PrimaryId.ToString();
                this.RuleID.ReadOnly = true;
                this.RuleName.Focus();
            }
            else
            {
                this.RuleID.Focus();
            }

            this.RuleName.Text = price.Name;
            DisplayHelper.SelectDropDownListItem(price.ProviderId, this.ProviderList);
            DisplayHelper.SelectDropDownListItem(price.CountryCode, this.CountryList);
            DisplayHelper.SelectDropDownListItem(price.MediaTypeId, this.MediaTypeList);
            DisplayHelper.SelectDropDownListItem(price.RetailCurrencyCode, this.RetailCurrencyList);
            DisplayHelper.SelectDropDownListItem(price.WholesaleCurrencyCode, this.WholesaleCurrencyList);

            this.StartDate.Text = DisplayHelper.GetDateDisplay(price.StartDateTime);
            if (price.Margin > 0)
                this.Margin.Text = price.Margin.ToString();
            if (price.Rate > 0)
                this.Rate.Text = price.Rate.ToString();

            BindPriceMap();
        }
        
        private bool SavePricingRuleInstance(DataChangeType changeType, PricingRuleInstance priceMap)
        {
            if (_priceId.Length == 0 &&
                _priceFrom.Length == 0 &&
                _priceTo.Length == 0 && 
                _pointsRetail.Length == 0 && 
                _priceRetail.Length == 0)
                return false;

            List<PricingRuleInstance> priceMapList = Session["PriceMap"] as List<PricingRuleInstance>;
            if (changeType == DataChangeType.Add)
            {
                foreach(PricingRuleInstance pi in priceMapList)
                    if (pi.Id.ToString() == _priceId)
                    {
                        this.ErrorMsg.Text = String.Format("Price map id [{0}] already in use.", _priceId);
                        return false;
                    }

                priceMap = new PricingRuleInstance();
                priceMap.Id = Int32.Parse(_priceId);
            }

            string errMsg = "You can have maximum 14 digits before decimal point and 4 after the decimal point in {0}";
            if (!IsValidDecimalPrice(_priceFrom, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price From");
                return false;
            }

            if (!IsValidDecimalPrice(_priceTo, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price To");
                return false;
            }

            if (!IsValidDecimalPrice(_priceRetail, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price Retail");
                return false;
            }

            priceMap.PriceWholesaleFrom = (_priceFrom.Length == 0) ? 0 : Decimal.Parse(_priceFrom);
            priceMap.PriceWholesaleTo = (_priceTo.Length == 0) ? 0 : Decimal.Parse(_priceTo);
            priceMap.PointsRetail = (_pointsRetail.Length == 0) ? 0 : Int32.Parse(_pointsRetail);
            priceMap.PriceRetail = (_priceRetail.Length == 0) ? 0 : Decimal.Parse(_priceRetail);
            priceMap.Modified = changeType;

            if (changeType == DataChangeType.Add)
            {
                ((List<PricingRuleInstance>)Session["PriceMap"]).Add(priceMap);
            }
            return true;
        }

        private bool IsValidDecimalPrice(string price, int precision, int scale)
        {
            bool result = true;

            if (price.Length > (precision - scale))
            {
                string[] parts = price.Split('.');

                // Price is more than precision range without any decimal digits
                if (parts.Length == 1)
                {
                    result = false;
                }
                else if (parts[0].Length > (precision - scale))
                {
                    result = false;
                }
                else if (parts[1].Length > scale)
                {
                    result = false;
                }
            }

            return result;
        }

        private bool SavePricingRule()
        {
            PricingRule price = Session["Price"] as PricingRule;
            List<PricingRuleInstance> priceMapList = Session["PriceMap"] as List<PricingRuleInstance>;
            if (this.RuleID.ReadOnly == false)
            {
                price.Modified = DataChangeType.Add;
            }
            else
            {
                price.Modified = DataChangeType.Update;

            }
            //Data validation
            int val;
            if (Int32.TryParse(this.RuleID.Text, out val) == false)
            {
                this.ErrorMsg.Text = "Pricing rule id must be numeric and non-negative.";
                return false;
                
            }
            if (val < 0)
            {
                this.ErrorMsg.Text = "Pricing rule id must be numeric and non-negative.";
                return false;
            }

            Decimal d;
            if (Decimal.TryParse(this.Margin.Text, out d) == false)
            {
                this.ErrorMsg.Text = "Margin must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = "Margin must be numeric and non-negative.";
                return false;
            }

            if (Decimal.TryParse(this.Rate.Text, out d) == false)
            {
                this.ErrorMsg.Text = "Rate must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = "Rate must be numeric and non-negative.";
                return false;
            }

            if (price.Modified == DataChangeType.Add)
            {
                if (Constants.Proxy.GetPricingRule(val) != null)
                {
                    this.ErrorMsg.Text = String.Format("Pricing rule id [{0}] already exists.", val);
                    return false;
                }
            }


            // Only need to check if other pricing rule name is being added or updated to a new name
            Boolean isNameUpdated = false;
            if (price.Name != null)
            {
                isNameUpdated = price.Name.ToUpper().CompareTo(this.RuleName.Text.ToUpper().Trim()) != 0;
            }
            
            if (price.Modified == DataChangeType.Add || isNameUpdated)
            {
                PricingRule[] pricingRules = Constants.Proxy.GetPricingRule();
                foreach (PricingRule pr in pricingRules)
                {
                    if (pr.Name.ToUpper().CompareTo(RuleName.Text.Trim().ToUpper()) == 0)
                    {
                        this.ErrorMsg.Text = String.Format("Pricing rule name [{0}] already exists.", RuleName.Text.Trim());
                        return false;
                    }
                }
            }

            if (this.RuleName.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = "Pricing rule name required.";
                return false;
            }
            if (DisplayHelper.IsValidDate(this.StartDate.Text) == false)
            {
                this.ErrorMsg.Text = "Invalid date specified.";
                return false;
            }

            price.PrimaryId = Int32.Parse(this.RuleID.Text);
            price.Name = this.RuleName.Text.Trim();
            price.ProviderId = Int32.Parse(this.ProviderList.SelectedValue);
            price.CountryCode = this.CountryList.SelectedValue;
            price.RetailCurrencyCode = this.RetailCurrencyList.SelectedValue;
            price.WholesaleCurrencyCode = this.WholesaleCurrencyList.SelectedValue;
            price.MediaTypeId = Int32.Parse(this.MediaTypeList.SelectedValue);
            price.StartDateTime = DisplayHelper.GetDateValue(this.StartDate.Text, 0, 0);
            if (this.Margin.Text.Trim().Length > 0)
                price.Margin = Decimal.Parse(this.Margin.Text);
            if (this.Rate.Text.Trim().Length > 0)
                price.Rate = Decimal.Parse(this.Rate.Text);

            if (price.Modified == DataChangeType.Update)
            {
                //Determine which PricingRuleInstance may be deleted
                PricingRule oldPrice = Constants.Proxy.GetPricingRule(price.PrimaryId);
                foreach (PricingRuleInstance pOld in oldPrice.PricingRuleInstances)
                {
                    bool found = false;
                    foreach (PricingRuleInstance pNew in priceMapList)
                    {
                        if (pOld.Id == pNew.Id)
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        pOld.Modified = DataChangeType.Delete;
                        priceMapList.Add(pOld);
                    }
                }
            }
   
            price.PricingRuleInstances = priceMapList.ToArray();
            try
            {
                Constants.Proxy.SavePricingRule(price);
            }
            catch (Exception e)
            {
                this.ErrorMsg.Text = String.Format("Unable to save Pricing Rule: {0}.", e.Message);
                return false;
            }
            return true;
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.4.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D4DF0C33FFEB15159E01D9AB5765F370"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class PricingRuleEdit : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label TitleMsg;
        
        #line default
        #line hidden
        
        
        #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox RuleID;
        
        #line default
        #line hidden
        
        
        #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox RuleName;
        
        #line default
        #line hidden
        
        
        #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList ProviderList;
        
        #line default
        #line hidden
        
        
        #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList CountryList;
        
        #line default
        #line hidden
        
        
        #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList RetailCurrencyList;
        
        #line default
        #line hidden
        
        
        #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList WholesaleCurrencyList;
        
        #line default
        #line hidden
        
        
        #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList MediaTypeList;
        
        #line default
        #line hidden
        
        
        #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl reqStartDate;
        
        #line default
        #line hidden
        
        
        #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox StartDate;
        
        #line default
        #line hidden
        
        
        #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox Margin;
        
        #line default
        #line hidden
        
        
        #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox Rate;
        
        #line default
        #line hidden
        
        
        #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.GridView PriceGrid;
        
        #line default
        #line hidden
        
        
        #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label MasterStatusDisplay;
        
        #line default
        #line hidden
        
        
        #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Button MasterSave;
        
        #line default
        #line hidden
        
        
        #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Button MasterCancel;
        
        #line default
        #line hidden
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        
        #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_pricingrule_aspx : global::Microsoft.Ems.Apps.Web.Editorial.PricingRuleEdit, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_pricingrule_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/PricingRule.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_pricingrule_aspx.@__initialized == false)) {
                global::ASP.domain_pricingrule_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/PricingRule.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/PricingRule.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_pricingrule_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_pricingrule_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlTitleMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.TitleMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "TitleMsg";
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "heading";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("Add/Edit PricingRule"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EnableViewState = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRuleID() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.RuleID = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RuleID";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRuleName() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.RuleName = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RuleName";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlProviderList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.ProviderList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ProviderList";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control4() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "US";
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "United States";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control5() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "CA";
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Canada";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control6() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "FR";
            
            #line default
            #line hidden
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "France";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control7() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "DE";
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Germany";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl4;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlCountryList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.CountryList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "CountryList";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control3(@__ctrl.Items);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlRetailCurrencyList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.RetailCurrencyList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RetailCurrencyList";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlWholesaleCurrencyList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.WholesaleCurrencyList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "WholesaleCurrencyList";
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control9() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "2";
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Movie";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control10() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "11";
            
            #line default
            #line hidden
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Movie Preview";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control11() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "3";
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Show";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control12() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "8";
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Episode";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control13() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "9";
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Season";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control14() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "10";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Series";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control9();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control10();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control11();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl4;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl5;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control13();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl6;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control14();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlMediaTypeList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.MediaTypeList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MediaTypeList";
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control8(@__ctrl.Items);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlGenericControl @__BuildControlreqStartDate() {
            global::System.Web.UI.HtmlControls.HtmlGenericControl @__ctrl;
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlGenericControl("span");
            
            #line default
            #line hidden
            this.reqStartDate = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "reqStartDate";
            
            #line default
            #line hidden
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("class", "validator");
            
            #line default
            #line hidden
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Visible = false;
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("*"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlStartDate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.StartDate = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "StartDate";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 10;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlMargin() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.Margin = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "Margin";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.Rate = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "Rate";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control16() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdEmpty";
            
            #line default
            #line hidden
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control17() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromEmpty";
            
            #line default
            #line hidden
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control18() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToEmpty";
            
            #line default
            #line hidden
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control19() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailEmpty";
            
            #line default
            #line hidden
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control20() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailEmpty";
            
            #line default
            #line hidden
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control21() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceAddButton";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "InsertEmpty";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control15(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(5458, 607, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control16();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl2;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control17();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control18();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control19();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl5;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control20();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl6;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control21();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                </tr>           \r\n                </table>\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control22(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control23(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control27() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdLabel";
            
            #line default
            #line hidden
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control26(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control27();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control29() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdEdit";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control28(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control29();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control31() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdFooter";
            
            #line default
            #line hidden
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control30(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control31();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control25() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control26), null);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control28), null);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control30));
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control34() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromLabel";
            
            #line default
            #line hidden
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control33(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control34();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control36() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromEdit";
            
            #line default
            #line hidden
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control35(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control36();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control38() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromFooter";
            
            #line default
            #line hidden
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control37(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control38();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control32() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control33), null);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control35), null);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control37));
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price From";
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control41() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToLabel";
            
            #line default
            #line hidden
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control40(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control41();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control43() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToEdit";
            
            #line default
            #line hidden
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control42(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control43();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control45() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToFooter";
            
            #line default
            #line hidden
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control44(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control45();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control39() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control40), null);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control42), null);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control44));
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price To";
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control48() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailLabel";
            
            #line default
            #line hidden
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("MaxLength", "10");
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control47(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control48();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control50() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailEdit";
            
            #line default
            #line hidden
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control49(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control50();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control52() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailFooter";
            
            #line default
            #line hidden
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control51(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control52();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control46() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control47), null);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control49), null);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control51));
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Points Retail";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control55() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailLabel";
            
            #line default
            #line hidden
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control54(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control55();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control57() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailEdit";
            
            #line default
            #line hidden
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control56(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control57();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control59() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailFooter";
            
            #line default
            #line hidden
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control58(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control59();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control53() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control54), null);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control56), null);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control58));
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price Retail";
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control62() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageAdd";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ConfirmButtonExtender @__BuildControl__control63() {
            global::AjaxControlToolkit.ConfirmButtonExtender @__ctrl;
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::AjaxControlToolkit.ConfirmButtonExtender();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ConfirmButtonExtenderDelete";
            
            #line default
            #line hidden
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.TargetControlID = "ImageRemove";
            
            #line default
            #line hidden
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ConfirmText = "Are you sure you want to delete this price instance?";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control64() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageRemove";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/WasteBasket_Button.gif";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Delete";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control61(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control62();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ConfirmButtonExtender @__ctrl2;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control63();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl3;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control64();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control66() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "LinkUpdate";
            
            #line default
            #line hidden
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Update";
            
            #line default
            #line hidden
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Update";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control67() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "LinkCancel";
            
            #line default
            #line hidden
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Cancel";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control65(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control66();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl2;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control67();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control69() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageButton3";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Insert";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control68(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control69();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("  \r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control60() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control61), null);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control65), null);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control68));
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control24(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.TemplateField @__ctrl1;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control25();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl2;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control32();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control39();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control46();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl5;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control53();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl6;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control60();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlPriceGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.PriceGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EmptyDataTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control15));
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceGrid";
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ShowFooter = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderStyle.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.PageSize = 10;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "grid";
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control22(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control23(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control24(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.PriceGrid_OnRowDataBound);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.PriceGrid_OnRowEditing);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowCancelingEdit += new System.Web.UI.WebControls.GridViewCancelEditEventHandler(this.PriceGrid_OnRowCancelingEdit);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowUpdating += new System.Web.UI.WebControls.GridViewUpdateEventHandler(this.PriceGrid_OnRowUpdating);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowDeleting += new System.Web.UI.WebControls.GridViewDeleteEventHandler(this.PriceGrid_OnRowDeleting);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.PriceGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.PriceGrid_OnRowCommand);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlMasterStatusDisplay() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.MasterStatusDisplay = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterStatusDisplay";
            
            #line default
            #line hidden
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlMasterSave() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.MasterSave = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterSave";
            
            #line default
            #line hidden
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Save";
            
            #line default
            #line hidden
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Click += new System.EventHandler(this.PriceSave_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlMasterCancel() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.MasterCancel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterCancel";
            
            #line default
            #line hidden
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Click += new System.EventHandler(this.PriceCancel_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl(" \r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControlTitleMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n<table border=\"0\" cellpadding=\"0\">\r\n<tr valign=\"top\">\r\n    <td>\r\n    <div" +
                        " style=\"border-width:thin; border-style:solid\">\r\n    <table>\r\n    <tr>\r\n        " +
                        "<td align=\"right\">ID</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControlRuleID();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>    \r\n    <tr>\r\n        <td align=\"right\">Name" +
                        "</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControlRuleName();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Provider" +
                        "</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl5;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControlProviderList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Country<" +
                        "/td>\r\n        <td>\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl6;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControlCountryList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("    \r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"r" +
                        "ight\">\r\n            Retail Currency</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl7;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl7 = this.@__BuildControlRetailCurrencyList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right" +
                        "\">\r\n            Wholesale Currency</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl8;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl8 = this.@__BuildControlWholesaleCurrencyList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right" +
                        "\">Media Type</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl9;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl9 = this.@__BuildControlMediaTypeList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("    \r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"r" +
                        "ight\" valign=\"middle\">"));
            
            #line default
            #line hidden
            global::System.Web.UI.HtmlControls.HtmlGenericControl @__ctrl10;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl10 = this.@__BuildControlreqStartDate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<nobr>Start Date</nobr></td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl11;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl11 = this.@__BuildControlStartDate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl11);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr> \r\n    <tr >\r\n        <td align=\"right\">Margin</td>\r\n        <td>" +
                        "\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl12;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl12 = this.@__BuildControlMargin();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl12);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Rate</td>\r\n      " +
                        "  <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl13;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl13 = this.@__BuildControlRate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl13);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr>\r\n    <tr><td colspan=\"2\"></td></tr>\r\n    <tr valign=\"top\">\r\n    " +
                        "    <td align=\"right\" valign=\"top\">Price Mapping</td>\r\n        <td colspan=\"2\">\r" +
                        "\n        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl14;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl14 = this.@__BuildControlPriceGrid();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl14);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    </table>\r\n    </div>\r\n    </td>\r\n    <td id=\"stat" +
                        "us\">\r\n        <table style=\"width:150px; background-color:#C5D2D3\">\r\n        <tr" +
                        "><td>Status</td>\r\n            <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl15;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl15 = this.@__BuildControlMasterStatusDisplay();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl15);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        </tr>\r\n        <tr><td colspan=\"2\">\r\n                <br />\r\n     " +
                        "           "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl16;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl16 = this.@__BuildControlMasterSave();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl16);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n        </tr>\r\n        <tr><td colspan=\"2\">\r\n               " +
                        " "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl17;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl17 = this.@__BuildControlMasterCancel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl17);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                <br />\r\n            </td>\r\n        </tr>  \r\n        <tr><td>&nb" +
                        "sp;</td></tr>\r\n        </table>\r\n    </td>    \r\n</tr>\r\n</table>\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgla" +
                        "ssJavascript.js\"></script>\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_pricingrule_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_pricingrule_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_pricingrule_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 1220681079;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.0.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "1B21498B67B7BDE85AF7C5BCB873E1B7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class LicenseType : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label TitleMsg;
        
        #line default
        #line hidden
        
        
        #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label LicenseTypeNameLabel;
        
        #line default
        #line hidden
        
        
        #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseTypeId;
        
        #line default
        #line hidden
        
        
        #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseTypeName;
        
        #line default
        #line hidden
        
        
        #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.DropDownList LicenseClassList;
        
        #line default
        #line hidden
        
        
        #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseXML;
        
        #line default
        #line hidden
        
        
        #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button SaveLicenseType;
        
        #line default
        #line hidden
        
        
        #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button Cancel;
        
        #line default
        #line hidden
        
        
        #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ListBox LegalTextList;
        
        #line default
        #line hidden
        
        
        #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnAddLegalText;
        
        #line default
        #line hidden
        
        
        #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnEditLegalText;
        
        #line default
        #line hidden
        
        
        #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnDeleteLegalText;
        
        #line default
        #line hidden
        
        
        #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.DropDownList LocaleList;
        
        #line default
        #line hidden
        
        
        #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LegalText;
        
        #line default
        #line hidden
        
        
        #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button SaveLegalText;
        
        #line default
        #line hidden
        
        
        #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button CancelLegalText;
        
        #line default
        #line hidden
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_licensetype_aspx : global::Microsoft.Ems.Apps.Web.Editorial.LicenseType, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_licensetype_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/LicenseType.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_licensetype_aspx.@__initialized == false)) {
                global::ASP.domain_licensetype_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[4];
                dependencies[0] = "~/Domain/LicenseType.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/LicenseType.aspx.cs";
                global::ASP.domain_licensetype_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_licensetype_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlTitleMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.TitleMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "TitleMsg";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLicenseTypeNameLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.LicenseTypeNameLabel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeNameLabel";
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ForeColor = System.Drawing.Color.Blue;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseTypeId() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseTypeId = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeId";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseTypeName() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseTypeName = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeName";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlLicenseClassList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.LicenseClassList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseClassList";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseXML() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseXML = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseXML";
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlSaveLicenseType() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.SaveLicenseType = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "SaveLicenseType";
            
            #line default
            #line hidden
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Save";
            
            #line default
            #line hidden
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.SaveLicenseType_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlCancel() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.Cancel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "Cancel";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlLegalTextList() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.LegalTextList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LegalTextList";
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.AutoPostBack = true;
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Single;
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(120, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.SelectedIndexChanged += new System.EventHandler(this.LegalTextList_SelectedIndexChanged);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnAddLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnAddLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnAddLegalText";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Add Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnAddLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnEditLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnEditLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnEditLegalText";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Edit Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnEditLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnDeleteLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnDeleteLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnDeleteLegalText";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Delete Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/wastebasket_button.gif";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnDeleteLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlLocaleList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.LocaleList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LocaleList";
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLegalText() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LegalText";
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 2000;
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlSaveLegalText() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.SaveLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "SaveLegalText";
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Save Legal Text";
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.SaveLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlCancelLegalText() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.CancelLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "CancelLegalText";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.CancelLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            <table>\r\n                <table>\r\n                    <tr valign=\"t" +
                        "op\">\r\n                        <td style=\"width: 150px\">\r\n                       " +
                        "     "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl1 = this.@__BuildControlTitleMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        </td>\r\n                        <td style=\"width: 450px\"" +
                        ">\r\n                            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl2 = this.@__BuildControlLicenseTypeNameLabel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n                        </td>\r\n                    </tr>\r\n               " +
                        " </table>\r\n                <table>\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl3 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(0, 552, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl4 = this.@__BuildControlLicenseTypeId();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(552, 382, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl5;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl5 = this.@__BuildControlLicenseTypeName();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(934, 442, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl6;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl6 = this.@__BuildControlLicenseClassList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(1376, 428, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl7;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl7 = this.@__BuildControlLicenseXML();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(1804, 522, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl8;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl8 = this.@__BuildControlSaveLicenseType();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                        </td>\r\n                                " +
                        "    </tr>\r\n                                    <tr>\r\n                           " +
                        "             <td colspan=\"2\">\r\n                                            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl9;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl9 = this.@__BuildControlCancel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(2326, 982, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl10;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl10 = this.@__BuildControlLegalTextList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3308, 316, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl11;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl11 = this.@__BuildControlbtnAddLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl11);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3624, 284, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl12;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl12 = this.@__BuildControlbtnEditLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl12);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3908, 284, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl13;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl13 = this.@__BuildControlbtnDeleteLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl13);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(4192, 516, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl14;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl14 = this.@__BuildControlLocaleList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl14);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(4708, 401, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl15;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl15 = this.@__BuildControlLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl15);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(5109, 349, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl16;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl16 = this.@__BuildControlSaveLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl16);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl17;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl17 = this.@__BuildControlCancelLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl17);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        </td>\r\n                     </tr>\r\n                </ta" +
                        "ble>\r\n            </table>\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n <script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgl" +
                        "assJavascript.js\"></script>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_licensetype_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools- LicenseType Edit";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Theme = "SiteTheme";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_licensetype_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_licensetype_aspx.@__fileDependencies);
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1002593277;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.6.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "AC060E9C9370485948AFE071899C5D76"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class PricingRuleList : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    protected global::System.Web.UI.WebControls.GridView DataGrid;
    
    #line default
    #line hidden
    
    
    #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    protected global::System.Web.UI.WebControls.ImageButton NewRuleAdd;
    
    #line default
    #line hidden
    
    
    #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_pricingrulelist_aspx : global::PricingRuleList, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_pricingrulelist_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/PricingRuleList.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_pricingrulelist_aspx.@__initialized == false)) {
                global::ASP.domain_pricingrulelist_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/PricingRuleList.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/PricingRuleList.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_pricingrulelist_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_pricingrulelist_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control3() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.DataField = "PrimaryId";
            
            #line default
            #line hidden
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control4() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.DataField = "Name";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HeaderText = "Name";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.BoundField @__BuildControl__control5() {
            global::System.Web.UI.WebControls.BoundField @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.BoundField();
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.DataField = "StartDateTime";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HeaderText = "Start Date";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CommandField @__BuildControl__control6() {
            global::System.Web.UI.WebControls.CommandField @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CommandField();
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ShowEditButton = true;
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.EditImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(20, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ItemStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.EditText = "Edit Pricing Rule";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.BoundField @__ctrl1;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl1 = this.@__BuildControl__control3();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.BoundField @__ctrl2;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl2 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.BoundField @__ctrl3;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl3 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CommandField @__ctrl4;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl4 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.FirstPageText = "First";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.LastPageText = "Last";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.PageButtonCount = 5;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control9(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlDataGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.DataGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ID = "DataGrid";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.CssClass = "gridview";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.PageSize = 10;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.DataKeyNames = new string[] {
                    "PrimaryId"};
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.@__BuildControl__control2(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.@__BuildControl__control7(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.@__BuildControl__control8(@__ctrl.PagerStyle);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.@__BuildControl__control9(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.DataGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.DataGrid_OnRowEditing);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlNewRuleAdd() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.NewRuleAdd = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ID = "NewRuleAdd";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_button.gif";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.AlternateText = "Add new Pricing Rule";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.NewRuleAdd_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<div>\r\n<span class=\"heading\">Add/Edit Pricing Rules:&nbsp;</span>\r\n<br />\r\n</di" +
                        "v>\r\n<table border=\"0\">\r\n<tr>\r\n<td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl1;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl1 = this.@__BuildControlDataGrid();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width:670px\" align=\"right\">\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl2;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl2 = this.@__BuildControlNewRuleAdd();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n</td>\r\n</tr>\r\n</table>\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_pricingrulelist_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRuleList.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_pricingrulelist_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_pricingrulelist_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 2094331659;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\objd\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_wi8rl708.8.cs ===
ï»¿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "927C7BA63A81AC74CB7D84E24B28B78D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class EntityList : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
    
    #line default
    #line hidden
    
    
    #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    protected global::System.Web.UI.WebControls.Label ErrorMsg;
    
    #line default
    #line hidden
    
    
    #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    protected global::System.Web.UI.WebControls.GridView EntityGrid;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    protected global::System.Web.UI.UpdatePanel updatePanel1;
    
    #line default
    #line hidden
    
    
    #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_entitylist_aspx : global::EntityList, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_entitylist_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/EntityList.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_entitylist_aspx.@__initialized == false)) {
                global::ASP.domain_entitylist_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/EntityList.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/EntityList.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_entitylist_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_entitylist_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control8() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "NameLabel";
            
            #line default
            #line hidden
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control8();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control10() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "NameEdit";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 255;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control9(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control10();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control12() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "NameFooter";
            
            #line default
            #line hidden
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 255;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control11(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control6() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control7), null);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control9), null);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control11));
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "Name";
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control15() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IdLabel";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control14(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control15();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control17() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IdEdit";
            
            #line default
            #line hidden
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control16(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control17();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control19() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IdFooter";
            
            #line default
            #line hidden
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("MaxLength", "5");
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control18(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control19();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control13() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control14), null);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control16), null);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control18));
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control22() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ExternalProviderLabel";
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control21(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control22();
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control24() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ExternalProviderEdit";
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control23(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control24();
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control26() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ExternalProviderFooter";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control25(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control26();
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control20() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control21), null);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control23), null);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control25));
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "External Entity ID";
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control29() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ContactInfoLabel";
            
            #line default
            #line hidden
            
            #line 72 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control28(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control29();
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control31() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ContactInfoEdit";
            
            #line default
            #line hidden
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 500;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control30(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control31();
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control33() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 78 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 78 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "ContactInfoFooter";
            
            #line default
            #line hidden
            
            #line 78 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 78 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 500;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control32(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control33();
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control27() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control28), null);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control30), null);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control32));
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "Contact Info";
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 70 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Wrap = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control36() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 83 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 83 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "AccountNumberLabel";
            
            #line default
            #line hidden
            
            #line 83 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control35(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control36();
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control38() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 86 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 86 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "AccountNumberEdit";
            
            #line default
            #line hidden
            
            #line 86 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 86 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control37(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control38();
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control40() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 89 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 89 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "AccountNumberFooter";
            
            #line default
            #line hidden
            
            #line 89 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 89 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control39(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control40();
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control34() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control35), null);
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control37), null);
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control39));
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "Account Number";
            
            #line default
            #line hidden
            
            #line 81 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control43() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 94 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 94 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsProviderRead";
            
            #line default
            #line hidden
            
            #line 94 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 94 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control42(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control43();
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control45() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 97 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 97 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsProviderEdit";
            
            #line default
            #line hidden
            
            #line 97 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control44(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control45();
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control47() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 100 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 100 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsProviderFoot";
            
            #line default
            #line hidden
            
            #line 100 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control46(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control47();
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control41() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control42), null);
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control44), null);
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control46));
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "Provider";
            
            #line default
            #line hidden
            
            #line 92 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control50() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 105 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 105 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsMetadataProviderRead";
            
            #line default
            #line hidden
            
            #line 105 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 105 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control49(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control50();
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control52() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 108 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 108 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsMetadataProviderEdit";
            
            #line default
            #line hidden
            
            #line 108 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control51(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control52();
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control54() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 111 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 111 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsMetadataProviderFoot";
            
            #line default
            #line hidden
            
            #line 111 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control53(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control54();
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control48() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control49), null);
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control51), null);
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control53));
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "MetadataProvider";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control57() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 116 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 116 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsDrmLicenseIssuerRead";
            
            #line default
            #line hidden
            
            #line 116 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 116 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control56(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control57();
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control59() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 119 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 119 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsDrmLicenseIssuerEdit";
            
            #line default
            #line hidden
            
            #line 119 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control58(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control59();
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.CheckBox @__BuildControl__control61() {
            global::System.Web.UI.WebControls.CheckBox @__ctrl;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.CheckBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "IsDrmLicenseIssuerFoot";
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control60(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.CheckBox @__ctrl1;
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control61();
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control55() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control56), null);
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control58), null);
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control60));
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "DRMLicenseIssuer";
            
            #line default
            #line hidden
            
            #line 114 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(10, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control64() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "EntityEdit";
            
            #line default
            #line hidden
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 128 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.AlternateText = "Edit Entity";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control63(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control64();
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control66() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 131 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 131 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "LinkUpdate";
            
            #line default
            #line hidden
            
            #line 131 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Text = "Update";
            
            #line default
            #line hidden
            
            #line 131 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CommandName = "Update";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control67() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 132 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 132 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "LinkCancel";
            
            #line default
            #line hidden
            
            #line 132 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 132 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CommandName = "Cancel";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control65(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl1;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control66();
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl2;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl2 = this.@__BuildControl__control67();
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control69() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "LicenserAdd";
            
            #line default
            #line hidden
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CommandName = "Insert";
            
            #line default
            #line hidden
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 135 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control68(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control69();
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("  \r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control62() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control63), null);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control65), null);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control68));
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.TemplateField @__ctrl1;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl2;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl2 = this.@__BuildControl__control13();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl3 = this.@__BuildControl__control20();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl4 = this.@__BuildControl__control27();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl5;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl5 = this.@__BuildControl__control34();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl6;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl6 = this.@__BuildControl__control41();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl7;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl7 = this.@__BuildControl__control48();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl7);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl8;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl8 = this.@__BuildControl__control55();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl8);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl9;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl9 = this.@__BuildControl__control62();
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Add(@__ctrl9);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlEntityGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.EntityGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "EntityGrid";
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ShowFooter = true;
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.HeaderStyle.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.PageSize = 10;
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.CssClass = "grid";
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            this.@__BuildControl__control3(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            this.@__BuildControl__control4(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            this.@__BuildControl__control5(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.EntityGrid_OnRowEditing);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.RowCancelingEdit += new System.Web.UI.WebControls.GridViewCancelEditEventHandler(this.EntityGrid_OnRowCancelingEdit);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.RowUpdating += new System.Web.UI.WebControls.GridViewUpdateEventHandler(this.EntityGrid_OnRowUpdating);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.EntityGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.EntityGrid_OnRowCommand);
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.EntityGrid_OnRowDataBound);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl(" \r\n\r\n<div>\r\n<span class=\"heading\">Add/Edit Entity:&nbsp;</span>\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<br />\r\n</div>\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl2;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl2 = this.@__BuildControlEntityGrid();
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_entitylist_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\EntityList.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_entitylist_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_entitylist_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1025905488;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Default.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class _Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Image.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class Image : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Category.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class CategoryPage : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                this.selectCategoryForAddEditTreeView.CategorySystems = Constants.Proxy.GetCategorySystem();
                this.selectCategoryForAddEditTreeView.CategorySystemSelectAction = TreeNodeSelectAction.Expand;
            }
            lblSelectedNodePath.Text = selectCategoryForAddEditTreeView.SelectedCategoryPath;
            Session["LocaleAdded"] = false;
        }

        public void EditCategory_OnClick(object sender, EventArgs e)
        {
            if (this.selectCategoryForAddEditTreeView.SelectedCategoryID == -1)
            {
                lblError.Text = "Please select the category before editing.";
                return;   
            }
            // Grab the category from the cache and populate it into a new category instance
            proxy.Category cachedCat = proxy.CategorySystem.GetCategoryById(this.selectCategoryForAddEditTreeView.SelectedCategoryID);
            
            proxy.Category newCategory = new proxy.Category();
            newCategory.Id = cachedCat.Id;
            newCategory.ParentCategoryId = cachedCat.ParentCategoryId;
            newCategory.CategorySystemId = cachedCat.CategorySystemId;

            List<CategoryLocaleMap> clmList = new List<CategoryLocaleMap>();
            foreach(CategoryLocaleMap cachedClm in cachedCat.CategoryLocaleMap)
            {
                CategoryLocaleMap clm = new CategoryLocaleMap();
                clm.FromLcid = cachedClm.FromLcid;
                clm.ToLcid = cachedClm.ToLcid;
                clmList.Add(clm);
            }
            newCategory.CategoryLocaleMap = clmList.ToArray();

            List<CategoryLocale> clList = new List<CategoryLocale>();
            foreach (CategoryLocale cachedCl in cachedCat.Locales)
            {
                CategoryLocale cl = null;
                if (cachedCl is CategoryCorporationLocale)
                {
                    cl = new CategoryCorporationLocale();
                    ((CategoryCorporationLocale)cl).BackgroundImageId = ((CategoryCorporationLocale)cachedCl).BackgroundImageId;
                    ((CategoryCorporationLocale)cl).Description = ((CategoryCorporationLocale)cachedCl).Description;
                    ((CategoryCorporationLocale)cl).HtmlDescription = ((CategoryCorporationLocale)cachedCl).HtmlDescription;
                    ((CategoryCorporationLocale)cl).LogoImageId = ((CategoryCorporationLocale)cachedCl).LogoImageId;
                    ((CategoryCorporationLocale)cl).RssAnnouncement = ((CategoryCorporationLocale)cachedCl).RssAnnouncement;
                    ((CategoryCorporationLocale)cl).RssFeatures = ((CategoryCorporationLocale)cachedCl).RssFeatures;
                    ((CategoryCorporationLocale)cl).RssNews = ((CategoryCorporationLocale)cachedCl).RssNews;
                    ((CategoryCorporationLocale)cl).WebSite = ((CategoryCorporationLocale)cachedCl).WebSite;
                }
                else
                {
                    cl = new CategoryLocale();
                }                
                cl.Lcid = cachedCl.Lcid;
                cl.Name = cachedCl.Name;
                cl.CategoryId = cachedCl.CategoryId;
                List<int> lcidMaps = new List<int>();
                foreach (int i in cachedCl.LcidMaps)
                {
                    lcidMaps.Add(i);
                }
                cl.LcidMaps = lcidMaps.ToArray();
                clList.Add(cl);
            }
            newCategory.Locales = clList.ToArray();

            Session.Add("Category", newCategory);
            Response.Redirect("CategoryAddEdit.aspx");
        }

        public void AddCategory_OnClick(object sender, EventArgs e)
        {
            Session["Category"] = NewCategory();
            Response.Redirect("CategoryAddEdit.aspx");
        }

        private proxy.Category NewCategory()
        {
            proxy.Category c = new proxy.Category();
            c.Id = -1;
            c.Modified = DataChangeType.Add;
            c.CategoryLocaleMap = new CategoryLocaleMap[0];
            
            return c;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\ImageEdit.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageEdit : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        //Retrieve page parameter
        string[] queryParams = this.ClientQueryString.ToLowerInvariant().Split('&');
        Guid mediaID = Guid.Empty;
        for (int i = 0; i < queryParams.Length; i++)
        {
            if (queryParams[i].IndexOf("i=") >= 0)
            {
                mediaID = new Guid(queryParams[i].Substring(2));
            }
        }
        if (mediaID == Guid.Empty)
            Response.Redirect("~/ImageSearch.aspx");
        ImageEdit1.ImageID = mediaID;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\ImageSearchResult.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageSearchResult : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\ImageSearch.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageSearch : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\CategoryAddEdit.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class CategoryAddEdit : System.Web.UI.Page
{
    protected proxy.Category c = null;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            if (Session["Category"] != null)
            {
                c = (proxy.Category)Session["Category"];

                if (c.Id != -1)
                {
                    this.lblCategoryID.Text = c.Id.ToString().Trim() + ",";
                    this.lblCategoryName.Text = c.LocalizedName;
                    this.ctrlContributorParentEdit.FilterCategorySystem = proxy.CategorySystem.Get(c.CategorySystemId);
                }                
            }
        }        
    }

    public void SaveButton_OnClick(object sender, EventArgs e)
    {
        if (Session["Category"] != null)
        {
            proxy.Category c = (proxy.Category)Session["Category"];
            Boolean englishMapped = false;
            foreach (proxy.CategoryLocaleMap clm in c.CategoryLocaleMap)
            {
                if (clm.Modified == proxy.DataChangeType.Delete)
                {                    
                    MessageBox.Show("For locale: " + proxy.Locale.Get(clm.FromLcid).InternalName + ". Cannot remove a category locale if it was previously mapped");
                    return;
                }

                if (clm.ToLcid == 1033)
                {
                    englishMapped = true;
                }
            }
            if (!englishMapped)
            {
                MessageBox.Show("English locale is required to be a primary locale");
                return;
            }          

            Constants.Proxy.SaveCategory(c);
            proxy.CategorySystem.Refresh();
            c = null;
            Session["LocaleAdded"] = false;
            Response.Redirect("Category.aspx", false);            
        }
    }

    public void CancelButton_OnClick(object sender, EventArgs e)
    {
        Session.Remove("Category");
        Session["LocaleAdded"] = false;
        Response.Redirect("Category.aspx", false);
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\ImageAssociated.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;
using System.Text;

public partial class ImageAssociated : System.Web.UI.Page
{
    private class MediaAssociated
    {
        private Media media;
        private int mediaTypeId;

        public Media Media
        {
            get { return media; }
            set { media = value; }
        }
        public int MediaTypeId
        {
            get { return mediaTypeId; }
            set { mediaTypeId = value; }
        }
        MediaAssociatedImage[] associatedImages;

        public MediaAssociatedImage[] AssociatedImages
        {
            get { return associatedImages; }
            set { associatedImages = value; }
        }

    }
    private class MediaAssociatedImage
    {
        private Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image;
        private MediaRelationship mediaRelationship;

        public MediaRelationship MediaRelationship
        {
            get { return mediaRelationship; }
            set { mediaRelationship = value; }
        }


        public Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image Image
        {
            get { return image; }
            set { image = value; }
        }


    }
    protected void Page_Load(object sender, EventArgs e)
    {


        CatalogServices cs;
        if (!IsPostBack)
        {
            cs = Constants.Proxy;
            ddlMediaType.DataSource = cs.GetMediaType();
            ddlMediaType.DataBind();

            //TODO:remove this line after debug
            ddlMediaType.SelectedIndex = 12;


            ddlDim1.DataSource = cs.GetImageSize();
            ddlDim1.DataBind();
            ddlLocale.DataSource = cs.GetLocale();
            ddlLocale.DataBind();

            ImageFileHandler.LoadPropertyFromWebCfgFile();
            if (Session[Constants.SessionVariable_MediaAssociatedImageMedia] != null)
            {
                LoadMedia(Session["MediaAssociatedImage"] as Media);
                Session[Constants.SessionVariable_MediaAssociatedImageMedia] = null;
            }
        }



        if (Session["SelectedImage"] != null)
        {
            bool duplicateFlag = false;
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image im = (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(Session["SelectedImage"]);

            MediaAssociated mediaAssociated = (MediaAssociated)Session["mediaAssociated"];
            foreach (MediaAssociatedImage im1 in mediaAssociated.AssociatedImages)
            {
                if (im.Id == im1.Image.Id)
                {
                    MessageBox.Show("Meida with ID:" + im.Id.ToString() + " is in associated image list already.");
                    duplicateFlag = true; ;
                }
            }
            List<MediaRelationship> mRealationshipList = new List<MediaRelationship>(mediaAssociated.Media.Relationships);
            List<MediaAssociatedImage> tmplist = new List<MediaAssociatedImage>(mediaAssociated.AssociatedImages);

            if (!duplicateFlag)
            {
                MediaRelationship tmpRelationship = new MediaRelationship();
                tmpRelationship.Modified = DataChangeType.Add;
                tmpRelationship.RelatedMediaId = im.Id;
                //Hardcode to 15 which is mediatoimage relationship.
                tmpRelationship.MediaRelationshipTypeId = 15;
                tmpRelationship.RelatedMediaTitle = im.Locales[0].Title;
                mRealationshipList.Add(tmpRelationship);
                mediaAssociated.Media.Relationships = mRealationshipList.ToArray();
                MediaAssociatedImage mediaAssociatedImage = new MediaAssociatedImage();
                mediaAssociatedImage.Image = im;
                mediaAssociatedImage.MediaRelationship = tmpRelationship;
                tmplist.Add(mediaAssociatedImage);
            }
            mediaAssociated.AssociatedImages = tmplist.ToArray();

            gridView.DataSource = mediaAssociated.AssociatedImages;

            gridView.DataBind();
            Session["SelectedImage"] = null;

            Label2.Visible = false;
            ddlMediaType.Visible = false;
            btnLoad.Visible = false;
            tbxMediaID.ReadOnly = true;
            tbxMediaID.Text = mediaAssociated.Media.Id.ToString();
            btnAddExisting.Enabled = true;
            btnAddNew.Enabled = true;
            btnSave.Enabled = true;
        }
    }
    private void LoadMedia(Media media)
    {
        CatalogServices cs = Constants.Proxy;
        MediaAssociated mediaAssociated = new MediaAssociated();
        Guid MediaID = Guid.Empty;
        List<MediaAssociatedImage> imageList = new List<MediaAssociatedImage>();

        mediaAssociated.Media = media;
        if (mediaAssociated.Media == null)
            return;
        foreach (MediaRelationship mRrelationship in mediaAssociated.Media.Relationships)
        {
            if (IsAnImageRelationship(mRrelationship.MediaRelationshipTypeId))
            {
                MediaAssociatedImage mediaAssociatedImage = new MediaAssociatedImage();
                mediaAssociatedImage.Image = cs.GetImage(mRrelationship.RelatedMediaId);
                mediaAssociatedImage.MediaRelationship = mRrelationship;
                imageList.Add(mediaAssociatedImage);
            }
        }
        mediaAssociated.AssociatedImages = imageList.ToArray();
        Session["mediaAssociated"] = mediaAssociated;
        gridView.DataSource = mediaAssociated.AssociatedImages;
        gridView.DataBind();
        ((MediaAssociated)(Session["mediaAssociated"])).MediaTypeId = media.MediaTypeId;

        Label2.Visible = false;
        ddlMediaType.Visible = false;
        btnLoad.Visible = false;
        tbxMediaID.ReadOnly = true;
        tbxMediaID.Text = media.Id.ToString();
        btnAddExisting.Enabled = true;
        btnAddNew.Enabled = true;
        btnSave.Enabled = true;
    }
    
    protected void btnLoad_Click(object sender, EventArgs e)
    {
        CatalogServices cs = Constants.Proxy;
        MediaAssociated mediaAssociated = new MediaAssociated();
        Media media = null;
        Guid MediaID = Guid.Empty;
        try
        {
            MediaID = new Guid(tbxMediaID.Text);
        }
        catch
        {
        }
        switch (int.Parse(ddlMediaType.SelectedItem.Value))
        {
            //TODO:add more here.
            case 2:
                media = cs.GetVideo(MediaID);
                break;
            case 13:
                media = cs.GetPodcast(MediaID);
                break;
            case 14:
                media = cs.GetImage(MediaID);
                break;

            default:
                throw new Exception("Media Type: " + ddlMediaType.SelectedItem.Text + " not supported.");
        }
        LoadMedia(media);
    }
    private bool IsAnImageRelationship(int relationship)
    {
        if (relationship == 15)
            return true;
        return false;
    }
    protected void gridView_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        CatalogServices cs = Constants.Proxy;
        int OriginalImageSizeID = 0, ThumbnailImageSizeID = 0;
        string imInstDisplay = string.Empty;

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {

            if (imSize.Name.CompareTo("Original Image") == 0)
                OriginalImageSizeID = imSize.Id;

            if (imSize.Name.CompareTo("EMS Tool Thumbnail") == 0)
            {

                ThumbnailImageSizeID = imSize.Id;
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            StringBuilder tooltipStr = new StringBuilder();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image im = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].Image;
            //            e.Row.Cells[0].Text = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].Image.Locales[0].Title;
            System.Web.UI.WebControls.Image displayIm = (System.Web.UI.WebControls.Image)e.Row.FindControl("ImageThumnail");
            System.Web.UI.WebControls.ListBox lboxDim = (System.Web.UI.WebControls.ListBox)e.Row.FindControl("lbxDim");
            System.Web.UI.WebControls.DropDownList lboxRelation = (System.Web.UI.WebControls.DropDownList)e.Row.FindControl("ddlRelationType");
            System.Web.UI.WebControls.Label lblLocale = (System.Web.UI.WebControls.Label)e.Row.FindControl("lblLocale");
            lboxRelation.DataSource = cs.GetMediaRelationshipType();
            lboxRelation.DataBind();
            lboxRelation.Items.FindByValue(((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].MediaRelationship.MediaRelationshipTypeId.ToString()).Selected = true;
            tooltipStr.Append("Title:");
            if(im.Locales.Length>0)
                tooltipStr.Append(im.Locales[0].Title);
            else
                tooltipStr.Append("(None)");
            tooltipStr.Append("\n\rDescription: ");
            if (im.Locales.Length > 0)
                tooltipStr.Append(im.Locales[0].Description);
            else
                tooltipStr.Append("(None)");

            tooltipStr.Append(".\n\rDimension(s):\n\r");
            foreach (ImageInstance iminst in im.Instances)
            {
                //ImInstDisplay imInstDisplay = new ImInstDisplay();
                if (iminst.ImageSizeId == OriginalImageSizeID)
                {
                    continue;
                }
                else if (iminst.ImageSizeId == ThumbnailImageSizeID)
                {
                    displayIm.ImageUrl = iminst.FileUrl;
                    continue;
                }
                ListItem listitem = ddlDim1.Items.FindByValue(iminst.ImageSizeId.ToString());
                int width, height, fileSize;
                string fileext;

                if (iminst.ImageSizeId == 0
                    || iminst.ImageSizeId == -1)
                {
                    ImageFileHandler.GetImageFileProperty(iminst.Id, out width, out height, out fileSize, out fileext);
                }
                else
                {
                    width = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im1) { return im1.Id == iminst.ImageSizeId; }))).Width;
                    height = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im1) { return im1.Id == iminst.ImageSizeId; }))).Height;
                }
                if (listitem == null)
                {
                    lboxDim.Items.Add(new ListItem("Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")", "-1 " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                    tooltipStr.Append("Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")\n\r");
                }
                else
                {
                    lboxDim.Items.Add(new ListItem(listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")", iminst.ImageSizeId + " " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                    tooltipStr.Append(listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")\n\r");
                }
            }
            lblLocale.Text = ddlLocale.Items.FindByValue(((ImageInstance)(im.Instances[0])).Lcid.ToString()).Text;
            displayIm.ToolTip = tooltipStr.ToString();

        }
    }

    protected void gridView_RowCommand(object sender, GridViewCommandEventArgs e)
    {

        int rowindex;
        rowindex = int.Parse(e.CommandArgument.ToString());
        if (e.CommandName.CompareTo("up") == 0)
        {
            if (rowindex == 0)
                return;
            MediaAssociatedImage data = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex] = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex - 1];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex - 1] = data;
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
        else if (e.CommandName.CompareTo("down") == 0)
        {
            if (rowindex == gridView.Rows.Count - 1)
                return;
            MediaAssociatedImage data = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex] = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex + 1];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex + 1] = data;
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
        else if (e.CommandName.CompareTo("delete") == 0)
        {
            List<MediaAssociatedImage> newlist = new List<MediaAssociatedImage>();
            for (int i = 0; i < ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages.Length; i++)
            {
                if (i != rowindex)
                    newlist.Add(((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i]);
            }
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages = newlist.ToArray();
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
    }
    protected void gridView_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }
    protected void gridView_RowDeleted(object sender, GridViewDeletedEventArgs e)
    {

    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        List<MediaRelationship> mediaRelList = new List<MediaRelationship>();
        CatalogServices cs = Constants.Proxy;
        //set to delete
        if (Session["mediaAssociated"] == null)
            return;
        foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
        {
            if (IsAnImageRelationship(mediaRelationship.MediaRelationshipTypeId) && mediaRelationship.Modified != DataChangeType.Add)
                mediaRelationship.Modified = DataChangeType.Delete;
        }
        //mark the one that still in the grid to update. 
        for (int i = 0; i < ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages.Length; i++)
        {
            MediaAssociatedImage mediaAssociatedImage = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i];
            bool foundflag = false;
            foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
            {
                if (mediaAssociatedImage.MediaRelationship.RelatedMediaId == mediaRelationship.RelatedMediaId)
                {
                    mediaRelationship.Modified = DataChangeType.Update;
                    mediaRelationship.SortOrder = i;
                    mediaRelList.Add(mediaRelationship);
                    foundflag = true;
                    break;
                }
            }
            if (!foundflag)
            {
                mediaAssociatedImage.MediaRelationship.Modified = DataChangeType.Add;
                mediaAssociatedImage.MediaRelationship.SortOrder = i;
                mediaRelList.Add(mediaAssociatedImage.MediaRelationship);
            }
        }
        //put those deleted in, so that db can delete them.
        foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
        {
            if (mediaRelationship.Modified == DataChangeType.Delete)
            {
                mediaRelList.Add(mediaRelationship);
            }

        }
        //foreach(MediaRelationship mediaRelationship in mediaRelList)
        MediaRelationship[] tmpMR = mediaRelList.ToArray();
        for (int i = 0; i < tmpMR.Length; i++)
        {
            if (tmpMR[i].Modified == DataChangeType.Update)
            {
                MediaRelationship tmp = new MediaRelationship();
                tmpMR[i].Modified = DataChangeType.Add;
                tmp.Modified = DataChangeType.Delete;
                tmp.MediaRelationshipTypeId = tmpMR[i].MediaRelationshipTypeId;
                tmp.RelatedMediaId = tmpMR[i].RelatedMediaId;
                tmp.RelatedMediaTitle = tmpMR[i].RelatedMediaTitle;
                tmp.SortOrder = tmpMR[i].SortOrder;
                mediaRelList.Add(tmp);
            }
        }
        for (int i = 0; i < gridView.Rows.Count; i++)
        {
            System.Web.UI.WebControls.DropDownList lboxRelation = ((DropDownList)(gridView.Rows[i].FindControl("ddlRelationType")));
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i].MediaRelationship.MediaRelationshipTypeId = int.Parse(lboxRelation.SelectedValue);
        }

       (((MediaAssociated)(Session["mediaAssociated"])).Media).Relationships = mediaRelList.ToArray();

        switch (((MediaAssociated)(Session["mediaAssociated"])).MediaTypeId)
        {
           
            case 2:
            case 3:
            case 4:
            case 7:
            case 11:
            case 30:
                cs.SaveVideo((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Video)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;
            case 13:
                cs.SavePodcast((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Podcast)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;
            case 12:
            case 14:
            case 15:
            case 16:
            case 17:
            case 28:
            case 31:
                cs.SaveImage((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;

            default:
                throw new Exception("Media Type: " + ddlMediaType.SelectedItem.Text + " not supported.");
        }
    }
    protected void btnAddNew_Click(object sender, EventArgs e)
    {
        Session["AddNewImageReturnURL"] = "~/ImageAssociated.aspx";
        Response.Redirect("~/ImageUpload.aspx");
    }
    protected void btnAddExisting_Click(object sender, EventArgs e)
    {
        Session["AddNewImageReturnURL"] = "~/ImageAssociated.aspx";
        Response.Redirect("~/ImageSearch.aspx");
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\ImageUpload.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class Default4 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\SessionTimedOut.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class SessionTimedOutPage : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        Label1.Text = "Your session has timed out after " + Session.Timeout + " minutes.";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// if you want to use a private version file and customize this, see
// file://samsndrop02/CoreXT-Latest/docs/corext/corext/version.htm
//

#if FIXED_ASSEMBLY_VERSION
[assembly: AssemblyVersion("12.4.0.0")]
[assembly: AssemblyFileVersion("12.4.56.0")]
#else
[assembly: AssemblyVersion("12.4.56.0")]
#endif


[assembly: AssemblyCompany("Microsoft Corporation")]
[assembly: AssemblyProduct("Microsoft(R) Xbox(TM)")] 
[assembly: AssemblyCopyright("\xA9 Microsoft Corporation. All rights reserved.")]
[assembly: AssemblyTrademark("Microsoft(R) is a registered trademark of Microsoft Corporation. Xbox(TM) is a trademark of Microsoft Corporation.")]
[assembly: AssemblyDescription("Built by: Administrator")] 

#if ENABLE_CODESIGN

#if ENABLE_PRS_DELAYSIGN
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\private\keys\XBLKey.snk")]
[assembly: AssemblyKeyName("")]
[assembly: AssemblyDelaySign(true)]
#else
#if !CUSTOM_KEYFILE
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\public\internal\strongnamekeys\fake\CoreXTTestKey.snk")]
[assembly: AssemblyKeyName("")]
#endif
[assembly: AssemblyDelaySign(false)]
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\ImageFileHandler.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Configuration;


/// <summary>
/// Helper class used by web componenet to
/// finish physical image file operation.(upload/prop images).
/// </summary>
public class ImageFileHandler
{
#region Private fields
    /// <summary>
    /// the following 6 private fields are used to store settings from 
    /// web.config to define the behavor of ImageFileHandler class.
    /// </summary>
    private static int jpgCompressionLevel = 90;
    private static string limeLightURLPath = string.Empty;
    private static string tempImageFolder = string.Empty;
    private static string sanImageFolder = string.Empty;
    private static string tempStorageURLPrefix = string.Empty;
    private static int aspectRatioWarningPercentage = 3;
    private static string limeLightURLPrefix = string.Empty;

    /// <summary>
    /// The size id to use for the orignal image
    /// AJ: this should not be set-able!
    /// </summary>
    private static int originalImageSizeID;
    private static readonly Int32 customImageSizeId = -1;
    private static readonly Int32 thumbnailImageSizeId = 4;
    private static readonly Int32 podcastImageSizeId = 11;
    
    #endregion
#region Properties
    public static int AspectRatioWarningPercentage
    {
        get { return ImageFileHandler.aspectRatioWarningPercentage; }
        set { ImageFileHandler.aspectRatioWarningPercentage = value; }
    }
    public static Int32 CustomImageSizeId
    {
        get { return customImageSizeId; }
    }

    public static Int32 ThumbnailImageSizeId
    {
        get { return thumbnailImageSizeId; }
    }

    public static Int32 PodcastImageSizeId
    {
        get { return podcastImageSizeId; }
    }

    public static int OriginalImageSizeID
    {
        get { return ImageFileHandler.originalImageSizeID; }
        set { ImageFileHandler.originalImageSizeID = value; }
    }
    public static string TempStorageURLPrefix
    {
        get { return ImageFileHandler.tempStorageURLPrefix; }
        set { ImageFileHandler.tempStorageURLPrefix = value; }
    }
    public static string LimeLightURLPrefix
    {
        get { return ImageFileHandler.limeLightURLPrefix; }
        set { ImageFileHandler.limeLightURLPrefix = value; }
    }



    public static string SanImageFolder
    {
        get
        {
            return sanImageFolder;
        }
        set
        {
            sanImageFolder = value;
        }
    }

    public static string TempImageFolder
    {
        get
        {
            return tempImageFolder;
        }
        set
        {
            tempImageFolder = value;
        }
    }

    public static int JpgCompressionLevel
    {
        get
        {
            return jpgCompressionLevel;
        }
        set
        {
            jpgCompressionLevel = value;
        }
    }
 #endregion    
#region Public Method
    /// <summary>
    /// LimeLightURLPath used to hold image content.
    /// </summary>
    public static string LimeLightURLPath
    {
        get 
        { 
            return ImageFileHandler.limeLightURLPath; 
        }
        set 
        { 
            ImageFileHandler.limeLightURLPath = value; 
        }
    }
    /// <summary>
    /// Default constructor.
    /// </summary>
    public ImageFileHandler()
    {

    }
		
    /// <summary>
    /// Uploads an image to both temporary storage and the SAN
    /// </summary>
    /// <param name="image">The image object to be uploaded</param>
    /// <param name="fileGuid">The GUID of the image if previously uploaded, other Guid.Empty</param>
    public static Guid UploadImage(System.Drawing.Image image, Guid fileGuid)
    {
        // We only handle JPEGs and PNGs
        String fileExtension = ".jpg";

        // Get the byte stream for this image
        MemoryStream ms = new MemoryStream();
        image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
        Byte[] imageBytes = ms.GetBuffer();

        // Upload to temp file storage first. If the guid provided is not Guid.Empty,
        // then it will attempt to overwrite any existing image at that location
        // Otherwise, we get back a new guid
        Guid newGuid = WriteFileToStorage(fileExtension, imageBytes, fileGuid, tempImageFolder);

        // Now push the image out to the SAN folder.
        return WriteFileToStorage(fileExtension, imageBytes, newGuid, sanImageFolder);
    }
    /// <summary>
    /// Helper function to load config from web.config
    /// </summary>
    public static void LoadPropertyFromWebCfgFile()
    {
        try
        {
            ImageFileHandler.TempImageFolder = ConfigurationManager.AppSettings["TempStorageUNCPath"];
            ImageFileHandler.TempStorageURLPrefix = ConfigurationManager.AppSettings["TempStorageURLPrefix"];
            ImageFileHandler.SanImageFolder = ConfigurationManager.AppSettings["SanUNCPath"];
            ImageFileHandler.LimeLightURLPrefix = ConfigurationManager.AppSettings["LimeLightURLPrefix"];
            ImageFileHandler.LimeLightURLPath = ConfigurationManager.AppSettings["LimeLightURLPath"];
            ImageFileHandler.AspectRatioWarningPercentage = int.Parse(ConfigurationManager.AppSettings["AspectRatioWarningPercentage"]);
            ImageFileHandler.JpgCompressionLevel = int.Parse(ConfigurationManager.AppSettings["JpgCompressionLevel"]);
        }
        catch (Exception ex)
        {
            throw new Exception("Failed to load config value.", ex);
        }
    }
    
    /// <summary>
    /// Upload Image file to temp storange and san storage. this function does not prop resized image.
    /// </summary>
    /// <param name="fileInfo">Info the upload file</param>
    /// <param name="file">the binary content of the file</param>
    /// <param name="fileGuid">
    /// Guid of the file. this parameter can be Guid.empty or an existing guid. If it is Guid.empty, 
    /// a new guid will be generated. If fileGuid is a valid non-empty guid, we will try to find the 
    /// existing file and use the file content passed by file paramemter to replace the existing one.
    /// </param>
    /// <returns>the guid for the file uploaded</returns>
    public static Guid UploadImage(FileInfo fileInfo, byte[] file, Guid fileGuid)
    {
        //we get the result, just in case if we pass guid.empty as a input, the return guid will not be the same as 
        //fileGuid, when we put it into san, we need to use the new guid. 
        Guid guid = WriteFileToStorage(fileInfo.Extension, file, fileGuid, tempImageFolder);
        return WriteFileToStorage(fileInfo.Extension, file, guid, sanImageFolder);
    }
    /// <summary>
    /// Check aspect ration change is larger than certain percentage or not. 
    /// if it is return return false. otherwise return true.
    /// </summary>
    /// <param name="sourceWidth">Width of the source image</param>
    /// <param name="sourceHeight">Height of the source image</param>
    /// <param name="destWidth">Width of the resized image</param>
    /// <param name="destHeight">Height of the resized image</param>
    /// <param name="threadholdPercentage">Threadhold of the aspect ration change.</param>
    /// <returns>If the change is equal or larger than threadholdPercentage, return false;
    /// otherwise true.</returns>
    public static bool CheckAspectRatio(int sourceWidth, int sourceHeight, int destWidth, int destHeight, int threadholdPercentage)
    {
        if (sourceHeight <= 0 || sourceWidth <= 0 || destHeight <= 0 || destWidth <= 0 || threadholdPercentage < 0 || threadholdPercentage > 100)
            return false;
        float soruceImageAspectRatio = (float)sourceWidth / (float)sourceHeight;
        float destImageAspectRatio = (float)destWidth / (float)destHeight;
        return System.Math.Abs(
            (soruceImageAspectRatio - destImageAspectRatio) / soruceImageAspectRatio
        ) < ((float)threadholdPercentage / 100.0);
    }
    /// <summary>
    /// return properties of the image by out parameters.
    /// </summary>
    /// <param name="ImageInstanceID">ID of the image</param>
    /// <param name="width">out parameter to return width of the image</param>
    /// <param name="height">out parameter to return height of the image</param>
    /// <param name="fileSize">out parameter to return file size of the image</param>
    /// <param name="fileExtension">out parameter to return file extension of the image</param>
    public static void GetImageFileProperty(Guid ImageInstanceID, out int width, out int height, out int fileSize, out string fileExtension)
    {
        string ImageInstanceFileName = string.Empty;
        string originalSizeImageFolderPath = sanImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + ImageInstanceID.ToString().Substring(ImageInstanceID.ToString().Length-2, 2) + @"\";
        try
        {
            ImageInstanceFileName = Directory.GetFiles(originalSizeImageFolderPath, "*" + ImageInstanceID.ToString() + "*")[0];
        }
        catch (Exception ex)
        {
            throw new IOException("Original file with ID: " + ImageInstanceID.ToString() + " does not exist.", ex);
        }
        FileInfo fileInfo = new FileInfo(ImageInstanceFileName);
        System.Drawing.Image originalImage = System.Drawing.Image.FromFile(ImageInstanceFileName);
        fileExtension = fileInfo.Extension;
        fileSize = (int)fileInfo.Length;
        width = originalImage.Width;
        height = originalImage.Height;
        originalImage.Dispose();
    }
    /// <summary>
    /// Prop images to lime light network
    /// </summary>
    /// <param name="image">image object to be proped</param>
    /// <param name="sizeTable">Hashtable,the key is the guid of the image instance, and the element 
    /// is ImageSize object which contains the size ID and the width& height the image to be resized to </param>
    /// <param name="originalSizeImageInstanceID">The image instance that contains the original image to be used
    /// as a source for resizing operation</param>
    public static void PropImage(Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image, Hashtable sizeTable, Guid originalSizeImageInstanceID)
    {
        string originalSizeImageFolderPath = tempImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + originalSizeImageInstanceID.ToString().Substring(originalSizeImageInstanceID.ToString().Length - 2, 2) + @"\";
        string OriginalImageFileName;
        System.Drawing.Image originalImage;
        System.Drawing.Image destImage;
        string originalImageFileExtension;
        string destImageFileFullPath;
        MemoryStream destFileStream;

        try
        {
            OriginalImageFileName = Directory.GetFiles(originalSizeImageFolderPath, "*" + originalSizeImageInstanceID.ToString() + "*")[0];
        }
        catch
        {
            throw new IOException("Original file with ID: " + originalSizeImageInstanceID.ToString() + " does not exist.");
        }
        originalImageFileExtension = new FileInfo(OriginalImageFileName).Extension;
        originalImage = System.Drawing.Image.FromFile(OriginalImageFileName);
        try
        {

            foreach (Guid imInstID in sizeTable.Keys)
            {
                bool foundmatch = false;
                ImageInstance currentImInst = null;
                foreach (ImageInstance imInst in image.Instances)
                {
                    if (imInst.Id == imInstID)
                    {
                        currentImInst = imInst;
                        foundmatch = true;
                        break;
                    }
                }

                if (!foundmatch)
                    throw new ArgumentException("Key: " + imInstID.ToString() + " in size table not in image instances of the image");
                destImageFileFullPath = tempImageFolder + @"\" + imInstID.ToString().Substring(imInstID.ToString().Length - 2, 2) + @"\" + imInstID + originalImageFileExtension;

                if (originalImage.Width == ((ImageSize)(sizeTable[imInstID])).Width && originalImage.Height == ((ImageSize)(sizeTable[imInstID])).Height)
                {
                    destFileStream = new MemoryStream(File.ReadAllBytes(OriginalImageFileName));
                }
                else
                {
                    if (originalImage.PixelFormat == PixelFormat.Indexed
                        || originalImage.PixelFormat == PixelFormat.Format8bppIndexed
                        || originalImage.PixelFormat == PixelFormat.Format4bppIndexed
                        || originalImage.PixelFormat == PixelFormat.Format1bppIndexed
                        )
                    {
                        destImage = new Bitmap(((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height, PixelFormat.Format24bppRgb);

                    }
                    else
                    {
                        destImage = new Bitmap(((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height, originalImage.PixelFormat);
                    }
                    Graphics graphic = Graphics.FromImage(destImage);
                    graphic.CompositingQuality = CompositingQuality.HighQuality;
                    graphic.SmoothingMode = SmoothingMode.HighQuality;
                    graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    graphic.DrawImage(originalImage,
                        new Rectangle(0, 0, ((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height)
                        );
                    try
                    {
                        destFileStream = new MemoryStream();
                        if (originalImageFileExtension.ToLower().EndsWith("jpg") || originalImageFileExtension.ToLower().EndsWith("jpeg"))
                        {
                            System.Drawing.Imaging.Encoder qualityEncoder = System.Drawing.Imaging.Encoder.Quality;
                            EncoderParameter ratio = new EncoderParameter(qualityEncoder, jpgCompressionLevel);
                            // Add the quality parameter to the list
                            EncoderParameters codecParams = new EncoderParameters(1);
                            codecParams.Param[0] = ratio;
                            ImageCodecInfo codecInfo = GetEncoderInfo("image/jpeg");
                            destImage.Save(destFileStream, codecInfo, codecParams);
                        }
                        else if (originalImageFileExtension.ToLower().EndsWith("png"))
                        {

                            destImage.Save(destFileStream, System.Drawing.Imaging.ImageFormat.Png);
                        }
                        else
                        {
                            throw new ArgumentException("The original Image's format: " + originalImageFileExtension + " is not supported.");
                        }
                    }
                    catch (IOException ex)
                    {
                        throw new IOException("IO error while writing image with ID: " + originalSizeImageInstanceID.ToString() + ".", ex);
                    }

                }
                currentImInst.FileSize = (int)destFileStream.Length;
                //TODO: need to modify it after confirm with PM.
                currentImInst.FileUrl = GenerateLiveURL(imInstID, originalImageFileExtension);
                //to tmp folder
                WriteFileToStorage(originalImageFileExtension, destFileStream.ToArray(), imInstID, tempImageFolder);
                //to san folder
                WriteFileToStorage(originalImageFileExtension, destFileStream.ToArray(), imInstID, sanImageFolder);
                destFileStream.Close();
            }
        }
        catch (Exception)
        {
            if (originalImage != null)
                originalImage.Dispose();
            throw;
        }
        originalImage.Dispose();
    }
	#endregion 
#region Private Methods
    private static Guid WriteFileToStorage(string fileExtension, byte[] fileArray, Guid fileGuid, string destImageFolder)
    {
        if (!(fileExtension.ToLower().EndsWith("jpg") ||
            fileExtension.ToLower().EndsWith("jpeg") ||
            fileExtension.ToLower().EndsWith("png")
            ))
            throw new ArgumentException("Picture file must be in jpg/jpeg or png format.");
        Guid newFileGuid = fileGuid == null || fileGuid == Guid.Empty ? Guid.NewGuid() : fileGuid;
        
        try
        {
            if (!Directory.Exists(destImageFolder + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray())))
                Directory.CreateDirectory(destImageFolder + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()));
            string TargetFolderPath = destImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + newFileGuid.ToString().Substring(newFileGuid.ToString().Length - 2, 2) + @"\";
            string TargetFilePath = TargetFolderPath + newFileGuid.ToString() + fileExtension;
            if (!Directory.Exists(TargetFolderPath))
                Directory.CreateDirectory(TargetFolderPath);
            if (File.Exists(TargetFilePath))
            {
                if (!(new FileInfo(TargetFilePath).Length == fileArray.Length) && fileGuid == newFileGuid)
                {
                    File.Delete(TargetFilePath);
                    FileStream fs = new FileStream(TargetFilePath, FileMode.CreateNew);
                    // Create the writer for data.
                    BinaryWriter w = new BinaryWriter(fs);
                    // Write data to Test.data.
                    w.Write(fileArray);
                    w.Close();
                    fs.Close();
                    fs = null;
                    w = null;
                    //File.WriteAllBytes(TargetFilePath, fileArray);
                }
            }
            else
            {
                FileStream fs = new FileStream(TargetFilePath, FileMode.CreateNew);
                // Create the writer for data.
                BinaryWriter w = new BinaryWriter(fs);
                // Write data to Test.data.
                w.Write(fileArray);
                w.Close();
                fs.Close();
                fs = null;
                w = null;
                // File.WriteAllBytes(TargetFilePath, fileArray);
            }
        }
        catch (IOException ex)
        {
            throw new IOException("Error occured during write image file " + newFileGuid.ToString() + ".", ex);
        }
        return newFileGuid;
    }
    //TODO: modify it after getting the method to generate live url.
    private static string GenerateLiveURL(Guid imInstID, string originalImageFileExtension)
    {
        return ImageFileHandler.LimeLightURLPrefix.TrimEnd("/".ToCharArray()) + "/" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + "/" + imInstID.ToString().Substring(imInstID.ToString().Length - 2, 2) + "/" + imInstID.ToString() + originalImageFileExtension;
    }
    private static ImageCodecInfo GetEncoderInfo(String mimeType)
    {
        int j;
        ImageCodecInfo[] encoders;
        encoders = ImageCodecInfo.GetImageEncoders();
        for (j = 0; j < encoders.Length; j++)
        {
            if (encoders[j].MimeType == mimeType)
                return encoders[j];
        } return null;
    } 
#endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\MediaRelationshipHandler.cs ===
using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using Microsoft.Ems.Apps.Web.Editorial;


/// <summary>
/// This class shares common codes used for handling MediaRelationship selection on
/// on Video Tools' Image and Related media tab.
/// </summary>
public class MediaRelationshipHandler
{
    /// <summary>
    /// Encoded the specified MediaRelationship key information in the dropdown list 
    /// </summary>
    /// <param name="ddl"></param>
    /// <param name="mr"></param>
    public static void BindRelationship(MediaRelationship mr, DropDownList ddl)
    {
        if (mr != null && ddl != null)
        {
            //Append relatedMediaId to each dropdown list value
            foreach (ListItem item in ddl.Items)
            {
                item.Value = string.Format("{0},{1}", item.Value, mr.RelatedMediaId);
            }

            //Remember current selection 
            int index = ddl.Items[0].Value.LastIndexOf(',');
            ddl.Items[0].Value = string.Format("{0},{1}", ddl.Items[0].Value, mr.MediaRelationshipTypeId);

            //Mark current selection
            ddl.SelectedValue = string.Format("{0},{1}", mr.MediaRelationshipTypeId, mr.RelatedMediaId);
        }
    }

    /// <summary>
    /// Update in-Session media.Relationships object with the relationship specified in the current
    /// dropdownlist.
    /// </summary>
    /// <param name="media"></param>
    /// <param name="ddl"></param>
    /// <returns></returns>
    public static void SelectRelationship(Media media, DropDownList ddl)
    {
        if (media != null && media.Relationships != null)
        {
            //Get previous selected value which encoded in ddl.Item[0]'s value
            int index = ddl.Items[0].Value.LastIndexOf(',');
            int oldRelationshipTypeId = Int32.Parse(ddl.Items[0].Value.Substring(index + 1));

            //Get current selection key
            string[] keys = ddl.SelectedValue.Split(',');
            int newRelationshipTypeId = Int32.Parse(keys[0]);
            Guid mediaId = new Guid(keys[1]);

            //Check for currently selected relatedMediaId/mediaRelationshipId pair already exists
            MediaRelationship mediaRelationship = Array.Find(media.Relationships,
                                    delegate(MediaRelationship mr)
                                    {
                                        return (mr.RelatedMediaId.Equals(mediaId) &&
                                                mr.MediaRelationshipTypeId == newRelationshipTypeId &&
                                                mr.Modified != DataChangeType.Delete);
                                    });
            if (mediaRelationship != null)
            {
                MessageBox.Show(string.Format("{0}/{1} pair value already exists; selection not allow.", mediaId, newRelationshipTypeId));

                //Undo selection
                ddl.SelectedValue = string.Format("{0},{1}", mediaRelationship.MediaRelationshipTypeId, mediaRelationship.RelatedMediaId);
                return;
            }

            //Find the mediaRelationship object being changed.
            mediaRelationship = Array.Find(media.Relationships,
                                    delegate(MediaRelationship mr)
                                    {
                                        return (mr.RelatedMediaId.Equals(mediaId) &&
                                                mr.MediaRelationshipTypeId == oldRelationshipTypeId);
                                    });
            if (mediaRelationship.Modified == DataChangeType.None)
            {
                //Need to mark the original record for deletion by cloning then set the Modified flag.
                MediaRelationship mrDelete = new MediaRelationship();
                mrDelete.RelatedMediaId = mediaRelationship.RelatedMediaId;
                mrDelete.MediaRelationshipTypeId = mediaRelationship.MediaRelationshipTypeId;
                mrDelete.Modified = DataChangeType.Delete;
                
                media.Relationships = DisplayHelper.ArrayItemAdd(media.Relationships, mrDelete);
            }

            //Update the mediaRelationship object being selected
            mediaRelationship.MediaRelationshipTypeId = Int32.Parse(keys[0]);
            mediaRelationship.Modified = DataChangeType.Update;

            //Remember the newly selected value
            ddl.Items[0].Value = string.Format("{0},{1}", 
                            ddl.Items[0].Value.Substring(0, index), 
                            mediaRelationship.MediaRelationshipTypeId);
        }
    }

    /// <summary>
    /// Delete the specified mediaId/mediaRelationshipTypeId pair from media.Relationships
    /// </summary>
    /// <param name="media"></param>
    /// <param name="mediaId"></param>
    /// <param name="mediaRelationshipTypeId"></param>
    public static void DeleteRelationship(Media media, Guid mediaId, int mediaRelationshipTypeId)
    {
        if (media != null && media.Relationships != null)
        {
            MediaRelationship mediaRelationship = Array.Find(media.Relationships,
                            delegate(MediaRelationship mr)
                            {
                                return (mr.RelatedMediaId.Equals(mediaId) &&
                                        mr.MediaRelationshipTypeId == mediaRelationshipTypeId &&
                                        mr.Modified != DataChangeType.Delete);
                            });
            if (mediaRelationship != null)
                mediaRelationship.Modified = DataChangeType.Delete;
        }
    }

    /// <summary>
    /// Checks whether there is any duplicate mediaId/mediaRelationshipTypeId pair in the list.
    /// </summary>
    /// <param name="media">Media.Relationships object to be check</param>
    /// <param name="imageRelated">Check for image related only or general</param>
    /// <returns></returns>
    public static bool CheckDuplicateRelationship(Media media, bool imageRelated)
    {
        if (media == null)
            return false;
        if (media.Relationships == null)
            return false;

        Dictionary<string, string> dict = new Dictionary<string, string>();
        foreach (MediaRelationship mr in media.Relationships)
        {
            //Not check for to-be-deleted record
            if (mr.Modified == DataChangeType.Delete)
                continue;

            //Not check for unintented type
            if (DisplayHelper.IsMediaRelationImageType(mr) != imageRelated)
                continue;

            string key = string.Format("{0},{1}", mr.RelatedMediaId, mr.MediaRelationshipTypeId);
            if (dict.ContainsKey(key))
                return true;
            else
                dict.Add(key, key);
        }
        return false;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\ClientMediaContributor.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

/// <summary>
/// Summary description for ClientMediaContributor
/// </summary>
public class ClientMediaContributor : MediaContributor
{
    //private string _name;
    public ClientMediaContributor()
    {

    }

    public ClientMediaContributor(MediaContributor mc)
    {
        base.Character = mc.Character;
        base.ContributorAliasId = mc.ContributorAliasId;
        base.ContributorId = mc.ContributorId;
        base.IsPrimary = mc.IsPrimary;
        base.Modified = mc.Modified;
        base.RoleId = mc.RoleId;
        base.SortOrder = mc.SortOrder;
    }

    //public string Name
    //{
        //get
        //{
            //return _name;
        //}
        //set
        //{
            //_name = value;
        //}
    //}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\Constants.cs ===
using System;
using System.Data;
using System.Diagnostics;
using System.Configuration;
using System.Security.Cryptography.X509Certificates;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Data.SqlTypes;
using System.Net;

/// <summary>
/// Summary description for Constants
/// </summary>
public class Constants
{
    public static readonly Int32 ProviderIdForEditorial = 2;
    public static readonly Int32 ProviderIdForMicrosoft = 6;

    public static readonly Int32 MediaTypeIdForPodcast = 13;

    public static readonly Int32 MediaRelationshipTypeIdMediaToImage = 15;

    public static readonly Int32 CategorySystemIdPodcast = 5000;

    public static readonly DateTime WithdrawnPodcastDate = new DateTime(2999, 1, 1);

    public static readonly String SessionVariable_PodcastContext = "podcast_context";
    public static readonly String SessionVariable_PodcastSubmissionsInstance = "podcast_submissions_instance";
    public static readonly String SessionVariable_PodcastSearchSet = "podcast_submissions_set";
    public static readonly String SessionVariable_PodcastEpisodesSet = "podcast_episodes_set";
    public static readonly String SessionVariable_PodcastSearchSetTimestamp = "podcast_submissions_set_time_stamp";
    public static readonly String SessionVariable_PodcastSearchPageIndex = "podcast_search_page_number";
    public static readonly String SessionVariable_PodcastSubmissionsPageIndex = "podcast_submissions_page_number";
    public static readonly String SessionVariable_PodcastEpisodesPageIndex = "podcast_episode_page_number";
    public static readonly String SessionVariable_PodcastEasyBacktrack = "podcast_easy_backtrack";
    public static readonly String SessionVariable_MediaAssociatedImageMedia = "MediaAssociatedImageMedia";


    public static readonly Int32 JpgImageFormatId = 4;
    public static readonly Int32 PngImageFormatId = 5;
    /// <summary>
    /// Represents the Max date which can be stored in SQL db, this is presently set to SQLDatetime.MaxValue
    /// </summary>
    public static readonly DateTime CatalogMaxDate = SqlDateTime.MaxValue.Value;
    /// <summary>
    /// Represents the Min date which can be stored in SQL db, this is presently set to SQLDatetime.MinValue
    /// </summary>
    public static readonly DateTime CatalogMinDate = SqlDateTime.MinValue.Value;

    public enum MediaRelationshipTypeId
    {
        MediaToAssociatedDownload=2,
        VideoTrailerToGame=4,
        SeriesToEpisode=7,
        SeasonToEpisode=8,
        VirtualChannelToVideo=9,
        RelatedAlbum=18,
        PromoToMedia=20,
        MediaToPreview=21,
        RelatedPlaylist=28,
        MusicVideoTrack=30
    }

    public enum MediaTypeId
    {
        None = 0,
        TVEpisode = 8,
        TVSeason = 9,
        TVSeries = 10
    }

    //private static readonly String EMSEditorialEventSource = "EMS Editorial";

	public Constants()
	{
        /**
         * TODO ajaffray to fix in sprint 5
        try
        {
            if (!EventLog.Exists(EMSEditorialEventSource))
            {
                EventLog.CreateEventSource(EMSEditorialEventSource, "EMS");
            }
        }
        catch (Exception)
        {
        }
         * **/
	}

    private static CatalogServices _proxy = null;
    private static Object _proxyLockObject = new Object();
    public static CatalogServices Proxy
    {
        get
        {
            if (_proxy == null)
            {
                lock(_proxyLockObject)
                {
                    if (_proxy == null)
                    {
                        _proxy = new CatalogServices();
                        _proxy.Url = ConfigurationManager.AppSettings["CatalogWebServiceUrl"];
                        _proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
                        string webproxy = string.Empty;
                        try
                        {
                            webproxy = ConfigurationManager.AppSettings["webproxy"];
                            if (string.IsNullOrEmpty(webproxy))
                            {
                                _proxy.Proxy = new WebProxy();
                            }
                            else
                            {
                                _proxy.Proxy = new WebProxy(webproxy, true);
                            }
                        }
                        catch (Exception ex)
                        {
                            _proxy = null; // Null out proxy value so it will reload next time
                            throw new ArgumentException("Could not set proxy value from configuration, value used was invalid: " + webproxy, ex);
                        }

                        String certNameToFind = ConfigurationManager.AppSettings["CatalogWebServiceCertName"];
                        X509Store store = new X509Store("My", StoreLocation.LocalMachine);
                        try
                        {
                            store.Open(OpenFlags.ReadOnly);
                            X509Certificate2Collection certs = store.Certificates;
                            foreach (X509Certificate2 cert in certs)
                            {
                                String[] subjectAttributes = cert.Subject.Split(',');
                                String name = null;
                                foreach (String subjectAttribute in subjectAttributes)
                                {
                                    if (subjectAttribute.Trim().StartsWith("CN="))
                                    {
                                        name = subjectAttribute.Trim().Substring(3);
                                        if (name == certNameToFind)
                                        {
                                            _proxy.ClientCertificates.Add(cert);
                                        }
                                    }
                                }
                            }
                        }
                        finally
                        {
                            store.Close();
                        }
                        CatalogServices.Catalog = _proxy;
                    }
                }
            }
            return _proxy;
        }
    }

    public static TimeSpan PodcastDownloadTimeout
    {
        get
        {
            try
            {
                return TimeSpan.Parse(ConfigurationManager.AppSettings["PodcastDownloadTimeout"]);
            }
            catch (Exception)
            {
                return new TimeSpan(0, 0, 15);
            }
        }
    }

    public static String PodcastDownloadProxy
    {
        get
        {
            String podcastDownloadProxyServer = null;
            try
            {

                podcastDownloadProxyServer = ConfigurationManager.AppSettings["PodcastDownloadProxy"];
            }
            catch (Exception)
            {
            }

            if (podcastDownloadProxyServer == String.Empty)
            {
                podcastDownloadProxyServer = null;
            }
            return podcastDownloadProxyServer;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\DisplayHelper.cs ===
using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Text;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    /// <summary>
    /// This class contains helper functions for UI control display.
    /// </summary>
    public class DisplayHelper
    {
        /// <summary>
        /// Added the given item to the specified ListBox in sorted order by value.
        /// </summary>
        /// <param name="item">The list item to be added</param>
        /// <param name="listBox">The listBox those item to be added to</param>
        public static void ListBoxSortedAdd(ListItem item, ListBox listBox)
        {
            if (item == null || listBox == null)
                return;

            int index = 0;
            for (int i = 0; i < listBox.Items.Count; i++)
            {
                if (listBox.Items[i].Value.CompareTo(item.Value) < 0)
                    index++;
                else
                    break;
            }
            listBox.Items.Insert(index, item);
        }

        /// <summary>
        /// Added the given item to the specified ListBox in sorted order by value. Will
        /// attempt to caste the value as an integer, if that does not work it will compare
        /// the string versions
        /// </summary>
        /// <param name="item">The list item to be added</param>
        /// <param name="listBox">The listBox those item to be added to</param>
        public static void ListBoxSortedAddValueAsInt(ListItem item, ListBox listBox)
        {
            if (item == null || listBox == null)
                return;

            int index = 0;
            for (int i = 0; i < listBox.Items.Count; i++)
            {
                int integer1 = 0;
                int integer2 = 0;
                if (int.TryParse(listBox.Items[i].Value, out integer1)
                && int.TryParse(item.Value, out integer2))
                {
                    if (integer1 < integer2)
                        index++;
                    else
                        break;
                }
                else
                {
                    if (listBox.Items[i].Value.CompareTo(item.Value) < 0)
                        index++;
                    else
                        break;
                }
            }
            listBox.Items.Insert(index, item);
        }

        /// <summary>
        /// Remove all items from the list box.
        /// </summary>
        /// <param name="listBox">ListBox to clear</param>
        public static void ResetListBox(ListBox listBox)
        {
            listBox.Items.Clear();
        }

        /// <summary>
        /// Reset each item from right to left list box.
        /// </summary>
        /// <param name="leftListBox">The left ListBox</param>
        /// <param name="rightListBox">The right ListBox</param>
        public static void ResetListBox(ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in rightListBox.Items)
            {
                ListBoxSortedAdd(item, leftListBox);
            }
            rightListBox.Items.Clear();
        }

        /// <summary>
        /// Return the list of values from the list box.
        /// </summary>
        /// <param name="listBox"></param>
        /// <returns></returns>
        public static List<String> GetListBoxItem(ListBox listBox)
        {
            if (listBox.Items.Count == 0)
                return null;

            List<string> result = new List<String>();
            foreach (ListItem item in listBox.Items)
            {
                result.Add(item.Value);
            }
            return result;
        }

        /// <summary>
        /// Move list item from one list box to another.
        /// </summary>
        /// <param name="fromListBox">The source ListBox</param>
        /// <param name="toListBox">The destination ListBox</param>
        public static void MoveListBoxItem(ListBox fromListBox, ListBox toListBox)
        {
            ListItem item = fromListBox.SelectedItem;
            if (item != null)
            {
                item.Selected = false;
                fromListBox.Items.Remove(item);
                if (!toListBox.Items.Contains(item))
                {
                    ListBoxSortedAddValueAsInt(item, toListBox);
                }
            }
        }

        /// <summary>
        /// Select the target item from the left ListBox and move it to the right ListBox.
        /// </summary>
        /// <param name="target"></param>
        /// <param name="listBoxLeft"></param>
        /// <param name="listBoxRight"></param>
        public static void SelectListBoxItem(int target, ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in leftListBox.Items)
            {
                if (item.Value == target.ToString())
                {
                    ListBoxSortedAdd(item, rightListBox);
                    leftListBox.Items.Remove(item);
                    return;
                }
            }
        }

        /// <summary>
        /// Select the target item from the left ListBox and move it to the right ListBox.
        /// </summary>
        /// <param name="target"></param>
        /// <param name="listBoxLeft"></param>
        /// <param name="listBoxRight"></param>
        public static void SelectListBoxItem(string target, ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in leftListBox.Items)
            {
                if (item.Value == target)
                {
                    ListBoxSortedAdd(item, rightListBox);
                    leftListBox.Items.Remove(item);
                    return;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(int target, DropDownList list)
        {
            list.ClearSelection();
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(int? target, DropDownList list)
        {
            list.ClearSelection();
            if (target == null)
            {
                list.SelectedIndex = 0;
                return;
            }

            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(string target, DropDownList list)
        {
            list.ClearSelection();
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target)
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Determine whether the specified target value is selected in the list box
        /// </summary>
        /// <param name="target">Target value to be check</param>
        /// <param name="list">ListBox to be check against</param>
        /// <returns></returns>
        public static bool IsItemSelected(int target, ListBox list)
        {
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    return true;
                }
            }
            return false;
        }


        /// <summary>
        /// Determine whether the specified target value is selected in the list box
        /// </summary>
        /// <param name="target">Target value to be check</param>
        /// <param name="list">ListBox to be check against</param>
        /// <returns></returns>
        public static bool IsItemSelected(string target, ListBox list)
        {
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Return the passed datetime value in text format: mm/dd/yyyy
        /// </summary>
        /// <param name="dateTime">DateTime value to be formatted</param>
        /// <returns></returns>
        public static string GetDateDisplay(DateTime dateTime)
        {
            string result = "";
            if (dateTime != null && dateTime != DateTime.MinValue)
            {
                result = String.Format("{0:D2}/{1:D2}/{2:D4}", dateTime.Month, dateTime.Day, dateTime.Year);
            }
            return result;
        }

        /// <summary>
        /// Return the passed datetime value in text format: mm/dd/yyyy
        /// </summary>
        /// <param name="dateTime">DateTime value to be formatted</param>
        /// <returns></returns>
        public static string GetDateDisplay(DateTime? dateTime)
        {
            string result = "";
            if (dateTime.HasValue && dateTime != DateTime.MinValue)
            {
                result = String.Format("{0:D2}/{1:D2}/{2:D4}", dateTime.Value.Month, dateTime.Value.Day, dateTime.Value.Year);
            }
            return result;
        }

        /// <summary>
        /// Validate whether the specified date string represents a valid date.
        /// </summary>
        /// <param name="dateTime">DateTime value to be checked</param>
        /// <returns></returns>
        public static bool IsValidDate(string dateTime)
        {
            DateTime dt;
            return DateTime.TryParse(dateTime, out dt);
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        /// /// <param name="paramName"></param>
        public static bool ValidateDate(DateTime dateTime)
        {
            if (dateTime > Constants.CatalogMaxDate)
            {
                return false;
            }
            if (dateTime < Constants.CatalogMinDate)
            {
                return false;
            }
            return true;
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="paramName"></param>
        public static bool ValidateDate(DateTime? dateTime)
        {
            if (dateTime.HasValue)
            {
                if (dateTime.Value > Constants.CatalogMaxDate)
                {
                    return false;
                }
                if (dateTime.Value < Constants.CatalogMinDate)
                {
                    return false;
                }
            }
            return true;
        }
        /// <summary>
        /// Validate whether the specified date strings in range.
        /// </summary>
        /// <param name="begDateTime"></param>
        /// <param name="endDateTime"></param>
        /// <returns></returns>
        public static bool IsValidDateRange(string begDateTime, string endDateTime)
        {
            if (IsValidDate(begDateTime) == false)
                return false;
            if (IsValidDate(endDateTime) == false)
                return false;

            DateTime dt1, dt2;
            dt1 = DateTime.Parse(begDateTime);
            dt2 = DateTime.Parse(endDateTime);
            if (dt1 > dt2)
                return false;

            return true;
        }

        /// <summary>
        /// Return the passed text string as datetime value
        /// </summary>
        /// <param name="dateTime">Datetime string</param>
        /// <param name="defaultHour">default hour to use</param>
        /// <param name="defaultMinue">default minute to use</param>
        /// <returns></returns>
        public static DateTime GetDateValue(string dateTime, int defaultHour, int defaultMinute)
        {
            DateTime result = DateTime.MinValue;
            if (dateTime != null && dateTime.Trim().Length > 0)
            {
                if (DateTime.TryParse(dateTime, out result) == true)
                    result = new DateTime(result.Year, result.Month, result.Day, defaultHour, defaultMinute, 0, DateTimeKind.Utc);
            }
            return result;
        }

        public static T[] ArrayItemAdd<T>(T[] arrItems, T item)
        {
            int count = (arrItems == null) ? 1 : arrItems.Length + 1;
            T[] newArray = new T[count];

            if (arrItems != null)
                Array.Copy(arrItems, newArray, arrItems.Length);

            newArray[count-1] = item;
            return newArray;
        }

        public static T[] ArrayItemRemove<T>(T[] array, T item)
        {
            T[] newArray = null;

            if (array.Length > 1)
            {
                int itemRemoving = Array.FindIndex(array, delegate(T t) { return item.Equals(t) ;});

                if (itemRemoving != -1)
                {
                    newArray = new T[array.Length - 1];
                    Array.Copy(array, newArray, itemRemoving);
                    Array.Copy(array, itemRemoving + 1, newArray, itemRemoving, array.Length - itemRemoving - 1);
                }
            }

            return newArray;
        }

        public static bool IsRelatedToVideo(MediaRelationship mrs)
        {
            int type = mrs.MediaRelationshipTypeId;
            if ((type == (int)Constants.MediaRelationshipTypeId.MediaToAssociatedDownload
                || type == (int)Constants.MediaRelationshipTypeId.MediaToPreview
                || type == (int)Constants.MediaRelationshipTypeId.MusicVideoTrack
                || type == (int)Constants.MediaRelationshipTypeId.PromoToMedia
                || type == (int)Constants.MediaRelationshipTypeId.RelatedAlbum
                || type == (int)Constants.MediaRelationshipTypeId.RelatedPlaylist
                || type == (int)Constants.MediaRelationshipTypeId.SeasonToEpisode
                || type == (int)Constants.MediaRelationshipTypeId.SeriesToEpisode
                || type == (int)Constants.MediaRelationshipTypeId.VideoTrailerToGame
                || type == (int)Constants.MediaRelationshipTypeId.VirtualChannelToVideo)
                && mrs.Modified != DataChangeType.Delete)
            {
                return true;
            }            

            return false;
        }

        public static bool IsMediaRelationImageType(MediaRelationship mr)
        {
            return ((mr.MediaRelationshipTypeId == 15) ||
                    (mr.MediaRelationshipTypeId == 19) ||
                    (mr.MediaRelationshipTypeId == 22) ||
                    (mr.MediaRelationshipTypeId == 23) ||
                    (mr.MediaRelationshipTypeId == 24) ||
                    (mr.MediaRelationshipTypeId == 25) ||
                    (mr.MediaRelationshipTypeId == 26) ||
                    (mr.MediaRelationshipTypeId == 27))
                    ;
        }


        public static bool IsMediaRelationOtherType(MediaRelationship mr)
        {
            return ((mr.MediaRelationshipTypeId == 2) ||
                    (mr.MediaRelationshipTypeId == 7) ||
                    (mr.MediaRelationshipTypeId == 18) ||
                    (mr.MediaRelationshipTypeId == 20) ||
                    (mr.MediaRelationshipTypeId == 21) ||
                    (mr.MediaRelationshipTypeId == 28) ||
                    (mr.MediaRelationshipTypeId == 30))
                    ;
        }

        /// <summary>
        /// This function determines whether the URL contains the specified name
        /// </summary>
        /// <param name="context"></param>
        /// <param name="pageName"></param>
        /// <returns></returns>
        public static bool IsUrlContain(HttpContext context, string pageName)
        {
            if (context != null)
            {
                string url = context.Request.RawUrl.ToLowerInvariant();
                return (url.IndexOf(pageName.ToLower()) >= 0);
            }
            else
                return false;
        }

        public static string BuildRepresentStringForVideoInstance(VideoInstance vi, Locale[] locales )
        {
            StringBuilder text = new StringBuilder(350);
            int definitionId = vi.VideoDefinitionId;

            VideoDefinition[] definitions = Constants.Proxy.GetVideoDefinition();
            VideoDefinition vd = Array.Find(definitions, delegate(VideoDefinition vdd) { return vdd.Id == definitionId; });

            if (vd != null)
            {
                text.Append(vd.Name);
                text.Append("; ");
            }
            else
            {
                text.Append(" , ");
            }

            text.Append(vi.AudioChannel);
            text.Append(" Ch. Audio, ");

            VideoAudioTrackLanguage[] audioTrackLanguages = vi.AudioTrackLanguages;
            if ((audioTrackLanguages != null) && (audioTrackLanguages.Length > 0))
            {
                int lcid = audioTrackLanguages[0].Lcid;
                Locale locale = Array.Find(locales, delegate(Locale l) { return l.LCID == lcid; });
                text.Append(locale.LocaleCode);
            }

            text.Append("; Subtitle: ");

            int? burntInSubtitleLcid = vi.BurntInSubtitleLcid;

            if (burntInSubtitleLcid != null)
            {
                Locale burntLocale = Array.Find(locales, delegate(Locale l) { return l.LCID == burntInSubtitleLcid; });

                if (burntLocale != null)
                {
                    text.Append(burntLocale.LocaleCode);
                }
                else
                {
                    text.Append("None");
                }
            }
            else
            {
                text.Append("None");
            }

            text.Append("; Preview: ");

            bool isPreview = vi.IsPreview;

            if (isPreview)
            {
                Country country = Constants.Proxy.GetCountry(vi.Preview.CountryCode);
                if (country != null)
                {
                    if (!string.IsNullOrEmpty(country.Name))
                    {
                        text.Append(country.Name);
                    }
                }
            }
            else
            {
                text.Append("No");
            }

            return text.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\Operation.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

/// <summary>
/// Summary description for Operation
/// </summary>
public class Operation
{
	private Operation()
	{
	}
}

public enum Operation_Mode
{
    Add,
    Edit,
    Delete,
    Import,
    Undefined
}

public enum Master_Menu_Item
{
    Master_Menu_Video,
    Master_Menu_VideoSeries,
    Master_Menu_VideoSeason
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\XmlImportExportHelper.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.IO;
using System.Xml;
using System.Xml.Schema;

/// <summary>
/// Summary description for XmlImportExportHelper
/// </summary>
public static class XmlImportExportHelper
{
    /// <summary>
    /// Validate xml and de-serialize it to an media object.
    /// </summary>
    /// <param name="v1"> media object, it can be a Video, VideoSeason or VideoSeries</param>
    /// <param name="xsdPath">relative path that stores schema file</param>
    /// <param name="s">strea that provides xml</param>
    /// <returns></returns>
    public static Media ValidateAndReadMediaImportXml(Media v1, string xsdPath, Stream s)
    {
        s.Position = 0;
        System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(v1.GetType());
        XmlReaderSettings readerSettings = new XmlReaderSettings();
        XmlSchemaSet schemaSet = new XmlSchemaSet();

        schemaSet.Add(null, HttpContext.Current.Request.PhysicalApplicationPath + xsdPath);
        readerSettings.ValidationType = ValidationType.Schema;
        readerSettings.Schemas = schemaSet;

        using (XmlReader r = XmlReader.Create(s, readerSettings))
        {
            int i = 0;
            while (r.Read())
                i++;
        }
        s.Position = 0;
        return (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Media)(xs.Deserialize(s));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\AddImageFile.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.IO;

public partial class Component_AddImageFile : System.Web.UI.UserControl
{
    private Guid originalFileGuid = Guid.Empty;

    /// <summary>
    /// Page load Event for the Page
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e">Event Argument</param>
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!(Session["AddImageFile_originalFileGuid"] == null))
        {
            originalFileGuid = (Guid)(Session["AddImageFile_originalFileGuid"]);
        }
        if (!this.IsPostBack)
        {
            ImageFileHandler.LoadPropertyFromWebCfgFile();
            CatalogServices cs = Constants.Proxy;

            Session["ArrayMediaLocale"] = null;
            ImageLocaleMap.PopulateLocales();

            ddlCulture.DataSource = cs.GetLocale();
            ddlCulture.DataBind();
            ddlCulture.Items.FindByValue("1033").Selected = true;
            List<ImageSize> imSizeList = new List<ImageSize>(cs.GetImageSize());

            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (imSizeList[i].Id == -1)//thumbnail size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (//custom size image
                    imSizeList[i].Id == 0)//org size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            for (int i = 0; i < imSizeList.Count; i++)
            {
                if (
                    imSizeList[i].Id == 4)//thumbnail size image
                {
                    imSizeList.Remove(imSizeList[i]);
                    break;
                }

            }
            ddlDim.DataSource = imSizeList.ToArray();
            ddlDim.DataBind();
            ddlMediaType.DataSource = cs.GetMediaType();
            ddlMediaType.DataBind();
            ddlMediaType.Items.FindByValue("14").Selected = true;

            Button add = ImageLocaleMap.FindControl("ButtonAdd") as Button;
            if (add != null)
            {
                add.Enabled = true;
            }

            Button remove = ImageLocaleMap.FindControl("ButtonRemove") as Button;
            if (remove != null)
            {
                remove.Enabled = true;
            }
        }
        lblErrorMsg.Text = "";
        if (Request.Form["hid_f"] == "1")
        {
            Request.Form["hid_f"].Replace("1", "0");
            if ((bool)Session["AddPredefDim"] == false)
                AddCustomDim(false);
            else
                AddPredefDim(false);
        }


    }
    /// <summary>
    /// Upload Button Click Event
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e"></param>
    protected void btnUpload_Click(object sender, EventArgs e)
    {
        if (null != this.uploadImageFile.PostedFile)
        {
            if (!uploadImageFile.PostedFile.ContentType.ToLower().StartsWith("image"))
            {
                lblErrorMsg.Text = "You must select/upload an image file.";
                return;
            }
            try
            {
                Byte[] fileContentBuf = new byte[uploadImageFile.PostedFile.ContentLength];
                uploadImageFile.FileContent.Read(fileContentBuf, 0, fileContentBuf.Length);
                this.originalFileGuid = ImageFileHandler.UploadImage(new FileInfo(uploadImageFile.FileName), fileContentBuf, System.Guid.Empty);
                this.tbxDiscription.Text = uploadImageFile.PostedFile.FileName;
                this.tbxTitle.Text = uploadImageFile.FileName;
                Session.Add("AddImageFile_originalFileGuid", originalFileGuid);
            }
            catch (Exception ex)
            {
                lblErrorMsg.Text = ex.Message;
                return;
            }
        }
        else
        {
            lblErrorMsg.Text = "You must select a file to upload.";
        }


        LoadDimAssign(lbDimAssign);
        Panel1.Enabled = true;
    }
    /// <summary>
    /// Save button click event handler
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e">Event Argument</param>
    protected void btnSave_Click(object sender, EventArgs e)
    {
        Hashtable propImageList = new Hashtable();
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        ListBox currentListBox = null;

        int thumbNailImageSizeID = -1, OriginalImageSizeID = -1, imageFormatID = -1;
        int thumbNailWidth = -1, thumbNailHeight = -1;
        //get original image info.
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }

        foreach (ImageFormat imFormat in Constants.Proxy.GetImageFormat())
        {
            if (("." + imFormat.Name.ToLower()).CompareTo(sourceImageFileExtension.ToLower()) == 0)
            {
                imageFormatID = imFormat.Id;
                break;
            }
        }
        //get image size id
        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Name.CompareTo("Original Image") == 0)
                OriginalImageSizeID = imSize.Id;
            else if (imSize.Name.CompareTo("EMS Tool Thumbnail") == 0)
            {
                thumbNailHeight = imSize.Height;
                thumbNailWidth = imSize.Width;
                thumbNailImageSizeID = imSize.Id;
            }
        }
        OriginalImageSizeID = 0;
        thumbNailImageSizeID = 4;
        //create image 
        Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image();

        ImageInstance[] imageInst = null;
        if (rbtnResizetoSpecificDim.Checked == true)
        {
            imageInst = new ImageInstance[lbDimResize.Items.Count + 2];
            currentListBox = lbDimResize;
        }
        else if (rbtnAssignSpecificDim.Checked)
        {
            if (rbtnPredefine.Checked == true)
            {
                imageInst = new ImageInstance[lbDimAssign.Items.Count + 2];
                currentListBox = lbDimAssign;
            }
            else if (rbtnNativeDim.Checked)
                imageInst = new ImageInstance[2];
            else
                return;
        }
        else
        {
            return;
        }
        ImageSize imSize1;
        //original image file.
        imSize1 = new ImageSize();
        imageInst[0] = new ImageInstance();
        imageInst[0].Id = originalFileGuid;
        imageInst[0].ImageSizeId = OriginalImageSizeID;
        imageInst[0].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
        imageInst[0].ImageFormatId = imageFormatID;
        imSize1.Id = OriginalImageSizeID;
        imSize1.Width = sourceImageFileWidth;
        imSize1.Height = sourceImageFileHeight;
        propImageList.Add(imageInst[0].Id, imSize1);
        //Thumbnail image file
        imageInst[1] = new ImageInstance();
        imageInst[1].Id = Guid.NewGuid();
        imageInst[1].ImageSizeId = thumbNailImageSizeID;
        imageInst[1].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
        imageInst[1].ImageFormatId = imageFormatID;
        imSize1 = new ImageSize();
        imSize1.Id = thumbNailImageSizeID;
        imSize1.Width = thumbNailWidth;
        imSize1.Height = thumbNailHeight;
        propImageList.Add(imageInst[1].Id, imSize1);
        if (currentListBox != null)
        {
            int i = 2;
            foreach (ListItem listItem in currentListBox.Items)
            {
                string[] s = listItem.Value.Split();
                imSize1 = new ImageSize();
                imageInst[i] = new ImageInstance();
                imageInst[i].Id = Guid.NewGuid();
                imageInst[i].ImageSizeId = int.Parse(s[0]);
                imageInst[i].Lcid = int.Parse(ddlCulture.SelectedItem.Value);
                imageInst[i].ImageFormatId = imageFormatID;
                imSize1.Id = imageInst[i].ImageSizeId;
                imSize1.Width = int.Parse(s[1]);
                imSize1.Height = int.Parse(s[2]);
                propImageList.Add(imageInst[i].Id, imSize1);
                imageInst[0].Modified = InsertDataChangeType.None;
                i++;
            }
        }
        image.Instances = (MediaInstance[])imageInst;
        ImageFileHandler.PropImage(image, propImageList, originalFileGuid);


        MediaLocale mediaLocale = new MediaLocale();
        mediaLocale.Description = this.tbxDiscription.Text;
        mediaLocale.Title = this.tbxTitle.Text;
        mediaLocale.Lcid = int.Parse(ddlCulture.SelectedItem.Value);

        ListBox listBoxLeft = this.ImageLocaleMap.FindControl("TextBoxLeft") as ListBox;

        List<MediaLocaleMap> mlmList = new List<MediaLocaleMap>();
        for (int i = 0; i < listBoxLeft.Items.Count; i++)
        {
            int lcid;
            if (int.TryParse(listBoxLeft.Items[i].Value, out lcid))
            {
                MediaLocaleMap mlm = new MediaLocaleMap();
                mlm.Lcid = lcid;
                mlm.Modified = DataChangeType.Add;
                mlmList.Add(mlm);
            }
        }
        mediaLocale.MappedLcids = mlmList.ToArray();

        image.Id = Guid.NewGuid();
        image.Creator = "N/A";
        image.Issuer = "N/A";
        image.Modified = InsertDataChangeType.Add;
        CatalogServices cs = Constants.Proxy;
        image.MediaTypeId = int.Parse(ddlMediaType.SelectedValue);
        image.MetadataProviderId = 2;
        image.VisibilityStatusId = 3;
        image.Locales = new MediaLocale[1];
        image.Locales[0] = mediaLocale;
        image.MediaTypeId = int.Parse(ddlMediaType.SelectedValue);
        image.VisibilityDate = DateTime.Now;
        cs.SaveImage(image);

        if (Session["RecentImageList"] == null)
        {
            Session["RecentImageList"] = new List<ImageSearchResponse>();
        }
        List<ImageSearchResponse> recentImageList = (List<ImageSearchResponse>)(Session["RecentImageList"]);
        bool IsInList = false;
        for (int i = 0; i < recentImageList.Count; i++)
        {
            if (recentImageList[i].MediaId == image.Id)
            {
                ImageSearchResponse tmpResp = recentImageList[i];
                recentImageList.RemoveAt(i);
                recentImageList.Add(tmpResp);
                IsInList = true;
                break;
            }
        }
        if (IsInList == false)
        {
            ImageSearchResponse searchResponse = new ImageSearchResponse();
            searchResponse.MediaId = image.Id;
            searchResponse.Title = image.Locales[0].Title;
            searchResponse.Description = image.Locales[0].Description;
            foreach (ImageInstance imInst in image.Instances)
            {
                if (imInst.ImageSizeId == thumbNailImageSizeID)
                    searchResponse.Url = imInst.FileUrl;
            }
            if (recentImageList.Count == 20)
                recentImageList.RemoveAt(0);
            recentImageList.Add(searchResponse);
        }

        if (Session["AddNewImageReturnURL"] != null)
        {
            string returnULR = Session["AddNewImageReturnURL"].ToString();

            Session["AddNewImageReturnURL"] = null;
            //Session["SelectedImage"] = cs.GetImage(image.Id);
            Session["SelectedImage"] = image;
            Response.Redirect(returnULR);
        }
        else
        {
            Response.Redirect("~/Image.aspx");
        }
    }

    protected void btnAddDim_Click(object sender, EventArgs e)
    {
        AddPredefDim(true);
    }


    protected void btnAddCustomDim_Click(object sender, EventArgs e)
    {
        AddCustomDim(true);
    }

    private void AddPredefDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }
        int width = 0, height = 0;

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Id.ToString() == ddlDim.SelectedItem.Value)
            {
                width = imSize.Width;
                height = imSize.Height;
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to continue?", "hid_f");
                    Session.Add("AddPredefDim", true);
                    return;
                }
                AddDimToListBox(width, height, int.Parse(ddlDim.SelectedItem.Value));
                break;
            }
        }
    }
    private void AddCustomDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }
        int width, height;
        if (int.TryParse(tbxHeight.Text, out height) && int.TryParse(tbxWidth.Text, out width))
        {
            if (width > 0 && width < 100000 && height > 0 && height < 100000)
            {
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    Session.Add("AddPredefDim", false);
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to contineu?", "hid_f");
                    return;
                }
                AddDimToListBox(width, height, -1);
            }
            else
            {
                lblErrorMsg.Text = "Invalidate height or width";
            }
        }
        else
        {
            lblErrorMsg.Text = "Invalidate height or width";
        }
    }
    private void AddDimToListBox(int width, int height, int sizeID)
    {
        foreach (ListItem listItem in lbDimResize.Items)
        {
            //            int itemWidth, itemHeight, itemSizeID;
            string[] s = listItem.Value.Split();

            if (sizeID == -1)
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0
                      && s[1].CompareTo(width.ToString()) == 0
                      && s[2].CompareTo(height.ToString()) == 0
                      )
                {
                    lblErrorMsg.Text = "Custom size image instance with width = " + width.ToString() + " and height = " + height.ToString() + " is in the list already.";
                    return;
                }
            }
            else
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0)
                {
                    lblErrorMsg.Text = "Predefine size image instance with SizeID = " + sizeID.ToString() + " (W x H:" + width.ToString() + " x " + height.ToString() + ")" + " is in the list already.";
                    return;
                }
            }
        }
        string displayStr = string.Empty;
        if (sizeID == -1)
            displayStr = "Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")";
        else
            displayStr = ddlDim.SelectedItem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
        ListItem newListItem = new ListItem();
        newListItem.Text = displayStr;
        newListItem.Attributes.Add("Height", height.ToString());
        newListItem.Attributes.Add("Width", width.ToString());
        ImageInstance inst = new ImageInstance();
        newListItem.Value = sizeID.ToString() + " " + width.ToString() + " " + height.ToString();
        lbDimResize.Items.Add(newListItem);

    }

    protected void btnRemoveDim_Click(object sender, EventArgs e)
    {
        RemoveDim(lbDimResize);
    }
    private void RemoveDim(ListBox listbox)
    {
        if (listbox.SelectedIndex != -1)
        {
            listbox.Items.RemoveAt(listbox.SelectedIndex);
        }
    }

    protected void btnRemovePerdefDim_Click(object sender, EventArgs e)
    {
        RemoveDim(lbDimAssign);
    }

    protected void LoadDimAssign(ListBox listBox)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Width == sourceImageFileWidth && imSize.Height == sourceImageFileHeight)
            {
                int sizeID = imSize.Id;
                int width = imSize.Width;
                int height = imSize.Height;
                string displayStr = string.Empty;
                displayStr = imSize.Name + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
                ListItem newListItem = new ListItem();
                newListItem.Text = displayStr;
                newListItem.Attributes.Add("Height", height.ToString());
                newListItem.Attributes.Add("Width", width.ToString());
                ImageInstance inst = new ImageInstance();
                newListItem.Value = sizeID.ToString() + " " + width.ToString() + " " + height.ToString();
                listBox.Items.Add(newListItem);
            }
        }
    }

    protected void rbtnResizetoSpecificDim_CheckedChanged(object sender, EventArgs e)
    {
        rbtnPredefine.Checked = false;
        rbtnPredefine.Enabled = false;
        rbtnNativeDim.Checked = false;
        rbtnNativeDim.Enabled = false;
    }

    protected void rbtnAssignSpecificDim_CheckedChanged(object sender, EventArgs e)
    {
        rbtnPredefine.Checked = true;
        rbtnPredefine.Enabled = true;

        rbtnNativeDim.Enabled = true;
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\CategoryLocaleControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.Editorial;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;


public partial class CategoryLocaleControl : System.Web.UI.UserControl
{
    private void DataBindUnusedCategoryLocales(List<Locale> unusedLocales)
    {
        List<Locale> leftlocales = new List<Locale>();
        if (unusedLocales.Count > 0)
        {
            int lcidSelected = Int32.Parse(LocaleDropDown.SelectedValue);
            Locale selectedLocale = unusedLocales.Find(delegate(Locale l) { return (l.LCID == lcidSelected); });
            leftlocales.Add(selectedLocale);
            unusedLocales.Remove(selectedLocale);

        }
        ListBox left = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxLeft");
        left.SelectionMode = ListSelectionMode.Multiple;
        left.DataSource = leftlocales;
        left.DataBind();

        ListBox right = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxRight");
        right.SelectionMode = ListSelectionMode.Multiple;
        right.DataSource = unusedLocales;
        right.DataBind();
    }

    private void DataBindCategory(Category c)
    {
        List<CategoryLocale> locales = new List<CategoryLocale>();
	if(c.Locales != null)
	{
            foreach (CategoryLocale cl in c.Locales)
            {
                if (cl.Modified != DataChangeType.Delete)
                {
                    locales.Add(cl);
                }
            }
	}
        GridViewLocales.DataSource = locales.ToArray();
        GridViewLocales.DataBind();

        List<Locale> unusedLocales = c.GetUnmappedLocales();

        LocaleDropDown.DataSource = unusedLocales;
        LocaleDropDown.DataBind();
        DataBindUnusedCategoryLocales(unusedLocales);
    }

    public void GridViewLocales_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            DropDownList ddl = (DropDownList)e.Row.FindControl("DropDownListMappedLocales");
            CategoryLocale cl = (CategoryLocale)e.Row.DataItem;
            Label localeLabel = (Label)e.Row.FindControl("LocaleLabel");
            localeLabel.Text = Locale.Get(cl.Lcid).InternalName;

            List<Locale> locales = new List<Locale>();
            foreach (CategoryLocaleMap clm in getMappedLocalesForLcid(cl.Lcid))
            {
                Locale l = new Locale();
                l = Locale.Get(clm.FromLcid);
                locales.Add(l);
            }
            ddl.DataSource = locales.ToArray();
            ddl.DataBind();
        }
    }

    private List<CategoryLocaleMap> getMappedLocalesForLcid(int lcid)
    {
        List<CategoryLocaleMap> categoryLocaleMap = new List<CategoryLocaleMap>();
        Category c = (Category)Session["Category"];
        foreach (CategoryLocale cl in c.Locales)
        {
            if (cl.Lcid == lcid)
            {
                if (c.CategoryLocaleMap != null)
                {
                    foreach (CategoryLocaleMap clm in c.CategoryLocaleMap)
                    {
                        if (clm.ToLcid == lcid && clm.Modified != DataChangeType.Delete)
                        {
                            categoryLocaleMap.Add(clm);
                        }
                    }
                }
            }
        }

        return categoryLocaleMap;
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        
        if (!this.IsPostBack)
        {
            
            if (Session["Category"] != null)
            {
                Category c = (Category)Session["Category"];

                // If category is new, force it into edit mode. Otherwise user will need to indicate edit sate
                if (c.Modified == DataChangeType.Update)
                {
                    Session["Category"] = c;
                    DataBindCategory(c);
                    toggleEditMode(false);
                }
                else
                {
                    DataBindCategory(c);
                    toggleEditMode(false);
                }      
            }
        }

        Button addButton = (Button)HorizontalAddRemoveControl.FindControl("AddMappedLocaleButton");
        addButton.Click += OnAddMappedLocale;
        Button removeButton = (Button)HorizontalAddRemoveControl.FindControl("RemoveMappedLocaleButton");
        removeButton.Click += OnRemoveMappedLocale;
    }

    public void OnAddMappedLocale(object sender, EventArgs e)
    {
        ListBox lbl = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxLeft");
        ListBox lbr = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxRight");
        List<Locale> leftItems = new List<Locale>();
        List<Locale> rightItems = new List<Locale>();
        foreach (ListItem item in lbr.Items)
        {
            if (item.Selected)
            {
                leftItems.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                rightItems.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }
        foreach (ListItem item in lbl.Items)
        {
            leftItems.Add(Locale.Get(Int32.Parse(item.Value)));
        }
        lbl.DataSource = leftItems;
        lbl.DataBind();
        lbr.DataSource = rightItems;
        lbr.DataBind();
        DeleteErrorLabel.Visible = false;
    }

    public void OnRemoveMappedLocale(object sender, EventArgs e)
    {
        ListBox lbl = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxLeft");
        ListBox lbr = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxRight");
        List<Locale> leftItems = new List<Locale>();
        List<Locale> rightItems = new List<Locale>();
        foreach (ListItem item in lbl.Items)
        {
            if (item.Selected && item.Value != LocaleDropDown.SelectedValue)
            {
                rightItems.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                leftItems.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }
        foreach (ListItem item in lbr.Items)
        {
            rightItems.Add(Locale.Get(Int32.Parse(item.Value)));
        }
        lbl.DataSource = leftItems;
        lbl.DataBind();
        lbr.DataSource = rightItems;
        lbr.DataBind();
        DeleteErrorLabel.Visible = false;
    }

    public void GridViewLocales_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        Category c = (Category)Session["Category"];
        // Do not allow the last one to get 
        if (c.Locales.Length > 1)
        {
            CategoryLocale cl = c.Locales[GridViewLocales.Rows[e.RowIndex].DataItemIndex];
            // Do not allow EN-us to be deleted
            if (cl.Lcid != 1033)
            {                
                List<CategoryLocaleMap> existingLocaleMaps = new List<CategoryLocaleMap>();
                existingLocaleMaps.AddRange(c.CategoryLocaleMap);
                List<CategoryLocaleMap> localeMapsOld = new List<CategoryLocaleMap>();
                localeMapsOld.AddRange(this.getMappedLocalesForLcid(cl.Lcid));
                foreach (CategoryLocaleMap clm in localeMapsOld)
                {
                    // If the targeting locale was already associated with this contributor locale, remove it from the list of locales that are to be deleted
                    if (existingLocaleMaps.Exists(delegate(CategoryLocaleMap _clm) { return (clm.FromLcid == _clm.FromLcid); }))
                    {
                        existingLocaleMaps.Remove(existingLocaleMaps.Find(delegate(CategoryLocaleMap _clm)
                        {
                            return (clm.FromLcid == _clm.FromLcid);
                        }));
                        clm.Modified = DataChangeType.Delete;
                        existingLocaleMaps.Add(clm);
                    }
                }
                cl.Modified = DataChangeType.Delete;
                c.CategoryLocaleMap = existingLocaleMaps.ToArray();
                DataBindCategory(c);
                DeleteErrorLabel.Visible = false;
                return;
            }
            else
            {
                DeleteErrorLabel.Text = "Cannot delete EN-US localized contributor";
                DeleteErrorLabel.Visible = true;
            }
        }
        else
        {
            DeleteErrorLabel.Text = "There must be at least one localized contributor name";
            DeleteErrorLabel.Visible = true;
        }
    }

    public void GridViewLocales_OnRowEditing(object sender, GridViewEditEventArgs e)
    {
        Session["AddingCategory"] = false;
        Category c = (Category)Session["Category"];
        CategoryLocale cl = c.Locales[GridViewLocales.Rows[e.NewEditIndex].DataItemIndex];
        LocaleDropDown.DataSource = new List<Locale>(new Locale[] { Locale.Get(cl.Lcid) });
        LocaleDropDown.DataBind();
        GridViewTableRow.Enabled = false;
        LocaleChooserTableRow.Enabled = false;
        toggleEditMode(true, cl is CategoryCorporationLocale);
        BtnCancel.Enabled = true;
        DisplayNameBox.Text = cl.Name;
        
        if (cl is CategoryCorporationLocale)
        {
            CorporationDescription.Text = ((CategoryCorporationLocale)cl).Description;
            CorporationHtmlDescription.Text = ((CategoryCorporationLocale)cl).HtmlDescription;
            CorporationLogoId.Text = ((CategoryCorporationLocale)cl).LogoImageId.ToString();
            CorporationRssAnnouncements.Text = ((CategoryCorporationLocale)cl).RssAnnouncement;
            CorporationRssFeatures.Text = ((CategoryCorporationLocale)cl).RssFeatures;
            CorporationRssNews.Text = ((CategoryCorporationLocale)cl).RssNews;
            CorporationBackImageId.Text = ((CategoryCorporationLocale)cl).BackgroundImageId.ToString();

            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.UriBuilder uri = ((CategoryCorporationLocale)cl).WebSite;
            if (uri != null)
            {
                CorporationHost.Text = uri.Host;
                CorporationWebsite.Text = uri.Path;
            }
        }

        List<Locale> unusedLocales = c.GetUnmappedLocales();
        List<Locale> leftlocales = new List<Locale>();
        foreach (CategoryLocaleMap clm in getMappedLocalesForLcid(cl.Lcid))
        {
            leftlocales.Add(Locale.Get(clm.FromLcid));
        }

        ListBox left = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxLeft");
        ListBox right = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxRight");
        left.Items.Clear();
        right.Items.Clear();

        left.SelectionMode = ListSelectionMode.Multiple;
        left.DataSource = leftlocales;
        left.DataBind();

        right.SelectionMode = ListSelectionMode.Multiple;
        right.DataSource = unusedLocales;
        right.DataBind();
        DeleteErrorLabel.Visible = false;
    }


    public void GridViewLocales_OnRowCancel(object sender, EventArgs e)
    {
        toggleEditMode(false);
        GridViewTableRow.Enabled = true;
        Category c = (Category)Session["Category"];
        DataBindCategory(c);
        DeleteErrorLabel.Visible = false;
    }

    public void addCategory(Object sender, EventArgs e)
    {
        Category c = (Category)Session["Category"];
        if ((c != null) && (c.GetUnmappedLocales() != null) && (c.GetUnmappedLocales().Count > 0))
        {
            Session["AddingCategory"] = true;
            if (c.CategorySystemId == 0)
            {
                ParentRequiredErrorLabel.Visible = true;
                return;
            }
            CategorySystem system = Constants.Proxy.GetCategorySystem(c.CategorySystemId);
            toggleEditMode(true, system.IsCorporation);
            DataBindCategory(c);
            DeleteErrorLabel.Visible = false;
            DeleteErrorLabel.Text = "";
            DeleteErrorLabel.Visible = false;
            CorporationBackImageId.Text = "";
            CorporationBackImageIdErrorLabel.Visible = false;
            CorporationDescription.Text = "";
            CorporationHtmlDescription.Text = "";
            CorporationLogoId.Text = "";
            CorporationLogoIdErrorLabel.Visible = false;
            CorporationRssAnnouncements.Text = "";
            CorporationRssFeatures.Text = "";
            CorporationRssNews.Text = "";
            CorporationWebsite.Text = "";
        }
        else
        {
            DeleteErrorLabel.Text = "Error: There is no locale can to be mapped since all locales have been mapped to other locales.";
            DeleteErrorLabel.Visible = true;
        }
        ParentRequiredErrorLabel.Visible = false;
    }

    protected void CategoryLocaleGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        GridViewLocales.PageIndex = e.NewPageIndex;
        Category c = (Category)Session["Category"];
        DataBindCategory(c);
    }

    public void OnSelectedLocaleChanged(object sender, EventArgs e)
    {
        Category c = (Category)Session["Category"];
        DataBindUnusedCategoryLocales(c.GetUnmappedLocales());
    }

    public void OnAddLocale(object sender, EventArgs e)
    {
        Category c = (Category)Session["Category"];
        int lcid = int.Parse(LocaleDropDown.SelectedValue);
        List<CategoryLocaleMap> localeMaps = new List<CategoryLocaleMap>();
        List<CategoryLocaleMap> localeMapsOld = new List<CategoryLocaleMap>();
        ListBox lbl = (ListBox)HorizontalAddRemoveControl.FindControl("ListBoxLeft");
        foreach (ListItem item in lbl.Items)
        {
            CategoryLocaleMap clm = new CategoryLocaleMap();
            clm.FromLcid = int.Parse(item.Value);
            clm.ToLcid = lcid;
            localeMaps.Add(clm);
        }

        // Validation
        CategorySystem system = Constants.Proxy.GetCategorySystem(c.CategorySystemId);
        string displayName = DisplayNameBox.Text.Trim();
        if (displayName == "")
        {
            DisplayNameBoxErrorLabel.Visible = true;
            return;
        }
        DisplayNameBoxErrorLabel.Visible = false;

        if (system.IsCorporation)
        {
            if (CorporationLogoId.Text.Length == 0)
            {
                CorporationLogoIdErrorLabel.Visible = true;
                CorporationDescriptionErrorLabel.Visible = false;
                CorporationBackImageIdErrorLabel.Visible = false;
                return;
            }
            else
            {
                Guid g = new Guid(CorporationLogoId.Text);
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image img = Constants.Proxy.GetImage(g);
                if (img == null)
                {
                    CorporationLogoIdErrorLabel.Visible = true;
                    CorporationDescriptionErrorLabel.Visible = false;
                    CorporationBackImageIdErrorLabel.Visible = false;
                    return;
                }
            }

            if (CorporationBackImageId.Text.Length == 0)
            {
                CorporationBackImageIdErrorLabel.Visible = true;
                CorporationDescriptionErrorLabel.Visible = false;
                CorporationLogoIdErrorLabel.Visible = false;
                return;
            }
            else
            {
                Guid g = new Guid(CorporationBackImageId.Text);
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image img = Constants.Proxy.GetImage(g);
                if (img == null)
                {
                    CorporationBackImageIdErrorLabel.Visible = true;
                    CorporationDescriptionErrorLabel.Visible = false;
                    CorporationLogoIdErrorLabel.Visible = false;
                    return;
                }
            }

            if (CorporationDescription.Text.Length == 0)
            {
                CorporationDescriptionErrorLabel.Visible = true;
                CorporationLogoIdErrorLabel.Visible = false;
                CorporationBackImageIdErrorLabel.Visible = false;
                return;
            }            
        }

        CorporationLogoIdErrorLabel.Visible = false;
        CorporationDescriptionErrorLabel.Visible = false;
        CorporationBackImageIdErrorLabel.Visible = false;

        CategoryLocale cl = null;
        if (GridViewTableRow.Enabled == true || (Boolean)Session["AddingCategory"] == true)
        {
            if (system.IsCorporation)
            {
                cl = new CategoryCorporationLocale();
            }
            else
            {
                cl = new CategoryLocale();
            }
            
            cl.Lcid = lcid;
            c.Locales = DisplayHelper.ArrayItemAdd(c.Locales, cl);

            List<CategoryLocaleMap> existingLocaleMaps = new List<CategoryLocaleMap>();
            existingLocaleMaps.AddRange(c.CategoryLocaleMap);
            localeMapsOld.AddRange(this.getMappedLocalesForLcid(cl.Lcid));
            foreach (CategoryLocaleMap clm in localeMaps)
            {
                // If the targeting locale was already associated with this contributor locale, remove it from the list of locales that are to be deleted
                if (existingLocaleMaps.Exists(delegate(CategoryLocaleMap _clm) { return (clm.FromLcid == _clm.FromLcid); }))
                {
                    existingLocaleMaps.Remove(existingLocaleMaps.Find(delegate(CategoryLocaleMap _clm)
                    {
                        return (clm.FromLcid == _clm.FromLcid);
                    }));
                    cl.LcidMaps = DisplayHelper.ArrayItemAdd(cl.LcidMaps, clm.FromLcid);
                    clm.Modified = DataChangeType.Update;
                    existingLocaleMaps.Add(clm);
                }
                else
                {
                    clm.Modified = DataChangeType.Update;
                    existingLocaleMaps.Add(clm);
                }
            }
            c.CategoryLocaleMap = existingLocaleMaps.ToArray();
            c.Modified = DataChangeType.Update;
            cl.Modified = DataChangeType.Update;

            cl.Modified = DataChangeType.Update;
            Session["AddingContributor"] = false;
            OnBubbleEvent(this, new EventArgs());
        }
        else
        {
            cl = Array.Find(c.Locales, delegate(CategoryLocale catLocale) { return catLocale.Lcid == lcid; });
            if (cl.Name != displayName)
            {
                cl.Modified = DataChangeType.Update;
            }
            else
            {
                DeleteErrorLabel.Visible = false;
            }

            List<CategoryLocaleMap> existingLocaleMaps = new List<CategoryLocaleMap>();
            existingLocaleMaps.AddRange(c.CategoryLocaleMap);
            localeMapsOld.AddRange(this.getMappedLocalesForLcid(cl.Lcid));
            foreach (CategoryLocaleMap clm in localeMaps)
            {                
                // If the targeting locale was already associated with this contributor locale, remove it from the list of locales that are to be deleted
                if (existingLocaleMaps.Exists(delegate(CategoryLocaleMap _clm) { return (clm.FromLcid == _clm.FromLcid); }))
                {
                    existingLocaleMaps.Remove(existingLocaleMaps.Find(delegate(CategoryLocaleMap _clm) 
                    { 
                        return (clm.FromLcid == _clm.FromLcid); 
                    }));
                    existingLocaleMaps.Add(clm);
                    clm.Modified = DataChangeType.Update;
                }
                else
                {
                    clm.Modified = DataChangeType.Update;
                    existingLocaleMaps.Add(clm);
                }
            }

            foreach (CategoryLocaleMap clm in localeMapsOld)
            {
                if(!localeMaps.Exists(delegate(CategoryLocaleMap _clm) { return (clm.FromLcid == _clm.FromLcid); }))
                {
                    CategoryLocaleMap deleteLocale = existingLocaleMaps.Find(delegate(CategoryLocaleMap _clm) { return (clm.FromLcid == _clm.FromLcid); });
                    deleteLocale.Modified = DataChangeType.Delete;
                }
            }

            GridViewTableRow.Enabled = true;
            LocaleChooserTableRow.Enabled = true;
            c.CategoryLocaleMap = existingLocaleMaps.ToArray();
            c.Modified = DataChangeType.Update;
            cl.Modified = DataChangeType.Update;
        }
        
        cl.Name = displayName;
        if (cl is CategoryCorporationLocale)
        {
            ((CategoryCorporationLocale)cl).Description = CorporationDescription.Text;
            ((CategoryCorporationLocale)cl).HtmlDescription = CorporationHtmlDescription.Text;
            if (CorporationLogoId.Text.Length > 0)
            {
                ((CategoryCorporationLocale)cl).LogoImageId = new Guid(CorporationLogoId.Text);
            }
            if (CorporationBackImageId.Text.Length > 0)
            {
                ((CategoryCorporationLocale)cl).BackgroundImageId = new Guid(CorporationBackImageId.Text);
            }
            ((CategoryCorporationLocale)cl).RssAnnouncement = CorporationRssAnnouncements.Text;
            ((CategoryCorporationLocale)cl).RssFeatures = CorporationRssFeatures.Text;
            ((CategoryCorporationLocale)cl).RssNews = CorporationRssNews.Text;

            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.UriBuilder uri = null;
            if (CorporationHost.Text.Length > 0)
            {
                uri = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.UriBuilder();
                uri.Host = CorporationHost.Text;
                uri.Path = CorporationWebsite.Text;
            }

            ((CategoryCorporationLocale)cl).WebSite = uri;
        }

        c.Modified = DataChangeType.Update;
        DataBindCategory(c);
        toggleEditMode(false);
        DeleteErrorLabel.Visible = false;
        Session["LocaleAdded"] = true;
    }

    // Pass true to turn on add mode, false to turn off. Greys out appropriate stuff
    private void toggleEditMode(Boolean b, Boolean isSystem)
    {
        btnAddDim.Enabled = !b;
        SaveLocalButton.Enabled = b;
        GridViewTableRow.Enabled = !b;
        LocaleChooserTableRow.Enabled = b;
        BtnCancel.Enabled = b;
        DisplayNameBox.Enabled = b;
        DisplayNameBox.Text = "";

        contentTable.Enabled = b;
        TableRow4.Enabled = b;

        CorporationBackImageId.Text = "";
        CorporationBackImageId.Enabled = b && isSystem;
        CorporationBackgroundImageLabel.Enabled = b && isSystem;
        CorporationDescription.Text = "";
        CorporationDescription.Enabled = b && isSystem;
        CorporationDescLabel.Enabled = b && isSystem;
        CorporationHtmlDescription.Text = "";
        CorporationHtmlDescription.Enabled = b && isSystem;
        CorporationHtmlDescLabel.Enabled = b && isSystem;
        CorporationLogoId.Text = "";
        CorporationLogoId.Enabled = b && isSystem;
        CorporationLogoLabel.Enabled = b && isSystem;
        CorporationRssAnnouncements.Text = "";
        CorporationRssAnnouncements.Enabled = b && isSystem;
        CorporationRssAnounceLabel.Enabled = b && isSystem;
        CorporationRssFeatures.Text = "";
        CorporationRssFeatures.Enabled = b && isSystem;
        CorporationRssFeatLabel.Enabled = b && isSystem;
        CorporationRssNews.Text = "";
        CorporationRssNews.Enabled = b && isSystem;
        CorporationRssNewsLabel.Enabled = b && isSystem;
        CorporationHost.Text = "";
        CorporationHost.Enabled = b && isSystem;
        CorporationHostLabel.Enabled = b && isSystem;
        CorporationWebsite.Text = "";
        CorporationWebsite.Enabled = b && isSystem;
        CorporationWebsiteLabel.Enabled = b && isSystem;
    }

    // Pass true to turn on add mode, false to turn off. Greys out appropriate stuff
    private void toggleEditMode(Boolean b)
    {
        toggleEditMode(b, false);        
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\CategoriesTreeControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class CategoriesTreeControl : System.Web.UI.UserControl
{
    private proxy.CategorySystem[] categorySystems;
    private TreeNodeSelectAction categorySysAction = TreeNodeSelectAction.Expand ;

    public TreeNodeSelectAction CategorySystemSelectAction
    {
        set { categorySysAction = value; }
    }

    public proxy.CategorySystem[] CategorySystems
    {
        set
        {
            List<string> allowed = new List<string>(ConfigurationManager.AppSettings["CategorySystemWhiteList"].Split(new char[] { ',' }));
            List<proxy.CategorySystem> categorySystemList = new List<proxy.CategorySystem>();
            foreach (proxy.CategorySystem cs in value)
            {
                if (allowed.Contains(cs.Id.ToString()))
                {
                    categorySystemList.Add(cs);
                }
            }
            categorySystems = (proxy.CategorySystem[])categorySystemList.ToArray();
        }
    }

    public int SelectedCategoryID
    {
        get 
        {
            if (CategoryTreeView.SelectedNode != null)
            {
                return Convert.ToInt32(CategoryTreeView.SelectedNode.Value);
            }
            return -1;
        }
    }

    public string SelectedCategoryPath
    {
        get 
        {
            if (CategoryTreeView.SelectedNode != null)
            {
                string path = string.Empty;
                GetNodePath(CategoryTreeView.SelectedNode, ref path);
                return path;
            }
            return string.Empty;
        }
    }

    public bool EnableCategoryTreeView
    {
        set { CategoryTreeView.Enabled = value; }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            TreeNode nodeRoot = new TreeNode("Category Systems");
            nodeRoot.SelectAction = TreeNodeSelectAction.Expand;
            CategoryTreeView.Nodes.Add(nodeRoot);

            foreach (proxy.CategorySystem cs in categorySystems)
            {
                TreeNode nodeCategorySystem = new TreeNode(cs.Name, cs.Id.ToString());
                nodeCategorySystem.SelectAction = categorySysAction;
                nodeRoot.ChildNodes.Add(nodeCategorySystem);
                PopulateCategoryTree(nodeCategorySystem, cs.Categories);
            }
        }
    }

    private void GetNodePath(TreeNode node, ref string path)
    {
        if (node != null)
        {
            path = @"\" + node.Text + path;
            GetNodePath(node.Parent, ref path);
        }
    }

    private void PopulateCategoryTree(TreeNode node, proxy.Category[] categories)
    {
        Array.Sort
        (
            categories, delegate(proxy.Category c1, proxy.Category c2)
            {
                if (c1.LocalizedName == null)
                    return string.Empty.CompareTo(c2.LocalizedName);
                if (c2.LocalizedName == null)
                    return c1.LocalizedName.CompareTo(string.Empty);
                else                
                    return c1.LocalizedName.CompareTo(c2.LocalizedName);
            }
        );

        foreach (proxy.Category cg in categories)
        {
            string name = cg.LocalizedName;
            if (!string.IsNullOrEmpty(name))
            {
                TreeNode nodeCategory = new TreeNode(name, cg.Id.ToString());                
                nodeCategory.ShowCheckBox = false;
                nodeCategory.SelectAction = TreeNodeSelectAction.Select;
                node.ChildNodes.Add(nodeCategory);
                PopulateCategoryTree(nodeCategory, cg.Categories);
            }
        }
    }

    public bool IsSelectedNodeCategorySystem()
    {
        bool result = true;
        TreeNode node = this.CategoryTreeView.SelectedNode;
        if (node != null)
        {
            int treeLevelCount = 0;
            
            while(node.Parent != null)
            {
                treeLevelCount ++;
                node = node.Parent;

                if (treeLevelCount >= 2)
                {
                    result = false;
                    break;
                }
            }
        }
        return result;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\App_Code\MessageBox.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections;
using System.Text;

/// <summary>
/// Summary description for MessageBox
/// </summary>
public class MessageBox
{
    private static Hashtable m_executingPages = new Hashtable();
    private MessageBox() { }
    public static void Show(string sMessage)
    {
        // If this is the first time a page has called this method then
        if (!m_executingPages.Contains(HttpContext.Current.Handler))
        {
            // Attempt to cast HttpHandler as a Page.
            Page executingPage = HttpContext.Current.Handler as Page;
            if (executingPage != null)
            {
                // Create a Queue to hold one or more messages.
                Queue messageQueue = new Queue();
                // Add our message to the Queue
                messageQueue.Enqueue(sMessage);
                // Add our message queue to the hash table. Use our page reference
                // (IHttpHandler) as the key.
                m_executingPages.Add(HttpContext.Current.Handler, messageQueue);
                // Wire up Unload event so that we can inject 
                // some JavaScript for the alerts.
                executingPage.Unload += new EventHandler(ExecutingPage_Unload);
            }
        }
        else
        {
            // If were here then the method has allready been 
            // called from the executing Page.
            // We have allready created a message queue and stored a
            // reference to it in our hastable. 
            Queue queue = (Queue)m_executingPages[HttpContext.Current.Handler];
            // Add our message to the Queue
            queue.Enqueue(sMessage);
        }
    }

    // Our page has finished rendering so lets output the
    // JavaScript to produce the alert's
    private static void ExecutingPage_Unload(object sender, EventArgs e)
    {
        // Get our message queue from the hashtable
        Queue queue = (Queue)m_executingPages[HttpContext.Current.Handler];
        if (queue != null)
        {
            StringBuilder sb = new StringBuilder();
            // How many messages have been registered?
            int iMsgCount = queue.Count;
            // Use StringBuilder to build up our client slide JavaScript.
            sb.Append("<script language='javascript'>");
            // Loop round registered messages
            string sMsg;
            while (iMsgCount-- > 0)
            {
                sMsg = (string)queue.Dequeue();
                sMsg = sMsg.Replace("\n", "\\n");
                sMsg = sMsg.Replace("\"", "'");
                sb.Append(@"alert( """ + sMsg + @""" );");
            }
            // Close our JS
            sb.Append(@"</script>");
            // Were done, so remove our page reference from the hashtable
            m_executingPages.Remove(HttpContext.Current.Handler);
            // Write the JavaScript to the end of the response stream.
            HttpContext.Current.Response.Write(sb.ToString());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\CategoryParentEditControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class Component_CategoryParentEditControl : System.Web.UI.UserControl
{
    private proxy.CategorySystem categorySystem = null;

    // Parent change can be done only within the category.
    public proxy.CategorySystem FilterCategorySystem
    {
        set { categorySystem = value; }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            if (categorySystem == null)
            {
                this.selectCategoryParentTreeView.CategorySystems = Constants.Proxy.GetCategorySystem();                
            }
            else
            {
                this.selectCategoryParentTreeView.CategorySystems = new proxy.CategorySystem[] {categorySystem};                

            }

            this.selectCategoryParentTreeView.CategorySystemSelectAction = TreeNodeSelectAction.Select;

        }
        lblNewParent.Text = this.selectCategoryParentTreeView.SelectedCategoryPath;
    }

    protected void btnUpdateParent_Click(object sender, EventArgs e)
    {
        if (Session["Category"] != null && this.selectCategoryParentTreeView.SelectedCategoryID != -1)
        {
            proxy.Category c = (proxy.Category)Session["Category"];

            if (this.selectCategoryParentTreeView.SelectedCategoryID == c.Id)
            {
                lblError.Text = "Category can not refer itself as parent.";
                return;
            }

            if (this.selectCategoryParentTreeView.SelectedCategoryID == c.ParentCategoryId)
            {
                lblError.Text = "Category already has selected node as its parent.";
                return;
            }
            
            if (Session["LocaleAdded"] != null && (bool)Session["LocaleAdded"] == true)
            {
                lblError.Text = "Once a locale has been added, parent cannot be updated.";
                return;
            }


            if (this.selectCategoryParentTreeView.IsSelectedNodeCategorySystem())
            {
                c.ParentCategoryId = null;
                c.CategorySystemId = this.selectCategoryParentTreeView.SelectedCategoryID;
                c.Modified = proxy.DataChangeType.Update;
            }
            else
            {
                c.ParentCategoryId = this.selectCategoryParentTreeView.SelectedCategoryID;
                c.Modified = proxy.DataChangeType.Update;
                // Add Mode
                if (c.Id < 1)
                {
                    proxy.Category parent = proxy.CategorySystem.GetCategoryById(this.selectCategoryParentTreeView.SelectedCategoryID);
                    c.CategorySystemId = parent.CategorySystemId;
                }

                // In case of Edit mode, Category System cannot be changed.
            }
            
            Session["Category"] = c;
        }

        if (this.selectCategoryParentTreeView.SelectedCategoryID == -1)
        {
            lblError.Text = "Please select the new Parent Category before updating.";
            return;
        }

    } 

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\DoubleListBoxControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using Microsoft.Ems.Apps.Web.Editorial;

public partial class DoubleListBoxControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        this.LabelMsg.Text = "";
        if (!this.IsPostBack)
        {
            if (this.ID.Equals("DoubleListBoxControl"))
            {
                this.LabelTitle.Text = "Mapped Locale(s)";
            }
            else if (this.ID.Equals("HorizontalVideoInstance"))
            {
                this.LabelTitle.Text = "Spoken Language(s)";
            }
            else if (this.ID.Equals("ImageLocaleMap"))
            {
                this.LabelTitle.Text = string.Empty;
            }
        }
    }

    protected void OnAddClick(object sender, EventArgs e)
    {
        // Build up list of selected items
        List<Locale> rightList = new List<Locale>();
        List<Locale> leftList = new List<Locale>();
        foreach (ListItem item in TextBoxRight.Items)
        {
            if (item != null && item.Selected == true)
            {
                item.Selected = false;
                leftList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                rightList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }

        if (this.ID.CompareTo("DoubleListBoxControl") == 0)
        {
            if (!IsMappedLocaleValid())
            {
                this.LabelMsg.Visible = true;
                this.LabelMsg.Text = "Error: the mapped locale can't be linked to more than one locale";
                this.updatePanelHorizontal.Update();
                return;
            }
        }


        foreach (ListItem item in TextBoxLeft.Items)
        {
            leftList.Add(Locale.Get(Int32.Parse(item.Value)));
        }

        rightList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        leftList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        TextBoxLeft.Items.Clear();
        TextBoxLeft.DataSource = leftList;
        TextBoxLeft.DataBind();

        TextBoxRight.Items.Clear();
        TextBoxRight.DataSource = rightList;
        TextBoxRight.DataBind();

        SyncParentButtonStatus();
        this.updatePanelHorizontal.Update();
    }

    private bool IsMappedLocaleValid()
    {
        MediaLocale[] locales = null;

        if (Session["ArrayMediaLocale"] != null)
        {
            locales = Session["ArrayMediaLocale"] as MediaLocale[];
        }

        if (locales != null)
        {
            MediaLocale editLocale = null;

            if (Session["EditingMediaLoale"] != null)
            {
                editLocale = Session["EditingMediaLoale"] as MediaLocale;
            }

            ListItemCollection leftList = this.TextBoxLeft.Items;
            // For each selected item move it to the other box (its added)
            foreach (ListItem item in leftList)
            {
                int lcid;

                if (int.TryParse(item.Value, out lcid))
                {
                    foreach (MediaLocale ml in locales)
                    {
                        if ((editLocale != null) && (editLocale.Lcid == ml.Lcid))
                        {
                            continue;
                        }

                        if (ml.Modified != DataChangeType.Delete)
                        {
                            foreach (MediaLocaleMap mm in ml.MappedLcids)
                            {
                                if (mm.Modified != DataChangeType.Delete)
                                {
                                    if (mm.Lcid == lcid)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

    protected void OnRemoveClick(object sender, EventArgs e)
    {
        // Build up list of selected items
        List<Locale> leftList = new List<Locale>();
        List<Locale> rightList = new List<Locale>();
        foreach (ListItem item in TextBoxLeft.Items)
        {
            if (item != null && item.Selected == true)
            {
                rightList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
            else
            {
                leftList.Add(Locale.Get(Int32.Parse(item.Value)));
            }
        }

        foreach (ListItem item in TextBoxRight.Items)
        {
            rightList.Add(Locale.Get(Int32.Parse(item.Value)));
        }

        rightList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        leftList.Sort(delegate(Locale l1, Locale l2) { return (l1.LocaleCode.CompareTo(l2.LocaleCode)); });
        TextBoxLeft.Items.Clear();
        TextBoxLeft.DataSource = leftList;
        TextBoxLeft.DataBind();

        TextBoxRight.Items.Clear();
        TextBoxRight.DataSource = rightList;
        TextBoxRight.DataBind();    

        SyncParentButtonStatus();
    }

    private void SyncLeftButtonStatus()
    {
        if (this.TextBoxLeft.Items.Count <= 0)
        {
            this.ButtonRemove.Enabled = false;
        }
        else
        {
            if (this.TextBoxLeft.SelectedItem != null)
            {
                this.ButtonRemove.Enabled = true;
            }
            else
            {
                this.ButtonRemove.Enabled = false;
            }
        }

    }
    private void SyncRightButtonStatus()
    {
        if (this.TextBoxRight.Items.Count <= 0)
        {
            this.ButtonAdd.Enabled = false;
        }
        else
        {
            if (this.TextBoxRight.SelectedItem != null)
            {
                this.ButtonAdd.Enabled = true;
            }
            else
            {
                this.ButtonAdd.Enabled = false;
            }
        }
    }

    private void SyncParentButtonStatus()
    {
        Button buttonSave = base.Parent.FindControl("SaveLocalButton") as Button;
        if (buttonSave != null)
        {
            buttonSave.Enabled = true;
        }
    }

    public void OnDataBound<T>(T[] bindingSource)
    {
        if (bindingSource != null)
        {
            if (typeof(T) == typeof(Locale))
            {
                this.TextBoxLeft.DataSource = bindingSource;
            }
            else if (typeof(T) == typeof(VideoAudioTrackLanguage))
            {
                Locale[] locales = new Locale[bindingSource.Length];
                Locale[] tmpLocales= Constants.Proxy.GetLocale();
                for (int i = 0; i < bindingSource.Length; i++)
                {
                    VideoAudioTrackLanguage vtl = bindingSource[i] as VideoAudioTrackLanguage;
                    locales[i] = Array.Find(tmpLocales, delegate(Locale l) { return l.LCID == vtl.Lcid; });
                }
                this.TextBoxLeft.DataSource = locales;
            }
           
            this.TextBoxLeft.DataBind();

            // remove lcids already
            this.TextBoxRight.Items.Clear();
            CatalogServices proxy = Constants.Proxy;
            this.TextBoxRight.DataSource = proxy.GetLocale();
            this.TextBoxRight.DataBind();

            for (int i = 0; i < TextBoxRight.Items.Count; i++)
            {
                ListItem item = TextBoxRight.Items[i];
                if (TextBoxLeft.Items.Contains(item))
                {
                    TextBoxRight.Items.Remove(item);
                }
            }

            if (typeof(T) == typeof(Locale))
            {
                // remove locales already mapped to others
                if (Session["ArrayMediaLocale"] != null)
                {
                    MediaLocale[] locales = Session["ArrayMediaLocale"] as MediaLocale[];
                    if (locales != null)
                    {
                        foreach (MediaLocale ml in locales)
                        {
                            if (ml.Modified != DataChangeType.Delete)
                            {
                                foreach (MediaLocaleMap mm in ml.MappedLcids)
                                {
                                    if (mm.Modified != DataChangeType.Delete)
                                    {
                                        // remove mm from mappedLoales
                                        ListItem item = TextBoxRight.Items.FindByValue(mm.Lcid.ToString());
                                        if (item != null)
                                        {
                                            TextBoxRight.Items.Remove(item);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public void PopulateLocales()
    {
        // populate right TextBox
        // remove lcids already
        this.TextBoxLeft.Items.Clear();
        this.TextBoxRight.Items.Clear();

        CatalogServices proxy = Constants.Proxy;
        // by default, map all locales to en-us.
        Locale[] mappedLoales = proxy.GetLocale();

        if ((mappedLoales != null) && (Session["ArrayMediaLocale"] != null))
        {
            // remove items already mapped.
            MediaLocale[] locales = Session["ArrayMediaLocale"] as MediaLocale[];

            if (locales != null)
            {
                foreach (MediaLocale ml in locales)
                {
                    if (ml.Modified != DataChangeType.Delete)
                    {
                        foreach (MediaLocaleMap mm in ml.MappedLcids)
                        {
                            if (mm.Modified != DataChangeType.Delete)
                            {
                                // remove mm from mappedLoales
                                Locale localeToRemove = Array.Find(mappedLoales, delegate(Locale l) { return l.LCID == mm.Lcid; });
                                if (localeToRemove != null)
                                {
                                    mappedLoales = DisplayHelper.ArrayItemRemove(mappedLoales, localeToRemove);
                                }
                            }
                        }
                    }
                }
            }

        }

        this.TextBoxLeft.DataSource = mappedLoales;
        this.TextBoxLeft.DataBind();
    }

    public void Clear()
    {
        this.TextBoxLeft.Items.Clear();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\HorizontalAddRemoveControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class HorizontalAddRemoveControl : System.Web.UI.UserControl
{
    public string LabelTitleText
    {
        get
        {
            return LabelTitle.Text;
        }
        set
        {
            LabelTitle.Text = value;
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\ImageEdit.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;
using System.IO;


public partial class Component_ImageEdit : System.Web.UI.UserControl
{
    private class ImInstDisplay
    {
        string name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        string liveURL;

        public string LiveURL
        {
            get { return liveURL; }
            set { liveURL = value; }
        }

    }
    //TODO
    private Guid originalFileGuid;
    private Guid imageID;
    Locale[] locales = null;
    /// <summary>
    /// Gets/Sets the Guid of the Image
    /// </summary>
    public Guid ImageID
    {
        get { return imageID; }
        set { imageID = value; }
    }
    /// <summary>
    /// Page load event for the Image Edit User Control
    /// </summary>
    /// <param name="sender">Represents the object responsible for Invocation</param>
    /// <param name="e">Event Argument</param>
    protected void Page_Load(object sender, EventArgs e)
    {
        List<ImInstDisplay> list = new List<ImInstDisplay>();
        int OriginalImageSizeID = -1;
        int ThumbnailImageSizeID = -1;
        if (Session["originalFileGuid_InEditImage"] != null)
            originalFileGuid = (Guid)(Session["originalFileGuid_InEditImage"]);
        if (!this.IsPostBack)
        {
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image = null;
            ImageFileHandler.LoadPropertyFromWebCfgFile();
            CatalogServices cs = Constants.Proxy;
            this.locales = cs.GetLocale();
            ddlCulture.DataSource = locales;
            ddlCulture.DataBind();
            ddlDim.DataSource = cs.GetImageSize();
            ddlDim.DataBind();
            image = cs.GetImage(ImageID);
            Session["CurrentEditImage"] = image;
            if (image.Locales.Length > 0)
            {
                this.tbxTitle.Text = image.Locales[0].Title;
                this.tbxDiscription.Text = image.Locales[0].Description;
            }
            if (image.Instances.Length > 0)
            {
                foreach (ListItem item in ddlCulture.Items)
                {
                    if (int.Parse(item.Value) == ((ImageInstance)(image.Instances[0])).Lcid)
                        item.Selected = true;
                }
            }
            ddlCulture.SelectedValue = image.Locales[0].Lcid.ToString();
            OriginalImageSizeID = 0;
            ThumbnailImageSizeID = 4;
            foreach (ImageInstance iminst in image.Instances)
            {
                ImInstDisplay imInstDisplay = new ImInstDisplay();
                if (iminst.ImageSizeId == OriginalImageSizeID)
                {
                    originalFileGuid = iminst.Id;
                    Session["originalFileGuid_InEditImage"] = originalFileGuid;
                    continue;
                }
                else if (iminst.ImageSizeId == ThumbnailImageSizeID)
                {
                    ImagePreview.ImageUrl = iminst.FileUrl;
                    continue;
                }
                ListItem listitem = ddlDim.Items.FindByValue(iminst.ImageSizeId.ToString());
                int width, height, fileSize;
                string fileext;
                if (iminst.ImageSizeId == -1 || iminst.ImageSizeId == 0)
                {
                    ImageFileHandler.GetImageFileProperty(iminst.Id, out width, out height, out fileSize, out fileext);
                }
                else
                {
                    width = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im) { return im.Id == iminst.ImageSizeId; }))).Width;
                    height = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im) { return im.Id == iminst.ImageSizeId; }))).Height;
                }
                if (listitem == null)
                {
                    imInstDisplay.Name = "Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")";
                    lbDimResize.Items.Add(new ListItem("Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")", "-1 " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                }
                else
                {
                    imInstDisplay.Name = listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
                    lbDimResize.Items.Add(new ListItem(listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")", iminst.ImageSizeId + " " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                }
                imInstDisplay.LiveURL = iminst.FileUrl;
                list.Add(imInstDisplay);
            }

            List<ImageSize> imList = new List<ImageSize>();

            foreach (ImageSize imsize in cs.GetImageSize())
                if (!(imsize.Id == -1 || imsize.Id == 0 || imsize.Id == 4))
                    imList.Add(imsize);
            ddlDim.DataSource = imList.ToArray();
            ddlDim.DataBind();
            ddlMediaType.DataSource = cs.GetMediaType();
            ddlMediaType.DataBind();
            ddlMediaType.Items.FindByValue(image.MediaTypeId.ToString()).Selected = true;
            tbxID.Text = image.Id.ToString();
            GridView.DataSource = list.ToArray();
            GridView.DataBind();

            Session["ArrayMediaLocale"] = image.Locales;
            this.ImageLocaleMap.OnDataBound<Locale>(BuildLocaleMapList(image.Locales[0].MappedLcids));

            Button add = ImageLocaleMap.FindControl("ButtonAdd") as Button;
            if (add != null)
            {
                add.Enabled = true;
            }

            Button remove = ImageLocaleMap.FindControl("ButtonRemove") as Button;
            if (remove != null)
            {
                remove.Enabled = true;
            }
        }
        lblErrorMsg.Text = "";
        if (Request.Form["hid_f"] == "1")
        {
            Request.Form["hid_f"].Replace("1", "0");
            if ((bool)Session["AddPredefDim"] == false)
                AddCustomDim(false);
            else
                AddPredefDim(false);
        }

    }
    /// <summary>
    /// Builds the MediaLocaleMap from the mapped Locales List box
    /// </summary>
    /// <returns></returns>
    private MediaLocaleMap[] BuildMediaLocaleMapList()
    {
        ListBox listBoxLeft = this.ImageLocaleMap.FindControl("TextBoxLeft") as ListBox;
        List<MediaLocaleMap> mlmList = new List<MediaLocaleMap>();
        for (int i = 0; i < listBoxLeft.Items.Count; i++)
        {
            int lcid;
            if (int.TryParse(listBoxLeft.Items[i].Value, out lcid))
            {
                MediaLocaleMap mlm = new MediaLocaleMap();
                mlm.Lcid = lcid;
                mlmList.Add(mlm);
            }
        }
        return mlmList.ToArray();
    }
    /// <summary>
    /// Builds the Locale List according to the Mapped Lcids
    /// </summary>
    /// <param name="mappedLcids">MediaLocale map array</param>
    /// <returns>Array of Locales</returns>
    private Locale[] BuildLocaleMapList(MediaLocaleMap[] mappedLcids)
    {
        Locale[] mappedLocales = new Locale[mappedLcids.Length];
        int arrayIndex = 0;
        foreach (MediaLocaleMap instance in mappedLcids)
        {
            Locale locale = Array.Find(this.locales, delegate(Locale l) { return l.LCID == instance.Lcid; });
            if (locale != null)
            {
                mappedLocales[arrayIndex] = locale;
                arrayIndex++;
            }
        }
        Array.Sort(mappedLocales, delegate(Locale l1, Locale l2)
       {
           return Comparer<String>.Default.Compare(l1.LocaleCode, l2.LocaleCode);
       });
        return mappedLocales;
    }
    /// <summary>
    /// Builds the change list for MediaLocaleMap associated to an Image
    /// </summary>
    /// <param name="currentMediaLocaleMap">Current Media Locale Map array from the UI</param>
    /// <param name="existingMediaLocaleMap">Existing MediaLocale Map Array from the DB</param>
    private MediaLocaleMap[] BuildMediaLocaleMapChangeList(MediaLocaleMap[] existingMediaLocaleMap, MediaLocaleMap[] currentMediaLocaleMap)
    {
        List<MediaLocaleMap> mlmList = new List<MediaLocaleMap>();
        if (existingMediaLocaleMap != null && currentMediaLocaleMap != null)
        {
            foreach (MediaLocaleMap instance in currentMediaLocaleMap)
            {
                MediaLocaleMap mediaLocaleMap = Array.Find(existingMediaLocaleMap, delegate(MediaLocaleMap ml) { return ml.Lcid == instance.Lcid; });
                if (mediaLocaleMap == null)
                {
                    instance.Modified = DataChangeType.Add;
                    mlmList.Add(instance);
                }
                else
                {
                    instance.Modified = DataChangeType.Update;
                    mlmList.Add(instance);
                }
            }
            foreach (MediaLocaleMap instance in existingMediaLocaleMap)
            {
                MediaLocaleMap mediaLocaleMap = Array.Find(currentMediaLocaleMap, delegate(MediaLocaleMap ml) { return ml.Lcid == instance.Lcid; });
                if (mediaLocaleMap == null)
                {
                    instance.Modified = DataChangeType.Delete;
                    mlmList.Add(instance);
                }
            }
        }
        return mlmList.ToArray();
    }
    /// <summary>
    /// Save button click for Editing an Image
    /// </summary>
    /// <param name="sender">Object Responsible for invocation of the Event</param>
    /// <param name="e"></param>
    protected void btnSave_Click(object sender, EventArgs e)
    {

        CatalogServices cs = Constants.Proxy;
        Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image = (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(Session["CurrentEditImage"]);
        image.Modified = InsertDataChangeType.Update;

        bool originalFileAvailable = true;

        Hashtable propImageList = new Hashtable();
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        ListBox currentListBox = null;

        int thumbNailImageSizeID = -1, OriginalImageSizeID = -1, imageFormatID = -1;
        int thumbNailWidth = -1, thumbNailHeight = -1;
        //get original image info.
        try
        {

            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch (IOException ex)
        {
            if (ex.Message.EndsWith(" does not exist.") && ex.Message.StartsWith("Original file with ID: "))
            {
                MessageBox.Show("Cannot save change because the original file does not exist. The image may not be upload via image processing tool.");
                originalFileAvailable = false;
            }
        }
        if (originalFileAvailable)
        {
            foreach (ImageFormat imFormat in Constants.Proxy.GetImageFormat())
            {
                if (("." + imFormat.Name.ToLower()).CompareTo(sourceImageFileExtension.ToLower()) == 0)
                {
                    imageFormatID = imFormat.Id;
                    break;
                }
            }
            //get image size id
            foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
            {
                if (imSize.Id == 0)
                    OriginalImageSizeID = imSize.Id;
                else if (imSize.Id == 4)
                {
                    thumbNailHeight = imSize.Height;
                    thumbNailWidth = imSize.Width;
                    thumbNailImageSizeID = imSize.Id;
                }
            }

            foreach (ImageInstance iminst in image.Instances)
            {
                /*if (!(iminst.ImageSizeId == OriginalImageSizeID || iminst.ImageSizeId == thumbNailImageSizeID))
                    iminst.Modified = DataChangeType.Delete;*/
            }
            List<MediaInstance> imInstList = new List<MediaInstance>(image.Instances);
            currentListBox = lbDimResize;
            if (currentListBox != null)
            {
                foreach (ListItem listItem in currentListBox.Items)
                {
                    string[] s = listItem.Value.Split();
                    Guid iminstguid = new Guid(s[3]);
                    if (iminstguid.CompareTo(Guid.Empty) == 0)
                    {
                        ImageSize imSize1 = new ImageSize();
                        ImageInstance imInst = new ImageInstance();
                        imInst.Id = Guid.NewGuid();
                        imInst.ImageSizeId = int.Parse(s[0]);
                        imInst.Lcid = int.Parse(ddlCulture.SelectedItem.Value);
                        imInst.ImageFormatId = imageFormatID;
                        imSize1.Id = imInst.ImageSizeId;
                        imSize1.Width = int.Parse(s[1]);
                        imSize1.Height = int.Parse(s[2]);
                        propImageList.Add(imInst.Id, imSize1);
                        imInst.Modified = InsertDataChangeType.Add;
                        imInstList.Add(imInst);
                    }
                    else
                    {
                        foreach (ImageInstance iminst in imInstList)
                        {
                            if (iminst.Id == iminstguid)
                                iminst.Modified = InsertDataChangeType.None;
                        }
                    }
                }
            }
            image.Instances = imInstList.ToArray();
            ImageFileHandler.PropImage(image, propImageList, originalFileGuid);
        }
        else
            image.Instances = null;

        MediaLocaleMap[] mappedLcids = BuildMediaLocaleMapChangeList(image.Locales[0].MappedLcids, BuildMediaLocaleMapList());
        MediaLocale mediaLocale = new MediaLocale();
        mediaLocale.Description = this.tbxDiscription.Text;
        mediaLocale.Title = this.tbxTitle.Text;
        mediaLocale.Lcid = int.Parse(ddlCulture.SelectedItem.Value);
        image.Creator = "N/A";
        image.Issuer = "N/A";
        image.Modified = InsertDataChangeType.Update;
        image.MediaTypeId = int.Parse(this.ddlMediaType.SelectedValue);
        image.MetadataProviderId = 2;
        if (image.Locales[0].Lcid == mediaLocale.Lcid)
        {
            image.Locales = new MediaLocale[1];
            image.Locales[0] = mediaLocale;
            image.Locales[0].Modified = DataChangeType.Update;
        }
        else
        {
            MediaLocale[] tmpLocale = new MediaLocale[2];
            tmpLocale[0] = mediaLocale;
            tmpLocale[0].Modified = DataChangeType.Add;
            tmpLocale[1] = image.Locales[0];
            tmpLocale[1].Modified = DataChangeType.Delete;

            foreach (MediaLocaleMap mlm in tmpLocale[1].MappedLcids)
                mlm.Modified = DataChangeType.Delete;

            image.Locales = tmpLocale;
            if (image.Instances != null)
            {
                foreach (ImageInstance iminst in image.Instances)
                {
                    iminst.Lcid = mediaLocale.Lcid;
                    iminst.Modified = InsertDataChangeType.Update;
                }
            }

        }
        image.MediaTypeId = int.Parse(ddlMediaType.SelectedValue);
        image.Locales[0].MappedLcids = mappedLcids;
        cs.SaveImage(image);
        image = cs.GetImage(image.Id);
        ddlCulture.SelectedValue = image.Locales[0].Lcid.ToString();
        if (Session["RecentImageList"] == null)
        {
            Session["RecentImageList"] = new List<ImageSearchResponse>();
        }
        List<ImageSearchResponse> recentImageList = (List<ImageSearchResponse>)(Session["RecentImageList"]);
        bool IsInList = false;
        for (int i = 0; i < recentImageList.Count; i++)
        {
            if (recentImageList[i].MediaId == image.Id)
            {
                ImageSearchResponse tmpResp = recentImageList[i];
                recentImageList.RemoveAt(i);
                recentImageList.Add(tmpResp);
                IsInList = true;
                break;
            }
        }
        if (IsInList == false)
        {
            ImageSearchResponse searchResponse = new ImageSearchResponse();
            searchResponse.MediaId = image.Id;
            searchResponse.Title = image.Locales[0].Title;
            searchResponse.Description = image.Locales[0].Description;
            foreach (ImageInstance imInst in image.Instances)
            {
                if (imInst.ImageSizeId == thumbNailImageSizeID)
                    searchResponse.Url = imInst.FileUrl;
            }
            if (recentImageList.Count == 20)
                recentImageList.RemoveAt(0);
            recentImageList.Add(searchResponse);
        }

        Response.Redirect(Request.Url.ToString());

    }
    protected void btnAddCustomDim_Click(object sender, EventArgs e)
    {
        AddCustomDim(true);
    }
    protected void btnAddDim_Click(object sender, EventArgs e)
    {
        AddPredefDim(true);
    }

    protected void btnRemoveDim_Click(object sender, EventArgs e)
    {
        RemoveDim(lbDimResize);
    }
    private void RemoveDim(ListBox listbox)
    {
        if (listbox.SelectedIndex != -1)
        {
            listbox.Items.RemoveAt(listbox.SelectedIndex);
        }
    }
    private void AddPredefDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Cannot add new dimension because that original Image does not exist. This image may not be uploaded via image pipe line tools.";
            return;
        }
        int width = 0, height = 0;

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {
            if (imSize.Id.ToString() == ddlDim.SelectedItem.Value)
            {
                width = imSize.Width;
                height = imSize.Height;
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to continue?", "hid_f");
                    Session.Add("AddPredefDim", true);
                    return;
                }
                AddDimToListBox(width, height, int.Parse(ddlDim.SelectedItem.Value));
                break;
            }
        }
    }
    private void AddCustomDim(bool HasAspectRationWarning)
    {
        string sourceImageFileExtension = string.Empty;
        int sourceImageFileWidth = 0, sourceImageFileHeight = 0, sourceImageFileSize = 0;
        try
        {
            ImageFileHandler.GetImageFileProperty(this.originalFileGuid, out sourceImageFileWidth, out sourceImageFileHeight, out sourceImageFileSize, out sourceImageFileExtension);
        }
        catch
        {
            lblErrorMsg.Text = "Pleaes upload file first.";
            return;
        }
        int width, height;
        if (int.TryParse(tbxHeight.Text, out height) && int.TryParse(tbxWidth.Text, out width))
        {
            if (width > 0 && width < 100000 && height > 0 && height < 100000)
            {
                if (!ImageFileHandler.CheckAspectRatio(sourceImageFileWidth, sourceImageFileHeight, width, height, ImageFileHandler.AspectRatioWarningPercentage) && HasAspectRationWarning)
                {
                    Session.Add("AddPredefDim", false);
                    AlertBox1.confirm("Aspect ratio change is larger than " + ImageFileHandler.AspectRatioWarningPercentage.ToString() + "%. Do you want to contineu?", "hid_f");
                    return;
                }
                AddDimToListBox(width, height, -1);
            }
            else
            {
                lblErrorMsg.Text = "Invalidate height or width";
            }
        }
        else
        {
            lblErrorMsg.Text = "Invalidate height or width";
        }
    }

    private void AddDimToListBox(int width, int height, int sizeID)
    {
        foreach (ListItem listItem in lbDimResize.Items)
        {
            //            int itemWidth, itemHeight, itemSizeID;
            string[] s = listItem.Value.Split();

            if (sizeID == -1)
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0
                      && s[1].CompareTo(width.ToString()) == 0
                      && s[2].CompareTo(height.ToString()) == 0
                      )
                {
                    lblErrorMsg.Text = "Custom size image instance with width = " + width.ToString() + " and height = " + height.ToString() + " is in the list already.";
                    return;
                }
            }
            else
            {
                if (s[0].CompareTo(sizeID.ToString()) == 0)
                {
                    lblErrorMsg.Text = "Predefine size image instance with SizeID = " + sizeID.ToString() + " (W x H:" + width.ToString() + " x " + height.ToString() + ")" + " is in the list already.";
                    return;
                }
            }
        }
        string displayStr = string.Empty;
        if (sizeID == -1)
            displayStr = "Customer size image(W x H:" + width.ToString() + " x " + height.ToString() + ")";
        else
            displayStr = ddlDim.SelectedItem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")";
        ListItem newListItem = new ListItem();
        newListItem.Text = displayStr;
        newListItem.Attributes.Add("Height", height.ToString());
        newListItem.Attributes.Add("Width", width.ToString());
        ImageInstance inst = new ImageInstance();
        newListItem.Value = sizeID.ToString() + " " + width.ToString() + " " + height.ToString() + " " + Guid.Empty.ToString();
        lbDimResize.Items.Add(newListItem);

    }


    protected void btnUpload_Click(object sender, EventArgs e)
    {

        Hashtable propImageList = new Hashtable();
        if (null != this.uploadImageFile.PostedFile)
        {
            if (!uploadImageFile.PostedFile.ContentType.ToLower().StartsWith("image"))
            {
                lblErrorMsg.Text = "You must select/upload an image file.";
                return;
            }
            try
            {
                Byte[] fileContentBuf = new byte[uploadImageFile.PostedFile.ContentLength];
                uploadImageFile.FileContent.Read(fileContentBuf, 0, fileContentBuf.Length);
                this.originalFileGuid = ImageFileHandler.UploadImage(new FileInfo(uploadImageFile.FileName), fileContentBuf, this.originalFileGuid);

                CatalogServices cs = Constants.Proxy;
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image = (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(Session["CurrentEditImage"]);
                foreach (ImageInstance imInst in image.Instances)
                {
                    ImageSize imSize1 = new ImageSize();
                    string ImageFileExtension = string.Empty;
                    int ImageFileWidth = 0, ImageFileHeight = 0, ImageFileSize = 0;
                    ImageFileHandler.GetImageFileProperty(imInst.Id, out ImageFileWidth, out ImageFileHeight, out ImageFileSize, out ImageFileExtension);
                    imSize1.Id = imInst.ImageSizeId;
                    imSize1.Width = ImageFileWidth;
                    imSize1.Height = ImageFileHeight;
                    propImageList.Add(imInst.Id, imSize1);
                }
                ImageFileHandler.PropImage(image, propImageList, originalFileGuid);

            }
            catch (Exception ex)
            {
                lblErrorMsg.Text = ex.Message;
                return;
            }
        }
        else
        {
            lblErrorMsg.Text = "You must select a file to upload.";
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\SessionTimedOutRedirect.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class Component_SessionTimedOutRedirect : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\ImageSearch.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
//using Microsoft.Ems.Common.Catalog;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;

public partial class Component_ImageSearch : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        lblErrorMsg.Text = "";
        if (!IsPostBack)
        {

            ImageFileHandler.LoadPropertyFromWebCfgFile();

            CatalogServices cs = Constants.Proxy; 
            lbxCulture.DataSource = cs.GetLocale();
            lbxCulture.DataBind();
            List<ImageSize> imList=new List<ImageSize>();
            foreach (ImageSize imSize in cs.GetImageSize())
            {
                if (imSize.Id != 4)
                    imList.Add(imSize);
            }
            lbxImageSize.DataSource = imList;
            lbxImageSize.DataBind();
        }
    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        if (tbxImageID.Text.Length == 0 && tbxTitle.Text.Length == 0)
        {
            lblErrorMsg.Text = "You need to specify image ID or title for search.";
            return;
        }
        try
        {
            ImageSearchRequest imageSearchRequest = new ImageSearchRequest();
            imageSearchRequest.Dimensions = GetSelectListItemValue(lbxImageSize).ToArray();
            imageSearchRequest.Locale = GetSelectListItemValue(lbxCulture).ToArray();
            if(tbxImageID.Text.Length>0)
                imageSearchRequest.MediaId = new Guid(tbxImageID.Text);
            imageSearchRequest.Title = tbxTitle.Text;
            Session.Add("ImageSearchRequest", imageSearchRequest);

            Response.Redirect("~/ImageSearchResult.aspx");
        }
        catch (Exception ex)
        {
            lblErrorMsg.Text = ex.Message;
        }
    }
    private List<int> GetSelectListItemValue(ListBox listBox)
    {
        List<int> list = new List<int>();
        foreach (ListItem item in listBox.Items)
        {
            
            if (item.Selected)
                list.Add(int.Parse(item.Value));
        }
        return list;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\AlertBox.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text;

public partial class Component_AlertBox : System.Web.UI.UserControl
{
    //private string msg;
    private string content;
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    public void alert(string msg)
    {
        string sMsg = msg.Replace("\n", "\\n");
        sMsg = msg.Replace("\"", "'");

        StringBuilder sb = new StringBuilder();

        sb.Append(@"<script language='javascript'>");

        sb.Append(@"alert( """ + sMsg + @""" );");

        sb.Append(@"</script>");

        content = sb.ToString();
    }

    //good for the page with only one form
    public void confirm(string msg, string hiddenfield_name)
    {
        string sMsg = msg.Replace("\n", "\\n");
        sMsg = msg.Replace("\"", "'");

        StringBuilder sb = new StringBuilder();

        sb.Append(@"<INPUT type=hidden value='0' name='" + hiddenfield_name + "'>");

        sb.Append(@"<script language='javascript'>");

        sb.Append(@" if(confirm( """ + sMsg + @""" ))");
        sb.Append(@" { ");
        sb.Append("document.forms[0]." + hiddenfield_name + ".value='1';" + "document.forms[0].submit(); }");
        sb.Append(@" else { ");
        sb.Append("document.forms[0]." + hiddenfield_name + ".value='0'; }");

        sb.Append(@"</script>");

        content = sb.ToString();
    }
    protected override void Render(HtmlTextWriter output)
    {
        output.Write(this.content);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\ImageControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            DataTable dataTable = GetDataTable();
            Session["dataTable"] = dataTable;
            GridViewContributors.DataSource = GetDataTable();
            GridViewContributors.DataBind();
        }
    }

    protected void GridViewContributors_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    protected void GridViewContributors_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

            DataTable mytable = new DataTable();
            DataColumn relationshipIdColumn = new DataColumn("RelationshipId");
            DataColumn relationshipNameColumn = new DataColumn("RelationshipName");

            mytable.Columns.Add(relationshipIdColumn);
            mytable.Columns.Add(relationshipNameColumn);


            DataRow newrow = mytable.NewRow();
            newrow["RelationshipId"] = 1;
            newrow["RelationshipName"] = "Cover art 1";
            mytable.Rows.Add(newrow);


            newrow = mytable.NewRow();
            newrow["RelationshipId"] = 2;
            newrow["RelationshipName"] = "Cover art 2";
            mytable.Rows.Add(newrow);

            newrow = mytable.NewRow();
            newrow["RelationshipId"] = 3;
            newrow["RelationshipName"] = "Cover art 3";
            mytable.Rows.Add(newrow);


            DropDownList ddl = (DropDownList)e.Row.FindControl("DropDownList1");

            ddl.DataSource = mytable;
            ddl.DataTextField = "RelationshipName";
            ddl.DataValueField = "RelationshipId";
            ddl.DataBind();
        }
    }

    protected void ImageButton_Click(object sender, ImageClickEventArgs e)
    {
        DataTable table = (DataTable)Session["dataTable"];

        DataRow row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title";
        table.Rows.Add(row);

        Session["dataTable"] = table;
        GridViewContributors.DataSource = table;
        GridViewContributors.DataBind();
    }

    private DataTable GetDataTable()
    {
        DataTable table = new DataTable();
        DataColumn ColImage = new DataColumn("Image");
        DataColumn ColTitle = new DataColumn("Title");
        table.Columns.Add(ColImage);
        table.Columns.Add(ColTitle);

        DataRow row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title 1";

        table.Rows.Add(row);

        row = table.NewRow();
        row["Image"] = "~/Images/img.gif";
        row["Title"] = "Image Title 2";

        table.Rows.Add(row);

        return table;    
    }

    protected void GridViewContributors_OnRowDeleting(object sender, EventArgs e)
    {


    }

    protected void GridViewContributors_OnRowDeleted(object sender, EventArgs e)
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\ImageSearchResult.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;

public partial class Component_ImageSearchResult : System.Web.UI.UserControl
{
    private bool showRecentList = false;


    public bool ShowRecentList
    {
        get { return showRecentList; }
        set { showRecentList = value; }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            CatalogServices cs = Constants.Proxy;
            ImageSearchRequest request = (ImageSearchRequest)Session["ImageSearchRequest"];
            if (request != null && !showRecentList)
            {
                Response[] responses = cs.Search(request);
                this.GridView.DataSource = responses;
                //Session["ImageSearchRequest"] = null;
                lblTitle.Text = "Image search result";
            }
            else
            {
                lblTitle.Text = "Most Recent 20 images";
                if (Session["RecentImageList"] == null)
                {
                    Session["RecentImageList"] = new List<ImageSearchResponse>();
                }
                List<ImageSearchResponse> imList = (List<ImageSearchResponse>)(Session["RecentImageList"]);
                imList.Reverse();
                this.GridView.DataSource = imList.ToArray();
                imList.Reverse();
                Response.Cache.SetMaxAge(new TimeSpan(0, 0, 1));
            }
            this.GridView.DataBind();
        }
    }
    protected void GridView_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.CompareTo("EditImage") == 0)
        {
        }
        else if (e.CommandName.CompareTo("SelectImage") == 0)
        {
            //Session["SelectedImage"] = Constants.Proxy.GetImage();

            if (Session["AddNewImageReturnURL"] != null)
            {
                string returnURL = Session["AddNewImageReturnURL"].ToString();
                Session["AddNewImageReturnURL"] = null;
                Session["SelectedImage"] = Constants.Proxy.GetImage((Guid)(GridView.DataKeys[int.Parse(e.CommandArgument.ToString())].Values[0]));
                Response.Redirect(returnURL);
            }
        }
    }
    protected void GridView_RowEditing(object sender, GridViewEditEventArgs e)
    {

        Response.Redirect("~/ImageEdit.aspx?i=" + GridView.DataKeys[e.NewEditIndex].Values[0].ToString());
    }
    protected void GridView_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
            if (Session["AddNewImageReturnURL"] == null)
                e.Row.Cells[5].Enabled = false;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\MasterPage.master.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Reflection;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Text;

public partial class MasterPage : System.Web.UI.MasterPage
{

    private static string[] PagesContainingTreeView = { "/CategoryAddEdit.aspx", "/Category.aspx", "/AddEditTabs.aspx", "/Search.aspx", "/ContributorAddEdit.aspx", "/Series.aspx", "/PodcastManage.aspx", "/DRMDashBoard.aspx","/domain/EntityList.aspx" };
    public string stJavaScript = string.Empty;
    private static string version = null;
    private string Version
    {
        get
        {
            if (version == null)
            {
                version = Assembly.GetAssembly(typeof(Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.CatalogServices)).GetName().Version.ToString();
            }
            return version;
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        string pagename = Request.Url.AbsolutePath;
        

        // HACK: Each of the following pages contain a TreeView. The TreeView is contained inside of an UpdatePanel
        // and each time the TreeView is selected it fires an onunload event (which calls setHourGlass()). BUT since 
        // the page does not refresh itself (its in an updatepanel) the hourglass never resets and we are stuck with
        // an hourglass forever. So we cannot set the hourglass normall in these pages
        if (!DoesPageContainTreeView(pagename))
        {
            StringBuilder sbJavaScript = new StringBuilder();
            sbJavaScript.Append("<script language='javascript' type='text/javascript'>");
            sbJavaScript.Append("function setHourglass()");
            sbJavaScript.Append("{");
            sbJavaScript.Append("document.body.style.cursor = 'wait';");
            sbJavaScript.Append("}");
            sbJavaScript.Append("</script>");
            stJavaScript = sbJavaScript.ToString();
        }
        else
        {
            StringBuilder sbJavaScript = new StringBuilder();
            sbJavaScript.Append("<script language='javascript' type='text/javascript'>");
            sbJavaScript.Append("function setHourglass()");
            sbJavaScript.Append("{");
            sbJavaScript.Append("}");
            sbJavaScript.Append("</script>");
            stJavaScript = sbJavaScript.ToString();
        }

        VersionLabel.Text = Version;
    }

    private Boolean DoesPageContainTreeView(string pageName)
    {
        foreach (string s in PagesContainingTreeView)
        {
            if (pageName.Contains(s))
            {
                return true;
            }
        }
        return false;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\PreviewControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Collections.Generic;

public partial class PreviewControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            // Make the following controls invisible
            // Preview User Type
            // Preview Start Date
            // Preview End Date
            // Per bug #112090
            TableRow4.Visible = false;
            TableRow5.Visible = false;
            TableRow7.Visible = false;
        }
    }

    public void PopulateControls(PreviewMediaInstance pmi)
    {
        if (pmi != null)
        {
            CatalogServices proxy = Constants.Proxy;
            Country[] arrayCountry = proxy.GetCountry();
            this.DropDownListCountryCode.DataSource = arrayCountry;
            this.DropDownListCountryCode.DataValueField = "Id";
            this.DropDownListCountryCode.DataTextField = "Name";
            this.DropDownListCountryCode.DataBind();
            if (pmi.CountryCode != null)
            {
                this.DropDownListCountryCode.SelectedValue = pmi.CountryCode;
            }
            else
            {
                this.DropDownListCountryCode.SelectedValue = "US";
            }


            UserType[] arrayUserType = proxy.GetUserType();
            this.DropDownListUserType.DataSource = arrayUserType;
            this.DropDownListUserType.DataValueField = "Id";
            this.DropDownListUserType.DataTextField = "Name";
            this.DropDownListUserType.DataBind();

            int? userTypeId = pmi.RequiredUserTypeId;
            if (userTypeId != null)
            {
                //foreach (UserType ut in arrayUserType)
                //{
                //    if (ut.Id == userTypeId)
                //    {
                //        this.DropDownListUserType.Text = ut.Name;
                //        break;
                //    }
                //}
                this.DropDownListUserType.SelectedIndex = -1;
                if (this.DropDownListUserType.Items.FindByValue(userTypeId.ToString()) != null)
                    this.DropDownListUserType.Items.FindByValue(userTypeId.ToString()).Selected = true;
            }            

            DateTime? startDate = pmi.StartDate;
            if (startDate != null)
            {
                this.CalendarPreviewStartDate.Text = startDate.ToString();
            }

            DateTime? endDate = pmi.EndDate;
            if (endDate != null)
            {
                this.CalendarPreviewEndDate.Text = endDate.ToString();
            }

            DRMLicenseIssuer[] drmLicenseIssuer = proxy.GetDRMLicenseIssuer();
            this.DropDownListLicenser.DataSource = drmLicenseIssuer;
            this.DropDownListLicenser.DataValueField = "Id";
            this.DropDownListLicenser.DataTextField = "Name";
            this.DropDownListLicenser.DataBind();
            // If this is a new preview media instance, the DRMLicenseIssuerId is 0, otherwise select what is in the pmi
            if (pmi.DRMLicenseIssuerId != 0)
            {
                DropDownListLicenser.SelectedValue = pmi.DRMLicenseIssuerId.ToString();
            }
            //int licenserId = pmi.LicenserId;
            //foreach (ListItem li in DropDownListLicenser.Items)
            //    li.Selected = false;
            //foreach (Licenser lc in licenser)
            //{
            //    if (lc.Id == licenserId)
            //    {
            //        this.DropDownListLicenser.DataValueField = lc.Name;
            //        break;
            //    }
            //}

            this.TextBoxLicenserContentId.Text = pmi.LicenserContentId;

            Provider[] provider = Constants.Proxy.GetProvider();
            List<Provider> sortingArray = new List<Provider>();
            sortingArray.AddRange(provider);
            sortingArray.Sort(delegate(Provider p1, Provider p2) { return p1.Name.CompareTo(p2.Name); });
            this.DropDownListProvider.DataSource = sortingArray.ToArray();
            this.DropDownListProvider.DataValueField = "Id";
            this.DropDownListProvider.DataTextField = "Name";
            this.DropDownListProvider.DataBind();

            Boolean foundProvider = false;
            foreach (Provider p in provider)
            {
                if ( pmi.ProviderId == p.Id )
                {
                    this.DropDownListProvider.SelectedValue = p.Id.ToString();
                    foundProvider = true;
                    break;
                }
            }

            // If the provider cannot be found, use MS
            if (!foundProvider)
            {
                String id = sortingArray.Find(delegate(Provider p) { return p.Name.Equals("Microsoft"); }).Id.ToString();
                if (id != "")
                {
                    DropDownListProvider.SelectedValue = id;

                }
            }
        }
        else
        {
            DropDownListCountryCode.Items.Clear();
            DropDownListProvider.Items.Clear();
            DropDownListUserType.Items.Clear();
            DropDownListLicenser.Items.Clear();
            TextBoxLicenserContentId.Text = string.Empty;
            this.CalendarPreviewStartDate.Text = string.Empty;
            this.CalendarPreviewEndDate.Text = string.Empty;
            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// if you want to use a private version file and customize this, see
// file://samsndrop02/CoreXT-Latest/docs/corext/corext/version.htm
//

#if FIXED_ASSEMBLY_VERSION
[assembly: AssemblyVersion("12.4.0.0")]
[assembly: AssemblyFileVersion("12.4.56.0")]
#else
[assembly: AssemblyVersion("12.4.56.0")]
#endif


[assembly: AssemblyCompany("Microsoft Corporation")]
[assembly: AssemblyProduct("Microsoft(R) Xbox(TM)")] 
[assembly: AssemblyCopyright("\xA9 Microsoft Corporation. All rights reserved.")]
[assembly: AssemblyTrademark("Microsoft(R) is a registered trademark of Microsoft Corporation. Xbox(TM) is a trademark of Microsoft Corporation.")]
[assembly: AssemblyDescription("Built by: Administrator")] 

#if ENABLE_CODESIGN

#if ENABLE_PRS_DELAYSIGN
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\private\keys\XBLKey.snk")]
[assembly: AssemblyKeyName("")]
[assembly: AssemblyDelaySign(true)]
#else
#if !CUSTOM_KEYFILE
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\public\internal\strongnamekeys\fake\CoreXTTestKey.snk")]
[assembly: AssemblyKeyName("")]
#endif
[assembly: AssemblyDelaySign(false)]
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\BaseHealthRequest.cs ===
using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Caching;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.common.health
{

// --------------------------------------------------------------------------------------
//
// Entry point for the healthcheck request. This needs to compile into the application, 
// since we want ProcessRequest() to load the application, not hit the xblhealthcheck.dll 
// directly. 
//
// --------------------------------------------------------------------------------------

public class BaseHealthRequest : IHttpHandler
{

    // ----------------------------------------------------------------------------------
    // Rest of implementation is below here. You can ignore it.
    // ----------------------------------------------------------------------------------

    // IHttpHandler method
    public virtual void ProcessRequest( HttpContext ctx )
    {
        // Have to pass in everything that lives in this assembly/component
        xonline.common.health.HealthcheckEngine.ProcessRequest(
            ctx,
            Config.ComponentName);
    }

    // IHttpHandler method
    public bool IsReusable
    {
        get { return true; }
    }


    // ----------------------------------------------------------------------------------
    // Helpers for the health stuff
    // ----------------------------------------------------------------------------------



}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Domain\LicenseTypeList.aspx.cs ===
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseTypeList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                BindLicenseTypeList();
            }
        }

        protected void LicenseTypeGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType licenseType = e.Row.DataItem as Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType;
                ((Label)e.Row.FindControl("IdLabel")).Text = licenseType.Id.ToString();
                ((Label)e.Row.FindControl("NameLabel")).Text = licenseType.Name;
                ((Label)e.Row.FindControl("LicenseClassListLabel")).Text = Constants.Proxy.GetLicenseClass(licenseType.LicenseClassId).Name;
                ((TextBox)e.Row.FindControl("LicenseXmlLabel")).Text = licenseType.LicenseXML;
            }
        }
        protected void LicenseTypeGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            LicenseTypeGrid.PageIndex = e.NewPageIndex;
            BindLicenseTypeList();
        }
        protected void LicenseTypeGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            GridView gridView = (GridView)sender;
            string licenseTypeId = ((Label)gridView.Rows[e.NewEditIndex].FindControl("IdLabel")).Text;
            LicenseTypeGrid.EditIndex = e.NewEditIndex;
            BindLicenseTypeList();
            Response.Redirect("LicenseType.aspx?LicenseTypeID=" + licenseTypeId);

        }
        private void BindLicenseTypeList()
        {
            LicenseTypeGrid.DataSource = Constants.Proxy.GetLicenseType();
            LicenseTypeGrid.DataBind();
        }
        protected void LicenseTypeGrid_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "Insert")
            {
                Response.Redirect("LicenseType.aspx");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Domain\PricingRuleList.aspx.cs ===
using System;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class PricingRuleList : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            DataGrid.DataSource = Constants.Proxy.GetPricingRule();
            DataGrid.DataBind();
        }
    }

    protected void DataGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        DataGrid.PageIndex = e.NewPageIndex;
        DataGrid.DataSource = Constants.Proxy.GetPricingRule();
        DataGrid.DataBind();
    }

    protected void DataGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
    {
        GridView gridView = sender as GridView;
        int ruleId = (int)gridView.DataKeys[e.NewEditIndex].Value;
        Response.Redirect("PricingRule.aspx?" + ruleId.ToString());
    }

    protected void NewRuleAdd_OnClick(object sender, ImageClickEventArgs e)
    {
        Response.Redirect("PricingRule.aspx");
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Domain\EntityList.aspx.cs ===
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class EntityList : System.Web.UI.Page
{
    //local variables;
    private string _id;
    private string _name;
    private string _externalEntityId;
    private string _contactInfo;
    private string _accountNumber;
    private bool _isProvider;
    private bool _isMetadataProvider;
    private bool _isDrmLicenseIssuer;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!this.IsPostBack)
        {
            BindEntityList();
        }
    }

    protected void EntityGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Entity entity = e.Row.DataItem as Entity;

            if ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit)
            {
                ((Label)e.Row.FindControl("IdEdit")).Text = entity.Id.ToString();
                ((TextBox)e.Row.FindControl("NameEdit")).Text = entity.Name.ToString();
                ((TextBox)e.Row.FindControl("AccountNumberEdit")).Text = entity.AccountNumber.ToString();
                ((TextBox)e.Row.FindControl("ExternalProviderEdit")).Text = entity.ExternalEntityId;
                ((TextBox)e.Row.FindControl("ContactInfoEdit")).Text = entity.ContactInfo;
                ((CheckBox)e.Row.FindControl("IsProviderEdit")).Checked = entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderEdit")).Checked = entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerEdit")).Checked = entity.IsDrmLicenseIssuer;

                ((CheckBox)e.Row.FindControl("IsProviderEdit")).Enabled = !entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderEdit")).Enabled = !entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerEdit")).Enabled = !entity.IsDrmLicenseIssuer;
            }
            else
            {
                ((Label)e.Row.FindControl("IdLabel")).Text = entity.Id.ToString();
                ((Label)e.Row.FindControl("NameLabel")).Text = entity.Name.ToString();
                ((Label)e.Row.FindControl("AccountNumberLabel")).Text = entity.AccountNumber.ToString();
                ((Label)e.Row.FindControl("ExternalProviderLabel")).Text = entity.ExternalEntityId;
                ((Label)e.Row.FindControl("ContactInfoLabel")).Text = entity.ContactInfo;                
                ((CheckBox)e.Row.FindControl("IsProviderRead")).Checked = entity.IsProvider;
                ((CheckBox)e.Row.FindControl("IsMetadataProviderRead")).Checked = entity.IsMetadataProvider;
                ((CheckBox)e.Row.FindControl("IsDrmLicenseIssuerRead")).Checked = entity.IsDrmLicenseIssuer;
            }
        }
    }

    protected void EntityGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        EntityGrid.PageIndex = e.NewPageIndex;
        BindEntityList();
    }

    protected void EntityGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
    {
        EntityGrid.EditIndex = e.NewEditIndex;       
        BindEntityList();
    }

    protected void EntityGrid_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        EntityGrid.EditIndex = -1;
        BindEntityList();
    }

    protected void EntityGrid_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        _id = ((Label)EntityGrid.Rows[e.RowIndex].FindControl("IdEdit")).Text.Trim();
        _name = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("NameEdit")).Text.Trim();
        _externalEntityId = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("ExternalProviderEdit")).Text.Trim();
        _accountNumber = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("AccountNumberEdit")).Text.Trim();
        _contactInfo = ((TextBox)EntityGrid.Rows[e.RowIndex].FindControl("ContactInfoEdit")).Text.Trim();
        _isProvider = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsProviderEdit")).Checked;
        _isMetadataProvider = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsMetadataProviderEdit")).Checked;
        _isDrmLicenseIssuer = ((CheckBox)EntityGrid.Rows[e.RowIndex].FindControl("IsDrmLicenseIssuerEdit")).Checked;

        if (SaveProvider(DataChangeType.Update))
        {
            EntityGrid.EditIndex = -1;
            BindEntityList();
        }
    }

    protected void EntityGrid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName != "Insert")
            return;

        if (e.CommandName == "Insert")
        {
            _name = ((TextBox)EntityGrid.FooterRow.FindControl("NameFooter")).Text.Trim();
            _externalEntityId = ((TextBox)EntityGrid.FooterRow.FindControl("ExternalProviderFooter")).Text;
            _accountNumber = ((TextBox)EntityGrid.FooterRow.FindControl("AccountNumberFooter")).Text;
            _contactInfo = ((TextBox)EntityGrid.FooterRow.FindControl("ContactInfoFooter")).Text;
            _isProvider = ((CheckBox)EntityGrid.FooterRow.FindControl("IsProviderFoot")).Checked;
            _isMetadataProvider = ((CheckBox)EntityGrid.FooterRow.FindControl("IsMetadataProviderFoot")).Checked;
            _isDrmLicenseIssuer = ((CheckBox)EntityGrid.FooterRow.FindControl("IsDrmLicenseIssuerFoot")).Checked;
        }

        if (SaveProvider(DataChangeType.Add))
        {
            BindEntityList();
        }

    }

    private void BindEntityList()
    {
        EntityGrid.DataSource = Constants.Proxy.GetEntity();
        EntityGrid.DataBind();
    }

    private bool SaveProvider(DataChangeType changeType)
    {        
        this.ErrorMsg.Text = "";

        // Must have a name
        if (_name.Length == 0)
        {
            this.ErrorMsg.Text = "Error: Entity name missing.";
            return false;
        }

        // At least one must be checked
        if (!_isProvider && !_isMetadataProvider && !_isDrmLicenseIssuer)
        {
            this.ErrorMsg.Text = "Error: Need at least one entity checked";
            return false;
        }

        //Save to database
        try
        {
            Entity e = new Entity();
            if (changeType == DataChangeType.Update)
            {
                e.Id = Int32.Parse(_id);
            }
            else
            {
                e.Id = 0;
            }
            e.Name = _name;
            e.ContactInfo = _contactInfo;
            e.AccountNumber = _accountNumber;
            e.ExternalEntityId = _externalEntityId;
            e.IsProvider = _isProvider;
            e.IsMetadataProvider = _isMetadataProvider;
            e.IsDrmLicenseIssuer = _isDrmLicenseIssuer;
            e.Modified = changeType;
            Constants.Proxy.SaveEntity(e);

            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Provider.Refresh();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.MetadataProvider.Refresh();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.DRMLicenseIssuer.Refresh();

            this.ErrorMsg.Text = "";
            return true;
        }
        catch(Exception e)
        {
            this.ErrorMsg.Text = String.Format("Error: Unable to save Provider changes: {0}", e.Message);
            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Component\TextBoxUpdateControl.ascx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using Microsoft.Ems.Apps.Web.Editorial;
using System.Text;

public partial class TextBoxUpdateControl : System.Web.UI.UserControl
{
    protected void Page_Load(object sender, EventArgs e)
    {
        MediaLocale[] arrayMediaLocale = Session["ArrayMediaLocale"] as MediaLocale[];
        CatalogServices proxy = Constants.Proxy;

        if (!this.IsPostBack)
        {            
            string id = this.ID;
            Operation_Mode mode = Operation_Mode.Undefined;

            if (Session["OperationMode"] != null)
            {
                mode = (Operation_Mode)Session["OperationMode"];
            }

            Locale[] locales = proxy.GetLocale();

            if (id.Equals("TextBoxUpdateLocale"))
            {
                this.TextBoxLableReplaceMe.Text = "Locale(s)";
                this.TextBoxLableReplaceMe.Font.Bold = true;

                if (mode != Operation_Mode.Add)
                {
                    Locale[] arrayLocale = new Locale[arrayMediaLocale.Length];
                    for (int i = 0; i < arrayLocale.Length; i++)
                    {
                        arrayLocale[i] = new Locale();
                        arrayLocale[i].LCID = arrayMediaLocale[i].Lcid;
                        Locale locale = (Array.Find(locales, delegate(Locale l) { return l.LCID == arrayMediaLocale[i].Lcid; }));
                        string localeCode = locale.LocaleCode;                            
                        arrayLocale[i].LocaleCode = localeCode;
                    }

                    ListBox listbox = this.MainTextBox;
                    listbox.DataSource = arrayLocale;
                    listbox.DataMember = "LCID";
                    listbox.DataValueField = "LCID";
                    listbox.DataTextField = "LocaleCode";
                    listbox.DataBind();
                }
            }
            else if (id.Equals("TextBoxVideInstance"))
            {
                this.TextBoxLableReplaceMe.Text = "Video Instance";
                this.MainTextBox.Width = 450;

                DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                                            as DoubleListBoxControl;
                if (horizontalAddRemoveControl != null)
                {
                    Label labelTitle = horizontalAddRemoveControl.FindControl("LabelTitle") as Label;
                    if (labelTitle != null)
                    {
                        labelTitle.Text = "Soundtrack Language(s)";
                    }
                }

               // if (mode == Operation_Mode.Edit)
                {
                    Video video = Session["Video"] as Video;
                    if (video != null)
                    {
                        MediaInstance[] arrayMediaInstance = video.Instances;
                        Session["VideoInstances"] = arrayMediaInstance;

                        if (arrayMediaInstance != null)
                        {
                            foreach (MediaInstance mi in arrayMediaInstance)
                            {
                                ListItem item = new ListItem();
                                item.Value = (mi as VideoInstance).Id.ToString();


                                item.Text = DisplayHelper.BuildRepresentStringForVideoInstance((VideoInstance)mi, locales);

                                this.MainTextBox.Items.Add(item);
                            }
                        }
                    }
                }

                Session["VideoInstanceChanged"] = false;
            }
            else if (id.Equals("TextBoxSubtitleOverlay"))
            {
                this.TextBoxLableReplaceMe.Text = "Subtitle Overlay File(s)";
            }
            else if (ID.Equals("CategoriesControl"))
            {
                this.TextBoxLableReplaceMe.Text = "Categories";
                Video video = Session["Video"] as Video;
                MediaCategory[] mediaCategory = video.Categories;
                CategorySystem[] categorySystem = proxy.GetCategorySystem();
            }
            else if (ID.Equals("TextBoxUpdateControlPreview"))
            {
                this.TextBoxUpdate.Width = 350;
                this.TextBoxUpdate.Height = 80;
                this.TextBoxCell.Width = 250;
                this.TextBoxCell.Height = 100;
                this.MainTextBox.Width = 250;
                this.MainTextBox.Height = 100;
                this.TextBoxLableReplaceMe.Text = "Previews";
            }
            else if (this.ID.Equals("TextBoxUpdateControlProviderTerms"))
            {
                TextBoxLableReplaceMe.Text = "Provider Terms";
                VideoSeason season = Session["VideoSeason"] as VideoSeason;
                if (season != null)
                {
                    int providerId = season.MetadataProviderId;

                    Provider[] providers = Session["Proviers"] as Provider[];

                    if (providers == null)
                    {
                        providers = proxy.GetProvider();
                    }

                    foreach (Provider p in providers)
                    {
                        if (p.Id == providerId)
                        {
                            this.MainTextBox.Items.Add(new ListItem(p.Name));
                        }
                    }

                }
            }
            else if (this.ID.Equals("TextBoxUpdateControlSeasons"))
            {
                TextBoxLableReplaceMe.Text = "Seasons";
            }
            else if (this.ID.Equals("TextBoxUpdateControlEpisodes"))
            {
                TextBoxLableReplaceMe.Text = "Episodes";
            }


            if (this.MainTextBox.Items.Count > 0)
            {
                this.MainTextBox.SelectedIndex = 0;
                MainTextBox_OnSelectedIndexChanged(this.MainTextBox, null);
            }
        }
    }


    public void Enable(bool enable)
    {
        this.MainTextBox.Enabled = enable;
        this.ButtonPlus.Enabled = enable;
        this.ButtonEdit.Enabled = enable;
        this.ButtonDelete.Enabled = enable;
        this.TextBoxLableReplaceMe.Enabled = enable;
    }

    public void MainTextBox_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            Locale_OnSelectedIndexChanged(sender, e);
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            VideInstance_OnSelectedIndexChanged(sender, e);
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            SubtitleOverlay_OnSelectedIndexChanged(sender, e);
        }
    }

    private void VideoFile_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        ListBox listbox = sender as ListBox;
        if (listbox.SelectedItem != null)
        {
            TextBox TextBoxVideoFileGuid = base.Parent.FindControl("TextBoxVideoFileGuid") as TextBox;
            TextBoxVideoFileGuid.Text = listbox.SelectedItem.Value;
//            DropDownList dropdownListLanguage = base.Parent.FindControl("DropDownListLang") as DropDownList;
            //foreach (ListItem li in dropdownListLanguage.Items)
            //    li.Selected = false;
            //dropdownListLanguage.Items.FindByText(listbox.SelectedItem.Text).Selected = true;
            UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                         as UpdatePanel;
            if (updatePanelVideoInstanceControl != null)
            {
                updatePanelVideoInstanceControl.Update();
            }
            ListBox listBox1 = base.Parent.FindControl("TextBoxVideInstance").FindControl("MainTextBox") as ListBox;

            Guid MediaInstanceID = new Guid(listBox1.SelectedValue);
            string id =  (sender as ListBox).SelectedItem.Text;

            Guid viId = new Guid(id);

            MediaInstance vi = Array.Find((MediaInstance[])Session["VideoInstances"], delegate(MediaInstance mi) { return mi.Id.Equals(MediaInstanceID); });
            if (vi == null)
                return;

            VideoFile vf = Array.Find(((VideoInstance)(vi)).VideoFiles, delegate(VideoFile vftmp) { return vftmp.Id.Equals(viId); });

            if (vf == null)
                return;

            TextBox TextBoxVideoFileURL = base.Parent.FindControl("TextBoxVideoFileURL") as TextBox;
            TextBoxVideoFileURL.Text = vf.FileUrl;

            TextBox TextBoxFileSize = base.Parent.FindControl("TextBoxFileSize") as TextBox;
            TextBoxFileSize.Text = vf.Size.ToString();
        }
    }

    public void ButtonPlus_OnClick(object sender, EventArgs e)
    {
        if (Session["EnterUserInputModalMode_ActiveTabNumber"] == null)
        {
            Response.Redirect("Default.aspx");
        }

        Enable(false);

        Session["OPERATION_MODE"] = Operation_Mode.Add;

        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            UpdatePanelModeAdjust();
            // disselect main textbox
            if (this.MainTextBox.SelectedItem != null)
            {
                this.MainTextBox.SelectedItem.Selected = false;
            }
            this.MainTextBox.Enabled = false;

            // enable DropDownListLocale
            DropDownList dropDownListLocale = base.Parent.FindControl("DropDownListLocale")
                                                        as DropDownList;
            if (dropDownListLocale != null)
            {
                //Session["ArrayLocaleAll"]
                // remove locales which already exiting in main textbox.

                for (int i = 0; i < this.MainTextBox.Items.Count; i++)
                {
                    ListItem item = this.MainTextBox.Items[i];
                    if (dropDownListLocale.Items.Contains(item))
                    {
                        dropDownListLocale.Items.Remove(item);
                    }
                }

                dropDownListLocale.Visible = true;

                Label labelLocaleSystem = base.Parent.FindControl("LabelLocaleSystem") as Label;
                labelLocaleSystem.Visible = true;
            }

            // enable SaveLocalButton
            ToggleControlAttributes();
            // popupate TextBoxRight
            PrepareEditArea();

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];

            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 2;

            // EditingMediaLoale is checked to determine if we are editing or adding. When adding it should be set to null
            Session["EditingMediaLoale"] = null;
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = true;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Text=string.Empty;

            Button btnSaveVideoSubtitle = base.Parent.FindControl("ButtonSaveSubtitleURL") as Button;
            btnSaveVideoSubtitle.Enabled = true;

            Button btnCancelSaveVideoSubtitle = base.Parent.FindControl("BtnCancelSaveSubtitleURL") as Button;
            btnCancelSaveVideoSubtitle.Enabled = true;

            Enable(false);
            this.TextBoxLableReplaceMe.Enabled = true;

            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = true;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Enabled = true;

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelVideoInstanceControl") as UpdatePanel;
            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            Session["fileName"] = null;
            MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

            Guid viId = Guid.NewGuid();
            MainTextBox.Items.Add(new ListItem(viId.ToString(), viId.ToString()));
            MainTextBox.SelectedIndex = -1;
            MainTextBox.Items.FindByText(viId.ToString()).Selected = true;
            VideoInstance vi = new VideoInstance();
            vi.Id = viId;
            vi.Modified = InsertDataChangeType.Add;
            vi.AudioTrackLanguages = new VideoAudioTrackLanguage[0];
            vi.Subtitles = new VideoSubtitle[0];
            vi.VideoFiles = new VideoFile[0];
            vi.IsAcquirable = true;
            vi.IsPreview = false;
            vi.AudioEncodingId = 1;
            vi.VideoDefinitionId = 1;
            vi.AudioEncodingId = 1;
            vi.VideoEncodingId = 8;
            vi.VideoBitRate = -1;
            vi.VideoAspectRatio = "1.19:1";
            vi.VideoResolution = "240i";
            vi.Enabled = true;
            vi.IsDRM = true;

            MediaInstance[] mList = DisplayHelper.ArrayItemAdd(mediaInstances, (MediaInstance)vi);
            Session["VideoInstances"] = mList;
            Session["VideoInstanceIdAdding"] = vi.Id;
            Session["VideoInstanceAdd"] = true;
            if (vi != null)
            {
                PopulateDisplay(vi);
            }

            // 
            ButtonEdit_OnClick(null, null);
            Session["OPERATION_MODE"] = Operation_Mode.Add;
            
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Visible = true;
            }

            // enable "Save Video Instance" button
            Button btnSaveVideoInstance = base.Parent.FindControl("ButtonSaveVideoInstance") as Button;
            btnSaveVideoInstance.Enabled = true;

            Button btnCancelSaveVideoInstance = base.Parent.FindControl("BtnCancelSaveVideoInstance") as Button;
            btnCancelSaveVideoInstance.Enabled = true;
            
            UpdatePanel updatePanelpreviewData = base.Parent.FindControl("PreviewControlVideoInstance").FindControl("updatePanelPreview") as UpdatePanel;
            if (updatePanelpreviewData != null)
            {
                updatePanelpreviewData.Update();
            }

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelInstanceData") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            Enable(false);

            ((TableRow)(base.Parent.FindControl("TableRowVideoInstance"))).Enabled = true;


            
            // ButtonEdit_OnClick() increased counter already
            //int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            //Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
    }

    private void UpdatePanelModeAdjust()
    {
        UpdatePanel updatePanelLocaleControl = base.Parent.FindControl("updatePanelLocaleControl")
                                                as UpdatePanel;

        if (updatePanelLocaleControl != null)
        {
            updatePanelLocaleControl.ChildrenAsTriggers = true;
            updatePanelLocaleControl.UpdateMode = UpdatePanelUpdateMode.Always;
        }
    }

    private void PrepareEditArea()
    {
        DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                    as DoubleListBoxControl;

        if (horizontalAddRemoveControl != null)
        {
            horizontalAddRemoveControl.PopulateLocales();
        }

        ClearTextBoxes();
    }

    private void ClearTextBoxes()
    {
        TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }

        //
        textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
        if (textBox != null)
        {
            textBox.Text = string.Empty;
        }
    }

    public void ButtonEdit_OnClick(object sender, EventArgs e)
    {
        if ((this.MainTextBox.Items == null) || (this.MainTextBox.Items.Count == 0) || (this.MainTextBox.SelectedItem == null))
        {
            return;
        }

        if (Session["EnterUserInputModalMode_ActiveTabNumber"] == null)
        {
            Response.Redirect("Default.aspx");
        }

        Session["OPERATION_MODE"] = Operation_Mode.Edit;

        if (this.ID.Equals("TextBoxUpdateLocale"))
        {
            UpdatePanelModeAdjust();
            if (this.MainTextBox.SelectedItem != null)
            {
                // enable buttons - Add/Edit. change attributs of other controls
                ToggleControlAttributes();
                this.ButtonEdit.Enabled = false;
                this.ButtonEdit.ImageUrl = "~/Images/Edit_Gray.gif";
                Enable(false);

                int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
                Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 2;
            }
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            Session["VideoInstanceChanged"] = true;
            // enable "Add"/"Remove buttons", 
            DoubleListBoxControl doubleListBoxControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                            as DoubleListBoxControl;

            if (doubleListBoxControl != null)
            {
                Button add = doubleListBoxControl.FindControl("ButtonAdd") as Button;
                if (add != null)
                {
                    add.Enabled = true;
                }

                Button remove = doubleListBoxControl.FindControl("ButtonRemove") as Button;
                remove.Enabled = true;
            }

            // enable "Save Video Instance" button
            Button btnSaveVideoInstance = base.Parent.FindControl("ButtonSaveVideoInstance") as Button;
            btnSaveVideoInstance.Enabled = true;

            Button btnCancelSaveVideoInstance = base.Parent.FindControl("BtnCancelSaveVideoInstance") as Button;
            btnCancelSaveVideoInstance.Enabled = true;

            ((TableRow)(base.Parent.FindControl("TableRowSpokenLanguage"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowEmbeddedSubtitles"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowVideoInstanceInfo"))).Enabled = true;
            ((TableRow)(base.Parent.FindControl("TableRowVideoInstance"))).Enabled = true;
            this.Enable(false);
            this.updatePanelTextBoxUpdate.Update();

            UpdatePanel updatePanelDoubleListBox = base.Parent.FindControl("updatePanelDoubleListBox") as UpdatePanel;
            VideInstance_OnSelectedIndexChanged(this.MainTextBox, null);
            if (updatePanelDoubleListBox != null)
            {
                updatePanelDoubleListBox.Update();
            }

            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelInstanceData") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];

            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
        else if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            Button btnSaveVideoSubtitle = base.Parent.FindControl("ButtonSaveSubtitleURL") as Button;
            btnSaveVideoSubtitle.Enabled = true;


            Button btnCancelSaveSubtitleURL = base.Parent.FindControl("BtnCancelSaveSubtitleURL") as Button;
            btnCancelSaveSubtitleURL.Enabled = true;

            ((DropDownList)(base.Parent.FindControl("DropDownListLang"))).Enabled = false;
            ((TextBox)(base.Parent.FindControl("SubtitleURL"))).Enabled = true;
            Enable(false);

            // MainTextBox.Enabled = false;
            UpdatePanel updatePanelInstanceData = base.Parent.FindControl("updatePanelVideoInstanceControl") as UpdatePanel;

            if (updatePanelInstanceData != null)
            {
                updatePanelInstanceData.Update();
            }

            int modalTabCount = (int)Session["EnterUserInputModalMode_ActiveTabNumber"];
            Session["EnterUserInputModalMode_ActiveTabNumber"] = modalTabCount + 8;
        }
    }

    public void ToggleControlAttributes()
    {
        DoubleListBoxControl horizontalControl = base.Parent.FindControl("DoubleListBoxControl")
                                                            as DoubleListBoxControl;
        if (horizontalControl != null)
        {
            Button buttonAdd = horizontalControl.FindControl("ButtonAdd") as Button;
            if (buttonAdd != null)
            {
                buttonAdd.Enabled = !buttonAdd.Enabled;
            }

            Button buttonRemove = horizontalControl.FindControl("ButtonRemove") as Button;
            if (buttonRemove != null)
            {
                buttonRemove.Enabled = !buttonRemove.Enabled;
            }
        }


        TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        //
        textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
        if (textBox != null)
        {
            textBox.ReadOnly = !textBox.ReadOnly;
        }

        Button buttonSave = base.Parent.FindControl("SaveLocalButton") as Button;
        if (buttonSave != null)
        {
            buttonSave.Enabled = !buttonSave.Enabled;
        }

        Button buttonCancel = base.Parent.FindControl("BtnCancel") as Button;
        if (buttonCancel != null)
        {
            buttonCancel.Enabled = !buttonCancel.Enabled;
        }
        Button ButtonGenerateReducedDescription = base.Parent.FindControl("ButtonGenerateReducedDescription") as Button;
        if (ButtonGenerateReducedDescription != null)
        {
            ButtonGenerateReducedDescription.Enabled = !ButtonGenerateReducedDescription.Enabled;
        }


    }

    public void ButtonDelete_OnClick(object sender, EventArgs e)
    {
        int lcid;

        Session["OPERATION_MODE"] = Operation_Mode.Delete;

        if (int.TryParse(this.MainTextBox.SelectedValue, out lcid))
        {
            UpdatePanelModeAdjust();

            MediaLocale[] mediaLocales = Session["ArrayMediaLocale"] as MediaLocale[];
            MediaLocale[] mediaLocalesNew;

            if (mediaLocales != null)
            {
                if (mediaLocales.Length <= 1)
                {
                    mediaLocalesNew = null;
                }
                else
                {
                    mediaLocalesNew = new MediaLocale[mediaLocales.Length - 1];

                    int j = 0;
                    for (int i = 0; i < mediaLocales.Length; i++)
                    {
                        if (!mediaLocales[i].Lcid.Equals(lcid))
                        {
                            mediaLocalesNew[j++] = mediaLocales[i];
                        }
                    }
                }

                Session["ArrayMediaLocale"] = mediaLocalesNew;
                Session["ArrayMediaLocaleEverChanged"] = true;
            }

            // 1. add it back to Language drop down list.
            DropDownList dropDownListLocale = base.Parent.FindControl("DropDownListLocale")
                                                        as DropDownList;
            if (dropDownListLocale != null)
            {
                if (this.MainTextBox.SelectedItem != null)
                {
                    ListItem item = new ListItem();
                    item.Text = this.MainTextBox.SelectedItem.Text;
                    item.Value = this.MainTextBox.SelectedItem.Value;

                    if (!dropDownListLocale.Items.Contains(item))
                    {
                        dropDownListLocale.Items.Add(item);
                    }
                }
            }

            // 2. remove selected locale from listbox
            ListBox listboxLocale = this.MainTextBox;
            if (this.MainTextBox.SelectedItem != null)
            {
                listboxLocale.Items.Remove(this.MainTextBox.SelectedItem);
            }

            // 3. clean up all text box
            ClearTextBoxes();
            // 4. diable save button
            Button saveLocalButton = base.Parent.FindControl("SaveLocalButton") as Button;
            if (saveLocalButton != null)
            {
                saveLocalButton.Enabled = false;
            }

            // 5.reset mapped locales
            DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                        as DoubleListBoxControl;
            if (horizontalAddRemoveControl != null)
            {
                ListBox listboxLeft = horizontalAddRemoveControl.FindControl("TextBoxLeft") as ListBox;
                if (listboxLeft != null)
                {
                    listboxLeft.Items.Clear();
                }
                ListBox listboxRight = horizontalAddRemoveControl.FindControl("TextBoxRight") as ListBox;
                if (listboxRight != null)
                {
                    listboxRight.Items.Clear();
                }
            }
        }
        if (this.ID.Equals("TextBoxSubtitleOverlay"))
        {
            ListBox listBox = base.Parent.FindControl("TextBoxVideInstance").FindControl("MainTextBox") as ListBox;
            MediaInstance[] vis = Session["VideoInstances"] as MediaInstance[];
            Guid miId = new Guid(listBox.SelectedValue);
            VideoInstance miSelected = (VideoInstance)(Array.Find(vis, delegate(MediaInstance mi) { return mi.Id.Equals(miId); }));

            if ((this.MainTextBox.Items.Count > 0) && (this.MainTextBox.SelectedItem != null))
            {
                VideoSubtitle vstmp = Array.Find(miSelected.Subtitles,
                delegate(VideoSubtitle vs)
                {
                    return vs.LanguageCode.Equals(MainTextBox.SelectedItem.Text);
                });

                vstmp.Modified = DataChangeType.Delete;
                this.MainTextBox.Items.Remove(this.MainTextBox.SelectedItem);
                // clean up
                TextBox textBoxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;

                if (textBoxUrl != null)
                {
                    textBoxUrl.Text = string.Empty;
                }

                UpdatePanel updatePanelSubtitle = base.Parent.FindControl("UpdatePanelSubtitle") as UpdatePanel;

                if (updatePanelSubtitle != null)
                {
                    updatePanelSubtitle.Update();
                }

                updatePanelTextBoxUpdate.Update();
            }
        }
        else if (this.ID.Equals("TextBoxVideInstance"))
        {
            MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

            if (mediaInstances != null)
            {
                if ((this.MainTextBox.Items.Count > 0) && (this.MainTextBox.SelectedItem != null))
                {
                    string id = this.MainTextBox.SelectedValue;
                    Guid viId = new Guid(id);
                    VideoInstance vi = null;

                    // Look for the video instance
                    foreach (VideoInstance videoInstance in mediaInstances)
                    {
                        if (videoInstance.Id.Equals(viId))
                        {
                            vi = videoInstance;
                            break;
                        }
                    }

                    // If we found it, and it was to be added remove it from the video instance list
                    if (vi != null && vi.Modified == InsertDataChangeType.Add)
                    {
                        mediaInstances = DisplayHelper.ArrayItemRemove(mediaInstances, (MediaInstance)vi);
                        Session["VideoInstances"] = mediaInstances;
                        this.MainTextBox.Items.Remove(this.MainTextBox.SelectedItem);
                        updatePanelTextBoxUpdate.Update();
                    }
                    else
                    {
                        MessageBox.Show("Unable to delete video instance that is already submitted");
                    }
                }
            }
        }
    }

    public static event EventHandler BubbleClick;


    private void Locale_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (BubbleClick != null)
        {
            // BubbleClick(sender, e);
        }
        // lets try to post data to "updatePanelLocaleControl"
        UpdatePanel updatePanelLocaleControl = base.Parent.FindControl("updatePanelLocaleControl")
                                                as UpdatePanel;

        if (updatePanelLocaleControl != null)
        {
            updatePanelLocaleControl.ChildrenAsTriggers = true;
            updatePanelLocaleControl.UpdateMode = UpdatePanelUpdateMode.Always;
        }

        ListBox listBoxLocale = (ListBox)sender;

        int lcid;
        if (int.TryParse(listBoxLocale.SelectedValue, out lcid))
        {
            MediaLocale[] arrayMediaLocale = Session["ArrayMediaLocale"] as MediaLocale[];

            //Master_Menu_Item menuItem = (Master_Menu_Item)Session["Master_Menu_Item"];
            //if (menuItem == Master_Menu_Item.Master_Menu_VideoSeries)
            //{
                //arrayMediaLocale = Session["ArrayMediaLocaleVideoSeries"] as MediaLocale[];
            //}
            //else if (menuItem == Master_Menu_Item.Master_Menu_VideoSeason)
            //{
                //arrayMediaLocale = Session["ArrayMediaLocaleVideoSeason"] as MediaLocale[];
            //}

            MediaLocale mediaLocale = null;

            if (arrayMediaLocale != null)
            {
                foreach (MediaLocale ml in arrayMediaLocale)
                {   // this is ok since there are not many entries here.
                    if (ml.Lcid == lcid)
                    {
                        mediaLocale = ml;
                        break;
                    }
                }
            }

            if (mediaLocale != null)
            {
                Session["EditingMediaLoale"] = mediaLocale;
                //
                TextBox textBox = base.Parent.FindControl("titleBox") as TextBox;
                textBox.Text = mediaLocale.Title;

                //
                textBox = base.Parent.FindControl("reducedTitleBox") as TextBox;
                textBox.Text = mediaLocale.ReducedTitle;

                //
                textBox = base.Parent.FindControl("SortTitleBox") as TextBox;
                textBox.Text = mediaLocale.TitleSort;

                //
                textBox = base.Parent.FindControl("DescriptionBox") as TextBox;
                textBox.Text = mediaLocale.Description;

                //
                textBox = base.Parent.FindControl("reducedDescriptionBox") as TextBox;
                textBox.Text = mediaLocale.ReducedDescription;

                //
                textBox = base.Parent.FindControl("copyrightTextBox") as TextBox;
                textBox.Text = mediaLocale.Copyright;

                // deal with mapped locales

                DoubleListBoxControl doubleListBoxControl = base.Parent.FindControl("DoubleListBoxControl")
                                                                            as DoubleListBoxControl;
                MediaLocaleMap[] mediaLocaleMap = mediaLocale.MappedLcids;
                CatalogServices proxy = Constants.Proxy;
                Locale[] locales = proxy.GetLocale();
                // build locale from arrayLocaleAll and arrayMediaLocale.
                Locale[] arrayLocale = new Locale[mediaLocaleMap.Length];
                for (int i = 0; i < mediaLocaleMap.Length; i++)
                {
                    arrayLocale[i] = new Locale();
                    arrayLocale[i].LCID = mediaLocaleMap[i].Lcid;
                    Locale locale = Array.Find(locales, delegate(Locale l) { return (l.LCID == mediaLocaleMap[i].Lcid); });
                    arrayLocale[i].LocaleCode = locale.LocaleCode;
                }

                //doubleListBoxControl = arrayLocale;
                doubleListBoxControl.OnDataBound<Locale>(arrayLocale);                 
            }
        }
    }

    private void VideInstance_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        MediaInstance[] mediaInstances = Session["VideoInstances"] as MediaInstance[];

        if (mediaInstances == null)
        {
            // clean up controls
        }
        else
        {
            if ((sender as ListBox).SelectedItem == null)
                return;

            string id =  (sender as ListBox).SelectedValue;

            Guid viId = new Guid(id);
            
            //VideoInstance vi = mediaInstances[indexSelected] as VideoInstance;
            VideoInstance vi = null;

            foreach (VideoInstance videoInstance in mediaInstances)
            {
                if (videoInstance.Id.Equals(viId))
                {
                    vi = videoInstance;
                    break;
                }
            }

            Session["VideoInstanceIdUpdating"] = vi.Id;

            if (vi != null)
            {
                PopulateDisplay(vi);
            }
        }
    }

    public void PopulateDisplay(VideoInstance vi)
    {
        Debug.Assert(vi != null);
        CatalogServices proxy = Constants.Proxy;
        // spoken languages
        DoubleListBoxControl horizontalAddRemoveControl = base.Parent.FindControl("DoubleListBoxVideoInstance")
                                                               as DoubleListBoxControl;
        if (horizontalAddRemoveControl != null)
        {
            //VideoAudioTrackLanguage[] vuTrackLanguage = vi.AudioTrackLanguages;
            VideoAudioTrackLanguage[] vuTrackLanguage = Array.FindAll(vi.AudioTrackLanguages, delegate(VideoAudioTrackLanguage vatl)
            { return vatl.Modified != DataChangeType.Delete; });

            horizontalAddRemoveControl.OnDataBound<VideoAudioTrackLanguage>(vuTrackLanguage);
        }

        CheckBox CheckBoxIsAcquirable = base.Parent.FindControl("CheckBoxIsAcquirable") as CheckBox;
        CheckBoxIsAcquirable.Checked = vi.IsAcquirable;

        DropDownList dropDownListAudioChannel = base.Parent.FindControl("DropDownListAudioChannel") as DropDownList;
        if (dropDownListAudioChannel != null)
        {
            if (!string.IsNullOrEmpty(vi.AudioChannel))
            {
                dropDownListAudioChannel.SelectedValue = vi.AudioChannel;
            }
            else
            {
                dropDownListAudioChannel.SelectedValue = "None";
            }
        }


        // embeded subtitles
        int? burnLcid = vi.BurntInSubtitleLcid;
        DropDownList dropDownListEmbeddedTitle = base.Parent.FindControl("DropDownListEmbedded") as DropDownList;
        if (dropDownListEmbeddedTitle != null)
        {
            List<Locale> localeList = new List<Locale>(Constants.Proxy.GetLocale());
            Locale tmpLocale = new Locale();

            tmpLocale.LCID = 99999;
            tmpLocale.LocaleCode = "None";
            localeList.Add(tmpLocale);
            dropDownListEmbeddedTitle.DataSource = localeList.ToArray();
            dropDownListEmbeddedTitle.DataTextField = "LocaleCode";
            dropDownListEmbeddedTitle.DataValueField = "LCID";
            dropDownListEmbeddedTitle.DataBind();
            if (burnLcid != -1 && burnLcid!=null)
                dropDownListEmbeddedTitle.SelectedValue=burnLcid.ToString();
            else
                dropDownListEmbeddedTitle.SelectedValue="99999";
        }
       
        // subtitle
        VideoSubtitle[] subtitles = vi.Subtitles;
        DropDownList dropDownListLang = base.Parent.FindControl("DropDownListLang") as DropDownList;

        List<VideoSubtitle> videoSubtitle = new List<VideoSubtitle>();
        foreach (VideoSubtitle vst in vi.Subtitles)
        {
            if (vst.Modified != DataChangeType.Delete)
            {
                ListItem item = new ListItem();
                item.Text = vst.LanguageCode;
                item.Value = vst.LanguageCode;

                if (dropDownListLang.Items.Contains(item))
                {
                    videoSubtitle.Add(vst);
                }
            }
        }

        TextBoxUpdateControl textBoxUpdateControl = base.Parent.FindControl("TextBoxSubtitleOverlay") as TextBoxUpdateControl;
        textBoxUpdateControl.MainTextBox.DataSource = videoSubtitle;
        textBoxUpdateControl.MainTextBox.DataValueField = "FileUrl";
        textBoxUpdateControl.MainTextBox.DataTextField = "LanguageCode";
        textBoxUpdateControl.MainTextBox.DataBind();


        TextBox TextBoxVideoInstanceID = base.Parent.FindControl("TextBoxVideoInstanceID") as TextBox;
        TextBoxVideoInstanceID.Text = vi.Id.ToString();


        TextBox textBoxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;

        if ((videoSubtitle != null) && (videoSubtitle.Count > 0))
        {
            textBoxUpdateControl.MainTextBox.SelectedIndex = 0;

            ListItem item = new ListItem();
            item.Text = videoSubtitle[0].LanguageCode;
            item.Value = videoSubtitle[0].LanguageCode;

            if (dropDownListLang.Items.Contains(item))
            {
                dropDownListLang.Text = videoSubtitle[0].LanguageCode;
            }

            textBoxUrl.Text = videoSubtitle[0].FileUrl;
        }
        else
        {
            textBoxUrl.Text = string.Empty;
        }

        Session["ArrayVideoSubtitle"] = videoSubtitle;


        //video files
        // subtitle        

        List<VideoFile> videoFiles = new List<VideoFile>();
        foreach (VideoFile vf in vi.VideoFiles)
        {
            if (vf.Modified != DataChangeType.Delete)
            {
                videoFiles.Add(vf);
            }
        }

        TextBox textBoxVideoFileGuid = base.Parent.FindControl("TextBoxVideoFileGuid") as TextBox;
        TextBox textBoxVideoFileURL = base.Parent.FindControl("TextBoxVideoFileURL") as TextBox;
        TextBox textBoxFileSize = base.Parent.FindControl("TextBoxFileSize") as TextBox;

        if ((videoFiles != null) && (videoFiles.Count > 0))
        {
            textBoxVideoFileGuid.Text = videoFiles[0].Id.ToString();
            textBoxVideoFileURL.Text = videoFiles[0].FileUrl;
            textBoxFileSize.Text = videoFiles[0].Size.ToString();
        }
        else
        {
            textBoxVideoFileGuid.Text = string.Empty;
            textBoxVideoFileURL.Text = string.Empty;
            textBoxFileSize.Text =  string.Empty;
        }
       
        

        // finish AP Supported, DRM, Audio Encoding ...
        CheckBox checkBoxIsAdSupported = base.Parent.FindControl("CheckBoxAdSupported") as CheckBox;
        if (checkBoxIsAdSupported != null)
        {
            checkBoxIsAdSupported.Checked = vi.IsAdSupported;
        }

        CheckBox checkBoxIsDRM = base.Parent.FindControl("CheckBoxDRM") as CheckBox;
        if (checkBoxIsDRM != null)
        {
            checkBoxIsDRM.Checked = vi.IsDRM;
        }

        CheckBox enableVideoInstance = base.Parent.FindControl("EnableVideoInstance") as CheckBox;
        if (enableVideoInstance != null)
        {
            enableVideoInstance.Checked = vi.Enabled;
        }

        // audio encoding
        AudioEncoding[] audioEncoding = proxy.GetAudioEncoding();
        DropDownList dropDownListAudioEncoding = base.Parent.FindControl("DropDownListAudioEncoding") as DropDownList;
        if (dropDownListAudioEncoding != null)
        {
            dropDownListAudioEncoding.DataSource = audioEncoding;
            dropDownListAudioEncoding.DataValueField = "Id";
            dropDownListAudioEncoding.DataTextField = "Name";
            dropDownListAudioEncoding.DataBind();
            dropDownListAudioEncoding.SelectedValue = vi.AudioEncodingId.ToString();
        }

        // audio sampling rate
        TextBox textBoxAudioSamplingRate = base.Parent.FindControl("TextBoxAudioSamplingRate") as TextBox;
        if (textBoxAudioSamplingRate != null)
        {
            if (vi.AudioSamplingRate != null)
            {
                textBoxAudioSamplingRate.Text = vi.AudioSamplingRate.ToString();
            }
        }

        // audio bit rate
        int? audioBitRate = vi.AudioBitRate;
        TextBox textBoxAudioBitRate = base.Parent.FindControl("TextBoxAudioBitRate") as TextBox;
        if (textBoxAudioBitRate != null)
        {
            if (audioBitRate != null)
            {
                textBoxAudioBitRate.Text = audioBitRate.ToString();
            }
        }
        // video definition
        DropDownList dropDownListVideoDefinition = base.Parent.FindControl("DropDownListVideoDefinition")
                                                        as DropDownList;
        if (dropDownListVideoDefinition != null)
        {
            VideoDefinition[] arrayVideoDefinition = proxy.GetVideoDefinition();
            dropDownListVideoDefinition.DataSource = arrayVideoDefinition;
            dropDownListVideoDefinition.DataValueField = "Id";
            dropDownListVideoDefinition.DataTextField = "Name";
            dropDownListVideoDefinition.DataValueField = "Id";
            dropDownListVideoDefinition.DataBind();
            dropDownListVideoDefinition.SelectedIndex = -1;
            foreach (ListItem li in dropDownListVideoDefinition.Items)
                li.Selected = false;
            dropDownListVideoDefinition.SelectedValue=vi.VideoDefinitionId.ToString();
            
        }

        // video aspect ration
        DropDownList dropDownListVideoAspectRatio = base.Parent.FindControl("DropDownListVideoAspectRatio") as DropDownList;
        if (dropDownListVideoAspectRatio != null)
        {
            foreach(ListItem li in dropDownListVideoAspectRatio.Items)
                li.Selected = false;
            dropDownListVideoAspectRatio.SelectedValue = vi.VideoAspectRatio;
        }


        DropDownList dropDownListVideoResolution = base.Parent.FindControl("DropDownListVideoResolution") as DropDownList;
        if (dropDownListVideoResolution != null)
        {
            dropDownListVideoResolution.SelectedValue = vi.VideoResolution;
        }

        //
        VideoEncoding[] arrayVideoEncoding = proxy.GetVideoEncoding();
        DropDownList dropDownListVideoEncodingType = base.Parent.FindControl("DropDownListVideoEncodingType")
                                                        as DropDownList;
        if (dropDownListVideoEncodingType != null)
        {
            dropDownListVideoEncodingType.DataSource = arrayVideoEncoding;
            dropDownListVideoEncodingType.DataValueField = "Id";
            dropDownListVideoEncodingType.DataTextField = "Name";
            dropDownListVideoEncodingType.DataBind();
        }
        // video bit rate
        TextBox textBoxVideoBitRate = base.Parent.FindControl("TextBoxVideoBitRate") as TextBox;
        if (textBoxVideoBitRate != null)
        {
            textBoxVideoBitRate.Text = vi.VideoBitRate.ToString();
        }
        // video frame rate
        TextBox textBoxVideoFrameRate = base.Parent.FindControl("TextBoxVideoFrameRate") as TextBox;
        if (textBoxVideoFrameRate != null)
        {
            if (vi.VideoFrame != null)
            {
                textBoxVideoFrameRate.Text = vi.VideoFrame.Value.ToString();
            }
        }

        // Preview
        CheckBox CheckBoxIsPreview = base.Parent.FindControl("CheckBoxIsPreview") as CheckBox;
        CheckBoxIsPreview.Checked = vi.IsPreview;
        PreviewControl previewControlVideoInstance = base.Parent.FindControl("PreviewControlVideoInstance")
                                                               as PreviewControl;

        
    
        if (vi.IsPreview)
        {
            // make preview control invisible.
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Enabled= true;
            }
            
            PreviewMediaInstance pmi = vi.Preview;

            if ((pmi != null) && (previewControlVideoInstance != null))
            {
                previewControlVideoInstance.PopulateControls(pmi);
            }
        }
        else
        {
            previewControlVideoInstance.PopulateControls(null);
            // make preview control invisible.
            TableRow rowPreviewControlVideoInstance = base.Parent.FindControl("RowPreviewControlVideoInstance")
                                                            as TableRow;

            if (rowPreviewControlVideoInstance != null)
            {
                rowPreviewControlVideoInstance.Enabled= false;
            }
        }

        UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                        as UpdatePanel;
        if (updatePanelVideoInstanceControl != null)
        {
            updatePanelVideoInstanceControl.Update();
        }
    }

    private void SubtitleOverlay_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        ListBox listbox = sender as ListBox;
        if (listbox.SelectedItem != null)
        {
            TextBox textboxUrl = base.Parent.FindControl("SubtitleURL") as TextBox;
            textboxUrl.Text = listbox.SelectedItem.Value;
            DropDownList dropdownListLanguage = base.Parent.FindControl("DropDownListLang") as DropDownList;
            foreach (ListItem li in dropdownListLanguage.Items)
                li.Selected = false;

            ListItem item = dropdownListLanguage.Items.FindByText(listbox.SelectedItem.Text);
            if (item != null)
            {
                item.Selected = true;
            }

            UpdatePanel updatePanelVideoInstanceControl = base.Parent.FindControl("updatePanelVideoInstanceControl")
                                                         as UpdatePanel;
            if (updatePanelVideoInstanceControl != null)
            {
                updatePanelVideoInstanceControl.Update();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\CatalogServices.asmx.cs ===
#define TRACE

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Web;
using System.Web.Caching;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Configuration;

using WebServiceUtils = Microsoft.Ems.Apps.Web.WebServiceUtils;
using xonline.common.service;
using xonline.common.installer;
using xonline.common.config;

using Microsoft.Ems.Common.Utils;
using Microsoft.Ems.Common.Catalog;
using Microsoft.Ems.Apps.Web.CatalogWebService;
using Catalog = Microsoft.Ems.Common.Catalog;



[assembly: XomIisInstallerAttribute(Interface.contentIngestion)]
[assembly: ConfigAttribute("ContentIngestionService")]


namespace Microsoft.Ems.Apps.Web.CatalogWebService
{
    /// <summary>
    /// Summary description for MediaService.
    /// </summary>
    [WebService(Namespace = "http://www.microsoft.com/ems/CatalogWebService/",
               Description = "EMS Catalog Web Service for Image, Podcast, Video")]
    [WebServiceBinding(ConformsTo = WsiProfiles.None)]
    public class CatalogServices : System.Web.Services.WebService
    {
        #region Constants

        protected const int MAX_ARTICLES        = 500;
        protected const int MAX_CONTRIBUTORS    = 500;
        #endregion

        /// <summary>
        /// This method checks the health of the EMS Catalog Web Service and databases
        /// </summary>
        /// <remarks>This method must not catch any exception and let the error bubble up</remarks>
        /// <returns></returns>
        [CheckApiExtension]        
        [WebMethod(MessageName = "Ping")]
        public string Ping()
        {
            string info = string.Format("CatalogDBInfo: {0};",
                Catalog.CatalogDatabase.Ping());
            return info;
        }
        
        /// <summary>
        /// Invokes search for the specific media type.
        /// </summary>
        /// <param name="request"></param>
        /// <returns>Catalog.Response[]</returns>
        [CheckApiExtension]
        [WebMethod]
        [XmlInclude(typeof(Catalog.ContributorResponse))]
        [XmlInclude(typeof(Catalog.ContributorRequest))]
        [XmlInclude(typeof(Catalog.OfferSearchRequest))]
        [XmlInclude(typeof(Catalog.OfferSearchResponse))]
        [XmlInclude(typeof(Catalog.VideoSearchRequest))]
        [XmlInclude(typeof(Catalog.VideoSearchResponse))]
        [XmlInclude(typeof(Catalog.VideoSeasonSearchRequest))]
        [XmlInclude(typeof(Catalog.VideoSeasonSearchResponse))]
        [XmlInclude(typeof(Catalog.VideoSeriesSearchRequest))]
        [XmlInclude(typeof(Catalog.VideoSeriesSearchResponse))]
        [XmlInclude(typeof(Catalog.PodcastSearchRequest))]
        [XmlInclude(typeof(Catalog.PodcastSearchResponse))]
        [XmlInclude(typeof(Catalog.ImageSearchRequest))]
        [XmlInclude(typeof(Catalog.ImageSearchResponse))]
        [XmlInclude(typeof(Catalog.DRMTaskSearchRequest))]
        [XmlInclude(typeof(Catalog.DRMTaskSearchResponse))]
        [XmlInclude(typeof(Catalog.PublishingSearchRequest))]
        [XmlInclude(typeof(Catalog.PublishingSearchResponse))]
        [XmlInclude(typeof(Catalog.GameOfferSearchRequest))]
        [XmlInclude(typeof(Catalog.GameOfferSearchResponse))]
        [XmlInclude(typeof(Catalog.GameTitleSearchRequest))]
        [XmlInclude(typeof(Catalog.GameTitleSearchResponse))]
	[XmlInclude(typeof(Catalog.GamePublisherSearchRequest))]
        [XmlInclude(typeof(Catalog.GamePublisherSearchResponse))]
        public Catalog.Response[] Search(Catalog.Request request)
        {
            return request.Search();
        }
        /// <summary>
        /// Gets the external id given the internal CatalogId
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetCatalogId")]
        public int GetCatalogId(string externalId, int feedSourceId, int externalmappingObjectId)
        {
            return Catalog.ExternalFeedMapping.GetCatalogId(externalId, feedSourceId, externalmappingObjectId);
        }
        /// <summary>
        /// Gets the catalogid id given the externalid CatalogId
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetExternalId")]
        public string GetExternalId(int? catalogId, int feedSourceId, int externalmappingObjectId)
        {
            return Catalog.ExternalFeedMapping.GetExternalId(catalogId, feedSourceId, externalmappingObjectId);
        }
        /// <summary>
        /// Gets the information for a given entity
        /// </summary>
        /// <returns>An entity object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetEntity")]
        public Catalog.Entity GetEntity(int entityId)
        {
            return Catalog.Entity.Get(entityId);
        }

        /// <summary>
        /// Gets the list of all the entities
        /// </summary>
        /// <returns>The array of entities</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetEntityArray")]
        public Catalog.Entity[] GetEntity()
        {
            return Catalog.Entity.Get().ToArray();
        }
        /// <summary>
        /// Gets the available Entity Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableEntityId")]
        public int GetAvailableEntityId()
        {
            return Catalog.Entity.GetAvailableId();
        }
        /// <summary>
        /// Gets the available Category Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableCategoryId")]
        public int GetAvailableCategoryId()
        {
            return Catalog.Category.GetAvailableId();
        }
        /// <summary>
        /// Gets the available CategorySystem Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableCategorySystemId")]
        public int GetAvailableCategorySystemId()
        {
            return Catalog.CategorySystem.GetAvailableId();
        }
        /// <summary>
        /// Gets the available RatingSystem Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableRatingSystemId")]
        public int GetAvailableRatingSystemId()
        {
            return Catalog.RatingSystem.GetAvailableId();
        }
        /// <summary>
        /// Gets the available RatingValue Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableRatingValueId")]
        public int GetAvailableRatingValueId()
        {
            return Catalog.RatingValue.GetAvailableId();
        }
        /// <summary>
        /// Gets the available RatingDescriptor Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableRatingDescriptorId")]
        public int GetAvailableRatingDescriptorId()
        {
            return Catalog.RatingDescriptor.GetAvailableId();
        }
        /// <summary>
        /// Gets the available Entity Id for Use
        /// </summary>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableLicenseTypeId")]
        public int GetAvailableLicenseTypeId()
        {
            return Catalog.LicenseType.GetAvailableId();
        }
        /// <summary>
        /// Gets the ExternalFeedSource object of the given id.
        /// </summary>
        /// <parameter>The id of the ExternalFeedSource object to get</parameter>
        /// <returns>The ExternalFeedSource object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetExternalFeedSourceOne")]
        public Catalog.ExternalFeedSource GetExternalFeedSource(int id)
        {
            return Catalog.ExternalFeedSource.Get(id);
        }

        /// <summary>
        /// Gets the complete set of ExternalFeedSource object
        /// </summary>
        /// <returns>An array containing all the ExternalFeedSource objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetExternalFeedSourceArray")]
        public Catalog.ExternalFeedSource[] GetExternalFeedSource()
        {
            return Catalog.ExternalFeedSource.Get().ToArray();
        }
        /// <summary>
        /// Gets the ExternalFeedMappingObject object of the given id.
        /// </summary>
        /// <parameter>The id of the ExternalFeedMappingObject object to get</parameter>
        /// <returns>The ExternalFeedMappingObject object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetExternalFeedMappingObjectOne")]
        public Catalog.ExternalFeedMappingObject GetExternalFeedMappingObject(int id)
        {
            return Catalog.ExternalFeedMappingObject.Get(id);
        }

        /// <summary>
        /// Gets the complete set of ExternalFeedMappingObject object
        /// </summary>
        /// <returns>An array containing all the ExternalFeedMappingObject objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetExternalFeedMappingObjectArray")]
        public Catalog.ExternalFeedMappingObject[] GetExternalFeedMappingObject()
        {
            return Catalog.ExternalFeedMappingObject.Get().ToArray();
        }
        
        /// <summary>
        /// Gets the information for a given entity
        /// </summary>
        /// <returns>An entity object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveExternalFeedMapping")]
        public void SaveExternalFeedMapping(Catalog.ExternalFeedMapping e)
        {
            Catalog.ExternalFeedMapping.Save(e);
        }
        /// <summary>
        /// Gets the information for a given entity
        /// </summary>
        /// <returns>An entity object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveEntity")]
        public void SaveEntity(Catalog.Entity e)
        {
            Catalog.Entity.Save(e);
        }
        /// <summary>
        /// Gets the Image object for the given id.
        /// </summary>
        /// <param name="imageId">The id of the Image to get</param>
        /// <returns>The Image object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetImage")]
        [XmlInclude(typeof(Catalog.ImageInstance))]
        public Catalog.Image GetImage(Guid imageId)
        {
            return Catalog.Image.Get(imageId);
        }
        /// <summary>
        /// Saves changes to the Image object.
        /// </summary>
        /// <param name="image">The Image object to be saved</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveImage")]
        public void SaveImage(Catalog.Image image)
        {
            Catalog.Image.Save(image);
        }

        /// <summary>
        /// Saves a batch change of publishing requests.
        /// </summary>
        /// <param name="image">The Publshing data to be saved</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SavePublishingBatchRequest")]
        public void SavePublishingBatchRequest(Catalog.Publishing Publishing)
        {
            try
            {
                Catalog.Publishing.Save(Publishing);
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Gets the Offer object for the given id.
        /// </summary>
        /// <param name="offerId">The id of the Offer to get</param>
        /// <returns>The Offer object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetOffer")]
        public Catalog.Offer GetOffer(Guid offerId)
        {
            return Catalog.Offer.Get(offerId);
        }

        /// <summary>
        /// Saves changes made to the Offer object.
        /// </summary>
        /// <param name="offer">The Offer object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveOffer")]
        public void SaveOffer(Catalog.Offer offer)
        {
            Catalog.Offer.Save(offer);
        }

        /// <summary>
        /// Get MediaOffer object for the specified mediaId.
        /// </summary>
        /// <param name="mediaId">The mediaId of the MediaOffer object to retrieve.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetMediaOffer")]
        public Catalog.MediaOffer GetMediaOffer(Guid mediaId)
        {
            return Catalog.MediaOffer.Get(mediaId);
        }

        /// <summary>
        /// Gets the Podcast object for the given id.
        /// </summary>
        /// <param name="podcastId">The id of the Podcast to get.</param>
        /// <returns>The Podcast object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetPodcastById")]
        public Catalog.Podcast GetPodcast(Guid podcastId)
        {
            return Catalog.Podcast.Get(podcastId);
        }

        /// <summary>
        /// Gets the Podcast object for the given uri.
        /// </summary>
        /// <param name="podcastId">The uri of the Podcast to get.</param>
        /// <returns>The Podcast object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetPodcastByUri")]
        public Catalog.Podcast GetPodcast(String podcastUri)
        {
            return Catalog.Podcast.Get(podcastUri);
        }

        /// <summary>
        /// Saves changes made to the Podcast object.
        /// </summary>
        /// <param name="video">The Podcast object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SavePodcast")]
        public void SavePodcast(Catalog.Podcast podcast)
        {
            Catalog.Podcast.Save(podcast);
        }

        /// <summary>
        /// Gets the Video object for the given id.
        /// </summary>
        /// <param name="videoId">The id of the Video to get</param>
        /// <returns>The Video object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetVideo")]
        [XmlInclude(typeof(Catalog.VideoInstance))]
        public Catalog.Video GetVideo(Guid videoId)
        {
            return Catalog.Video.Get(videoId);
        }

        /// <summary>
        /// Saves changes made to the Video object.
        /// </summary>
        /// <param name="video">The Video object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveVideo")]
        public void SaveVideo(Catalog.Video video)
        {
            Catalog.Video.Save(video);
        }

        /// <summary>
        /// Gets the VideoSeason object for the given id.
        /// </summary>
        /// <param name="videoSeasonId">The id of the VideoSeason to get.</param>
        /// <returns>The VideoSeason object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetVideoSeason")]
        public Catalog.VideoSeason GetVideoSeason(Guid videoSeasonId)
        {
            return Catalog.VideoSeason.Get(videoSeasonId);
        }

        /// <summary>
        /// Saves changes made to the VideoSeason object.
        /// </summary>
        /// <param name="videoSeason">The videoSeason object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveVideoSeason")]
        public void SaveVideoSeason(Catalog.VideoSeason videoSeason)
        {
            Catalog.VideoSeason.Save(videoSeason);
        }

        /// <summary>
        /// Gets the VideoSeries for the given id.
        /// </summary>
        /// <param name="videoSeasonId">The id of the VideoSeries to get.</param>
        /// <returns>The VideoSeries object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetVideoSeries")]
        public Catalog.VideoSeries GetVideoSeries(Guid videoSeriesId)
        {
            return Catalog.VideoSeries.Get(videoSeriesId);
        }

        /// <summary>
        /// Saves change made to the given VideoSeries object.
        /// </summary>
        /// <param name="videoSeries">The VideoSeries object to save</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveVideoSeries")]
        public void SaveVideoSeries(Catalog.VideoSeries videoSeries)
        {
            Catalog.VideoSeries.Save(videoSeries);
        }

        /// <summary>
        /// Gets the list of ContributorRelationshipTypes in the catalog.
        /// </summary>
        /// <param name="ids">The ids of the list of ContributorRelationshipType to retrieve</param>
        /// <returns>The list of ContributorRelationshipTypes of the given ids.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetContributorRelationshipTypeArray")]
        public Catalog.ContributorRelationshipType[] GetContributorRelationshipType()
        {
             return Catalog.ContributorRelationshipType.Get().ToArray();
        }

        /// <summary>
        /// Gets the information for a given country code
        /// </summary>
        /// <returns>A Country object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetCountry")]
        public Catalog.Country GetCountry( String countryCode)
        {
            return Catalog.Country.Get(countryCode);
        }

        /// <summary>
        /// Gets the list of avaialble countries.
        /// </summary>
        /// <returns>The array of countries</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetCountryArray")]
        [WebServiceUtils.LoggingExtension(LogOutgoingXml=true,LogIncomingXml=true)]
        public Catalog.Country[] GetCountry()
        {
            Trace.Write("About to execute Country.Get()");
            Trace.Flush();
            return Catalog.Country.Get().ToArray();
        }
        /// <summary>
        /// Gets the information for a given currency code
        /// </summary>
        /// <returns>A Currency object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetCurrency")]
        public Catalog.Currency GetCurrency(String currencyCode)
        {
            return Catalog.Currency.Get(currencyCode);
        }
        /// <summary>
        /// Gets the list of avaialble countries.
        /// </summary>
        /// <returns>The array of countries</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetCurrencyArray")]
        [WebServiceUtils.LoggingExtension(LogOutgoingXml = true, LogIncomingXml = true)]
        public Catalog.Currency[] GetCurrency()
        {
            Trace.Write("About to execute Currency.Get()");
            Trace.Flush();
            return Catalog.Currency.Get().ToArray();
        }

        /// <summary>
        /// Gets the CategorySystem of the given id.
        /// </summary>
        /// <param name="id">CategorySystem id.</param>
        /// <returns>The CategorySystem specified by the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetCategorySystem")]
        [SoapInclude(typeof(Catalog.CategoryCorporationLocale))]
        [XmlInclude(typeof(Catalog.CategoryCorporationLocale))]
        public Catalog.CategorySystem GetCategorySystem(Int32 id)
        {
            return Catalog.CategorySystem.Get(id);
        }


        /// <summary>
        /// Gets the list of CategorySystems in the catalog.
        /// </summary>
        /// <returns>The list of CategorySystems.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetCategorySystemArray")]
        [SoapInclude(typeof(Catalog.CategoryCorporationLocale))]
        [XmlInclude(typeof(Catalog.CategoryCorporationLocale))]
        public Catalog.CategorySystem[] GetCategorySystem()
        {
            return Catalog.CategorySystem.Get().ToArray();
        }

        /// <summary>
        /// Saves a category (add and update)
        /// </summary>
        /// <returns>void</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="SaveCategory")]
        [SoapInclude(typeof(Catalog.CategoryCorporationLocale))]
        [XmlInclude(typeof(Catalog.CategoryCorporationLocale))]
        public void SaveCategory( Catalog.Category category )
        {
            Catalog.CategorySystem.SaveCategory(category);
        }

        /// <summary>
        /// Gets the RatingSystem of the given id.
        /// </summary>
        /// <param name="id">RatingSystem id.</param>
        /// <returns>The RatingSystem specified by the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetRatingSystem")]
        public Catalog.RatingSystem GetRatingSystem(int id)
        {
            return Catalog.RatingSystem.Get(id);
        }

        /// <summary>
        /// Gets the list of RatingSystems in the catalog.
        /// </summary>
        /// <returns>The list of RatingSystems.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetRatingSystemArray")]
        public Catalog.RatingSystem[] GetRatingSystem()
        {
            return Catalog.RatingSystem.Get().ToArray();
        }

        /// <summary>
        /// Gets the article of the given id.
        /// </summary>
        /// <param name="id">Article id.</param>
        /// <returns>The article specified by the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetArticle")]
        public Catalog.Article GetArticle(Guid id)
        {
            return Catalog.Article.Get(id);
        }

        /// <summary>
        /// Gets the list of articles of the given ids.
        /// </summary>
        /// <param name="ids">The ids of the list of article to retrieve</param>
        /// <returns>The list of articles of the given ids.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetArticleArray")]
        public Catalog.Article[] GetArticle(Guid[] ids)
        {

            Guid[] boundedIds = ids;
            if (ids.Length > MAX_ARTICLES)
            {
                boundedIds = new Guid[MAX_ARTICLES];
                Array.Copy(ids, boundedIds, MAX_ARTICLES);
            }

            return Catalog.Article.Get(boundedIds).ToArray();
        }

        /// <summary>
        /// Gets the contributor of the given id.
        /// </summary>
        /// <param name="id">Contributor id.</param>
        /// <returns>The contributor specified by the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetContributor")]
        public Catalog.Contributor GetContributor(Guid id)
        {
            return Catalog.Contributor.Get(id);
        }

        /// <summary>
        /// Gets the list of contributors of the given ids.
        /// </summary>
        /// <param name="ids">The ids of the list of contributor to retrieve</param>
        /// <returns>The list of contributors of the given ids.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetContributorArray")]
        public Catalog.Contributor[] GetContributor(Guid[] ids)
        {
            Guid[] boundedIds = ids;
            if (ids.Length > MAX_CONTRIBUTORS)
            {
                boundedIds = new Guid[MAX_CONTRIBUTORS];
                Array.Copy(ids, boundedIds, MAX_CONTRIBUTORS);
            }
            return Catalog.Contributor.Get(boundedIds).ToArray();
        }
        /// <summary>
        /// Saves the VideoEncoding changes
        /// </summary>
        /// <param name="videoEncoding"></param>
        [CheckApiExtension]
        [WebMethod]
        public void SaveVideoEncoding(Catalog.VideoEncoding videoEncoding)
        {
            Catalog.VideoEncoding.Save(videoEncoding);
        }
        /// <summary>
        /// Saves the AudioEncoding changes
        /// </summary>
        /// <param name="audioEncoding"></param>
        [CheckApiExtension]
        [WebMethod]
        public void SaveAudioEncoding(Catalog.AudioEncoding audioEncoding)
        {
            Catalog.AudioEncoding.Save(audioEncoding);
        }
        /// <summary>
        /// Saves changes of the Contributor object specified to the database.
        /// </summary>
        /// <param name="contributor"></param>
        [CheckApiExtension]
        [WebMethod]
        public void SaveContributor(Catalog.Contributor contributor)
        {
            Catalog.Contributor.Save(contributor);
        }


        /// <summary>
        /// Gets the complete set of audio encodings
        /// </summary>
        /// <returns>an arroay conteining all the audio encoding objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetAudioEncodingArray")]
        public Catalog.AudioEncoding[] GetAudioEncoding()
        {
            return Catalog.AudioEncoding.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of client types
        /// </summary>
        /// <returns>an array containing all the client type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetClientTypeArray")]
        public Catalog.ClientType[] GetClientType()
        {
            return Catalog.ClientType.Get().ToArray();
        }
        /// <summary>
        /// Gets the complete set of locales
        /// </summary>
        /// <returns>An array conteining all the locale objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetLocaleArray")]
        public Catalog.Locale[] GetLocale()
        {
            return Catalog.Locale.Get().ToArray();
        }


        /// <summary>
        /// Gets the complete set of image formats
        /// </summary>
        /// <returns>An array conteining all the image format objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetImageFormatArray")]
        public Catalog.ImageFormat[] GetImageFormat()
        {
            return Catalog.ImageFormat.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of image sizes
        /// </summary>
        /// <returns>An array conteining all the image size objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetImageSizeArray")]
        public Catalog.ImageSize[] GetImageSize()
        {
            return Catalog.ImageSize.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of media relationship types
        /// </summary>
        /// <returns>An array conteining all the media relationship type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetMediaRelationshipTypeArray")]
        public Catalog.MediaRelationshipType[] GetMediaRelationshipType()
        {
            return Catalog.MediaRelationshipType.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of preview media instance types
        /// </summary>
        /// <returns>An array conteining all the preview media instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetPreviewMediaInstanceTypeArray")]
        public Catalog.PreviewMediaInstanceType[] GetPreviewMediaInstanceType()
        {
            return Catalog.PreviewMediaInstanceType.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of roles
        /// </summary>
        /// <returns>An array containing all the role instances</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetRoleArray")]
        public Catalog.Role[] GetRole()
        {
            return Catalog.Role.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of stores
        /// </summary>
        /// <returns>An array containing all the store instances</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetStoreArray")]
        public Catalog.Store[] GetStore()
        {
            return Catalog.Store.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of TaskStatuses
        /// </summary>
        /// <returns>An array containing all the Taskstatus</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetTaskStatusArray")]
        public Catalog.TaskStatus[] GetTaskStatus()
        {
            return Catalog.TaskStatus.Get().ToArray();
        }
        /// <summary>
        /// Gets the complete set of Queue Array by status
        /// </summary>
        /// <returns>An array containing all the Task objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetTasksByStatus")]
        public Catalog.Task[] GetTasksByStatus(int statusId)
        {
            return Catalog.Task.Get(statusId).ToArray();
        }
        /// <summary>
        /// Gets the complete set of Queues
        /// </summary>
        /// <returns>An array containing Task objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetTasks")]
        public Catalog.Task[] GetTasks()
        {
            return Catalog.Task.Get().ToArray();
        }
        /// <summary>
        /// Gets the complete set of Avialable Queues in XML
        /// </summary>
        /// <returns>String consisting of Task Queue XML</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetAvailableTaskAsXML")]
        public String GetAvailableTaskAsXML()
        {
            return Catalog.Task.GetAvailableTaskAsXML();
        }
        /// <summary>
        /// Deletes the Task Queue older than 3 days with status Completed
        /// </summary>
        /// <returns>Purges the Task Queue</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "PurgeTaskQueue")]
        public void PurgeTaskQueue()
        {
            Catalog.Task.PurgeQueue();
        }
        /// <summary>
        /// Saves the Task Queue
        /// </summary>
        /// <param name="taskQueue">Task Queue Object</param>
        /// <returns>void</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveTaskByObject")]
        public void SaveTask(Catalog.Task taskQueue)
        {
            Catalog.Task.Save(taskQueue);
        }
        /// <summary>
        /// Saves the DRMTask Queue.internally calls Task.Save
        /// </summary>
        /// <param name="taskQueue">Task Queue Object</param>
        /// <returns>void</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveDRMTaskByObject")]
        public void SaveDRMTask(Catalog.DRMTask task)
        {
            Catalog.DRMTask.Save(task);
        }

        /// <summary>
        /// Saves the Task Queue
        /// </summary>
        /// <param name="taskQueueXML">Task Queue XML</param>
        /// <returns>void</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveTaskByString")]
        public void SaveTask(string taskQueueXML)
        {
            Catalog.Task.Save(taskQueueXML);
        }
        /// <summary>
        /// Gets the complete set of user types
        /// </summary>
        /// <returns>An array containing all the user type instances</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetUserTypeArray")]
        public Catalog.UserType[] GetUserType()
        {
            return Catalog.UserType.Get().ToArray();
        }
        /// <summary>
        /// Gets the complete set of video definition instance types
        /// </summary>
        /// <returns>An array containing all the video definition instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetVideoDefinitionArray")]
        public Catalog.VideoDefinition[] GetVideoDefinition()
        {
            return Catalog.VideoDefinition.Get().ToArray();
        }
        
        /// <summary>
        /// Gets the complete set of video encoding instance types
        /// </summary>
        /// <returns>An array containing all the video encoding instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetVideoEncodingArray")]
        public Catalog.VideoEncoding[] GetVideoEncoding()
        {
            return Catalog.VideoEncoding.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of visibility levels
        /// </summary>
        /// <returns>An array containing all the VisibilityLevel instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetVisibilityLevelArray")]
        public Catalog.VisibilityLevel[] GetVisibilityLevel()
        {
            return Catalog.VisibilityLevel.Get().ToArray();
        }

        /// <summary>
        /// Gets the complete set of visibility statuss
        /// </summary>
        /// <returns>An array containing all the VisibilityStatus instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetVisibilityStatusArray")]
        public Catalog.VisibilityStatus[] GetVisibilityStatus()
        {
            return Catalog.VisibilityStatus.Get().ToArray();
        }

        /// <summary>
        /// Gets the provider object of the given id.
        /// </summary>
        /// <parameter>The id of the Provider object to get</parameter>
        /// <returns>The provider object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetProviderOne")]
        public Catalog.Provider GetProvider(int id)
        {
            return Catalog.Provider.Get(id);
        }

        /// <summary>
        /// Gets the complete set of provider object
        /// </summary>
        /// <returns>An array containing all the Provider instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetProviderArray")]
        public Catalog.Provider[] GetProvider()
        {
            return Catalog.Provider.Get().ToArray();
        }

        /// <summary>
        /// Gets the metadata provider object of the given id.
        /// </summary>
        /// <parameter>The id of the Metadata Provider object to get</parameter>
        /// <returns>The metadata provider object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetMetadataProviderOne")]
        public Catalog.MetadataProvider GetMetadataProvider(int id)
        {
            return Catalog.MetadataProvider.Get(id);
        }

        /// <summary>
        /// Gets the complete set of metadata provider object
        /// </summary>
        /// <returns>An array containing all the metadata provider instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetMetadataProviderArray")]
        public Catalog.MetadataProvider[] GetMetadataProvider()
        {
            return Catalog.MetadataProvider.Get().ToArray();
        }


        /// <summary>
        /// Gets the drm license issuer object of the given id.
        /// </summary>
        /// <parameter>The id of the drm license issuer object to get</parameter>
        /// <returns>The drm license issuer object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetDRMLicenseIssuerOne")]
        public Catalog.DRMLicenseIssuer GetDRMLicenseIssuer(int id)
        {
            return Catalog.DRMLicenseIssuer.Get(id);
        }

        /// <summary>
        /// Gets the complete set of drm license issuer object
        /// </summary>
        /// <returns>An array containing all the drm license issuer instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetDRMLicenseIssuerArray")]
        public Catalog.DRMLicenseIssuer[] GetDRMLicenseIssuer()
        {
            return Catalog.DRMLicenseIssuer.Get().ToArray();
        }


        /// <summary>
        /// Gets the LicenseType object of the given id.
        /// </summary>
        /// <parameter>The id of the LicenseType object to get</parameter>
        /// <returns>The LicenseType object of the given id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetLicenseTypeOne")]
        public Catalog.LicenseType GetLicenseType(int id)
        {
            return Catalog.LicenseType.Get(id);
        }

        /// <summary>
        /// Gets the complete set of LicenseType object
        /// </summary>
        /// <returns>An array containing all the LicenseType instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetLicenseTypeArray")]
        public Catalog.LicenseType[] GetLicenseType()
        {
            return Catalog.LicenseType.Get().ToArray();
        }

        /// <summary>
        /// Saves changes made to the LicenseType object
        /// </summary>
        /// <parameter>LicenseType object to be saved</parameter>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveLicenseType")]
        public void SaveLicenseType(Catalog.LicenseType licenseType)
        {
            Catalog.LicenseType.Save(licenseType);
        }


        /// <summary>
        /// Gets the license class object for the given id.
        /// </summary>
        /// <parameter>The id of the LicenseClass object to get</parameter>
        /// <returns>The LicenseClass object of the given id.</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetLicenseClassOne")]
        public Catalog.LicenseClass GetLicenseClass(int id)
        {
            return Catalog.LicenseClass.Get(id);
        }

        /// <summary>
        /// Gets the complete set of license class object
        /// </summary>
        /// <returns>An array containing all the LicenseClass instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetLicenseClassArray")]
        public Catalog.LicenseClass[] GetLicenseClass()
        {
            return Catalog.LicenseClass.Get().ToArray();
        }

        /// <summary>
        /// Gets the specified pricing rule.
        /// </summary>
        /// <returns>The PricingRule object identified by the id</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetPricingRuleOne")]
        public Catalog.PricingRule GetPricingRule(int id)
        {
            return Catalog.PricingRule.Get(id);
        }

        /// <summary>
        /// Gets the complete set of pricing rules.
        /// </summary>
        /// <returns>An array containing all the PricingRule instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetPricingRuleArray")]
        public Catalog.PricingRule[] GetPricingRule()
        {
            return Catalog.PricingRule.Get().ToArray();
        }
        /// <summary>
        /// Saves changes made to the PricingRule object
        /// </summary>
        /// <parameter>The PricingRule object</parameter>
        [CheckApiExtension]
        [WebMethod(MessageName = "SavePricingRule")]
        public void SavePricingRule(Catalog.PricingRule pricingRule)
        {
            Catalog.PricingRule.Save(pricingRule);
        }
        /// <summary>
        /// Gets the complete set of media types.
        /// </summary>
        /// <returns>An array containing all the MediaType instance type objects</returns>
        [CheckApiExtension]
        [WebMethod(MessageName="GetMediaTypeArray")]
        public Catalog.MediaType[] GetMediaType()
        {
            return Catalog.MediaType.Get().ToArray();
        }

        /// <summary>
        /// Saves changes made to the game object (add, update, delete).
        /// </summary>
        /// <param name="game">The game object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveGame")]
        public void SaveGame(Catalog.Game game)
        {
            Catalog.Game.Save(game);
        }

        /// <summary>
        /// Gets the Game object for the given id.
        /// </summary>
        /// <param name="gameId">The id of the Game to get</param>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetGame")]
        public Catalog.Game GetGame(Guid gameId)
        {
            return Catalog.Game.Get(gameId);
        }

        /// <summary>
        /// Saves changes made to the game content object (add, update, delete).
        /// </summary>
        /// <param name="gameContent">The game content object to be saved.</param>
        [CheckApiExtension]
        [WebMethod(MessageName = "SaveGameContent")]
        public void SaveGameContent(Catalog.GameContent gameContent)
        {
            Catalog.GameContent.Save(gameContent);
        }

        /// <summary>
        /// Gets the GameContent object for the given id.
        /// </summary>
        /// <param name="gameContentId">The id of the GameContent to get</param>
        /// <returns></returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "GetGameContent")]
        [XmlInclude(typeof(Catalog.GameContentInstance))]
        public Catalog.GameContent GetGameContent (Guid gameContentId)
        {
            return Catalog.GameContent.Get(gameContentId);
        }

        /// <summary>
        /// Gets all of the payment methods
        /// </summary>
        /// <returns>A Currency object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "PaymentMethod")]
        public Catalog.PaymentType GetPaymentMethod(int paymentId)
        {
            return Catalog.PaymentType.Get(paymentId);
        }

        /// <summary>
        /// Gets a specific payment method
        /// </summary>
        /// <returns>A Currency object</returns>
        [CheckApiExtension]
        [WebMethod(MessageName = "PaymentMethodArray")]
        public Catalog.PaymentType[] GetPaymentMethod()
        {
            return Catalog.PaymentType.Get().ToArray();
        }
   }
    /// <summary>
    /// Front end app implementation for ContentIngestionApp
    /// </summary>
    public class ContentIngestionApp:FrontEndApp
    {
        private static Boolean performApiCheck = true;
        private const string apiCheckSettingName = "PerformApiCheck";
        private const string catalogInterfaceSettingName = "RawCatalogDbInterfaceName";
        private const string catalogConnStringSettingName = "RawCatalogDBConnectionString";
        /// <summary>
        /// ContentIngestion App default constructor
        /// </summary>
        public ContentIngestionApp():base()
        {

        }
        /// <summary>
        /// On Application Start overriden implementation
        /// </summary>
        protected override void OnApplicationStart()
        {
            base.OnApplicationStart();
            //retrieve api check web.config setting
            if (ConfigurationManager.AppSettings[apiCheckSettingName] != null)
            {
                if (!Boolean.TryParse(ConfigurationManager.AppSettings[apiCheckSettingName], out performApiCheck))
                {
                    throw new ExceptionWithEventId(XEvent.Id.CONTENTINGESTION_ERROR_WEBCONFIGURATION, string.Format("The setting {0} not configured right in web.config", apiCheckSettingName));
                }
                else
                {
                    APICheck.Instance.PerformAPICheck = performApiCheck;
                }
            };

            //get connection string
            if (ConfigurationManager.AppSettings[catalogConnStringSettingName] != null)
            {
                CatalogDatabase.RawCatalogDBConnectionString = ConfigurationManager.AppSettings[catalogConnStringSettingName];
            }
            else
            {
                try
                {
                    IInterfaceInfo info = Config.GetSingleInterface(ConfigurationManager.AppSettings[catalogInterfaceSettingName]);
                    CatalogDatabase.RawCatalogDBConnectionString = String.Format("Data Source={0};Initial Catalog={1};Integrated Security=SSPI", info.ServerName, info.DBName);
                }
                catch (Exception ex)
                {
                    throw new ExceptionWithEventId(XEvent.Id.CONTENTINGESTION_ERROR_INTERFACE, string.Format("Error occured querying the contentIngestion Interface.Actual exception string is {0}", ex.ToString()));
                }
            }
        }
        /// <summary>
        /// Overridden Implementation if Application OnError
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            base.Application_OnError(sender, ea);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Domain\PricingRule.aspx.cs ===
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Net;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class PricingRuleEdit : System.Web.UI.Page
    {
        string _priceId;
        string _priceFrom;
        string _priceTo;
        string _pointsRetail;
        string _priceRetail;

        const int maxPrecisionDigits = 18;
        const int maxScaleDigits = 4;


        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                //Retrieve current PricingRule objec to edit/add
                int ruleId = -1;
                if (this.ClientQueryString.Length > 0)
                {
                    if (Int32.TryParse(this.ClientQueryString, out ruleId) == false)
                        ruleId = -1;
                }
                this.ErrorMsg.Text = "";

                //Store list of PricingRuleInstance in memory as list for easy manipulation
                PricingRule price;
                List<PricingRuleInstance> priceMap = new List<PricingRuleInstance>();
                if (ruleId == -1)
                {
                    this.TitleMsg.Text = "Add New Pricing Rule";
                    price = new PricingRule();
                    price.PrimaryId = -1;
                    price.RetailCurrencyCode = "USD";
                    price.WholesaleCurrencyCode = "USD";
                }
                else
                {
                    this.TitleMsg.Text = "Edit Pricing Rule";
                    price = Constants.Proxy.GetPricingRule(ruleId);
                    foreach (PricingRuleInstance pi in price.PricingRuleInstances)
                        priceMap.Add(pi);
                }
                Session["Price"] = price;
                Session["PriceMap"] = priceMap;

                this.RetailCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.RetailCurrencyList.DataBind();
                this.RetailCurrencyList.SelectedValue = "USD";

                this.WholesaleCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.WholesaleCurrencyList.DataBind();
                this.WholesaleCurrencyList.SelectedValue = "USD";

                //Display PriceRule for edit
                DisplayPrice();
            }
        }

        private void BindPriceMap()
        {
            PriceGrid.DataSource = Session["PriceMap"] as List<PricingRuleInstance>;
            PriceGrid.DataBind();
        }

        protected void PriceGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                PricingRuleInstance priceMap = e.Row.DataItem as PricingRuleInstance;

                if ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit)
                {
                    ((Label)e.Row.FindControl("PriceIdEdit")).Text = priceMap.Id.ToString();
                    ((TextBox)e.Row.FindControl("PriceFromEdit")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((TextBox)e.Row.FindControl("PriceToEdit")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((TextBox)e.Row.FindControl("PointsRetailEdit")).Text = priceMap.PointsRetail.ToString();
                    ((TextBox)e.Row.FindControl("PriceRetailEdit")).Text = priceMap.PriceRetail.ToString();
                }
                else
                {
                    ((Label)e.Row.FindControl("PriceIdLabel")).Text = priceMap.Id.ToString();
                    ((Label)e.Row.FindControl("PriceFromLabel")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((Label)e.Row.FindControl("PriceToLabel")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((Label)e.Row.FindControl("PointsRetailLabel")).Text = priceMap.PointsRetail.ToString();
                    ((Label)e.Row.FindControl("PriceRetailLabel")).Text = priceMap.PriceRetail.ToString();
                }
            }
        }

        protected void PriceGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            PriceGrid.PageIndex = e.NewPageIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            PriceGrid.EditIndex = e.NewEditIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            PriceGrid.EditIndex = -1;
            BindPriceMap();
        }

        private bool ValidateNotNullOrNegative(string str, string field)
        {
            Decimal d;
            if (Decimal.TryParse(str, out d) == false)
            {
                this.ErrorMsg.Text = field + " must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = field +  " must be numeric and non-negative.";
                return false;
            }
            return true;
        }

        protected void PriceGrid_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (ValidateNotNullOrNegative(((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim(), "Price ID"))
            {
                _priceId = ((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim(), "Price From"))
            {
                _priceFrom = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim(), "Price To"))            
            {
                _priceTo = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim(), "Points Retail"))
            {
                _pointsRetail = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim();
            }
            else
            {
                return;
            }

            PricingRuleInstance priceMap = (Session["PriceMap"] as List<PricingRuleInstance>)[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            if (SavePricingRuleInstance(DataChangeType.Update, priceMap))
            {
                PriceGrid.EditIndex = -1;
                BindPriceMap();
            }
        }

        protected void PriceGrid_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            List<PricingRuleInstance> priceMapList = Session["PriceMap"]as List<PricingRuleInstance>;
            PricingRuleInstance priceMap = priceMapList[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            priceMapList.Remove(priceMap);

            Session["PriceMap"] = priceMapList;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName != "Insert" && e.CommandName != "InsertEmpty")
                return;
            
            if (e.CommandName == "Insert")
            {
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim(),"Price ID"))
                {
                    _priceId     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim(),"Price From"))
                {
                    _priceFrom   = ((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim(), "Price To"))
                {
                    _priceTo     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim(),"Points Retail"))
                {
                    _pointsRetail= ((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim();
                }                                             
            }
            else if (e.CommandName == "InsertEmpty")
            {
                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim(), "Price ID"))
                {
                    _priceId = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim(), "Price From"))
                {
                    _priceFrom = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim(), "Price To"))
                {
                    _priceTo = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim(), "Points Retail"))
                {
                    _pointsRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }
            }

            if (SavePricingRuleInstance(DataChangeType.Add, null))
            {
                BindPriceMap();
            }
        }

        protected void PriceSave_OnClick(object sender, EventArgs e)
        {
            if (SavePricingRule())
            {
                Response.Redirect("PricingRuleList.aspx");
            }
        }

        protected void PriceCancel_OnClick(object sender, EventArgs e)
        {
            Response.Redirect("PricingRuleList.aspx");
        }

        private void DisplayPrice()
        {
            PricingRule price = Session["Price"] as PricingRule;

            //Display the data list
            this.ProviderList.DataSource = Constants.Proxy.GetProvider();
            this.ProviderList.DataBind();

            if (price.PrimaryId != -1)
            {
                this.RuleID.Text = price.PrimaryId.ToString();
                this.RuleID.ReadOnly = true;
                this.RuleName.Focus();
            }
            else
            {
                this.RuleID.Focus();
            }

            this.RuleName.Text = price.Name;
            DisplayHelper.SelectDropDownListItem(price.ProviderId, this.ProviderList);
            DisplayHelper.SelectDropDownListItem(price.CountryCode, this.CountryList);
            DisplayHelper.SelectDropDownListItem(price.MediaTypeId, this.MediaTypeList);
            DisplayHelper.SelectDropDownListItem(price.RetailCurrencyCode, this.RetailCurrencyList);
            DisplayHelper.SelectDropDownListItem(price.WholesaleCurrencyCode, this.WholesaleCurrencyList);

            this.StartDate.Text = DisplayHelper.GetDateDisplay(price.StartDateTime);
            if (price.Margin > 0)
                this.Margin.Text = price.Margin.ToString();
            if (price.Rate > 0)
                this.Rate.Text = price.Rate.ToString();

            BindPriceMap();
        }
        
        private bool SavePricingRuleInstance(DataChangeType changeType, PricingRuleInstance priceMap)
        {
            if (_priceId.Length == 0 &&
                _priceFrom.Length == 0 &&
                _priceTo.Length == 0 && 
                _pointsRetail.Length == 0 && 
                _priceRetail.Length == 0)
                return false;

            List<PricingRuleInstance> priceMapList = Session["PriceMap"] as List<PricingRuleInstance>;
            if (changeType == DataChangeType.Add)
            {
                foreach(PricingRuleInstance pi in priceMapList)
                    if (pi.Id.ToString() == _priceId)
                    {
                        this.ErrorMsg.Text = String.Format("Price map id [{0}] already in use.", _priceId);
                        return false;
                    }

                priceMap = new PricingRuleInstance();
                priceMap.Id = Int32.Parse(_priceId);
            }

            string errMsg = "You can have maximum 14 digits before decimal point and 4 after the decimal point in {0}";
            if (!IsValidDecimalPrice(_priceFrom, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price From");
                return false;
            }

            if (!IsValidDecimalPrice(_priceTo, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price To");
                return false;
            }

            if (!IsValidDecimalPrice(_priceRetail, maxPrecisionDigits, maxScaleDigits))
            {
                ErrorMsg.Text = String.Format(errMsg, "Price Retail");
                return false;
            }

            priceMap.PriceWholesaleFrom = (_priceFrom.Length == 0) ? 0 : Decimal.Parse(_priceFrom);
            priceMap.PriceWholesaleTo = (_priceTo.Length == 0) ? 0 : Decimal.Parse(_priceTo);
            priceMap.PointsRetail = (_pointsRetail.Length == 0) ? 0 : Int32.Parse(_pointsRetail);
            priceMap.PriceRetail = (_priceRetail.Length == 0) ? 0 : Decimal.Parse(_priceRetail);
            priceMap.Modified = changeType;

            if (changeType == DataChangeType.Add)
            {
                ((List<PricingRuleInstance>)Session["PriceMap"]).Add(priceMap);
            }
            return true;
        }

        private bool IsValidDecimalPrice(string price, int precision, int scale)
        {
            bool result = true;

            if (price.Length > (precision - scale))
            {
                string[] parts = price.Split('.');

                // Price is more than precision range without any decimal digits
                if (parts.Length == 1)
                {
                    result = false;
                }
                else if (parts[0].Length > (precision - scale))
                {
                    result = false;
                }
                else if (parts[1].Length > scale)
                {
                    result = false;
                }
            }

            return result;
        }

        private bool SavePricingRule()
        {
            PricingRule price = Session["Price"] as PricingRule;
            List<PricingRuleInstance> priceMapList = Session["PriceMap"] as List<PricingRuleInstance>;
            if (this.RuleID.ReadOnly == false)
            {
                price.Modified = DataChangeType.Add;
            }
            else
            {
                price.Modified = DataChangeType.Update;

            }
            //Data validation
            int val;
            if (Int32.TryParse(this.RuleID.Text, out val) == false)
            {
                this.ErrorMsg.Text = "Pricing rule id must be numeric and non-negative.";
                return false;
                
            }
            if (val < 0)
            {
                this.ErrorMsg.Text = "Pricing rule id must be numeric and non-negative.";
                return false;
            }

            Decimal d;
            if (Decimal.TryParse(this.Margin.Text, out d) == false)
            {
                this.ErrorMsg.Text = "Margin must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = "Margin must be numeric and non-negative.";
                return false;
            }

            if (Decimal.TryParse(this.Rate.Text, out d) == false)
            {
                this.ErrorMsg.Text = "Rate must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = "Rate must be numeric and non-negative.";
                return false;
            }

            if (price.Modified == DataChangeType.Add)
            {
                if (Constants.Proxy.GetPricingRule(val) != null)
                {
                    this.ErrorMsg.Text = String.Format("Pricing rule id [{0}] already exists.", val);
                    return false;
                }
            }


            // Only need to check if other pricing rule name is being added or updated to a new name
            Boolean isNameUpdated = false;
            if (price.Name != null)
            {
                isNameUpdated = price.Name.ToUpper().CompareTo(this.RuleName.Text.ToUpper().Trim()) != 0;
            }
            
            if (price.Modified == DataChangeType.Add || isNameUpdated)
            {
                PricingRule[] pricingRules = Constants.Proxy.GetPricingRule();
                foreach (PricingRule pr in pricingRules)
                {
                    if (pr.Name.ToUpper().CompareTo(RuleName.Text.Trim().ToUpper()) == 0)
                    {
                        this.ErrorMsg.Text = String.Format("Pricing rule name [{0}] already exists.", RuleName.Text.Trim());
                        return false;
                    }
                }
            }

            if (this.RuleName.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = "Pricing rule name required.";
                return false;
            }
            if (DisplayHelper.IsValidDate(this.StartDate.Text) == false)
            {
                this.ErrorMsg.Text = "Invalid date specified.";
                return false;
            }

            price.PrimaryId = Int32.Parse(this.RuleID.Text);
            price.Name = this.RuleName.Text.Trim();
            price.ProviderId = Int32.Parse(this.ProviderList.SelectedValue);
            price.CountryCode = this.CountryList.SelectedValue;
            price.RetailCurrencyCode = this.RetailCurrencyList.SelectedValue;
            price.WholesaleCurrencyCode = this.WholesaleCurrencyList.SelectedValue;
            price.MediaTypeId = Int32.Parse(this.MediaTypeList.SelectedValue);
            price.StartDateTime = DisplayHelper.GetDateValue(this.StartDate.Text, 0, 0);
            if (this.Margin.Text.Trim().Length > 0)
                price.Margin = Decimal.Parse(this.Margin.Text);
            if (this.Rate.Text.Trim().Length > 0)
                price.Rate = Decimal.Parse(this.Rate.Text);

            if (price.Modified == DataChangeType.Update)
            {
                //Determine which PricingRuleInstance may be deleted
                PricingRule oldPrice = Constants.Proxy.GetPricingRule(price.PrimaryId);
                foreach (PricingRuleInstance pOld in oldPrice.PricingRuleInstances)
                {
                    bool found = false;
                    foreach (PricingRuleInstance pNew in priceMapList)
                    {
                        if (pOld.Id == pNew.Id)
                        {
                            found = true;
                            break;
                        }
                    }
                    if (!found)
                    {
                        pOld.Modified = DataChangeType.Delete;
                        priceMapList.Add(pOld);
                    }
                }
            }
   
            price.PricingRuleInstances = priceMapList.ToArray();
            try
            {
                Constants.Proxy.SavePricingRule(price);
            }
            catch (Exception e)
            {
                this.ErrorMsg.Text = String.Format("Unable to save Pricing Rule: {0}.", e.Message);
                return false;
            }
            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\FrontEndInstaller.cs ===
using System;
using System.ComponentModel;

using xonline.common.installer;
using xonline.common.mgmt;

namespace xonline.common.feapp
{
    [RunInstaller(true)]
    public class FrontEndInstaller : XomConfiguratorInstall
    {
    }

    [RunInstaller(true)]
    public class FrontEndPerformanceCounterInstaller : XomPerformanceCounterInstall
    {
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\website\Domain\LicenseType.aspx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Services.Protocols;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseType : System.Web.UI.Page
    {

        # region Constants
        private const string emptyErrorMessage = "Error: {0} is not specified";
        private const string legalTextDuplicate = "Legal Text with selected Locale already exists";
        private const string licenseTypeDuplicate = "LicenseType ID {0} already Exists";
        private const string licenseTypeSession = "LicenseType";
        private const string licenseTypeOperationSession = "LicenseTypeOperationMode";
        private const string legalTextOperationModeSession = "legalTextOperationMode";
        private const string legalTextLocaleSession = "legalTextLocale";
        # endregion

        # region Methods
        /// <summary>
        /// Page load event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {

                string licenstypeId = (this.Request.QueryString.Count > 0) ? this.Request.QueryString[0] : null;
                Proxy.LicenseType licenseType = null;
                try
                {
                    if (licenstypeId != null)
                    {
                        licenseType = Constants.Proxy.GetLicenseType(Convert.ToInt32(licenstypeId));
                        this.TitleMsg.Text = "Edit LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Edit;

                    }
                    else
                    {
                        licenseType = new Proxy.LicenseType();
                        licenseType.Name = String.Empty;
                        licenseType.Name = String.Empty;
                        licenseType.LicenseClassId = -1;
                        this.TitleMsg.Text = "Add LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Add;

                    }
                }
                catch (SoapException ex)
                {
                    this.ErrorMsg.Text = String.Format("Unable to retrieve LicenseType information: {0}", ex.Message);
                    return;
                }
                Session[licenseTypeSession] = licenseType;
                Session[legalTextOperationModeSession] = Operation_Mode.Undefined;
                PopulateDomainData();
                PopulateControls(licenseType);
                SetLicenseTypeEditState();
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// The method Populates the Domain Data Drop Down
        /// </summary>
        private void PopulateDomainData()
        {
            LicenseClassList.DataSource = Constants.Proxy.GetLicenseClass();
            LicenseClassList.DataTextField = "Name";
            LicenseClassList.DataValueField = "Id";
            LicenseClassList.DataBind();

            LocaleList.DataSource = Constants.Proxy.GetLocale();
            LocaleList.DataTextField = "LocaleCode";
            LocaleList.DataValueField = "Id";
            LocaleList.DataBind();

            LocaleList.Items.Insert(0, new ListItem("<Select>", "-1"));
        }
        /// <summary>
        /// Populate the Controls from the LicenseType Class
        /// </summary>
        /// <param name="licenseType"></param>
        private void PopulateControls(Proxy.LicenseType licenseType)
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Edit)
            {

                LicenseTypeId.Text = licenseType.Id.ToString();

            }
            else if (licenseTypeOperationMode == Operation_Mode.Add)
            {

                LicenseTypeId.Text = string.Empty;
            }
            LicenseTypeNameLabel.Text = licenseType.Name;
            LicenseTypeName.Text = licenseType.Name;
            LicenseClassList.SelectedValue = licenseType.LicenseClassId.ToString();
            LicenseXML.Text = licenseType.LicenseXML;
            BindLegalText(licenseType);

        }
        /// <summary>
        /// Binds the Legal Text array list to the LegalText Listbox
        /// Exclude the legal texts marked for deletion
        /// </summary>
        /// <param name="licenseType"></param>
        private void BindLegalText(Proxy.LicenseType licenseType)
        {
            if (LegalTextList.Items.Count > 0)
            {
                LegalTextList.Items.Clear();
            }
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        ListItem listItem = new ListItem(legalTextLocale.Locale, legalTextLocale.Legaltextlcid.ToString());
                        LegalTextList.Items.Add(listItem);
                    }
                }
                if (LegalTextList.Items.Count > 0)
                {
                    LegalTextList.SelectedIndex = 0;
                    LegalTextList_SelectedIndexChanged(LegalTextList, EventArgs.Empty);
                }
                else
                {
                    LocaleList.SelectedValue = "-1";
                    LegalText.Text = string.Empty;
                }
            }
        }
        /// <summary>
        /// Selected Index changed Event for LegalText List
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void LegalTextList_SelectedIndexChanged(object sender, EventArgs e)
        {
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = GetLicenseTypeLegalTextLocale(Int32.Parse(LegalTextList.SelectedValue));
            LocaleList.SelectedValue = legalTextLocale.Legaltextlcid.ToString();
            LegalText.Text = legalTextLocale.Text;
        }
        /// <summary>
        /// Validates the LicenseType Data before Save
        /// </summary>
        /// <returns></returns>
        private bool ValidateLicenseTypeData()
        {
            this.ErrorMsg.Text = string.Empty;
            int val;

            if (Int32.TryParse(this.LicenseTypeId.Text.Trim(), out val) == false)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType id");
                return false;
            }

            if (this.LicenseTypeName.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType name");
                return false;
            }
            if (this.LicenseXML.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "License XML");
                return false;
            }

            if (this.LicenseClassList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseClass");
                return false;
            }
            return true;
        }
        /// <summary>
        /// Validates the Legal Text Data
        /// </summary>
        /// <returns></returns>
        private bool ValidateLegalText()
        {
            this.ErrorMsg.Text = string.Empty;

            if (this.LocaleList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;
            }
            if (this.LocaleList.SelectedValue.Equals("-1"))
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;

            }
            if (this.LegalText.Text.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text");
                return false;
            }

            return true;

        }
        /// <summary>
        /// Sets the control's state according to the Mode of Operation
        /// </summary>
        private void SetLicenseTypeEditState()
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                this.LicenseTypeId.Enabled = true;
            }
            this.LicenseTypeName.Enabled = true;
            this.LicenseXML.Enabled = true;
            this.LicenseClassList.Enabled = true;
        }
        /// <summary>
        /// Add legal text Click event 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddLegalText_Click(object sender, ImageClickEventArgs e)
        {
            LocaleList.SelectedValue = "-1";
            LegalText.Text = string.Empty;
            Session[legalTextOperationModeSession] = Operation_Mode.Add;
            SetLegalTextEditState();

        }
        /// <summary>
        /// Sets the Legal Text Edit state
        /// </summary>
        /// <param name="beditLegalText"></param>
        private void SetLegalTextEditState()
        {
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];

            this.btnDeleteLegalText.Enabled = true;
            this.LegalTextList.Enabled = true;
            this.LegalText.Enabled = true;
            this.SaveLegalText.Enabled = true;
            this.CancelLegalText.Enabled = true;
            this.LocaleList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;

            if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.btnEditLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;

            }
            else if (legalTextOperationMode == Operation_Mode.Edit)
            {
                this.btnAddLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;
            }
            else if (legalTextOperationMode == Operation_Mode.Undefined)
            {
                this.SaveLegalText.Enabled = false;
                this.CancelLegalText.Enabled = false;
                this.LocaleList.Enabled = false;
                this.LegalText.Enabled = false;
            }
        }
        /// <summary>
        /// Edit Legal Text Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnEditLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Session[legalTextOperationModeSession] = Operation_Mode.Edit;
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// Click Event for save legal text
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLegalText_Click(object sender, EventArgs e)
        {
            if (!ValidateLegalText())
            {
                return;
            }
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];
            if (legalTextOperationMode == Operation_Mode.Edit)
            {
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocaleInstance in licenseType.LegalTextLocales)
                    {
                        if (legalTextLocale.Legaltextlcid == legalTextLocaleInstance.Legaltextlcid)
                        {
                            legalTextLocaleInstance.Text = this.LegalText.Text;
                            legalTextLocaleInstance.Modified = Proxy.DataChangeType.Update;
                        }

                    }
                }
            }
            else if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.ErrorMsg.Text = string.Empty;
                if (GetLicenseTypeLegalTextLocale(Int32.Parse(this.LocaleList.SelectedValue)) != null)
                {
                    this.ErrorMsg.Text = legalTextDuplicate;
                    return;
                }
                Proxy.LicenseTypeLegalTextLocale legalText = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseTypeLegalTextLocale();
                legalText.Legaltextlcid = Int32.Parse(this.LocaleList.SelectedValue);
                legalText.Locale = this.LocaleList.SelectedItem.Text;
                legalText.Text = this.LegalText.Text;
                legalText.Modified = Proxy.DataChangeType.Add;
                legalText.LicenseTypeId = licenseType.Id;
                licenseType.LegalTextLocales = DisplayHelper.ArrayItemAdd(licenseType.LegalTextLocales, legalText);
            }
            BindLegalText(licenseType);
            ResetLegalTextState();

        }
        /// <summary>
        /// Finds the Legal Text based on lcid
        /// </summary>
        /// <param name="lcid"></param>
        /// <returns></returns>
        private Proxy.LicenseTypeLegalTextLocale GetLicenseTypeLegalTextLocale(int lcid)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Legaltextlcid == lcid && legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        Session[legalTextLocaleSession] = legalTextLocale;
                        return legalTextLocale;
                    }
                }
            }
            Session[legalTextLocaleSession] = null;
            return null;
        }
        /// <summary>
        /// Delete Legal Text Button Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
                Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
                legalTextLocale.Modified = Proxy.DataChangeType.Delete;
                BindLegalText(licenseType);
            }
        }
        /// <summary>
        /// Resets the Legal Text State
        /// </summary>
        private void ResetLegalTextState()
        {
            this.LegalText.Enabled = false;
            this.LocaleList.Enabled = false;
            this.SaveLegalText.Enabled = false;
            this.LegalTextList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnDeleteLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;
            this.CancelLegalText.Enabled = false;

        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Cancel_Click(object sender, EventArgs e)
        {
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Save License Type Button Click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLicenseType_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (!ValidateLicenseTypeData())
            {
                return;
            }
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                if (Constants.Proxy.GetLicenseType(Int32.Parse(LicenseTypeId.Text)) != null)
                {
                    this.ErrorMsg.Text = String.Format(licenseTypeDuplicate, LicenseTypeId.Text);
                    return;
                }
                licenseType.Id = Int32.Parse(LicenseTypeId.Text);
                licenseType.Modified = Proxy.DataChangeType.Add;
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                    {
                        legalTextLocale.LicenseTypeId = licenseType.Id;
                    }
                }
            }
            else if (licenseTypeOperationMode == Operation_Mode.Edit)
            {
                licenseType.Modified = Proxy.DataChangeType.Update;
            }
            licenseType.LicenseClassId = Int32.Parse(LicenseClassList.SelectedValue.Trim());
            licenseType.LicenseXML = LicenseXML.Text.Trim();
            licenseType.Name = LicenseTypeName.Text.Trim();
            try
            {
                Constants.Proxy.SaveLicenseType(licenseType);
            }
            catch (SoapException ex)
            {
                this.ErrorMsg.Text = String.Format("Unable to save LicenseType information: {0}", ex.Message);
                return;
            }
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void CancelLegalText_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            ResetLegalTextState();
            BindLegalText(licenseType);
        }
        # endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\ContentIngestionHealth.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using xonline.common.health;



/// <summary>
/// Summary description for ContentIngestionHealth
/// </summary>
/// This class is not required, this has been added to make sure we overcome the restrictions of
/// aspnet compiler(which does not allow CS_INCLUDES) and also including healthrequest within application code.
namespace Microsoft.Ems.Apps.Web.CatalogWebService
{
    public class ContentIngestionHealth : xonline.common.health.BaseHealthRequest
    {
        public override void ProcessRequest(HttpContext ctx)
        {
            base.ProcessRequest(ctx);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\AssemblyInfo.cs ===
[assembly:System.Security.AllowPartiallyTrustedCallers]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebService\website\App_Code\FrontEndApp.cs ===
using System;
using System.Web;
using System.Reflection;
using System.Diagnostics;

using xonline.common.config;
using xonline.common.mgmt;

namespace xonline.common.service 
{
    public class FrontEndApp : FrontEndAppInternal
    {
        public FrontEndApp() : this(true)
        {
        }

        public FrontEndApp(bool fPerApiCounters) : base(fPerApiCounters)
        {
            // Don't forget this, else FrontEndAppInternal will throw exceptions
            FrontEndAppInternal.FrontEndAppCounters = XrlPerfCounters.Counters;
        }

        public override void Application_Start(object sender, EventArgs e)
        {
            // This one line must run in assembly of the application
            // and must be  "included"  instead  of  linked  against

            Config.Assembly = Assembly.GetExecutingAssembly();
            base.Application_Start(sender, e);
	}
    }

    [XomComponentPerformanceCounterCategoryAttr( "XRL" , "Xbox Live Common Per-XRL Counters" )]
    public class XrlPerfCounters : XomPerformanceCounterCategory, IFrontEndAppCounters
    {
        public IFrontEndAppCounters this[string xrl]
        {
            get
            {
                return (XrlPerfCounters) GetInstance(xrl);
            }
        }

        static public XrlPerfCounters Counters = new XrlPerfCounters();

        [XomPerformanceCounterAttr(
             "Requests, Total",
             "Total number of requests",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter _TotalRequests;

        public PerformanceCounter TotalRequests { get { return _TotalRequests; } }

        [XomPerformanceCounterAttr(
             "Requests, In Progress",
             "Number of requests in progress",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter _RequestsInProgress;
        
        public PerformanceCounter RequestsInProgress { get { return _RequestsInProgress; } }

        [XomPerformanceCounterAttr(
             "Requests, Per Sec",
             "Number of requests completed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter _RequestsPerSec;
        
        public PerformanceCounter RequestsPerSec { get { return _RequestsPerSec; } }

        [XomPerformanceCounterAttr(
             "Requests, Avg. Execution Time (in ms)",
             "Average request execution time in the current AppDomain (in ms)",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter _AverageExecutionTime;

        public PerformanceCounter AverageExecutionTime { get { return _AverageExecutionTime; } }

        [XomPerformanceCounterAttr(
             "Requests, Avg. Execution Time Base",
             "Base for the average request execution time in the current AppDomain",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter _AverageExecutionTimeBase;

        public PerformanceCounter AverageExecutionTimeBase { get { return _AverageExecutionTimeBase; } }

        [XomPerformanceCounterAttr(
             "Failures, Per Sec",
             "Number of failures per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter _FailuresPerSecond;

        public PerformanceCounter FailuresPerSecond { get { return _FailuresPerSecond; } }

        [XomPerformanceCounterAttr(
             "Failures, Total",
             "Total number of failures",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter _FailuresTotal;

        public PerformanceCounter FailuresTotal { get { return _FailuresTotal; } }

        [XomPerformanceCounterAttr(
             "Failures, Percentage",
             "Request failure percentage",
             PerformanceCounterType.SampleFraction)]
        public PerformanceCounter _FailuresPercentage;

        public PerformanceCounter FailuresPercentage { get { return _FailuresPercentage; } }

        [XomPerformanceCounterAttr(
             "Failures, Percentage Base",
             "Base for the prequest failure percentage",
             PerformanceCounterType.SampleBase)]
        public PerformanceCounter _FailuresPercentageBase;

        public PerformanceCounter FailuresPercentageBase { get { return _FailuresPercentageBase; } }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Category.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a category.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Category
    {
        private String localizedName;

        /// <summary>
        /// Provides the localized version of the category name
        /// TODO: currently hardcoded to enus - should get this from some context
        /// </summary>
        public String LocalizedName
        {
            get 
            {
                if (localizedName == null )
                {
                    foreach( CategoryLocaleMap clm in CategoryLocaleMap )
                    {
                        if ( clm.FromLcid == 1033 )
                        {
                            foreach ( CategoryLocale cl in Locales )
                            {
                                if ( cl.Lcid == clm.ToLcid )
                                {
                                    localizedName = cl.Name;
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                }
                return localizedName;
            }
        }


        /// <summary>
        /// Returns a list of Locale object for which the lcid has not been mapped in the
        /// CategoryLocaleMap list for this instance. The method uses the 'Locale.Get()' 
        /// method to get the list of avaialble locales. If the list of CategoryLocaleMaps
        /// contains an entry which is marked as 'Delete', then it is considered as unmapped
        /// and will be retured as part of the resulting list.
        /// </summary>
        public List<Locale> GetUnmappedLocales()
        {
            // Firstly, populate a dictionary with all possible locales
            Dictionary<Int32, Locale> unmappedLocales = new Dictionary<Int32, Locale>();
            foreach( Locale locale in Locale.Get() )
            {
                unmappedLocales.Add( locale.LCID, locale );
            }

            // Now remove any which are already mapped to somthing, unless they are marked
            // as 'delete'
            foreach( CategoryLocaleMap categoryLocaleMap in this.CategoryLocaleMap )
            {
                // If the categoryLocaleMap is marked as 'delete', consider it as 'unmapped' and
                // as such, it should remain in the dictionary of unampped locales
                if ( categoryLocaleMap.Modified == DataChangeType.Delete )
                {
                    continue;
                }

                // If the categoryLocaleMap is in the dictionary, then remove it.
                if ( unmappedLocales.ContainsKey( categoryLocaleMap.FromLcid ))
                {
                    unmappedLocales.Remove( categoryLocaleMap.FromLcid );
                }
            }

            // Anything remaining in the the dictionary is unmapped. Return them as a
            // list
            List<Locale> sortedList = new List<Locale>( unmappedLocales.Values );
            sortedList.Sort( Locale.CompareLocalesByName );
            return sortedList;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\AudioEncoding.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an audio encoding.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class AudioEncoding : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,AudioEncoding> cache = new ProxyCache<Int32,AudioEncoding>( new ProxyCache<Int32,AudioEncoding>.DataLoaderDelegate(CatalogServices.Catalog.GetAudioEncoding),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all AudioEncodings known to the system
        /// </summary>
        public static List<AudioEncoding> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retrieves the AudioEncoding information for ad audio encoding
        /// <summary>
        /// <param name="audioEncodingId">The id of the audio encoding to retrieve</param>
        /// <returns>The AudioEncoding object matching the id if one exists, otherwise null</returns>
        public static AudioEncoding Get(Int32 audioEncodingId)
        {
            return cache.Get(audioEncodingId);
        }
        /// <summary>
        /// Refreshes the ClientSide Cache
        /// </summary>
        public static void RefreshCache()
        {
            cache.Refresh();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\CatalogServices.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy {
    using System;
    using System.ComponentModel;
    using System.Configuration;
    using System.Diagnostics;
    using System.Web.Configuration;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    
    
    public partial class CatalogServices
    {
        private static CatalogServices catalog;
        public static CatalogServices Catalog
        {
            get
            {
                if (catalog == null)
                {
                    catalog = new CatalogServices();
                }
                return catalog;
            }
            set
            {
                catalog = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\CatalogConstants.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    /// <summary>
    /// Static class for constants, usually CatalogDB Ids for reference for anyone using the CatalogWebServiceProxy.
    /// </summary>
    public static class CatalogConstants
    {
        // About this class
        // Keep the list of constants sorted by the constant type you are adding
        // Use good meaningful name, if you think there might be some confusion, add comments

        public static readonly ulong AvatarUniqueIdSmallImage = 1;
        public static readonly ulong AvatarUniqueIdMediumImage = 2;
        public static readonly ulong AvatarUniqueIdLargeImage = 3;

        public static readonly int CategorySystemPublisher = 4000;
        public static readonly int ClientTypeXBox360 = 1;
        public static readonly int ClientTypePC = 7;
        public static readonly string ContributorCharacterForCommunityGame = "Developer";

        public static readonly int ExternalFeedMappingObjectEntity = 1;
        public static readonly int ExternalFeedMappingObjectCategory = 2;
        public static readonly int ExternalFeedMappingObjectAvatarCategory = 8;
        public static readonly int ExternalFeedMappingObjectAvatarBodyType = 9;
        public static readonly int ExternalFeedSourceIdLiveTools = 1;

        public enum HDTVMode
        {
            None,
            p720,
            i1080,
            p1080,
            i480,
            p480,
            D1,
            D2,
            D3,
            D4,
            i576,
            p576
        }

        public static readonly int GamesIngestionRelationshipSortOrderForPrimaryGame = 0; // sort order value to use by Games Ingestion for the Primary Game
        public static readonly int GamesIngestionRelationshipSortOrder = 1; // sort order value to use by Games Ingestion
        public static readonly ushort GamePublisherXU = 0x5855; // for community games
        public static readonly ushort GamePublisherXV = 0x5856; // for community games
        public static readonly ushort GamePublisherXJ = 0x584A; // for server backed games
        public static ushort[] GamePublishersForXNA = new ushort[] { GamePublisherXU, GamePublisherXV };
        public static ushort[] GamePublishersForSBG = new ushort[] { GamePublisherXJ };
        
        public static readonly uint GameRegionMaskUnrestricted = 0xFFFFFFFF;	

        public static readonly int ImageFormatJpg = 4;
        public static readonly int ImageFormatPng = 5;
        public static readonly int ImageSizeXboxPoster1 = 10;
        public static readonly int ImageSizeXboxPoster2 = 11;
        public static readonly int ImageSizeXboxNetworkLogo = 12;
        public static readonly int ImageSizeXboxWideBackground = 13;
        public static readonly int ImageSizeLegacyGameTitleImage = 14;
        public static readonly int ImageSizeLegacyGameOfferImage = 15;
        public static readonly int ImageSizeAdMerchBannerImage1 = 16;
        public static readonly int ImageSizeAdMerchBannerImage2 = 17;
        public static readonly int ImageSizeAdMerchBannerImage3 = 18;
        public static readonly int ImageSizeAdMerchBannerImage4 = 19;
        public static readonly int ImageSizeAdMerchBannerImage5 = 20;
        public static readonly int ImageSizeAdMerchBannerImage6 = 21;
        public static readonly int ImageSizeWideBackground = 22;  
        public static readonly int ImageSizeXboxBoxArt = 23;
        public static readonly int ImageSizeXboxTvPoster = 25;
        public static readonly int ImageSizeSlideShow = 27;  
        public static readonly int ImageSizeWebBoxArt = 30;
        public static readonly int ImageSizeMedThumbnail = 32;
        public static readonly int ImageSizeEpixSlot = 33;
        public static readonly int ImageSizeEditorButtonImage = 34;
        public static readonly int ImageSizeDotComLeftHandNav = 35;
        public static readonly int ImageSizeDotComBackgroundImage = 36;

        public static readonly int LcidUs = 1033;

        public static readonly int MediaCategorySystemContentBitFilter = 12000;
        public static readonly int MediaCategorySystemAvatarBase = 13000;
        public static readonly int MediaCategorySystemAvatarExtended = 14000;
	    public static readonly int MediaLocaleReducedTitleLength = 50;
        public static readonly int MediaLocaleReducedDescriptionLength = 500;
        public static readonly int MediaType360Game = 1;
        public static readonly int MediaType360ArcadeDemo = 5;
        public static readonly int MediaTypeImage = 14;
        public static readonly int MediaTypeBoxArtImage = 15;
        public static readonly int MediaTypeScreenShotImage = 17;
        public static readonly int MediaType360InGameContent = 18;
        public static readonly int MediaType360GameDemo = 19;
        public static readonly int MediaType360Theme = 20;
        public static readonly int MediaTypeXbox1Game = 21;
        public static readonly int MediaTypeGamerTile = 22;
        public static readonly int MediaType360ArcadeGame = 23;
        public static readonly int MediaType360ConsumableContent = 24;
        public static readonly int MediaTypeGameVideo = 30;
        public static readonly int MediaTypeBackgroundArtImage = 31;
        public static readonly int MediaTypeGameTrailer = 34;
        public static readonly int MediaTypeCommunityGame = 37;
        public static readonly int MediaTypeSlidehowPreviewImage = 41;
        public static readonly int MediaTypeGamePackagedVideo = 42;
        public static readonly int MediaTypeLegacyXbox1Game = 43;
        public static readonly int MediaTypeServerBackedGame = 45;
        public static readonly int MediaTypeMarketplaceContent = 46;
        public static readonly int MediaTypeAvatarItem = 47;

        public static readonly int OfferStoreXbox = 1;
        public static readonly int OfferStoreGamesForWindows = 3;

        public static readonly int PackageTypeCab = 1;
        public static readonly int PackageTypeSvodUncompressed = 2;
        public static readonly int PackageTypeSvodCompressed = 3;

        public static readonly int PaymentTypePoints = 1;
        public static readonly int PaymentTypeToken = 2;
        public static readonly int PaymentTypeCreditCard = 3;
        public static readonly int ProviderMicrosoft = 38;
        public static readonly string ProviderTermModifiedBy = "GamesIngestion"; // this string will be used as constant for any change done by Games Ingestion               
        
        public static readonly int RelationshipMediaToAssociatedDownload = 2;
        public static readonly int RelationshipMediaToImage = 15;
        public static readonly int RelationshipMediaToPoster = 22;
        public static readonly int RelationshipMediaToWideBackgroundImage = 25;
        public static readonly int RelationshipMediaToSellImage = 27;
        public static readonly int RelationshipGameContentToSharedInstance = 31;
        public static readonly int RelationshipMediaToSlideshow = 32;
        public static readonly int RelationshipMediaToBoxArt= 33;

        public static readonly int RoleCreator = 25;
        
        public static readonly int UserTypeGold = 2;
        public static readonly int UserTypeSilver = 3;
        public static readonly int UserTypeFamilyGold = 4;

        public static readonly DateTime VisibilityDateForGameMedia = DateTime.UtcNow;
        public static readonly int VisibilityLevelDefault = 1;
        public static readonly int VisibilityLevelNoEnumerateInPartnernet = 2;
        public static readonly int VisibilityLevelNeverEnumerate = 3;
        public static readonly int VisibilityStatusLive = 3;
	    public static readonly int VisibilityStatusDelete = 5;

        public static readonly int RestrictedToMachine = 11;
        public static readonly int RestrictedToUserOnlyOffline = 12;
        public static readonly int RestrictedToUserAndMachine = 14;
        public static readonly int Unrestricted = 13;

        public enum CountryCodes
        {
            AL,
            DZ,
            AR,
            AM,
            AU,
            AT,
            AZ,
            BH,
            BY,
            BE,
            BZ,
            BO,
            BR,
            BN,
            BG,
            CB,
            CA,
            CL,
            CN,
            CO,
            CR,
            HR,
            CZ,
            DK,
            DO,
            EC,
            EG,
            SV,
            EE,
            FO,
            FI,
            FR,
            GE,
            DE,
            GR,
            GT,
            HN,
            HK,
            HU,
            IS,
            IN,
            ID,
            IR,
            IQ,
            IE,
            IL,
            IT,
            JM,
            JP,
            JO,
            KZ,
            KE,
            KR,
            KW,
            KG,
            LV,
            LB,
            LY,
            LI,
            LT,
            LU,
            MO,
            MK,
            MY,
            MV,
            MX,
            MC,
            MN,
            MA,
            NL,
            NZ,
            NI,
            NO,
            OM,
            PK,
            PA,
            PY,
            PE,
            PH,
            PL,
            PT,
            PR,
            QA,
            RO,
            RU,
            SA,
            SG,
            SK,
            SI,
            ZA,
            SP,
            ES,
            SE,
            CH,
            SY,
            TW,
            TH,
            TT,
            TN,
            TR,
            UA,
            AE,
            GB,
            US,
            UY,
            UZ,
            VE,
            VN,
            YE,
            ZW,

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\CatalogServicesInternal.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy {
    using System;
    using System.ComponentModel;
    using System.Configuration;
    using System.Diagnostics;
    using System.Web.Configuration;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.Net;
    using System.Net.Sockets;
    using System.Security.Cryptography;
    using System.Text;


    public partial class CatalogServicesInternal : CatalogServices
    {

        //variables defining Header constants
        private static readonly string partnerNameHeader = "Subject-Name";
        private static readonly string clientIPHeader = "Client-IP-Port";
        private static readonly string requestIDHeader = "RequestId";
        private static readonly string internalPartnerName = "MarketplaceInternalPartner";
        private static RNGCryptoServiceProvider cryptoProvider = new RNGCryptoServiceProvider();

        //machine IP and port(Port is hard coded to 80)
        private static string machineIPPort="1.1.1.1:80";

        /// <summary>
        /// static init function
        /// </summary>
        public static void Init()
        {
            CatalogServices.Catalog = new CatalogServicesInternal();
            GetMachineIp();
        }
        /// <summary>
        /// OverRidden Implementation for GetWebRequest
        /// </summary>
        /// <param name="uri"></param>
        /// <returns></returns>
        protected override System.Net.WebRequest GetWebRequest(Uri uri)
        {
            WebRequest request = base.GetWebRequest(uri);
            ClearWebSGHeaders(request);
            AddWebSGHeaders(request);
            return request;
            
        }
        /// <summary>
        /// Clears the headers
        /// </summary>
        /// <param name="request"></param>
        private void ClearWebSGHeaders(WebRequest request)
        {
            request.Headers.Remove(partnerNameHeader);
            request.Headers.Remove(clientIPHeader);
            request.Headers.Remove(requestIDHeader);
        }
        /// <summary>
        /// Add the headers to the request
        /// </summary>
        /// <param name="request"></param>
        private void AddWebSGHeaders(WebRequest request)
        {
            request.Headers.Add(partnerNameHeader, internalPartnerName);
            request.Headers.Add(clientIPHeader, machineIPPort);
            request.Headers.Add(requestIDHeader, GetRandomRequestId());
        }
        /// <summary>
        /// Retrieves the ipv4 address for the current machine and assigns it to machineIP variable
        /// </summary>
        /// <returns></returns>
        private static string GetMachineIp()
        {
            foreach (IPAddress ipAddress in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
            {
                if (ipAddress.AddressFamily == AddressFamily.InterNetwork)
                {
                    machineIPPort = string.Format("{0}:{1}",ipAddress.ToString(),"80");
                }
            }
            return machineIPPort;
        }
        /// <summary>
        /// Generates Random Request ID
        /// </summary>
        /// <returns></returns>
        private string GetRandomRequestId()
        {
            byte[] randomBytes = new byte[8];
            cryptoProvider.GetBytes(randomBytes);
            StringBuilder sb = new StringBuilder(randomBytes.Length * 2);
            foreach (byte b in randomBytes)
            {
                sb.AppendFormat("{0:x2}", b);
            }
            return sb.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\CategorySystem.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a category system.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class CategorySystem : IProxyKey<Int32>
    {
        /// <summary>
        /// A class that acts as a container for the results of a lookup by category id
        /// </summary>
        /// <remarks>
        /// When provided a category id, a user will want to know the CategorySysted to
        /// which the Category for the id belongs to, as well as the multilevel set of
        /// Categories which this category may live under. This class serves as a container
        /// for that resultset. The list of categories is in order of highest (ie the one
        /// that is an immediate child of the CategorySystem) to lowest (the leaf node Category).
        /// </remarks>
        public class CategoryHierarchy
        {
            private CategorySystem categorySystem;
            private Category[] categories;

            public CategorySystem CategorySystem
            {
                get { return categorySystem; }
                internal set { categorySystem = value; }
            }

            public Category[] Categories
            {
                get { return categories; }
                internal set { categories = value; }
            }
        }

        /// <summary>
        /// Private class used for atomically holding and retrieveing the collections 
        /// </summary>
        private class CachedCategorySystems
        {
            private static CachedCategorySystems cachedCategorySystem = null;
            private static Object retrievalLockObject = new Object();

            private Dictionary<Int32,Category> allCategories;
            private List<CategorySystem> allCategorySystems;
            private Dictionary<Int32,CategorySystem> indexedCategorySystems;

            internal static void Refresh()
            {
                lock( retrievalLockObject )
                {
                    cachedCategorySystem = null;   
                }
            }

            internal static CachedCategorySystems GetCachedCategorySystems()
            {
                if ( cachedCategorySystem == null )
                {
                    lock( retrievalLockObject )
                    {
                        if ( cachedCategorySystem == null )
                        {
                            // Go to the web-service/db and get an array
                            CategorySystem[] categorySystems = CatalogServices.Catalog.GetCategorySystem();

                            // Create a new CachedCategorySystems pbject to hold the results
                            CachedCategorySystems newCachedCategorySystems = new CachedCategorySystems();
                            foreach( CategorySystem categorySystem in categorySystems )
                            {
                                // Add to the list of all category systems
                                newCachedCategorySystems.allCategorySystems.Add( categorySystem );

                                // Add to the indexed view of category systems
                                newCachedCategorySystems.indexedCategorySystems.Add( categorySystem.Id, categorySystem );

                                // Add all of its categories (recursively) in the list of all categories
                                PopulateCategories(  newCachedCategorySystems.allCategories, categorySystem.Categories );
                            }

                            // swap in the new cached object
                            cachedCategorySystem = newCachedCategorySystems;
                        }
                    }
                }
                return cachedCategorySystem;
            }

            internal Dictionary<Int32,Category> AllCategories
            {
                get { return allCategories; }
            }

            internal List<CategorySystem> AllCategorySystems
            {
                get { return allCategorySystems; }
            }

            internal Dictionary<Int32,CategorySystem> IndexedCategorySystems
            {
                get { return indexedCategorySystems; }
            }
            
            private static void PopulateCategories( Dictionary<Int32,Category> dict, Category[] categories )
            {
                foreach( Category category in categories )
                {
                    dict.Add( category.Id, category );
                    if ( category.Categories != null )
                    {
                        PopulateCategories( dict, category.Categories);
                    }
                }
            }

            private CachedCategorySystems()
            {
                this.allCategories = new Dictionary<Int32,Category>();
                this.allCategorySystems = new List<CategorySystem>();
                this.indexedCategorySystems = new Dictionary<Int32,CategorySystem>();
            }
        }


        /// <summary>
        /// Causes the cache to be refreshed
        /// </summary>
        public static void Refresh()
        {
            CachedCategorySystems.Refresh();
        }

        /// <summary>
        /// Retirves the list of all CategorySystems
        /// </summary>
        public static List<CategorySystem> Get()
        {
            return CachedCategorySystems.GetCachedCategorySystems().AllCategorySystems;
        }

        /// <summary>
        /// Retrieves a CategorySystem object matching the id passed in
        /// </summary>
        /// <param name="id">The id of the CategorySystem to retrieve</param>
        /// <returns>The CategorySystem matching id passed in or null if one does not exist</returns>
        public static CategorySystem Get(Int32 id )
        {
            return CachedCategorySystems.GetCachedCategorySystems().IndexedCategorySystems[id];
        }

        /// <summary>
        /// Retrieves a Category object given its id
        /// </summary>
        /// <param name="id">The id of the Category to retrieve</param>
        /// <returns>The Category matching the id passed in</returns>
        public static Category GetCategoryById( Int32 categoryId )
        {
            Category category = null;
            (CachedCategorySystems.GetCachedCategorySystems().AllCategories).TryGetValue( categoryId, out category ); 
            if ( category == null )
            {
                throw new ArgumentException( "The supplied category id does not exist." );
            }
            return category;
        }
        
        /// <summary>
        /// Given a category id, returns the CategorySystem and list of Category objects
        /// that represent where this category lives in the hierarchy.
        /// </summary>
        /// <param name="categoryId">The id of the Category to retrieve</param>
        /// <returns>CategoryHierarchy with all the relevant information</returns>
        public static CategoryHierarchy GetCategoryHierarchy( Int32 categoryId )
        {
            Category category = GetCategoryById( categoryId );

            // Create a CategoryHierarchy object to hold the results
            CategoryHierarchy hierarchy = new CategoryHierarchy();

            // Set the CategorySystem
            hierarchy.CategorySystem = Get( category.CategorySystemId );

            // Build the list of categories
            List<Category> list = new List<Category>();
            list.Add( category );
            while ( category.ParentCategoryId != null )
            {
                category = (CachedCategorySystems.GetCachedCategorySystems().AllCategories)[(Int32)(category.ParentCategoryId)];
                list.Add( category );
            }

            // Reverse the list and then set the list of categories on the hierarchy
            list.Reverse();
            hierarchy.Categories = list.ToArray();

            return hierarchy;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ClientType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    /// <summary>
    /// Holds information about a type of client.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class ClientType : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,ClientType> cache = new ProxyCache<Int32,ClientType>( new ProxyCache<Int32,ClientType>.DataLoaderDelegate(CatalogServices.Catalog.GetClientType),
                                                                                            Settings.GetCacheExpirationPeriod());

        /// <summary>
        /// Retrieves the set of all client types
        /// </summary>
        public static List<ClientType> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retirves the client type for the given id
        /// </summary>
        /// <param name="id">The id for the client type to retrieve</param>
        /// <returns>The ClientType for the given id or null if one does not exist</returns>
        public static ClientType Get(Int32 id )
        {
            return cache.Get(id);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorRelationship.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    public partial class ContributorRelationship
    {
        private string localName = String.Empty;
        [XmlIgnore()]
        public string LocalName
        {
            get
            {
                return localName;
            }
            set
            {
                localName = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorLocaleMap.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    /// <summary>
    /// </summary>
    public partial class ContributorLocaleMap
    {
        public string LocaleCode
        {
            get
            {
                return Locale.Get(Lcid).LocaleCode;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorCategory.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    public partial class ContributorCategory
    {
        private string localName = String.Empty;
        [XmlIgnore()]
        public string LocalName
        {
            get
            {
                return localName;
            }
            set
            {
                localName = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorLocale.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{

    /// <summary>
    /// </summary>
    public partial class ContributorLocale
    {
        public string LocaleCode
        {
            get
            {
                return Locale.Get(Lcid).LocaleCode;
            }
        }

        private List<ContributorLocaleMap> deletedLocales = new List<ContributorLocaleMap>();
        private List<ContributorLocaleMap> listLocales = null;
        private void InitTargetingLocales()
        {
            if (listLocales == null)
            {
                listLocales = new List<ContributorLocaleMap>();
                if (TargetingLocales != null)
                {
                    listLocales.AddRange(TargetingLocales);
                }
            }
        }
        public void DeleteTargetingLocale(ContributorLocaleMap clm)
        {
            InitTargetingLocales();
            if (!deletedLocales.Exists(delegate(ContributorLocaleMap _clm){return (_clm.Lcid == clm.Lcid);}))
            {
                clm.Modified = DataChangeType.Delete;
                deletedLocales.Add(clm);
            }
            listLocales.Remove(listLocales.Find(delegate(ContributorLocaleMap _clm){return (_clm.Lcid == clm.Lcid);}));
        }

        public void AddTargetingLocale(ContributorLocaleMap clm)
        {
            InitTargetingLocales();
            if (!listLocales.Exists(delegate(ContributorLocaleMap _clm){return (_clm.Lcid == clm.Lcid);}))
            {
                clm.Modified = DataChangeType.Add;
                listLocales.Add(clm);
            }
        }

        public ContributorLocaleMap GetTargetingLocale(int lcid)
        {
            InitTargetingLocales();
            if (listLocales.Exists(delegate(ContributorLocaleMap _clm){return (_clm.Lcid == lcid);}))
            {
                return listLocales.Find(delegate(ContributorLocaleMap _clm){return (_clm.Lcid == lcid);});
            }
            return null;
        }

        public ContributorLocaleMap[] GetTargetingLocales()
        {
            InitTargetingLocales();
            return listLocales.ToArray();
        }

        public ContributorLocaleMap[] GetSaveTargetingLocales()
        {
            List<ContributorLocaleMap> retval = new List<ContributorLocaleMap>();
            retval.AddRange(listLocales);
            retval.AddRange(deletedLocales);
            return retval.ToArray();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Contributor.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    public partial class Contributor
    {
        public static Contributor NewContributor()
        {
            Contributor c = new Contributor();
            c.Id = Guid.NewGuid();
            c.Modified = DataChangeType.Add;
            c.Aliases = new ContributorAlias[0];
            c.Articles = new ContributorArticle[0];
            c.Categories = new ContributorCategory[0];
            c.Locales = new ContributorLocale[1] {new ContributorLocale()};
            c.Locales[0].Lcid = 1033;
            c.Locales[0].DisplayName = "New Contributor";
            c.Locales[0].Modified = DataChangeType.Add;
            c.Locales[0].TargetingLocales = new ContributorLocaleMap[1] {new ContributorLocaleMap()};
            c.Locales[0].TargetingLocales[0].Modified = DataChangeType.Add;
            c.Locales[0].TargetingLocales[0].Lcid = 1033;
            c.Relationships = new ContributorRelationship[0];
            return c;
        }

        public Contributor Clone()
        {
            Contributor c = Contributor.NewContributor();
            c.Categories = this.Categories;
            c.Articles = this.Articles;
            c.Relationships = this.Relationships;
            return c;
        }

        [XmlIgnore()]
        public string LocalName
        {
            get
            {
                return Array.Find(Locales, delegate(ContributorLocale l) 
                                           {
                                               return Array.Exists(l.TargetingLocales, delegate(ContributorLocaleMap clm)
                                                                                       {
                                                                                           // For now, assume the desired locale is en-us
                                                                                           return (clm.Lcid == 1033);
                                                                                       });
                                           }).DisplayName;
            }
        }

        [XmlIgnore()]
        public List<Locale> UnusedLocales
        {
            get
            {
                InitLocales();
                List<Locale> allLocales = new List<Locale>();
                allLocales.AddRange(Locale.Get());
                foreach (ContributorLocale cl in listLocales)
                {
                    foreach (ContributorLocaleMap clm in cl.GetTargetingLocales())
                    {
                        allLocales.Remove(allLocales.Find(delegate(Locale l){ return (l.LCID == clm.Lcid);}));
                    }
                }
                return allLocales;
            }
        }

        private List<ContributorCategory> deletedCategories = new List<ContributorCategory>();
        private List<ContributorCategory> listCategories = null;
        private void InitCategories()
        {
            if (listCategories == null)
            {
                listCategories = new List<ContributorCategory>();
                listCategories.AddRange(Categories);
            }
        }
        public void DeleteCategory(ContributorCategory cc)
        {
            InitCategories();
            if (!deletedCategories.Exists(delegate(ContributorCategory _cc){return (_cc.CategoryId == cc.CategoryId);}))
            {
                cc.Modified = DataChangeType.Delete;
                deletedCategories.Add(cc);
            }
            listCategories.Remove(listCategories.Find(delegate(ContributorCategory _cc){return (_cc.CategoryId == cc.CategoryId);}));
        }

        public void AddCategory(ContributorCategory cc)
        {
            InitCategories();
            if (!listCategories.Exists(delegate(ContributorCategory _cc){return (_cc.CategoryId == cc.CategoryId);}))
            {
                cc.Modified = DataChangeType.Add;
                listCategories.Add(cc);
            }
        }

        public ContributorCategory GetCategory(int id)
        {
            InitCategories();
            if (listCategories.Exists(delegate(ContributorCategory _cc){return (_cc.CategoryId == id);}))
            {
                return listCategories.Find(delegate(ContributorCategory _cc){return (_cc.CategoryId == id);});
            }
            return null;
        }

        public ContributorCategory[] GetCategories()
        {
            InitCategories();
            return listCategories.ToArray();
        }

        public void PromoteCategory(int index)
        {            
            if (index > 0)
            {
                ContributorCategory temp = listCategories[index];
                listCategories[index] = listCategories[index-1];
                listCategories[index-1] = temp;
            }
        }

        public void DemoteCategory(int index)
        {
            if (index < (listCategories.Count - 1))
            {
                ContributorCategory temp = listCategories[index];
                listCategories[index] = listCategories[index+1];
                listCategories[index+1] = temp;
            }
        }


        private List<ContributorLocale> deletedLocales = new List<ContributorLocale>();
        private List<ContributorLocale> listLocales = null;
        private void InitLocales()
        {
            if (listLocales == null)
            {
                listLocales = new List<ContributorLocale>();
                listLocales.AddRange(Locales);
            }
        }
        public void DeleteLocale(ContributorLocale cl)
        {
            InitLocales();
            if (!deletedLocales.Exists(delegate(ContributorLocale _cl){return (_cl.Lcid == cl.Lcid);}))
            {
                cl.Modified = DataChangeType.Delete;
                deletedLocales.Add(cl);
            }
            listLocales.Remove(listLocales.Find(delegate(ContributorLocale _cl){return (_cl.Lcid == cl.Lcid);}));
        }

        public void AddLocale(ContributorLocale cl)
        {
            InitLocales();
            if (!listLocales.Exists(delegate(ContributorLocale _cl){return (_cl.Lcid == cl.Lcid);}))
            {
                cl.Modified = DataChangeType.Add;
                listLocales.Add(cl);
            }
        }

        public ContributorLocale GetLocale(int lcid)
        {
            InitLocales();
            if (listLocales.Exists(delegate(ContributorLocale _cl){return (_cl.Lcid == lcid);}))
            {
                return listLocales.Find(delegate(ContributorLocale _cl){return (_cl.Lcid == lcid);});
            }
            return null;
        }

        public ContributorLocale[] GetLocales()
        {
            InitLocales();
            return listLocales.ToArray();
        }

        private List<ContributorAlias> deletedAliases = new List<ContributorAlias>();
        private List<ContributorAlias> listAliases = null;
        private void InitAliases()
        {
            if (listAliases == null)
            {
                listAliases = new List<ContributorAlias>();
                listAliases.AddRange(Aliases);
            }
        }
        public void DeleteAlias(ContributorAlias ca)
        {
            InitAliases();
            if (ca.Modified != DataChangeType.Add && 
                !deletedAliases.Exists(delegate(ContributorAlias _ca){return (_ca.Id == ca.Id);}))
            {
                ca.Modified = DataChangeType.Delete;
                deletedAliases.Add(ca);
            }
            listAliases.Remove(listAliases.Find(delegate(ContributorAlias _ca){return (_ca.Id == ca.Id);}));
        }

        public void AddAlias(ContributorAlias ca)
        {
            InitAliases();
            if (!listAliases.Exists(delegate(ContributorAlias _ca){return (_ca.Id == ca.Id);}))
            {
                ca.Modified = DataChangeType.Add;
                ca.Id = Guid.NewGuid();
                listAliases.Add(ca);
            }
        }

        public ContributorAlias GetAlias(Guid id)
        {
            InitAliases();
            if (listAliases.Exists(delegate(ContributorAlias _ca){return (_ca.Id == id);}))
            {
                return listAliases.Find(delegate(ContributorAlias _ca){return (_ca.Id == id);});
            }
            return null;
        }

        public ContributorAlias[] GetAliases()
        {
            InitAliases();
            ContributorAlias[] retval = listAliases.ToArray();
            return retval;
        }

        private List<ContributorRelationship> deletedRelationships = new List<ContributorRelationship>();
        private List<ContributorRelationship> listRelationships = null;
        private void InitRelationships()
        {
            if (listRelationships == null)
            {
                listRelationships = new List<ContributorRelationship>();
                listRelationships.AddRange(Relationships);
            }
        }
        public void DeleteRelationship(ContributorRelationship cr)
        {
            InitRelationships();
            cr = listRelationships.Find(delegate(ContributorRelationship _cr){return (_cr.RelatedContributorId == cr.RelatedContributorId && _cr.RoleId == cr.RoleId && _cr.ContributorRelationshipTypeId == cr.ContributorRelationshipTypeId);});
            if (cr != null)
            {
                if (cr.Modified != DataChangeType.Add &&
                    !deletedRelationships.Exists(delegate(ContributorRelationship _cr){return (_cr.RelatedContributorId == cr.RelatedContributorId && _cr.RoleId == cr.RoleId && _cr.ContributorRelationshipTypeId == cr.ContributorRelationshipTypeId);}))
                {
                    cr.Modified = DataChangeType.Delete;
                    deletedRelationships.Add(cr);
                }
                listRelationships.Remove(cr);
            }
        }

        public void AddRelationship(ContributorRelationship cr)
        {
            InitRelationships();
            if (!listRelationships.Exists(delegate(ContributorRelationship _cr){return (_cr.RelatedContributorId == cr.RelatedContributorId && _cr.RoleId == cr.RoleId && _cr.ContributorRelationshipTypeId == cr.ContributorRelationshipTypeId);}))
            {
                cr.Modified = DataChangeType.Add;
                listRelationships.Add(cr);
            }
        }

        public ContributorRelationship[] GetRelationships()
        {
            InitRelationships();
            return listRelationships.ToArray();
        }

        public void PromoteRelationship(int index)
        {            
            if (index > 0)
            {
                ContributorRelationship temp = listRelationships[index];
                listRelationships[index] = listRelationships[index-1];
                listRelationships[index-1] = temp;
            }
        }

        public void DemoteRelationship(int index)
        {
            if (index < (listRelationships.Count - 1))
            {
                ContributorRelationship temp = listRelationships[index];
                listRelationships[index] = listRelationships[index+1];
                listRelationships[index+1] = temp;
            }
        }

        public void Save()
        {
            List<ContributorLocale> saveLocales = new List<ContributorLocale>();
            saveLocales.AddRange(listLocales);
            saveLocales.AddRange(deletedLocales);
            bool b1033RuleValidated = false;
            foreach (ContributorLocale cl in listLocales)
            {
                foreach (ContributorLocaleMap clm in cl.GetTargetingLocales())
                {
                    if (clm.Lcid == 1033)
                    {
                        b1033RuleValidated = true;
                        break;
                    }
                }
            }
            if (b1033RuleValidated)
            {
                foreach (ContributorLocale cl in saveLocales)
                {
                    cl.TargetingLocales = cl.GetSaveTargetingLocales();
                }
            }
            else
            {
                throw new ArgumentException("Must have Locale en-us mapped!");
            }
            Locales = saveLocales.ToArray();

            listAliases.AddRange(deletedAliases);
            Aliases = listAliases.ToArray();

            listRelationships.AddRange(deletedRelationships);
            Relationships = listRelationships.ToArray();
            for(int i = 0; i < Relationships.Length; i++)
            {
                Relationships[i].SortOrder = i;
            }

            listCategories.AddRange(deletedCategories);
            Categories = listCategories.ToArray();
            for(int i = 0; i < Categories.Length; i++)
            {
                Categories[i].SortOrder = i;
            }

            CatalogServices.Catalog.SaveContributor(this);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorRelationshipType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    /// <summary>
    /// Defines a type relationship between two Contributors
    /// </summary>
    public partial class ContributorRelationshipType : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,ContributorRelationshipType> cache = new ProxyCache<Int32,ContributorRelationshipType>(
                                    new ProxyCache<Int32,ContributorRelationshipType>.DataLoaderDelegate(CatalogServices.Catalog.GetContributorRelationshipType),
                                    Settings.GetCacheExpirationPeriod());

        /// <summary>
        /// Returns the complete set of types of relationships that can exist between two contributors
        /// </summary>
        public static List<ContributorRelationshipType> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Returns the object holding particular relationship type given the id
        /// </summary>
        /// <param name="id">The id for the contributor relationship type</param>
        /// <returns>The ContributorRelationshipType object corresponding to the id or null if one does not exist</returns>
        public static ContributorRelationshipType Get(Int32 id)
        {
            return cache.Get(id);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ContributorRequest.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    public partial class ContributorRequest
    {
        public ContributorRequest()
        {
            isGroupField = -1;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Currency.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    public partial class Currency : IProxyKey<String>
    {
        private static ProxyCache<String, Currency> cache = new ProxyCache<String, Currency>(new ProxyCache<String, Currency>.DataLoaderDelegate(CatalogServices.Catalog.GetCurrency),
                                                                                            Settings.GetCacheExpirationPeriod());

        /// <summary>
        /// Implements the IProxyKey.Id - required for the ProxyCache
        /// </summary>
        public String Id
        {
            get { return Code; }
        }

        /// <summary>
        /// Retrieves the list of possible Currency objects
        /// </summary>
        public static List<Currency> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retrieves a specific Currency object given a currency code
        /// </summary>
        /// <param name="currencyCode">The currency code to search for. Case insensitive</param>
        /// <returns>A Currency object for the code or null if it is not found</returns>
        public static Currency Get(String currencyCode)
        {
            return cache.Get(currencyCode.ToUpper());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Country.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    public partial class Country : IProxyKey<String>
    {
        private static ProxyCache<String,Country> cache = new ProxyCache<String,Country>( new ProxyCache<String,Country>.DataLoaderDelegate(CatalogServices.Catalog.GetCountry),
                                                                                            Settings.GetCacheExpirationPeriod());

        /// <summary>
        /// Implements the IProxyKey.Id - required for the ProxyCache
        /// </summary>
        public String Id
        {
            get { return Code; }
        }

        /// <summary>
        /// Retrieves the list of possible Country objects
        /// </summary>
        public static List<Country> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retrieves a specific Country object ginven a country code
        /// </summary>
        /// <param name="countryCode">The country code to search for. Case insensitive</param>
        /// <returns>A Country object for the code or null if it is not found</returns>
        public static Country Get(String countryCode)
        {
            return cache.Get(countryCode.ToUpper());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\IProxyKey.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    public interface IProxyKey<T>
    {
        /// <summary>
        /// The Key for the instance
        /// </summary>
        T Id
        {
            get;
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\DRMLicenseIssuer.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a drmLicenseIssuer.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class DRMLicenseIssuer : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,DRMLicenseIssuer> cache = new ProxyCache<Int32,DRMLicenseIssuer>( new ProxyCache<Int32,DRMLicenseIssuer>.DataLoaderDelegate(CatalogServices.Catalog.GetDRMLicenseIssuer),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all DRMLicenseIssuers known to the system
        /// </summary>
        public static List<DRMLicenseIssuer> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retrieves the DRMLicenseIssuer information for a drmLicenseIssuer id
        /// <summary>
        /// <param name="drmLicenseIssuerId">The id of the drmLicenseIssuer to retrieve</param>
        /// <returns>The DRMLicenseIssuer object matching the id if one exists, otherwise null</returns>
        public static DRMLicenseIssuer Get(Int32 drmLicenseIssuerId)
        {
            return cache.Get(drmLicenseIssuerId);
        }

        public static void Refresh()
        {
            cache.Refresh();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ImageSize.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an image size.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class ImageSize : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,ImageSize> cache = new ProxyCache<Int32,ImageSize>( new ProxyCache<Int32,ImageSize>.DataLoaderDelegate(CatalogServices.Catalog.GetImageSize),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all ImageSizes known to the system
        /// </summary>
        public static List<ImageSize> Get()
        {
            List<ImageSize> list = new List<ImageSize>();
            foreach( ImageSize item in CatalogServices.Catalog.GetImageSize())
            {
                list.Add( item );
            }
            return list;
        }
        
        /// <summary>
        /// Retrieves the ImageSize information for an image size
        /// <summary>
        /// <param name="imageSizeId">The id of the image size to retrieve</param>
        /// <returns>The ImageSize object matching the id if one exists, otherwise null</returns>
        public static ImageSize Get(Int32 imageSizeId)
        {
            return cache.Get(imageSizeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\DeliveryType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    public partial class DeliveryType
    {
        public static List<DeliveryType> Get()
        {
            List<DeliveryType> list = new List<DeliveryType>();
            foreach( DeliveryType item in CatalogServices.Catalog.GetDeliveryType())
            {
                list.Add( item );
            }
            return list;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ImageFormat.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an image format.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class ImageFormat : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,ImageFormat> cache = new ProxyCache<Int32,ImageFormat>( new ProxyCache<Int32,ImageFormat>.DataLoaderDelegate(CatalogServices.Catalog.GetImageFormat),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all ImageFormats known to the system
        /// </summary>
        public static List<ImageFormat> Get()
        {
            List<ImageFormat> list = new List<ImageFormat>();
            foreach( ImageFormat item in CatalogServices.Catalog.GetImageFormat())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the ImageFormat information for an image format id
        /// <summary>
        /// <param name="imageFormatId">The id of the image format to retrieve</param>
        /// <returns>The ImageFormat object matching the id if one exists, otherwise null</returns>
        public static ImageFormat Get(Int32 imageFormatId)
        {
            return cache.Get(imageFormatId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Media.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Extension to the generated Media class.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Media
    {
        /// <summary>
        /// Adds an array of relationships to the existing array of relationships
        /// NOTE: NOT MULTI-THREAD SAFE!!!!!
        /// </summary>
        public MediaRelationship[] AddRelationships( MediaRelationship[] relationships )
        {
            if ( relationships == null )
            {
                throw new ArgumentNullException( "Cannot add a null array to relationships" );
            }

            if ( relationships.Length == 0 )
            {
                return Relationships;
            }
            
            MediaRelationship[] existingRelationships = Relationships;
            MediaRelationship[] extendedRelationships = new MediaRelationship[existingRelationships.Length + relationships.Length];
            Array.Copy( existingRelationships, extendedRelationships, existingRelationships.Length );
            Array.Copy( relationships, 0, extendedRelationships, existingRelationships.Length, relationships.Length );
            Relationships = extendedRelationships;
            return Relationships;
        }

        /// <summary>
        /// Adds a relationships to the existing array of relationships
        /// NOTE: NOT MULTI-THREAD SAFE!!!!!
        /// </summary>
        public MediaRelationship[] AddRelationship( MediaRelationship relationship )
        {
            MediaRelationship[] newRelationship = new MediaRelationship[1];
            newRelationship[0] = relationship;
            return AddRelationships(newRelationship);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\MediaLocale.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an media types.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class MediaLocale
    {
        /// <summary>
        /// Returns the corresponding locale code for the media locales LCID.
        /// </summary>
        public String LocaleCode
        {
            get { return Locale.Get(Lcid).LocaleCode; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Locale.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
        
    /// <summary>
    /// Holds information about a locale.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Locale : IProxyKey<Int32>
    {
        private class LocaleContainer
        {
            private static LocaleContainer localeContainer;
            private static Object loadLockObject = new Object();

            
            private Dictionary<Int32,Locale> lcidIndexedLocales;
            private Dictionary<String,Locale> nameIndexedLocales;
            private List<Locale> locales;

            internal static LocaleContainer GetLocaleContainer()
            {
                if ( localeContainer == null )
                {
                    lock( loadLockObject )
                    {
                        if ( localeContainer == null )
                        {
                            // Create a new locale container
                            LocaleContainer newLocaleContainer = new LocaleContainer();

                            // Get the locales from the db
                            Locale[] l = CatalogServices.Catalog.GetLocale();

                            // setup the data in the new locale container
                            foreach( Locale locale in l )
                            {
                                if (false == newLocaleContainer.locales.Contains(locale))
                                    newLocaleContainer.locales.Add( locale );
                                if (false == newLocaleContainer.nameIndexedLocales.ContainsKey(locale.LocaleCode.ToLower()))
                                    newLocaleContainer.nameIndexedLocales.Add( locale.LocaleCode.ToLower(), locale );
                                if (false == newLocaleContainer.lcidIndexedLocales.ContainsKey(locale.Id))
                                    newLocaleContainer.lcidIndexedLocales.Add( locale.Id, locale );
                            }

                            // set the locale container to this
                            localeContainer = newLocaleContainer;

                            // Set the cached data to expire
                            Timer timer = new Timer( delegate( Object state ) { lock( loadLockObject ){ localeContainer = null; }},  // callback - anonymous
                                                        null,
                                                        Settings.GetCacheExpirationPeriod(),
                                                        new TimeSpan( 0, 0, 0 ) );

                            
                        }
                    }
                }

                return localeContainer;
            }

            public LocaleContainer()
            {
                lcidIndexedLocales = new Dictionary<Int32,Locale>();
                nameIndexedLocales = new Dictionary<String,Locale>();
                locales = new List<Locale>();
            }

            public Dictionary<Int32,Locale> LcidIndexedLocales
            {
                get { return lcidIndexedLocales; }
            }

            public Dictionary<String,Locale> NameIndexedLocales
            {
                get { return nameIndexedLocales; }
            }

            public List<Locale> Locales
            {
                get { return locales; }
            }
            
        }
        
        /// <summary>
        /// Implements the IProxyKey.Id - required for the ProxyCache
        /// </summary>
        public Int32 Id
        {
            get { return LCID; }
        }

        /// <summary>
        /// Retirieves the list of all Locales known to the system
        /// </summary>
        public static List<Locale> Get()
        {
            return LocaleContainer.GetLocaleContainer().Locales;
        }

        /// <summary>
        /// Retrieves the Locale information for an lcid
        /// <summary>
        /// <param name="lcid">The id of the locale to retrieve</param>
        /// <returns>The Locale object matching the id if one exists, otherwise null</returns>
        public static Locale Get(Int32 lcid)
        {
            Locale locale;
            LocaleContainer.GetLocaleContainer().LcidIndexedLocales.TryGetValue(lcid, out locale);
            return locale;
        }
        
        /// <summary>
        /// Retrieves the Locale information for a language code
        /// <summary>
        /// <param name="languageCode">The language code of the locale to retrieve</param>
        /// <returns>The Locale object matching the language code if one exists, otherwise null</returns>
        public static Locale Get(String languageCode)
        {
            Locale locale;
            LocaleContainer.GetLocaleContainer().NameIndexedLocales.TryGetValue(languageCode.ToLower(), out locale);
            return locale;
        }

        
        /// <summary>
        /// Method for comparing two locales - used when sorting lists of locales
        /// </summary>
        public static int CompareLocalesByName(Locale x, Locale y)
        {
            if (x == null)
            {
                if (y == null)
                {
                    // If x is null and y is null, they're equal. 
                    return 0;
                }
                else
                {
                    // If x is null and y is not null, y is greater. 
                    return -1;
                }
            }
            else
            {
                // If x is not null...
                //
                if (y == null)
                {
                    // ...and y is null, x is greater.
                    return 1;
                }
                else
                {
                    // ...and y is not null, compare the two locale name strings.
                    return String.Compare( x.InternalName, y.InternalName, StringComparison.OrdinalIgnoreCase );
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\MediaRelationshipType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a media relationship type.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class MediaRelationshipType : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,MediaRelationshipType> cache = new ProxyCache<Int32,MediaRelationshipType>( new ProxyCache<Int32,MediaRelationshipType>.DataLoaderDelegate(CatalogServices.Catalog.GetMediaRelationshipType),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all MediaRelationshipTypes known to the system
        /// </summary>
        public static List<MediaRelationshipType> Get()
        {
            List<MediaRelationshipType> list = new List<MediaRelationshipType>();
            foreach( MediaRelationshipType item in CatalogServices.Catalog.GetMediaRelationshipType())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the MediaRelationshipType information for a media relationship type id.
        /// <summary>
        /// <param name="mediaRelationshipTypeId">The id of the media relationship type to retrieve</param>
        /// <returns>The MediaRelationshipType object matching the id if one exists, otherwise null</returns>
        public static MediaRelationshipType Get(Int32 mediaRelationshipTypeId)
        {
            return cache.Get(mediaRelationshipTypeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\MetadataProvider.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a metadataProvider.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class MetadataProvider : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,MetadataProvider> cache = new ProxyCache<Int32,MetadataProvider>( new ProxyCache<Int32,MetadataProvider>.DataLoaderDelegate(CatalogServices.Catalog.GetMetadataProvider),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all MetadataProviders known to the system
        /// </summary>
        public static List<MetadataProvider> Get()
        {
            return cache.Get();
        }

        /// <summary>
        /// Retrieves the MetadataProvider information for a metadataProvider id
        /// <summary>
        /// <param name="metadataProviderId">The id of the metadataProvider to retrieve</param>
        /// <returns>The MetadataProvider object matching the id if one exists, otherwise null</returns>
        public static MetadataProvider Get(Int32 metadataProviderId)
        {
            return cache.Get(metadataProviderId);
        }

        public static void Refresh()
        {
            cache.Refresh();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\MediaRatingDescriptor.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// A MediaRatingDescriptor needs to default the 'level value to 1. So we need an
    /// explicit default constructor that does this.
    /// </summary>
    public partial class MediaRatingDescriptor
    {
        /// <summary>
        /// A MediaRatingDescriptor needs to default the 'level value to 1. So we need an
        /// explicit default constructor that does this.
        /// </summary>
        public MediaRatingDescriptor()
        {
            levelField = 1.0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\MediaType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an media types.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class MediaType : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,MediaType> cache = new ProxyCache<Int32,MediaType>( new ProxyCache<Int32,MediaType>.DataLoaderDelegate(CatalogServices.Catalog.GetMediaType),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all MediaTypes known to the system
        /// </summary>
        public static List<MediaType> Get()
        {
            List<MediaType> list = new List<MediaType>();
            foreach( MediaType item in CatalogServices.Catalog.GetMediaType())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the MediaType information for media type id.
        /// <summary>
        /// <param name="mediaTypeId">The id of the media type to retrieve</param>
        /// <returns>The MediaType object matching the id if one exists, otherwise null</returns>
        public static MediaType Get(Int32 mediaTypeId)
        {
            return cache.Get(mediaTypeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\PodcastEpisode.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Net;
    using System.Text;
    using System.Threading;
    using System.Web;
    using System.Xml;
    using System.Xml.XPath;

    /// <summary>
    /// </summary>
    public partial class PodcastEpisode
    {
        /// <summary>
        /// Default constructor for soap
        /// </summary>
        public PodcastEpisode()
        {
        }
        
        /// <summary>
        /// Constructs an episode from an 'Item' element in an rss feed
        /// </summary>
        internal PodcastEpisode( XPathNavigator itemNavigator )
        {
            XPathNodeIterator iterator;

            iterator = itemNavigator.Select("title");
            if (iterator.MoveNext())
            {
                this.Title = iterator.Current.Value;
            }

            iterator = itemNavigator.Select("pubDate");
            if (iterator.MoveNext())
            {
                String pudDateString = iterator.Current.Value;
                try
                {
                    this.PublishedDate = DateTime.Parse(pudDateString);
                }
                catch (Exception)
                {
                }
            }

            iterator = itemNavigator.Select("enclosure");
            if (iterator.MoveNext())
            {
                this.EnclosureUrl = iterator.Current.GetAttribute("url", String.Empty);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\PodcastSearchResponse.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

        
    /// <summary>
    /// </summary>
    public partial class PodcastSearchResponse
    {
        private static readonly DateTime WithdrawnPodcastDate = new DateTime( 2999, 1, 1 );
        
        /// <summary>
        /// Gets the string version of the avaialability date.
        /// </summary>
        public String AvailableDateString
        {
            get
            {
                if ( AvailableDate >= WithdrawnPodcastDate )
                {
                    return "Withdrawn";
                }
                else
                {
                    return String.Format( "{0}", AvailableDate.ToString( "dd MMM yyyy" ) );
                }
            }

        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\PreviewMediaInstanceType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a preview media instance type.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class PreviewMediaInstanceType: IProxyKey<Int32>
    {
        private static ProxyCache<Int32,PreviewMediaInstanceType> cache = new ProxyCache<Int32,PreviewMediaInstanceType>( new ProxyCache<Int32,PreviewMediaInstanceType>.DataLoaderDelegate(CatalogServices.Catalog.GetPreviewMediaInstanceType),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all PreviewMediaInstanceTypes known to the system
        /// </summary>
        public static List<PreviewMediaInstanceType> Get()
        {
            List<PreviewMediaInstanceType> list = new List<PreviewMediaInstanceType>();
            foreach( PreviewMediaInstanceType item in CatalogServices.Catalog.GetPreviewMediaInstanceType())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the PreviewMediaInstanceType information for a preview media instance type id.
        /// <summary>
        /// <param name="previewMediaInstanceTypeId">The id of the preview media instance type to retrieve</param>
        /// <returns>The PreviewMediaInstanceType object matching the id if one exists, otherwise null</returns>
        public static PreviewMediaInstanceType Get(Int32 previewMediaInstanceTypeId)
        {
            return cache.Get(previewMediaInstanceTypeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Podcast.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Net;
    using System.Text;
    using System.Threading;
    using System.Web;
    using System.Xml;
    using System.Xml.XPath;


        
    /// <summary>
    /// </summary>
    public partial class Podcast
    {
        /// <summary>
        /// The status that we set podcasts to by default.
        /// </summary>
        public static readonly Int32 DefaultPodcastVisibilityStatus = 3;  // Live
        
        private static String ITunesNamespaceUppercase = "http://www.itunes.com/DTDs/Podcast-1.0.dtd";
        private static String ITunesNamespaceLowercase = "http://www.itunes.com/dtds/podcast-1.0.dtd";

        private static String ITunesAuthorXPath = "//channel/itunesUpper:author"
                                                    + " | //channel/itunesLower:author";

        private static String ITunesKeywordsXPath = "//channel/itunesUpper:keywords"
                                                    + " | //channel/itunesLower:keywords";

        private static String ITunesExplicitXPath = "//channel/itunesUpper:explicit"
                                                    + " | //channel/itunesLower:explicit";

        private static String ITunesItemExplicitXPath = "//channel/item/itunesUpper:explicit" +
                                                       " | //channel/item/itunesLower:explicit";

        private static String ITunesImageXPath = "//channel/itunesUpper:image"
                                                    + "| //channel/itunesLower:image"
                                                    + "| //channel/itunesUpper:link[@rel='image']"
                                                    + "| //channel/itunesLower:link[@rel='image']";

        private static String ITunesOwnerEmailXPath = "//channel/itunesUpper:owner/itunesUpper:email"
                                                    + "| //channel/itunesLower:owner/itunesLower:email";

        private static String ITunesOwnerNameXPath = "//channel/itunesUpper:owner/itunesUpper:name"
                                                    + "| //channel/itunesLower:owner/itunesLower:name";

        private static String ITunesBlockXPath = "//channel/itunesUpper:block"
                                                    + "| //channel/itunesLower:block";

        private static String ITunesCategoryXPath = "//channel/itunesUpper:category"
                                                    + "| //channel/itunesLower:category";

        private static String ITunesSubcategoryXSubPath = "itunesUpper:category"
                                                    + "| itunesLower:category";

        private static readonly Dictionary<String,Int32> TrueStrings = new Dictionary<String,Int32>();

        private String xml;

        static Podcast()
        {
            TrueStrings.Add( "yes", 1 );
            TrueStrings.Add( "true", 1 );
            TrueStrings.Add( "1", 1 );
        }

        /// <summary>
        /// Gets or sets the xml.
        /// </summary>
        public String Xml
        {
            get
            {
                return xml;
            }
            set
            {
                xml = value;
            }
        }
        
        /// <summary>
        /// Parameterless constructor
        /// </summary>
        public Podcast()
        {
            this.VisibilityStatusId = DefaultPodcastVisibilityStatus;
        }

    	public Podcast(Uri podcastUri, XPathDocument document)
    	{
            XPathNavigator navigator = document.CreateNavigator();

            // Get the xml
            StringWriter sw = new StringWriter();
            XmlTextWriter tw = new XmlTextWriter(sw);
            tw.Formatting = Formatting.Indented;
            navigator.WriteSubtree(tw);
            tw.Flush();
            tw.Close();
            this.Xml = sw.ToString();

            // Create a MediaLocale record to hold title etc.
            MediaLocale mediaLocale = new MediaLocale();
            this.Locales = new MediaLocale[] { mediaLocale };

            XPathNodeIterator iterator;

            // Title
            iterator = navigator.Select("//channel/title");
            if (iterator.MoveNext())
            {
                mediaLocale.Title = iterator.Current.Value;
                mediaLocale.ReducedTitle = mediaLocale.Title;
                mediaLocale.TitleSort = mediaLocale.Title;
            }

            // Description
            iterator = navigator.Select("//channel/description");
            if (iterator.MoveNext())
            {
                mediaLocale.Description = iterator.Current.Value;
                mediaLocale.ReducedDescription = mediaLocale.Description;
            }

            // Language
            iterator = navigator.Select("//channel/language");
            if (iterator.MoveNext())
            {
                String language = iterator.Current.Value;
                Locale locale = Locale.Get( language );
                if ( locale == null )
                {
                    locale = Locale.Get( "en-us" );
                }
                mediaLocale.Lcid = locale.LCID;
            }
            if ( mediaLocale.Lcid == 0 )
            {
                mediaLocale.Lcid = 1033;
            }

            // RssUrl
            this.RssUrl = podcastUri.ToString();

            // Website
            iterator = navigator.Select("//channel/link");
            if (iterator.MoveNext())
            {
                this.WebsiteUrl = iterator.Current.Value;
            }

            // Copyright
            iterator = navigator.Select("//channel/copyright");
            if (iterator.MoveNext())
            {
                mediaLocale.Copyright = iterator.Current.Value;
            }

            // Published date
            iterator = navigator.Select("//channel/pubDate");
            if (iterator.MoveNext())
            {
                String pudDateString = iterator.Current.Value;
                try
                {
                    this.OriginalReleaseDate = DateTime.Parse(pudDateString);
                }
                catch (Exception)
                {
                }
            }

            XmlNamespaceManager namespaceManager = new XmlNamespaceManager(navigator.NameTable);
            namespaceManager.AddNamespace("itunesUpper", ITunesNamespaceUppercase );
            namespaceManager.AddNamespace("itunesLower", ITunesNamespaceLowercase);

            // itunes author
            iterator = navigator.Select(ITunesAuthorXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.CreatorName = iterator.Current.Value;
            }

            // itunes keywords
            iterator = navigator.Select(ITunesKeywordsXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.ITunesKeywords = iterator.Current.Value;
            }

            // itunes explicit
            iterator = navigator.Select(ITunesExplicitXPath, namespaceManager);
            this.IsExplicit = false;
            if (iterator.MoveNext())
            {
                String v = iterator.Current.Value.ToLower();
                if ( TrueStrings.ContainsKey(v))
                {
                    this.IsExplicit = true;
                }
            }
            if ( this.IsExplicit == false )
            {
                iterator = navigator.Select(ITunesItemExplicitXPath, namespaceManager);
                while ((iterator.MoveNext()) && ( this.IsExplicit == false ))
                {
                    String v = iterator.Current.Value.ToLower();
                    if ( TrueStrings.ContainsKey(v))
                    {
                        this.IsExplicit = true;
                    }
                }
            }
            

            iterator = navigator.Select( "//channel/image/url" );
            if ( iterator.MoveNext())
            {
                this.ImageUrl = iterator.Current.Value.Trim();
            }
            else
            {
                // itunes image - only if regular image is still null          
                iterator = navigator.Select(ITunesImageXPath, namespaceManager);
                if (iterator.MoveNext())
                {
                    this.ImageUrl = iterator.Current.GetAttribute("href", String.Empty).Trim();
                }
            }

            // itunes owner email
            iterator = navigator.Select(ITunesOwnerEmailXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.OwnerEmail = iterator.Current.Value;
            }

            // itunes owner name
            iterator = navigator.Select(ITunesOwnerNameXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.OwnerName = iterator.Current.Value;
            }

            // itunes block
            iterator = navigator.Select(ITunesBlockXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                Boolean b = false;
                Boolean.TryParse( iterator.Current.Value, out b );
                this.ITunesBlock = b;
            }

            List<String> itunesCategories = new List<string>();
            iterator = navigator.Select(ITunesCategoryXPath, namespaceManager);
            while (iterator.MoveNext())
            {
                // look for sub categories
                XPathNodeIterator subCategoryIterator = iterator.Current.Select(ITunesSubcategoryXSubPath, namespaceManager);
                String category = iterator.Current.GetAttribute( "text", String.Empty );
                if (subCategoryIterator.Count > 0)
                {
                    while (subCategoryIterator.MoveNext())
                    {
                        itunesCategories.Add(String.Format("{0} : {1}", category, subCategoryIterator.Current.GetAttribute("text", String.Empty)));
                    }
                }
                else
                {
                    itunesCategories.Add(category);
                }
            }
            this.ITunesCategories = itunesCategories.ToArray();

            // Get the episodes
            List<PodcastEpisode> items = new List<PodcastEpisode>();
            iterator = navigator.Select( "//channel/item" );
            while( iterator.MoveNext())
            {
                XPathNavigator itemNavigator = iterator.Current;
                items.Add( new PodcastEpisode( itemNavigator ));
            }
            this.Episodes = items.ToArray();

            // Content type
            iterator = navigator.Select("//channel/item/enclosure");
            Int32 audioCount = 0;
            Int32 videoCount = 0;
            while (iterator.MoveNext())
            {
                String contentTypeString = iterator.Current.GetAttribute( "type", String.Empty );
                if ( contentTypeString == null )
                {
                    continue;
                }
                if ( contentTypeString.StartsWith( "audio" ))
                {
                    audioCount++;
                }
                else if ( contentTypeString.StartsWith( "video" ))
                {
                    videoCount++;
                }
            }
            this.ContentType = ( audioCount > videoCount ) ? PodcastContentType.Audio : PodcastContentType.Video;

            // Visibility status - be default it is live
            this.VisibilityStatusId = DefaultPodcastVisibilityStatus;
        }
    }

    public class PodcastRssXmlException : Exception
    {
        public PodcastRssXmlException(String message, Exception innerException)
            :base( message, innerException)
        {
        }
    }

    public class InvalidPodcastUriException : PodcastRssXmlException
    {
        private String address;

        public String Address
        {
            get { return address; }
        }

        public InvalidPodcastUriException(String address, Exception innerException)
            :base( String.Format( "The supplied podcast address [{0}] was invalid", address ), innerException )
        {
            this.address = address;
        }
    }

    public class PodcastRetrievalException : PodcastRssXmlException
    {
        public PodcastRetrievalException( String address, Exception innerException )
            :base( String.Format( "Error retrieveing podcast [{0}]", address ), innerException )
        {
        }

        public override string ToString()
        {
            StringBuilder text = new StringBuilder();
            if (InnerException.GetType() == typeof(WebException))
            {
                WebException webException = InnerException as WebException;
                if (webException.Status == WebExceptionStatus.ProtocolError)
                {
                    text.Append(String.Format("Protocol Error: Status code = {0}. Description: {1}\n",
                        ((HttpWebResponse)webException.Response).StatusCode,
                        ((HttpWebResponse)webException.Response).StatusDescription));
                }
                else
                {
                    text.Append("Unknown web exception.");
                }
            }
            else
            {
                text.Append("Unknown exception.\n");
            }
            text.Append(base.ToString());
            return text.ToString();
        }
    }

    public class PodcastInvalidXmlException : PodcastRssXmlException
    {
        public PodcastInvalidXmlException(String address, XmlException exception)
            :base( String.Format( "Invalid xml encountered at [{0}]", address ), exception )
        {
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Request.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    public partial class Request
    {
        public Request()
        {
            maxResultsField = 500;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\ProxyCache.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
        
    public class ProxyCache<T,U> where U : IProxyKey<T>
    {
        private Data data = null;
        private Object lockObject = new Object();
        private TimeSpan refreshPeriod;

        private static readonly TimeSpan SmallestRefreshPeriod = new TimeSpan( 0, 0, 1 );
        private static readonly TimeSpan ZeroLengthPeriod = new TimeSpan( 0, 0, 0 );

        public delegate U[] DataLoaderDelegate();

        private DataLoaderDelegate loader;

        public ProxyCache( DataLoaderDelegate loader, TimeSpan refreshPeriod )
        {
            this.loader = loader;
            this.refreshPeriod = refreshPeriod;
        }
        
        public List<U> Get()
        {
            return GetData().DataList;
        }

        public U Get( T key )
        {
            U u = default(U);
            GetData().DataDictionary.TryGetValue( key, out u );
            return u;
        }
        /// <summary>
        /// Refreshes the Cache
        /// </summary>
        public void Refresh()
        {
            data = null;
        }
        private Data GetData()
        {
            // First off, get our own reference to the data. If we were to simply test and then
            // return the 'data' variable, we could get into the condition where the timer resets
            // 'data' to null between our test and us returning it. By getting our own copy of the
            // reference, we are not affected from this point by what the timer thread does.
            Data currentData = data;
            if ( currentData == null )
            {
                lock( lockObject )
                {
                    // If data is not null, then some other thread beat us to going to the db - just
                    // fall through to where we set the return value. Otherwise, it is up to us to 
                    // go to the web service and get the data.
                    if ( data == null )
                    {
                        // Before creating a new 'data' object, we execute the loader. If this fails
                        // and throws an exception, then we still have 'data' as null, so the next 
                        // thread will get a chance to get the data.
                        U[] results = loader();
                        
                        Data newData = new Data();
                        foreach( U item in results )
                        {
                            newData.DataDictionary.Add( item.Id, item );
                            newData.DataList.Add( item );
                        }

                        // We successfully got the new data from the web service. Set the 'data' object.
                        data = newData;

                        // setup the timer to destroy object
                        Timer timer = new Timer( delegate( Object state ) { lock( lockObject ){ data = null; }},  // callback - anonymous
                                                        null,
                                                        refreshPeriod,
                                                        ZeroLengthPeriod );

                    }

                    // Set the return object
                    currentData = data;
                }
            }

            return currentData;
        }

        private class Data
        {
            private Dictionary<T,U> dictionary;
            private List<U> list;

            public Dictionary<T,U> DataDictionary
            {
                get { return dictionary; }
            }

            public List<U> DataList
            {
                get { return list; }
            }

            public Data()
            {
                dictionary = new Dictionary<T,U>();
                list = new List<U>();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\PricingRule.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Utils = Microsoft.Ems.Common.Utils;
        
    /// <summary>
    /// Holds information about an pricing rule.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class PricingRule : Utils.IDualKeyIdentifiable<Int32, Int32>
    {
        private static readonly Utils.DualKeyCache<PricingRule, Int32, Int32> cache = new Utils.DualKeyCache<PricingRule, Int32, Int32>(
        new Utils.DualKeyCache<PricingRule, Int32, Int32>.CacheDataRetrievalDelegate(CatalogServices.Catalog.GetPricingRule),
        Settings.GetCacheExpirationPeriod());

        /// <summary>
        /// Retirieves the list of all PricingRules known to the system
        /// </summary>
        public static List<PricingRule> Get()
        {
            List<PricingRule> list = new List<PricingRule>();
            foreach( PricingRule item in CatalogServices.Catalog.GetPricingRule())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the PricingRule information for pricing rule id.
        /// <summary>
        /// <param name="pricingRuleId">The id of the pricing rule to retrieve</param>
        /// <returns>The PricingRule object matching the id if one exists, otherwise null</returns>
        public static PricingRule Get(Int32 pricingRuleId)
        {
            return cache.Get(pricingRuleId);
        }
        /// <summary>
        /// Retrieves the PricingRule by ProviderId
        /// </summary>
        /// <param name="providerRuleId"></param>
        /// <returns></returns>
        public static List<PricingRule> GetbyProvider(Int32 providerRuleId)
        {
            return cache.GetBySecondaryKey(providerRuleId);
        }
        /// <summary>
        /// Gets the providerId to which this pricing rule applies(This is also the Second key of the Cache)
        /// </summary>
        public Int32 SecondaryId
        {
            get
            {
                return this.ProviderId;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Role.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a role.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Role : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,Role> cache = new ProxyCache<Int32,Role>( new ProxyCache<Int32,Role>.DataLoaderDelegate(CatalogServices.Catalog.GetRole),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all Roles known to the system
        /// </summary>
        public static List<Role> Get()
        {
            List<Role> list = new List<Role>();
            foreach( Role item in CatalogServices.Catalog.GetRole())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the Role information for a role id.
        /// <summary>
        /// <param name="roleId">The id of the role to retrieve</param>
        /// <returns>The Role object matching the id if one exists, otherwise null</returns>
        public static Role Get(Int32 roleId)
        {
            return cache.Get(roleId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Settings.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Configuration;

    /// <summary>
    /// Containd the default settings for the application
    /// </summary>
    public class Settings
    {
        private static NameValueCollection settings;

        /// <summary>
        /// If no cache expiration period can be locaed or parsed, the defult of 1 hour is used.
        /// </summary>
        public static readonly TimeSpan DefaultCacheExpirationPeriod = new TimeSpan( 1, 0, 0 );

        static Settings()
        {
            try
            {
                settings = ConfigurationManager.AppSettings;
            }
            catch( Exception )
            {
            }
        }

        /// <summary>
        /// Returns the cache expiration period. If a configured value could not be localted
        /// the default value is used.
        /// </summary>
        public static TimeSpan GetCacheExpirationPeriod()
        {
            if ( settings != null )
            {
                try
                {
                    if (settings["CacheExpirationPeriod"] != null)
                        return TimeSpan.Parse( settings["CacheExpirationPeriod"] );
                }
                catch( Exception )
                {
                }
            }

            return DefaultCacheExpirationPeriod;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Store.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a store.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Store : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,Store> cache = new ProxyCache<Int32,Store>( new ProxyCache<Int32,Store>.DataLoaderDelegate(CatalogServices.Catalog.GetStore),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all Stores known to the system
        /// </summary>
        public static List<Store> Get()
        {
            List<Store> list = new List<Store>();
            foreach( Store item in CatalogServices.Catalog.GetStore())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the Store information for a store id.
        /// <summary>
        /// <param name="storeId">The id of the store to retrieve</param>
        /// <returns>The Store object matching the id if one exists, otherwise null</returns>
        public static Store Get(Int32 storeId)
        {
            return cache.Get(storeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\Provider.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a provider.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class Provider : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,Provider> cache = new ProxyCache<Int32,Provider>( new ProxyCache<Int32,Provider>.DataLoaderDelegate(CatalogServices.Catalog.GetProvider),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all Providers known to the system
        /// </summary>
        public static List<Provider> Get()
        {
            List<Provider> list = new List<Provider>();
            foreach( Provider item in CatalogServices.Catalog.GetProvider())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the Provider information for a provider id
        /// <summary>
        /// <param name="providerId">The id of the provider to retrieve</param>
        /// <returns>The Provider object matching the id if one exists, otherwise null</returns>
        public static Provider Get(Int32 providerId)
        {
            return cache.Get(providerId);
        }

        public static void Refresh()
        {
            cache.Refresh();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\RatingSystem.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a rating system.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class RatingSystem : IProxyKey<Int32>
    {
        /// <summary>
        /// Holds a RatingValue object and its parent RatingSystem object
        /// </summary>
        public class RatingValueHierarchy
        {
            private RatingSystem ratingSystem;
            private RatingValue ratingValue;

            public RatingSystem RatingSystem
            {
                get { return ratingSystem; }
                internal set { ratingSystem = value; }
            }

            public RatingValue RatingValue
            {
                get { return ratingValue; }
                internal set { ratingValue = value; }
            }
        }

        /// <summary>
        /// Holds a RatingDescriptor object and its parent RatingSystem object
        /// </summary>
        public class RatingDescriptorHierarchy
        {
            private RatingSystem ratingSystem;
            private RatingDescriptor ratingDescriptor;

            public RatingSystem RatingSystem
            {
                get { return ratingSystem; }
                internal set { ratingSystem = value; }
            }

            public RatingDescriptor RatingDescriptor
            {
                get { return ratingDescriptor; }
                internal set { ratingDescriptor = value; }
            }
        }       
        
        /// <summary>
        /// Internal class for handling the caching of the rating system objects and children
        /// </summary>
        private class CachedRatingSystem
        {
            private Dictionary<Int32,RatingSystem> indexedRatingSystems;
            private List<RatingSystem> allRatingSystems;
            private Dictionary<Int32,RatingValue> indexedRatingValues;
            private Dictionary<Int32,RatingDescriptor> indexedRatingDescriptors;

            private static CachedRatingSystem cachedRatingSystem;
            private static Object retrievalLockObject = new Object();

            public static CachedRatingSystem GetCachedRatingSystem()
            {
                if ( cachedRatingSystem == null )
                {
                    lock( retrievalLockObject )
                    {
                        if ( cachedRatingSystem == null )
                        {
                            // Go to the web-service/db and get an array
                            RatingSystem[] ratingSystems = CatalogServices.Catalog.GetRatingSystem();

                            // Create a new CachedRatingSystems object to hold the results
                            CachedRatingSystem newCachedRatingSystems = new CachedRatingSystem();
                            foreach( RatingSystem ratingSystem in ratingSystems )
                            {
                                // Add to the list of all category systems
                                newCachedRatingSystems.allRatingSystems.Add( ratingSystem );

                                // Add to the indexed view of category systems
                                newCachedRatingSystems.indexedRatingSystems.Add( ratingSystem.Id, ratingSystem );

                                // Add all of this rating systems RatingValues to the indexedRatingValues list
                                foreach( RatingValue ratingValue in ratingSystem.Values )
                                {
                                    newCachedRatingSystems.indexedRatingValues.Add( ratingValue.Id, ratingValue );
                                }

                                // Add all of this rating systems RatingDescriptors to the indexedRatingDescriptors list
                                foreach( RatingDescriptor ratingDescriptor in ratingSystem.Descriptors )
                                {
                                    newCachedRatingSystems.indexedRatingDescriptors.Add( ratingDescriptor.Id, ratingDescriptor );
                                }                                
                            }

                            // swap in the new cached object
                            cachedRatingSystem = newCachedRatingSystems;
                        }
                    }
                }

                return cachedRatingSystem;
            }

            private CachedRatingSystem()
            {
                indexedRatingSystems = new Dictionary<Int32,RatingSystem>();
                allRatingSystems = new List<RatingSystem>();
                indexedRatingValues = new Dictionary<Int32,RatingValue>();
                indexedRatingDescriptors = new Dictionary<Int32,RatingDescriptor>();
            }

            internal Dictionary<Int32,RatingSystem> IndexedRatingSystems
            {
                get { return indexedRatingSystems; }
            }

            internal List<RatingSystem> AllRatingSystems
            {
                get { return allRatingSystems; }
            }

            internal Dictionary<Int32,RatingValue> IndexedRatingValues
            {
                get { return indexedRatingValues; }
            }

            internal Dictionary<Int32,RatingDescriptor> IndexedRatingDescriptors
            {
                get { return indexedRatingDescriptors; }
            }
        }

        
        /// <summary>
        /// Retirieves the list of all RatingSystems known to the system
        /// </summary>
        public static List<RatingSystem> Get()
        {
            return CachedRatingSystem.GetCachedRatingSystem().AllRatingSystems;
        }

        /// <summary>
        /// Retrieves the RatingSystem information for a rating system id
        /// <summary>
        /// <param name="ratingSystemId">The id of the rating system to retrieve</param>
        /// <returns>The RatingSystem object matching the id if one exists, otherwise null</returns>
        public static RatingSystem Get(Int32 ratingSystemId)
        {
            RatingSystem ratingSystem = null;
            CachedRatingSystem.GetCachedRatingSystem().IndexedRatingSystems.TryGetValue(ratingSystemId, out ratingSystem);
            return ratingSystem;
        }

        /// <summary>
        /// Retrieves the RatingSystem and RatingValue for a given rating value id
        /// <summary>
        /// <param name="ratingValueId">The id of the rating value to retrieve</param>
        /// <returns>An instance of a RatingValueHierarchy object containing the RatingSystem and RatingValue if the id is valid, null otherwise</returns>
        public static RatingValueHierarchy GetRatingValueHierarchy(Int32 ratingValueId)
        {
            RatingValue ratingValue = null;
            CachedRatingSystem.GetCachedRatingSystem().IndexedRatingValues.TryGetValue(ratingValueId, out ratingValue);
            if ( ratingValue == null )
            {
                return null;
            }
            
            RatingValueHierarchy ratingValueHierarchy = new RatingValueHierarchy();
            ratingValueHierarchy.RatingValue = ratingValue;
            ratingValueHierarchy.RatingSystem = Get( ratingValue.RatingSystemId );
            return ratingValueHierarchy;
        }

         /// <summary>
        /// Retrieves the RatingSystem and RatingDescriptor for a given rating value id
        /// <summary>
        /// <param name="ratingDescriptorId">The id of the rating descriptor to retrieve</param>
        /// <returns>An instance of a RatingDescriptorHierarchy object containing the RatingSystem and RatingDescriptor if the id is valid, null otherwise</returns>
        public static RatingDescriptorHierarchy GetRatingDescriptorHierarchy(Int32 ratingDescriptorId)
        {
            RatingDescriptor ratingDescriptor = null;
            CachedRatingSystem.GetCachedRatingSystem().IndexedRatingDescriptors.TryGetValue(ratingDescriptorId, out ratingDescriptor);
            if ( ratingDescriptor == null )
            {
                return null;
            }
            
            RatingDescriptorHierarchy ratingDescriptorHierarchy = new RatingDescriptorHierarchy();
            ratingDescriptorHierarchy.RatingDescriptor = ratingDescriptor;
            ratingDescriptorHierarchy.RatingSystem = Get( ratingDescriptor.RatingSystemId );
            return ratingDescriptorHierarchy;
        }
       
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\TaskStatus.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a taskStatus.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class TaskStatus : IProxyKey<Int32>
    {
        private static ProxyCache<Int32, TaskStatus> cache = new ProxyCache<Int32, TaskStatus>(new ProxyCache<Int32, TaskStatus>.DataLoaderDelegate(CatalogServices.Catalog.GetTaskStatus),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all Taskstatus known to the system
        /// </summary>
        public static List<TaskStatus> Get()
        {
            List<TaskStatus> list = new List<TaskStatus>();
            foreach (TaskStatus item in CatalogServices.Catalog.GetTaskStatus())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the Taskstatus information for a provider id
        /// <summary>
        /// <param name="providerId">The id of the taskstatus to retrieve</param>
        /// <returns>The taskstatus object matching the id if one exists, otherwise null</returns>
        public static TaskStatus Get(Int32 taskStatusId)
        {
            return cache.Get(taskStatusId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\UserType.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a user type.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class UserType : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,UserType> cache = new ProxyCache<Int32,UserType>( new ProxyCache<Int32,UserType>.DataLoaderDelegate(CatalogServices.Catalog.GetUserType),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all UserTypes known to the system
        /// </summary>
        public static List<UserType> Get()
        {
            List<UserType> list = new List<UserType>();
            foreach( UserType item in CatalogServices.Catalog.GetUserType())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the UserType information for auser type
        /// <summary>
        /// <param name="userTypeId">The id of the user type to retrieve</param>
        /// <returns>The UserType object matching the id if one exists, otherwise null</returns>
        public static UserType Get(Int32 userTypeId)
        {
            return cache.Get(userTypeId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\VideoEncoding.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a video encoding.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class VideoEncoding : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,VideoEncoding> cache = new ProxyCache<Int32,VideoEncoding>( new ProxyCache<Int32,VideoEncoding>.DataLoaderDelegate(CatalogServices.Catalog.GetVideoEncoding),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all VideoEncodings known to the system
        /// </summary>
        public static List<VideoEncoding> Get()
        {
            List<VideoEncoding> list = new List<VideoEncoding>();
            foreach( VideoEncoding item in CatalogServices.Catalog.GetVideoEncoding())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the VideoEncoding information for a video encoding id.
        /// <summary>
        /// <param name="videoEncodingId">The id of the video encoding to retrieve</param>
        /// <returns>The VideoEncoding object matching the id if one exists, otherwise null</returns>
        public static VideoEncoding Get(Int32 videoEncodingId)
        {
            return cache.Get(videoEncodingId);
        }
        /// <summary>
        /// Refreshes the ClientSide Cache
        /// </summary>
        public static void RefreshCache()
        {
            cache.Refresh();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\VideoDefinition.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about an video definition.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class VideoDefinition : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,VideoDefinition> cache = new ProxyCache<Int32,VideoDefinition>( new ProxyCache<Int32,VideoDefinition>.DataLoaderDelegate(CatalogServices.Catalog.GetVideoDefinition),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all VideoDefinitions known to the system
        /// </summary>
        public static List<VideoDefinition> Get()
        {
            List<VideoDefinition> list = new List<VideoDefinition>();
            foreach( VideoDefinition item in CatalogServices.Catalog.GetVideoDefinition())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the VideoDefinition information for a video definition id.
        /// <summary>
        /// <param name="videoDefinitionId">The id of the video definition to retrieve</param>
        /// <returns>The VideoDefinition object matching the id if one exists, otherwise null</returns>
        public static VideoDefinition Get(Int32 videoDefinitionId)
        {
            return cache.Get(videoDefinitionId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\VisibilityStatus.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a visibility status.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class VisibilityStatus : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,VisibilityStatus> cache = new ProxyCache<Int32,VisibilityStatus>( new ProxyCache<Int32,VisibilityStatus>.DataLoaderDelegate(CatalogServices.Catalog.GetVisibilityStatus),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all VisibilityStatuss known to the system
        /// </summary>
        public static List<VisibilityStatus> Get()
        {
            List<VisibilityStatus> list = new List<VisibilityStatus>();
            foreach( VisibilityStatus item in CatalogServices.Catalog.GetVisibilityStatus())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the VisibilityStatus information for a visibility status.
        /// <summary>
        /// <param name="visibilityStatusId">The id of the visibility status to retrieve</param>
        /// <returns>The VisibilityStatus object matching the id if one exists, otherwise null</returns>
        public static VisibilityStatus Get(Int32 visibilityStatusId)
        {
            return cache.Get(visibilityStatusId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\msi\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\VisibilityLevel.cs ===
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
        
    /// <summary>
    /// Holds information about a visibility level.
    /// Partial. Other code is auto-generated from the WebService wsdl.
    /// </summary>
    public partial class VisibilityLevel : IProxyKey<Int32>
    {
        private static ProxyCache<Int32,VisibilityLevel> cache = new ProxyCache<Int32,VisibilityLevel>( new ProxyCache<Int32,VisibilityLevel>.DataLoaderDelegate(CatalogServices.Catalog.GetVisibilityLevel),
                                                                                            Settings.GetCacheExpirationPeriod());
        /// <summary>
        /// Retirieves the list of all VisibilityLevels known to the system
        /// </summary>
        public static List<VisibilityLevel> Get()
        {
            List<VisibilityLevel> list = new List<VisibilityLevel>();
            foreach( VisibilityLevel item in CatalogServices.Catalog.GetVisibilityLevel())
            {
                list.Add( item );
            }
            return list;
        }

        /// <summary>
        /// Retrieves the VisibilityLevel information for a visibility level.
        /// <summary>
        /// <param name="visibilityLevelId">The id of the visibility level to retrieve</param>
        /// <returns>The VisibilityLevel object matching the id if one exists, otherwise null</returns>
        public static VisibilityLevel Get(Int32 visibilityLevelId)
        {
            return cache.Get(visibilityLevelId);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\constants\GlobalConstants.cs ===
using System;

namespace Microsoft.Ems.Common.Constants
{
    /// <summary>
    /// This class contains values the are used across all EMS properties.
    ///
    /// Constants are stored as 'public static readonly' such that if they change
    /// only this file/library need be compiled, not any calling library
    /// </summary>
    public class GlobalConstants
    {
        /// <summary>
        /// Holds the default location for where the EMS Catalog web services 
        /// will be. Typically, the value for this is going to be set in an
        /// app/web.config file and read in by the application. If however the 
        /// application does not find the setting, it should use this value
        ///
        /// Value is defaulted to allow one-box/sandbox to work
        /// </summary>
        public static readonly String DefaultCatalogWebServiceLocation = "http://localhost/EmsMetaDataTools";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\EventSetup\EMSEventLogInstaller.cs ===
using System;
using System.Configuration.Install;
using System.Diagnostics;
using System.ComponentModel;

namespace Microsoft.Ems.Apps.Tools.EventSetup
{
    [RunInstaller(true)]
    public class EMSEventLogInstaller: Installer
    {
        private static String EventSourceName = "EMS Editorial";
        private static String EventLogName = "EMS";
        
        private EventLogInstaller editorialEventLogInstaller;

        public EMSEventLogInstaller() 
        {
            if ( !EventLog.SourceExists( EventSourceName ))
            {
                // Create an instance of an EventLogInstaller.
                editorialEventLogInstaller = new EventLogInstaller();

                // Set the source name of the event log.
                editorialEventLogInstaller.Source = EventSourceName;

                // Set the event log that the source writes entries to.
                editorialEventLogInstaller.Log = EventLogName;

                // Add myEventLogInstaller to the Installer collection.
                Installers.Add(editorialEventLogInstaller);
            }
            else
            {
                Trace.WriteLine( String.Format( "Event source {0} already exists", EventSourceName ));
            }
        }

        public static void Main()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\msi\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_propmanagerwebservice_none_12.4.56.0_none_cf1b2ea44ad4cbd1
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=propmanagerwebservice
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.manifest
XP_MANIFEST_PATH=manifests\x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.cat
XP_CATALOG_PATH=manifests\x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.cat
XP_PAYLOAD_PATH=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=propmanagerwebservice,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerRequest\Serialize\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\msi\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_propmanagerwebservice_none_12.4.56.0_none_cf1b2ea44ad4cbd1
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=propmanagerwebservice
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.manifest
XP_MANIFEST_PATH=manifests\x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.cat
XP_CATALOG_PATH=manifests\x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21.cat
XP_PAYLOAD_PATH=x86_propmanagerwebservice_no-public-key_12.4.56.0_x-ww_1b401a21
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=propmanagerwebservice,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerRequest\Serialize\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerRequest\Serialize\PropManagerRequest.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Reflection;

namespace PropManagerRequest
{
    /// <summary>
    /// Request info for prop manager
    /// </summary>
    [Serializable()]
    public struct RequestInfo
    {
        // general request data
        /// <summary>
        /// Request version
        /// </summary>
        public string requestVersion;
        /// <summary>
        /// Test state
        /// </summary>
        public bool testState;
        /// <summary>
        /// Request guid
        /// </summary>
        public string requestGUID;
        /// <summary>
        /// Request name
        /// </summary>
        public string requestName;
        /// <summary>
        /// Request title
        /// </summary>
        public string requestTitleID;
        /// <summary>
        /// Request environment name
        /// </summary>
        public string requestEnvironmentName;
        /// <summary>
        /// Request submitter
        /// </summary>
        public string requestSubmitter;
        /// <summary>
        /// Request data
        /// </summary>
        public ArrayList requestData;

        // Product Studio data
        /// <summary>
        /// PS title
        /// </summary>
        public string psTitle;
        /// <summary>
        /// PS Priority
        /// </summary>
        public int psPriority;
        /// <summary>
        /// PS issue type
        /// </summary>
        public string psIssueType;
        /// <summary>
        /// PS prop datetime
        /// </summary>
        public string psPropDateTime;
        /// <summary>
        /// PS description
        /// </summary>
        public string psDescription;
        /// <summary>
        /// PS repro steps
        /// </summary>
        public string psReproSteps;
        /// <summary>
        /// PS linked bug
        /// </summary>
        public string psLinkedBug;
        /// <summary>
        /// PS linked bug type
        /// </summary>
        public int psLinkedBugType;
        /// <summary>
        /// PS attached files
        /// </summary>
        public bool psAttachFiles;
        /// <summary>
        /// PS auto prop state
        /// </summary>
        public bool psSetAutoPropState;

        // e-mail data
        /// <summary>
        /// Email title
        /// </summary>
        public string emailTitle;
        /// <summary>
        /// Email HTML body
        /// </summary>
        public string emailHTMLBody;
        /// <summary>
        /// Email CC list
        /// </summary>
        public string emailCCList;

        // everything else
        /// <summary>
        /// File paths
        /// </summary>
        public ArrayList filePaths;
        /// <summary>
        /// File drop point path
        /// </summary>
        public string fileDropPointPath;
        /// <summary>
        /// Serialized temp path
        /// </summary>
        public string serializedTempPath;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\PropertyCollectionBinder.cs ===
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using Microsoft.SharePoint;
using Microsoft.SharePoint.WebControls;

namespace PropManagerCAP {
  class PropertyCollectionBinder {

    protected DataTable PropertyCollection = new DataTable();

    public PropertyCollectionBinder() {
      PropertyCollection.Columns.Add("PropertyName", typeof(string));
      PropertyCollection.Columns.Add("PropertyValue", typeof(string));
    }

    public void AddProperty(string PropertyName, string PropertyValue) {
      DataRow newRow = PropertyCollection.Rows.Add();
      newRow["PropertyName"] = PropertyName;
      newRow["PropertyValue"] = PropertyValue;
    }

    public void BindGrid(SPGridView grid) {

      SPBoundField fldPropertyName = new SPBoundField();
      fldPropertyName.HeaderText = "Property Name";
      fldPropertyName.DataField = "PropertyName";
      grid.Columns.Add(fldPropertyName);

      SPBoundField fldPropertyValue = new SPBoundField();
      fldPropertyValue.HeaderText = "Value";
      fldPropertyValue.DataField = "PropertyValue";
      grid.Columns.Add(fldPropertyValue);

      grid.Width = new Unit(400);

      grid.AutoGenerateColumns = false;
      grid.DataSource = PropertyCollection.DefaultView;
      grid.DataBind();


    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerRequest\Serialize\Properties\AssemblyInfo.cs ===
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Serialize")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MSIT")]
[assembly: AssemblyProduct("Serialize")]
[assembly: AssemblyCopyright("Copyright Â© MSIT 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fa3f6cf6-be6a-4fa2-b0d2-ea7e67ea9b0b")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.2")]
[assembly: AssemblyFileVersion("1.0.0.2")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\popup_package.aspx.cs ===
/* ***************************************************************
 * Copyright (C) 2007 Microsoft Corporation.  All rights reserved.
 * 
 * Prop Manager
 * WSS 3.0 Custom Application Page
 * Developer: Mikelangelo Marinaro (v-mikma)
 * popup_package.aspx.cs - This page provides a popup window for displaying API package information to the user.
 * 
 * Version: 2.0
 * Start Date: February 5, 2007
 * Last Updated: March, 2007
 * ***************************************************************/


using System;
using System.Data;
using System.Configuration;
using System.Diagnostics;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.Collections;
using System.ComponentModel;
using System.Data.SqlClient;
using System.IO;
using System.Text;

using Microsoft.SharePoint;
using Microsoft.SharePoint.WebControls;

namespace PropManagerCAP 
{
    public class PopupPage : LayoutsPageBase
    {
        // gives access to the Title Verification tool
        public SqlConnection g_myConnection = new SqlConnection(ConfigurationSettings.AppSettings["dbConnStrTitleVer"]);

        protected Label lText;

        protected void Page_Load(object sender, EventArgs e)
        {
            string envVal = "";
            string packageVal = "";
            string packageName = "";

            if (!IsPostBack)
            {
                envVal = Request.Params["env"];
                packageVal = Request.Params["package"];
                packageName = Request.Params["pname"];

                SqlCommand myCommand = null;
                SqlDataReader dr = null;

                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                // pull titles based on an environment
                myCommand = new SqlCommand("EXEC p_get_env_package_apis " + envVal + "," + packageVal, g_myConnection);
                dr = myCommand.ExecuteReader();

                if (!dr.HasRows)
                    lText.Text = "<i>None</i><br />";
                else
                    lText.Text = "<font size='5'><b>'" + packageName + "' Package List</b></font><br /><br />";

                while (dr.Read())
                    lText.Text += dr["vc_api_name"].ToString() + "<br />";

                dr.Close();
                g_myConnection.Close();
            }
        }



        protected void btnClose_Click(object sender, EventArgs e)
        {
            lText.Text = "<script>javascript:window.close();</script>";
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\Properties\AssemblyInfo.cs ===
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// PropManagerCAP, Version=1.1.0.1 Culture=neutral, PublicKeyToken=d4e5777b16a5749f
[assembly: AssemblyVersion("1.1.0.1")]

[assembly: AssemblyKeyFile("..\\PropManager.snk")]
[assembly: AssemblyTitle("PropManagerCAP")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("PropManagerCAP")]
[assembly: AssemblyCopyright("Copyright Â© Microsoft 2008")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\Properties\Settings.Designer.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PropManagerCAP.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "8.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\association.cs ===
using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Text.RegularExpressions;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Serialization;

using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;
 
namespace PropManagerWorkflow
{
    internal enum AssociationTypeEnum
    {
        List,
        ContentType,
        ContentTypeOnList
    }

    public class PropManagerAssociationForm : LayoutsPageBase
    {
        #region Init Controls
        protected InputFormTextBox tbGlobalRetryValue;
        protected InputFormTextBox tbGlobalRetryDelay;
        protected InputFormTextBox tbPSWorkCheckDelay;
        protected InputFormTextBox tbPropCompletionCheckDelay;

        protected RadioButton rbtnLogOn;
        protected RadioButton rbtnLogOff;
        protected InputFormTextBox tbLogPath;
        protected InputFormTextBox tbConfigPath;
        protected InputFormTextBox tbSMTP;
        protected InputFormTextBox tbFrom;
        protected InputFormTextBox tbSendTo;
        protected InputFormTextBox tbReplyTo;

        protected InputFormTextBox tbToolsMgmtCertificatePart;
        protected InputFormTextBox tbToolsMgmtCertificateCert;
        protected InputFormTextBox tbToolsMgmtCertificateProd;

        protected InputFormTextBox tbToolsMgmtSvrPart;
        protected InputFormTextBox tbToolsMgmtSvrCert;
        protected InputFormTextBox tbToolsMgmtSvrProd;
        protected InputFormTextBox tbXlTransSvr;

        protected InputFormTextBox tbXlTransStartPoint;
        protected InputFormTextBox tbXlTransEndpointPartNet;
        protected InputFormTextBox tbXlTransEndpointCertNet;
        protected InputFormTextBox tbXlTransEndpointProdNet;

        protected InputFormTextBox tbXlTransStartPointToolsMgmt;
        protected InputFormTextBox tbXlTransEndpointPartNetToolsMgmt;
        protected InputFormTextBox tbXlTransEndpointCertNetToolsMgmt;
        protected InputFormTextBox tbXlTransEndpointProdNetToolsMgmt;

        protected InputFormTextBox tbProductName;
        protected InputFormTextBox tbProductNameTest;
        protected InputFormTextBox tbProductDomain;
        protected InputFormTextBox tbPSAttachmentAttempts;
        protected InputFormTextBox tbPSAttachmentDelay;

        protected InputFormTextBox tbPropCmdRegex;

        // error labels
        protected Label lErrorGlobalRetryValue;
        protected Label lErrorGlobalRetryDelay;
        protected Label lErrorPSWorkCheckDelay;
        protected Label lErrorPropCompletionCheckDelay;

        protected Label lError;
        protected Label lErrorLogPath;
        protected Label lErrorConfigPath;
        protected Label lErrorSMTP;
        protected Label lErrorFrom;
        protected Label lErrorSendTo;

        protected Label lErrorToolsMgmtCertificatePart;
        protected Label lErrorToolsMgmtCertificateCert;
        protected Label lErrorToolsMgmtCertificateProd;

        protected Label lErrorToolsMgmtSvrPart;
        protected Label lErrorToolsMgmtSvrCert;
        protected Label lErrorToolsMgmtSvrProd;
        protected Label lErrorXlTransSvr;

        protected Label lErrorXlTransStartPoint;
        protected Label lErrorXlTransEndpointPartNet;
        protected Label lErrorXlTransEndpointCertNet;
        protected Label lErrorXlTransEndpointProdNet;

        protected Label lErrorXlTransStartPointToolsMgmt;
        protected Label lErrorXlTransEndpointPartNetToolsMgmt;
        protected Label lErrorXlTransEndpointCertNetToolsMgmt;
        protected Label lErrorXlTransEndpointProdNetToolsMgmt;

        protected Label lErrorPSName;
        protected Label lErrorPSNameTest;
        protected Label lErrorPSDomain;
        protected Label lErrorPSConnRetry;
        protected Label lErrorPSConnDelay;
        protected Label lErrorPSAttachRetry;
        protected Label lErrorPSAttachDelay;

        protected Label lErrorPropCmdRegex;

        // form-level variables 
        protected string WorkflowAssociationName;
        protected Guid WorkflowTemplateId;
        protected SPWorkflowTemplate WorkflowTemplate;
        bool WorkflowAssociationExists;
        bool UpdateContentTypesOnLists;

        AssociationTypeEnum AssociationType;
        protected Guid ListId;
        protected SPList List;
        protected SPContentTypeId CTypeId;
        protected SPContentType CType;

        protected SPWorkflowAssociation WorkflowAssociation;
        protected Guid WorkflowAssociationId;

        bool NewTaskListRequired = false;
        string NewTaskListName;
        bool NewHistoryListRequired = false;
        string NewHistoryListName;
        SPList TaskList;
        SPList HistoryList;
        protected string QueryString;
        protected string PageTitle;
        protected string PageTitleInArea;
        protected string PageDescription;
        #endregion

        protected override void OnPreRender(EventArgs e)
        {
            if (WorkflowAssociationExists)
                PopulateFormDataFromString(WorkflowAssociation.AssociationData);
        }

        protected override void OnLoad(EventArgs e) 
        {
            MaintainScrollPositionOnPostBack = true;

            lErrorGlobalRetryValue.Text = "";
            lErrorGlobalRetryDelay.Text = "";
            lErrorPropCompletionCheckDelay.Text = "";
            lErrorPSWorkCheckDelay.Text = "";

            lErrorLogPath.Text = "";
            lErrorConfigPath.Text = "";
            lErrorSendTo.Text = "";

            lErrorToolsMgmtCertificatePart.Text = "";
            lErrorToolsMgmtCertificateCert.Text = "";
            lErrorToolsMgmtCertificateProd.Text = "";

            lErrorToolsMgmtSvrPart.Text = "";
            lErrorToolsMgmtSvrCert.Text = "";
            lErrorToolsMgmtSvrProd.Text = "";
            lErrorXlTransSvr.Text = "";

            lErrorXlTransStartPoint.Text = "";
            lErrorXlTransEndpointPartNet.Text = "";
            lErrorXlTransEndpointCertNet.Text = "";
            lErrorXlTransEndpointProdNet.Text = "";

            lErrorXlTransStartPointToolsMgmt.Text = "";
            lErrorXlTransEndpointPartNetToolsMgmt.Text = "";
            lErrorXlTransEndpointCertNetToolsMgmt.Text = "";
            lErrorXlTransEndpointProdNetToolsMgmt.Text = "";

            lErrorPSName.Text = "";
            lErrorPSNameTest.Text = "";
            lErrorPSDomain.Text = "";
            lErrorPSAttachRetry.Text = "";
            lErrorPSAttachDelay.Text = "";

            lErrorPropCmdRegex.Text = "";

            // retrieve form-level parameters      
            string paramWorkflowName = Request.Params["WorkflowName"];
            string paramWorkflowDefinition = Request.Params["WorkflowDefinition"];
            string paramList = Request.Params["List"];
            string paramCType = Request.Params["ctype"];
            string paramUpdateLists = Request.Params["UpdateLists"];
            string paramTaskList = Request.Params["TaskList"];
            string paramHistoryList = Request.Params["HistoryList"];
            string paramAllowManual = Request.Params["AllowManual"];
            string paramAutoStartCreate = Request.Params["AutoStartCreate"];
            string paramAutoStartChange = Request.Params["AutoStartChange"];
            string paramManualPermManageListRequired = Request.Params["ManualPermManageListRequired"];
            string paramGuidAssoc = Request.Params["GuidAssoc"];

            // set page-level variables
            WorkflowAssociationName = paramWorkflowName;
            WorkflowTemplateId = new Guid(paramWorkflowDefinition);
            WorkflowTemplate = Web.WorkflowTemplates[WorkflowTemplateId];
            if (!string.IsNullOrEmpty(paramGuidAssoc))
            {
                WorkflowAssociationExists = true;
                WorkflowAssociationId = new Guid(paramGuidAssoc);
            }
            else
                WorkflowAssociationExists = false;

            UpdateContentTypesOnLists = (paramUpdateLists == "TRUE");

            if (!string.IsNullOrEmpty(paramList))
            {
                ListId = new Guid(paramList);
                List = Web.Lists[ListId];
            }

            if (string.IsNullOrEmpty(paramCType))
            {
                AssociationType = AssociationTypeEnum.List;
                if (WorkflowAssociationExists)
                    WorkflowAssociation = List.WorkflowAssociations[WorkflowAssociationId];
            }
            else
            {
                // there is content type
                if (List == null)
                {
                    AssociationType = AssociationTypeEnum.ContentType;
                    CTypeId = new SPContentTypeId(paramCType);
                    CType = Web.AvailableContentTypes[CTypeId];
                    if (WorkflowAssociationExists)
                        WorkflowAssociation = CType.WorkflowAssociations[WorkflowAssociationId];
                }
                else
                {
                    AssociationType = AssociationTypeEnum.ContentTypeOnList;
                    CType = List.ContentTypes[new SPContentTypeId(paramCType)];
                    if (WorkflowAssociationExists)
                        WorkflowAssociation = CType.WorkflowAssociations[WorkflowAssociationId];
                }
            }

            if (paramTaskList[0] == 'z')
            {
                NewTaskListRequired = true;
                NewTaskListName = paramTaskList.Substring(1);
            }
            else
            {
                if (AssociationType == AssociationTypeEnum.ContentType)
                    TaskList = Web.Lists[paramTaskList];
                else
                    TaskList = Web.Lists[new Guid(paramTaskList)];
            }

            if (paramHistoryList[0] == 'z')
            {
                NewHistoryListRequired = true;
                NewHistoryListName = paramHistoryList.Substring(1);
            }
            else
            {
                if (AssociationType == AssociationTypeEnum.ContentType)
                    HistoryList = Web.Lists[paramHistoryList];
                else
                    HistoryList = Web.Lists[new Guid(paramHistoryList)];
            }

            // update variables with page title/description
            if (WorkflowAssociationExists)
            {
                PageTitle = "Update Workflow Association";
                PageTitleInArea = "Update Workflow Association '" + WorkflowAssociationName + "'";
                PageDescription = "Click OK to update the workflow associated named " + WorkflowAssociationName;
            }
            else
            {
                PageTitle = "Create Workflow Association";
                PageTitleInArea = "Create Prop Manager Workflow Association '" + WorkflowAssociationName + "'";
                PageDescription = "Click OK to create a new Prop Manager workflow association named " + WorkflowAssociationName;
            }
        }

        public void cmdSubmit_OnClick(object sender, EventArgs e)
        {
            bool problem = false;

            if (IsPostBack)
            {
                #region Field Validation
                Regex numberNanny = new Regex("^[0-9]+$");

                if (tbGlobalRetryValue.Text == "")
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: The Step Retry Value must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbGlobalRetryValue.Text))
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryValue.Text) > 1000)
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: Value too high (1000 max).</font>";
                    problem = true;
                }

                if (tbGlobalRetryDelay.Text == "")
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: The Step Retry Delay must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbGlobalRetryDelay.Text))
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryDelay.Text) < 1)
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Value too low (1 minute minimum).</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryDelay.Text) > 1440)
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (tbPSWorkCheckDelay.Text == "")
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: The PS Work Check Delay must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSWorkCheckDelay.Text))
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSWorkCheckDelay.Text) > 1440)
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (tbPropCompletionCheckDelay.Text == "")
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: The Prop Completion Check (Delay) must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPropCompletionCheckDelay.Text))
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPropCompletionCheckDelay.Text) > 1440)
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (!tbLogPath.Text.EndsWith(@"\") && tbLogPath.Text != "")
                    tbLogPath.Text += @"\";
                if (rbtnLogOn.Checked && tbLogPath.Text == "")
                {
                    lErrorLogPath.Text = "<font color='red' size='1'>*Error: Logging is enabled so a logging path must be specified.</font>";
                    problem = true;
                }

                if (!tbConfigPath.Text.EndsWith(@"\") && tbConfigPath.Text != "")
                    tbConfigPath.Text += @"\";
                if (tbConfigPath.Text == "")
                {
                    lErrorConfigPath.Text = "<font color='red' size='1'>*Error: A Configuration Files path must be specified.</font>";
                    problem = true;
                }

                Regex emailNanny = new Regex("^((([^,<>]+);)+)$");
                if (!tbSendTo.Text.EndsWith(";") && tbSendTo.Text != "")
                    tbSendTo.Text += ";";
                if (tbSendTo.Text == "")
                {
                    lErrorSendTo.Text = "<font color='red' size='1'>*Error: E-mail 'To' Alias must be specified.</font>";
                    problem = true;
                }
                else if (!emailNanny.IsMatch(tbSendTo.Text))
                {
                    lErrorSendTo.Text = "<font color='red' size='1'>*Error: Invalid E-mail 'To' Alias(es). Verify each alias is separated by a semi-colon.</font>";
                    problem = true;
                }

                if (tbToolsMgmtCertificatePart.Text == "")
                {
                    lErrorToolsMgmtCertificatePart.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtCertificateCert.Text == "")
                {
                    lErrorToolsMgmtCertificateCert.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtCertificateProd.Text == "")
                {
                    lErrorToolsMgmtCertificateProd.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }

                if (tbToolsMgmtSvrPart.Text == "")
                {
                    lErrorToolsMgmtSvrPart.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Server must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtSvrCert.Text == "")
                {
                    lErrorToolsMgmtSvrCert.Text = "<font color='red' size='1'>*Error: The Tools Management CertNet Server must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtSvrProd.Text == "")
                {
                    lErrorToolsMgmtSvrProd.Text = "<font color='red' size='1'>*Error: The Tools Management Production Server must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransSvr.Text == "")
                {
                    lErrorXlTransSvr.Text = "<font color='red' size='1'>*Error: The XlTrans Server must be specified.</font>";
                    problem = true;
                }

                if (tbXlTransStartPoint.Text == "")
                {
                    lErrorXlTransStartPoint.Text = "<font color='red' size='1'>*Error: The XlTrans Start Point Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointPartNet.Text == "")
                {
                    lErrorXlTransEndpointPartNet.Text = "<font color='red' size='1'>*Error: The XlTrans PartnerNet Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointCertNet.Text == "")
                {
                    lErrorXlTransEndpointCertNet.Text = "<font color='red' size='1'>*Error: The XlTrans CertNet Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointProdNet.Text == "")
                {
                    lErrorXlTransEndpointProdNet.Text = "<font color='red' size='1'>*Error: The XlTrans Production Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransStartPointToolsMgmt.Text == "")
                {
                    lErrorXlTransStartPointToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans Startpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointPartNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointPartNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans PartnerNet Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointCertNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointCertNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans CertNet Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointProdNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointProdNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans Production Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }

                if (tbProductName.Text == "")
                {
                    lErrorPSName.Text = "<font color='red' size='1'>*Error: The PS Product Name must be specified.</font>";
                    problem = true;
                }
                if (tbProductNameTest.Text == "")
                {
                    lErrorPSNameTest.Text = "<font color='red' size='1'>*Error: The PS Product Name for testing must be specified.</font>";
                    problem = true;
                }

                if (!tbProductDomain.Text.EndsWith(";") && tbProductDomain.Text != "")
                    tbProductDomain.Text += ";";
                Regex psDomainNanny = new Regex(@"^(((([a-z]|[A-Z]|[0-9]|(\.))+);)+)$");
                if (tbProductDomain.Text == "")
                {
                    lErrorPSDomain.Text = "<font color='red' size='1'>*Error: The PS Product Domain must be specified.</font>";
                    problem = true;
                }
                else if (!psDomainNanny.IsMatch(tbProductDomain.Text))
                {
                    lErrorPSDomain.Text = "<font color='red' size='1'>*Error: Invalid PS Domain list. Make sure each domain is separated by a semi-colon.</font>";
                    problem = true;
                }

                if (tbPSAttachmentAttempts.Text == "")
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: The number of attachment attempts must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSAttachmentAttempts.Text))
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSAttachmentAttempts.Text) > 1000)
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: Value too high (1000 max).</font>";
                    problem = true;
                }

                if (tbPSAttachmentDelay.Text == "")
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: The delay between attachment attempts must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSAttachmentDelay.Text))
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSAttachmentDelay.Text) > 1440)
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 max).</font>";
                    problem = true;
                }

                if (tbPropCmdRegex.Text == "")
                {
                    lErrorPropCmdRegex.Text = "<font color='red' size='1'>*Error: The Prop Command Regex must be specified.</font>";
                    problem = true;
                }
                #endregion

                if (!problem)
                {
                    string RedirectUrl = "";

                    if (NewTaskListRequired)
                    {
                        Guid TaskListId = Web.Lists.Add(NewTaskListName, "Workflow Tasks", SPListTemplateType.Tasks);
                        TaskList = Web.Lists[TaskListId];
                    }
                    if (NewHistoryListRequired)
                    {
                        Guid HistoryListId = Web.Lists.Add(NewHistoryListName, "Workflow History", SPListTemplateType.WorkflowHistory);
                        HistoryList = Web.Lists[HistoryListId];
                    }

                    switch (AssociationType)
                    {
                        // deal with case where workflow association on list
                        case AssociationTypeEnum.List:
                            if (WorkflowAssociationExists)
                            {
                                //WorkflowAssociation = List.WorkflowAssociations[WorkflowAssociationId];
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                List.UpdateWorkflowAssociation(WorkflowAssociation);
                            }
                            else
                            {
                                WorkflowAssociation = SPWorkflowAssociation.CreateListAssociation(WorkflowTemplate, WorkflowAssociationName, TaskList, HistoryList);
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                List.AddWorkflowAssociation(WorkflowAssociation);
                            }
                            RedirectUrl = "WrkSetng.aspx?List=" + ListId.ToString();
                            break;

                        // deal with case where workflow association is on content type
                        case AssociationTypeEnum.ContentType:
                            if (WorkflowAssociationExists)
                            {
                                WorkflowAssociation = CType.WorkflowAssociations[WorkflowAssociationId];
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                CType.UpdateWorkflowAssociation(WorkflowAssociation);

                                if (UpdateContentTypesOnLists)
                                    CType.UpdateWorkflowAssociationsOnChildren(true, true, true);
                            }
                            else
                            {
                                WorkflowAssociation = SPWorkflowAssociation.CreateSiteContentTypeAssociation(WorkflowTemplate, WorkflowAssociationName, TaskList.Title, HistoryList.Title);
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                CType.AddWorkflowAssociation(WorkflowAssociation);

                                if (UpdateContentTypesOnLists)
                                    CType.UpdateWorkflowAssociationsOnChildren(true, true, true);
                            }

                            RedirectUrl = "WrkSetng.aspx?ctype=" + CTypeId.ToString();


                            break;

                        // deal with case where workflow association is on content type on list
                        case AssociationTypeEnum.ContentTypeOnList:

                            if (WorkflowAssociationExists)
                            {
                                WorkflowAssociation = CType.WorkflowAssociations[WorkflowAssociationId];
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                CType.UpdateWorkflowAssociation(WorkflowAssociation);
                            }
                            else
                            {
                                WorkflowAssociation = SPWorkflowAssociation.CreateListContentTypeAssociation(WorkflowTemplate, WorkflowAssociationName, TaskList, HistoryList);
                                UpdateAssociation(WorkflowAssociation, TaskList, HistoryList);
                                CType.AddWorkflowAssociation(WorkflowAssociation);
                            }

                            RedirectUrl = "WrkSetng.aspx?List=" + ListId.ToString() + "&ctype=" + CTypeId.ToString();
                            break;
                    }
                    SPUtility.Redirect(RedirectUrl, SPRedirectFlags.RelativeToLayoutsPage, HttpContext.Current);
                }
                else
                    lError.Text = "<font color='red'>*Error: Some fields are missing or have invalid information.</font>";
            }
        }

        public void cmdCancel_OnClick(object sender, EventArgs e) 
        {
            string RedirectUrl = "";
            switch (AssociationType) 
            {
                case AssociationTypeEnum.List:
                    RedirectUrl = "WrkSetng.aspx?List=" + Request.Params["List"];
                    break;
                case AssociationTypeEnum.ContentType:
                    RedirectUrl = "WrkSetng.aspx?ctype=" + Request.Params["ctype"]; ;
                    break;
                case AssociationTypeEnum.ContentTypeOnList:
                    RedirectUrl = "WrkSetng.aspx?List=" + Request.Params["List"] + "&ctype=" + Request.Params["ctype"];
                    break;
            }
            SPUtility.Redirect(RedirectUrl, SPRedirectFlags.RelativeToLayoutsPage, HttpContext.Current);
        }

        protected void UpdateAssociation(SPWorkflowAssociation wfa, SPList TaskList, SPList HistoryList) 
        {
            wfa.Name = WorkflowAssociationName;
            wfa.AutoStartCreate = (Request.Params["AutoStartCreate"] == "ON");
            wfa.AutoStartChange = (Request.Params["AutoStartChange"] == "ON");
            wfa.AllowManual = (Request.Params["AllowManual"] == "ON");
            wfa.AssociationData = SerializeFormDataToString();

            if (wfa.TaskListTitle != TaskList.Title)
                wfa.SetTaskList(TaskList);
            if (wfa.HistoryListTitle != HistoryList.Title)
                wfa.SetHistoryList(HistoryList);
        }

        protected string SerializeFormDataToString() 
        {
            WorkflowAssociationData FormData = new WorkflowAssociationData();

            // STORE FORM DATA
            FormData.StepRetryValue = tbGlobalRetryValue.Text;
            FormData.StepRetryDelay = tbGlobalRetryDelay.Text;
            FormData.PSWorkCheckDelay = tbPSWorkCheckDelay.Text;
            FormData.PropCheckDelay = tbPropCompletionCheckDelay.Text;

            if (rbtnLogOn.Checked)
                FormData.LoggingOn = true;
            else
                FormData.LoggingOn = false;

            FormData.LoggingPath = tbLogPath.Text;
            FormData.ConfigPath = tbConfigPath.Text;
            FormData.EmailTo = tbSendTo.Text;

            FormData.ToolsMgmtCertificatePart = tbToolsMgmtCertificatePart.Text;
            FormData.ToolsMgmtCertificateCert = tbToolsMgmtCertificateCert.Text;
            FormData.ToolsMgmtCertificateProd = tbToolsMgmtCertificateProd.Text;

            FormData.ToolsMgmtSvrPart = tbToolsMgmtSvrPart.Text;
            FormData.ToolsMgmtSvrCert = tbToolsMgmtSvrCert.Text;
            FormData.ToolsMgmtSvrProd = tbToolsMgmtSvrProd.Text;
            FormData.XltransSvr = tbXlTransSvr.Text;

            FormData.XlTransStartPoint = tbXlTransStartPoint.Text;
            FormData.XlTransEndpointPartNet = tbXlTransEndpointPartNet.Text;
            FormData.XlTransEndpointCertNet = tbXlTransEndpointCertNet.Text;
            FormData.XlTransEndpointProdNet = tbXlTransEndpointProdNet.Text;

            FormData.XltransStartPointToolsMgmt = tbXlTransStartPointToolsMgmt.Text;
            FormData.XltransEndpointPartNetToolsMgmt = tbXlTransEndpointPartNetToolsMgmt.Text;
            FormData.XltransEndpointCertNetToolsMgmt = tbXlTransEndpointCertNetToolsMgmt.Text;
            FormData.XltransEndpointProdNetToolsMgmt = tbXlTransEndpointProdNetToolsMgmt.Text;

            FormData.PSProductName = tbProductName.Text;
            FormData.PSProductNameTest = tbProductNameTest.Text;
            FormData.PSProductDomain = tbProductDomain.Text;
            FormData.PSAttachmentAttempts = tbPSAttachmentAttempts.Text;
            FormData.PSAttachmentDelay = tbPSAttachmentDelay.Text;

            FormData.PropCmdRegex = tbPropCmdRegex.Text;

            // SERIALIZE FORM DATA
            using (MemoryStream stream = new MemoryStream())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
                serializer.Serialize(stream, FormData);
                stream.Position = 0;
                byte[] bytes = new byte[stream.Length];
                stream.Read(bytes, 0, bytes.Length);
                return Encoding.UTF8.GetString(bytes);
            }
        }

        protected void PopulateFormDataFromString(string AssociationData)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
            XmlTextReader reader = new XmlTextReader(new StringReader(AssociationData));
            WorkflowAssociationData FormData = (WorkflowAssociationData)serializer.Deserialize(reader);

            tbGlobalRetryValue.Text = FormData.StepRetryValue;
            tbGlobalRetryDelay.Text = FormData.StepRetryDelay;
            tbPSWorkCheckDelay.Text = FormData.PSWorkCheckDelay;
            tbPropCompletionCheckDelay.Text = FormData.PropCheckDelay;

            if (FormData.LoggingOn)
                rbtnLogOn.Checked = true;
            else
                FormData.LoggingOn = false;

            tbLogPath.Text = FormData.LoggingPath;
            tbConfigPath.Text = FormData.ConfigPath;
            tbSendTo.Text = FormData.EmailTo;

            tbToolsMgmtCertificatePart.Text = FormData.ToolsMgmtCertificatePart;
            tbToolsMgmtCertificateCert.Text = FormData.ToolsMgmtCertificateCert;
            tbToolsMgmtCertificateProd.Text = FormData.ToolsMgmtCertificateProd;

            tbToolsMgmtSvrPart.Text = FormData.ToolsMgmtSvrPart;
            tbToolsMgmtSvrCert.Text = FormData.ToolsMgmtSvrCert;
            tbToolsMgmtSvrProd.Text = FormData.ToolsMgmtSvrProd;
            tbXlTransSvr.Text = FormData.XltransSvr;

            tbXlTransStartPoint.Text = FormData.XlTransStartPoint;
            tbXlTransEndpointPartNet.Text = FormData.XlTransEndpointPartNet;
            tbXlTransEndpointCertNet.Text = FormData.XlTransEndpointCertNet;
            tbXlTransEndpointProdNet.Text = FormData.XlTransEndpointProdNet;

            tbXlTransStartPointToolsMgmt.Text = FormData.XltransStartPointToolsMgmt;
            tbXlTransEndpointPartNetToolsMgmt.Text = FormData.XltransEndpointPartNetToolsMgmt;
            tbXlTransEndpointCertNetToolsMgmt.Text = FormData.XltransEndpointCertNetToolsMgmt;
            tbXlTransEndpointProdNetToolsMgmt.Text = FormData.XltransEndpointProdNetToolsMgmt;

            tbProductName.Text = FormData.PSProductName;
            tbProductNameTest.Text = FormData.PSProductNameTest;
            tbProductDomain.Text = FormData.PSProductDomain;
            tbPSAttachmentAttempts.Text = FormData.PSAttachmentAttempts;
            tbPSAttachmentDelay.Text = FormData.PSAttachmentDelay;

            tbPropCmdRegex.Text = FormData.PropCmdRegex;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\approval_task.cs ===
using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Serialization;
using System.Text.RegularExpressions;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;
using System.Data;

namespace PropManagerWorkflow
{
    public class PropManagerApprovalTaskForm : LayoutsPageBase
    {
        #region Controls
        protected string ListId;
        protected SPList TaskList;
        protected SPListItem TaskItem;
        protected Guid WorkflowInstanceId;
        protected SPWorkflow WorkflowInstance;
        protected SPList ItemList;
        protected SPListItem Item;

        protected string TaskData;
        protected string TaskName;
        protected SPWorkflowAssociation WorkflowAssociation;

        protected Label lTaskStatus;
        protected Label lError;
        protected Label lTitle;
        protected Label lRequestType;
        protected Label lPSBug;
        protected Label lEnvironment;
        protected Label lPriority;
        protected Label lCreatedBy;
        protected Label lDateCreated;
        protected Label lAssignedTo;
        protected HyperLink lStatusLink;
        protected Label lFileSize;
        protected Label lResolvedTo;
        protected Label lTitleID;
        protected Label lOfferID;
        protected Label lFileDrop;

        protected CheckBox cbVerifyAbort;
        protected ListBox lbPropCommands;
        protected TextBox tbDateTime;
        protected TextBox tbCurCmd;
        protected TextBox tbNotes;
        protected TextBox tbHistory;
        protected RadioButtonList rListActions;

        protected Button btnApprove;
        protected Button btnCancel;
        protected Button btnAddCmd;
        protected Button btnDelCmd;
        protected Button btnUpdCmd;

        protected string PageTitle;
        protected string PageTitleInArea;
        protected string PageDescription;
        #endregion

        protected override void OnLoad(EventArgs ea)
        {
            #region Load Task Variables

            // prop_commands.xml TOKENS
            const string LTC_TOKEN = "[LTC_FILE]";
            //const string GENERATED_OFFER = "[GEN_OFFER_FILE]";
            const string TITLE_TOKEN = "[TitleID]";
            const string TITLE_TOKEN_HEX = "[0x.TitleID]";
            const string VERSION_TOKEN = "[0xBaseVersionID]";
            const string PLATFORM_TOKEN = "[VersionPlatform]";
            const string MULTBASE_ID = "[MULT:Base Versions]";

            MaintainScrollPositionOnPostBack = true;

            ListId = Request.QueryString["List"];
            TaskList = Web.Lists[new Guid(ListId)];
            TaskItem = TaskList.GetItemById(Convert.ToInt32(Request.Params["ID"]));
            WorkflowInstanceId = new Guid((string)TaskItem["WorkflowInstanceID"]);
            WorkflowInstance = new SPWorkflow(Web, WorkflowInstanceId);
            ItemList = WorkflowInstance.ParentList;
            Item = ItemList.GetItemById(WorkflowInstance.ItemId);
            WorkflowAssociation = ItemList.WorkflowAssociations[WorkflowInstance.AssociationId];

            lError.Text = "";

            PageTitle = "Prop Approval Task";
            PageTitleInArea = "Prop Approval Task";
            PageDescription = "Prepare and approve a request to be propped. Please select an action to take below.";
            #endregion 

            if (!IsPostBack)
            {
                tbHistory.Attributes.Add("readonly", "readonly");

                #region Page Locking Settings
                rListActions.Items.Clear();
                if (TaskItem["Status"].ToString() == "Completed" || Item["Current Step"].ToString() == "Prop Request")
                {
                    if (Item["Current Step"].ToString() == "Prop Request" && !Item["Request Status"].ToString().Contains("Step Failure"))
                        lError.Text = "All actions are currently locked because the prop is in progress and cannot be modified at this time.";
                    else if (TaskItem["Status"].ToString() == "Completed")
                        lError.Text = "This task is complete and cannot be modified anymore.";

                    if (!Item["Request Status"].ToString().Contains("Step Failure"))
                    {
                        tbNotes.Enabled = false;
                        tbDateTime.Enabled = false;
                        tbCurCmd.Enabled = false;
                        btnApprove.Enabled = false;
                        btnAddCmd.Enabled = false;
                        btnDelCmd.Enabled = false;
                        btnUpdCmd.Enabled = false;
                    }
                    else
                    {
                        if (TaskItem["Status"].ToString() == "Not Started")
                            rListActions.Items.Add("Approve Automated Prop");
                        else if (TaskItem["Status"].ToString() == "Approved")
                        {
                            rListActions.Items.Add("Update Automated Prop");
                            btnApprove.Text = "Update";
                        }
                        rListActions.Items.Add("Skip Automated Prop (Manual Prop Required)");
                        rListActions.Items.Add("Resolve PS Bug as Won't Fix (Abort Workflow)");
                    }
                }
                else
                {
                    if (TaskItem["Status"].ToString() == "Not Started")
                        rListActions.Items.Add("Approve Automated Prop");
                    else if (TaskItem["Status"].ToString() == "Approved")
                    {
                        rListActions.Items.Add("Update Automated Prop");
                        btnApprove.Text = "Update";
                    }
                    rListActions.Items.Add("Skip Automated Prop (Manual Prop Required)");
                    rListActions.Items.Add("Resolve PS Bug as Won't Fix (Abort Workflow)");
                }
                #endregion

                Hashtable extendedProperties = SPWorkflowTask.GetExtendedPropertiesAsHashtable(TaskItem);
                SPWorkflowTask.GetWorkflowData(TaskItem);

                #region Load Task Information
                if (Item["Title"] != null) lTitle.Text = Item["Title"].ToString();
                if (Item["Size"] != null) lFileSize.Text = Item["Size"].ToString();
                if (Item["Request Type"] != null) lRequestType.Text = Item["Request Type"].ToString();
                if (Item["PS Bug"] != null) lPSBug.Text = Item["PS Bug"].ToString();
                if (Item["Environment"] != null) lEnvironment.Text = Item["Environment"].ToString();
                if (Item["Priority"] != null) lPriority.Text = Item["Priority"].ToString();
                if (Item["Created By"] != null) lCreatedBy.Text = Item["Created By"].ToString().Remove(0, 3);
                if (Item["Created"] != null) lDateCreated.Text = Item["Created"].ToString();

                if (TaskItem["Assigned To"] != null)
                {
                    string[] assigned = TaskItem["Assigned To"].ToString().Split('#');
                    lAssignedTo.Text = assigned[1];
                }
                if (TaskItem["Description"] != null)
                    tbNotes.Text = TaskItem["Description"].ToString();
                #endregion 

                string reqData = "";
                SPFile reqXmlFile = Item.ParentList.ParentWeb.GetFile(Item.Attachments.UrlPrefix + Item.Attachments[Item.Attachments.Count - 1]);
                using (System.IO.StreamReader reader = new System.IO.StreamReader(reqXmlFile.OpenBinaryStream()))
                {
                    reqData = reader.ReadToEnd();
                }

                try
                {
                    #region Load Request Object Info
                    ArrayList baseVers = new ArrayList();

                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(reqData));
                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                    PropManagerRequest.RequestInfo requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

                    if (extendedProperties["ApprovalPropDateTime"] != null && extendedProperties["ApprovalPropDateTime"].ToString() != "")
                        tbDateTime.Text = extendedProperties["ApprovalPropDateTime"].ToString();
                    else
                    {
                        if (requestObj.psPropDateTime != null)
                        {
                            if (requestObj.psPropDateTime == "")
                                tbDateTime.Text = DateTime.Now.ToString("MM/dd/yyyy HHmm");
                            else
                                tbDateTime.Text = requestObj.psPropDateTime;
                        }
                    }

                    if (requestObj.requestTitleID != null)
                    {
                        if (requestObj.requestTitleID == "")
                            lTitleID.Text = "N/A";
                        else
                            lTitleID.Text = requestObj.requestTitleID;
                    }
                    if (requestObj.requestData != null)
                    {
                        bool offers = false;
                        bool resolve = false;
                        foreach (object obj in requestObj.requestData)
                        {
                            SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                            if (skp.key == "Offer IDs")
                            {
                                offers = true;
                                if (skp.value == "")
                                    lOfferID.Text = "N/A";
                                else
                                    lOfferID.Text = skp.value;
                            }
                            else if (skp.key == "Resolve To")
                            {
                                resolve = true;
                                if (skp.value == "")
                                    lResolvedTo.Text = "N/A";
                                else
                                    lResolvedTo.Text = skp.value;
                            }
                            else if (skp.key == "Base Versions")
                            {
                                string verStr = skp.value;
                                string[] vers = verStr.Split(',');
                                foreach (string ver in vers)
                                {
                                    if (ver != "")
                                    {
                                        string[] verParts = ver.Split('|');
                                        string[] platParts = verParts[1].Split('(');
                                        string platform = platParts[0];
                                        baseVers.Add(new ListItem(verParts[0].Trim(), platform.Trim()));
                                    }
                                }
                            }
                        }
                        if (!offers)
                            lOfferID.Text = "N/A";
                        if (!resolve)
                            lResolvedTo.Text = requestObj.requestSubmitter;
                    }
                    if (requestObj.fileDropPointPath != null)
                    {
                        if (requestObj.fileDropPointPath == "" || requestObj.filePaths.Count == 0)
                            lFileDrop.Text = "N/A";
                        else
                        {
                            if (!requestObj.fileDropPointPath.EndsWith(@"\"))
                                requestObj.fileDropPointPath += @"\";
                            string CompletedPath = requestObj.fileDropPointPath + requestObj.requestGUID + @"\";
                            lFileDrop.Text = "<a href='" + CompletedPath + "'>" + CompletedPath + "</a>";
                        }
                    }
                    #endregion

                    if (extendedProperties["ApprovalTaskHistory"] != null)
                        tbHistory.Text = extendedProperties["ApprovalTaskHistory"].ToString();

                    // if the prop commands are already composed from a previous approval, just load them in
                    if (extendedProperties["ApprovalPropCommands"] != null && extendedProperties["ApprovalPropCommands"].ToString() != "")
                    {
                        string[] propCmds = SplitByString(extendedProperties["ApprovalPropCommands"].ToString(), "::::");
                        foreach (string pc in propCmds)
                        {
                            if (pc != "")
                            {
                                lbPropCommands.Items.Add(new ListItem(pc, pc));
                                lbPropCommands.Items[lbPropCommands.Items.Count - 1].Attributes.Add("title", pc);
                            }
                        }
                    }
                    else // if the commands need to be freshly generated from the prop_commands.xml file...
                    {
                        #region Load Prop Commands
                      
                        string ltcFilename = lTitleID.Text.Remove(0, 2) + "_LTC.xml";

                        int iMultType = -1; // 0 = All Files, 1 = One File Type, 2 = Data Type
                        string key = "";
                        Regex tokenPuller = new Regex(@"\[[^\[\]]+\]");
                        ArrayList rawCommands = GetPropCommands(lRequestType.Text, lEnvironment.Text);
                        ArrayList propCommands = new ArrayList();
                        ArrayList newCommands = new ArrayList();
                        foreach (string cmd in rawCommands)
                        {
                            newCommands.Clear();
                            string newCmd = cmd;

                            // this chunk of code is intended for backward functionality
                            newCmd = newCmd.Replace(TITLE_TOKEN, lTitleID.Text.Remove(0,2));
                            newCmd = newCmd.Replace(TITLE_TOKEN_HEX, lTitleID.Text);
                            newCmd = newCmd.Replace(LTC_TOKEN, ltcFilename);

                            if (baseVers.Count > 0 && !cmd.Contains(MULTBASE_ID)) // need the first base version
                            {
                                ListItem aBaseVer = (ListItem)baseVers[0];
                                newCmd = newCmd.Replace(VERSION_TOKEN, aBaseVer.Text);
                                newCmd = newCmd.Replace(PLATFORM_TOKEN, aBaseVer.Value);
                            }
                            else if (baseVers.Count > 0 && cmd.Contains(MULTBASE_ID)) // multiple base versions
                            {
                                newCmd = newCmd.Remove(0, MULTBASE_ID.Length);
                                foreach (ListItem li in baseVers)
                                {
                                    string uberNewCmd = newCmd;
                                    uberNewCmd = uberNewCmd.Replace(VERSION_TOKEN, li.Text);
                                    uberNewCmd = uberNewCmd.Replace(PLATFORM_TOKEN, li.Value);
                                    propCommands.Add(uberNewCmd);
                                }
                                continue;
                            }

                            if (cmd.Contains("MULT:")) // multiple command mode
                            {
                                MatchCollection cmdTokens = tokenPuller.Matches(newCmd);
                                foreach (Match cmdToken in cmdTokens)
                                {
                                    if (cmdToken.Value.Contains("MULT:"))
                                    {
                                        newCmd = newCmd.Remove(0, cmdToken.Length);

                                        string[] tokenParts = cmdToken.Value.Split(':');
                                        string multType = tokenParts[1].Trim().Remove(tokenParts[1].Length-1, 1);

                                        if (multType == "FILE_EXT.*")
                                            iMultType = 0;
                                        else if (multType.Contains("FILE_EXT."))
                                        {
                                            iMultType = 1;
                                            string [] keyParts = multType.Split('.');
                                            key = keyParts[1].Trim();
                                        }
                                        else
                                        {
                                            iMultType = 2;
                                            key = multType;
                                        }
                                        break;
                                    }
                                }

                                if (iMultType == 0) // all files
                                {
                                    cmdTokens = tokenPuller.Matches(newCmd);
                                    foreach (Match cmdToken in cmdTokens)
                                    {
                                        foreach (object obj in requestObj.requestData)
                                        {
                                            SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;
                                            if (cmdToken.Value == "[" + skp.key + "]")
                                            {
                                                skp.value = FormatPropValue(skp.key, skp.value);

                                                string[] valueParts = null;
                                                if (skp.value.Contains(","))
                                                {
                                                    valueParts = skp.value.Split(',');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else if (skp.value.Contains("\n"))
                                                {
                                                    valueParts = skp.value.Split('\n');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else
                                                    newCmd = newCmd.Replace(cmdToken.Value, skp.value);
                                            }
                                        }
                                    }
                                    foreach (string file in requestObj.filePaths)
                                    {
                                        string uberNewCmd = newCmd;
                                        uberNewCmd = uberNewCmd.Replace("[FILE_EXT.*]", Path.GetFileName(file));
                                        newCommands.Add(uberNewCmd);
                                    }
                                }
                                else if (iMultType == 1) // multiple files
                                {
                                    ArrayList keyList = new ArrayList();
                                    foreach (string file in requestObj.filePaths)
                                    {
                                        if (Path.GetExtension(file).ToUpper() == "." + key.ToUpper())
                                            keyList.Add(Path.GetFileName(file));
                                    }
                                    
                                    cmdTokens = tokenPuller.Matches(newCmd);
                                    foreach (Match cmdToken in cmdTokens)
                                    {
                                        foreach (object obj in requestObj.requestData)
                                        {
                                            SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;
                                            if (cmdToken.Value == "[" + skp.key + "]")
                                            {
                                                skp.value = FormatPropValue(skp.key, skp.value);

                                                string[] valueParts = null;
                                                if (skp.value.Contains(","))
                                                {
                                                    valueParts = skp.value.Split(',');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else if (skp.value.Contains("\n"))
                                                {
                                                    valueParts = skp.value.Split('\n');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else
                                                    newCmd = newCmd.Replace(cmdToken.Value, skp.value);
                                            }
                                        }
                                    }
                                    foreach (string file in keyList)
                                    {
                                        string uberNewCmd = newCmd;
                                        uberNewCmd = uberNewCmd.Replace("[FILE_EXT." + key + "]", Path.GetFileName(file));
                                        newCommands.Add(uberNewCmd);
                                    }
                                }
                                else if (iMultType == 2) // multiple data values
                                {
                                    string[] valueParts = null;
                                    cmdTokens = tokenPuller.Matches(newCmd);
                                    foreach (Match cmdToken in cmdTokens)
                                    {
                                        foreach (object obj in requestObj.requestData)
                                        {
                                            SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;
                                            if (cmdToken.Value == "[" + skp.key + "]")
                                            {
                                                skp.value = FormatPropValue(skp.key, skp.value);

                                                if (skp.value.Contains(","))
                                                    valueParts = skp.value.Split(',');
                                                else if (skp.value.Contains("\n"))
                                                    valueParts = skp.value.Split('\n');
                                                else
                                                    valueParts = new string[] { skp.value };
                                            }
                                        }
                                    }
                                    foreach (string value in valueParts)
                                    {
                                        if (value != "")
                                        {
                                            string uberNewCmd = newCmd;
                                            uberNewCmd = uberNewCmd.Replace("[" + key + "]", value.Trim());
                                            newCommands.Add(uberNewCmd);
                                        }
                                    }
                                }
                            }
                            else // single command
                            {
                                MatchCollection cmdTokens = tokenPuller.Matches(newCmd);
                                foreach (Match cmdToken in cmdTokens)
                                {
                                    if (cmdToken.Value.Contains("FILE_EXT."))
                                    {
                                        string[] cmdParts = cmdToken.Value.Split('.');
                                        string ext = cmdParts[1].Trim().Remove(cmdParts[1].Length-1, 1);
                                        foreach (string file in requestObj.filePaths)
                                        {
                                            if (Path.GetExtension(file).ToUpper() == "." + ext.ToUpper())
                                            {
                                                newCmd = newCmd.Replace(cmdToken.Value, Path.GetFileName(file));
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        foreach (object obj in requestObj.requestData)
                                        {
                                            SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;
                                            if (cmdToken.Value == "[" + skp.key + "]")
                                            {
                                                skp.value = FormatPropValue(skp.key, skp.value);

                                                string[] valueParts = null;
                                                if (skp.value.Contains(","))
                                                {
                                                    valueParts = skp.value.Split(',');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else if (skp.value.Contains("\n"))
                                                {
                                                    valueParts = skp.value.Split('\n');
                                                    newCmd = newCmd.Replace(cmdToken.Value, valueParts[0].Trim());
                                                }
                                                else
                                                    newCmd = newCmd.Replace(cmdToken.Value, skp.value);
                                            }
                                        }
                                    }
                                }
                                newCommands.Add(newCmd);
                            }
                            propCommands.AddRange(newCommands);
                        }
                        foreach (string cmd in propCommands)
                        {
                            lbPropCommands.Items.Add(cmd.Trim());
                            lbPropCommands.Items[lbPropCommands.Items.Count - 1].Attributes.Add("title", cmd);
                        }
                        #endregion
                    }

                    lTaskStatus.Text = TaskItem["Status"].ToString();
                    lStatusLink.Text = "here";
                    lStatusLink.NavigateUrl = Web.Url + "/_layouts/WrkStat.aspx?List=" + SPHttpUtility.HtmlEncode(ItemList.ID) + "&WorkflowInstanceID=" + SPHttpUtility.HtmlEncode(WorkflowInstanceId);
                }
                catch (Exception ex)
                {
                    Response.Write("An error occurred while loading the page. Exception Caught: " + ex.Message + "<br />");
                }
            }

            if (!IsPermissionValid(lRequestType.Text, lEnvironment.Text))
            {
                lError.Text = "You do not have permission to use this task.";
                btnApprove.Enabled = false;
            }
        }

        public void cmdApprove_OnClick(object sender, EventArgs e)
        {
            bool problem = false;
            if (rListActions.SelectedIndex == -1)
            {
                lError.Text += "*Error: No action has been selected. If you don't want to perform an Action at this time, please click the Cancel button below.";
                problem = true;
            }
            else if (rListActions.SelectedValue == "Approve Automated Prop" || rListActions.SelectedValue == "Update Automated Prop")
            {
                DateTime result;
                if (tbDateTime.Text == "")
                {
                    lError.Text += "*Error: Missing 'Prop Date, Time'.<br />";
                    problem = true;
                }
                else
                {
                    string[] dateParts = tbDateTime.Text.Trim().Split(' ');
                    System.Text.RegularExpressions.Regex dateNanny = new System.Text.RegularExpressions.Regex(@"(([0-1][0-9]|2[0-3])[0-5][0-9])$");
                    if (!dateNanny.IsMatch(dateParts[1]) || !DateTime.TryParse(dateParts[0], out result))
                    {
                        lError.Text += "*Error: Invalid 'Prop Date/Time'.<br />";
                        problem = true;
                    }
                }

                ArrayList badCmds = new ArrayList();
                if (lbPropCommands.Items.Count == 0)
                {
                    lError.Text += "*Error: There are no 'Prop Commands' specified. If this is intended, please select the 'Skip Automated Prop' Action below.<br />";
                    problem = true;
                }
                else
                {
                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(WorkflowAssociation.AssociationData));
                    XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
                    WorkflowAssociationData assocObj = (WorkflowAssociationData)serializer.Deserialize(stream);

                    Regex cmdNanny = new Regex(assocObj.PropCmdRegex.Trim(), RegexOptions.IgnoreCase);
                    foreach (ListItem li in lbPropCommands.Items)
                    {
                        if (!cmdNanny.IsMatch(li.Text))
                            badCmds.Add(li.Text);
                    }
                }

                if (badCmds.Count > 0)
                {
                    lError.Text += "*Error: The following Prop Commands are invalid:<br />";
                    problem = true;

                    foreach (string cmd in badCmds)
                        lError.Text += "- " + cmd + "<br />";
                }
            }

            if (!problem && TaskItem["Status"].ToString() != "Completed")
            {
                Hashtable taskHash = new Hashtable();
                if (rListActions.SelectedValue == "Approve Automated Prop")
                {
                    #region Approved Prop
                    TaskItem["Status"] = "Approved";
                    taskHash["ApprovalTaskOutcome"] = "Approve Prop";
                    taskHash["ApprovalPropDateTime"] = tbDateTime.Text;

                    // get original prop date, time for comparison
                    string reqData = "";
                    SPFile reqXmlFile = Item.ParentList.ParentWeb.GetFile(Item.Attachments.UrlPrefix + Item.Attachments[Item.Attachments.Count - 1]);
                    using (System.IO.StreamReader reader = new System.IO.StreamReader(reqXmlFile.OpenBinaryStream()))
                    {
                        reqData = reader.ReadToEnd();
                    }

                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(reqData));
                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                    PropManagerRequest.RequestInfo requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);
                    if (requestObj.psPropDateTime != null && requestObj.psPropDateTime != "")
                    {
                        if (requestObj.psPropDateTime != tbDateTime.Text.Trim())
                            WriteToTaskHistory("The Prop Date, Time has changed from '" + requestObj.psPropDateTime + "' to '" + tbDateTime.Text + "'.");
                    }

                    string propCommands = "";
                    foreach (ListItem li in lbPropCommands.Items)
                        propCommands += li.Text + "::::";
                    taskHash.Add("ApprovalPropCommands", propCommands);
                    #endregion
                }
                else if (rListActions.SelectedValue == "Update Automated Prop")
                {
                    #region Updated Prop
                    Hashtable extendedProperties = SPWorkflowTask.GetExtendedPropertiesAsHashtable(TaskItem);
                    if (extendedProperties["ApprovalPropDateTime"] != null)
                    {
                        if (tbDateTime.Text.Trim() != extendedProperties["ApprovalPropDateTime"].ToString().Trim())
                            WriteToTaskHistory("The Prop Date, Time has changed from '" + extendedProperties["ApprovalPropDateTime"].ToString() + "' to '" + tbDateTime.Text + "'.");
                    }
                    taskHash["ApprovalPropDateTime"] = tbDateTime.Text;
                    taskHash["ApprovalTaskOutcome"] = "Update Prop Information";

                    string propCommands = "";
                    foreach (ListItem li in lbPropCommands.Items)
                        propCommands += li.Text + "::::";
                    taskHash.Add("ApprovalPropCommands", propCommands);
                    #endregion
                }
                else if (rListActions.SelectedValue == "Skip Automated Prop (Manual Prop Required)")
                {
                    #region Skip Prop
                    TaskItem["Status"] = "Completed";
                    taskHash["ApprovalTaskOutcome"] = "Skip Prop";
                    #endregion
                }
                else if (rListActions.SelectedValue == "Resolve PS Bug as Won't Fix (Abort Workflow)")
                {
                    #region Abort Workflow
                    if (!cbVerifyAbort.Checked)
                    {
                        lError.Text += "*Error: You have not selected the 'Won't Fix' verification checkbox. If you wish to abort the workflow, you must verify this is your intention.";
                        problem = true;
                    }
                    if (tbNotes.Text == "")
                    {
                        lError.Text += "*Error: Empty 'Notes' field detected. There must be notes when resolving the bug as Won't Fix.";
                        problem = true;
                    }

                    if (!problem)
                    {
                        TaskItem["Status"] = "Completed";
                        taskHash["ApprovalTaskOutcome"] = "Won't Fix";
                    }
                    #endregion
                }

                if (!problem)
                {
                    taskHash["ApprovalTaskStatus"] = TaskItem["Status"];
                    taskHash["ApprovalTaskHistory"] = tbHistory.Text;
                    taskHash["ApprovalTaskUser"] = User.Identity.Name;
                    TaskItem["Description"] = tbNotes.Text;

                    SPWorkflowTask.AlterTask(TaskItem, taskHash, false);
                    SPUtility.Redirect(ItemList.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
                }
            }
        }

        public void cmdCancel_OnClick(object sender, EventArgs e)
        {
            SPUtility.Redirect(ItemList.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
        }

        public void LbPropCmd_SelectedIndexChanged(object sender, EventArgs e)
        {
            tbCurCmd.Text = lbPropCommands.SelectedValue;
        }
        public void UpdCmd_OnClick(object sender, EventArgs e)
        {
            if (tbCurCmd.Text != "" && lbPropCommands.SelectedIndex != -1 && !lbPropCommands.Items.Contains(new ListItem(tbCurCmd.Text, tbCurCmd.Text)))
            {
                WriteToTaskHistory("Updated a prop command from '" + lbPropCommands.SelectedValue + "' to '" + tbCurCmd.Text + "'.");
                lbPropCommands.SelectedItem.Text = tbCurCmd.Text;
                lbPropCommands.SelectedItem.Value = tbCurCmd.Text;
            }
        }
        public void AddCmd_OnClick(object sender, EventArgs e)
        {
            if (tbCurCmd.Text != "" && !lbPropCommands.Items.Contains(new ListItem(tbCurCmd.Text, tbCurCmd.Text)))
            {
                lbPropCommands.Items.Add(new ListItem(tbCurCmd.Text, tbCurCmd.Text));
                WriteToTaskHistory("Added the prop command '" + tbCurCmd.Text + "'.");
                tbCurCmd.Text = "";
            }
        }
        public void DelCmd_OnClick(object sender, EventArgs e)
        {
            if (lbPropCommands.Items.Count > 0 && lbPropCommands.SelectedIndex != -1)
            {
                WriteToTaskHistory("Deleted the prop command '" + lbPropCommands.SelectedValue + "'.");
                lbPropCommands.Items.RemoveAt(lbPropCommands.SelectedIndex);
                tbCurCmd.Text = "";
            }
        }

        /// <summary>
        /// Writes a formatted message to the Task History textbox on the Approval Task.
        /// </summary>
        /// <param name="msg">A string value containing the custom message desired for safe-keeping in the Task History.</param>
        private void WriteToTaskHistory(string msg)
        {
            tbHistory.Text += DateTime.Now.ToString() + " (" + User.Identity.Name + "): " + msg + Environment.NewLine +
                              "--------------------" + Environment.NewLine;
        }

        protected ArrayList GetPropCommands(string optionName, string environmentName)
        {
            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(WorkflowAssociation.AssociationData));
            XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
            WorkflowAssociationData assocObj = (WorkflowAssociationData)serializer.Deserialize(stream);

            string configPath = assocObj.ConfigPath.Trim();

            DataSet ds = new DataSet();
            if (!System.IO.File.Exists(configPath + "prop_commands.xsd") && System.IO.File.Exists(configPath + "prop_commands.xml"))
            {
                ds.ReadXml(configPath + "prop_commands.xml");
                ds.WriteXmlSchema(configPath + "prop_commands.xsd");
            }

            if (System.IO.File.Exists(configPath + "prop_commands.xml"))
            {
                ds.ReadXmlSchema(configPath + "prop_commands.xsd");
                ds.ReadXml(configPath + "prop_commands.xml");
            }
            else
                throw new Exception("Can't load the prop_commands.xml file. This file is required to process the request.");

            ArrayList commands = new ArrayList();
            foreach (DataRow drOptions in ds.Tables["Option"].Rows)
            {
                if (drOptions["Name"].ToString().ToUpper().Equals(optionName.ToUpper()) || drOptions["Name"].ToString().ToUpper().Equals("ALL"))
                {
                    foreach (DataRow drEnvironments in drOptions.GetChildRows("Option_Environment"))
                    {
                        if (drEnvironments["Name"].ToString().ToUpper().Equals(environmentName.ToUpper()) || drEnvironments["Name"].ToString().ToUpper().Equals("ALL"))
                        {
                            foreach (DataRow drCommands in drEnvironments.GetChildRows("Environment_Command"))
                            {
                                if (drCommands["Multiple"] != null && drCommands["Multiple"].ToString() != "")
                                    commands.Add("[MULT:" + drCommands["Multiple"].ToString() + "]" + drCommands["Command_Text"].ToString());
                                else
                                    commands.Add(drCommands["Command_Text"].ToString());
                            }
                        }
                    }
                }
            }

            return commands;
        }

        private string FormatPropValue(string dataKey, string dataValue)
        {
            if ((dataKey == "Base Version" || dataKey == "Update Version") && dataValue.Contains("0x"))
                dataValue = dataValue.Remove(0, 2);
            if (dataKey == "Base Version Type")
            {
                if (dataValue == "Xenon (360)")
                    dataValue = "Xenon";
                else if (dataValue == "PC (Panorama)")
                    dataValue = "PC";
            }

            return dataValue;
        }

        /// <summary>
        /// Determines whether a user has permission to the passed option.
        /// </summary>
        /// <param name="optionName">The name of the request option to test permissions against.</param>
        /// <param name="envName">The name of the environment to test permissions against.</param>
        /// <returns>boolean value to indicate success or failure</returns>
        protected bool IsPermissionValid(string optionName, string environmentName)
        {
            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(WorkflowAssociation.AssociationData));
            XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
            WorkflowAssociationData assocObj = (WorkflowAssociationData)serializer.Deserialize(stream);

            string configPath = assocObj.ConfigPath.Trim();

            DataSet ds = new DataSet();
            if (!System.IO.File.Exists(configPath + "approval_permissions.xsd") && System.IO.File.Exists(configPath + "approval_permissions.xml"))
            {
                ds.ReadXml(configPath + "approval_permissions.xml");
                ds.WriteXmlSchema(configPath + "approval_permissions.xsd");
            }

            if (System.IO.File.Exists(configPath + "approval_permissions.xml"))
            {
                ds.ReadXmlSchema(configPath + "approval_permissions.xsd");
                ds.ReadXml(configPath + "approval_permissions.xml");
            }
            else
                lError.Text += "Can't load the prop_commands.xml file. This file is required to process the request.";

            ArrayList commands = new ArrayList();
            foreach (DataRow drOptions in ds.Tables["Option"].Rows)
            {
                if (drOptions["Name"].ToString().ToUpper().Equals(optionName.ToUpper()) || drOptions["Name"].ToString().ToUpper().Equals("ALL"))
                {
                    foreach (DataRow drEnvironments in drOptions.GetChildRows("Option_Environment"))
                    {
                        if (drEnvironments["Name"].ToString().ToUpper().Equals(environmentName.ToUpper()) || drEnvironments["Name"].ToString().ToUpper().Equals("ALL"))
                        {
                            string[] aliases = null;
                            if (drEnvironments["Aliases"] != DBNull.Value) aliases = drEnvironments["Aliases"].ToString().Split(',');
                            if (aliases != null && aliases[0] != "")
                            {
                                foreach (string alias in aliases)
                                    if (User.IsInRole(alias.Trim())) return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        /// <summary>
        ///  Splits a string based on a string delimeter
        /// </summary>
        /// <param name="stringToSplit">A string value that is to be split</param>
        /// <param name="delimeter">A string value that is the delimeter on which to split the string by</param>
        /// <returns>An array of strings containing each split</returns>
        private string[] SplitByString(string stringToSplit, string delimeter)
        {
            int offset = 0;
            int index = 0;
            int[] offsets = new int[stringToSplit.Length + 1];

            while (index < stringToSplit.Length)
            {
                int indexOf = stringToSplit.IndexOf(delimeter, index);
                if (indexOf != -1)
                {
                    offsets[offset++] = indexOf;
                    index = indexOf + delimeter.Length;
                }
                else
                    index = stringToSplit.Length;
            }

            string[] result = new string[offset + 1];
            if (offset == 0)
                result[0] = stringToSplit;
            else
            {
                offset--;
                result[0] = stringToSplit.Substring(0, offsets[0]);
                for (int i = 0; i < offset; i++)
                    result[i + 1] = stringToSplit.Substring(offsets[i] + delimeter.Length, offsets[i + 1] - offsets[i] - delimeter.Length);
                result[offset + 1] = stringToSplit.Substring(offsets[offset] + delimeter.Length);
            }

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\modification.cs ===
using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Text.RegularExpressions;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Data;
using System.Xml.Serialization;

using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;

namespace PropManagerWorkflow
{
    public class PropManagerModificationForm : LayoutsPageBase
    {
        #region Init Controls
        protected TextBox tbRequestXML;
        protected InputFormTextBox tbGlobalRetryValue;
        protected InputFormTextBox tbGlobalRetryDelay;
        protected InputFormTextBox tbPSWorkCheckDelay;
        protected InputFormTextBox tbPropCompletionCheckDelay;

        protected RadioButton rbtnLogOn;
        protected RadioButton rbtnLogOff;
        protected InputFormTextBox tbLogPath;
        protected InputFormTextBox tbConfigPath;
        protected InputFormTextBox tbSMTP;
        protected InputFormTextBox tbFrom;
        protected InputFormTextBox tbSendTo;
        protected InputFormTextBox tbReplyTo;

        protected InputFormTextBox tbToolsMgmtCertificatePart;
        protected InputFormTextBox tbToolsMgmtCertificateCert;
        protected InputFormTextBox tbToolsMgmtCertificateProd;

        protected InputFormTextBox tbToolsMgmtSvrPart;
        protected InputFormTextBox tbToolsMgmtSvrCert;
        protected InputFormTextBox tbToolsMgmtSvrProd;
        protected InputFormTextBox tbXlTransSvr;

        protected InputFormTextBox tbXlTransStartPoint;
        protected InputFormTextBox tbXlTransEndpointPartNet;
        protected InputFormTextBox tbXlTransEndpointCertNet;
        protected InputFormTextBox tbXlTransEndpointProdNet;
        protected InputFormTextBox tbXlTransStartPointToolsMgmt;

        protected InputFormTextBox tbXlTransEndpointPartNetToolsMgmt;
        protected InputFormTextBox tbXlTransEndpointCertNetToolsMgmt;
        protected InputFormTextBox tbXlTransEndpointProdNetToolsMgmt;

        protected InputFormTextBox tbProductName;
        protected InputFormTextBox tbProductNameTest;
        protected InputFormTextBox tbProductDomain;
        protected InputFormTextBox tbPSAttachmentAttempts;
        protected InputFormTextBox tbPSAttachmentDelay;

        protected InputFormTextBox tbPropCmdRegex;

        // error labels
        protected Label lErrorRequestXML;
        protected Label lErrorGlobalRetryValue;
        protected Label lErrorGlobalRetryDelay;
        protected Label lErrorPSWorkCheckDelay;
        protected Label lErrorPropCompletionCheckDelay;

        protected Label lError;
        protected Label lErrorLogPath;
        protected Label lErrorConfigPath;
        protected Label lErrorSMTP;
        protected Label lErrorFrom;
        protected Label lErrorSendTo;

        protected Label lErrorToolsMgmtCertificatePart;
        protected Label lErrorToolsMgmtCertificateCert;
        protected Label lErrorToolsMgmtCertificateProd;

        protected Label lErrorToolsMgmtSvrPart;
        protected Label lErrorToolsMgmtSvrCert;
        protected Label lErrorToolsMgmtSvrProd;
        protected Label lErrorXlTransSvr;

        protected Label lErrorXlTransStartPoint;
        protected Label lErrorXlTransEndpointPartNet;
        protected Label lErrorXlTransEndpointCertNet;
        protected Label lErrorXlTransEndpointProdNet;

        protected Label lErrorXlTransStartPointToolsMgmt;
        protected Label lErrorXlTransEndpointPartNetToolsMgmt;
        protected Label lErrorXlTransEndpointCertNetToolsMgmt;
        protected Label lErrorXlTransEndpointProdNetToolsMgmt;

        protected Label lErrorPSName;
        protected Label lErrorPSNameTest;
        protected Label lErrorPSDomain;
        protected Label lErrorPSConnRetry;
        protected Label lErrorPSConnDelay;
        protected Label lErrorPSAttachRetry;
        protected Label lErrorPSAttachDelay;

        protected Label lErrorPropCmdRegex;

        // form-level variables 
        protected SPList ListMod;
        protected SPListItem ListItem;
        protected SPWorkflow WorkflowInstance;
        protected Guid ModificationID;
        protected SPWorkflowModification Modification;
        protected string ContextData;
        protected string ListItemName;
        protected string ListItemUrl;
        protected SPContentType CTypeMod;
        protected SPWorkflowAssociation WorkflowAssociationMod;
        protected SPWorkflowTemplate WorkflowTemplateMod;
        protected string WorkflowAssociationNameMod;

        protected string PageTitle;
        protected string PageTitleInArea;
        protected string PageDescription;
        #endregion

        protected override void OnPreRender(EventArgs e) 
        {
            if (!IsPostBack)
                this.PopulateFormDataFromString(ContextData);
        }

        protected override void OnLoad(EventArgs e) 
        {
            MaintainScrollPositionOnPostBack = true;

            lErrorRequestXML.Text = "";
            lErrorGlobalRetryValue.Text = "";
            lErrorGlobalRetryDelay.Text = "";
            lErrorPropCompletionCheckDelay.Text = "";
            lErrorPSWorkCheckDelay.Text = "";
            
            lErrorLogPath.Text = "";
            lErrorConfigPath.Text = "";
            lErrorSendTo.Text = "";

            lErrorToolsMgmtCertificatePart.Text = "";
            lErrorToolsMgmtCertificateCert.Text = "";
            lErrorToolsMgmtCertificateProd.Text = "";

            lErrorToolsMgmtSvrPart.Text = "";
            lErrorToolsMgmtSvrCert.Text = "";
            lErrorToolsMgmtSvrProd.Text = "";
            lErrorXlTransSvr.Text = "";

            lErrorXlTransStartPoint.Text = "";
            lErrorXlTransEndpointPartNet.Text = "";
            lErrorXlTransEndpointCertNet.Text = "";
            lErrorXlTransEndpointProdNet.Text = "";
            lErrorXlTransStartPointToolsMgmt.Text = "";
            lErrorXlTransEndpointPartNetToolsMgmt.Text = "";
            lErrorXlTransEndpointCertNetToolsMgmt.Text = "";
            lErrorXlTransEndpointProdNetToolsMgmt.Text = "";

            lErrorPSName.Text = "";
            lErrorPSNameTest.Text = "";
            lErrorPSDomain.Text = "";
            lErrorPSAttachRetry.Text = "";
            lErrorPSAttachDelay.Text = "";

            lErrorPropCmdRegex.Text = "";
   
            // Get Form Parameters
            string paramList = Request.Params["List"];
            string paramID = Request.Params["ID"];
            string paramWorkflowInstanceID = Request.Params["WorkflowInstanceID"];
            string paramModificationID = Request.Params["ModificationID"];

            // create WSS object
            ListMod = Web.Lists[new Guid(paramList)];
            ListItem = ListMod.GetItemById(Convert.ToInt32(paramID));
            WorkflowInstance = ListItem.Workflows[new Guid(paramWorkflowInstanceID)];
            ModificationID = new Guid(paramModificationID);
            Modification = WorkflowInstance.Modifications[ModificationID];

            ContextData = Modification.ContextData;

            WorkflowAssociationMod = ListMod.WorkflowAssociations[WorkflowInstance.AssociationId];
            if (WorkflowAssociationMod == null)
            { // it is an association on a content type
                SPContentTypeId CTypeID = (SPContentTypeId)ListItem["ContentTypeId"];
                CTypeMod = ListMod.ContentTypes[CTypeID];
                WorkflowAssociationMod = CTypeMod.WorkflowAssociations[WorkflowInstance.AssociationId];
            }
            // ensure there is a valid WorkflowAssociationMod
            if (WorkflowAssociationMod == null)
            {
                throw new SPException("Error loading modification form: could not find workflow association");
            }

            // get more info on workflow association and workflow template
            WorkflowAssociationNameMod = WorkflowAssociationMod.Name;
            WorkflowTemplateMod = Web.WorkflowTemplates[WorkflowAssociationMod.BaseId];

            // set URL for workflow item
            if (ListItem.File == null)
                ListItemUrl = Web.Url + ListItem.ParentList.Forms[PAGETYPE.PAGE_DISPLAYFORM].ServerRelativeUrl + "?ID=" + ListItem.ID.ToString();
            else
                ListItemUrl = Web.Url + "/" + ListItem.File.Url;

            // set Item Name
            if (ListMod.BaseType == SPBaseType.DocumentLibrary)
            {
                // if this is a doc lib, remove the extension of the file
                ListItemName = (string)ListItem["Name"];
                int i = ListItemName.LastIndexOf('.');
                if (i > 0)
                    ListItemName = ListItemName.Substring(0, i);
            }
            else
                ListItemName = (string)ListItem["Title"];
            
            PageTitle = "Modify Workflow Instance";
            PageTitleInArea = "Modify this workflow with the Prop Manager Workflow Modification Form";
            PageDescription = "Make changes and click OK to modify this workflow instance on the item " + ListItemName;
        }

        public void cmdSubmit_OnClick(object sender, EventArgs e)
        {
            bool problem = false;

            if (IsPostBack)
            {
                #region Field Validation
                if (tbRequestXML.Text == "")
                {
                    lErrorRequestXML.Text = "<font color='red' size='1'>*Error: The Request XML Data cannot be empty.</font>";
                    problem = true;
                }
                else
                {
                    try
                    {
                        XmlTextReader xml = new XmlTextReader(new StringReader(tbRequestXML.Text));
                        DataSet xmlData = new DataSet();
                        xmlData.ReadXml(xml);
                        xmlData.Dispose();
                    }
                    catch (Exception ex)
                    {
                        lErrorRequestXML.Text = "<font color='red' size='1'>*Error: The Request XML Data is not well-formed XML.</font>";
                        problem = true;
                    }
                }

                Regex numberNanny = new Regex("^[0-9]+$");

                if (tbGlobalRetryValue.Text == "")
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: The Step Retry Value must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbGlobalRetryValue.Text))
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryValue.Text) > 1000)
                {
                    lErrorGlobalRetryValue.Text = "<font color='red' size='1'>*Error: Value too high (1000 max).</font>";
                    problem = true;
                }

                if (tbGlobalRetryDelay.Text == "")
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: The Step Retry Delay must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbGlobalRetryDelay.Text))
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryDelay.Text) > 1440)
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (tbPSWorkCheckDelay.Text == "")
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: The PS Work Check Delay must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSWorkCheckDelay.Text))
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSWorkCheckDelay.Text) > 1440)
                {
                    lErrorPSWorkCheckDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (tbPropCompletionCheckDelay.Text == "")
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: The Prop Completion Check (Delay) must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPropCompletionCheckDelay.Text))
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbGlobalRetryDelay.Text) < 1)
                {
                    lErrorGlobalRetryDelay.Text = "<font color='red' size='1'>*Error: Value too low (1 minute minimum).</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPropCompletionCheckDelay.Text) > 1440)
                {
                    lErrorPropCompletionCheckDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 minutes [24 hours] max).</font>";
                    problem = true;
                }

                if (!tbLogPath.Text.EndsWith(@"\") && tbLogPath.Text != "")
                    tbLogPath.Text += @"\";
                if (rbtnLogOn.Checked && tbLogPath.Text == "")
                {
                    lErrorLogPath.Text = "<font color='red' size='1'>*Error: Logging is enabled so a logging path must be specified.</font>";
                    problem = true;
                }

                if (!tbConfigPath.Text.EndsWith(@"\") && tbConfigPath.Text != "")
                    tbConfigPath.Text += @"\";
                if (tbConfigPath.Text == "")
                {
                    lErrorConfigPath.Text = "<font color='red' size='1'>*Error: A Configuration Files path must be specified.</font>";
                    problem = true;
                }

                Regex emailNanny = new Regex("^((([^,<>]+);)+)$");
                if (!tbSendTo.Text.EndsWith(";") && tbSendTo.Text != "")
                    tbSendTo.Text += ";";
                if (tbSendTo.Text == "")
                {
                    lErrorSendTo.Text = "<font color='red' size='1'>*Error: E-mail 'To' Alias must be specified.</font>";
                    problem = true;
                }
                else if (!emailNanny.IsMatch(tbSendTo.Text))
                {
                    lErrorSendTo.Text = "<font color='red' size='1'>*Error: Invalid E-mail 'To' Alias(es). Verify each alias is separated by a semi-colon.</font>";
                    problem = true;
                }

                if (tbToolsMgmtCertificatePart.Text == "")
                {
                    lErrorToolsMgmtCertificatePart.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtCertificateCert.Text == "")
                {
                    lErrorToolsMgmtCertificateCert.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtCertificateProd.Text == "")
                {
                    lErrorToolsMgmtCertificateProd.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Certificate must be specified.</font>";
                    problem = true;
                }

                if (tbToolsMgmtSvrPart.Text == "")
                {
                    lErrorToolsMgmtSvrPart.Text = "<font color='red' size='1'>*Error: The Tools Management PartnerNet Server must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtSvrCert.Text == "")
                {
                    lErrorToolsMgmtSvrCert.Text = "<font color='red' size='1'>*Error: The Tools Management CertNet Server must be specified.</font>";
                    problem = true;
                }
                if (tbToolsMgmtSvrProd.Text == "")
                {
                    lErrorToolsMgmtSvrProd.Text = "<font color='red' size='1'>*Error: The Tools Management Production Server must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransSvr.Text == "")
                {
                    lErrorXlTransSvr.Text = "<font color='red' size='1'>*Error: The XlTrans Server must be specified.</font>";
                    problem = true;
                }

                if (tbXlTransStartPoint.Text == "")
                {
                    lErrorXlTransStartPoint.Text = "<font color='red' size='1'>*Error: The XlTrans Startpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointPartNet.Text == "")
                {
                    lErrorXlTransEndpointPartNet.Text = "<font color='red' size='1'>*Error: The XlTrans PartnerNet Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointCertNet.Text == "")
                {
                    lErrorXlTransEndpointCertNet.Text = "<font color='red' size='1'>*Error: The XlTrans CertNet Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointProdNet.Text == "")
                {
                    lErrorXlTransEndpointProdNet.Text = "<font color='red' size='1'>*Error: The XlTrans Production Endpoint Name must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransStartPointToolsMgmt.Text == "")
                {
                    lErrorXlTransStartPointToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans Startpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointPartNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointPartNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans PartnerNet Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointCertNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointCertNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans CertNet Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }
                if (tbXlTransEndpointProdNetToolsMgmt.Text == "")
                {
                    lErrorXlTransEndpointProdNetToolsMgmt.Text = "<font color='red' size='1'>*Error: The XlTrans Production Endpoint Name (Tools Management) must be specified.</font>";
                    problem = true;
                }

                if (tbProductName.Text == "")
                {
                    lErrorPSName.Text = "<font color='red' size='1'>*Error: The PS Product Name must be specified.</font>";
                    problem = true;
                }
                if (tbProductNameTest.Text == "")
                {
                    lErrorPSNameTest.Text = "<font color='red' size='1'>*Error: The PS Product Name for testing must be specified.</font>";
                    problem = true;
                }

                if (!tbProductDomain.Text.EndsWith(";") && tbProductDomain.Text != "")
                    tbProductDomain.Text += ";";
                Regex psDomainNanny = new Regex(@"^(((([a-z]|[A-Z]|[0-9]|(\.))+);)+)$");
                if (tbProductDomain.Text == "")
                {
                    lErrorPSDomain.Text = "<font color='red' size='1'>*Error: The PS Product Domain must be specified.</font>";
                    problem = true;
                }
                else if (!psDomainNanny.IsMatch(tbProductDomain.Text))
                {
                    lErrorPSDomain.Text = "<font color='red' size='1'>*Error: Invalid PS Domain list. Make sure each domain is separated by a semi-colon.</font>";
                    problem = true;
                }

                if (tbPSAttachmentAttempts.Text == "")
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: The number of attachment attempts must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSAttachmentAttempts.Text))
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSAttachmentAttempts.Text) > 1000)
                {
                    lErrorPSAttachRetry.Text = "<font color='red' size='1'>*Error: Value too high (1000 max).</font>";
                    problem = true;
                }

                if (tbPSAttachmentDelay.Text == "")
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: The delay between attachment attempts must be specified.</font>";
                    problem = true;
                }
                else if (!numberNanny.IsMatch(tbPSAttachmentDelay.Text))
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: Invalid characters. This field must be a number.</font>";
                    problem = true;
                }
                else if (Convert.ToInt32(tbPSAttachmentDelay.Text) > 1440)
                {
                    lErrorPSAttachDelay.Text = "<font color='red' size='1'>*Error: Value too high (1440 max).</font>";
                    problem = true;
                }

                if (tbPropCmdRegex.Text == "")
                {
                    lErrorPropCmdRegex.Text = "<font color='red' size='1'>*Error: The Prop Command Regex must be specified.</font>";
                    problem = true;
                }
                #endregion

                if (!problem)
                {
                    try
                    {
                        ContextData = SerializeFormDataToString();
                        Web.Site.WorkflowManager.ModifyWorkflow(WorkflowInstance, Modification, ContextData);
                    }
                    catch (Exception ex)
                    {
                        SPException spEx = ex as SPException;

                        string errorString;
                        if (spEx != null && spEx.ErrorCode == -2130575205 /* SPErrorCode.TP_E_WORKFLOW_ALREADY_RUNNING */)
                            errorString = SPResource.GetString(Strings.WorkflowFailedAlreadyRunningMessage);
                        else if (spEx != null && spEx.ErrorCode == -2130575339 /* SPErrorCode.TP_E_VERSIONCONFLICT */)
                            errorString = SPResource.GetString(Strings.ListVersionMismatch);
                        else if (spEx != null && spEx.ErrorCode == -2130575338 /* SPErrorCode.TP_E_LISTITEMDELETED */)
                            errorString = spEx.Message;
                        else
                            errorString = SPResource.GetString(Strings.WorkflowFailedStartMessage);

                        SPUtility.Redirect("Error.aspx", SPRedirectFlags.RelativeToLayoutsPage, HttpContext.Current, "ErrorText=" + SPHttpUtility.UrlKeyValueEncode(errorString));
                    }
                    SPUtility.Redirect(ListMod.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
                }
                else
                    lError.Text = "<font color='red'>*Error: Some fields are missing or have invalid information.</font>";
            }
        }

        public void cmdCancel_OnClick(object sender, EventArgs e)
        {
            SPUtility.Redirect(ListMod.DefaultViewUrl, SPRedirectFlags.Default, HttpContext.Current);
        }

        protected string SerializeFormDataToString()
        {
            WorkflowAssociationData FormData = new WorkflowAssociationData();

            // STORE FORM DATA
            FormData.StepRetryValue = tbGlobalRetryValue.Text;
            FormData.StepRetryDelay = tbGlobalRetryDelay.Text;
            FormData.PSWorkCheckDelay = tbPSWorkCheckDelay.Text;
            FormData.PropCheckDelay = tbPropCompletionCheckDelay.Text;

            if (rbtnLogOn.Checked)
                FormData.LoggingOn = true;
            else
                FormData.LoggingOn = false;

            FormData.LoggingPath = tbLogPath.Text;
            FormData.ConfigPath = tbConfigPath.Text;
            FormData.EmailTo = tbSendTo.Text;

            FormData.ToolsMgmtCertificatePart = tbToolsMgmtCertificatePart.Text;
            FormData.ToolsMgmtCertificateCert = tbToolsMgmtCertificateCert.Text;
            FormData.ToolsMgmtCertificateProd = tbToolsMgmtCertificateProd.Text;

            FormData.ToolsMgmtSvrPart = tbToolsMgmtSvrPart.Text;
            FormData.ToolsMgmtSvrCert = tbToolsMgmtSvrCert.Text;
            FormData.ToolsMgmtSvrProd = tbToolsMgmtSvrProd.Text;
            FormData.XltransSvr = tbXlTransSvr.Text;

            FormData.XlTransStartPoint = tbXlTransStartPoint.Text;
            FormData.XlTransEndpointPartNet = tbXlTransEndpointPartNet.Text;
            FormData.XlTransEndpointCertNet = tbXlTransEndpointCertNet.Text;
            FormData.XlTransEndpointProdNet = tbXlTransEndpointProdNet.Text;
            FormData.XltransStartPointToolsMgmt = tbXlTransStartPointToolsMgmt.Text;
            FormData.XltransEndpointPartNetToolsMgmt = tbXlTransEndpointPartNetToolsMgmt.Text;
            FormData.XltransEndpointCertNetToolsMgmt = tbXlTransEndpointCertNetToolsMgmt.Text;
            FormData.XltransEndpointProdNetToolsMgmt = tbXlTransEndpointProdNetToolsMgmt.Text;

            FormData.PSProductName = tbProductName.Text;
            FormData.PSProductNameTest = tbProductNameTest.Text;
            FormData.PSProductDomain = tbProductDomain.Text;
            FormData.PSAttachmentAttempts = tbPSAttachmentAttempts.Text;
            FormData.PSAttachmentDelay = tbPSAttachmentDelay.Text;

            FormData.PropCmdRegex = tbPropCmdRegex.Text;

            // SERIALIZE FORM DATA
            using (MemoryStream stream = new MemoryStream())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
                serializer.Serialize(stream, FormData);
                stream.Position = 0;
                byte[] bytes = new byte[stream.Length];
                stream.Read(bytes, 0, bytes.Length);
                return Encoding.UTF8.GetString(bytes) + "::::" + tbRequestXML.Text;
            }
        }

        protected void PopulateFormDataFromString(string contextData)
        {
            string[] contextAry = SplitByString(contextData, "::::");
            
            XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
            XmlTextReader reader = new XmlTextReader(new StringReader(contextAry[0]));
            WorkflowAssociationData FormData = (WorkflowAssociationData)serializer.Deserialize(reader);

            tbRequestXML.Text = contextAry[1];
            tbGlobalRetryValue.Text = FormData.StepRetryValue;
            tbGlobalRetryDelay.Text = FormData.StepRetryDelay;
            tbPSWorkCheckDelay.Text = FormData.PSWorkCheckDelay;
            tbPropCompletionCheckDelay.Text = FormData.PropCheckDelay;

            if (FormData.LoggingOn)
                rbtnLogOn.Checked = true;
            else
                FormData.LoggingOn = false;

            tbLogPath.Text = FormData.LoggingPath;
            tbConfigPath.Text = FormData.ConfigPath;
            tbSendTo.Text = FormData.EmailTo;

            tbToolsMgmtCertificatePart.Text = FormData.ToolsMgmtCertificatePart;
            tbToolsMgmtCertificateCert.Text = FormData.ToolsMgmtCertificateCert;
            tbToolsMgmtCertificateProd.Text = FormData.ToolsMgmtCertificateProd;

            tbToolsMgmtSvrPart.Text = FormData.ToolsMgmtSvrPart;
            tbToolsMgmtSvrCert.Text = FormData.ToolsMgmtSvrCert;
            tbToolsMgmtSvrProd.Text = FormData.ToolsMgmtSvrProd;
            tbXlTransSvr.Text = FormData.XltransSvr;

            tbXlTransStartPoint.Text = FormData.XlTransStartPoint;
            tbXlTransEndpointPartNet.Text = FormData.XlTransEndpointPartNet;
            tbXlTransEndpointCertNet.Text = FormData.XlTransEndpointCertNet;
            tbXlTransEndpointProdNet.Text = FormData.XlTransEndpointProdNet;

            tbXlTransStartPointToolsMgmt.Text = FormData.XltransStartPointToolsMgmt;
            tbXlTransEndpointPartNetToolsMgmt.Text = FormData.XltransEndpointPartNetToolsMgmt;
            tbXlTransEndpointCertNetToolsMgmt.Text = FormData.XltransEndpointCertNetToolsMgmt;
            tbXlTransEndpointProdNetToolsMgmt.Text = FormData.XltransEndpointProdNetToolsMgmt;

            tbProductName.Text = FormData.PSProductName;
            tbProductNameTest.Text = FormData.PSProductNameTest;
            tbProductDomain.Text = FormData.PSProductDomain;
            tbPSAttachmentAttempts.Text = FormData.PSAttachmentAttempts;
            tbPSAttachmentDelay.Text = FormData.PSAttachmentDelay;

            tbPropCmdRegex.Text = FormData.PropCmdRegex;
        }

        /// <summary>
        ///  Splits a string based on a string delimeter
        /// </summary>
        /// <param name="stringToSplit">A string value that is to be split</param>
        /// <param name="delimeter">A string value that is the delimeter on which to split the string by</param>
        /// <returns>An array of strings containing each split</returns>
        private string[] SplitByString(string stringToSplit, string delimeter)
        {
            int offset = 0;
            int index = 0;
            int[] offsets = new int[stringToSplit.Length + 1];

            while (index < stringToSplit.Length)
            {
                int indexOf = stringToSplit.IndexOf(delimeter, index);
                if (indexOf != -1)
                {
                    offsets[offset++] = indexOf;
                    index = indexOf + delimeter.Length;
                }
                else
                    index = stringToSplit.Length;
            }

            string[] result = new string[offset + 1];
            if (offset == 0)
                result[0] = stringToSplit;
            else
            {
                offset--;
                result[0] = stringToSplit.Substring(0, offsets[0]);
                for (int i = 0; i < offset; i++)
                    result[i + 1] = stringToSplit.Substring(offsets[i] + delimeter.Length, offsets[i + 1] - offsets[i] - delimeter.Length);
                result[offset + 1] = stringToSplit.Substring(offsets[offset] + delimeter.Length);
            }

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\failure_task.cs ===
using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;

namespace PropManagerWorkflow 
{
    public class PropManagerFailureTaskForm : LayoutsPageBase
    {
        #region Controls
        protected string ListId;
        protected SPList TaskList;
        protected SPListItem TaskItem;
        protected Guid WorkflowInstanceId;
        protected SPWorkflow WorkflowInstance;
        protected SPList ItemList;
        protected SPListItem Item;

        protected string TaskData;
        protected string TaskName;
        protected SPWorkflowAssociation WorkflowAssociation;

        protected Label lTaskStatus;
        protected Label lError;
        protected Label lTitle;
        protected Label lRequestType;
        protected Label lPSBug;
        protected Label lEnvironment;
        protected Label lPriority;
        protected Label lCreatedBy;
        protected Label lDateCreated;
        protected Label lCurrentStep;
        protected Label lAssignedTo;
        protected Label lLastError;
        protected HyperLink lStatusLink;

        protected TextBox tbNotes;
        protected RadioButtonList rListActions;

        protected Button btnApprove;
        protected Button btnCancel;

        protected string PageTitle;
        protected string PageTitleInArea;
        protected string PageDescription;
        #endregion

        protected override void OnLoad(EventArgs ea)
        {
            ListId = Request.QueryString["List"];
            TaskList = Web.Lists[new Guid(ListId)];
            TaskItem = TaskList.GetItemById(Convert.ToInt32(Request.Params["ID"]));
            WorkflowInstanceId = new Guid((string)TaskItem["WorkflowInstanceID"]);
            WorkflowInstance = new SPWorkflow(Web, WorkflowInstanceId);
            ItemList = WorkflowInstance.ParentList;
            Item = ItemList.GetItemById(WorkflowInstance.ItemId);

            WorkflowAssociation = ItemList.WorkflowAssociations[WorkflowInstance.AssociationId];

            if (TaskItem["Status"].ToString() == "Completed")
                tbNotes.Enabled = false;
            
            if (Item["Title"] != null)          lTitle.Text = Item["Title"].ToString();
            if (Item["Request Type"] != null)   lRequestType.Text = Item["Request Type"].ToString();
            if (Item["PS Bug"] != null)         lPSBug.Text = Item["PS Bug"].ToString();
            if (Item["Environment"] != null)    lEnvironment.Text = Item["Environment"].ToString();
            if (Item["Priority"] != null)       lPriority.Text = Item["Priority"].ToString();
            if (Item["Created By"] != null)     lCreatedBy.Text = Item["Created By"].ToString().Remove(0,3);
            if (Item["Created"] != null)        lDateCreated.Text = Item["Created"].ToString();
            if (Item["Current Step"] != null)   lCurrentStep.Text = Item["Current Step"].ToString();
            if (Item["Last Error"] != null)     lLastError.Text = Item["Last Error"].ToString();

            if (TaskItem["Description"] != null)
                tbNotes.Text = TaskItem["Description"].ToString();
            if (TaskItem["Assigned To"] != null)
            {
                string [] assigned = TaskItem["Assigned To"].ToString().Split('#');
                lAssignedTo.Text = assigned[1];
            }

            lTaskStatus.Text = TaskItem["Status"].ToString();
            lStatusLink.Text = "here";
            lStatusLink.NavigateUrl = Web.Url + "/_layouts/WrkStat.aspx?List=" + SPHttpUtility.HtmlEncode(ItemList.ID) + "&WorkflowInstanceID=" + SPHttpUtility.HtmlEncode(WorkflowInstanceId);

            if (!IsPostBack)
            {
                rListActions.Items.Clear();

                // Reset Retries
                rListActions.Items.Add("Reset Retries (Try Step Again)");

                // Skip Step
                if (lCurrentStep.Text == "Prop Request")
                    rListActions.Items.Add("Skip Automated Prop (Manual Prop)");
                else if (lCurrentStep.Text != "Create PS Bug")
                    rListActions.Items.Add("Skip Step");

                // Abort Workflow
                if (lCurrentStep.Text == "Prop Request")
                    rListActions.Items.Add("Resolve PS Bug as Won't Fix (Abort Workflow)");
                else
                    rListActions.Items.Add("Abort Workflow");
            }

            PageTitle = "Prop Manager Failure Task";
            PageTitleInArea = "Prop Manager Failure Task";
            PageDescription = "A step in a running Prop Manager Workflow has failed to complete. Please select an action to take below.";
        }

        public void cmdApprove_OnClick(object sender, EventArgs e)
        {
            if (TaskItem["Status"].ToString() != "Completed")
            {
                if (rListActions.SelectedIndex == -1)
                    lError.Text = "*Error: No action has been selected. If you don't want to perform an action at this time, please click the Cancel button below.";
                else if (tbNotes.Text == "" && (rListActions.SelectedValue == "Abort Workflow" || rListActions.SelectedValue == "Resolve PS Bug as Won't Fix (Abort Workflow)"))
                    lError.Text = "*Error: The 'Notes' field is required for this Action Option.";
                else
                {
                    TaskItem["Description"] = tbNotes.Text;
                    TaskItem["Status"] = "Completed";

                    Hashtable taskHash = new Hashtable();
                    taskHash["FailureTaskStatus"] = "Completed";

                    if (rListActions.SelectedValue == "Reset Retries (Try Step Again)")
                        taskHash["FailureTaskOutcome"] = "Reset Retries";
                    else if (rListActions.SelectedValue == "Skip Step" || rListActions.SelectedValue == "Skip Automated Prop (Manual Prop)")
                        taskHash["FailureTaskOutcome"] = "Skip Step";
                    else if (rListActions.SelectedValue == "Abort Workflow" || rListActions.SelectedValue == "Resolve PS Bug as Won't Fix (Abort Workflow)")
                        taskHash["FailureTaskOutcome"] = "Abort Workflow";

                    taskHash["FailureTaskUser"] = User.Identity.Name;

                    SPWorkflowTask.AlterTask(TaskItem, taskHash, false);
                    SPUtility.Redirect(ItemList.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
                }
            }
            else
                SPUtility.Redirect(ItemList.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
        }

        public void cmdCancel_OnClick(object sender, EventArgs e)
        {
            SPUtility.Redirect(ItemList.DefaultViewUrl, SPRedirectFlags.UseSource, HttpContext.Current);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogWebServiceProxy\wsdl\ContentIngestionService.wsdl.cs ===
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Microsoft.Ems.Apps.Web.CatalogWebServiceProxy {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CatalogServicesSoap", Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Media))]
    public partial class CatalogServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCatalogIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntity1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableEntityIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableCategoryIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableCategorySystemIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRatingSystemIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRatingValueIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRatingDescriptorIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableLicenseTypeIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalFeedSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalFeedSource1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalFeedMappingObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalFeedMappingObject1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveExternalFeedMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePublishingBatchRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediaOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPodcastOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPodcast1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePodcastOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVideoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoSeasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVideoSeasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVideoSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContributorRelationshipTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountry1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrency1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategorySystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategorySystem1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingSystem1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArticleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArticle1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContributorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContributor1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVideoEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAudioEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveContributorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAudioEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLocaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediaRelationshipTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreviewMediaInstanceTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksByStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableTaskAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeTaskQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDRMTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTask1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoEncodingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVisibilityLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVisibilityStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProvider1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetadataProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMetadataProvider1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDRMLicenseIssuerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDRMLicenseIssuer1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseType1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveLicenseTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseClass1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPricingRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPricingRule1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePricingRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMediaTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveGameContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGameContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentMethod1OperationCompleted;
        
        /// <remarks/>
        public CatalogServices() {
            this.Url = "http://localhost/wsdlreflection.asmx";
        }
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event SearchCompletedEventHandler SearchCompleted;
        
        /// <remarks/>
        public event GetCatalogIdCompletedEventHandler GetCatalogIdCompleted;
        
        /// <remarks/>
        public event GetExternalIdCompletedEventHandler GetExternalIdCompleted;
        
        /// <remarks/>
        public event GetEntityCompletedEventHandler GetEntityCompleted;
        
        /// <remarks/>
        public event GetEntity1CompletedEventHandler GetEntity1Completed;
        
        /// <remarks/>
        public event GetAvailableEntityIdCompletedEventHandler GetAvailableEntityIdCompleted;
        
        /// <remarks/>
        public event GetAvailableCategoryIdCompletedEventHandler GetAvailableCategoryIdCompleted;
        
        /// <remarks/>
        public event GetAvailableCategorySystemIdCompletedEventHandler GetAvailableCategorySystemIdCompleted;
        
        /// <remarks/>
        public event GetAvailableRatingSystemIdCompletedEventHandler GetAvailableRatingSystemIdCompleted;
        
        /// <remarks/>
        public event GetAvailableRatingValueIdCompletedEventHandler GetAvailableRatingValueIdCompleted;
        
        /// <remarks/>
        public event GetAvailableRatingDescriptorIdCompletedEventHandler GetAvailableRatingDescriptorIdCompleted;
        
        /// <remarks/>
        public event GetAvailableLicenseTypeIdCompletedEventHandler GetAvailableLicenseTypeIdCompleted;
        
        /// <remarks/>
        public event GetExternalFeedSourceCompletedEventHandler GetExternalFeedSourceCompleted;
        
        /// <remarks/>
        public event GetExternalFeedSource1CompletedEventHandler GetExternalFeedSource1Completed;
        
        /// <remarks/>
        public event GetExternalFeedMappingObjectCompletedEventHandler GetExternalFeedMappingObjectCompleted;
        
        /// <remarks/>
        public event GetExternalFeedMappingObject1CompletedEventHandler GetExternalFeedMappingObject1Completed;
        
        /// <remarks/>
        public event SaveExternalFeedMappingCompletedEventHandler SaveExternalFeedMappingCompleted;
        
        /// <remarks/>
        public event SaveEntityCompletedEventHandler SaveEntityCompleted;
        
        /// <remarks/>
        public event GetImageCompletedEventHandler GetImageCompleted;
        
        /// <remarks/>
        public event SaveImageCompletedEventHandler SaveImageCompleted;
        
        /// <remarks/>
        public event SavePublishingBatchRequestCompletedEventHandler SavePublishingBatchRequestCompleted;
        
        /// <remarks/>
        public event GetOfferCompletedEventHandler GetOfferCompleted;
        
        /// <remarks/>
        public event SaveOfferCompletedEventHandler SaveOfferCompleted;
        
        /// <remarks/>
        public event GetMediaOfferCompletedEventHandler GetMediaOfferCompleted;
        
        /// <remarks/>
        public event GetPodcastCompletedEventHandler GetPodcastCompleted;
        
        /// <remarks/>
        public event GetPodcast1CompletedEventHandler GetPodcast1Completed;
        
        /// <remarks/>
        public event SavePodcastCompletedEventHandler SavePodcastCompleted;
        
        /// <remarks/>
        public event GetVideoCompletedEventHandler GetVideoCompleted;
        
        /// <remarks/>
        public event SaveVideoCompletedEventHandler SaveVideoCompleted;
        
        /// <remarks/>
        public event GetVideoSeasonCompletedEventHandler GetVideoSeasonCompleted;
        
        /// <remarks/>
        public event SaveVideoSeasonCompletedEventHandler SaveVideoSeasonCompleted;
        
        /// <remarks/>
        public event GetVideoSeriesCompletedEventHandler GetVideoSeriesCompleted;
        
        /// <remarks/>
        public event SaveVideoSeriesCompletedEventHandler SaveVideoSeriesCompleted;
        
        /// <remarks/>
        public event GetContributorRelationshipTypeCompletedEventHandler GetContributorRelationshipTypeCompleted;
        
        /// <remarks/>
        public event GetCountryCompletedEventHandler GetCountryCompleted;
        
        /// <remarks/>
        public event GetCountry1CompletedEventHandler GetCountry1Completed;
        
        /// <remarks/>
        public event GetCurrencyCompletedEventHandler GetCurrencyCompleted;
        
        /// <remarks/>
        public event GetCurrency1CompletedEventHandler GetCurrency1Completed;
        
        /// <remarks/>
        public event GetCategorySystemCompletedEventHandler GetCategorySystemCompleted;
        
        /// <remarks/>
        public event GetCategorySystem1CompletedEventHandler GetCategorySystem1Completed;
        
        /// <remarks/>
        public event SaveCategoryCompletedEventHandler SaveCategoryCompleted;
        
        /// <remarks/>
        public event GetRatingSystemCompletedEventHandler GetRatingSystemCompleted;
        
        /// <remarks/>
        public event GetRatingSystem1CompletedEventHandler GetRatingSystem1Completed;
        
        /// <remarks/>
        public event GetArticleCompletedEventHandler GetArticleCompleted;
        
        /// <remarks/>
        public event GetArticle1CompletedEventHandler GetArticle1Completed;
        
        /// <remarks/>
        public event GetContributorCompletedEventHandler GetContributorCompleted;
        
        /// <remarks/>
        public event GetContributor1CompletedEventHandler GetContributor1Completed;
        
        /// <remarks/>
        public event SaveVideoEncodingCompletedEventHandler SaveVideoEncodingCompleted;
        
        /// <remarks/>
        public event SaveAudioEncodingCompletedEventHandler SaveAudioEncodingCompleted;
        
        /// <remarks/>
        public event SaveContributorCompletedEventHandler SaveContributorCompleted;
        
        /// <remarks/>
        public event GetAudioEncodingCompletedEventHandler GetAudioEncodingCompleted;
        
        /// <remarks/>
        public event GetClientTypeCompletedEventHandler GetClientTypeCompleted;
        
        /// <remarks/>
        public event GetLocaleCompletedEventHandler GetLocaleCompleted;
        
        /// <remarks/>
        public event GetImageFormatCompletedEventHandler GetImageFormatCompleted;
        
        /// <remarks/>
        public event GetImageSizeCompletedEventHandler GetImageSizeCompleted;
        
        /// <remarks/>
        public event GetMediaRelationshipTypeCompletedEventHandler GetMediaRelationshipTypeCompleted;
        
        /// <remarks/>
        public event GetPreviewMediaInstanceTypeCompletedEventHandler GetPreviewMediaInstanceTypeCompleted;
        
        /// <remarks/>
        public event GetRoleCompletedEventHandler GetRoleCompleted;
        
        /// <remarks/>
        public event GetStoreCompletedEventHandler GetStoreCompleted;
        
        /// <remarks/>
        public event GetTaskStatusCompletedEventHandler GetTaskStatusCompleted;
        
        /// <remarks/>
        public event GetTasksByStatusCompletedEventHandler GetTasksByStatusCompleted;
        
        /// <remarks/>
        public event GetTasksCompletedEventHandler GetTasksCompleted;
        
        /// <remarks/>
        public event GetAvailableTaskAsXMLCompletedEventHandler GetAvailableTaskAsXMLCompleted;
        
        /// <remarks/>
        public event PurgeTaskQueueCompletedEventHandler PurgeTaskQueueCompleted;
        
        /// <remarks/>
        public event SaveTaskCompletedEventHandler SaveTaskCompleted;
        
        /// <remarks/>
        public event SaveDRMTaskCompletedEventHandler SaveDRMTaskCompleted;
        
        /// <remarks/>
        public event SaveTask1CompletedEventHandler SaveTask1Completed;
        
        /// <remarks/>
        public event GetUserTypeCompletedEventHandler GetUserTypeCompleted;
        
        /// <remarks/>
        public event GetVideoDefinitionCompletedEventHandler GetVideoDefinitionCompleted;
        
        /// <remarks/>
        public event GetVideoEncodingCompletedEventHandler GetVideoEncodingCompleted;
        
        /// <remarks/>
        public event GetVisibilityLevelCompletedEventHandler GetVisibilityLevelCompleted;
        
        /// <remarks/>
        public event GetVisibilityStatusCompletedEventHandler GetVisibilityStatusCompleted;
        
        /// <remarks/>
        public event GetProviderCompletedEventHandler GetProviderCompleted;
        
        /// <remarks/>
        public event GetProvider1CompletedEventHandler GetProvider1Completed;
        
        /// <remarks/>
        public event GetMetadataProviderCompletedEventHandler GetMetadataProviderCompleted;
        
        /// <remarks/>
        public event GetMetadataProvider1CompletedEventHandler GetMetadataProvider1Completed;
        
        /// <remarks/>
        public event GetDRMLicenseIssuerCompletedEventHandler GetDRMLicenseIssuerCompleted;
        
        /// <remarks/>
        public event GetDRMLicenseIssuer1CompletedEventHandler GetDRMLicenseIssuer1Completed;
        
        /// <remarks/>
        public event GetLicenseTypeCompletedEventHandler GetLicenseTypeCompleted;
        
        /// <remarks/>
        public event GetLicenseType1CompletedEventHandler GetLicenseType1Completed;
        
        /// <remarks/>
        public event SaveLicenseTypeCompletedEventHandler SaveLicenseTypeCompleted;
        
        /// <remarks/>
        public event GetLicenseClassCompletedEventHandler GetLicenseClassCompleted;
        
        /// <remarks/>
        public event GetLicenseClass1CompletedEventHandler GetLicenseClass1Completed;
        
        /// <remarks/>
        public event GetPricingRuleCompletedEventHandler GetPricingRuleCompleted;
        
        /// <remarks/>
        public event GetPricingRule1CompletedEventHandler GetPricingRule1Completed;
        
        /// <remarks/>
        public event SavePricingRuleCompletedEventHandler SavePricingRuleCompleted;
        
        /// <remarks/>
        public event GetMediaTypeCompletedEventHandler GetMediaTypeCompleted;
        
        /// <remarks/>
        public event SaveGameCompletedEventHandler SaveGameCompleted;
        
        /// <remarks/>
        public event GetGameCompletedEventHandler GetGameCompleted;
        
        /// <remarks/>
        public event SaveGameContentCompletedEventHandler SaveGameContentCompleted;
        
        /// <remarks/>
        public event GetGameContentCompletedEventHandler GetGameContentCompleted;
        
        /// <remarks/>
        public event GetPaymentMethodCompletedEventHandler GetPaymentMethodCompleted;
        
        /// <remarks/>
        public event GetPaymentMethod1CompletedEventHandler GetPaymentMethod1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/Ping", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ping", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPing(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/Search", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response[] Search(Request request) {
            object[] results = this.Invoke("Search", new object[] {
                        request});
            return ((Response[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearch(Request request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Search", new object[] {
                        request}, callback, asyncState);
        }
        
        /// <remarks/>
        public Response[] EndSearch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Response[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchAsync(Request request) {
            this.SearchAsync(request, null);
        }
        
        /// <remarks/>
        public void SearchAsync(Request request, object userState) {
            if ((this.SearchOperationCompleted == null)) {
                this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchOperationCompleted);
            }
            this.InvokeAsync("Search", new object[] {
                        request}, this.SearchOperationCompleted, userState);
        }
        
        private void OnSearchOperationCompleted(object arg) {
            if ((this.SearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCatalogId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCatalogId(string externalId, int feedSourceId, int externalmappingObjectId) {
            object[] results = this.Invoke("GetCatalogId", new object[] {
                        externalId,
                        feedSourceId,
                        externalmappingObjectId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCatalogId(string externalId, int feedSourceId, int externalmappingObjectId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCatalogId", new object[] {
                        externalId,
                        feedSourceId,
                        externalmappingObjectId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetCatalogId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCatalogIdAsync(string externalId, int feedSourceId, int externalmappingObjectId) {
            this.GetCatalogIdAsync(externalId, feedSourceId, externalmappingObjectId, null);
        }
        
        /// <remarks/>
        public void GetCatalogIdAsync(string externalId, int feedSourceId, int externalmappingObjectId, object userState) {
            if ((this.GetCatalogIdOperationCompleted == null)) {
                this.GetCatalogIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCatalogIdOperationCompleted);
            }
            this.InvokeAsync("GetCatalogId", new object[] {
                        externalId,
                        feedSourceId,
                        externalmappingObjectId}, this.GetCatalogIdOperationCompleted, userState);
        }
        
        private void OnGetCatalogIdOperationCompleted(object arg) {
            if ((this.GetCatalogIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCatalogIdCompleted(this, new GetCatalogIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetExternalId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExternalId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> catalogId, int feedSourceId, int externalmappingObjectId) {
            object[] results = this.Invoke("GetExternalId", new object[] {
                        catalogId,
                        feedSourceId,
                        externalmappingObjectId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalId(System.Nullable<int> catalogId, int feedSourceId, int externalmappingObjectId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalId", new object[] {
                        catalogId,
                        feedSourceId,
                        externalmappingObjectId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetExternalId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalIdAsync(System.Nullable<int> catalogId, int feedSourceId, int externalmappingObjectId) {
            this.GetExternalIdAsync(catalogId, feedSourceId, externalmappingObjectId, null);
        }
        
        /// <remarks/>
        public void GetExternalIdAsync(System.Nullable<int> catalogId, int feedSourceId, int externalmappingObjectId, object userState) {
            if ((this.GetExternalIdOperationCompleted == null)) {
                this.GetExternalIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalIdOperationCompleted);
            }
            this.InvokeAsync("GetExternalId", new object[] {
                        catalogId,
                        feedSourceId,
                        externalmappingObjectId}, this.GetExternalIdOperationCompleted, userState);
        }
        
        private void OnGetExternalIdOperationCompleted(object arg) {
            if ((this.GetExternalIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalIdCompleted(this, new GetExternalIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetEntity", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Entity GetEntity(int entityId) {
            object[] results = this.Invoke("GetEntity", new object[] {
                        entityId});
            return ((Entity)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntity(int entityId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntity", new object[] {
                        entityId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Entity EndGetEntity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Entity)(results[0]));
        }
        
        /// <remarks/>
        public void GetEntityAsync(int entityId) {
            this.GetEntityAsync(entityId, null);
        }
        
        /// <remarks/>
        public void GetEntityAsync(int entityId, object userState) {
            if ((this.GetEntityOperationCompleted == null)) {
                this.GetEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntityOperationCompleted);
            }
            this.InvokeAsync("GetEntity", new object[] {
                        entityId}, this.GetEntityOperationCompleted, userState);
        }
        
        private void OnGetEntityOperationCompleted(object arg) {
            if ((this.GetEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntityCompleted(this, new GetEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetEntity1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetEntityArray", RequestElementName="GetEntityArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetEntityArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetEntityArrayResult")]
        public Entity[] GetEntity() {
            object[] results = this.Invoke("GetEntity1", new object[0]);
            return ((Entity[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntity1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntity1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Entity[] EndGetEntity1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Entity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEntity1Async() {
            this.GetEntity1Async(null);
        }
        
        /// <remarks/>
        public void GetEntity1Async(object userState) {
            if ((this.GetEntity1OperationCompleted == null)) {
                this.GetEntity1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntity1OperationCompleted);
            }
            this.InvokeAsync("GetEntity1", new object[0], this.GetEntity1OperationCompleted, userState);
        }
        
        private void OnGetEntity1OperationCompleted(object arg) {
            if ((this.GetEntity1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntity1Completed(this, new GetEntity1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableEntityId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableEntityId() {
            object[] results = this.Invoke("GetAvailableEntityId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableEntityId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableEntityId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableEntityId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableEntityIdAsync() {
            this.GetAvailableEntityIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableEntityIdAsync(object userState) {
            if ((this.GetAvailableEntityIdOperationCompleted == null)) {
                this.GetAvailableEntityIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableEntityIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableEntityId", new object[0], this.GetAvailableEntityIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableEntityIdOperationCompleted(object arg) {
            if ((this.GetAvailableEntityIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableEntityIdCompleted(this, new GetAvailableEntityIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableCategoryId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableCategoryId() {
            object[] results = this.Invoke("GetAvailableCategoryId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableCategoryId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableCategoryId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableCategoryId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableCategoryIdAsync() {
            this.GetAvailableCategoryIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableCategoryIdAsync(object userState) {
            if ((this.GetAvailableCategoryIdOperationCompleted == null)) {
                this.GetAvailableCategoryIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableCategoryIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableCategoryId", new object[0], this.GetAvailableCategoryIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableCategoryIdOperationCompleted(object arg) {
            if ((this.GetAvailableCategoryIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableCategoryIdCompleted(this, new GetAvailableCategoryIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableCategorySystemId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableCategorySystemId() {
            object[] results = this.Invoke("GetAvailableCategorySystemId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableCategorySystemId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableCategorySystemId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableCategorySystemId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableCategorySystemIdAsync() {
            this.GetAvailableCategorySystemIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableCategorySystemIdAsync(object userState) {
            if ((this.GetAvailableCategorySystemIdOperationCompleted == null)) {
                this.GetAvailableCategorySystemIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableCategorySystemIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableCategorySystemId", new object[0], this.GetAvailableCategorySystemIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableCategorySystemIdOperationCompleted(object arg) {
            if ((this.GetAvailableCategorySystemIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableCategorySystemIdCompleted(this, new GetAvailableCategorySystemIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableRatingSystemId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableRatingSystemId() {
            object[] results = this.Invoke("GetAvailableRatingSystemId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRatingSystemId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableRatingSystemId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableRatingSystemId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRatingSystemIdAsync() {
            this.GetAvailableRatingSystemIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableRatingSystemIdAsync(object userState) {
            if ((this.GetAvailableRatingSystemIdOperationCompleted == null)) {
                this.GetAvailableRatingSystemIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRatingSystemIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRatingSystemId", new object[0], this.GetAvailableRatingSystemIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableRatingSystemIdOperationCompleted(object arg) {
            if ((this.GetAvailableRatingSystemIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRatingSystemIdCompleted(this, new GetAvailableRatingSystemIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableRatingValueId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableRatingValueId() {
            object[] results = this.Invoke("GetAvailableRatingValueId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRatingValueId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableRatingValueId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableRatingValueId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRatingValueIdAsync() {
            this.GetAvailableRatingValueIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableRatingValueIdAsync(object userState) {
            if ((this.GetAvailableRatingValueIdOperationCompleted == null)) {
                this.GetAvailableRatingValueIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRatingValueIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRatingValueId", new object[0], this.GetAvailableRatingValueIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableRatingValueIdOperationCompleted(object arg) {
            if ((this.GetAvailableRatingValueIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRatingValueIdCompleted(this, new GetAvailableRatingValueIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableRatingDescriptorId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableRatingDescriptorId() {
            object[] results = this.Invoke("GetAvailableRatingDescriptorId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableRatingDescriptorId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableRatingDescriptorId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableRatingDescriptorId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRatingDescriptorIdAsync() {
            this.GetAvailableRatingDescriptorIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableRatingDescriptorIdAsync(object userState) {
            if ((this.GetAvailableRatingDescriptorIdOperationCompleted == null)) {
                this.GetAvailableRatingDescriptorIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRatingDescriptorIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRatingDescriptorId", new object[0], this.GetAvailableRatingDescriptorIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableRatingDescriptorIdOperationCompleted(object arg) {
            if ((this.GetAvailableRatingDescriptorIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRatingDescriptorIdCompleted(this, new GetAvailableRatingDescriptorIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableLicenseTypeId", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAvailableLicenseTypeId() {
            object[] results = this.Invoke("GetAvailableLicenseTypeId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableLicenseTypeId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableLicenseTypeId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAvailableLicenseTypeId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableLicenseTypeIdAsync() {
            this.GetAvailableLicenseTypeIdAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableLicenseTypeIdAsync(object userState) {
            if ((this.GetAvailableLicenseTypeIdOperationCompleted == null)) {
                this.GetAvailableLicenseTypeIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableLicenseTypeIdOperationCompleted);
            }
            this.InvokeAsync("GetAvailableLicenseTypeId", new object[0], this.GetAvailableLicenseTypeIdOperationCompleted, userState);
        }
        
        private void OnGetAvailableLicenseTypeIdOperationCompleted(object arg) {
            if ((this.GetAvailableLicenseTypeIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableLicenseTypeIdCompleted(this, new GetAvailableLicenseTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetExternalFeedSourceOne", RequestElementName="GetExternalFeedSourceOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetExternalFeedSourceOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetExternalFeedSourceOneResult")]
        public ExternalFeedSource GetExternalFeedSource(int id) {
            object[] results = this.Invoke("GetExternalFeedSource", new object[] {
                        id});
            return ((ExternalFeedSource)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalFeedSource(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalFeedSource", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalFeedSource EndGetExternalFeedSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalFeedSource)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalFeedSourceAsync(int id) {
            this.GetExternalFeedSourceAsync(id, null);
        }
        
        /// <remarks/>
        public void GetExternalFeedSourceAsync(int id, object userState) {
            if ((this.GetExternalFeedSourceOperationCompleted == null)) {
                this.GetExternalFeedSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalFeedSourceOperationCompleted);
            }
            this.InvokeAsync("GetExternalFeedSource", new object[] {
                        id}, this.GetExternalFeedSourceOperationCompleted, userState);
        }
        
        private void OnGetExternalFeedSourceOperationCompleted(object arg) {
            if ((this.GetExternalFeedSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalFeedSourceCompleted(this, new GetExternalFeedSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetExternalFeedSource1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetExternalFeedSourceArray", RequestElementName="GetExternalFeedSourceArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetExternalFeedSourceArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetExternalFeedSourceArrayResult")]
        public ExternalFeedSource[] GetExternalFeedSource() {
            object[] results = this.Invoke("GetExternalFeedSource1", new object[0]);
            return ((ExternalFeedSource[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalFeedSource1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalFeedSource1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalFeedSource[] EndGetExternalFeedSource1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalFeedSource[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalFeedSource1Async() {
            this.GetExternalFeedSource1Async(null);
        }
        
        /// <remarks/>
        public void GetExternalFeedSource1Async(object userState) {
            if ((this.GetExternalFeedSource1OperationCompleted == null)) {
                this.GetExternalFeedSource1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalFeedSource1OperationCompleted);
            }
            this.InvokeAsync("GetExternalFeedSource1", new object[0], this.GetExternalFeedSource1OperationCompleted, userState);
        }
        
        private void OnGetExternalFeedSource1OperationCompleted(object arg) {
            if ((this.GetExternalFeedSource1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalFeedSource1Completed(this, new GetExternalFeedSource1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetExternalFeedMappingObjectOne", RequestElementName="GetExternalFeedMappingObjectOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetExternalFeedMappingObjectOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetExternalFeedMappingObjectOneResult")]
        public ExternalFeedMappingObject GetExternalFeedMappingObject(int id) {
            object[] results = this.Invoke("GetExternalFeedMappingObject", new object[] {
                        id});
            return ((ExternalFeedMappingObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalFeedMappingObject(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalFeedMappingObject", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalFeedMappingObject EndGetExternalFeedMappingObject(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalFeedMappingObject)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalFeedMappingObjectAsync(int id) {
            this.GetExternalFeedMappingObjectAsync(id, null);
        }
        
        /// <remarks/>
        public void GetExternalFeedMappingObjectAsync(int id, object userState) {
            if ((this.GetExternalFeedMappingObjectOperationCompleted == null)) {
                this.GetExternalFeedMappingObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalFeedMappingObjectOperationCompleted);
            }
            this.InvokeAsync("GetExternalFeedMappingObject", new object[] {
                        id}, this.GetExternalFeedMappingObjectOperationCompleted, userState);
        }
        
        private void OnGetExternalFeedMappingObjectOperationCompleted(object arg) {
            if ((this.GetExternalFeedMappingObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalFeedMappingObjectCompleted(this, new GetExternalFeedMappingObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetExternalFeedMappingObject1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetExternalFeedMappingObjectArray", RequestElementName="GetExternalFeedMappingObjectArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetExternalFeedMappingObjectArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetExternalFeedMappingObjectArrayResult")]
        public ExternalFeedMappingObject[] GetExternalFeedMappingObject() {
            object[] results = this.Invoke("GetExternalFeedMappingObject1", new object[0]);
            return ((ExternalFeedMappingObject[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalFeedMappingObject1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalFeedMappingObject1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalFeedMappingObject[] EndGetExternalFeedMappingObject1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalFeedMappingObject[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalFeedMappingObject1Async() {
            this.GetExternalFeedMappingObject1Async(null);
        }
        
        /// <remarks/>
        public void GetExternalFeedMappingObject1Async(object userState) {
            if ((this.GetExternalFeedMappingObject1OperationCompleted == null)) {
                this.GetExternalFeedMappingObject1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalFeedMappingObject1OperationCompleted);
            }
            this.InvokeAsync("GetExternalFeedMappingObject1", new object[0], this.GetExternalFeedMappingObject1OperationCompleted, userState);
        }
        
        private void OnGetExternalFeedMappingObject1OperationCompleted(object arg) {
            if ((this.GetExternalFeedMappingObject1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalFeedMappingObject1Completed(this, new GetExternalFeedMappingObject1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveExternalFeedMapping", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveExternalFeedMapping(ExternalFeedMapping e) {
            this.Invoke("SaveExternalFeedMapping", new object[] {
                        e});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveExternalFeedMapping(ExternalFeedMapping e, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveExternalFeedMapping", new object[] {
                        e}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveExternalFeedMapping(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveExternalFeedMappingAsync(ExternalFeedMapping e) {
            this.SaveExternalFeedMappingAsync(e, null);
        }
        
        /// <remarks/>
        public void SaveExternalFeedMappingAsync(ExternalFeedMapping e, object userState) {
            if ((this.SaveExternalFeedMappingOperationCompleted == null)) {
                this.SaveExternalFeedMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveExternalFeedMappingOperationCompleted);
            }
            this.InvokeAsync("SaveExternalFeedMapping", new object[] {
                        e}, this.SaveExternalFeedMappingOperationCompleted, userState);
        }
        
        private void OnSaveExternalFeedMappingOperationCompleted(object arg) {
            if ((this.SaveExternalFeedMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveExternalFeedMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveEntity", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveEntity(Entity e) {
            this.Invoke("SaveEntity", new object[] {
                        e});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveEntity(Entity e, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveEntity", new object[] {
                        e}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveEntity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveEntityAsync(Entity e) {
            this.SaveEntityAsync(e, null);
        }
        
        /// <remarks/>
        public void SaveEntityAsync(Entity e, object userState) {
            if ((this.SaveEntityOperationCompleted == null)) {
                this.SaveEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveEntityOperationCompleted);
            }
            this.InvokeAsync("SaveEntity", new object[] {
                        e}, this.SaveEntityOperationCompleted, userState);
        }
        
        private void OnSaveEntityOperationCompleted(object arg) {
            if ((this.SaveEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveEntityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetImage", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Image GetImage(System.Guid imageId) {
            object[] results = this.Invoke("GetImage", new object[] {
                        imageId});
            return ((Image)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImage(System.Guid imageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImage", new object[] {
                        imageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Image EndGetImage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Image)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageAsync(System.Guid imageId) {
            this.GetImageAsync(imageId, null);
        }
        
        /// <remarks/>
        public void GetImageAsync(System.Guid imageId, object userState) {
            if ((this.GetImageOperationCompleted == null)) {
                this.GetImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageOperationCompleted);
            }
            this.InvokeAsync("GetImage", new object[] {
                        imageId}, this.GetImageOperationCompleted, userState);
        }
        
        private void OnGetImageOperationCompleted(object arg) {
            if ((this.GetImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageCompleted(this, new GetImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveImage", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveImage(Image image) {
            this.Invoke("SaveImage", new object[] {
                        image});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveImage(Image image, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveImage", new object[] {
                        image}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveImage(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveImageAsync(Image image) {
            this.SaveImageAsync(image, null);
        }
        
        /// <remarks/>
        public void SaveImageAsync(Image image, object userState) {
            if ((this.SaveImageOperationCompleted == null)) {
                this.SaveImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveImageOperationCompleted);
            }
            this.InvokeAsync("SaveImage", new object[] {
                        image}, this.SaveImageOperationCompleted, userState);
        }
        
        private void OnSaveImageOperationCompleted(object arg) {
            if ((this.SaveImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SavePublishingBatchRequest", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SavePublishingBatchRequest(Publishing Publishing) {
            this.Invoke("SavePublishingBatchRequest", new object[] {
                        Publishing});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSavePublishingBatchRequest(Publishing Publishing, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SavePublishingBatchRequest", new object[] {
                        Publishing}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSavePublishingBatchRequest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SavePublishingBatchRequestAsync(Publishing Publishing) {
            this.SavePublishingBatchRequestAsync(Publishing, null);
        }
        
        /// <remarks/>
        public void SavePublishingBatchRequestAsync(Publishing Publishing, object userState) {
            if ((this.SavePublishingBatchRequestOperationCompleted == null)) {
                this.SavePublishingBatchRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePublishingBatchRequestOperationCompleted);
            }
            this.InvokeAsync("SavePublishingBatchRequest", new object[] {
                        Publishing}, this.SavePublishingBatchRequestOperationCompleted, userState);
        }
        
        private void OnSavePublishingBatchRequestOperationCompleted(object arg) {
            if ((this.SavePublishingBatchRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePublishingBatchRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetOffer", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Offer GetOffer(System.Guid offerId) {
            object[] results = this.Invoke("GetOffer", new object[] {
                        offerId});
            return ((Offer)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOffer(System.Guid offerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOffer", new object[] {
                        offerId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Offer EndGetOffer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Offer)(results[0]));
        }
        
        /// <remarks/>
        public void GetOfferAsync(System.Guid offerId) {
            this.GetOfferAsync(offerId, null);
        }
        
        /// <remarks/>
        public void GetOfferAsync(System.Guid offerId, object userState) {
            if ((this.GetOfferOperationCompleted == null)) {
                this.GetOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfferOperationCompleted);
            }
            this.InvokeAsync("GetOffer", new object[] {
                        offerId}, this.GetOfferOperationCompleted, userState);
        }
        
        private void OnGetOfferOperationCompleted(object arg) {
            if ((this.GetOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfferCompleted(this, new GetOfferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveOffer", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveOffer(Offer offer) {
            this.Invoke("SaveOffer", new object[] {
                        offer});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveOffer(Offer offer, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveOffer", new object[] {
                        offer}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveOfferAsync(Offer offer) {
            this.SaveOfferAsync(offer, null);
        }
        
        /// <remarks/>
        public void SaveOfferAsync(Offer offer, object userState) {
            if ((this.SaveOfferOperationCompleted == null)) {
                this.SaveOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOfferOperationCompleted);
            }
            this.InvokeAsync("SaveOffer", new object[] {
                        offer}, this.SaveOfferOperationCompleted, userState);
        }
        
        private void OnSaveOfferOperationCompleted(object arg) {
            if ((this.SaveOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetMediaOffer", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaOffer GetMediaOffer(System.Guid mediaId) {
            object[] results = this.Invoke("GetMediaOffer", new object[] {
                        mediaId});
            return ((MediaOffer)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMediaOffer(System.Guid mediaId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMediaOffer", new object[] {
                        mediaId}, callback, asyncState);
        }
        
        /// <remarks/>
        public MediaOffer EndGetMediaOffer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MediaOffer)(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaOfferAsync(System.Guid mediaId) {
            this.GetMediaOfferAsync(mediaId, null);
        }
        
        /// <remarks/>
        public void GetMediaOfferAsync(System.Guid mediaId, object userState) {
            if ((this.GetMediaOfferOperationCompleted == null)) {
                this.GetMediaOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaOfferOperationCompleted);
            }
            this.InvokeAsync("GetMediaOffer", new object[] {
                        mediaId}, this.GetMediaOfferOperationCompleted, userState);
        }
        
        private void OnGetMediaOfferOperationCompleted(object arg) {
            if ((this.GetMediaOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaOfferCompleted(this, new GetMediaOfferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetPodcastById", RequestElementName="GetPodcastById", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetPodcastByIdResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPodcastByIdResult")]
        public Podcast GetPodcast(System.Guid podcastId) {
            object[] results = this.Invoke("GetPodcast", new object[] {
                        podcastId});
            return ((Podcast)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPodcast(System.Guid podcastId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPodcast", new object[] {
                        podcastId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Podcast EndGetPodcast(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Podcast)(results[0]));
        }
        
        /// <remarks/>
        public void GetPodcastAsync(System.Guid podcastId) {
            this.GetPodcastAsync(podcastId, null);
        }
        
        /// <remarks/>
        public void GetPodcastAsync(System.Guid podcastId, object userState) {
            if ((this.GetPodcastOperationCompleted == null)) {
                this.GetPodcastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPodcastOperationCompleted);
            }
            this.InvokeAsync("GetPodcast", new object[] {
                        podcastId}, this.GetPodcastOperationCompleted, userState);
        }
        
        private void OnGetPodcastOperationCompleted(object arg) {
            if ((this.GetPodcastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPodcastCompleted(this, new GetPodcastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetPodcast1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetPodcastByUri", RequestElementName="GetPodcastByUri", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetPodcastByUriResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPodcastByUriResult")]
        public Podcast GetPodcast(string podcastUri) {
            object[] results = this.Invoke("GetPodcast1", new object[] {
                        podcastUri});
            return ((Podcast)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPodcast1(string podcastUri, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPodcast1", new object[] {
                        podcastUri}, callback, asyncState);
        }
        
        /// <remarks/>
        public Podcast EndGetPodcast1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Podcast)(results[0]));
        }
        
        /// <remarks/>
        public void GetPodcast1Async(string podcastUri) {
            this.GetPodcast1Async(podcastUri, null);
        }
        
        /// <remarks/>
        public void GetPodcast1Async(string podcastUri, object userState) {
            if ((this.GetPodcast1OperationCompleted == null)) {
                this.GetPodcast1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPodcast1OperationCompleted);
            }
            this.InvokeAsync("GetPodcast1", new object[] {
                        podcastUri}, this.GetPodcast1OperationCompleted, userState);
        }
        
        private void OnGetPodcast1OperationCompleted(object arg) {
            if ((this.GetPodcast1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPodcast1Completed(this, new GetPodcast1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SavePodcast", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SavePodcast(Podcast podcast) {
            this.Invoke("SavePodcast", new object[] {
                        podcast});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSavePodcast(Podcast podcast, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SavePodcast", new object[] {
                        podcast}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSavePodcast(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SavePodcastAsync(Podcast podcast) {
            this.SavePodcastAsync(podcast, null);
        }
        
        /// <remarks/>
        public void SavePodcastAsync(Podcast podcast, object userState) {
            if ((this.SavePodcastOperationCompleted == null)) {
                this.SavePodcastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePodcastOperationCompleted);
            }
            this.InvokeAsync("SavePodcast", new object[] {
                        podcast}, this.SavePodcastOperationCompleted, userState);
        }
        
        private void OnSavePodcastOperationCompleted(object arg) {
            if ((this.SavePodcastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePodcastCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVideo", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Video GetVideo(System.Guid videoId) {
            object[] results = this.Invoke("GetVideo", new object[] {
                        videoId});
            return ((Video)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVideo(System.Guid videoId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVideo", new object[] {
                        videoId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Video EndGetVideo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Video)(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoAsync(System.Guid videoId) {
            this.GetVideoAsync(videoId, null);
        }
        
        /// <remarks/>
        public void GetVideoAsync(System.Guid videoId, object userState) {
            if ((this.GetVideoOperationCompleted == null)) {
                this.GetVideoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoOperationCompleted);
            }
            this.InvokeAsync("GetVideo", new object[] {
                        videoId}, this.GetVideoOperationCompleted, userState);
        }
        
        private void OnGetVideoOperationCompleted(object arg) {
            if ((this.GetVideoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoCompleted(this, new GetVideoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveVideo", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveVideo(Video video) {
            this.Invoke("SaveVideo", new object[] {
                        video});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveVideo(Video video, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveVideo", new object[] {
                        video}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveVideo(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveVideoAsync(Video video) {
            this.SaveVideoAsync(video, null);
        }
        
        /// <remarks/>
        public void SaveVideoAsync(Video video, object userState) {
            if ((this.SaveVideoOperationCompleted == null)) {
                this.SaveVideoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVideoOperationCompleted);
            }
            this.InvokeAsync("SaveVideo", new object[] {
                        video}, this.SaveVideoOperationCompleted, userState);
        }
        
        private void OnSaveVideoOperationCompleted(object arg) {
            if ((this.SaveVideoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVideoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVideoSeason", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VideoSeason GetVideoSeason(System.Guid videoSeasonId) {
            object[] results = this.Invoke("GetVideoSeason", new object[] {
                        videoSeasonId});
            return ((VideoSeason)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVideoSeason(System.Guid videoSeasonId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVideoSeason", new object[] {
                        videoSeasonId}, callback, asyncState);
        }
        
        /// <remarks/>
        public VideoSeason EndGetVideoSeason(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VideoSeason)(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoSeasonAsync(System.Guid videoSeasonId) {
            this.GetVideoSeasonAsync(videoSeasonId, null);
        }
        
        /// <remarks/>
        public void GetVideoSeasonAsync(System.Guid videoSeasonId, object userState) {
            if ((this.GetVideoSeasonOperationCompleted == null)) {
                this.GetVideoSeasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoSeasonOperationCompleted);
            }
            this.InvokeAsync("GetVideoSeason", new object[] {
                        videoSeasonId}, this.GetVideoSeasonOperationCompleted, userState);
        }
        
        private void OnGetVideoSeasonOperationCompleted(object arg) {
            if ((this.GetVideoSeasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoSeasonCompleted(this, new GetVideoSeasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveVideoSeason", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveVideoSeason(VideoSeason videoSeason) {
            this.Invoke("SaveVideoSeason", new object[] {
                        videoSeason});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveVideoSeason(VideoSeason videoSeason, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveVideoSeason", new object[] {
                        videoSeason}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveVideoSeason(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveVideoSeasonAsync(VideoSeason videoSeason) {
            this.SaveVideoSeasonAsync(videoSeason, null);
        }
        
        /// <remarks/>
        public void SaveVideoSeasonAsync(VideoSeason videoSeason, object userState) {
            if ((this.SaveVideoSeasonOperationCompleted == null)) {
                this.SaveVideoSeasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVideoSeasonOperationCompleted);
            }
            this.InvokeAsync("SaveVideoSeason", new object[] {
                        videoSeason}, this.SaveVideoSeasonOperationCompleted, userState);
        }
        
        private void OnSaveVideoSeasonOperationCompleted(object arg) {
            if ((this.SaveVideoSeasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVideoSeasonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVideoSeries", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VideoSeries GetVideoSeries(System.Guid videoSeriesId) {
            object[] results = this.Invoke("GetVideoSeries", new object[] {
                        videoSeriesId});
            return ((VideoSeries)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVideoSeries(System.Guid videoSeriesId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVideoSeries", new object[] {
                        videoSeriesId}, callback, asyncState);
        }
        
        /// <remarks/>
        public VideoSeries EndGetVideoSeries(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VideoSeries)(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoSeriesAsync(System.Guid videoSeriesId) {
            this.GetVideoSeriesAsync(videoSeriesId, null);
        }
        
        /// <remarks/>
        public void GetVideoSeriesAsync(System.Guid videoSeriesId, object userState) {
            if ((this.GetVideoSeriesOperationCompleted == null)) {
                this.GetVideoSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoSeriesOperationCompleted);
            }
            this.InvokeAsync("GetVideoSeries", new object[] {
                        videoSeriesId}, this.GetVideoSeriesOperationCompleted, userState);
        }
        
        private void OnGetVideoSeriesOperationCompleted(object arg) {
            if ((this.GetVideoSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoSeriesCompleted(this, new GetVideoSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveVideoSeries", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveVideoSeries(VideoSeries videoSeries) {
            this.Invoke("SaveVideoSeries", new object[] {
                        videoSeries});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveVideoSeries(VideoSeries videoSeries, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveVideoSeries", new object[] {
                        videoSeries}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveVideoSeries(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveVideoSeriesAsync(VideoSeries videoSeries) {
            this.SaveVideoSeriesAsync(videoSeries, null);
        }
        
        /// <remarks/>
        public void SaveVideoSeriesAsync(VideoSeries videoSeries, object userState) {
            if ((this.SaveVideoSeriesOperationCompleted == null)) {
                this.SaveVideoSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVideoSeriesOperationCompleted);
            }
            this.InvokeAsync("SaveVideoSeries", new object[] {
                        videoSeries}, this.SaveVideoSeriesOperationCompleted, userState);
        }
        
        private void OnSaveVideoSeriesOperationCompleted(object arg) {
            if ((this.SaveVideoSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVideoSeriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetContributorRelationshipTypeArra" +
            "y", RequestElementName="GetContributorRelationshipTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetContributorRelationshipTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetContributorRelationshipTypeArrayResult")]
        public ContributorRelationshipType[] GetContributorRelationshipType() {
            object[] results = this.Invoke("GetContributorRelationshipType", new object[0]);
            return ((ContributorRelationshipType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetContributorRelationshipType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetContributorRelationshipType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ContributorRelationshipType[] EndGetContributorRelationshipType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ContributorRelationshipType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContributorRelationshipTypeAsync() {
            this.GetContributorRelationshipTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetContributorRelationshipTypeAsync(object userState) {
            if ((this.GetContributorRelationshipTypeOperationCompleted == null)) {
                this.GetContributorRelationshipTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContributorRelationshipTypeOperationCompleted);
            }
            this.InvokeAsync("GetContributorRelationshipType", new object[0], this.GetContributorRelationshipTypeOperationCompleted, userState);
        }
        
        private void OnGetContributorRelationshipTypeOperationCompleted(object arg) {
            if ((this.GetContributorRelationshipTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContributorRelationshipTypeCompleted(this, new GetContributorRelationshipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCountry", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Country GetCountry(string countryCode) {
            object[] results = this.Invoke("GetCountry", new object[] {
                        countryCode});
            return ((Country)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCountry(string countryCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCountry", new object[] {
                        countryCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public Country EndGetCountry(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Country)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountryAsync(string countryCode) {
            this.GetCountryAsync(countryCode, null);
        }
        
        /// <remarks/>
        public void GetCountryAsync(string countryCode, object userState) {
            if ((this.GetCountryOperationCompleted == null)) {
                this.GetCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountryOperationCompleted);
            }
            this.InvokeAsync("GetCountry", new object[] {
                        countryCode}, this.GetCountryOperationCompleted, userState);
        }
        
        private void OnGetCountryOperationCompleted(object arg) {
            if ((this.GetCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountryCompleted(this, new GetCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetCountry1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCountryArray", RequestElementName="GetCountryArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetCountryArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetCountryArrayResult")]
        public Country[] GetCountry() {
            object[] results = this.Invoke("GetCountry1", new object[0]);
            return ((Country[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCountry1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCountry1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Country[] EndGetCountry1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Country[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCountry1Async() {
            this.GetCountry1Async(null);
        }
        
        /// <remarks/>
        public void GetCountry1Async(object userState) {
            if ((this.GetCountry1OperationCompleted == null)) {
                this.GetCountry1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountry1OperationCompleted);
            }
            this.InvokeAsync("GetCountry1", new object[0], this.GetCountry1OperationCompleted, userState);
        }
        
        private void OnGetCountry1OperationCompleted(object arg) {
            if ((this.GetCountry1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountry1Completed(this, new GetCountry1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCurrency", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Currency GetCurrency(string currencyCode) {
            object[] results = this.Invoke("GetCurrency", new object[] {
                        currencyCode});
            return ((Currency)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrency(string currencyCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrency", new object[] {
                        currencyCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public Currency EndGetCurrency(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Currency)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyAsync(string currencyCode) {
            this.GetCurrencyAsync(currencyCode, null);
        }
        
        /// <remarks/>
        public void GetCurrencyAsync(string currencyCode, object userState) {
            if ((this.GetCurrencyOperationCompleted == null)) {
                this.GetCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyOperationCompleted);
            }
            this.InvokeAsync("GetCurrency", new object[] {
                        currencyCode}, this.GetCurrencyOperationCompleted, userState);
        }
        
        private void OnGetCurrencyOperationCompleted(object arg) {
            if ((this.GetCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyCompleted(this, new GetCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetCurrency1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCurrencyArray", RequestElementName="GetCurrencyArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetCurrencyArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetCurrencyArrayResult")]
        public Currency[] GetCurrency() {
            object[] results = this.Invoke("GetCurrency1", new object[0]);
            return ((Currency[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrency1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrency1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Currency[] EndGetCurrency1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Currency[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrency1Async() {
            this.GetCurrency1Async(null);
        }
        
        /// <remarks/>
        public void GetCurrency1Async(object userState) {
            if ((this.GetCurrency1OperationCompleted == null)) {
                this.GetCurrency1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrency1OperationCompleted);
            }
            this.InvokeAsync("GetCurrency1", new object[0], this.GetCurrency1OperationCompleted, userState);
        }
        
        private void OnGetCurrency1OperationCompleted(object arg) {
            if ((this.GetCurrency1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrency1Completed(this, new GetCurrency1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCategorySystem", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CategorySystem GetCategorySystem(int id) {
            object[] results = this.Invoke("GetCategorySystem", new object[] {
                        id});
            return ((CategorySystem)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCategorySystem(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCategorySystem", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public CategorySystem EndGetCategorySystem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CategorySystem)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategorySystemAsync(int id) {
            this.GetCategorySystemAsync(id, null);
        }
        
        /// <remarks/>
        public void GetCategorySystemAsync(int id, object userState) {
            if ((this.GetCategorySystemOperationCompleted == null)) {
                this.GetCategorySystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategorySystemOperationCompleted);
            }
            this.InvokeAsync("GetCategorySystem", new object[] {
                        id}, this.GetCategorySystemOperationCompleted, userState);
        }
        
        private void OnGetCategorySystemOperationCompleted(object arg) {
            if ((this.GetCategorySystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategorySystemCompleted(this, new GetCategorySystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetCategorySystem1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetCategorySystemArray", RequestElementName="GetCategorySystemArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetCategorySystemArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetCategorySystemArrayResult")]
        public CategorySystem[] GetCategorySystem() {
            object[] results = this.Invoke("GetCategorySystem1", new object[0]);
            return ((CategorySystem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCategorySystem1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCategorySystem1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CategorySystem[] EndGetCategorySystem1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CategorySystem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCategorySystem1Async() {
            this.GetCategorySystem1Async(null);
        }
        
        /// <remarks/>
        public void GetCategorySystem1Async(object userState) {
            if ((this.GetCategorySystem1OperationCompleted == null)) {
                this.GetCategorySystem1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategorySystem1OperationCompleted);
            }
            this.InvokeAsync("GetCategorySystem1", new object[0], this.GetCategorySystem1OperationCompleted, userState);
        }
        
        private void OnGetCategorySystem1OperationCompleted(object arg) {
            if ((this.GetCategorySystem1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategorySystem1Completed(this, new GetCategorySystem1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveCategory", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveCategory(Category category) {
            this.Invoke("SaveCategory", new object[] {
                        category});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveCategory(Category category, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveCategory", new object[] {
                        category}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveCategory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveCategoryAsync(Category category) {
            this.SaveCategoryAsync(category, null);
        }
        
        /// <remarks/>
        public void SaveCategoryAsync(Category category, object userState) {
            if ((this.SaveCategoryOperationCompleted == null)) {
                this.SaveCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveCategoryOperationCompleted);
            }
            this.InvokeAsync("SaveCategory", new object[] {
                        category}, this.SaveCategoryOperationCompleted, userState);
        }
        
        private void OnSaveCategoryOperationCompleted(object arg) {
            if ((this.SaveCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetRatingSystem", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RatingSystem GetRatingSystem(int id) {
            object[] results = this.Invoke("GetRatingSystem", new object[] {
                        id});
            return ((RatingSystem)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingSystem(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingSystem", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public RatingSystem EndGetRatingSystem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RatingSystem)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingSystemAsync(int id) {
            this.GetRatingSystemAsync(id, null);
        }
        
        /// <remarks/>
        public void GetRatingSystemAsync(int id, object userState) {
            if ((this.GetRatingSystemOperationCompleted == null)) {
                this.GetRatingSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingSystemOperationCompleted);
            }
            this.InvokeAsync("GetRatingSystem", new object[] {
                        id}, this.GetRatingSystemOperationCompleted, userState);
        }
        
        private void OnGetRatingSystemOperationCompleted(object arg) {
            if ((this.GetRatingSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingSystemCompleted(this, new GetRatingSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetRatingSystem1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetRatingSystemArray", RequestElementName="GetRatingSystemArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetRatingSystemArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetRatingSystemArrayResult")]
        public RatingSystem[] GetRatingSystem() {
            object[] results = this.Invoke("GetRatingSystem1", new object[0]);
            return ((RatingSystem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingSystem1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingSystem1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public RatingSystem[] EndGetRatingSystem1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RatingSystem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingSystem1Async() {
            this.GetRatingSystem1Async(null);
        }
        
        /// <remarks/>
        public void GetRatingSystem1Async(object userState) {
            if ((this.GetRatingSystem1OperationCompleted == null)) {
                this.GetRatingSystem1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingSystem1OperationCompleted);
            }
            this.InvokeAsync("GetRatingSystem1", new object[0], this.GetRatingSystem1OperationCompleted, userState);
        }
        
        private void OnGetRatingSystem1OperationCompleted(object arg) {
            if ((this.GetRatingSystem1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingSystem1Completed(this, new GetRatingSystem1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetArticle", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Article GetArticle(System.Guid id) {
            object[] results = this.Invoke("GetArticle", new object[] {
                        id});
            return ((Article)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetArticle(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetArticle", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public Article EndGetArticle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Article)(results[0]));
        }
        
        /// <remarks/>
        public void GetArticleAsync(System.Guid id) {
            this.GetArticleAsync(id, null);
        }
        
        /// <remarks/>
        public void GetArticleAsync(System.Guid id, object userState) {
            if ((this.GetArticleOperationCompleted == null)) {
                this.GetArticleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArticleOperationCompleted);
            }
            this.InvokeAsync("GetArticle", new object[] {
                        id}, this.GetArticleOperationCompleted, userState);
        }
        
        private void OnGetArticleOperationCompleted(object arg) {
            if ((this.GetArticleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArticleCompleted(this, new GetArticleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetArticle1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetArticleArray", RequestElementName="GetArticleArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetArticleArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetArticleArrayResult")]
        public Article[] GetArticle(System.Guid[] ids) {
            object[] results = this.Invoke("GetArticle1", new object[] {
                        ids});
            return ((Article[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetArticle1(System.Guid[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetArticle1", new object[] {
                        ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public Article[] EndGetArticle1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Article[])(results[0]));
        }
        
        /// <remarks/>
        public void GetArticle1Async(System.Guid[] ids) {
            this.GetArticle1Async(ids, null);
        }
        
        /// <remarks/>
        public void GetArticle1Async(System.Guid[] ids, object userState) {
            if ((this.GetArticle1OperationCompleted == null)) {
                this.GetArticle1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArticle1OperationCompleted);
            }
            this.InvokeAsync("GetArticle1", new object[] {
                        ids}, this.GetArticle1OperationCompleted, userState);
        }
        
        private void OnGetArticle1OperationCompleted(object arg) {
            if ((this.GetArticle1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArticle1Completed(this, new GetArticle1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetContributor", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Contributor GetContributor(System.Guid id) {
            object[] results = this.Invoke("GetContributor", new object[] {
                        id});
            return ((Contributor)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetContributor(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetContributor", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public Contributor EndGetContributor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Contributor)(results[0]));
        }
        
        /// <remarks/>
        public void GetContributorAsync(System.Guid id) {
            this.GetContributorAsync(id, null);
        }
        
        /// <remarks/>
        public void GetContributorAsync(System.Guid id, object userState) {
            if ((this.GetContributorOperationCompleted == null)) {
                this.GetContributorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContributorOperationCompleted);
            }
            this.InvokeAsync("GetContributor", new object[] {
                        id}, this.GetContributorOperationCompleted, userState);
        }
        
        private void OnGetContributorOperationCompleted(object arg) {
            if ((this.GetContributorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContributorCompleted(this, new GetContributorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetContributor1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetContributorArray", RequestElementName="GetContributorArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetContributorArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetContributorArrayResult")]
        public Contributor[] GetContributor(System.Guid[] ids) {
            object[] results = this.Invoke("GetContributor1", new object[] {
                        ids});
            return ((Contributor[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetContributor1(System.Guid[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetContributor1", new object[] {
                        ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public Contributor[] EndGetContributor1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Contributor[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContributor1Async(System.Guid[] ids) {
            this.GetContributor1Async(ids, null);
        }
        
        /// <remarks/>
        public void GetContributor1Async(System.Guid[] ids, object userState) {
            if ((this.GetContributor1OperationCompleted == null)) {
                this.GetContributor1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContributor1OperationCompleted);
            }
            this.InvokeAsync("GetContributor1", new object[] {
                        ids}, this.GetContributor1OperationCompleted, userState);
        }
        
        private void OnGetContributor1OperationCompleted(object arg) {
            if ((this.GetContributor1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContributor1Completed(this, new GetContributor1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveVideoEncoding", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveVideoEncoding(VideoEncoding videoEncoding) {
            this.Invoke("SaveVideoEncoding", new object[] {
                        videoEncoding});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveVideoEncoding(VideoEncoding videoEncoding, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveVideoEncoding", new object[] {
                        videoEncoding}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveVideoEncoding(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveVideoEncodingAsync(VideoEncoding videoEncoding) {
            this.SaveVideoEncodingAsync(videoEncoding, null);
        }
        
        /// <remarks/>
        public void SaveVideoEncodingAsync(VideoEncoding videoEncoding, object userState) {
            if ((this.SaveVideoEncodingOperationCompleted == null)) {
                this.SaveVideoEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVideoEncodingOperationCompleted);
            }
            this.InvokeAsync("SaveVideoEncoding", new object[] {
                        videoEncoding}, this.SaveVideoEncodingOperationCompleted, userState);
        }
        
        private void OnSaveVideoEncodingOperationCompleted(object arg) {
            if ((this.SaveVideoEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVideoEncodingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveAudioEncoding", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveAudioEncoding(AudioEncoding audioEncoding) {
            this.Invoke("SaveAudioEncoding", new object[] {
                        audioEncoding});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveAudioEncoding(AudioEncoding audioEncoding, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveAudioEncoding", new object[] {
                        audioEncoding}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveAudioEncoding(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveAudioEncodingAsync(AudioEncoding audioEncoding) {
            this.SaveAudioEncodingAsync(audioEncoding, null);
        }
        
        /// <remarks/>
        public void SaveAudioEncodingAsync(AudioEncoding audioEncoding, object userState) {
            if ((this.SaveAudioEncodingOperationCompleted == null)) {
                this.SaveAudioEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAudioEncodingOperationCompleted);
            }
            this.InvokeAsync("SaveAudioEncoding", new object[] {
                        audioEncoding}, this.SaveAudioEncodingOperationCompleted, userState);
        }
        
        private void OnSaveAudioEncodingOperationCompleted(object arg) {
            if ((this.SaveAudioEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAudioEncodingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveContributor", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveContributor(Contributor contributor) {
            this.Invoke("SaveContributor", new object[] {
                        contributor});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveContributor(Contributor contributor, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveContributor", new object[] {
                        contributor}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveContributor(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveContributorAsync(Contributor contributor) {
            this.SaveContributorAsync(contributor, null);
        }
        
        /// <remarks/>
        public void SaveContributorAsync(Contributor contributor, object userState) {
            if ((this.SaveContributorOperationCompleted == null)) {
                this.SaveContributorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveContributorOperationCompleted);
            }
            this.InvokeAsync("SaveContributor", new object[] {
                        contributor}, this.SaveContributorOperationCompleted, userState);
        }
        
        private void OnSaveContributorOperationCompleted(object arg) {
            if ((this.SaveContributorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveContributorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAudioEncodingArray", RequestElementName="GetAudioEncodingArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetAudioEncodingArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetAudioEncodingArrayResult")]
        public AudioEncoding[] GetAudioEncoding() {
            object[] results = this.Invoke("GetAudioEncoding", new object[0]);
            return ((AudioEncoding[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAudioEncoding(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAudioEncoding", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public AudioEncoding[] EndGetAudioEncoding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AudioEncoding[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAudioEncodingAsync() {
            this.GetAudioEncodingAsync(null);
        }
        
        /// <remarks/>
        public void GetAudioEncodingAsync(object userState) {
            if ((this.GetAudioEncodingOperationCompleted == null)) {
                this.GetAudioEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAudioEncodingOperationCompleted);
            }
            this.InvokeAsync("GetAudioEncoding", new object[0], this.GetAudioEncodingOperationCompleted, userState);
        }
        
        private void OnGetAudioEncodingOperationCompleted(object arg) {
            if ((this.GetAudioEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAudioEncodingCompleted(this, new GetAudioEncodingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetClientTypeArray", RequestElementName="GetClientTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetClientTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetClientTypeArrayResult")]
        public ClientType[] GetClientType() {
            object[] results = this.Invoke("GetClientType", new object[0]);
            return ((ClientType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ClientType[] EndGetClientType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClientTypeAsync() {
            this.GetClientTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetClientTypeAsync(object userState) {
            if ((this.GetClientTypeOperationCompleted == null)) {
                this.GetClientTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientTypeOperationCompleted);
            }
            this.InvokeAsync("GetClientType", new object[0], this.GetClientTypeOperationCompleted, userState);
        }
        
        private void OnGetClientTypeOperationCompleted(object arg) {
            if ((this.GetClientTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientTypeCompleted(this, new GetClientTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetLocaleArray", RequestElementName="GetLocaleArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetLocaleArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetLocaleArrayResult")]
        public Locale[] GetLocale() {
            object[] results = this.Invoke("GetLocale", new object[0]);
            return ((Locale[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLocale(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLocale", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Locale[] EndGetLocale(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Locale[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLocaleAsync() {
            this.GetLocaleAsync(null);
        }
        
        /// <remarks/>
        public void GetLocaleAsync(object userState) {
            if ((this.GetLocaleOperationCompleted == null)) {
                this.GetLocaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocaleOperationCompleted);
            }
            this.InvokeAsync("GetLocale", new object[0], this.GetLocaleOperationCompleted, userState);
        }
        
        private void OnGetLocaleOperationCompleted(object arg) {
            if ((this.GetLocaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLocaleCompleted(this, new GetLocaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetImageFormatArray", RequestElementName="GetImageFormatArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetImageFormatArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetImageFormatArrayResult")]
        public ImageFormat[] GetImageFormat() {
            object[] results = this.Invoke("GetImageFormat", new object[0]);
            return ((ImageFormat[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImageFormat(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImageFormat", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ImageFormat[] EndGetImageFormat(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ImageFormat[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageFormatAsync() {
            this.GetImageFormatAsync(null);
        }
        
        /// <remarks/>
        public void GetImageFormatAsync(object userState) {
            if ((this.GetImageFormatOperationCompleted == null)) {
                this.GetImageFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageFormatOperationCompleted);
            }
            this.InvokeAsync("GetImageFormat", new object[0], this.GetImageFormatOperationCompleted, userState);
        }
        
        private void OnGetImageFormatOperationCompleted(object arg) {
            if ((this.GetImageFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageFormatCompleted(this, new GetImageFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetImageSizeArray", RequestElementName="GetImageSizeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetImageSizeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetImageSizeArrayResult")]
        public ImageSize[] GetImageSize() {
            object[] results = this.Invoke("GetImageSize", new object[0]);
            return ((ImageSize[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImageSize(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImageSize", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ImageSize[] EndGetImageSize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ImageSize[])(results[0]));
        }
        
        /// <remarks/>
        public void GetImageSizeAsync() {
            this.GetImageSizeAsync(null);
        }
        
        /// <remarks/>
        public void GetImageSizeAsync(object userState) {
            if ((this.GetImageSizeOperationCompleted == null)) {
                this.GetImageSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageSizeOperationCompleted);
            }
            this.InvokeAsync("GetImageSize", new object[0], this.GetImageSizeOperationCompleted, userState);
        }
        
        private void OnGetImageSizeOperationCompleted(object arg) {
            if ((this.GetImageSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageSizeCompleted(this, new GetImageSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetMediaRelationshipTypeArray", RequestElementName="GetMediaRelationshipTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetMediaRelationshipTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMediaRelationshipTypeArrayResult")]
        public MediaRelationshipType[] GetMediaRelationshipType() {
            object[] results = this.Invoke("GetMediaRelationshipType", new object[0]);
            return ((MediaRelationshipType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMediaRelationshipType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMediaRelationshipType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MediaRelationshipType[] EndGetMediaRelationshipType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MediaRelationshipType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaRelationshipTypeAsync() {
            this.GetMediaRelationshipTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetMediaRelationshipTypeAsync(object userState) {
            if ((this.GetMediaRelationshipTypeOperationCompleted == null)) {
                this.GetMediaRelationshipTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaRelationshipTypeOperationCompleted);
            }
            this.InvokeAsync("GetMediaRelationshipType", new object[0], this.GetMediaRelationshipTypeOperationCompleted, userState);
        }
        
        private void OnGetMediaRelationshipTypeOperationCompleted(object arg) {
            if ((this.GetMediaRelationshipTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaRelationshipTypeCompleted(this, new GetMediaRelationshipTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetPreviewMediaInstanceTypeArray", RequestElementName="GetPreviewMediaInstanceTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetPreviewMediaInstanceTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetPreviewMediaInstanceTypeArrayResult")]
        public PreviewMediaInstanceType[] GetPreviewMediaInstanceType() {
            object[] results = this.Invoke("GetPreviewMediaInstanceType", new object[0]);
            return ((PreviewMediaInstanceType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPreviewMediaInstanceType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPreviewMediaInstanceType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PreviewMediaInstanceType[] EndGetPreviewMediaInstanceType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PreviewMediaInstanceType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPreviewMediaInstanceTypeAsync() {
            this.GetPreviewMediaInstanceTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetPreviewMediaInstanceTypeAsync(object userState) {
            if ((this.GetPreviewMediaInstanceTypeOperationCompleted == null)) {
                this.GetPreviewMediaInstanceTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreviewMediaInstanceTypeOperationCompleted);
            }
            this.InvokeAsync("GetPreviewMediaInstanceType", new object[0], this.GetPreviewMediaInstanceTypeOperationCompleted, userState);
        }
        
        private void OnGetPreviewMediaInstanceTypeOperationCompleted(object arg) {
            if ((this.GetPreviewMediaInstanceTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreviewMediaInstanceTypeCompleted(this, new GetPreviewMediaInstanceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetRoleArray", RequestElementName="GetRoleArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetRoleArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetRoleArrayResult")]
        public Role[] GetRole() {
            object[] results = this.Invoke("GetRole", new object[0]);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRole(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRole", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Role[] EndGetRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Role[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleAsync() {
            this.GetRoleAsync(null);
        }
        
        /// <remarks/>
        public void GetRoleAsync(object userState) {
            if ((this.GetRoleOperationCompleted == null)) {
                this.GetRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleOperationCompleted);
            }
            this.InvokeAsync("GetRole", new object[0], this.GetRoleOperationCompleted, userState);
        }
        
        private void OnGetRoleOperationCompleted(object arg) {
            if ((this.GetRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCompleted(this, new GetRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetStoreArray", RequestElementName="GetStoreArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetStoreArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetStoreArrayResult")]
        public Store[] GetStore() {
            object[] results = this.Invoke("GetStore", new object[0]);
            return ((Store[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStore(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStore", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Store[] EndGetStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Store[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStoreAsync() {
            this.GetStoreAsync(null);
        }
        
        /// <remarks/>
        public void GetStoreAsync(object userState) {
            if ((this.GetStoreOperationCompleted == null)) {
                this.GetStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStoreOperationCompleted);
            }
            this.InvokeAsync("GetStore", new object[0], this.GetStoreOperationCompleted, userState);
        }
        
        private void OnGetStoreOperationCompleted(object arg) {
            if ((this.GetStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStoreCompleted(this, new GetStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetTaskStatusArray", RequestElementName="GetTaskStatusArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetTaskStatusArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetTaskStatusArrayResult")]
        public TaskStatus[] GetTaskStatus() {
            object[] results = this.Invoke("GetTaskStatus", new object[0]);
            return ((TaskStatus[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskStatus(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskStatus", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public TaskStatus[] EndGetTaskStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskStatusAsync() {
            this.GetTaskStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetTaskStatusAsync(object userState) {
            if ((this.GetTaskStatusOperationCompleted == null)) {
                this.GetTaskStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskStatusOperationCompleted);
            }
            this.InvokeAsync("GetTaskStatus", new object[0], this.GetTaskStatusOperationCompleted, userState);
        }
        
        private void OnGetTaskStatusOperationCompleted(object arg) {
            if ((this.GetTaskStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskStatusCompleted(this, new GetTaskStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetTasksByStatus", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] GetTasksByStatus(int statusId) {
            object[] results = this.Invoke("GetTasksByStatus", new object[] {
                        statusId});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTasksByStatus(int statusId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTasksByStatus", new object[] {
                        statusId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndGetTasksByStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksByStatusAsync(int statusId) {
            this.GetTasksByStatusAsync(statusId, null);
        }
        
        /// <remarks/>
        public void GetTasksByStatusAsync(int statusId, object userState) {
            if ((this.GetTasksByStatusOperationCompleted == null)) {
                this.GetTasksByStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksByStatusOperationCompleted);
            }
            this.InvokeAsync("GetTasksByStatus", new object[] {
                        statusId}, this.GetTasksByStatusOperationCompleted, userState);
        }
        
        private void OnGetTasksByStatusOperationCompleted(object arg) {
            if ((this.GetTasksByStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksByStatusCompleted(this, new GetTasksByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetTasks", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Task[] GetTasks() {
            object[] results = this.Invoke("GetTasks", new object[0]);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTasks(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTasks", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndGetTasks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksAsync() {
            this.GetTasksAsync(null);
        }
        
        /// <remarks/>
        public void GetTasksAsync(object userState) {
            if ((this.GetTasksOperationCompleted == null)) {
                this.GetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksOperationCompleted);
            }
            this.InvokeAsync("GetTasks", new object[0], this.GetTasksOperationCompleted, userState);
        }
        
        private void OnGetTasksOperationCompleted(object arg) {
            if ((this.GetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetAvailableTaskAsXML", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableTaskAsXML() {
            object[] results = this.Invoke("GetAvailableTaskAsXML", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableTaskAsXML(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableTaskAsXML", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAvailableTaskAsXML(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableTaskAsXMLAsync() {
            this.GetAvailableTaskAsXMLAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableTaskAsXMLAsync(object userState) {
            if ((this.GetAvailableTaskAsXMLOperationCompleted == null)) {
                this.GetAvailableTaskAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableTaskAsXMLOperationCompleted);
            }
            this.InvokeAsync("GetAvailableTaskAsXML", new object[0], this.GetAvailableTaskAsXMLOperationCompleted, userState);
        }
        
        private void OnGetAvailableTaskAsXMLOperationCompleted(object arg) {
            if ((this.GetAvailableTaskAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableTaskAsXMLCompleted(this, new GetAvailableTaskAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/PurgeTaskQueue", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurgeTaskQueue() {
            this.Invoke("PurgeTaskQueue", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPurgeTaskQueue(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PurgeTaskQueue", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPurgeTaskQueue(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PurgeTaskQueueAsync() {
            this.PurgeTaskQueueAsync(null);
        }
        
        /// <remarks/>
        public void PurgeTaskQueueAsync(object userState) {
            if ((this.PurgeTaskQueueOperationCompleted == null)) {
                this.PurgeTaskQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeTaskQueueOperationCompleted);
            }
            this.InvokeAsync("PurgeTaskQueue", new object[0], this.PurgeTaskQueueOperationCompleted, userState);
        }
        
        private void OnPurgeTaskQueueOperationCompleted(object arg) {
            if ((this.PurgeTaskQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeTaskQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveTaskByObject", RequestElementName="SaveTaskByObject", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="SaveTaskByObjectResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveTask(Task taskQueue) {
            this.Invoke("SaveTask", new object[] {
                        taskQueue});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveTask(Task taskQueue, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveTask", new object[] {
                        taskQueue}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveTask(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveTaskAsync(Task taskQueue) {
            this.SaveTaskAsync(taskQueue, null);
        }
        
        /// <remarks/>
        public void SaveTaskAsync(Task taskQueue, object userState) {
            if ((this.SaveTaskOperationCompleted == null)) {
                this.SaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTaskOperationCompleted);
            }
            this.InvokeAsync("SaveTask", new object[] {
                        taskQueue}, this.SaveTaskOperationCompleted, userState);
        }
        
        private void OnSaveTaskOperationCompleted(object arg) {
            if ((this.SaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveDRMTaskByObject", RequestElementName="SaveDRMTaskByObject", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="SaveDRMTaskByObjectResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveDRMTask(DRMTask task) {
            this.Invoke("SaveDRMTask", new object[] {
                        task});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveDRMTask(DRMTask task, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveDRMTask", new object[] {
                        task}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveDRMTask(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveDRMTaskAsync(DRMTask task) {
            this.SaveDRMTaskAsync(task, null);
        }
        
        /// <remarks/>
        public void SaveDRMTaskAsync(DRMTask task, object userState) {
            if ((this.SaveDRMTaskOperationCompleted == null)) {
                this.SaveDRMTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDRMTaskOperationCompleted);
            }
            this.InvokeAsync("SaveDRMTask", new object[] {
                        task}, this.SaveDRMTaskOperationCompleted, userState);
        }
        
        private void OnSaveDRMTaskOperationCompleted(object arg) {
            if ((this.SaveDRMTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDRMTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="SaveTask1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveTaskByString", RequestElementName="SaveTaskByString", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="SaveTaskByStringResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveTask(string taskQueueXML) {
            this.Invoke("SaveTask1", new object[] {
                        taskQueueXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveTask1(string taskQueueXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveTask1", new object[] {
                        taskQueueXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveTask1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveTask1Async(string taskQueueXML) {
            this.SaveTask1Async(taskQueueXML, null);
        }
        
        /// <remarks/>
        public void SaveTask1Async(string taskQueueXML, object userState) {
            if ((this.SaveTask1OperationCompleted == null)) {
                this.SaveTask1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTask1OperationCompleted);
            }
            this.InvokeAsync("SaveTask1", new object[] {
                        taskQueueXML}, this.SaveTask1OperationCompleted, userState);
        }
        
        private void OnSaveTask1OperationCompleted(object arg) {
            if ((this.SaveTask1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTask1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetUserTypeArray", RequestElementName="GetUserTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetUserTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetUserTypeArrayResult")]
        public UserType[] GetUserType() {
            object[] results = this.Invoke("GetUserType", new object[0]);
            return ((UserType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public UserType[] EndGetUserType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTypeAsync() {
            this.GetUserTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetUserTypeAsync(object userState) {
            if ((this.GetUserTypeOperationCompleted == null)) {
                this.GetUserTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTypeOperationCompleted);
            }
            this.InvokeAsync("GetUserType", new object[0], this.GetUserTypeOperationCompleted, userState);
        }
        
        private void OnGetUserTypeOperationCompleted(object arg) {
            if ((this.GetUserTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTypeCompleted(this, new GetUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVideoDefinitionArray", RequestElementName="GetVideoDefinitionArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetVideoDefinitionArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetVideoDefinitionArrayResult")]
        public VideoDefinition[] GetVideoDefinition() {
            object[] results = this.Invoke("GetVideoDefinition", new object[0]);
            return ((VideoDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVideoDefinition(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVideoDefinition", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public VideoDefinition[] EndGetVideoDefinition(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VideoDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoDefinitionAsync() {
            this.GetVideoDefinitionAsync(null);
        }
        
        /// <remarks/>
        public void GetVideoDefinitionAsync(object userState) {
            if ((this.GetVideoDefinitionOperationCompleted == null)) {
                this.GetVideoDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoDefinitionOperationCompleted);
            }
            this.InvokeAsync("GetVideoDefinition", new object[0], this.GetVideoDefinitionOperationCompleted, userState);
        }
        
        private void OnGetVideoDefinitionOperationCompleted(object arg) {
            if ((this.GetVideoDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoDefinitionCompleted(this, new GetVideoDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVideoEncodingArray", RequestElementName="GetVideoEncodingArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetVideoEncodingArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetVideoEncodingArrayResult")]
        public VideoEncoding[] GetVideoEncoding() {
            object[] results = this.Invoke("GetVideoEncoding", new object[0]);
            return ((VideoEncoding[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVideoEncoding(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVideoEncoding", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public VideoEncoding[] EndGetVideoEncoding(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VideoEncoding[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoEncodingAsync() {
            this.GetVideoEncodingAsync(null);
        }
        
        /// <remarks/>
        public void GetVideoEncodingAsync(object userState) {
            if ((this.GetVideoEncodingOperationCompleted == null)) {
                this.GetVideoEncodingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoEncodingOperationCompleted);
            }
            this.InvokeAsync("GetVideoEncoding", new object[0], this.GetVideoEncodingOperationCompleted, userState);
        }
        
        private void OnGetVideoEncodingOperationCompleted(object arg) {
            if ((this.GetVideoEncodingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoEncodingCompleted(this, new GetVideoEncodingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVisibilityLevelArray", RequestElementName="GetVisibilityLevelArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetVisibilityLevelArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetVisibilityLevelArrayResult")]
        public VisibilityLevel[] GetVisibilityLevel() {
            object[] results = this.Invoke("GetVisibilityLevel", new object[0]);
            return ((VisibilityLevel[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVisibilityLevel(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVisibilityLevel", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public VisibilityLevel[] EndGetVisibilityLevel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VisibilityLevel[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVisibilityLevelAsync() {
            this.GetVisibilityLevelAsync(null);
        }
        
        /// <remarks/>
        public void GetVisibilityLevelAsync(object userState) {
            if ((this.GetVisibilityLevelOperationCompleted == null)) {
                this.GetVisibilityLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVisibilityLevelOperationCompleted);
            }
            this.InvokeAsync("GetVisibilityLevel", new object[0], this.GetVisibilityLevelOperationCompleted, userState);
        }
        
        private void OnGetVisibilityLevelOperationCompleted(object arg) {
            if ((this.GetVisibilityLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVisibilityLevelCompleted(this, new GetVisibilityLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetVisibilityStatusArray", RequestElementName="GetVisibilityStatusArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetVisibilityStatusArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetVisibilityStatusArrayResult")]
        public VisibilityStatus[] GetVisibilityStatus() {
            object[] results = this.Invoke("GetVisibilityStatus", new object[0]);
            return ((VisibilityStatus[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVisibilityStatus(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVisibilityStatus", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public VisibilityStatus[] EndGetVisibilityStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VisibilityStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVisibilityStatusAsync() {
            this.GetVisibilityStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetVisibilityStatusAsync(object userState) {
            if ((this.GetVisibilityStatusOperationCompleted == null)) {
                this.GetVisibilityStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVisibilityStatusOperationCompleted);
            }
            this.InvokeAsync("GetVisibilityStatus", new object[0], this.GetVisibilityStatusOperationCompleted, userState);
        }
        
        private void OnGetVisibilityStatusOperationCompleted(object arg) {
            if ((this.GetVisibilityStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVisibilityStatusCompleted(this, new GetVisibilityStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetProviderOne", RequestElementName="GetProviderOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetProviderOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetProviderOneResult")]
        public Provider GetProvider(int id) {
            object[] results = this.Invoke("GetProvider", new object[] {
                        id});
            return ((Provider)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProvider(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProvider", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public Provider EndGetProvider(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Provider)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderAsync(int id) {
            this.GetProviderAsync(id, null);
        }
        
        /// <remarks/>
        public void GetProviderAsync(int id, object userState) {
            if ((this.GetProviderOperationCompleted == null)) {
                this.GetProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderOperationCompleted);
            }
            this.InvokeAsync("GetProvider", new object[] {
                        id}, this.GetProviderOperationCompleted, userState);
        }
        
        private void OnGetProviderOperationCompleted(object arg) {
            if ((this.GetProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderCompleted(this, new GetProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetProvider1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetProviderArray", RequestElementName="GetProviderArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetProviderArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetProviderArrayResult")]
        public Provider[] GetProvider() {
            object[] results = this.Invoke("GetProvider1", new object[0]);
            return ((Provider[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProvider1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProvider1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Provider[] EndGetProvider1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Provider[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProvider1Async() {
            this.GetProvider1Async(null);
        }
        
        /// <remarks/>
        public void GetProvider1Async(object userState) {
            if ((this.GetProvider1OperationCompleted == null)) {
                this.GetProvider1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvider1OperationCompleted);
            }
            this.InvokeAsync("GetProvider1", new object[0], this.GetProvider1OperationCompleted, userState);
        }
        
        private void OnGetProvider1OperationCompleted(object arg) {
            if ((this.GetProvider1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvider1Completed(this, new GetProvider1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetMetadataProviderOne", RequestElementName="GetMetadataProviderOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetMetadataProviderOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetMetadataProviderOneResult")]
        public MetadataProvider GetMetadataProvider(int id) {
            object[] results = this.Invoke("GetMetadataProvider", new object[] {
                        id});
            return ((MetadataProvider)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMetadataProvider(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMetadataProvider", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public MetadataProvider EndGetMetadataProvider(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MetadataProvider)(results[0]));
        }
        
        /// <remarks/>
        public void GetMetadataProviderAsync(int id) {
            this.GetMetadataProviderAsync(id, null);
        }
        
        /// <remarks/>
        public void GetMetadataProviderAsync(int id, object userState) {
            if ((this.GetMetadataProviderOperationCompleted == null)) {
                this.GetMetadataProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetadataProviderOperationCompleted);
            }
            this.InvokeAsync("GetMetadataProvider", new object[] {
                        id}, this.GetMetadataProviderOperationCompleted, userState);
        }
        
        private void OnGetMetadataProviderOperationCompleted(object arg) {
            if ((this.GetMetadataProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetadataProviderCompleted(this, new GetMetadataProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetMetadataProvider1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetMetadataProviderArray", RequestElementName="GetMetadataProviderArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetMetadataProviderArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMetadataProviderArrayResult")]
        public MetadataProvider[] GetMetadataProvider() {
            object[] results = this.Invoke("GetMetadataProvider1", new object[0]);
            return ((MetadataProvider[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMetadataProvider1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMetadataProvider1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MetadataProvider[] EndGetMetadataProvider1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MetadataProvider[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMetadataProvider1Async() {
            this.GetMetadataProvider1Async(null);
        }
        
        /// <remarks/>
        public void GetMetadataProvider1Async(object userState) {
            if ((this.GetMetadataProvider1OperationCompleted == null)) {
                this.GetMetadataProvider1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMetadataProvider1OperationCompleted);
            }
            this.InvokeAsync("GetMetadataProvider1", new object[0], this.GetMetadataProvider1OperationCompleted, userState);
        }
        
        private void OnGetMetadataProvider1OperationCompleted(object arg) {
            if ((this.GetMetadataProvider1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMetadataProvider1Completed(this, new GetMetadataProvider1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetDRMLicenseIssuerOne", RequestElementName="GetDRMLicenseIssuerOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetDRMLicenseIssuerOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDRMLicenseIssuerOneResult")]
        public DRMLicenseIssuer GetDRMLicenseIssuer(int id) {
            object[] results = this.Invoke("GetDRMLicenseIssuer", new object[] {
                        id});
            return ((DRMLicenseIssuer)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDRMLicenseIssuer(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDRMLicenseIssuer", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public DRMLicenseIssuer EndGetDRMLicenseIssuer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DRMLicenseIssuer)(results[0]));
        }
        
        /// <remarks/>
        public void GetDRMLicenseIssuerAsync(int id) {
            this.GetDRMLicenseIssuerAsync(id, null);
        }
        
        /// <remarks/>
        public void GetDRMLicenseIssuerAsync(int id, object userState) {
            if ((this.GetDRMLicenseIssuerOperationCompleted == null)) {
                this.GetDRMLicenseIssuerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDRMLicenseIssuerOperationCompleted);
            }
            this.InvokeAsync("GetDRMLicenseIssuer", new object[] {
                        id}, this.GetDRMLicenseIssuerOperationCompleted, userState);
        }
        
        private void OnGetDRMLicenseIssuerOperationCompleted(object arg) {
            if ((this.GetDRMLicenseIssuerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDRMLicenseIssuerCompleted(this, new GetDRMLicenseIssuerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetDRMLicenseIssuer1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetDRMLicenseIssuerArray", RequestElementName="GetDRMLicenseIssuerArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetDRMLicenseIssuerArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetDRMLicenseIssuerArrayResult")]
        public DRMLicenseIssuer[] GetDRMLicenseIssuer() {
            object[] results = this.Invoke("GetDRMLicenseIssuer1", new object[0]);
            return ((DRMLicenseIssuer[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDRMLicenseIssuer1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDRMLicenseIssuer1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public DRMLicenseIssuer[] EndGetDRMLicenseIssuer1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DRMLicenseIssuer[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDRMLicenseIssuer1Async() {
            this.GetDRMLicenseIssuer1Async(null);
        }
        
        /// <remarks/>
        public void GetDRMLicenseIssuer1Async(object userState) {
            if ((this.GetDRMLicenseIssuer1OperationCompleted == null)) {
                this.GetDRMLicenseIssuer1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDRMLicenseIssuer1OperationCompleted);
            }
            this.InvokeAsync("GetDRMLicenseIssuer1", new object[0], this.GetDRMLicenseIssuer1OperationCompleted, userState);
        }
        
        private void OnGetDRMLicenseIssuer1OperationCompleted(object arg) {
            if ((this.GetDRMLicenseIssuer1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDRMLicenseIssuer1Completed(this, new GetDRMLicenseIssuer1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetLicenseTypeOne", RequestElementName="GetLicenseTypeOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetLicenseTypeOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetLicenseTypeOneResult")]
        public LicenseType GetLicenseType(int id) {
            object[] results = this.Invoke("GetLicenseType", new object[] {
                        id});
            return ((LicenseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseType(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseType", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public LicenseType EndGetLicenseType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LicenseType)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseTypeAsync(int id) {
            this.GetLicenseTypeAsync(id, null);
        }
        
        /// <remarks/>
        public void GetLicenseTypeAsync(int id, object userState) {
            if ((this.GetLicenseTypeOperationCompleted == null)) {
                this.GetLicenseTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseTypeOperationCompleted);
            }
            this.InvokeAsync("GetLicenseType", new object[] {
                        id}, this.GetLicenseTypeOperationCompleted, userState);
        }
        
        private void OnGetLicenseTypeOperationCompleted(object arg) {
            if ((this.GetLicenseTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseTypeCompleted(this, new GetLicenseTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetLicenseType1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetLicenseTypeArray", RequestElementName="GetLicenseTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetLicenseTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetLicenseTypeArrayResult")]
        public LicenseType[] GetLicenseType() {
            object[] results = this.Invoke("GetLicenseType1", new object[0]);
            return ((LicenseType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseType1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseType1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public LicenseType[] EndGetLicenseType1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LicenseType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseType1Async() {
            this.GetLicenseType1Async(null);
        }
        
        /// <remarks/>
        public void GetLicenseType1Async(object userState) {
            if ((this.GetLicenseType1OperationCompleted == null)) {
                this.GetLicenseType1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseType1OperationCompleted);
            }
            this.InvokeAsync("GetLicenseType1", new object[0], this.GetLicenseType1OperationCompleted, userState);
        }
        
        private void OnGetLicenseType1OperationCompleted(object arg) {
            if ((this.GetLicenseType1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseType1Completed(this, new GetLicenseType1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveLicenseType", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveLicenseType(LicenseType licenseType) {
            this.Invoke("SaveLicenseType", new object[] {
                        licenseType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveLicenseType(LicenseType licenseType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveLicenseType", new object[] {
                        licenseType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveLicenseType(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveLicenseTypeAsync(LicenseType licenseType) {
            this.SaveLicenseTypeAsync(licenseType, null);
        }
        
        /// <remarks/>
        public void SaveLicenseTypeAsync(LicenseType licenseType, object userState) {
            if ((this.SaveLicenseTypeOperationCompleted == null)) {
                this.SaveLicenseTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLicenseTypeOperationCompleted);
            }
            this.InvokeAsync("SaveLicenseType", new object[] {
                        licenseType}, this.SaveLicenseTypeOperationCompleted, userState);
        }
        
        private void OnSaveLicenseTypeOperationCompleted(object arg) {
            if ((this.SaveLicenseTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveLicenseTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetLicenseClassOne", RequestElementName="GetLicenseClassOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetLicenseClassOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetLicenseClassOneResult")]
        public LicenseClass GetLicenseClass(int id) {
            object[] results = this.Invoke("GetLicenseClass", new object[] {
                        id});
            return ((LicenseClass)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseClass(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseClass", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public LicenseClass EndGetLicenseClass(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LicenseClass)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseClassAsync(int id) {
            this.GetLicenseClassAsync(id, null);
        }
        
        /// <remarks/>
        public void GetLicenseClassAsync(int id, object userState) {
            if ((this.GetLicenseClassOperationCompleted == null)) {
                this.GetLicenseClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseClassOperationCompleted);
            }
            this.InvokeAsync("GetLicenseClass", new object[] {
                        id}, this.GetLicenseClassOperationCompleted, userState);
        }
        
        private void OnGetLicenseClassOperationCompleted(object arg) {
            if ((this.GetLicenseClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseClassCompleted(this, new GetLicenseClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetLicenseClass1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetLicenseClassArray", RequestElementName="GetLicenseClassArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetLicenseClassArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetLicenseClassArrayResult")]
        public LicenseClass[] GetLicenseClass() {
            object[] results = this.Invoke("GetLicenseClass1", new object[0]);
            return ((LicenseClass[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLicenseClass1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLicenseClass1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public LicenseClass[] EndGetLicenseClass1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LicenseClass[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseClass1Async() {
            this.GetLicenseClass1Async(null);
        }
        
        /// <remarks/>
        public void GetLicenseClass1Async(object userState) {
            if ((this.GetLicenseClass1OperationCompleted == null)) {
                this.GetLicenseClass1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseClass1OperationCompleted);
            }
            this.InvokeAsync("GetLicenseClass1", new object[0], this.GetLicenseClass1OperationCompleted, userState);
        }
        
        private void OnGetLicenseClass1OperationCompleted(object arg) {
            if ((this.GetLicenseClass1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseClass1Completed(this, new GetLicenseClass1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetPricingRuleOne", RequestElementName="GetPricingRuleOne", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetPricingRuleOneResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetPricingRuleOneResult")]
        public PricingRule GetPricingRule(int id) {
            object[] results = this.Invoke("GetPricingRule", new object[] {
                        id});
            return ((PricingRule)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPricingRule(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPricingRule", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public PricingRule EndGetPricingRule(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PricingRule)(results[0]));
        }
        
        /// <remarks/>
        public void GetPricingRuleAsync(int id) {
            this.GetPricingRuleAsync(id, null);
        }
        
        /// <remarks/>
        public void GetPricingRuleAsync(int id, object userState) {
            if ((this.GetPricingRuleOperationCompleted == null)) {
                this.GetPricingRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPricingRuleOperationCompleted);
            }
            this.InvokeAsync("GetPricingRule", new object[] {
                        id}, this.GetPricingRuleOperationCompleted, userState);
        }
        
        private void OnGetPricingRuleOperationCompleted(object arg) {
            if ((this.GetPricingRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPricingRuleCompleted(this, new GetPricingRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetPricingRule1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetPricingRuleArray", RequestElementName="GetPricingRuleArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetPricingRuleArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetPricingRuleArrayResult")]
        public PricingRule[] GetPricingRule() {
            object[] results = this.Invoke("GetPricingRule1", new object[0]);
            return ((PricingRule[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPricingRule1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPricingRule1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PricingRule[] EndGetPricingRule1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PricingRule[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPricingRule1Async() {
            this.GetPricingRule1Async(null);
        }
        
        /// <remarks/>
        public void GetPricingRule1Async(object userState) {
            if ((this.GetPricingRule1OperationCompleted == null)) {
                this.GetPricingRule1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPricingRule1OperationCompleted);
            }
            this.InvokeAsync("GetPricingRule1", new object[0], this.GetPricingRule1OperationCompleted, userState);
        }
        
        private void OnGetPricingRule1OperationCompleted(object arg) {
            if ((this.GetPricingRule1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPricingRule1Completed(this, new GetPricingRule1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SavePricingRule", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SavePricingRule(PricingRule pricingRule) {
            this.Invoke("SavePricingRule", new object[] {
                        pricingRule});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSavePricingRule(PricingRule pricingRule, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SavePricingRule", new object[] {
                        pricingRule}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSavePricingRule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SavePricingRuleAsync(PricingRule pricingRule) {
            this.SavePricingRuleAsync(pricingRule, null);
        }
        
        /// <remarks/>
        public void SavePricingRuleAsync(PricingRule pricingRule, object userState) {
            if ((this.SavePricingRuleOperationCompleted == null)) {
                this.SavePricingRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePricingRuleOperationCompleted);
            }
            this.InvokeAsync("SavePricingRule", new object[] {
                        pricingRule}, this.SavePricingRuleOperationCompleted, userState);
        }
        
        private void OnSavePricingRuleOperationCompleted(object arg) {
            if ((this.SavePricingRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePricingRuleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetMediaTypeArray", RequestElementName="GetMediaTypeArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="GetMediaTypeArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("GetMediaTypeArrayResult")]
        public MediaType[] GetMediaType() {
            object[] results = this.Invoke("GetMediaType", new object[0]);
            return ((MediaType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMediaType(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMediaType", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MediaType[] EndGetMediaType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MediaType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaTypeAsync() {
            this.GetMediaTypeAsync(null);
        }
        
        /// <remarks/>
        public void GetMediaTypeAsync(object userState) {
            if ((this.GetMediaTypeOperationCompleted == null)) {
                this.GetMediaTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaTypeOperationCompleted);
            }
            this.InvokeAsync("GetMediaType", new object[0], this.GetMediaTypeOperationCompleted, userState);
        }
        
        private void OnGetMediaTypeOperationCompleted(object arg) {
            if ((this.GetMediaTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaTypeCompleted(this, new GetMediaTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveGame", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveGame(Game game) {
            this.Invoke("SaveGame", new object[] {
                        game});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveGame(Game game, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveGame", new object[] {
                        game}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveGame(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveGameAsync(Game game) {
            this.SaveGameAsync(game, null);
        }
        
        /// <remarks/>
        public void SaveGameAsync(Game game, object userState) {
            if ((this.SaveGameOperationCompleted == null)) {
                this.SaveGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveGameOperationCompleted);
            }
            this.InvokeAsync("SaveGame", new object[] {
                        game}, this.SaveGameOperationCompleted, userState);
        }
        
        private void OnSaveGameOperationCompleted(object arg) {
            if ((this.SaveGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveGameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetGame", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Game GetGame(System.Guid gameId) {
            object[] results = this.Invoke("GetGame", new object[] {
                        gameId});
            return ((Game)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGame(System.Guid gameId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGame", new object[] {
                        gameId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Game EndGetGame(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Game)(results[0]));
        }
        
        /// <remarks/>
        public void GetGameAsync(System.Guid gameId) {
            this.GetGameAsync(gameId, null);
        }
        
        /// <remarks/>
        public void GetGameAsync(System.Guid gameId, object userState) {
            if ((this.GetGameOperationCompleted == null)) {
                this.GetGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameOperationCompleted);
            }
            this.InvokeAsync("GetGame", new object[] {
                        gameId}, this.GetGameOperationCompleted, userState);
        }
        
        private void OnGetGameOperationCompleted(object arg) {
            if ((this.GetGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameCompleted(this, new GetGameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/SaveGameContent", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveGameContent(GameContent gameContent) {
            this.Invoke("SaveGameContent", new object[] {
                        gameContent});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveGameContent(GameContent gameContent, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveGameContent", new object[] {
                        gameContent}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveGameContent(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveGameContentAsync(GameContent gameContent) {
            this.SaveGameContentAsync(gameContent, null);
        }
        
        /// <remarks/>
        public void SaveGameContentAsync(GameContent gameContent, object userState) {
            if ((this.SaveGameContentOperationCompleted == null)) {
                this.SaveGameContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveGameContentOperationCompleted);
            }
            this.InvokeAsync("SaveGameContent", new object[] {
                        gameContent}, this.SaveGameContentOperationCompleted, userState);
        }
        
        private void OnSaveGameContentOperationCompleted(object arg) {
            if ((this.SaveGameContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveGameContentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/GetGameContent", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GameContent GetGameContent(System.Guid gameContentId) {
            object[] results = this.Invoke("GetGameContent", new object[] {
                        gameContentId});
            return ((GameContent)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGameContent(System.Guid gameContentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGameContent", new object[] {
                        gameContentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GameContent EndGetGameContent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GameContent)(results[0]));
        }
        
        /// <remarks/>
        public void GetGameContentAsync(System.Guid gameContentId) {
            this.GetGameContentAsync(gameContentId, null);
        }
        
        /// <remarks/>
        public void GetGameContentAsync(System.Guid gameContentId, object userState) {
            if ((this.GetGameContentOperationCompleted == null)) {
                this.GetGameContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGameContentOperationCompleted);
            }
            this.InvokeAsync("GetGameContent", new object[] {
                        gameContentId}, this.GetGameContentOperationCompleted, userState);
        }
        
        private void OnGetGameContentOperationCompleted(object arg) {
            if ((this.GetGameContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGameContentCompleted(this, new GetGameContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/PaymentMethod", RequestElementName="PaymentMethod", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="PaymentMethodResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("PaymentMethodResult")]
        public PaymentType GetPaymentMethod(int paymentId) {
            object[] results = this.Invoke("GetPaymentMethod", new object[] {
                        paymentId});
            return ((PaymentType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPaymentMethod(int paymentId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPaymentMethod", new object[] {
                        paymentId}, callback, asyncState);
        }
        
        /// <remarks/>
        public PaymentType EndGetPaymentMethod(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PaymentType)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentMethodAsync(int paymentId) {
            this.GetPaymentMethodAsync(paymentId, null);
        }
        
        /// <remarks/>
        public void GetPaymentMethodAsync(int paymentId, object userState) {
            if ((this.GetPaymentMethodOperationCompleted == null)) {
                this.GetPaymentMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentMethodOperationCompleted);
            }
            this.InvokeAsync("GetPaymentMethod", new object[] {
                        paymentId}, this.GetPaymentMethodOperationCompleted, userState);
        }
        
        private void OnGetPaymentMethodOperationCompleted(object arg) {
            if ((this.GetPaymentMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentMethodCompleted(this, new GetPaymentMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetPaymentMethod1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/ems/CatalogWebService/PaymentMethodArray", RequestElementName="PaymentMethodArray", RequestNamespace="http://www.microsoft.com/ems/CatalogWebService/", ResponseElementName="PaymentMethodArrayResponse", ResponseNamespace="http://www.microsoft.com/ems/CatalogWebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("PaymentMethodArrayResult")]
        public PaymentType[] GetPaymentMethod() {
            object[] results = this.Invoke("GetPaymentMethod1", new object[0]);
            return ((PaymentType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPaymentMethod1(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPaymentMethod1", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PaymentType[] EndGetPaymentMethod1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PaymentType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentMethod1Async() {
            this.GetPaymentMethod1Async(null);
        }
        
        /// <remarks/>
        public void GetPaymentMethod1Async(object userState) {
            if ((this.GetPaymentMethod1OperationCompleted == null)) {
                this.GetPaymentMethod1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentMethod1OperationCompleted);
            }
            this.InvokeAsync("GetPaymentMethod1", new object[0], this.GetPaymentMethod1OperationCompleted, userState);
        }
        
        private void OnGetPaymentMethod1OperationCompleted(object arg) {
            if ((this.GetPaymentMethod1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentMethod1Completed(this, new GetPaymentMethod1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PublishingSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PodcastSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaskSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMTaskSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameOfferSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameTitleSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamePublisherSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImageSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContributorRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OfferSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeasonSearchRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeriesSearchRequest))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public abstract partial class Request {
        
        private int maxResultsField;
        
        /// <remarks/>
        public int MaxResults {
            get {
                return this.maxResultsField;
            }
            set {
                this.maxResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PaymentType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaType {
        
        private int idField;
        
        private string nameField;
        
        private string mediaClassField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string MediaClass {
            get {
                return this.mediaClassField;
            }
            set {
                this.mediaClassField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PricingRuleInstance {
        
        private int idField;
        
        private int pricingRuleIdField;
        
        private decimal priceWholesaleFromField;
        
        private decimal priceWholesaleToField;
        
        private int pointsRetailField;
        
        private decimal priceRetailField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int PricingRuleId {
            get {
                return this.pricingRuleIdField;
            }
            set {
                this.pricingRuleIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal PriceWholesaleFrom {
            get {
                return this.priceWholesaleFromField;
            }
            set {
                this.priceWholesaleFromField = value;
            }
        }
        
        /// <remarks/>
        public decimal PriceWholesaleTo {
            get {
                return this.priceWholesaleToField;
            }
            set {
                this.priceWholesaleToField = value;
            }
        }
        
        /// <remarks/>
        public int PointsRetail {
            get {
                return this.pointsRetailField;
            }
            set {
                this.pointsRetailField = value;
            }
        }
        
        /// <remarks/>
        public decimal PriceRetail {
            get {
                return this.priceRetailField;
            }
            set {
                this.priceRetailField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public enum DataChangeType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Add,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Delete,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PricingRule {
        
        private int primaryIdField;
        
        private string nameField;
        
        private System.DateTime startDateTimeField;
        
        private int providerIdField;
        
        private string countryCodeField;
        
        private string retailCurrencyCodeField;
        
        private string wholesaleCurrencyCodeField;
        
        private int mediaTypeIdField;
        
        private decimal marginField;
        
        private decimal rateField;
        
        private PricingRuleInstance[] pricingRuleInstancesField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int PrimaryId {
            get {
                return this.primaryIdField;
            }
            set {
                this.primaryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string RetailCurrencyCode {
            get {
                return this.retailCurrencyCodeField;
            }
            set {
                this.retailCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string WholesaleCurrencyCode {
            get {
                return this.wholesaleCurrencyCodeField;
            }
            set {
                this.wholesaleCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public int MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal Margin {
            get {
                return this.marginField;
            }
            set {
                this.marginField = value;
            }
        }
        
        /// <remarks/>
        public decimal Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
        
        /// <remarks/>
        public PricingRuleInstance[] PricingRuleInstances {
            get {
                return this.pricingRuleInstancesField;
            }
            set {
                this.pricingRuleInstancesField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class LicenseClass {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class LicenseTypeLegalTextLocale {
        
        private int licenseTypeIdField;
        
        private int legaltextlcidField;
        
        private string textField;
        
        private string localeField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int LicenseTypeId {
            get {
                return this.licenseTypeIdField;
            }
            set {
                this.licenseTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int Legaltextlcid {
            get {
                return this.legaltextlcidField;
            }
            set {
                this.legaltextlcidField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class LicenseType {
        
        private LicenseTypeLegalTextLocale[] legalTextLocalesField;
        
        private int idField;
        
        private string nameField;
        
        private int licenseClassIdField;
        
        private string licenseXMLField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public LicenseTypeLegalTextLocale[] LegalTextLocales {
            get {
                return this.legalTextLocalesField;
            }
            set {
                this.legalTextLocalesField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseClassId {
            get {
                return this.licenseClassIdField;
            }
            set {
                this.licenseClassIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LicenseXML {
            get {
                return this.licenseXMLField;
            }
            set {
                this.licenseXMLField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VisibilityStatus {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VisibilityLevel {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoDefinition {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class UserType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMTask))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Task {
        
        private int taskStatusIdField;
        
        private string taskStatusNameField;
        
        private string taskDataField;
        
        private System.Guid taskInstanceIdField;
        
        private string fileNameField;
        
        private string inputFileLocationField;
        
        private string outputFileLocationField;
        
        private System.Nullable<System.DateTime> endDateField;
        
        private System.DateTime startDateField;
        
        private DataChangeType modifiedField;
        
        private string stagerFileLocationField;
        
        private string asperaFileLocationField;
        
        private string statusMessageField;
        
        /// <remarks/>
        public int TaskStatusId {
            get {
                return this.taskStatusIdField;
            }
            set {
                this.taskStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public string TaskStatusName {
            get {
                return this.taskStatusNameField;
            }
            set {
                this.taskStatusNameField = value;
            }
        }
        
        /// <remarks/>
        public string TaskData {
            get {
                return this.taskDataField;
            }
            set {
                this.taskDataField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid TaskInstanceId {
            get {
                return this.taskInstanceIdField;
            }
            set {
                this.taskInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InputFileLocation {
            get {
                return this.inputFileLocationField;
            }
            set {
                this.inputFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string OutputFileLocation {
            get {
                return this.outputFileLocationField;
            }
            set {
                this.outputFileLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public string StagerFileLocation {
            get {
                return this.stagerFileLocationField;
            }
            set {
                this.stagerFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string AsperaFileLocation {
            get {
                return this.asperaFileLocationField;
            }
            set {
                this.asperaFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class DRMTask : Task {
        
        private System.Guid mediaInstanceIdField;
        
        private bool isDRMRequiredField;
        
        /// <remarks/>
        public System.Guid MediaInstanceId {
            get {
                return this.mediaInstanceIdField;
            }
            set {
                this.mediaInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDRMRequired {
            get {
                return this.isDRMRequiredField;
            }
            set {
                this.isDRMRequiredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class TaskStatus {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Store {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Role {
        
        private int idField;
        
        private string nameField;
        
        private int sortOrderField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PreviewMediaInstanceType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaRelationshipType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ImageSize {
        
        private int idField;
        
        private string nameField;
        
        private int widthField;
        
        private int heightField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ImageFormat {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Locale {
        
        private int lCIDField;
        
        private string localeCodeField;
        
        private int defaultLCIDField;
        
        private string countryCodeField;
        
        private string collationField;
        
        private string internalNameField;
        
        /// <remarks/>
        public int LCID {
            get {
                return this.lCIDField;
            }
            set {
                this.lCIDField = value;
            }
        }
        
        /// <remarks/>
        public string LocaleCode {
            get {
                return this.localeCodeField;
            }
            set {
                this.localeCodeField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultLCID {
            get {
                return this.defaultLCIDField;
            }
            set {
                this.defaultLCIDField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Collation {
            get {
                return this.collationField;
            }
            set {
                this.collationField = value;
            }
        }
        
        /// <remarks/>
        public string InternalName {
            get {
                return this.internalNameField;
            }
            set {
                this.internalNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ClientType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class AudioEncoding {
        
        private int idField;
        
        private string nameField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoEncoding {
        
        private int idField;
        
        private string nameField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorRelationship {
        
        private System.Guid relatedContributorIdField;
        
        private int contributorRelationshipTypeIdField;
        
        private int roleIdField;
        
        private bool isPrimaryField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid RelatedContributorId {
            get {
                return this.relatedContributorIdField;
            }
            set {
                this.relatedContributorIdField = value;
            }
        }
        
        /// <remarks/>
        public int ContributorRelationshipTypeId {
            get {
                return this.contributorRelationshipTypeIdField;
            }
            set {
                this.contributorRelationshipTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrimary {
            get {
                return this.isPrimaryField;
            }
            set {
                this.isPrimaryField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorLocaleMap {
        
        private int lcidField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorLocale {
        
        private int lcidField;
        
        private string displayNameField;
        
        private ContributorLocaleMap[] targetingLocalesField;
        
        private DataChangeType modifiedField;
        
        private string sortNameField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public ContributorLocaleMap[] TargetingLocales {
            get {
                return this.targetingLocalesField;
            }
            set {
                this.targetingLocalesField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public string SortName {
            get {
                return this.sortNameField;
            }
            set {
                this.sortNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorCategory {
        
        private int categoryIdField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int CategoryId {
            get {
                return this.categoryIdField;
            }
            set {
                this.categoryIdField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorAlias {
        
        private System.Guid idField;
        
        private string aliasField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorArticle {
        
        private System.Guid articleIdField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid ArticleId {
            get {
                return this.articleIdField;
            }
            set {
                this.articleIdField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Contributor {
        
        private System.Guid idField;
        
        private int metadataProviderIdField;
        
        private System.DateTime birthDateField;
        
        private string displayBirthDateField;
        
        private string birthPlaceField;
        
        private System.DateTime deathDateField;
        
        private string displayDeathDateField;
        
        private string deathPlaceField;
        
        private bool isGroupField;
        
        private ContributorArticle[] articlesField;
        
        private ContributorAlias[] aliasesField;
        
        private ContributorCategory[] categoriesField;
        
        private ContributorLocale[] localesField;
        
        private ContributorRelationship[] relationshipsField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MetadataProviderId {
            get {
                return this.metadataProviderIdField;
            }
            set {
                this.metadataProviderIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BirthDate {
            get {
                return this.birthDateField;
            }
            set {
                this.birthDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayBirthDate {
            get {
                return this.displayBirthDateField;
            }
            set {
                this.displayBirthDateField = value;
            }
        }
        
        /// <remarks/>
        public string BirthPlace {
            get {
                return this.birthPlaceField;
            }
            set {
                this.birthPlaceField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DeathDate {
            get {
                return this.deathDateField;
            }
            set {
                this.deathDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayDeathDate {
            get {
                return this.displayDeathDateField;
            }
            set {
                this.displayDeathDateField = value;
            }
        }
        
        /// <remarks/>
        public string DeathPlace {
            get {
                return this.deathPlaceField;
            }
            set {
                this.deathPlaceField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGroup {
            get {
                return this.isGroupField;
            }
            set {
                this.isGroupField = value;
            }
        }
        
        /// <remarks/>
        public ContributorArticle[] Articles {
            get {
                return this.articlesField;
            }
            set {
                this.articlesField = value;
            }
        }
        
        /// <remarks/>
        public ContributorAlias[] Aliases {
            get {
                return this.aliasesField;
            }
            set {
                this.aliasesField = value;
            }
        }
        
        /// <remarks/>
        public ContributorCategory[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public ContributorLocale[] Locales {
            get {
                return this.localesField;
            }
            set {
                this.localesField = value;
            }
        }
        
        /// <remarks/>
        public ContributorRelationship[] Relationships {
            get {
                return this.relationshipsField;
            }
            set {
                this.relationshipsField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Article {
        
        private System.Guid idField;
        
        private int lcidField;
        
        private int providerIdField;
        
        private string textField;
        
        private string authorField;
        
        private System.DateTime authoredDateField;
        
        private bool isHiddenField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AuthoredDate {
            get {
                return this.authoredDateField;
            }
            set {
                this.authoredDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHidden {
            get {
                return this.isHiddenField;
            }
            set {
                this.isHiddenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class RatingDescriptor {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private int ratingSystemIdField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int RatingSystemId {
            get {
                return this.ratingSystemIdField;
            }
            set {
                this.ratingSystemIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class RatingValue {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private int ratingSystemIdField;
        
        private System.Guid imageMediaIdField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int RatingSystemId {
            get {
                return this.ratingSystemIdField;
            }
            set {
                this.ratingSystemIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ImageMediaId {
            get {
                return this.imageMediaIdField;
            }
            set {
                this.imageMediaIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class RatingSystem {
        
        private int idField;
        
        private string nameField;
        
        private string[] countriesField;
        
        private RatingValue[] valuesField;
        
        private RatingDescriptor[] descriptorsField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string[] Countries {
            get {
                return this.countriesField;
            }
            set {
                this.countriesField = value;
            }
        }
        
        /// <remarks/>
        public RatingValue[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
        
        /// <remarks/>
        public RatingDescriptor[] Descriptors {
            get {
                return this.descriptorsField;
            }
            set {
                this.descriptorsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class CategoryLocaleMap {
        
        private int fromLcidField;
        
        private int toLcidField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int FromLcid {
            get {
                return this.fromLcidField;
            }
            set {
                this.fromLcidField = value;
            }
        }
        
        /// <remarks/>
        public int ToLcid {
            get {
                return this.toLcidField;
            }
            set {
                this.toLcidField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class UriBuilder {
        
        private string fragmentField;
        
        private string hostField;
        
        private string passwordField;
        
        private string pathField;
        
        private int portField;
        
        private string queryField;
        
        private string schemeField;
        
        private string userNameField;
        
        /// <remarks/>
        public string Fragment {
            get {
                return this.fragmentField;
            }
            set {
                this.fragmentField = value;
            }
        }
        
        /// <remarks/>
        public string Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public string Query {
            get {
                return this.queryField;
            }
            set {
                this.queryField = value;
            }
        }
        
        /// <remarks/>
        public string Scheme {
            get {
                return this.schemeField;
            }
            set {
                this.schemeField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoryCorporationLocale))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class CategoryLocale {
        
        private int categoryIdField;
        
        private int lcidField;
        
        private string nameField;
        
        private int[] lcidMapsField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int CategoryId {
            get {
                return this.categoryIdField;
            }
            set {
                this.categoryIdField = value;
            }
        }
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int[] LcidMaps {
            get {
                return this.lcidMapsField;
            }
            set {
                this.lcidMapsField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class CategoryCorporationLocale : CategoryLocale {
        
        private string descriptionField;
        
        private string htmlDescriptionField;
        
        private UriBuilder webSiteField;
        
        private string rssFeaturesField;
        
        private string rssAnnouncementField;
        
        private string rssNewsField;
        
        private System.Guid logoImageIdField;
        
        private System.Guid backgroundImageIdField;
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string HtmlDescription {
            get {
                return this.htmlDescriptionField;
            }
            set {
                this.htmlDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public UriBuilder WebSite {
            get {
                return this.webSiteField;
            }
            set {
                this.webSiteField = value;
            }
        }
        
        /// <remarks/>
        public string RssFeatures {
            get {
                return this.rssFeaturesField;
            }
            set {
                this.rssFeaturesField = value;
            }
        }
        
        /// <remarks/>
        public string RssAnnouncement {
            get {
                return this.rssAnnouncementField;
            }
            set {
                this.rssAnnouncementField = value;
            }
        }
        
        /// <remarks/>
        public string RssNews {
            get {
                return this.rssNewsField;
            }
            set {
                this.rssNewsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid LogoImageId {
            get {
                return this.logoImageIdField;
            }
            set {
                this.logoImageIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid BackgroundImageId {
            get {
                return this.backgroundImageIdField;
            }
            set {
                this.backgroundImageIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Category {
        
        private int idField;
        
        private int categorySystemIdField;
        
        private System.Nullable<int> parentCategoryIdField;
        
        private Category[] categoriesField;
        
        private CategoryLocale[] localesField;
        
        private CategoryLocaleMap[] categoryLocaleMapField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int CategorySystemId {
            get {
                return this.categorySystemIdField;
            }
            set {
                this.categorySystemIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ParentCategoryId {
            get {
                return this.parentCategoryIdField;
            }
            set {
                this.parentCategoryIdField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public CategoryLocale[] Locales {
            get {
                return this.localesField;
            }
            set {
                this.localesField = value;
            }
        }
        
        /// <remarks/>
        public CategoryLocaleMap[] CategoryLocaleMap {
            get {
                return this.categoryLocaleMapField;
            }
            set {
                this.categoryLocaleMapField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class CategorySystem {
        
        private int idField;
        
        private string nameField;
        
        private bool isCorporationField;
        
        private Category[] categoriesField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCorporation {
            get {
                return this.isCorporationField;
            }
            set {
                this.isCorporationField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Currency {
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Country {
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorRelationshipType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaChild {
        
        private System.Guid mediaIdField;
        
        private string mediaTitleField;
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaOffer {
        
        private int mediaTypeIdField;
        
        private string mediaTypeNameField;
        
        private string mediaTitleField;
        
        private MediaChild[] mediaChildsField;
        
        private OfferInstanceMediaType[] mediaTypesField;
        
        /// <remarks/>
        public int MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTypeName {
            get {
                return this.mediaTypeNameField;
            }
            set {
                this.mediaTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public MediaChild[] MediaChilds {
            get {
                return this.mediaChildsField;
            }
            set {
                this.mediaChildsField = value;
            }
        }
        
        /// <remarks/>
        public OfferInstanceMediaType[] MediaTypes {
            get {
                return this.mediaTypesField;
            }
            set {
                this.mediaTypesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferInstanceMediaType {
        
        private string audioTrackLangField;
        
        private string subTitleLocaleField;
        
        private string videoDefNameField;
        
        private string idField;
        
        private string audioChannelField;
        
        private string previewCountryCodeField;
        
        private string videoAspectRatioField;
        
        private string videoResolutionField;
        
        private string nameField;
        
        private bool isAdSupportedField;
        
        private int videoDefinitionIdField;
        
        private string languageCodeField;
        
        private bool enabledField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public string AudioTrackLang {
            get {
                return this.audioTrackLangField;
            }
            set {
                this.audioTrackLangField = value;
            }
        }
        
        /// <remarks/>
        public string SubTitleLocale {
            get {
                return this.subTitleLocaleField;
            }
            set {
                this.subTitleLocaleField = value;
            }
        }
        
        /// <remarks/>
        public string VideoDefName {
            get {
                return this.videoDefNameField;
            }
            set {
                this.videoDefNameField = value;
            }
        }
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string AudioChannel {
            get {
                return this.audioChannelField;
            }
            set {
                this.audioChannelField = value;
            }
        }
        
        /// <remarks/>
        public string PreviewCountryCode {
            get {
                return this.previewCountryCodeField;
            }
            set {
                this.previewCountryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string VideoAspectRatio {
            get {
                return this.videoAspectRatioField;
            }
            set {
                this.videoAspectRatioField = value;
            }
        }
        
        /// <remarks/>
        public string VideoResolution {
            get {
                return this.videoResolutionField;
            }
            set {
                this.videoResolutionField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAdSupported {
            get {
                return this.isAdSupportedField;
            }
            set {
                this.isAdSupportedField = value;
            }
        }
        
        /// <remarks/>
        public int VideoDefinitionId {
            get {
                return this.videoDefinitionIdField;
            }
            set {
                this.videoDefinitionIdField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageCode {
            get {
                return this.languageCodeField;
            }
            set {
                this.languageCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Promotion {
        
        private System.Guid idField;
        
        private string nameField;
        
        private System.DateTime startDateTimeField;
        
        private System.DateTime endDateTimeField;
        
        private decimal priceField;
        
        private decimal reportingRetailValueField;
        
        private int priorityField;
        
        private System.Nullable<decimal> promotionalWholesalePriceField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDateTime {
            get {
                return this.endDateTimeField;
            }
            set {
                this.endDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public decimal Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
            }
        }
        
        /// <remarks/>
        public decimal ReportingRetailValue {
            get {
                return this.reportingRetailValueField;
            }
            set {
                this.reportingRetailValueField = value;
            }
        }
        
        /// <remarks/>
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> PromotionalWholesalePrice {
            get {
                return this.promotionalWholesalePriceField;
            }
            set {
                this.promotionalWholesalePriceField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ProviderTermGameContentInstanceAsset {
        
        private int assetIdField;
        
        private int quantityField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int AssetId {
            get {
                return this.assetIdField;
            }
            set {
                this.assetIdField = value;
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ProviderTermGameContentInstance {
        
        private int licenseExtensionBitsField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int LicenseExtensionBits {
            get {
                return this.licenseExtensionBitsField;
            }
            set {
                this.licenseExtensionBitsField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ProviderTermMediaInstanceClientType {
        
        private int clientTypeIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int ClientTypeId {
            get {
                return this.clientTypeIdField;
            }
            set {
                this.clientTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ProviderTermMediaInstance {
        
        private System.Guid mediaInstanceIdField;
        
        private int licenseTypeIdField;
        
        private System.Nullable<System.DateTime> expirationDateField;
        
        private ProviderTermMediaInstanceClientType[] clientTypesField;
        
        private ProviderTermGameContentInstance[] gameContentInstancesField;
        
        private ProviderTermGameContentInstanceAsset[] gameContentAssetInstancesField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid MediaInstanceId {
            get {
                return this.mediaInstanceIdField;
            }
            set {
                this.mediaInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public int LicenseTypeId {
            get {
                return this.licenseTypeIdField;
            }
            set {
                this.licenseTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public ProviderTermMediaInstanceClientType[] ClientTypes {
            get {
                return this.clientTypesField;
            }
            set {
                this.clientTypesField = value;
            }
        }
        
        /// <remarks/>
        public ProviderTermGameContentInstance[] GameContentInstances {
            get {
                return this.gameContentInstancesField;
            }
            set {
                this.gameContentInstancesField = value;
            }
        }
        
        /// <remarks/>
        public ProviderTermGameContentInstanceAsset[] GameContentAssetInstances {
            get {
                return this.gameContentAssetInstancesField;
            }
            set {
                this.gameContentAssetInstancesField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ProviderTerm {
        
        private System.Guid idField;
        
        private System.Guid mediaIdField;
        
        private System.DateTime startDateTimeField;
        
        private System.DateTime endDateTimeField;
        
        private decimal wholesalePriceField;
        
        private string wholesalePriceCurrencyCodeField;
        
        private string countryCodeField;
        
        private int providerIdField;
        
        private string externalProviderContentIdField;
        
        private int dRMLicenseIssuerIdField;
        
        private string externalDRMLicenseIssuerContentIdField;
        
        private bool automaticallyGenerateOfferField;
        
        private string modifiedByField;
        
        private ProviderTermMediaInstance[] mediaInstancesField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDateTime {
            get {
                return this.endDateTimeField;
            }
            set {
                this.endDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public decimal WholesalePrice {
            get {
                return this.wholesalePriceField;
            }
            set {
                this.wholesalePriceField = value;
            }
        }
        
        /// <remarks/>
        public string WholesalePriceCurrencyCode {
            get {
                return this.wholesalePriceCurrencyCodeField;
            }
            set {
                this.wholesalePriceCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalProviderContentId {
            get {
                return this.externalProviderContentIdField;
            }
            set {
                this.externalProviderContentIdField = value;
            }
        }
        
        /// <remarks/>
        public int DRMLicenseIssuerId {
            get {
                return this.dRMLicenseIssuerIdField;
            }
            set {
                this.dRMLicenseIssuerIdField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalDRMLicenseIssuerContentId {
            get {
                return this.externalDRMLicenseIssuerContentIdField;
            }
            set {
                this.externalDRMLicenseIssuerContentIdField = value;
            }
        }
        
        /// <remarks/>
        public bool AutomaticallyGenerateOffer {
            get {
                return this.automaticallyGenerateOfferField;
            }
            set {
                this.automaticallyGenerateOfferField = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedBy {
            get {
                return this.modifiedByField;
            }
            set {
                this.modifiedByField = value;
            }
        }
        
        /// <remarks/>
        public ProviderTermMediaInstance[] MediaInstances {
            get {
                return this.mediaInstancesField;
            }
            set {
                this.mediaInstancesField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferInstanceUserType {
        
        private int userTypeIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int UserTypeId {
            get {
                return this.userTypeIdField;
            }
            set {
                this.userTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferInstance {
        
        private System.Guid idField;
        
        private string skuField;
        
        private int pricingRuleIdField;
        
        private int paymentTypeIdField;
        
        private decimal priceField;
        
        private string priceCurrencyCodeField;
        
        private decimal reportingRetailValueField;
        
        private string reportingRetailValueCurrencyCodeField;
        
        private System.DateTime startDateTimeField;
        
        private System.DateTime endDateTimeField;
        
        private string countryCodeField;
        
        private string externalOfferInstanceIdField;
        
        private int visibilityLevelIdField;
        
        private OfferInstanceMediaType[] mediaTypesField;
        
        private OfferInstanceUserType[] userTypesField;
        
        private ProviderTerm[] providerTermsField;
        
        private Promotion[] promotionsField;
        
        private int visibilityStatusIdField;
        
        private InsertDataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Sku {
            get {
                return this.skuField;
            }
            set {
                this.skuField = value;
            }
        }
        
        /// <remarks/>
        public int PricingRuleId {
            get {
                return this.pricingRuleIdField;
            }
            set {
                this.pricingRuleIdField = value;
            }
        }
        
        /// <remarks/>
        public int PaymentTypeId {
            get {
                return this.paymentTypeIdField;
            }
            set {
                this.paymentTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public decimal Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
            }
        }
        
        /// <remarks/>
        public string PriceCurrencyCode {
            get {
                return this.priceCurrencyCodeField;
            }
            set {
                this.priceCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public decimal ReportingRetailValue {
            get {
                return this.reportingRetailValueField;
            }
            set {
                this.reportingRetailValueField = value;
            }
        }
        
        /// <remarks/>
        public string ReportingRetailValueCurrencyCode {
            get {
                return this.reportingRetailValueCurrencyCodeField;
            }
            set {
                this.reportingRetailValueCurrencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDateTime {
            get {
                return this.endDateTimeField;
            }
            set {
                this.endDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalOfferInstanceId {
            get {
                return this.externalOfferInstanceIdField;
            }
            set {
                this.externalOfferInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public int VisibilityLevelId {
            get {
                return this.visibilityLevelIdField;
            }
            set {
                this.visibilityLevelIdField = value;
            }
        }
        
        /// <remarks/>
        public OfferInstanceMediaType[] MediaTypes {
            get {
                return this.mediaTypesField;
            }
            set {
                this.mediaTypesField = value;
            }
        }
        
        /// <remarks/>
        public OfferInstanceUserType[] UserTypes {
            get {
                return this.userTypesField;
            }
            set {
                this.userTypesField = value;
            }
        }
        
        /// <remarks/>
        public ProviderTerm[] ProviderTerms {
            get {
                return this.providerTermsField;
            }
            set {
                this.providerTermsField = value;
            }
        }
        
        /// <remarks/>
        public Promotion[] Promotions {
            get {
                return this.promotionsField;
            }
            set {
                this.promotionsField = value;
            }
        }
        
        /// <remarks/>
        public int VisibilityStatusId {
            get {
                return this.visibilityStatusIdField;
            }
            set {
                this.visibilityStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public InsertDataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public enum InsertDataChangeType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Add,
        
        /// <remarks/>
        Update,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferStore {
        
        private int storeIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int StoreId {
            get {
                return this.storeIdField;
            }
            set {
                this.storeIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Offer {
        
        private System.Guid idField;
        
        private string nameField;
        
        private System.Guid mediaIdField;
        
        private OfferMode offerTypeField;
        
        private OfferStore[] storesField;
        
        private OfferInstance[] instancesField;
        
        private InsertDataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public OfferMode OfferType {
            get {
                return this.offerTypeField;
            }
            set {
                this.offerTypeField = value;
            }
        }
        
        /// <remarks/>
        public OfferStore[] Stores {
            get {
                return this.storesField;
            }
            set {
                this.storesField = value;
            }
        }
        
        /// <remarks/>
        public OfferInstance[] Instances {
            get {
                return this.instancesField;
            }
            set {
                this.instancesField = value;
            }
        }
        
        /// <remarks/>
        public InsertDataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public enum OfferMode {
        
        /// <remarks/>
        Standalone,
        
        /// <remarks/>
        VideoSeason,
        
        /// <remarks/>
        StandaloneAllEpisodeSeason,
        
        /// <remarks/>
        VideoSeries,
        
        /// <remarks/>
        StandaloneAllEpisodeSeries,
        
        /// <remarks/>
        Game,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Publishing {
        
        private PublishingVisiblityStatus visibilityStatusField;
        
        private System.Guid[] offerInstanceIDsField;
        
        private DataChangeType modifiedField;
        
        private System.Nullable<System.DateTime> offerinstanceStartDateTimeField;
        
        private System.Nullable<System.DateTime> offerinstanceEndDateTimeField;
        
        /// <remarks/>
        public PublishingVisiblityStatus VisibilityStatus {
            get {
                return this.visibilityStatusField;
            }
            set {
                this.visibilityStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] OfferInstanceIDs {
            get {
                return this.offerInstanceIDsField;
            }
            set {
                this.offerInstanceIDsField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> OfferinstanceStartDateTime {
            get {
                return this.offerinstanceStartDateTimeField;
            }
            set {
                this.offerinstanceStartDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> OfferinstanceEndDateTime {
            get {
                return this.offerinstanceEndDateTimeField;
            }
            set {
                this.offerinstanceEndDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public enum PublishingVisiblityStatus {
        
        /// <remarks/>
        Live,
        
        /// <remarks/>
        Withdraw,
        
        /// <remarks/>
        NoChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ExternalFeedMapping {
        
        private string externalIdField;
        
        private System.Nullable<int> catalogIdField;
        
        private int externalFeedSourceIdField;
        
        private int externalFeedmappingObjectIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public string ExternalId {
            get {
                return this.externalIdField;
            }
            set {
                this.externalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CatalogId {
            get {
                return this.catalogIdField;
            }
            set {
                this.catalogIdField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalFeedSourceId {
            get {
                return this.externalFeedSourceIdField;
            }
            set {
                this.externalFeedSourceIdField = value;
            }
        }
        
        /// <remarks/>
        public int ExternalFeedmappingObjectId {
            get {
                return this.externalFeedmappingObjectIdField;
            }
            set {
                this.externalFeedmappingObjectIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ExternalFeedMappingObject {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ExternalFeedSource {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMLicenseIssuer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MetadataProvider))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Provider))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Entity {
        
        private int idField;
        
        private string nameField;
        
        private string contactInfoField;
        
        private string accountNumberField;
        
        private string externalEntityIdField;
        
        private bool isProviderField;
        
        private bool isMetadataProviderField;
        
        private bool isDrmLicenseIssuerField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ContactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalEntityId {
            get {
                return this.externalEntityIdField;
            }
            set {
                this.externalEntityIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsProvider {
            get {
                return this.isProviderField;
            }
            set {
                this.isProviderField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMetadataProvider {
            get {
                return this.isMetadataProviderField;
            }
            set {
                this.isMetadataProviderField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDrmLicenseIssuer {
            get {
                return this.isDrmLicenseIssuerField;
            }
            set {
                this.isDrmLicenseIssuerField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class DRMLicenseIssuer : Entity {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MetadataProvider : Entity {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Provider : Entity {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameContentAvatarItem {
        
        private int avatarBodyTypeIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int AvatarBodyTypeId {
            get {
                return this.avatarBodyTypeIdField;
            }
            set {
                this.avatarBodyTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameCapabilityCountryMap {
        
        private string countryCodeField;
        
        private string countryCodeMapField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCodeMap {
            get {
                return this.countryCodeMapField;
            }
            set {
                this.countryCodeMapField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameCapabilityCountry {
        
        private System.Guid gameMediaIdField;
        
        private string countryCodeField;
        
        private System.Nullable<int> offlinePlayersMinField;
        
        private System.Nullable<int> offlinePlayersMaxField;
        
        private System.Nullable<int> offlineCoopPlayersMinField;
        
        private System.Nullable<int> offlineCoopPlayersMaxField;
        
        private System.Nullable<bool> offlineCoopHardDriveRequiredField;
        
        private System.Nullable<int> offlineCoopHardDriveStorageAmountField;
        
        private System.Nullable<int> offlineCoopHardDriveStorageAmountUnitIdField;
        
        private System.Nullable<int> offlineSaveStorageAmountField;
        
        private System.Nullable<int> offlineSaveStorageAmountUnitIdField;
        
        private System.Nullable<int> offlineSystemLinkMinField;
        
        private System.Nullable<int> offlineSystemLinkMaxField;
        
        private System.Nullable<int> offlineMaxHDTVModeIdField;
        
        private System.Nullable<bool> offlineVoiceCommandsField;
        
        private System.Nullable<bool> offlinePeripheralWheelField;
        
        private System.Nullable<bool> offlinePeripheralGamePadField;
        
        private System.Nullable<bool> offlinePeripheralArcadeStickField;
        
        private System.Nullable<bool> offlinePeripheralFlightStickField;
        
        private System.Nullable<bool> offlinePeripheralDancePadField;
        
        private System.Nullable<bool> offlinePeripheralForceFeedbackWheelField;
        
        private System.Nullable<bool> offlinePeripheralCameraField;
        
        private System.Nullable<bool> offlineCustomSoundtracksField;
        
        private System.Nullable<bool> offlineDolbyDigitalField;
        
        private System.Nullable<int> onlineMultiplayerMinField;
        
        private System.Nullable<int> onlineMultiplayerMaxField;
        
        private System.Nullable<bool> onlineMultiplayerHardDriveRequiredField;
        
        private System.Nullable<int> onlineCoopPlayersMinField;
        
        private System.Nullable<int> onlineCoopPlayersMaxField;
        
        private System.Nullable<bool> onlineCoopHardDriveRequiredField;
        
        private System.Nullable<int> onlineCoopHardDriveStorageAmountField;
        
        private System.Nullable<int> onlineCoopHardDriveStorageAmountUnitIdField;
        
        private System.Nullable<bool> onlineHardDriveRequiredField;
        
        private System.Nullable<int> onlinePlayStorageAmountField;
        
        private System.Nullable<int> onlinePlayStorageAmountUnitIdField;
        
        private System.Nullable<bool> onlineContentDownloadField;
        
        private System.Nullable<bool> onlineLeaderboardsField;
        
        private System.Nullable<bool> onlineSpectatorModeField;
        
        private System.Nullable<bool> onlineVoiceField;
        
        private System.Nullable<bool> onlineOnlyField;
        
        private GameCapabilityCountryMap[] gameCapabilityCountryMapsField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid GameMediaId {
            get {
                return this.gameMediaIdField;
            }
            set {
                this.gameMediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflinePlayersMin {
            get {
                return this.offlinePlayersMinField;
            }
            set {
                this.offlinePlayersMinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflinePlayersMax {
            get {
                return this.offlinePlayersMaxField;
            }
            set {
                this.offlinePlayersMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineCoopPlayersMin {
            get {
                return this.offlineCoopPlayersMinField;
            }
            set {
                this.offlineCoopPlayersMinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineCoopPlayersMax {
            get {
                return this.offlineCoopPlayersMaxField;
            }
            set {
                this.offlineCoopPlayersMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflineCoopHardDriveRequired {
            get {
                return this.offlineCoopHardDriveRequiredField;
            }
            set {
                this.offlineCoopHardDriveRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineCoopHardDriveStorageAmount {
            get {
                return this.offlineCoopHardDriveStorageAmountField;
            }
            set {
                this.offlineCoopHardDriveStorageAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineCoopHardDriveStorageAmountUnitId {
            get {
                return this.offlineCoopHardDriveStorageAmountUnitIdField;
            }
            set {
                this.offlineCoopHardDriveStorageAmountUnitIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineSaveStorageAmount {
            get {
                return this.offlineSaveStorageAmountField;
            }
            set {
                this.offlineSaveStorageAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineSaveStorageAmountUnitId {
            get {
                return this.offlineSaveStorageAmountUnitIdField;
            }
            set {
                this.offlineSaveStorageAmountUnitIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineSystemLinkMin {
            get {
                return this.offlineSystemLinkMinField;
            }
            set {
                this.offlineSystemLinkMinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineSystemLinkMax {
            get {
                return this.offlineSystemLinkMaxField;
            }
            set {
                this.offlineSystemLinkMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OfflineMaxHDTVModeId {
            get {
                return this.offlineMaxHDTVModeIdField;
            }
            set {
                this.offlineMaxHDTVModeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflineVoiceCommands {
            get {
                return this.offlineVoiceCommandsField;
            }
            set {
                this.offlineVoiceCommandsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralWheel {
            get {
                return this.offlinePeripheralWheelField;
            }
            set {
                this.offlinePeripheralWheelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralGamePad {
            get {
                return this.offlinePeripheralGamePadField;
            }
            set {
                this.offlinePeripheralGamePadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralArcadeStick {
            get {
                return this.offlinePeripheralArcadeStickField;
            }
            set {
                this.offlinePeripheralArcadeStickField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralFlightStick {
            get {
                return this.offlinePeripheralFlightStickField;
            }
            set {
                this.offlinePeripheralFlightStickField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralDancePad {
            get {
                return this.offlinePeripheralDancePadField;
            }
            set {
                this.offlinePeripheralDancePadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralForceFeedbackWheel {
            get {
                return this.offlinePeripheralForceFeedbackWheelField;
            }
            set {
                this.offlinePeripheralForceFeedbackWheelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflinePeripheralCamera {
            get {
                return this.offlinePeripheralCameraField;
            }
            set {
                this.offlinePeripheralCameraField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflineCustomSoundtracks {
            get {
                return this.offlineCustomSoundtracksField;
            }
            set {
                this.offlineCustomSoundtracksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OfflineDolbyDigital {
            get {
                return this.offlineDolbyDigitalField;
            }
            set {
                this.offlineDolbyDigitalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineMultiplayerMin {
            get {
                return this.onlineMultiplayerMinField;
            }
            set {
                this.onlineMultiplayerMinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineMultiplayerMax {
            get {
                return this.onlineMultiplayerMaxField;
            }
            set {
                this.onlineMultiplayerMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineMultiplayerHardDriveRequired {
            get {
                return this.onlineMultiplayerHardDriveRequiredField;
            }
            set {
                this.onlineMultiplayerHardDriveRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineCoopPlayersMin {
            get {
                return this.onlineCoopPlayersMinField;
            }
            set {
                this.onlineCoopPlayersMinField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineCoopPlayersMax {
            get {
                return this.onlineCoopPlayersMaxField;
            }
            set {
                this.onlineCoopPlayersMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineCoopHardDriveRequired {
            get {
                return this.onlineCoopHardDriveRequiredField;
            }
            set {
                this.onlineCoopHardDriveRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineCoopHardDriveStorageAmount {
            get {
                return this.onlineCoopHardDriveStorageAmountField;
            }
            set {
                this.onlineCoopHardDriveStorageAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlineCoopHardDriveStorageAmountUnitId {
            get {
                return this.onlineCoopHardDriveStorageAmountUnitIdField;
            }
            set {
                this.onlineCoopHardDriveStorageAmountUnitIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineHardDriveRequired {
            get {
                return this.onlineHardDriveRequiredField;
            }
            set {
                this.onlineHardDriveRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlinePlayStorageAmount {
            get {
                return this.onlinePlayStorageAmountField;
            }
            set {
                this.onlinePlayStorageAmountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnlinePlayStorageAmountUnitId {
            get {
                return this.onlinePlayStorageAmountUnitIdField;
            }
            set {
                this.onlinePlayStorageAmountUnitIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineContentDownload {
            get {
                return this.onlineContentDownloadField;
            }
            set {
                this.onlineContentDownloadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineLeaderboards {
            get {
                return this.onlineLeaderboardsField;
            }
            set {
                this.onlineLeaderboardsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineSpectatorMode {
            get {
                return this.onlineSpectatorModeField;
            }
            set {
                this.onlineSpectatorModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineVoice {
            get {
                return this.onlineVoiceField;
            }
            set {
                this.onlineVoiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> OnlineOnly {
            get {
                return this.onlineOnlyField;
            }
            set {
                this.onlineOnlyField = value;
            }
        }
        
        /// <remarks/>
        public GameCapabilityCountryMap[] GameCapabilityCountryMaps {
            get {
                return this.gameCapabilityCountryMapsField;
            }
            set {
                this.gameCapabilityCountryMapsField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameLocale {
        
        private int lcidField;
        
        private string customGenreField;
        
        private string developerField;
        
        private string publisherField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public string CustomGenre {
            get {
                return this.customGenreField;
            }
            set {
                this.customGenreField = value;
            }
        }
        
        /// <remarks/>
        public string Developer {
            get {
                return this.developerField;
            }
            set {
                this.developerField = value;
            }
        }
        
        /// <remarks/>
        public string Publisher {
            get {
                return this.publisherField;
            }
            set {
                this.publisherField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PodcastEpisode {
        
        private string titleField;
        
        private System.Nullable<System.DateTime> publishedDateField;
        
        private string enclosureUrlField;
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PublishedDate {
            get {
                return this.publishedDateField;
            }
            set {
                this.publishedDateField = value;
            }
        }
        
        /// <remarks/>
        public string EnclosureUrl {
            get {
                return this.enclosureUrlField;
            }
            set {
                this.enclosureUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaRatingDescriptor {
        
        private int ratingDescriptorIdField;
        
        private double levelField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int RatingDescriptorId {
            get {
                return this.ratingDescriptorIdField;
            }
            set {
                this.ratingDescriptorIdField = value;
            }
        }
        
        /// <remarks/>
        public double Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaRating {
        
        private int ratingValueIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int RatingValueId {
            get {
                return this.ratingValueIdField;
            }
            set {
                this.ratingValueIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaRelationship {
        
        private string dataField;
        
        private System.Guid relatedMediaIdField;
        
        private string relatedMediaTitleField;
        
        private int mediaRelationshipTypeIdField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid RelatedMediaId {
            get {
                return this.relatedMediaIdField;
            }
            set {
                this.relatedMediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string RelatedMediaTitle {
            get {
                return this.relatedMediaTitleField;
            }
            set {
                this.relatedMediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public int MediaRelationshipTypeId {
            get {
                return this.mediaRelationshipTypeIdField;
            }
            set {
                this.mediaRelationshipTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaLocaleMap {
        
        private int lcidField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaLocale {
        
        private int lcidField;
        
        private MediaLocaleMap[] mappedLcidsField;
        
        private string titleField;
        
        private string titleSortField;
        
        private string reducedTitleField;
        
        private string descriptionField;
        
        private string reducedDescriptionField;
        
        private string copyrightField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public MediaLocaleMap[] MappedLcids {
            get {
                return this.mappedLcidsField;
            }
            set {
                this.mappedLcidsField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string TitleSort {
            get {
                return this.titleSortField;
            }
            set {
                this.titleSortField = value;
            }
        }
        
        /// <remarks/>
        public string ReducedTitle {
            get {
                return this.reducedTitleField;
            }
            set {
                this.reducedTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ReducedDescription {
            get {
                return this.reducedDescriptionField;
            }
            set {
                this.reducedDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Copyright {
            get {
                return this.copyrightField;
            }
            set {
                this.copyrightField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoFile {
        
        private System.Guid idField;
        
        private string fileUrlField;
        
        private long sizeField;
        
        private System.Nullable<int> durationField;
        
        private int indexField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FileUrl {
            get {
                return this.fileUrlField;
            }
            set {
                this.fileUrlField = value;
            }
        }
        
        /// <remarks/>
        public long Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSubtitle {
        
        private string languageCodeField;
        
        private string fileUrlField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public string LanguageCode {
            get {
                return this.languageCodeField;
            }
            set {
                this.languageCodeField = value;
            }
        }
        
        /// <remarks/>
        public string FileUrl {
            get {
                return this.fileUrlField;
            }
            set {
                this.fileUrlField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoAudioTrackLanguage {
        
        private int lcidField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameContentInstanceFile {
        
        private System.Guid idField;
        
        private string fileUrlField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FileUrl {
            get {
                return this.fileUrlField;
            }
            set {
                this.fileUrlField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameContentInstanceEncryptedKey {
        
        private byte[] encryptedSymKeyField;
        
        private byte[] encryptedPublicKeyField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] EncryptedSymKey {
            get {
                return this.encryptedSymKeyField;
            }
            set {
                this.encryptedSymKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] EncryptedPublicKey {
            get {
                return this.encryptedPublicKeyField;
            }
            set {
                this.encryptedPublicKeyField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PreviewMediaInstance {
        
        private int previewMediaInstanceTypeIdField;
        
        private System.Nullable<int> requiredUserTypeIdField;
        
        private System.Nullable<System.DateTime> startDateField;
        
        private System.Nullable<System.DateTime> endDateField;
        
        private string countryCodeField;
        
        private int providerIdField;
        
        private string licenserContentIdField;
        
        private int dRMLicenseIssuerIdField;
        
        private InsertDataChangeType modifiedField;
        
        /// <remarks/>
        public int PreviewMediaInstanceTypeId {
            get {
                return this.previewMediaInstanceTypeIdField;
            }
            set {
                this.previewMediaInstanceTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> RequiredUserTypeId {
            get {
                return this.requiredUserTypeIdField;
            }
            set {
                this.requiredUserTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string LicenserContentId {
            get {
                return this.licenserContentIdField;
            }
            set {
                this.licenserContentIdField = value;
            }
        }
        
        /// <remarks/>
        public int DRMLicenseIssuerId {
            get {
                return this.dRMLicenseIssuerIdField;
            }
            set {
                this.dRMLicenseIssuerIdField = value;
            }
        }
        
        /// <remarks/>
        public InsertDataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImageInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameContentInstance))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public abstract partial class MediaInstance {
        
        private System.Guid idField;
        
        private bool isAcquirableField;
        
        private bool isAdSupportedField;
        
        private bool isPreviewField;
        
        private PreviewMediaInstance previewField;
        
        private InsertDataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAcquirable {
            get {
                return this.isAcquirableField;
            }
            set {
                this.isAcquirableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAdSupported {
            get {
                return this.isAdSupportedField;
            }
            set {
                this.isAdSupportedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPreview {
            get {
                return this.isPreviewField;
            }
            set {
                this.isPreviewField = value;
            }
        }
        
        /// <remarks/>
        public PreviewMediaInstance Preview {
            get {
                return this.previewField;
            }
            set {
                this.previewField = value;
            }
        }
        
        /// <remarks/>
        public InsertDataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ImageInstance : MediaInstance {
        
        private int lcidField;
        
        private string fileUrlField;
        
        private System.Nullable<int> imageFormatIdField;
        
        private int imageSizeIdField;
        
        private System.Nullable<int> fileSizeField;
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
        
        /// <remarks/>
        public string FileUrl {
            get {
                return this.fileUrlField;
            }
            set {
                this.fileUrlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ImageFormatId {
            get {
                return this.imageFormatIdField;
            }
            set {
                this.imageFormatIdField = value;
            }
        }
        
        /// <remarks/>
        public int ImageSizeId {
            get {
                return this.imageSizeIdField;
            }
            set {
                this.imageSizeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoInstance : MediaInstance {
        
        private bool isDRMField;
        
        private int audioEncodingIdField;
        
        private string audioChannelField;
        
        private System.Nullable<int> audioSamplingRateField;
        
        private bool audioCCField;
        
        private System.Nullable<int> burntInSubtitleLcidField;
        
        private System.Nullable<int> audioBitRateField;
        
        private int videoDefinitionIdField;
        
        private string videoAspectRatioField;
        
        private string videoResolutionField;
        
        private int videoEncodingIdField;
        
        private int videoBitRateField;
        
        private System.Nullable<int> videoFrameField;
        
        private VideoAudioTrackLanguage[] audioTrackLanguagesField;
        
        private VideoSubtitle[] subtitlesField;
        
        private VideoFile[] videoFilesField;
        
        private bool enabledField;
        
        /// <remarks/>
        public bool IsDRM {
            get {
                return this.isDRMField;
            }
            set {
                this.isDRMField = value;
            }
        }
        
        /// <remarks/>
        public int AudioEncodingId {
            get {
                return this.audioEncodingIdField;
            }
            set {
                this.audioEncodingIdField = value;
            }
        }
        
        /// <remarks/>
        public string AudioChannel {
            get {
                return this.audioChannelField;
            }
            set {
                this.audioChannelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AudioSamplingRate {
            get {
                return this.audioSamplingRateField;
            }
            set {
                this.audioSamplingRateField = value;
            }
        }
        
        /// <remarks/>
        public bool AudioCC {
            get {
                return this.audioCCField;
            }
            set {
                this.audioCCField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> BurntInSubtitleLcid {
            get {
                return this.burntInSubtitleLcidField;
            }
            set {
                this.burntInSubtitleLcidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AudioBitRate {
            get {
                return this.audioBitRateField;
            }
            set {
                this.audioBitRateField = value;
            }
        }
        
        /// <remarks/>
        public int VideoDefinitionId {
            get {
                return this.videoDefinitionIdField;
            }
            set {
                this.videoDefinitionIdField = value;
            }
        }
        
        /// <remarks/>
        public string VideoAspectRatio {
            get {
                return this.videoAspectRatioField;
            }
            set {
                this.videoAspectRatioField = value;
            }
        }
        
        /// <remarks/>
        public string VideoResolution {
            get {
                return this.videoResolutionField;
            }
            set {
                this.videoResolutionField = value;
            }
        }
        
        /// <remarks/>
        public int VideoEncodingId {
            get {
                return this.videoEncodingIdField;
            }
            set {
                this.videoEncodingIdField = value;
            }
        }
        
        /// <remarks/>
        public int VideoBitRate {
            get {
                return this.videoBitRateField;
            }
            set {
                this.videoBitRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> VideoFrame {
            get {
                return this.videoFrameField;
            }
            set {
                this.videoFrameField = value;
            }
        }
        
        /// <remarks/>
        public VideoAudioTrackLanguage[] AudioTrackLanguages {
            get {
                return this.audioTrackLanguagesField;
            }
            set {
                this.audioTrackLanguagesField = value;
            }
        }
        
        /// <remarks/>
        public VideoSubtitle[] Subtitles {
            get {
                return this.subtitlesField;
            }
            set {
                this.subtitlesField = value;
            }
        }
        
        /// <remarks/>
        public VideoFile[] VideoFiles {
            get {
                return this.videoFilesField;
            }
            set {
                this.videoFilesField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameContentInstance : MediaInstance {
        
        private long installSizeField;
        
        private long packageSizeField;
        
        private byte[] liveContentIdField;
        
        private int supportedGameRegionMaskIdField;
        
        private int packageTypeIdField;
        
        private GameContentInstanceEncryptedKey encryptedKeyField;
        
        private GameContentInstanceFile[] gameContentInstanceFilesField;
        
        /// <remarks/>
        public long InstallSize {
            get {
                return this.installSizeField;
            }
            set {
                this.installSizeField = value;
            }
        }
        
        /// <remarks/>
        public long PackageSize {
            get {
                return this.packageSizeField;
            }
            set {
                this.packageSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] LiveContentId {
            get {
                return this.liveContentIdField;
            }
            set {
                this.liveContentIdField = value;
            }
        }
        
        /// <remarks/>
        public int SupportedGameRegionMaskId {
            get {
                return this.supportedGameRegionMaskIdField;
            }
            set {
                this.supportedGameRegionMaskIdField = value;
            }
        }
        
        /// <remarks/>
        public int PackageTypeId {
            get {
                return this.packageTypeIdField;
            }
            set {
                this.packageTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public GameContentInstanceEncryptedKey EncryptedKey {
            get {
                return this.encryptedKeyField;
            }
            set {
                this.encryptedKeyField = value;
            }
        }
        
        /// <remarks/>
        public GameContentInstanceFile[] GameContentInstanceFiles {
            get {
                return this.gameContentInstanceFilesField;
            }
            set {
                this.gameContentInstanceFilesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaContributor {
        
        private System.Guid contributorIdField;
        
        private string contributorNameField;
        
        private int roleIdField;
        
        private string characterField;
        
        private int sortOrderField;
        
        private bool isPrimaryField;
        
        private System.Nullable<System.Guid> contributorAliasIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid ContributorId {
            get {
                return this.contributorIdField;
            }
            set {
                this.contributorIdField = value;
            }
        }
        
        /// <remarks/>
        public string ContributorName {
            get {
                return this.contributorNameField;
            }
            set {
                this.contributorNameField = value;
            }
        }
        
        /// <remarks/>
        public int RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        public string Character {
            get {
                return this.characterField;
            }
            set {
                this.characterField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrimary {
            get {
                return this.isPrimaryField;
            }
            set {
                this.isPrimaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ContributorAliasId {
            get {
                return this.contributorAliasIdField;
            }
            set {
                this.contributorAliasIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaCategory {
        
        private int categoryIdField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public int CategoryId {
            get {
                return this.categoryIdField;
            }
            set {
                this.categoryIdField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class MediaArticle {
        
        private System.Guid articleIdField;
        
        private int sortOrderField;
        
        private DataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid ArticleId {
            get {
                return this.articleIdField;
            }
            set {
                this.articleIdField = value;
            }
        }
        
        /// <remarks/>
        public int SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
        
        /// <remarks/>
        public DataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameContent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Game))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeason))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Video))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Podcast))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Image))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public abstract partial class Media {
        
        private System.Guid idField;
        
        private int mediaTypeIdField;
        
        private string mediaTitleField;
        
        private int metadataProviderIdField;
        
        private System.Nullable<System.DateTime> visibilityDateField;
        
        private System.Nullable<System.DateTime> originalReleaseDateField;
        
        private string displayOriginalReleaseDateField;
        
        private bool geoCheckPolicyField;
        
        private int visibilityStatusIdField;
        
        private MediaArticle[] articlesField;
        
        private MediaCategory[] categoriesField;
        
        private MediaContributor[] contributorsField;
        
        private MediaInstance[] instancesField;
        
        private MediaLocale[] localesField;
        
        private MediaRelationship[] relationshipsField;
        
        private MediaRating[] ratingValuesField;
        
        private MediaRatingDescriptor[] ratingDescriptorsField;
        
        private InsertDataChangeType modifiedField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public int MetadataProviderId {
            get {
                return this.metadataProviderIdField;
            }
            set {
                this.metadataProviderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> VisibilityDate {
            get {
                return this.visibilityDateField;
            }
            set {
                this.visibilityDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> OriginalReleaseDate {
            get {
                return this.originalReleaseDateField;
            }
            set {
                this.originalReleaseDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayOriginalReleaseDate {
            get {
                return this.displayOriginalReleaseDateField;
            }
            set {
                this.displayOriginalReleaseDateField = value;
            }
        }
        
        /// <remarks/>
        public bool GeoCheckPolicy {
            get {
                return this.geoCheckPolicyField;
            }
            set {
                this.geoCheckPolicyField = value;
            }
        }
        
        /// <remarks/>
        public int VisibilityStatusId {
            get {
                return this.visibilityStatusIdField;
            }
            set {
                this.visibilityStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public MediaArticle[] Articles {
            get {
                return this.articlesField;
            }
            set {
                this.articlesField = value;
            }
        }
        
        /// <remarks/>
        public MediaCategory[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public MediaContributor[] Contributors {
            get {
                return this.contributorsField;
            }
            set {
                this.contributorsField = value;
            }
        }
        
        /// <remarks/>
        public MediaInstance[] Instances {
            get {
                return this.instancesField;
            }
            set {
                this.instancesField = value;
            }
        }
        
        /// <remarks/>
        public MediaLocale[] Locales {
            get {
                return this.localesField;
            }
            set {
                this.localesField = value;
            }
        }
        
        /// <remarks/>
        public MediaRelationship[] Relationships {
            get {
                return this.relationshipsField;
            }
            set {
                this.relationshipsField = value;
            }
        }
        
        /// <remarks/>
        public MediaRating[] RatingValues {
            get {
                return this.ratingValuesField;
            }
            set {
                this.ratingValuesField = value;
            }
        }
        
        /// <remarks/>
        public MediaRatingDescriptor[] RatingDescriptors {
            get {
                return this.ratingDescriptorsField;
            }
            set {
                this.ratingDescriptorsField = value;
            }
        }
        
        /// <remarks/>
        public InsertDataChangeType Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameContent : Media {
        
        private System.Guid gameMediaIdField;
        
        private int contentBitFilterField;
        
        private int effectiveLiveTitleIdField;
        
        private bool consumableField;
        
        private int liveTitleAssetIdField;
        
        private bool inheritRatingField;
        
        private GameContentAvatarItem avatarItemField;
        
        /// <remarks/>
        public System.Guid GameMediaId {
            get {
                return this.gameMediaIdField;
            }
            set {
                this.gameMediaIdField = value;
            }
        }
        
        /// <remarks/>
        public int ContentBitFilter {
            get {
                return this.contentBitFilterField;
            }
            set {
                this.contentBitFilterField = value;
            }
        }
        
        /// <remarks/>
        public int EffectiveLiveTitleId {
            get {
                return this.effectiveLiveTitleIdField;
            }
            set {
                this.effectiveLiveTitleIdField = value;
            }
        }
        
        /// <remarks/>
        public bool Consumable {
            get {
                return this.consumableField;
            }
            set {
                this.consumableField = value;
            }
        }
        
        /// <remarks/>
        public int LiveTitleAssetId {
            get {
                return this.liveTitleAssetIdField;
            }
            set {
                this.liveTitleAssetIdField = value;
            }
        }
        
        /// <remarks/>
        public bool InheritRating {
            get {
                return this.inheritRatingField;
            }
            set {
                this.inheritRatingField = value;
            }
        }
        
        /// <remarks/>
        public GameContentAvatarItem AvatarItem {
            get {
                return this.avatarItemField;
            }
            set {
                this.avatarItemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Game : Media {
        
        private int liveTitleIdField;
        
        private GameLocale[] gameLocalesField;
        
        private GameCapabilityCountry[] gameCountriesField;
        
        /// <remarks/>
        public int LiveTitleId {
            get {
                return this.liveTitleIdField;
            }
            set {
                this.liveTitleIdField = value;
            }
        }
        
        /// <remarks/>
        public GameLocale[] GameLocales {
            get {
                return this.gameLocalesField;
            }
            set {
                this.gameLocalesField = value;
            }
        }
        
        /// <remarks/>
        public GameCapabilityCountry[] GameCountries {
            get {
                return this.gameCountriesField;
            }
            set {
                this.gameCountriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeries : Media {
        
        private string productionCompanyField;
        
        private bool isOrderBySeasonField;
        
        /// <remarks/>
        public string ProductionCompany {
            get {
                return this.productionCompanyField;
            }
            set {
                this.productionCompanyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOrderBySeason {
            get {
                return this.isOrderBySeasonField;
            }
            set {
                this.isOrderBySeasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeason : Media {
        
        private bool isCompleteField;
        
        private int seasonNumberField;
        
        /// <remarks/>
        public bool IsComplete {
            get {
                return this.isCompleteField;
            }
            set {
                this.isCompleteField = value;
            }
        }
        
        /// <remarks/>
        public int SeasonNumber {
            get {
                return this.seasonNumberField;
            }
            set {
                this.seasonNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Video : Media {
        
        private string cridField;
        
        private string isanField;
        
        private string upcField;
        
        private string subtitleField;
        
        private System.Nullable<int> durationField;
        
        private string productionCompanyField;
        
        private System.Nullable<int> spokenLanguageField;
        
        private System.Nullable<int> episodeNumberField;
        
        private MediaRelationship[] reverseRelationshipsField;
        
        private string productionIdField;
        
        /// <remarks/>
        public string Crid {
            get {
                return this.cridField;
            }
            set {
                this.cridField = value;
            }
        }
        
        /// <remarks/>
        public string Isan {
            get {
                return this.isanField;
            }
            set {
                this.isanField = value;
            }
        }
        
        /// <remarks/>
        public string Upc {
            get {
                return this.upcField;
            }
            set {
                this.upcField = value;
            }
        }
        
        /// <remarks/>
        public string Subtitle {
            get {
                return this.subtitleField;
            }
            set {
                this.subtitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string ProductionCompany {
            get {
                return this.productionCompanyField;
            }
            set {
                this.productionCompanyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SpokenLanguage {
            get {
                return this.spokenLanguageField;
            }
            set {
                this.spokenLanguageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> EpisodeNumber {
            get {
                return this.episodeNumberField;
            }
            set {
                this.episodeNumberField = value;
            }
        }
        
        /// <remarks/>
        public MediaRelationship[] ReverseRelationships {
            get {
                return this.reverseRelationshipsField;
            }
            set {
                this.reverseRelationshipsField = value;
            }
        }
        
        /// <remarks/>
        public string ProductionId {
            get {
                return this.productionIdField;
            }
            set {
                this.productionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Podcast : Media {
        
        private string rssUrlField;
        
        private string ownerEmailField;
        
        private string ownerNameField;
        
        private string creatorNameField;
        
        private string imageUrlField;
        
        private string websiteUrlField;
        
        private byte starRatingField;
        
        private bool isItemSortAscField;
        
        private bool isExplicitField;
        
        private PodcastContentType contentTypeField;
        
        private string iTunesKeywordsField;
        
        private bool iTunesBlockField;
        
        private string[] iTunesCategoriesField;
        
        private PodcastEpisode[] episodesField;
        
        /// <remarks/>
        public string RssUrl {
            get {
                return this.rssUrlField;
            }
            set {
                t