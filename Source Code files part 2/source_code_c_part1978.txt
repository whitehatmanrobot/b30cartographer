his.rssUrlField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerEmail {
            get {
                return this.ownerEmailField;
            }
            set {
                this.ownerEmailField = value;
            }
        }
        
        /// <remarks/>
        public string OwnerName {
            get {
                return this.ownerNameField;
            }
            set {
                this.ownerNameField = value;
            }
        }
        
        /// <remarks/>
        public string CreatorName {
            get {
                return this.creatorNameField;
            }
            set {
                this.creatorNameField = value;
            }
        }
        
        /// <remarks/>
        public string ImageUrl {
            get {
                return this.imageUrlField;
            }
            set {
                this.imageUrlField = value;
            }
        }
        
        /// <remarks/>
        public string WebsiteUrl {
            get {
                return this.websiteUrlField;
            }
            set {
                this.websiteUrlField = value;
            }
        }
        
        /// <remarks/>
        public byte StarRating {
            get {
                return this.starRatingField;
            }
            set {
                this.starRatingField = value;
            }
        }
        
        /// <remarks/>
        public bool IsItemSortAsc {
            get {
                return this.isItemSortAscField;
            }
            set {
                this.isItemSortAscField = value;
            }
        }
        
        /// <remarks/>
        public bool IsExplicit {
            get {
                return this.isExplicitField;
            }
            set {
                this.isExplicitField = value;
            }
        }
        
        /// <remarks/>
        public PodcastContentType ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ITunesKeywords {
            get {
                return this.iTunesKeywordsField;
            }
            set {
                this.iTunesKeywordsField = value;
            }
        }
        
        /// <remarks/>
        public bool ITunesBlock {
            get {
                return this.iTunesBlockField;
            }
            set {
                this.iTunesBlockField = value;
            }
        }
        
        /// <remarks/>
        public string[] ITunesCategories {
            get {
                return this.iTunesCategoriesField;
            }
            set {
                this.iTunesCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public PodcastEpisode[] Episodes {
            get {
                return this.episodesField;
            }
            set {
                this.episodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public enum PodcastContentType {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Audio,
        
        /// <remarks/>
        Video,
        
        /// <remarks/>
        AudioAndVideo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class Image : Media {
        
        private string creatorField;
        
        private string issuerField;
        
        /// <remarks/>
        public string Creator {
            get {
                return this.creatorField;
            }
            set {
                this.creatorField = value;
            }
        }
        
        /// <remarks/>
        public string Issuer {
            get {
                return this.issuerField;
            }
            set {
                this.issuerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeriesSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImageSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaskSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMTaskSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PublishingSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameOfferSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GameTitleSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamePublisherSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PodcastSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContributorResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OfferSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSearchResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VideoSeasonSearchResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public abstract partial class Response {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeriesSearchResponse : Response {
        
        private System.Guid mediaIdField;
        
        private string titleField;
        
        private string localeField;
        
        private System.Nullable<System.DateTime> availableDateField;
        
        private string visibilityStatusField;
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
        
        /// <remarks/>
        public string VisibilityStatus {
            get {
                return this.visibilityStatusField;
            }
            set {
                this.visibilityStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ImageSearchResponse : Response {
        
        private string descriptionField;
        
        private string urlField;
        
        private Image resultImageField;
        
        private string titleField;
        
        private System.Guid mediaIdField;
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public Image ResultImage {
            get {
                return this.resultImageField;
            }
            set {
                this.resultImageField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMTaskSearchResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class TaskSearchResponse : Response {
        
        private int taskStatusIdField;
        
        private string fileNameField;
        
        private string inputFileLocationField;
        
        private string stagerFileLocationField;
        
        private string outputFileLocationField;
        
        private string statusMessageField;
        
        private System.DateTime lastUpdatedDateField;
        
        private System.Guid taskInstanceIdField;
        
        private string taskStatusNameField;
        
        /// <remarks/>
        public int TaskStatusId {
            get {
                return this.taskStatusIdField;
            }
            set {
                this.taskStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string InputFileLocation {
            get {
                return this.inputFileLocationField;
            }
            set {
                this.inputFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string StagerFileLocation {
            get {
                return this.stagerFileLocationField;
            }
            set {
                this.stagerFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string OutputFileLocation {
            get {
                return this.outputFileLocationField;
            }
            set {
                this.outputFileLocationField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastUpdatedDate {
            get {
                return this.lastUpdatedDateField;
            }
            set {
                this.lastUpdatedDateField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid TaskInstanceId {
            get {
                return this.taskInstanceIdField;
            }
            set {
                this.taskInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public string TaskStatusName {
            get {
                return this.taskStatusNameField;
            }
            set {
                this.taskStatusNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class DRMTaskSearchResponse : TaskSearchResponse {
        
        private System.Guid mediaInstanceIdField;
        
        private string titleField;
        
        private string descriptionField;
        
        /// <remarks/>
        public System.Guid MediaInstanceId {
            get {
                return this.mediaInstanceIdField;
            }
            set {
                this.mediaInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PublishingSearchResponse : Response {
        
        private bool selectedField;
        
        private System.DateTime offerStartDateField;
        
        private System.DateTime offerEndDateField;
        
        private int providerIdField;
        
        private string mediaTitleField;
        
        private string offerTitleField;
        
        private string countryCodeField;
        
        private System.Guid offerIdField;
        
        private System.Guid mediaIdField;
        
        private System.Guid offerInstanceGuidField;
        
        private System.Nullable<int> seasonNumberField;
        
        private System.Nullable<int> episodeNumberField;
        
        /// <remarks/>
        public bool Selected {
            get {
                return this.selectedField;
            }
            set {
                this.selectedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime OfferStartDate {
            get {
                return this.offerStartDateField;
            }
            set {
                this.offerStartDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime OfferEndDate {
            get {
                return this.offerEndDateField;
            }
            set {
                this.offerEndDateField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public string OfferTitle {
            get {
                return this.offerTitleField;
            }
            set {
                this.offerTitleField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OfferId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OfferInstanceGuid {
            get {
                return this.offerInstanceGuidField;
            }
            set {
                this.offerInstanceGuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SeasonNumber {
            get {
                return this.seasonNumberField;
            }
            set {
                this.seasonNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> EpisodeNumber {
            get {
                return this.episodeNumberField;
            }
            set {
                this.episodeNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameOfferSearchResponse : Response {
        
        private string mediaTitleField;
        
        private string offerTitleField;
        
        private int mediaTypeIdField;
        
        private int clientTypeIdField;
        
        private System.Guid offerIdField;
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public string OfferTitle {
            get {
                return this.offerTitleField;
            }
            set {
                this.offerTitleField = value;
            }
        }
        
        /// <remarks/>
        public int MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int ClientTypeId {
            get {
                return this.clientTypeIdField;
            }
            set {
                this.clientTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OfferId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameTitleSearchResponse : Response {
        
        private System.Guid gameMediaIdField;
        
        private string mediaTitleField;
        
        private int clientTypeIdField;
        
        /// <remarks/>
        public System.Guid GameMediaId {
            get {
                return this.gameMediaIdField;
            }
            set {
                this.gameMediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public int ClientTypeId {
            get {
                return this.clientTypeIdField;
            }
            set {
                this.clientTypeIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GamePublisherSearchResponse : Response {
        
        private int decimalTitleIdField;
        
        private string mediaTitleField;
        
        private int clientTypeIdField;
        
        /// <remarks/>
        public int DecimalTitleId {
            get {
                return this.decimalTitleIdField;
            }
            set {
                this.decimalTitleIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public int ClientTypeId {
            get {
                return this.clientTypeIdField;
            }
            set {
                this.clientTypeIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PodcastSearchResponse : Response {
        
        private System.Guid mediaIdField;
        
        private string titleField;
        
        private string localeField;
        
        private System.DateTime availableDateField;
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AvailableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorResponse : Response {
        
        private System.Guid contributorIdField;
        
        private string nameField;
        
        private string displayBirthDateField;
        
        private string[] mediaTitlesField;
        
        /// <remarks/>
        public System.Guid ContributorId {
            get {
                return this.contributorIdField;
            }
            set {
                this.contributorIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayBirthDate {
            get {
                return this.displayBirthDateField;
            }
            set {
                this.displayBirthDateField = value;
            }
        }
        
        /// <remarks/>
        public string[] MediaTitles {
            get {
                return this.mediaTitlesField;
            }
            set {
                this.mediaTitlesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferSearchResponse : Response {
        
        private System.Guid offerIdField;
        
        private string offerNameField;
        
        private System.Guid mediaIdField;
        
        private string mediaTitleField;
        
        private string countryField;
        
        private string seasonNumberField;
        
        private string endDateField;
        
        private string visibilityStatusNameField;
        
        /// <remarks/>
        public System.Guid OfferId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public string OfferName {
            get {
                return this.offerNameField;
            }
            set {
                this.offerNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string SeasonNumber {
            get {
                return this.seasonNumberField;
            }
            set {
                this.seasonNumberField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string VisibilityStatusName {
            get {
                return this.visibilityStatusNameField;
            }
            set {
                this.visibilityStatusNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSearchResponse : Response {
        
        private System.Guid mediaIdField;
        
        private string titleField;
        
        private string localeField;
        
        private System.Nullable<System.DateTime> availableDateField;
        
        private string visibilityStatusField;
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
        
        /// <remarks/>
        public string VisibilityStatus {
            get {
                return this.visibilityStatusField;
            }
            set {
                this.visibilityStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeasonSearchResponse : Response {
        
        private System.Guid mediaIdField;
        
        private string titleField;
        
        private string localeField;
        
        private System.DateTime availableDateField;
        
        private int seasonNumberField;
        
        private string visibilityStatusField;
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AvailableDate {
            get {
                return this.availableDateField;
            }
            set {
                this.availableDateField = value;
            }
        }
        
        /// <remarks/>
        public int SeasonNumber {
            get {
                return this.seasonNumberField;
            }
            set {
                this.seasonNumberField = value;
            }
        }
        
        /// <remarks/>
        public string VisibilityStatus {
            get {
                return this.visibilityStatusField;
            }
            set {
                this.visibilityStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PublishingSearchRequest : Request {
        
        private System.DateTime minOfferStartDateField;
        
        private System.DateTime maxOfferStartDateField;
        
        private System.DateTime minOfferEndDateField;
        
        private System.DateTime maxOfferEndDateField;
        
        private int providerIdField;
        
        private string titleField;
        
        private int videoDefinitionField;
        
        private int videoVisibilityStatusIdField;
        
        private int offerVisibilityStatusIdField;
        
        /// <remarks/>
        public System.DateTime MinOfferStartDate {
            get {
                return this.minOfferStartDateField;
            }
            set {
                this.minOfferStartDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime MaxOfferStartDate {
            get {
                return this.maxOfferStartDateField;
            }
            set {
                this.maxOfferStartDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime MinOfferEndDate {
            get {
                return this.minOfferEndDateField;
            }
            set {
                this.minOfferEndDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime MaxOfferEndDate {
            get {
                return this.maxOfferEndDateField;
            }
            set {
                this.maxOfferEndDateField = value;
            }
        }
        
        /// <remarks/>
        public int ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int VideoDefinition {
            get {
                return this.videoDefinitionField;
            }
            set {
                this.videoDefinitionField = value;
            }
        }
        
        /// <remarks/>
        public int VideoVisibilityStatusId {
            get {
                return this.videoVisibilityStatusIdField;
            }
            set {
                this.videoVisibilityStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public int OfferVisibilityStatusId {
            get {
                return this.offerVisibilityStatusIdField;
            }
            set {
                this.offerVisibilityStatusIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class PodcastSearchRequest : Request {
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string mediaTitleField;
        
        private string podcastUrlField;
        
        private int[] subcategoryIdsField;
        
        private System.Nullable<System.DateTime> submittedAfterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        public string PodcastUrl {
            get {
                return this.podcastUrlField;
            }
            set {
                this.podcastUrlField = value;
            }
        }
        
        /// <remarks/>
        public int[] SubcategoryIds {
            get {
                return this.subcategoryIdsField;
            }
            set {
                this.subcategoryIdsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SubmittedAfter {
            get {
                return this.submittedAfterField;
            }
            set {
                this.submittedAfterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DRMTaskSearchRequest))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class TaskSearchRequest : Request {
        
        private System.Nullable<int> taskStatusIdField;
        
        private string inputLocationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TaskStatusId {
            get {
                return this.taskStatusIdField;
            }
            set {
                this.taskStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public string InputLocation {
            get {
                return this.inputLocationField;
            }
            set {
                this.inputLocationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class DRMTaskSearchRequest : TaskSearchRequest {
        
        private string mediaTitleField;
        
        private System.Nullable<int> mediaTypeField;
        
        private System.Nullable<System.Guid> mediaInstanceIdField;
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaType {
            get {
                return this.mediaTypeField;
            }
            set {
                this.mediaTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaInstanceId {
            get {
                return this.mediaInstanceIdField;
            }
            set {
                this.mediaInstanceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameOfferSearchRequest : Request {
        
        private string titleField;
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GameTitleSearchRequest : Request {
        
        private string titleField;
        
        private int lcidField;
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Lcid {
            get {
                return this.lcidField;
            }
            set {
                this.lcidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class GamePublisherSearchRequest : Request {
        
        private string publisherIdField;
        
        /// <remarks/>
        public string PublisherId {
            get {
                return this.publisherIdField;
            }
            set {
                this.publisherIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ImageSearchRequest : Request {
        
        private int[] dimensionsField;
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string titleField;
        
        private int[] localeField;
        
        /// <remarks/>
        public int[] Dimensions {
            get {
                return this.dimensionsField;
            }
            set {
                this.dimensionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int[] Locale {
            get {
                return this.localeField;
            }
            set {
                this.localeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class ContributorRequest : Request {
        
        private string nameField;
        
        private System.Guid contributorIdField;
        
        private System.Guid relatedContributorIdField;
        
        private System.Guid mediaIdField;
        
        private int isGroupField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ContributorId {
            get {
                return this.contributorIdField;
            }
            set {
                this.contributorIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid RelatedContributorId {
            get {
                return this.relatedContributorIdField;
            }
            set {
                this.relatedContributorIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public int IsGroup {
            get {
                return this.isGroupField;
            }
            set {
                this.isGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class OfferSearchRequest : Request {
        
        private System.Nullable<int> mediaTypeIdField;
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string mediaTitleField;
        
        private System.Nullable<int> mediaStatusIdField;
        
        private System.Nullable<int> providerIdField;
        
        private string offerNameField;
        
        private bool includeExpiredField;
        
        private System.Nullable<System.DateTime> startDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaStatusId {
            get {
                return this.mediaStatusIdField;
            }
            set {
                this.mediaStatusIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string OfferName {
            get {
                return this.offerNameField;
            }
            set {
                this.offerNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeExpired {
            get {
                return this.includeExpiredField;
            }
            set {
                this.includeExpiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSearchRequest : Request {
        
        private System.Nullable<int> metadataProviderIdField;
        
        private System.Nullable<int> mediaStatusIdField;
        
        private System.Nullable<int> mediaTypeIdField;
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string mediaTitleField;
        
        private System.Nullable<System.DateTime> availableFromDateField;
        
        private System.Nullable<System.DateTime> availableToDateField;
        
        private int[] categoryIdsField;
        
        private string productionIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MetadataProviderId {
            get {
                return this.metadataProviderIdField;
            }
            set {
                this.metadataProviderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaStatusId {
            get {
                return this.mediaStatusIdField;
            }
            set {
                this.mediaStatusIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableFromDate {
            get {
                return this.availableFromDateField;
            }
            set {
                this.availableFromDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableToDate {
            get {
                return this.availableToDateField;
            }
            set {
                this.availableToDateField = value;
            }
        }
        
        /// <remarks/>
        public int[] CategoryIds {
            get {
                return this.categoryIdsField;
            }
            set {
                this.categoryIdsField = value;
            }
        }
        
        /// <remarks/>
        public string ProductionId {
            get {
                return this.productionIdField;
            }
            set {
                this.productionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeasonSearchRequest : Request {
        
        private string sortDescField;
        
        private System.Nullable<int> metadataProviderIdField;
        
        private System.Nullable<int> mediaStatusIdField;
        
        private System.Nullable<int> mediaTypeIdField;
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string mediaTitleField;
        
        private System.Nullable<System.DateTime> availableFromDateField;
        
        private System.Nullable<System.DateTime> availableToDateField;
        
        private System.Nullable<int> seasonNumberField;
        
        /// <remarks/>
        public string SortDesc {
            get {
                return this.sortDescField;
            }
            set {
                this.sortDescField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MetadataProviderId {
            get {
                return this.metadataProviderIdField;
            }
            set {
                this.metadataProviderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaStatusId {
            get {
                return this.mediaStatusIdField;
            }
            set {
                this.mediaStatusIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableFromDate {
            get {
                return this.availableFromDateField;
            }
            set {
                this.availableFromDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableToDate {
            get {
                return this.availableToDateField;
            }
            set {
                this.availableToDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SeasonNumber {
            get {
                return this.seasonNumberField;
            }
            set {
                this.seasonNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.microsoft.com/ems/CatalogWebService/")]
    public partial class VideoSeriesSearchRequest : Request {
        
        private System.Nullable<int> metadataProviderIdField;
        
        private System.Nullable<int> mediaStatusIdField;
        
        private System.Nullable<int> mediaTypeIdField;
        
        private System.Nullable<System.Guid> mediaIdField;
        
        private string mediaTitleField;
        
        private System.Nullable<System.DateTime> availableFromDateField;
        
        private System.Nullable<System.DateTime> availableToDateField;
        
        private int[] categoryIdsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MetadataProviderId {
            get {
                return this.metadataProviderIdField;
            }
            set {
                this.metadataProviderIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaStatusId {
            get {
                return this.mediaStatusIdField;
            }
            set {
                this.mediaStatusIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MediaTypeId {
            get {
                return this.mediaTypeIdField;
            }
            set {
                this.mediaTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> MediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public string MediaTitle {
            get {
                return this.mediaTitleField;
            }
            set {
                this.mediaTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableFromDate {
            get {
                return this.availableFromDateField;
            }
            set {
                this.availableFromDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AvailableToDate {
            get {
                return this.availableToDateField;
            }
            set {
                this.availableToDateField = value;
            }
        }
        
        /// <remarks/>
        public int[] CategoryIds {
            get {
                return this.categoryIdsField;
            }
            set {
                this.categoryIdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCatalogIdCompletedEventHandler(object sender, GetCatalogIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCatalogIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCatalogIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExternalIdCompletedEventHandler(object sender, GetExternalIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEntityCompletedEventHandler(object sender, GetEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetEntity1CompletedEventHandler(object sender, GetEntity1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntity1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntity1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableEntityIdCompletedEventHandler(object sender, GetAvailableEntityIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableEntityIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableEntityIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableCategoryIdCompletedEventHandler(object sender, GetAvailableCategoryIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableCategoryIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableCategoryIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableCategorySystemIdCompletedEventHandler(object sender, GetAvailableCategorySystemIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableCategorySystemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableCategorySystemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableRatingSystemIdCompletedEventHandler(object sender, GetAvailableRatingSystemIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRatingSystemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRatingSystemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableRatingValueIdCompletedEventHandler(object sender, GetAvailableRatingValueIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRatingValueIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRatingValueIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableRatingDescriptorIdCompletedEventHandler(object sender, GetAvailableRatingDescriptorIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRatingDescriptorIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRatingDescriptorIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableLicenseTypeIdCompletedEventHandler(object sender, GetAvailableLicenseTypeIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableLicenseTypeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableLicenseTypeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExternalFeedSourceCompletedEventHandler(object sender, GetExternalFeedSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalFeedSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalFeedSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalFeedSource Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalFeedSource)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExternalFeedSource1CompletedEventHandler(object sender, GetExternalFeedSource1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalFeedSource1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalFeedSource1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalFeedSource[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalFeedSource[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExternalFeedMappingObjectCompletedEventHandler(object sender, GetExternalFeedMappingObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalFeedMappingObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalFeedMappingObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalFeedMappingObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalFeedMappingObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExternalFeedMappingObject1CompletedEventHandler(object sender, GetExternalFeedMappingObject1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalFeedMappingObject1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalFeedMappingObject1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalFeedMappingObject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalFeedMappingObject[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveExternalFeedMappingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveEntityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetImageCompletedEventHandler(object sender, GetImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Image Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Image)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SavePublishingBatchRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOfferCompletedEventHandler(object sender, GetOfferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Offer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Offer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMediaOfferCompletedEventHandler(object sender, GetMediaOfferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaOfferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaOfferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaOffer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaOffer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPodcastCompletedEventHandler(object sender, GetPodcastCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPodcastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPodcastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Podcast Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Podcast)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPodcast1CompletedEventHandler(object sender, GetPodcast1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPodcast1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPodcast1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Podcast Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Podcast)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SavePodcastCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVideoCompletedEventHandler(object sender, GetVideoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Video Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Video)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveVideoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVideoSeasonCompletedEventHandler(object sender, GetVideoSeasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoSeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoSeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VideoSeason Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VideoSeason)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveVideoSeasonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVideoSeriesCompletedEventHandler(object sender, GetVideoSeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VideoSeries Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VideoSeries)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveVideoSeriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetContributorRelationshipTypeCompletedEventHandler(object sender, GetContributorRelationshipTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContributorRelationshipTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContributorRelationshipTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContributorRelationshipType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContributorRelationshipType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCountryCompletedEventHandler(object sender, GetCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCountry1CompletedEventHandler(object sender, GetCountry1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountry1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountry1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Country[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Country[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCurrencyCompletedEventHandler(object sender, GetCurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Currency Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Currency)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCurrency1CompletedEventHandler(object sender, GetCurrency1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrency1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrency1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Currency[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Currency[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCategorySystemCompletedEventHandler(object sender, GetCategorySystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategorySystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategorySystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CategorySystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CategorySystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetCategorySystem1CompletedEventHandler(object sender, GetCategorySystem1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategorySystem1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategorySystem1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CategorySystem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CategorySystem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingSystemCompletedEventHandler(object sender, GetRatingSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RatingSystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RatingSystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingSystem1CompletedEventHandler(object sender, GetRatingSystem1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingSystem1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingSystem1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RatingSystem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RatingSystem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetArticleCompletedEventHandler(object sender, GetArticleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArticleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArticleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Article Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Article)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetArticle1CompletedEventHandler(object sender, GetArticle1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArticle1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArticle1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Article[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Article[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetContributorCompletedEventHandler(object sender, GetContributorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContributorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContributorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Contributor Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Contributor)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetContributor1CompletedEventHandler(object sender, GetContributor1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContributor1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContributor1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Contributor[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Contributor[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveVideoEncodingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveAudioEncodingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveContributorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAudioEncodingCompletedEventHandler(object sender, GetAudioEncodingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAudioEncodingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAudioEncodingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AudioEncoding[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AudioEncoding[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetClientTypeCompletedEventHandler(object sender, GetClientTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClientType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClientType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLocaleCompletedEventHandler(object sender, GetLocaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLocaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLocaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Locale[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Locale[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetImageFormatCompletedEventHandler(object sender, GetImageFormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageFormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageFormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImageFormat[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageFormat[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetImageSizeCompletedEventHandler(object sender, GetImageSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImageSize[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImageSize[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMediaRelationshipTypeCompletedEventHandler(object sender, GetMediaRelationshipTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaRelationshipTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaRelationshipTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaRelationshipType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaRelationshipType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPreviewMediaInstanceTypeCompletedEventHandler(object sender, GetPreviewMediaInstanceTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreviewMediaInstanceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreviewMediaInstanceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PreviewMediaInstanceType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PreviewMediaInstanceType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRoleCompletedEventHandler(object sender, GetRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Role[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Role[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetStoreCompletedEventHandler(object sender, GetStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Store[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Store[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTaskStatusCompletedEventHandler(object sender, GetTaskStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTasksByStatusCompletedEventHandler(object sender, GetTasksByStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTasksCompletedEventHandler(object sender, GetTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetAvailableTaskAsXMLCompletedEventHandler(object sender, GetAvailableTaskAsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableTaskAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableTaskAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PurgeTaskQueueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveDRMTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveTask1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserTypeCompletedEventHandler(object sender, GetUserTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVideoDefinitionCompletedEventHandler(object sender, GetVideoDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VideoDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VideoDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVideoEncodingCompletedEventHandler(object sender, GetVideoEncodingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoEncodingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoEncodingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VideoEncoding[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VideoEncoding[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVisibilityLevelCompletedEventHandler(object sender, GetVisibilityLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVisibilityLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVisibilityLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisibilityLevel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisibilityLevel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetVisibilityStatusCompletedEventHandler(object sender, GetVisibilityStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVisibilityStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVisibilityStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VisibilityStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VisibilityStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProviderCompletedEventHandler(object sender, GetProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Provider Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Provider)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetProvider1CompletedEventHandler(object sender, GetProvider1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvider1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvider1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Provider[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Provider[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMetadataProviderCompletedEventHandler(object sender, GetMetadataProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetadataProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetadataProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MetadataProvider Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MetadataProvider)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMetadataProvider1CompletedEventHandler(object sender, GetMetadataProvider1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMetadataProvider1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMetadataProvider1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MetadataProvider[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MetadataProvider[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDRMLicenseIssuerCompletedEventHandler(object sender, GetDRMLicenseIssuerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDRMLicenseIssuerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDRMLicenseIssuerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DRMLicenseIssuer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DRMLicenseIssuer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDRMLicenseIssuer1CompletedEventHandler(object sender, GetDRMLicenseIssuer1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDRMLicenseIssuer1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDRMLicenseIssuer1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DRMLicenseIssuer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DRMLicenseIssuer[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLicenseTypeCompletedEventHandler(object sender, GetLicenseTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLicenseType1CompletedEventHandler(object sender, GetLicenseType1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseType1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseType1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveLicenseTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLicenseClassCompletedEventHandler(object sender, GetLicenseClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseClass Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseClass)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetLicenseClass1CompletedEventHandler(object sender, GetLicenseClass1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseClass1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseClass1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LicenseClass[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LicenseClass[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPricingRuleCompletedEventHandler(object sender, GetPricingRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPricingRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPricingRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PricingRule Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PricingRule)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPricingRule1CompletedEventHandler(object sender, GetPricingRule1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPricingRule1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPricingRule1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PricingRule[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PricingRule[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SavePricingRuleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMediaTypeCompletedEventHandler(object sender, GetMediaTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveGameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGameCompletedEventHandler(object sender, GetGameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Game Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Game)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveGameContentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetGameContentCompletedEventHandler(object sender, GetGameContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGameContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGameContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GameContent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GameContent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPaymentMethodCompletedEventHandler(object sender, GetPaymentMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPaymentMethod1CompletedEventHandler(object sender, GetPaymentMethod1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentMethod1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentMethod1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentType[])(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\WorkflowAssociationData.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Xml.Serialization;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
public partial class WorkflowAssociationData 
{
    private string stepRetryValue;
    private string stepRetryDelay;
    private string psWorkCheckDelay;
    private string propCheckDelay;
    private bool logging;
    private string logPath;
    private string configPath;
    private string emailTo;
    private string toolsMgmtCertificatePart;
    private string toolsMgmtCertificateCert;
    private string toolsMgmtCertificateProd;
    private string toolsMgmtSvrPart;
    private string toolsMgmtSvrCert;
    private string toolsMgmtSvrProd;
    private string xltransSvr;
    private string xltransStartPoint;
    private string xltransEndpointPartNet;
    private string xltransEndpointCertNet;
    private string xltransEndpointProdNet;
    private string xltransStartPointToolsMgmt;
    private string xltransEndpointPartNetToolsMgmt;
    private string xltransEndpointCertNetToolsMgmt;
    private string xltransEndpointProdNetToolsMgmt;
    private string psProductName;
    private string psProductNameTest;
    private string psProductDomain;
    private string psAttachmentAttempts;
    private string psAttachmentDelay;
    private string propCmdRegex;

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string StepRetryValue
    {
        get
        {
            return this.stepRetryValue;
        }
        set
        {
            this.stepRetryValue = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string StepRetryDelay
    {
        get
        {
            return this.stepRetryDelay;
        }
        set
        {
            this.stepRetryDelay = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSWorkCheckDelay
    {
        get
        {
            return this.psWorkCheckDelay;
        }
        set
        {
            this.psWorkCheckDelay = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PropCheckDelay
    {
        get
        {
            return this.propCheckDelay;
        }
        set
        {
            this.propCheckDelay = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public bool LoggingOn
    {
        get 
        {
            return this.logging;
        }
        set 
        {
            this.logging = value;
        }
    }
    
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string LoggingPath {
        get 
        {
            return this.logPath;
        }
        set 
        {
            this.logPath = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ConfigPath
    {
        get 
        {
            return this.configPath;
        }
        set 
        {
            this.configPath = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string EmailTo
    {
        get
        {
            return this.emailTo;
        }
        set
        {
            this.emailTo = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtCertificatePart
    {
        get
        {
            return this.toolsMgmtCertificatePart;
        }
        set
        {
            this.toolsMgmtCertificatePart = value;
        }
    }
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtCertificateCert
    {
        get
        {
            return this.toolsMgmtCertificateCert;
        }
        set
        {
            this.toolsMgmtCertificateCert = value;
        }
    }
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtCertificateProd
    {
        get
        {
            return this.toolsMgmtCertificateProd;
        }
        set
        {
            this.toolsMgmtCertificateProd = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtSvrPart
    {
        get
        {
            return this.toolsMgmtSvrPart;
        }
        set
        {
            this.toolsMgmtSvrPart = value;
        }
    }
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtSvrCert
    {
        get
        {
            return this.toolsMgmtSvrCert;
        }
        set
        {
            this.toolsMgmtSvrCert = value;
        }
    }
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string ToolsMgmtSvrProd
    {
        get
        {
            return this.toolsMgmtSvrProd;
        }
        set
        {
            this.toolsMgmtSvrProd = value;
        }
    }
    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XltransSvr
    {
        get
        {
            return this.xltransSvr;
        }
        set
        {
            this.xltransSvr = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XlTransStartPoint
    {
        get
        {
            return this.xltransStartPoint;
        }
        set
        {
            this.xltransStartPoint = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XlTransEndpointPartNet
    {
        get
        {
            return this.xltransEndpointPartNet;
        }
        set
        {
            this.xltransEndpointPartNet = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XlTransEndpointCertNet
    {
        get
        {
            return this.xltransEndpointCertNet;
        }
        set
        {
            this.xltransEndpointCertNet = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XlTransEndpointProdNet
    {
        get
        {
            return this.xltransEndpointProdNet;
        }
        set
        {
            this.xltransEndpointProdNet = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XltransStartPointToolsMgmt
    {
        get
        {
            return this.xltransStartPointToolsMgmt;
        }
        set
        {
            this.xltransStartPointToolsMgmt = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XltransEndpointPartNetToolsMgmt
    {
        get
        {
            return this.xltransEndpointPartNetToolsMgmt;
        }
        set
        {
            this.xltransEndpointPartNetToolsMgmt = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XltransEndpointCertNetToolsMgmt
    {
        get
        {
            return this.xltransEndpointCertNetToolsMgmt;
        }
        set
        {
            this.xltransEndpointCertNetToolsMgmt = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string XltransEndpointProdNetToolsMgmt
    {
        get
        {
            return this.xltransEndpointProdNetToolsMgmt;
        }
        set
        {
            this.xltransEndpointProdNetToolsMgmt = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSProductName
    {
        get
        {
            return this.psProductName;
        }
        set
        {
            this.psProductName = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSProductNameTest
    {
        get
        {
            return this.psProductNameTest;
        }
        set
        {
            this.psProductNameTest = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSProductDomain
    {
        get
        {
            return this.psProductDomain;
        }
        set
        {
            this.psProductDomain = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSAttachmentAttempts
    {
        get
        {
            return this.psAttachmentAttempts;
        }
        set
        {
            this.psAttachmentAttempts = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PSAttachmentDelay
    {
        get
        {
            return this.psAttachmentDelay;
        }
        set
        {
            this.psAttachmentDelay = value;
        }
    }

    [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string PropCmdRegex
    {
        get
        {
            return this.propCmdRegex;
        }
        set
        {
            this.propCmdRegex = value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\XlTrans.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

namespace PropManagerWorkflow
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "XlTransSoap", Namespace = "http://tempuri.org/")]
    public partial class XlTrans : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback TransferFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetTransferStatusExOperationCompleted;

        private System.Threading.SendOrPostCallback JobTransferFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetTransferStatusOperationCompleted;

        /// <remarks/>
        public XlTrans()
        {
            this.Url = "http://xoccorptls003:1234/XLTrans/xltrans.asmx";
        }

        /// <remarks/>
        public event TransferFileCompletedEventHandler TransferFileCompleted;

        /// <remarks/>
        public event GetTransferStatusExCompletedEventHandler GetTransferStatusExCompleted;

        /// <remarks/>
        public event JobTransferFileCompletedEventHandler JobTransferFileCompleted;

        /// <remarks/>
        public event GetTransferStatusCompletedEventHandler GetTransferStatusCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long TransferFile(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath)
        {
            object[] results = this.Invoke("TransferFile", new object[] {
                    sourceEndpoint,
                    sourceFilePath,
                    destEndpoint,
                    destFilePath});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTransferFile(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("TransferFile", new object[] {
                    sourceEndpoint,
                    sourceFilePath,
                    destEndpoint,
                    destFilePath}, callback, asyncState);
        }

        /// <remarks/>
        public long EndTransferFile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void TransferFileAsync(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath)
        {
            this.TransferFileAsync(sourceEndpoint, sourceFilePath, destEndpoint, destFilePath, null);
        }

        /// <remarks/>
        public void TransferFileAsync(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath, object userState)
        {
            if ((this.TransferFileOperationCompleted == null))
            {
                this.TransferFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFileOperationCompleted);
            }
            this.InvokeAsync("TransferFile", new object[] {
                    sourceEndpoint,
                    sourceFilePath,
                    destEndpoint,
                    destFilePath}, this.TransferFileOperationCompleted, userState);
        }

        private void OnTransferFileOperationCompleted(object arg)
        {
            if ((this.TransferFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFileCompleted(this, new TransferFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransferStatusEx", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransferStatus GetTransferStatusEx(long transferId)
        {
            object[] results = this.Invoke("GetTransferStatusEx", new object[] {
                    transferId});
            return ((TransferStatus)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTransferStatusEx(long transferId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTransferStatusEx", new object[] {
                    transferId}, callback, asyncState);
        }

        /// <remarks/>
        public TransferStatus EndGetTransferStatusEx(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TransferStatus)(results[0]));
        }

        /// <remarks/>
        public void GetTransferStatusExAsync(long transferId)
        {
            this.GetTransferStatusExAsync(transferId, null);
        }

        /// <remarks/>
        public void GetTransferStatusExAsync(long transferId, object userState)
        {
            if ((this.GetTransferStatusExOperationCompleted == null))
            {
                this.GetTransferStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransferStatusExOperationCompleted);
            }
            this.InvokeAsync("GetTransferStatusEx", new object[] {
                    transferId}, this.GetTransferStatusExOperationCompleted, userState);
        }

        private void OnGetTransferStatusExOperationCompleted(object arg)
        {
            if ((this.GetTransferStatusExCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransferStatusExCompleted(this, new GetTransferStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/JobTransferFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long JobTransferFile(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath)
        {
            object[] results = this.Invoke("JobTransferFile", new object[] {
                    srcRootID,
                    srcFilePath,
                    dstRootID,
                    jobId,
                    dstFilePath});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginJobTransferFile(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("JobTransferFile", new object[] {
                    srcRootID,
                    srcFilePath,
                    dstRootID,
                    jobId,
                    dstFilePath}, callback, asyncState);
        }

        /// <remarks/>
        public long EndJobTransferFile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void JobTransferFileAsync(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath)
        {
            this.JobTransferFileAsync(srcRootID, srcFilePath, dstRootID, jobId, dstFilePath, null);
        }

        /// <remarks/>
        public void JobTransferFileAsync(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath, object userState)
        {
            if ((this.JobTransferFileOperationCompleted == null))
            {
                this.JobTransferFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJobTransferFileOperationCompleted);
            }
            this.InvokeAsync("JobTransferFile", new object[] {
                    srcRootID,
                    srcFilePath,
                    dstRootID,
                    jobId,
                    dstFilePath}, this.JobTransferFileOperationCompleted, userState);
        }

        private void OnJobTransferFileOperationCompleted(object arg)
        {
            if ((this.JobTransferFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JobTransferFileCompleted(this, new JobTransferFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransferStatus", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransferState GetTransferStatus(long transferId)
        {
            object[] results = this.Invoke("GetTransferStatus", new object[] {
                    transferId});
            return ((TransferState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTransferStatus(long transferId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTransferStatus", new object[] {
                    transferId}, callback, asyncState);
        }

        /// <remarks/>
        public TransferState EndGetTransferStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TransferState)(results[0]));
        }

        /// <remarks/>
        public void GetTransferStatusAsync(long transferId)
        {
            this.GetTransferStatusAsync(transferId, null);
        }

        /// <remarks/>
        public void GetTransferStatusAsync(long transferId, object userState)
        {
            if ((this.GetTransferStatusOperationCompleted == null))
            {
                this.GetTransferStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransferStatusOperationCompleted);
            }
            this.InvokeAsync("GetTransferStatus", new object[] {
                    transferId}, this.GetTransferStatusOperationCompleted, userState);
        }

        private void OnGetTransferStatusOperationCompleted(object arg)
        {
            if ((this.GetTransferStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransferStatusCompleted(this, new GetTransferStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class TransferStatus
    {

        private TransferState stateField;

        private int errorcodeField;

        private string messageField;

        /// <remarks/>
        public TransferState state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        public int errorcode
        {
            get
            {
                return this.errorcodeField;
            }
            set
            {
                this.errorcodeField = value;
            }
        }

        /// <remarks/>
        public string message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public enum TransferState
    {

        /// <remarks/>
        NotFound,

        /// <remarks/>
        Failed,

        /// <remarks/>
        Pending,

        /// <remarks/>
        Running,

        /// <remarks/>
        Complete,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TransferFileCompletedEventHandler(object sender, TransferFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTransferStatusExCompletedEventHandler(object sender, GetTransferStatusExCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransferStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTransferStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TransferStatus Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TransferStatus)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void JobTransferFileCompletedEventHandler(object sender, JobTransferFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JobTransferFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal JobTransferFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetTransferStatusCompletedEventHandler(object sender, GetTransferStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransferStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTransferStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TransferState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TransferState)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\Workflow.cs ===
/* ***************************************************************
 * Copyright (C) 2008 Microsoft Corporation.  All rights reserved.
 * 
 * Prop Manager v2.x - WORKFLOW
 * Developer: Mikelangelo Marinaro (v-mikma)
 * workflow.cs - The primary code that executes the major workflow steps
 * 
 * Version: 2.0.4.2
 * Start Date: March 10, 2008 (v2.0)
 * Last Updated: October, 2008
 * ***************************************************************/


using System;
using System.IO;
using System.Text;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Drawing;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Design;
using System.Workflow.Runtime;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;
using System.Xml.Serialization;
using System.Xml;
using System.Web.Mail;
using System.Configuration;
using System.Diagnostics;
using System.Web;
using System.Web.UI;
using System.Data;
using System.Security.Cryptography.X509Certificates;
using System.Reflection;

using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.Workflow;
using Microsoft.SharePoint.WorkflowActions;

using ProductStudio;

namespace PropManagerWorkflow
{
    [Serializable()]
    public struct SerializableKeyValuePair
    {
        public string key;
        public string value;
    }

    public sealed partial class Workflow : SequentialWorkflowActivity
    {
        #region Debug Vars
        public bool g_skipPSBug = false;
        public bool g_skipTransferFiles = false;
        public bool g_skipSendMail = false;
        public bool g_skipPSWorkNotComplete = false;
        #endregion

        #region Retry/Delay Vars
        public int g_stepRetryValue;
        public int g_stepRetryDelay;

        public double g_stepDelayMinutes;
        public double g_psAttachFilesDelayMinutes;
        public double g_transferDelayMinutes;
        public double g_PrePropDelayMinutes;
        public double g_psWorkCheckDelayMinutes;
        public double g_propCompletionCheckDelayMinutes;
        #endregion

        #region Request Variables
        public bool g_TEST;
        public long g_toolsMgmtJobID = 0;
        public bool g_toolsMgmtSuccess;
        public string g_propFailureTaskNotes = "";

        public PropManagerRequest.RequestInfo g_requestObj;
        public WorkflowAssociationData g_assocObj;

        ArrayList g_badFiles = new ArrayList();
        ArrayList g_actionRanks = new ArrayList();

        public string g_emailTo = "";

        // PRODUCT STUDIO VARIABLES
        public int g_psBugID = 0;
        public string g_psProductName = "";
        public string[] g_psDomains;

        public int g_psConnectRetryCount;
        public int g_psConnectRetryCountTime;

        public int g_psAttachFilesRetries;
        public int g_psAttachFilesRetriesTime;
        public bool g_psSetAutoPropState;
        public string g_resolvedTo;

        // NETWORK VARIABLES
        public string g_sharedFolder = "";
        Stack g_transferStack = new Stack();
        Stack g_nameStack = new Stack();
        long g_transferSizeBytes = 0;
        long g_tranferredBytes = 0;
        public string g_tempDir = ""; // temp folder where data is temporarily saved to so it can be attached to a PS Bug

        // Tools Management vars
        public string g_ToolsMgmtCertificatePart = "";
        public string g_ToolsMgmtCertificateCert = "";
        public string g_ToolsMgmtCertificateProd = "";

        public string g_ToolsMgmtSvrPart = "";
        public string g_ToolsMgmtSvrCert = "";
        public string g_ToolsMgmtSvrProd = "";

        // XlTrans vars
        public string g_XlTransSvr = "";
        public string g_startPoint = "";  // XlTrans startpoint name
        public string g_endPointPartnerNet = "";    // XlTrans endpoint name
        public string g_endPointCertNet = "";   // XlTrans endpoint name
        public string g_endPointProduction = "";    // XlTrans endpoint name
        public string g_startPointToolsMgmt = "";  // XlTrans startpoint name
        public string g_endPointPartnerNetToolsMgmt = "";    // XlTrans endpoint name
        public string g_endPointCertNetToolsMgmt = "";   // XlTrans endpoint name
        public string g_endPointProductionToolsMgmt = "";    // XlTrans endpoint name

        #endregion

        #region Workflow Variables
        public string g_configPath = "";
        public const string g_systemUser = @"SHAREPOINT\system";

        public string g_statusLink = "";
        public string g_requestXMLFileName = "";
        public string g_lastPSException = "";
        public string g_lastTransferFilesException = "";
        public int g_PSWorkCheckCount = 0;
        public string g_ResolvedAsType;
        public bool g_SkipPropApproval = false;
        public bool g_PropRetrying = false;
        public bool g_DoWeProp = false;

        public int g_curRetryCount;
        public int g_curAttachFilesRetryCount;

        public bool g_killWorkflow = false;

        public bool g_InitWorkflowSucceeded = false;
        public bool g_PSBugSucceeded = false;
        public bool g_PSBugAttachFilesSucceeded = false;
        public bool g_CreatePropJobSucceeded = false;
        public bool g_TransferFilesSucceeded = false;
        public bool g_SendEmailSucceeded = false;
        public bool g_PropRequestSucceeded = false;
        public bool g_PropResultsCheckSucceeded = false;
        public bool g_PropResultsSucceeded = false;
        public bool g_ResolveAsSucceeded = false;
        public bool g_SendFinalEmailSucceeded = false;
        public bool g_PSWorkNotCompleteSucceeded = false;
        public bool g_AttachRequestXMLSucceeded = false;

        public bool g_PropProcessSucceeded = false;

        public Microsoft.SharePoint.Workflow.SPWorkflowActivationProperties workflowProperties = new Microsoft.SharePoint.Workflow.SPWorkflowActivationProperties();

        // failure task
        public Guid failureTaskId = default(System.Guid);
        public SPWorkflowTaskProperties failureTaskProperties = new SPWorkflowTaskProperties();
        public SPWorkflowTaskProperties failureTaskAfterProperties = new SPWorkflowTaskProperties();

        // approval task
        public Guid approvalTaskId = default(System.Guid);
        public string approvalTaskTypeId = "0x0108010084565D92BEFE4a75A28C2F658B7C2041";
        public SPWorkflowTaskProperties approvalTaskProperties = new SPWorkflowTaskProperties();
        public SPWorkflowTaskProperties approvalTaskAfterProperties = new SPWorkflowTaskProperties();

        public bool FailureTaskNotCompleted = true;
        public string FailureTaskStatus;
        public string FailureTaskOutcome;
        public string FailureTaskNotes;

        public bool ApprovalTaskNotCompleted = true;
        public bool ApprovalTaskNotApproved = true;
        public string ApprovalTaskStatus;
        public string ApprovalTaskOutcome;
        public string ApprovalPropDateTime;
        public string ApprovalTaskNotes;
        public string ApprovalTaskUser;
        public ArrayList ApprovalPropCommands;
        public ArrayList ApprovalPropCommands_Backup; // used only if we need to retry a prop

        // modification page
        public Guid modPageId = new Guid("c7a53c4e-ab25-450f-a595-ae2b380d7c3a");
        public string ContextData;
        public string g_modUser;
        #endregion

        #region Event IDs
        // Event IDs
        public const int EVENTID_PS_Connection_Error = 26550;
        public const int EVENTID_PS_Foreign_Error = 26551;
        public const int EVENTID_XlTrans_Transfer_Error = 26552;
        public const int EVENTID_Mail_Send_Error = 26553;
        public const int EVENTID_Logging_Init_Error = 26554;
        public const int EVENTID_Workflow_System_Error = 26555;
        public const int EVENTID_Tools_Management_Call_Error = 26556;
        #endregion

        #region Application Logging Variables
        // for logging setup
        private static string g_logFile;

        // logging state is determined by the association page
        private static bool g_logging;

        // the global logging stream
        private static StreamWriter g_swLog;

        // handles all chat with the event log
        private static EventLog g_eventLog;
        #endregion


        public Workflow()
        {
            InitializeComponent();
        }
         
        // ----------------------------------------------------------------------
        // WORKFLOW STEPS
        // ----------------------------------------------------------------------

        /// <summary>
        /// Initializes the workflow's global values and deserializes the request initiation data and the workflow's association data.
        /// </summary>
        private void InitWorkflow_ExecuteCode(object sender, EventArgs e)
        {
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowStarted, "", "The workflow has successfully started.", "", g_systemUser);
            
            string stepName = "Initialize Workflow";

            try
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Started", "");
                workflowProperties.Item["Request Status"] = "In Progress";
                workflowProperties.Item["Current Step"] = stepName;
                workflowProperties.Item["PS Bug"] = "N/A";

                g_statusLink = workflowProperties.WebUrl + "/_layouts/WrkStat.aspx?List=" + SPHttpUtility.HtmlEncode(workflowProperties.ListId) + "&WorkflowInstanceID=" + SPHttpUtility.HtmlEncode(workflowProperties.WorkflowId);
                workflowProperties.Item["Request Title"] = g_statusLink + ", " + workflowProperties.Item.Title;

                workflowProperties.Item.Update();

                try
                {
                    // Deserialize the initiation data (Prop Manager request data)
                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(this.workflowProperties.InitiationData));
                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                    g_requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Deserializing request initiation data.", "Complete", "");
                }
                catch (Exception ex)
                {
                    RetryStep(stepName, "Failed to deserialize the request initiation data. Exception caught: " + ex.Message, 0);
                    return;
                }

                try
                {
                    // load the association and initiation data into the modification form's ContextData variable with a delimeter between them
                    ContextData = this.workflowProperties.AssociationData + "::::" + this.workflowProperties.InitiationData;

                    // Deserialize the association data (workflow configuration data)
                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(this.workflowProperties.AssociationData));
                    XmlSerializer serializer = new XmlSerializer(typeof(WorkflowAssociationData));
                    g_assocObj = (WorkflowAssociationData)serializer.Deserialize(stream);
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Deserializing workflow association data.", "Complete", "");
                }
                catch (Exception ex)
                {
                    RetryStep(stepName, "Failed to deserialize the workflow association data. Exception caught" + ex.Message, 0);
                    return;
                }

                PopulateVars();
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "Exception caught: " + ex.Message, 0);
                return;
            }

            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Complete", "");
            g_curRetryCount = this.g_stepRetryValue;
            g_InitWorkflowSucceeded = true;
        }

        /// <summary>
        /// Generates a Product Studio bug based on the initiation data provided by a Prop Manager request.
        /// </summary>
        private void PSBug_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Create PS Bug";
            if (g_skipPSBug)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Step skipped (debug mode ON).", "Complete", "");
                g_PSBugSucceeded = true;
                return;
            }

            InitStep(stepName);

            // set PS variables as they were in Prop Manager v1.5.2
            string type = g_requestObj.psIssueType;
            string title = g_requestObj.psTitle;
            string env = g_requestObj.requestEnvironmentName;
            int priority = g_requestObj.psPriority;
            string dateTime = g_requestObj.psPropDateTime;
            string description = g_requestObj.psDescription;
            string reproSteps = g_requestObj.psReproSteps;
            string requestGUID = g_requestObj.requestGUID;
            string certBug = g_requestObj.psLinkedBug;
            int bugType = g_requestObj.psLinkedBugType;

            int bugID = 0;
            bool hasInvalidField = false;
            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;
            Fields psFields = null;
            DatastoreItemList psDataList = null;
            DatastoreItem psDataItem = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore, true))
            {
                RetryStep(stepName, "Failed to connect to Product Studio on all configured domains. Exception caught: " + g_lastPSException, EVENTID_PS_Connection_Error);
                return;
            }

            string productionEnv = "";
            try
            {
                StreamReader sr = new StreamReader(g_configPath + "environment_mappings.txt");

                string curLine = "";
                while (!sr.EndOfStream)
                {
                    curLine = sr.ReadLine();
                    if (curLine == "" || curLine[0] == '#') continue; // skip comments and empty string

                    string[] lineParts = curLine.Split(':');
                    if (lineParts[0].Trim().ToUpper() == env.Trim().ToUpper())
                    {
                        env = lineParts[1].Trim();
                        if (lineParts.Length > 2)
                            productionEnv = lineParts[2].Trim();
                    }
                }
                sr.Close();
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "Failed to consume environment mappings. Exception caught: " + ex.Message, 0);
                return;
            }

            try
            {
                // Create a new datastore instance.
                psDataList = new ProductStudio.DatastoreItemListClass();
                psDataList.Datastore = psDataStore;

                // Create a blank bug
                psDataList.CreateBlank(PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs);
                psDataItem = psDataList.DatastoreItems.Add(null, PsApplyRulesMask.psApplyRulesAll);
                psFields = psDataItem.Fields;

                psFields["Title"].Value = title;
                psFields["TreeID"].Value = TreeIDFromPath(psDataStore.RootNode, env);
                psFields["Assigned To"].Value = "xladmins";

                if (g_TEST && type == "Change Request")
                    psFields["Issue type"].Value = "Other";
                else
                    psFields["Issue type"].Value = type;

                psFields["How found"].Value = "Other";
                psFields["Severity"].Value = priority;
                psFields["Title ID"].Value = "Other (detailed below)";

                psFields["Service Component"].Value = "DB UODB";
                psFields["OS"].Value = "Windows 2003 Enterprise Server";

                if (description.Contains("Configure XLSP Server") || description.Contains("Configure EA LSP Server"))
                {
                    psFields["War Approved"].Value = "Consider";
                    psFields["Type of Change"].Value = "SQL Configuration";

                    if (g_TEST && productionEnv == "Seattle Level 3")
                    {
                        psFields["Production Environment"].Value = "Production (Level 3)";
                        psFields["Verified By"].Value = "xoc";
                    }
                    else
                        psFields["Production Environment"].Value = productionEnv;

                    if (!g_TEST)
                    {
                        psFields["Verified By"].Value = "xoc";
                        psFields["Fix Priority"].Value = priority;
                        psFields["Fix ETA"].Value = "Unknown";
                        psFields["Prop Date, Time"].Value = "tbd";
                        psFields["Tested In PreProd"].Value = "No";
                    }
                }
                else
                {
                    psFields["War Approved"].Value = "Investigate";

                    if (!g_TEST)
                    {
                        psFields["Fix Priority"].Value = priority;
                        psFields["Fix ETA"].Value = "Unknown";
                        psFields["Production Environment"].Value = productionEnv;
                        psFields["Prop Date, Time"].Value = dateTime;
                    }
                }

                if (g_psSetAutoPropState)
                    psFields["Autoprop State"].Value = "Ready";

                if (priority == 1)
                    description += Environment.NewLine + Environment.NewLine + "This work is to be completed within 4 hours.";
                else if (priority == 2)
                    description += Environment.NewLine + Environment.NewLine + "This work is to be completed within 12 hours.";
                else if (priority == 3)
                    description += Environment.NewLine + Environment.NewLine + "This work is to be completed within 24 hours.";

                if (type == "1") description = "NOTE: this bug is dependently linked to a parent bug. See Links for details." + Environment.NewLine + Environment.NewLine;
                description = "[Bug automatically created by Prop Manager]" + Environment.NewLine + Environment.NewLine + description;

                psFields["Description"].Value = description;

                reproSteps += "To access this workflow's status and history page, go here: " + Environment.NewLine + "\"" + g_statusLink + "\"";
                if (g_requestObj.filePaths.Count > 0)
                {
                    psFields["Repro Steps"].Value = "File drop point: " + g_sharedFolder + requestGUID + Environment.NewLine +
                                                    "Note: files will remain in this directory for 2 weeks (14 days). If the bug is closed at that time, the files will be deleted." + Environment.NewLine + Environment.NewLine +
                                                    "Note: if files were attached, the ones greater than 50 MB are linked." + Environment.NewLine + Environment.NewLine +
                                                    reproSteps;
                }
                else
                    psFields["Repro Steps"].Value = reproSteps;

                if (g_requestObj.requestSubmitter.Contains("\\"))
                {
                    string[] tempStr = g_requestObj.requestSubmitter.Split('\\');
                    psFields["Changed By"].Value = tempStr[1];
                    psFields["Opened By"].Value = tempStr[1];
                }

                //  Let's make sure all fields are valid before saving
                foreach (ProductStudio.Field psField in psDataItem.Fields)
                {
                    if (psField.Validity != PsFieldStatusEnum.psFieldStatusValid)
                    {
                        hasInvalidField = true;
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Field validation problem: " + psField.Name + " - " + psField.Validity.ToString() + "Invalid value: " + psField.Value, "Error", "");
                    }
                }

                if (hasInvalidField)
                {
                    // *** Add workflow logging
                    LogMessage("Step: " + stepName + ". Error: invalid fields detected when trying to create a Product Studio bug.");
                    RetryStep(stepName, "Invalid Product Studio fields detected while assembling a bug.", 0);
                    return;
                }
                else
                {
                    psDataItem.Save(true);
                    bugID = Convert.ToInt32(psFields["ID"].Value);
                    g_psBugID = bugID;

                    workflowProperties.Item["PS Bug"] = "<a href='http://psph/bug/" + g_psProductName + ":" + g_psBugID.ToString() + "'>" + g_psBugID.ToString() + "</a> (" + g_psProductName + ")";
                    workflowProperties.Item.Update();

                    // add as a related or dependent link
                    if (certBug != "")
                    {
                        Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, bugID);
                        myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);

                        if (bugType == 0)
                            myBug.AddRelatedLink(Convert.ToInt32(certBug), g_psProductName);
                        else if (bugType == 1)
                            myBug.MakeDependentLinkRequest(Convert.ToInt32(certBug), g_psProductName, "");

                        myBug.Fields["Changed By"].Value = "xoc";
                        myBug.Save(true);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage("Step: " + stepName + ". Failed to create a Product Studio bug. Exception caught: " + ex.Message);
                RetryStep(stepName, "Exception caught: " + ex.Message, EVENTID_PS_Foreign_Error);
                return;
            }
            finally
            {
                try
                {
                    psDirectory.Disconnect();
                }
                catch (Exception) { /* if we can't disconnect, we don't care. */ }
            }

            if (bugID != 0)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Product Studio Bug #" + bugID.ToString() + " (" + g_psProductName + ")" + " has been successfully created.", "Complete", "");
                LogMessage("Step: " + stepName + ". Product Studio Bug #" + bugID.ToString() + " (" + g_psProductName + ")" + " has been successfully created!");
                g_curRetryCount = this.g_stepRetryValue;
                g_PSBugSucceeded = true;
            }
        }
        /// <summary>
        /// Attaches all requested files to the newly created PS bug.
        /// </summary>
        private void PSBugAttachFiles_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Create PS Bug";
            InitLogging();

            workflowProperties.Item["Request Status"] = "In Progress";
            workflowProperties.Item.Update();

            bool succeeded = false;
            if (g_requestObj.filePaths.Count > 0 && g_requestObj.psAttachFiles)
            {
                string onFailure = "Note: No files were attached to this bug because of a Product Studio error. Please attach the relevant files located in the file location (in the Repro Steps) to this bug manually. The XML file representing this request is located elsewhere and should also be manually attached. This file can be accessed here (relative to the server Prop Manager is running on): " + Environment.NewLine + g_requestObj.serializedTempPath + g_requestXMLFileName;
                if (!AttachFilesToPSBug(g_psBugID, g_requestObj.filePaths, onFailure) && g_curAttachFilesRetryCount > -1)
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not attach files to PS Bug #" + g_psBugID.ToString() + ". Exception caught: " + g_lastPSException, "Error", "");
                    if (g_curAttachFilesRetryCount > 0)
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Retry attempt #" + Convert.ToString(this.g_psAttachFilesRetries - this.g_curAttachFilesRetryCount + 1) + " (of " + this.g_psAttachFilesRetries.ToString() + ") for attaching files.", "Started", "");
                    LogMessage("Could not attach files to PS Bug #" + g_psBugID.ToString() + ". Exception caught: " + g_lastPSException + ". Retry attempt #" + Convert.ToString(this.g_psAttachFilesRetries - g_curAttachFilesRetryCount + 1) + " is next.");

                    g_curAttachFilesRetryCount--;
                    return;
                }
                else if (g_curAttachFilesRetryCount == -1 && g_psAttachFilesRetries > 0)
                    succeeded = false;
                else
                    succeeded = true;
            }

            if (g_requestObj.psAttachFiles)
            {
                if (!succeeded)
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed attaching files to PS Bug #" + g_psBugID.ToString() + " after " + this.g_psAttachFilesRetries.ToString() + " retry attempt(s). Exception caught: " + g_lastPSException, "Error", "");
                    LogMessage("Failed attaching files to PS Bug #" + g_psBugID.ToString() + " after " + this.g_psAttachFilesRetries.ToString() + " retry attempt(s). Exception caught: " + g_lastPSException);
                }
                else
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "All files were successfully attached to PS Bug #" + g_psBugID.ToString() + ".", "Complete", "");
                    LogMessage("All files (not listed above as failed) were successfully attached to PS Bug #" + g_psBugID.ToString() + ".");
                }
            }

            g_curAttachFilesRetryCount = g_psAttachFilesRetries;
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Complete", "");
            g_PSBugAttachFilesSucceeded = true;
        }

        /// <summary>
        /// Determines which request types should utilize propping functionality.
        /// </summary>
        private void DeterminePropState_ExecuteCode(object sender, EventArgs e)
        {
            if (!DoWeProp(g_requestObj.requestName, g_requestObj.requestEnvironmentName))
            {
                g_SkipPropApproval = true;
                g_DoWeProp = false;
            }
            else
                g_DoWeProp = true;
        }

        private void SetPropProcessFalse_ExecuteCode(object sender, EventArgs e)
        {
            g_PropProcessSucceeded = true;
        }

        private void CreateToolsMgmtJob_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Create Prop Job";
            InitStep(stepName);

            JobInfo jobInfo = new JobInfo();
            ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
            try
            {
                g_toolsMgmtJobID = toolsMgmtObj.CreateJob("Prop Manager Request {" + g_requestObj.requestGUID + "}", out jobInfo);
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "Failed to create a Tools Management job. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error);
                return;
            }

            CompleteStep(stepName, "Tools Management job successfully created (Job ID #" + g_toolsMgmtJobID + ").");
            g_CreatePropJobSucceeded = true;
        }

        /// <summary>
        /// Transfers required files from the user file drop point to the XOFT environment endpoints.
        /// </summary>
        private void TransferFilesInit_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Transfer Files";
            if (g_skipTransferFiles)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Step skipped (debug mode ON).", "Complete", "");
                g_TransferFilesSucceeded = true;
                return;
            }

            InitStep(stepName);

            ArrayList files = new ArrayList();
            if (g_badFiles.Count == 0)
                files = g_requestObj.filePaths;
            else
            {
                files = new ArrayList(g_badFiles);
                g_badFiles.Clear();
            }

            if (files.Count == 0)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "There are no files to transfer. Skipping step...", "Complete", "");
                g_TransferFilesSucceeded = true;
                return;
            }

            string envName = g_requestObj.requestEnvironmentName;
            string description = g_requestObj.requestName;

            string startFolder = g_requestObj.requestGUID;
            string destFolder = "";
            string startPoint = "";
            string endPoint = "";

            if (g_SkipPropApproval) // this means we're NOT propping
            {
                startPoint = g_startPoint;
                destFolder = g_requestObj.requestTitleID + "_" + g_psBugID.ToString() + "_" + g_requestObj.requestGUID;

                switch (envName)
                {
                    case "PartnerNet":
                        endPoint = g_endPointPartnerNet;
                        break;

                    case "CertNet":
                        endPoint = g_endPointCertNet;
                        break;

                    case "Production":
                        endPoint = g_endPointProduction;
                        break;
                }
            }
            else // this means we're propping via Tools Management
            {
                startPoint = g_startPointToolsMgmt;
                destFolder = g_toolsMgmtJobID.ToString();
               
                switch (envName)
                {
                    case "PartnerNet":
                        endPoint = g_endPointPartnerNetToolsMgmt;
                        break;

                    case "CertNet":
                        endPoint = g_endPointCertNetToolsMgmt;
                        break;

                    case "Production":
                        endPoint = g_endPointProductionToolsMgmt;
                        break;
                }
            }

            FileInfo fInfo;
            g_transferSizeBytes = 0;
            g_tranferredBytes = 0;
            for (int i = 0; i < files.Count; i++)
            {
                try
                {
                    fInfo = new FileInfo(files[i].ToString());
                    g_transferSizeBytes += fInfo.Length;
                }
                catch (Exception) {/* any errors here are handled later */}
            }
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "There are " + files.Count.ToString() + " files detected totalling " + GetSensibleByteSize(g_transferSizeBytes) + " remaining.", "Started", "");

            XlTrans xltransObj = new XlTrans();
            xltransObj.Url = g_XlTransSvr;

            for (int i = 0; i < files.Count; i++)
            {
                try
                {
                    g_transferStack.Push(xltransObj.TransferFile(startPoint, startFolder + "\\" + Path.GetFileName(files[i].ToString()), endPoint, destFolder + "\\" + Path.GetFileName(files[i].ToString())));
                    g_nameStack.Push(files[i].ToString());
                }
                catch (Exception ex)
                {
                    g_badFiles.Add(files[i]);
                    g_lastTransferFilesException = ex.Message;
                    LogMessage("Step: " + stepName + ". File failed to transfer: '" + files[i].ToString() + "'. Exception caught: " + ex.Message);
                }
            }
        }
        private void TransferFiles_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Transfer Files";
            InitLogging();

            workflowProperties.Item["Request Status"] = "In Progress";
            workflowProperties.Item.Update();

            XlTrans xltransObj = new XlTrans();
            xltransObj.Url = g_XlTransSvr;

            FileInfo fInfo;
            long meg100 = 104857600;
            bool notPending = true;
            while (notPending && g_transferStack.Count > 0)
            {
                TransferStatus tStatus = xltransObj.GetTransferStatusEx(Convert.ToInt64(g_transferStack.Peek()));

                switch (tStatus.state.ToString())
                {
                    case "NotFound":
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not find file '" + Path.GetFileName(g_nameStack.Peek().ToString()) + "'", "Error", "");
                        g_transferStack.Pop();
                        g_nameStack.Pop();
                        break;

                    case "Failed":
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to transfer file '" + Path.GetFileName(g_nameStack.Peek().ToString()) + "'", "Error", "");
                        g_badFiles.Add(g_nameStack.Peek().ToString());
                        g_transferStack.Pop();
                        g_nameStack.Pop();
                        break;

                    case "Pending":
                        fInfo = new FileInfo(g_nameStack.Peek().ToString());
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Transferring file '" + Path.GetFileName(g_nameStack.Peek().ToString()) + "' (" + GetSensibleByteSize(fInfo.Length) + ")", "In Progress", "");

                        // delay length is determined by how large the file is. We don't want to spam output on large files.
                        if (fInfo.Length <= meg100 * 5)
                            g_transferDelayMinutes = 1;
                        else
                            g_transferDelayMinutes = (double)(int)(fInfo.Length / (meg100 * 5));

                        notPending = false;
                        break;

                    case "Complete":
                        fInfo = new FileInfo(g_nameStack.Peek().ToString());
                        g_tranferredBytes += fInfo.Length;
                        int percentageComplete = (int)(((double)g_tranferredBytes / (double)g_transferSizeBytes) * 100.0);

                        string outcome = "";
                        if (percentageComplete == 100) outcome = "Complete";
                        else outcome = "In Progress";

                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Transfer of file '" + Path.GetFileName(g_nameStack.Peek().ToString()) + "' (" + GetSensibleByteSize(fInfo.Length) + ") is complete.", "Complete", "");
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, percentageComplete.ToString() + "% complete (" + GetSensibleByteSize(g_tranferredBytes) + "/" + GetSensibleByteSize(g_transferSizeBytes) + ")", outcome, "");

                        g_transferStack.Pop();
                        g_nameStack.Pop();
                        break;

                    default:
                        fInfo = new FileInfo(g_nameStack.Peek().ToString());
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Transferring file '" + Path.GetFileName(g_nameStack.Peek().ToString()) + "' (" + GetSensibleByteSize(fInfo.Length) + ")", "In Progress", "");

                        // delay length is determined by how large the file is. We don't want to spam output on large files.
                        if (fInfo.Length <= meg100 * 5)
                            g_transferDelayMinutes = 1;
                        else
                            g_transferDelayMinutes = (double)(int)(fInfo.Length / (meg100 * 5));

                        notPending = false;
                        break;
                }
            }
        }
        private void TransferFilesVerify_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Transfer Files";
            InitLogging();

            workflowProperties.Item["Request Status"] = "In Progress";
            workflowProperties.Item.Update();

            if (g_badFiles.Count > 0)
            {
                LogMessage("Step: " + stepName + ". One or more files failed to transfer. Retrying bad files...");
                RetryStep(stepName, "One or more files failed to transfer.", EVENTID_XlTrans_Transfer_Error);
                return;
            }

            LogMessage("Step: " + stepName + ". All files were successfully transferred!");
            g_TransferFilesSucceeded = true;
            g_curRetryCount = this.g_stepRetryValue;
        }

        /// <summary>
        /// Generates an E-mail based on the initiation data provided by a Prop Manager request.
        /// </summary>
        private void SendMail_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Send E-mail";
            if (g_skipSendMail)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Step skipped (debug mode ON).", "Complete", "");
                g_SendEmailSucceeded = true;
                return;
            }

            InitStep(stepName);

            string emailTo = "";
            string emailCc = "";
            string subject = "PS Bug #" + g_psBugID.ToString() + g_requestObj.emailTitle;

            string psDBLink = "<a href='http://psph/bug/" + g_psProductName + ":" + g_psBugID.ToString() + "'>" + g_psBugID.ToString() + "</a> (" + g_psProductName + ")";
            string htmlBody = "<b>Bug ID: </b> " + psDBLink + "<br>" + g_requestObj.emailHTMLBody;
            if (g_requestObj.filePaths.Count > 0)
                htmlBody += "<br><br><b>File Endpoint Folder Name</b>: " + g_requestObj.requestTitleID + "_" + g_psBugID.ToString() + "_" + g_requestObj.requestGUID;
            htmlBody += "<br><br><i>Click <a href='" + g_statusLink + "'>here</a> to view this workflow's <b>status and history page</b>.</i>";
            htmlBody = "<font size=5>Request Information</font><br><br>" + htmlBody + "<br><br><font size=2>Generated by Prop Manager</font>";

            string toList = g_emailTo;
            string[] toAry = null;
            if (toList != "")
            {
                toAry = toList.Split(';');
                toList = "";

                for (int i = 0; i < toAry.Length; i++)
                {
                    if (!toAry[i].Contains("@") && toAry[i] != "")
                        toAry[i] += "@microsoft.com";
                    toList += toAry[i] + ";";
                }
            }
            emailTo = toList;

            string ccList = g_requestObj.emailCCList;
            string[] ccAry = null;
            if (ccList != "")
            {
                ccAry = ccList.Split(';');
                ccList = "";

                for (int i = 0; i < ccAry.Length; i++)
                {
                    if (!ccAry[i].Contains("@") && ccAry[i] != "")
                        ccAry[i] += "@microsoft.com";
                    ccList += ccAry[i] + ";";
                }
            }
            if (g_requestObj.requestSubmitter.Contains("\\"))
            {
                string[] tempStr = g_requestObj.requestSubmitter.Split('\\');
                if (tempStr[1] != "")
                    emailCc = tempStr[1] + "@microsoft.com;" + ccList;
                else
                    emailCc = ccList;
            }
            else
                emailCc = ccList;

            System.Collections.Specialized.StringDictionary messageHeaders = new System.Collections.Specialized.StringDictionary();
            messageHeaders.Add("to", emailTo);
            messageHeaders.Add("cc", emailCc);
            messageHeaders.Add("subject", subject);
            messageHeaders.Add("reply-to", emailTo);

            try
            {
                if (!SPUtility.SendEmail(this.workflowProperties.Web, messageHeaders, htmlBody))
                {
                    LogMessage("Step: " + stepName + ". Request e-mail failed to send. Verify that SharePoint is configured to use a valid SMTP server.");
                    RetryStep(stepName, "Failed to send e-mail. Verify that SharePoint is configured to use a valid SMTP server.", EVENTID_Mail_Send_Error);
                    return;
                }
            }
            catch (Exception ex)
            {
                LogMessage("Step: " + stepName + ". Request e-mail failed to send. Exception caught: " + ex.Message);
                RetryStep(stepName, "Exception caught: " + ex.Message + " Failed to send e-mail.", EVENTID_Mail_Send_Error);
                return;
            }

            CompleteStep(stepName, "An e-mail has been successfully submitted.");
            g_SendEmailSucceeded = true;
        }

        /// <summary>
        /// Computes how long the workflow should wait before propping this request. 0 = prop now.
        /// </summary>
        private void ComputePropDelay_ExecuteCode(object sender, EventArgs e)
        {
            string[] dateTimeParts = ApprovalPropDateTime.Split(' ');
            string[] dateParts = dateTimeParts[0].Split('/');
            int hour = Convert.ToInt32(dateTimeParts[1][0].ToString() + dateTimeParts[1][1].ToString());
            int minute = Convert.ToInt32(dateTimeParts[1][2].ToString() + dateTimeParts[1][3].ToString());

            DateTime dtApproval = new DateTime(Convert.ToInt32(dateParts[2].Trim()), Convert.ToInt32(dateParts[0].Trim()), Convert.ToInt32(dateParts[1].Trim()), hour, minute, 0);
            TimeSpan tsDelta = dtApproval - DateTime.Now;
            if (tsDelta.Hours < 0 || tsDelta.Minutes < 0 || (tsDelta.Hours == 0 && tsDelta.Minutes == 0))
                g_PrePropDelayMinutes = 0;
            else if (tsDelta.Hours == 0 && tsDelta.Minutes > 0)
                g_PrePropDelayMinutes = (double)tsDelta.Minutes;
            else if (tsDelta.Hours > 0)
                g_PrePropDelayMinutes = 60;
        }

        /// <summary>
        /// Runs the commands saved from the Approval Task against the Tools Management Web Service.
        /// </summary>
        private void PropRequest_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Prop Request";
            InitStep(stepName);

            ArrayList commands = new ArrayList(ApprovalPropCommands);
            ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
            try
            {
                foreach (string cmd in commands)
                {
                    string[] cmdParts = cmd.Split(' ');

                    ActionInfo actionInfo = new ActionInfo();
                    actionInfo.jobId = g_toolsMgmtJobID;
                    actionInfo.toolFileName = cmdParts[0].Trim();

                    Parameter[] parameters = new Parameter[cmdParts.Length - 1];
                    for (int i = 0; i < cmdParts.Length; i++)
                    {
                        if (i == 0)
                            continue;

                        string curParam = cmdParts[i];
                        if (!curParam.Contains(":"))
                        {
                            parameters[i - 1] = new Parameter();
                            parameters[i - 1].name = curParam;
                        }
                        else
                        {
                            string[] paramParts = curParam.Split(':');

                            parameters[i - 1] = new Parameter();
                            parameters[i - 1].name = paramParts[0].Trim() + ":";

                            string paramValue = "";
                            for (int j = 0; j < paramParts.Length; j++)
                            {
                                if (j == 0)
                                    continue;
                                if (j == paramParts.Length-1)
                                    paramValue += paramParts[j];
                                else
                                    paramValue += paramParts[j] + ":";
                            }
                            parameters[i - 1].value = paramValue.Trim();
                        }
                    }
                    actionInfo.parameters = parameters;

                    if (g_requestObj.filePaths.Count > 0)
                    {
                        string[] files = new string[g_requestObj.filePaths.Count];
                        for (int i = 0; i < g_requestObj.filePaths.Count; i++)
                            files[i] = Path.GetFileName(g_requestObj.filePaths[i].ToString());
                   
                        actionInfo.files = files;
                    }

                    try
                    {
                        g_actionRanks.Add(toolsMgmtObj.AddAction(actionInfo));
                        ApprovalPropCommands.Remove(cmd);
                    }
                    catch (Exception ex)
                    {
                        RetryStep(stepName, "Failed to add an action (AddAction()) to Tools Management (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error);
                        LogMessage("Failed to add an action (AddAction()) to Tools Management (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "An unexpected error occurred while gathering information for Tools Management calls (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message, 0);
                LogMessage("An unexpected error occurred while gathering information for Tools Management calls (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message);
                return;
            }

            try
            {
                toolsMgmtObj.ExecuteJob(g_toolsMgmtJobID);
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Submitting prop request to Tools Management (Job ID #" + g_toolsMgmtJobID + ").", "In Progress", "");
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "Failed to execute prop (ExecuteJob()) to Tools Management (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error);
                LogMessage("Failed to execute prop (ExecuteJob()) to Tools Management (Job ID #" + g_toolsMgmtJobID.ToString() + "). Exception caught: " + ex.Message);
                return;
            }

            ApprovalTaskNotCompleted = false;
            g_PropRequestSucceeded = true;
        }
        private void PropResults_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Prop Request";

            try
            {
                ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
                JobState jobState = toolsMgmtObj.GetJobStatus(g_toolsMgmtJobID);

                switch (jobState)
                {
                    case JobState.Complete:
                        g_toolsMgmtSuccess = true;
                        g_PropResultsCheckSucceeded = true;
                        g_PropResultsSucceeded = true;
                        g_PropProcessSucceeded = true;

                        SaveConsoleOutputToPSBug(true);
                        toolsMgmtObj.CleanupJob((ulong)g_toolsMgmtJobID);
                        g_actionRanks.Clear();

                        CompleteStep(stepName, "The request has been successfully propped!");
                        break;

                    case JobState.Failed:
                        g_toolsMgmtSuccess = false;
                        g_PropResultsCheckSucceeded = true;

                        SaveConsoleOutputToPSBug(false);
                        toolsMgmtObj.CleanupJob((ulong)g_toolsMgmtJobID);
                        g_actionRanks.Clear();
                        break;

                    default:
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The prop's status is '" + jobState.ToString() + "' and is not yet complete. The workflow will check the status again in " + g_propCompletionCheckDelayMinutes.ToString() + " minutes.", "In Progress", "");
                        break;
                }
            }
            catch (Exception ex)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to connect Tools Management. Could not verify the prop's status, but will try again in " + g_propCompletionCheckDelayMinutes.ToString() + " minutes. Exception caught: " + ex.Message, "Error", "");
                LogMessage("Failed to connect Tools Management. Could not verify prop status, but will try again in " + g_propCompletionCheckDelayMinutes.ToString() + " minutes. Exception caught: " + ex.Message);
                FireEvent("Failed to connect Tools Management. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error, 1);
                return;
            }
        }
        private void SaveConsoleOutputToPSBug(bool success)
        {
            string stepName = "Prop Request";

            string consoleOutput = "";
            ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
            foreach (int rank in g_actionRanks)
            {
                ActionResult aRes = toolsMgmtObj.GetActionResult(g_toolsMgmtJobID, rank);
                if (aRes.consoleOutput != "")
                    consoleOutput += aRes.consoleOutput.Replace("\n", "\r\n") + "\r\n";
            }

            string outputFile = g_tempDir + @"\PropResults_" + DateTime.Now.ToString("yyyy-MM-dd-Hmmss") + ".txt";
            StreamWriter sw = new StreamWriter(outputFile);
            sw.Write(consoleOutput);
            sw.Close();

            ArrayList propOutput = new ArrayList();
            propOutput.Add(outputFile);
            AttachFilesToPSBug(g_psBugID, propOutput, "Failed to attach the output from the prop commands to the PS bug.");

            if (success)
                AddTextToPSBug("[Bug automatically updated by Prop Manager]" + Environment.NewLine + Environment.NewLine + "The prop succeeded. Console output is attached to the bug in " + Path.GetFileName(outputFile), "", false);
            else
            {
                AddTextToPSBug("[Bug automatically updated by Prop Manager]" + Environment.NewLine + Environment.NewLine + "The prop failed. Console output is attached to the bug in " + Path.GetFileName(outputFile), "", false);
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The prop failed. Console output is attached to PS Bug #" + g_psBugID.ToString() + " (" + g_psProductName + ") in " + Path.GetFileName(outputFile), "Error", "");
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Failed", "");
            }
        }

        /// <summary>
        /// Resolves the PS bug based on the outcome of a prop.
        /// </summary>
        private void ResolveBugAs_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Resolve Bug As";
            InitStep(stepName);

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore, true))
            {
                RetryStep(stepName, "Failed to connect to Product Studio on all configured domains. Exception caught: " + g_lastPSException, EVENTID_PS_Connection_Error);
                return;
            }

            try
            {
                Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, g_psBugID);

                string alias = "";
                if (ApprovalTaskUser.Contains("\\"))
                {
                   string[] aliasParts = ApprovalTaskUser.Split('\\');
                   alias = aliasParts[1];
                }
                else
                   alias = ApprovalTaskUser;

                myBug.Edit(PsItemEditActionEnum.psBugEditActionResolve, alias, PsApplyRulesMask.psApplyRulesAll);
                
                myBug.Fields["Assigned To"].Value = g_resolvedTo;
                myBug.Fields["Resolution"].Value = g_ResolvedAsType;

                if (FailureTaskNotes != "")
                    myBug.Fields["Description"].Value = FailureTaskNotes;
                else if (ApprovalTaskNotes != "")
                    myBug.Fields["Description"].Value = ApprovalTaskNotes;
                
                myBug.Save(true);
            }
            catch (Exception ex)
            {
                RetryStep(stepName, "Failed to resolve PS bug #" + g_psBugID + " (" + g_psProductName + ") as '" + g_ResolvedAsType + "' to '" + g_resolvedTo + "'. Exception caught: " + ex.Message, EVENTID_PS_Foreign_Error);
                return;
            }

            CompleteStep(stepName, "The bug has been successfully resolved as '" + g_ResolvedAsType + "' to '" + g_resolvedTo + "'.");
            g_ResolveAsSucceeded = true;
        }

        /// <summary>
        /// [Will only occur if a prop was initially approved] If an automated prop succeeded or failed, an e-mail will be sent out to the original request on its result
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SendFinalEmail_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Send Final E-mail";
            InitStep(stepName);

            string emailTo = "";
            string emailCc = "";
            string subject = "RE: PS Bug #" + g_psBugID.ToString() + g_requestObj.emailTitle;

            string psDBLink = "<a href='http://psph/bug/" + g_psProductName + ":" + g_psBugID.ToString() + "'>" + g_psBugID.ToString() + "</a>";
            string htmlBody = "";
            if (g_toolsMgmtSuccess)
                htmlBody += "This work is <font color=green><b>complete</b></font>.<br><br>" +
                            g_psProductName + " #" + psDBLink + " has been resolved as 'Fixed' to " + g_resolvedTo + ".";
            else
            {
                string addInfo = "";
                if (g_propFailureTaskNotes != "")
                    addInfo = "<br><br>" + g_propFailureTaskNotes;
                else if (ApprovalTaskNotes != null && ApprovalTaskNotes != "")
                    addInfo = "<br><br>" + ApprovalTaskNotes;

                htmlBody += "This work has <font color=red><b>failed</b></font>.<br><br>" +
                          g_psProductName + " #" + psDBLink + " has been resolved as 'Won't Fix' to " + g_resolvedTo + "." +
                          addInfo;
            }
            htmlBody = "<font size=5>Request Results</font><br><br>" + htmlBody + "<br><br><font size=2>Generated by Prop Manager</font>";

            string ccList = g_requestObj.emailCCList;
            string[] ccAry = null;
            if (ccList != "")
            {
                ccAry = ccList.Split(';');
                ccList = "";

                for (int i = 0; i < ccAry.Length; i++)
                {
                    if (!ccAry[i].Contains("@") && ccAry[i] != "")
                        ccAry[i] += "@microsoft.com";
                    ccList += ccAry[i] + ";";
                }
            }

            string toList = g_emailTo;
            string[] toAry = null;
            if (toList != "")
            {
                toAry = toList.Split(';');
                toList = "";

                for (int i = 0; i < toAry.Length; i++)
                {
                    if (!toAry[i].Contains("@") && toAry[i] != "")
                        toAry[i] += "@microsoft.com";
                    toList += toAry[i] + ";";
                }
            }

            string submitterAlias = "";
            if (g_requestObj.requestSubmitter.Contains("\\"))
            {
                string[] submitterParts = g_requestObj.requestSubmitter.Split('\\');
                submitterAlias = submitterParts[1].Trim();
            }
            else
                submitterAlias = g_requestObj.requestSubmitter.Trim();

            emailTo = submitterAlias + "@microsoft.com;" + g_resolvedTo + "@microsoft.com";
            emailCc = toList + ccList;

            System.Collections.Specialized.StringDictionary messageHeaders = new System.Collections.Specialized.StringDictionary();
            messageHeaders.Add("to", emailTo);
            messageHeaders.Add("cc", emailCc);
            messageHeaders.Add("subject", subject);
            messageHeaders.Add("reply-to", toList);

            try
            {
                if (!SPUtility.SendEmail(this.workflowProperties.Web, messageHeaders, htmlBody))
                {
                    LogMessage("Step: " + stepName + ". Final e-mail failed to send. Verify that SharePoint is configured to use a valid SMTP server.");
                    RetryStep(stepName, "Failed to send final e-mail. Verify that SharePoint is configured to use a valid SMTP server.", EVENTID_Mail_Send_Error);
                    return;
                }
            }
            catch (Exception ex)
            {
                LogMessage("Step: " + stepName + ". Final e-mail failed to send. Exception caught: " + ex.Message);
                RetryStep(stepName, "Exception caught: " + ex.Message + " Failed to send final e-mail.", EVENTID_Mail_Send_Error);
                return;
            }

            CompleteStep(stepName, "An e-mail has been successfully submitted.");
            g_SendFinalEmailSucceeded = true;
        }

        /// <summary>
        /// Checks the status of the PS bug generated earlier by this workflow. It must be Resolved and NOT assigned to 'xladmins' before letting the workflow complete. Note: Not a full workflow step. No failure tasks.
        /// </summary>
        private void psWorkNotComplete_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Awaiting Bug Resolution";
            InitLogging();

            if (g_psWorkCheckDelayMinutes == 0)
            {
                g_PSWorkNotCompleteSucceeded = true;
                return;
            }

            if (g_skipPSWorkNotComplete)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Step skipped (debug mode ON).", "Complete", "");
                g_PSBugSucceeded = true;
                return;
            }

            if (g_PSWorkCheckCount == 0)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Started", "");
                workflowProperties.Item["Request Status"] = "In Progress";
                workflowProperties.Item["Current Step"] = stepName;
                workflowProperties.Item.Update();
            }

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore, true))
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Failed to connect to Product Studio on all configured domains. The workflow will automatically keep trying until it is able to connect and verify the bug's status.", "Not Complete", "");
                return;
            }

            try
            {
                Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, g_psBugID);
                myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);

                string assignedTo = myBug.Fields["Assigned To"].Value.ToString();
                string status = myBug.Fields["Status"].Value.ToString();

                if (assignedTo.ToLower() != "xladmins" && (status == "Resolved" || status == "Closed"))
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "The check has passed!", "Complete", "");
                    g_PSWorkNotCompleteSucceeded = true;
                }
                else
                    g_PSWorkNotCompleteSucceeded = false;
            }
            catch (Exception ex)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "An unexpected exception occurred. Failed to check the bug's status. Exception caught: " + ex.Message, "Failed", "");
            }

            if (!g_PSWorkNotCompleteSucceeded)
            {
                // every 12 times the step is called, it will reset the count
                if (g_PSWorkCheckCount >= 12)
                    g_PSWorkCheckCount = 0;

                if (g_PSWorkCheckCount == 0)
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "PS Bug #" + g_psBugID.ToString() + " is not complete. This check occurs every " + g_psWorkCheckDelayMinutes.ToString() + " minute(s). This message appears every " + Convert.ToString(g_psWorkCheckDelayMinutes * 12) + " minute(s) until the check passes.", "Not Complete", "");
                
                g_PSWorkCheckCount++;
            }
        }

        /// <summary>
        /// Attaches a new request XML file containing the most recent data from the workflow to the PS bug.
        /// </summary>
        private void AttachRequestXMLToBug_ExecuteCode(object sender, EventArgs e)
        {
            string stepName = "Attach Request XML";

            InitStep(stepName);
            if (g_curRetryCount == g_stepRetryValue)
            {
                string[] contextAry = SplitByString(ContextData, "::::");

                if (!System.IO.Directory.Exists(g_tempDir))
                    System.IO.Directory.CreateDirectory(g_tempDir);

                string fileName = workflowProperties.Item.Attachments[workflowProperties.Item.Attachments.Count-1];
                g_requestXMLFileName = fileName;

                if (!System.IO.File.Exists(g_tempDir + fileName))
                {
                    StreamWriter sw = new StreamWriter(g_tempDir + fileName, false);
                    sw.Write(contextAry[1]);
                    sw.Close();
                }
            }

            ArrayList requestXML = new ArrayList();
            requestXML.Add(g_tempDir + g_requestXMLFileName);
            if (requestXML.Count > 0)
            {
                if (!AttachFilesToPSBug(g_psBugID, requestXML, ""))
                {
                    string errMsg = "Could not attach the Request XML file from to PS Bug #" + g_psBugID.ToString() + ". Exception caught: " + g_lastPSException + ".";
                    LogMessage(errMsg);
                    RetryStep(stepName, errMsg, EVENTID_PS_Foreign_Error);
                    return;
                }
            }

            // SUCCESS
            try 
            { 
                if (System.IO.File.Exists(g_tempDir + g_requestXMLFileName))
                    System.IO.File.Delete(g_tempDir + g_requestXMLFileName); /* remove the Request XML file from the backup folder */ 
            }
            catch (Exception) { /* do nothing here */ }

            CompleteStep(stepName, "The Request XML file has been successfully attached to PS Bug #" + g_psBugID.ToString() + ".");
            g_AttachRequestXMLSucceeded = true;
        }

        /// <summary>
        /// The workflow is complete. Clean-up loose ends.
        /// </summary>
        private void End_ExecuteCode(object sender, EventArgs e)
        {
            DisableLogging();
            workflowProperties.Item["Current Step"] = "Completed";

            if (g_killWorkflow)
            {
                workflowProperties.Item["Request Status"] = "Aborted";
                workflowProperties.Item.Update();
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowCancelled, "", "The workflow has been aborted.", "", g_systemUser);
                LogMessage("The workflow has been aborted.");
                return;
            }

            workflowProperties.Item["Request Status"] = "Completed";
            workflowProperties.Item["Date Completed"] = DateTime.Now.ToString("M/d/yyyy h:mm tt");
            workflowProperties.Item.Update();

            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowCompleted, "", "The workflow has successfully completed.", "", g_systemUser);
        }
       

        // -----------------------------------------------------------------------
        // HELPER FUNCTIONS
        // ----------------------------------------------------------------------

        /// <summary>
        /// Populates all relevant global variables for use throughout the workflow
        /// </summary>
        private void PopulateVars()
        {
            g_TEST = g_requestObj.testState;

            g_stepRetryValue = Convert.ToInt32(g_assocObj.StepRetryValue.Trim());
            g_curRetryCount = g_stepRetryValue;
            g_stepRetryDelay = Convert.ToInt32(g_assocObj.StepRetryDelay.Trim());

            g_stepDelayMinutes = Convert.ToDouble(g_stepRetryDelay);

            g_psWorkCheckDelayMinutes = Convert.ToDouble(g_assocObj.PSWorkCheckDelay.Trim());
            g_propCompletionCheckDelayMinutes = Convert.ToDouble(g_assocObj.PropCheckDelay.Trim());

            g_emailTo = g_assocObj.EmailTo.Trim();

            // init Product Studio variables
            if (g_TEST)
                g_psProductName = g_assocObj.PSProductNameTest.Trim();
            else
                g_psProductName = g_assocObj.PSProductName.Trim();
            g_psDomains = g_psDomains = Convert.ToString(g_assocObj.PSProductDomain.Trim()).Split(';');

            g_psAttachFilesRetries = Convert.ToInt32(g_assocObj.PSAttachmentAttempts.Trim());
            g_curAttachFilesRetryCount = g_psAttachFilesRetries;
            g_psAttachFilesRetriesTime = Convert.ToInt32(g_assocObj.PSAttachmentDelay.Trim());
            g_psAttachFilesDelayMinutes = Convert.ToDouble(g_psAttachFilesRetriesTime);

            bool resolve = false;
            foreach (object obj in g_requestObj.requestData)
            {
                SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;
                if (skp.key == "Resolve To")
                {
                    resolve = true;
                    if (skp.value == "")
                    {
                        if (g_requestObj.requestSubmitter.Contains(@"\"))
                        {
                            string[] aliasParts = g_requestObj.requestSubmitter.Split('\\');
                            g_resolvedTo = aliasParts[1].Trim();
                        }
                        else
                            g_resolvedTo = g_requestObj.requestSubmitter;
                    }
                    else if (skp.value.Contains("@"))
                    {
                        string[] aliasParts = skp.value.Split('@');
                        g_resolvedTo = aliasParts[0].Trim();
                    }
                    else if (skp.value.Contains(@"\"))
                    {
                        string[] aliasParts = skp.value.Split('\\');
                        g_resolvedTo = aliasParts[1].Trim();
                    }
                    else
                        g_resolvedTo = skp.value;
                }
            }
            if (!resolve)
            {
                if (g_requestObj.requestSubmitter.Contains(@"\"))
                {
                    string[] aliasParts = g_requestObj.requestSubmitter.Split('\\');
                    g_resolvedTo = aliasParts[1].Trim();
                }
                else
                    g_resolvedTo = g_requestObj.requestSubmitter;
            }

            g_psSetAutoPropState = g_requestObj.psSetAutoPropState;
            
            // init network variables
            g_transferDelayMinutes = 0;
            g_sharedFolder = g_requestObj.fileDropPointPath.Trim();
            g_tempDir = g_requestObj.serializedTempPath.Trim();

            g_ToolsMgmtCertificatePart = g_assocObj.ToolsMgmtCertificatePart.Trim();
            g_ToolsMgmtCertificateCert = g_assocObj.ToolsMgmtCertificateCert.Trim();
            g_ToolsMgmtCertificateProd = g_assocObj.ToolsMgmtCertificateProd.Trim();

            g_ToolsMgmtSvrPart = g_assocObj.ToolsMgmtSvrPart.Trim();
            g_ToolsMgmtSvrCert = g_assocObj.ToolsMgmtSvrCert.Trim();
            g_ToolsMgmtSvrProd = g_assocObj.ToolsMgmtSvrProd.Trim();
            g_XlTransSvr = g_assocObj.XltransSvr.Trim();

            g_startPoint = g_assocObj.XlTransStartPoint.Trim();
            g_endPointPartnerNet = g_assocObj.XlTransEndpointPartNet.Trim();
            g_endPointCertNet = g_assocObj.XlTransEndpointCertNet.Trim();
            g_endPointProduction = g_assocObj.XlTransEndpointProdNet.Trim();

            g_startPointToolsMgmt = g_assocObj.XltransStartPointToolsMgmt.Trim();
            g_endPointPartnerNetToolsMgmt = g_assocObj.XltransEndpointPartNetToolsMgmt.Trim();
            g_endPointCertNetToolsMgmt = g_assocObj.XltransEndpointCertNetToolsMgmt.Trim();
            g_endPointProductionToolsMgmt = g_assocObj.XltransEndpointProdNetToolsMgmt.Trim();

            g_configPath = g_assocObj.ConfigPath.Trim();

            g_logging = g_assocObj.LoggingOn;
            InitLogging();
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Application logging has been enabled (or re-enabled).", "Complete", "");
        }

        /// <summary>
        /// Prepares the workflow for the current step
        /// </summary>
        /// <param name="stepName">A string representing the name of the step.</param>
        private void InitStep(string stepName)
        {
            InitLogging();

            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Started", "");
            workflowProperties.Item["Request Status"] = "In Progress";
            workflowProperties.Item["Current Step"] = stepName;
            workflowProperties.Item.Update();
        }

        /// <summary>
        /// Prepares workflow variables for the next step while finishing the current step
        /// </summary>
        /// <param name="stepName">A string representing the name of the step.</param>
        /// <param name="completionMsg">The message to be displayed in the workflow history on step completion.</param>
        private void CompleteStep(string stepName, string completionMsg)
        {
            LogMessage(completionMsg);
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", completionMsg, "Complete", "");
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Complete", "");
            g_curRetryCount = this.g_stepRetryValue;
        }

        /// <summary>
        /// Converts an amount of bytes into an easily readable string.
        /// </summary>
        /// <param name="bytes">A long value that that specifies the byte amount.</param>
        /// <returns>A string value that is formatted for human readability.</returns>
        private string GetSensibleByteSize(long bytes)
        {
            if (bytes < 1024)
                return bytes.ToString() + " B";
            else if (bytes < (1024 * 1000))
                return ((int)(bytes / 1024)).ToString() + " KB";
            else if (bytes < (1024 * 1000000))
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000)), 2)) + " MB";
            else
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000000)), 2)) + " GB";
        }

        /// <summary>
        /// Initializes the global Tools Management object (g_toolsMgmt) with where the web service is and what certificate is should use.
        /// </summary>
        private ToolsMgmt CreateToolsMgmtObj()
        {
            ToolsMgmt toolsMgmtObj = new ToolsMgmt();

            string toolsServer = "";
            string toolsCertificate = "";
            switch (g_requestObj.requestEnvironmentName)
            {
                case "PartnerNet":
                    toolsServer = g_ToolsMgmtSvrPart;
                    toolsCertificate = g_ToolsMgmtCertificatePart;
                    break;

                case "CertNet":
                    toolsServer = g_ToolsMgmtSvrCert;
                    toolsCertificate = g_ToolsMgmtCertificateCert;
                    break;

                case "Production":
                    toolsServer = g_ToolsMgmtSvrProd;
                    toolsCertificate = g_ToolsMgmtCertificateProd;
                    break;
            }
            toolsMgmtObj.Url = toolsServer;
            toolsMgmtObj.ClientCertificates.Add(LoadCertificate(toolsCertificate));

            return toolsMgmtObj;
        }

        /// <summary>
        /// Loads a certificate from the local machine's certificate store
        /// </summary>
        /// <param name="certName">String: The name of the certificate.</param>
        /// <returns>The X509Certificate desired. If it doesn't exist, the certificate will be empty.</returns>
        private X509Certificate LoadCertificate(string certName)
        {
            X509Certificate certificate = new X509Certificate();
            try
            {
                X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
                store.Open(OpenFlags.ReadOnly);

                X509CertificateCollection certCollection = store.Certificates.Find(X509FindType.FindBySubjectName, certName, true);
                if (certCollection.Count == 0)
                    throw new Exception("Error loading the certificate. None found.");
                else
                    certificate = certCollection[0];
                store.Close();
            }
            catch (Exception ex)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Exception caught: " + ex.Message, "Error", "");
            }

            return certificate;
        }

        /// <summary>
        /// Determines whether this request has any established prop commands. If not, it won't try to prop the request.
        /// </summary>
        /// <param name="optionName">String: The name of the request type/option</param>
        /// <param name="environmentName">String: The name of the environment.</param>
        /// <returns></returns>
        private bool DoWeProp(string optionName, string environmentName)
        {
            DataSet ds = new DataSet();
            if (!System.IO.File.Exists(g_configPath + "prop_commands.xsd") && System.IO.File.Exists(g_configPath + "prop_commands.xml"))
            {
                ds.ReadXml(g_configPath + "prop_commands.xml");
                ds.WriteXmlSchema(g_configPath + "prop_commands.xsd");
            }

            if (System.IO.File.Exists(g_configPath + "prop_commands.xml"))
            {
                ds.ReadXmlSchema(g_configPath + "prop_commands.xsd");
                ds.ReadXml(g_configPath + "prop_commands.xml");
            }
            else
                return false;

            foreach (DataRow drOptions in ds.Tables["Option"].Rows)
            {
                if (drOptions["Name"].ToString().ToUpper().Equals(optionName.ToUpper()) || drOptions["Name"].ToString().ToUpper().Equals("ALL"))
                {
                    foreach (DataRow drEnvironments in drOptions.GetChildRows("Option_Environment"))
                    {
                        if (drEnvironments["Name"].ToString().ToUpper().Equals(environmentName.ToUpper()) || drEnvironments["Name"].ToString().ToUpper().Equals("ALL"))
                            return true;
                    }
                }
            }

            return false;
        }

        /// <summary>
        /// Gets the task display form Url.
        /// </summary>
        /// <param name="web">The web.</param>
        /// <param name="list">The list.</param>
        /// <param name="itemId">The item id.</param>
        /// <returns>Task display form link</returns>
        public static string GetTaskDisplayFormLink(SPWeb web, SPList list, int itemId)
        {
            if (web == null)
            {
                throw new ArgumentNullException("web");
            }

            if (list == null)
            {
                throw new ArgumentNullException("list");
            }

            SPForm form = list.Forms[PAGETYPE.PAGE_DISPLAYFORM];
            return string.Concat(new object[] { web.Url, '/', form.Url, "?ID=", itemId });
        }
        
        /// <summary>
        ///  Splits a string based on a string delimeter
        /// </summary>
        /// <param name="stringToSplit">A string value that is to be split</param>
        /// <param name="delimeter">A string value that is the delimeter on which to split the string by</param>
        /// <returns>An array of strings containing each split</returns>
        private string[] SplitByString(string stringToSplit, string delimeter)
        {
            int offset = 0;
            int index = 0;
            int[] offsets = new int[stringToSplit.Length + 1];

            while (index < stringToSplit.Length)
            {
                int indexOf = stringToSplit.IndexOf(delimeter, index);
                if (indexOf != -1)
                {
                    offsets[offset++] = indexOf;
                    index = indexOf + delimeter.Length;
                }
                else
                    index = stringToSplit.Length;
            }

            string[] result = new string[offset + 1];
            if (offset == 0)
                result[0] = stringToSplit;
            else
            {
                offset--;
                result[0] = stringToSplit.Substring(0, offsets[0]);
                for (int i = 0; i < offset; i++)
                    result[i + 1] = stringToSplit.Substring(offsets[i] + delimeter.Length, offsets[i + 1] - offsets[i] - delimeter.Length);
                result[offset + 1] = stringToSplit.Substring(offsets[offset] + delimeter.Length);
            }

            return result;
        }

        /// <summary>
        /// Fires an event into the EventLog
        /// </summary>
        /// <param name="EvtText">String to include in the event description.</param>
        /// <param name="EventID">Event ID</param>
        /// <param name="Severity">Event Type (1=Error,2=Warning,4=Info)</param>
        private void FireEvent(string EvtText, int EventID, int Severity)
        {
            EventLogEntryType EvtSeverity;

            // initialize the EventLog
            g_eventLog = new EventLog("Application");
            g_eventLog.Source = "Prop Manager Workflow";

            switch (Severity)
            {
                case 1:
                    // Error
                    EvtSeverity = EventLogEntryType.Error;
                    break;
                case 2:
                    // Warning
                    EvtSeverity = EventLogEntryType.Warning;
                    break;
                case 4:
                    // Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
                default:
                    // Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
            }

            // Write an event to  the event log.    
            try
            {
                g_eventLog.WriteEntry(EvtText, EvtSeverity, EventID);
            }
            catch (Exception) { /* do nothing here */ }

            g_eventLog = null;
        }
        
        /// <summary>
        /// Updates retry variables and writes to the workflow history page
        /// </summary>
        /// <param name="stepName">A string value that represents the name of the current step.</param>
        /// <param name="errMsg">A string value that represents the last error that occurred.</param>
        /// <param name="eventID">An integer value that represents the Event ID of the error. Provide 0 for no event logging.</param>
        private void RetryStep(string stepName, string errMsg, int eventID)
        {
            workflowProperties.Item["Request Status"] = "Retrying Step";
            workflowProperties.Item.Update();

            if (g_curRetryCount > 0)
            {
                if (stepName == "Initialize Workflow")
                    g_curRetryCount = -1;
                else
                {
                    if (eventID != 0)
                    {
                        FireEvent("Prop Manager Workflow - Warning" + Environment.NewLine + Environment.NewLine +
                                  "Step: " + stepName + " (Retry Attempt #" + Convert.ToString(this.g_stepRetryValue - g_curRetryCount + 1) + ")" + Environment.NewLine +
                                  "Request GUID: " + g_requestObj.requestGUID + Environment.NewLine +
                                  "Status/History Page Url: " + Environment.NewLine + g_statusLink + Environment.NewLine + Environment.NewLine +
                                  "The following error occured: " + Environment.NewLine + errMsg,
                                  eventID, 2);
                    }
                    if (errMsg != "")
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", errMsg, "Error", "");
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "Retry attempt #" + Convert.ToString(this.g_stepRetryValue - g_curRetryCount + 1) + " (of " + this.g_stepRetryValue.ToString() + ").", "Retrying", "");
                    LogMessage("Retry attempt #" + Convert.ToString(this.g_stepRetryValue - g_curRetryCount + 1) + " (of " + this.g_stepRetryValue.ToString() + ") will be attempted after a delay of " + g_stepDelayMinutes.ToString() + " minute(s).");
                }
            }
            else
            {
                if (eventID != 0)
                {
                    FireEvent("Prop Manager Workflow - Error" + Environment.NewLine + Environment.NewLine +
                              "Step: " + stepName + Environment.NewLine +
                              "Request GUID: " + g_requestObj.requestGUID + Environment.NewLine +
                              "Status/History Page Url: " + Environment.NewLine + g_statusLink + Environment.NewLine + Environment.NewLine +
                              "The following error occured:" + errMsg,
                              eventID, 1);
                }
                if (errMsg != "")
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", errMsg, "Error", "");
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Failed", "");
                LogMessage("Step: " + stepName + " has failed.");
            }
            
            workflowProperties.Item["Last Error"] = errMsg;
            workflowProperties.Item.Update();

            g_curRetryCount--;
        }

        /// <summary>
        /// Writes an entry in the workflow's History section.
        /// </summary>
        /// <param name="stepName">The name of the step the workflow is currently processesing (empty string for in between steps).</param>
        /// <param name="description">The text in the HistoryDescription field.</param>
        /// <param name="outcome">The text in the HistoryOutcome field.</param>
        private void WriteToWorkflowHistory(SPWorkflowHistoryEventType eventType, string stepName, string description, string outcome, string user)
        {
            SPUser theUser = null;
            if (user != null && user != "")
                theUser = new SPSite(workflowProperties.SiteId).OpenWeb(workflowProperties.WebId).AllUsers[user];
            else
                theUser = workflowProperties.OriginatorUser;

            if (outcome == "Error")
            {
                try
                {
                    workflowProperties.Item["Last Error"] = description;
                    workflowProperties.Item.Update();
                }
                catch (Exception ex)
                {
                    workflowProperties.Item["Last Error"] = "<The last error is not available. Check the status page for more information>";
                    workflowProperties.Item.Update();
                }
            }

            string preText = "";
            if (stepName != "")
            {
                preText = "Step: ";
                stepName += ". ";
            }
            else
            {
                if (outcome != "")
                    preText = "- ";
            }
            workflowProperties.Workflow.CreateHistoryEvent((int)eventType, null, theUser, outcome, preText + stepName + description, "");
        }


        // ----------------------------------------------------------------------
        // PRODUCT STUDIO FUNCTIONS
        // ----------------------------------------------------------------------

        internal static int TreeIDFromPath(Node node, string path)
        {
            string[] pathLevelNames;
            char[] separator = { '\\' };
            int pathCount = 0;
            Node currentNode = null;

            pathLevelNames = path.Split(separator);
            currentNode = node;

            if (path.Trim().Length >= 1 && path.Trim() != "\\")
            {
                for (pathCount = 0; pathCount < pathLevelNames.Length; pathCount++)
                {
                    currentNode = currentNode.Nodes[pathLevelNames[pathCount]];
                }
            }
            return currentNode.ID;
        }

        /// <summary>
        /// Connects to Product Studio using the connection refs given.
        /// </summary>
        /// <returns>Whether or not a connection was successfully established.</returns>
        private bool ConnectToProductStudio(ref ProductStudio.Directory psDirectory, ref Product psProduct, ref Datastore psDataStore, bool displayErrors)
        {
            InitLogging();
            bool success = false;

            foreach (string psDomain in g_psDomains)
            {
                try
                {
                    if (psDomain == "")
                        continue;

                    // connect to the directory and the specific product.
                    psDirectory = new ProductStudio.DirectoryClass();
                    psDirectory.Connect(psDomain.Trim(), "", "");

                    psProduct = psDirectory.GetProductByName(g_psProductName);
                    psDataStore = psProduct.Connect("", "", "");

                    success = true;
                    break;
                }
                catch (Exception ex)
                {
                    g_lastPSException = ex.Message;
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not connect to Product Studio [" + psDomain.Trim() + "]. Exception caught: " + ex.Message, "Error", "");
                    LogMessage("Could not connect to Product Studio [" + psDomain.Trim() + "]. Exception caught: " + ex.Message);
                    success = false;
                }
            }

            try
            {
                psDirectory.Disconnect();
            }
            catch (Exception) { /* if we can't disconnect, we don't care. */ }

            if (!success)
                return false;

            return true;
        }

        /// <summary>
        /// Attach files to a Bug
        /// </summary>
        /// <param name="bugID">The Bug ID that you wish to attach files to</param>
        /// <param name="files">List of file paths to attach to the bug</param>
        /// <returns>Indicates whether there were any problems attaching the files or not</returns>
        private bool AttachFilesToPSBug(int bugID, ArrayList files, string failureMsg)
        {
            if (bugID == 0) return false;

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;
            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore, true))
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not connect to Product Studio to attach files in this request to PS Bug #" + bugID.ToString() + ".", "Error", "");
                LogMessage("Could not connect to Product Studio to attach files in this request to PS Bug #" + bugID.ToString() + ".");
                return false;
            }

            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, bugID);
            if (myBug == null)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The PS Bug (#" + bugID.ToString() + ") provided in does not exist. Files were not attached to this bug.", "Error", "");
                LogMessage("The PS Bug (#" + bugID.ToString() + ") provided in does not exist. Files were not attached to this bug.");
                return false;
            }

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);

            try
            {
                FileInfo fInfo;
                for (int i = 0; i < files.Count; i++)
                {
                    fInfo = new FileInfo(files[i].ToString());
                    if (fInfo.Length < 52428800) // 50 MB attachment cap
                        myBug.Files.Add(files[i].ToString(), false);
                    else
                        myBug.Files.Add(files[i].ToString(), true);
                }
                myBug.Save(true);
            }
            catch (Exception ex)
            {
                try
                {   
                    if (files.Count > 1)
                        myBug.Files.Clear();
                    if (g_curAttachFilesRetryCount == 0)
                    {
                        myBug.Fields["Description"].Value = "[Bug automatically updated by Prop Manager]" + Environment.NewLine + Environment.NewLine + failureMsg + Environment.NewLine + Environment.NewLine + " Exception caught: " + ex.Message;
                        myBug.Save(true);
                    }
                }
                catch (Exception ex2)
                {
                    LogMessage("Failed to add notification of the failure to attach files in the bug's description field. Exception caught: " + ex2.Message);
                }
                try
                {
                    psDirectory.Disconnect();
                }
                catch (Exception) { /* if we can't disconnect, we don't care. */ }

                g_lastPSException = ex.Message;
                return false;
            }
            return true;
        }

        /// <summary>
        /// Adds passed text to the bug's description and/or repro steps. Also adds a link to the failure task for the error (if any)
        /// </summary>
        /// <param name="appendDesc">A string value containing the text to add to the description</param>
        /// <param name="appendRepro">A string value containing the text to add to the repro steps</param>
        /// <param name="taskID">A Guid representing the task id for the failure task (null if none)</param>
        /// <param name="failure">A boolean value describing whether or not we're writing to the PS bug because a failure occurred</param>
        private void AddTextToPSBug(string appendDesc, string appendRepro, bool failure)
        {
            int bugID = g_psBugID;
            if (bugID == 0) return;

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore, true))
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not connect to Product Studio to append text to PS Bug #" + bugID.ToString() + ".", "Error", "");
                return;
            }

            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, bugID);
            if (myBug == null)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The PS Bug (#" + bugID.ToString() + ") provided in the function AddTextToPSBug() does not exist. Text was not appended to this bug.", "Error", "");
                return;
            }

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);
            try
            {
                string errText = "";
                string linkToFailureTask = "";
                if (failure)
                    errText = Environment.NewLine + Environment.NewLine + "Last Known Error: " + workflowProperties.Item["Last Error"];
                myBug.Fields["Description"].Value = appendDesc + errText;

                if (myBug.Fields["Repro Steps"].Value.ToString() != "")
                {
                    if (appendRepro != "")
                        myBug.Fields["Repro Steps"].Value += Environment.NewLine + Environment.NewLine + appendRepro;
                }
                else
                    myBug.Fields["Repro Steps"].Value += appendRepro;

                myBug.Save(true);
            }
            catch (Exception ex)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to append failure messege to PS Bug #" + bugID.ToString() + ". Exception caught: " + ex.Message, "Error", "");
            }
        }

        /// <summary>
        /// Gets a bug object. 
        /// </summary>
        /// <param name="datastore">A PS DataStore object.</param>
        /// <param name="database">The PS database where the bug number provided is located.</param>
        /// <param name="bugId">The bug number desired.</param>
        /// <returns>A Product Studio DatastoreItem containing the actual bug.</returns>
        private DatastoreItem GetBug(Datastore datastore, string database, int bugId)
        {
            DatastoreItemList datalist;
            DatastoreItem dataitem;
            Query query;

            datalist = new DatastoreItemListClass();
            datalist.Datastore = datastore;

            if (bugId != 0)
            {
                query = new QueryClass();
                query.CountOnly = false;
                query.DatastoreItemType = PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs;
                query.SelectionCriteria = "<Query><Expression Column='ID' Operator='equals'><String>" + bugId + "</String></Expression></Query>";

                datalist.Query = query;
                datalist.Execute();

                if (datalist.DatastoreItems.Count != 1)
                    return null;

                dataitem = datalist.DatastoreItems[0];
            }
            else
            {
                datalist.CreateBlank(PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs);
                dataitem = datalist.DatastoreItems.Add(null, PsApplyRulesMask.psApplyRulesAll);
            }

            return dataitem;
        }


        // ----------------------------------------------------------------------
        // APPLICATION LOGGING FUNCTIONS
        // ----------------------------------------------------------------------
        
        /// <summary>
        /// Pulls the logging setup info out of the web.config file and enables or disables logging appropiately.
        /// </summary>
        private void InitLogging()
        {
            try
            {
                if (!System.IO.Directory.Exists(g_assocObj.LoggingPath))
                    System.IO.Directory.CreateDirectory(g_assocObj.LoggingPath);

                bool logging = g_logging;
                string loggingPath = g_assocObj.LoggingPath.Trim();

                if (logging)
                {
                    g_logFile = loggingPath + DateTime.Now.ToString(@"M-d-yyyy") + ".txt";
                    EnableLogging();
                }
                else
                    DisableLogging();
            }
            catch (Exception) {/* do nothing here */}
        }

        /// <summary>
        /// Determines if the StreamWriter object is still stored in the HttpContext.Current.Cache or if we need a new one.
        /// </summary>
        private void EnableLogging()
        {
            g_logging = true;

            try
            {
                if (g_swLog == null || g_swLog.BaseStream == null)
                {
                    g_swLog = new StreamWriter(g_logFile, true);
                    LogMessage("Application logging has been enabled for request '" + g_requestObj.psTitle + "' (" + g_requestObj.requestGUID + ").");
                }
            }
            catch (Exception ex)
            {
                FireEvent("Prop Manager Workflow - Error" + Environment.NewLine + Environment.NewLine +
                          "Step: Initialize Workflow" + Environment.NewLine +
                          "Request GUID: " + g_requestObj.requestGUID + Environment.NewLine +
                          "Status/History Page Url: " + Environment.NewLine + g_statusLink + Environment.NewLine + Environment.NewLine +
                          "Failed to write to the application log. Logging path: " + g_assocObj.LoggingPath.Trim() + "." + Environment.NewLine + Environment.NewLine +
                          "Exception caught: " + Environment.NewLine + ex.Message,
                          EVENTID_Logging_Init_Error, 1);

                g_swLog = new StreamWriter(g_logFile, true);
            }
        }

        /// <summary>
        /// Disables application logging.
        /// </summary>
        private void DisableLogging()
        {
            try
            {
                RefreshLogging();

                if (g_swLog != null)
                {
                    if (g_swLog.BaseStream != null)
                    {
                        LogMessage("Application logging has been disabled");
                        g_swLog.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage("An error occurred when trying to disable application logging in DisableLogging(). Exception caught: " + ex.Message);
            }
            g_logging = false;
        }

        /// <summary>
        /// Writes formatted messages to the log file.
        /// </summary>
        /// <param name="message">The message</param>
        private void LogMessage(string message)
        {
            if (!g_logging)
                return;

            try
            {
                RefreshLogging();
                lock (new object())
                {
                    g_swLog.WriteLine(DateTime.Now + " | " + g_requestObj.requestGUID + " | " + workflowProperties.OriginatorUser.Name + " | " + message);
                    g_swLog.Flush();
                }
            }
            catch (Exception ex)
            {
                FireEvent("Prop Manager Workflow - Error" + Environment.NewLine + Environment.NewLine +
                          "Request GUID: " + g_requestObj.requestGUID + Environment.NewLine +
                          "Status/History Page Url: " + Environment.NewLine + g_statusLink + Environment.NewLine + Environment.NewLine +
                          "Failed to write to the application log. Verify the configured logging path exists: " + g_assocObj.LoggingPath.Trim() + "." + Environment.NewLine + Environment.NewLine +
                          "Exception caught: " + Environment.NewLine + ex.Message,
                          EVENTID_Logging_Init_Error, 1);
            }
        }

        /// <summary>
        /// Refreshes the StreamWriter so that it's never null
        /// </summary>
        private void RefreshLogging()
        {
            if (g_swLog == null || g_swLog.BaseStream == null)
                g_swLog = new StreamWriter(g_logFile, true);
        }



        // ----------------------------------------------------------------------
        // WORKFLOW FUNCTIONS
        // ---------------------------------------------------------------------- 

        private void createFailureTask_MethodInvoking(object sender, EventArgs e)
        {
            InitLogging();

            string assignedTo = "";
            string waitingOn = "";
            string toList = g_emailTo;
            if (toList != "")
            {
                string[] toAry = null;
                toAry = toList.Split(';');
                assignedTo = @"REDMOND\" + toAry[0].Trim();
                waitingOn = toAry[0].Trim();
            }

            workflowProperties.Item["Request Status"] = "Step Failure (Waiting on " + waitingOn + ")";
            workflowProperties.Item.Update();

            string curStep = workflowProperties.Item["Current Step"].ToString();
            failureTaskId = Guid.NewGuid();
            FailureTaskNotCompleted = true;

            failureTaskProperties.Title = "Failure Task for " + workflowProperties.Item.Title;
            failureTaskProperties.Description = "";
            failureTaskProperties.AssignedTo = assignedTo;
            failureTaskProperties.StartDate = DateTime.Today;
            failureTaskProperties.ExtendedProperties["Step"] = curStep;

            if (curStep == "Prop Request")
            {
                // Note: I'm using HasCustomEmailBody as a boolean placeholder to determine what part of the prop step the workflow is doing.
                // This is used to determine what Action Options need to be displayed in the Failure Task.
                if (!g_PropRequestSucceeded)
                    failureTaskProperties.HasCustomEmailBody = true; 
                else
                    failureTaskProperties.HasCustomEmailBody = false;
            }

            LogMessage("A step (" + curStep + ") failure has occurred. A failure task has been created.");
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.TaskCreated, "", "A step failure has occurred. A failure task has been created. The modification page should now be accessible at the top of this page (this can take up to a few seconds).", "Complete", "");
        }
        private void onFailureTaskCreated_Invoked(object sender, ExternalDataEventArgs e)
        {
            InitLogging();

            try
            {
                string taskLink = GetTaskDisplayFormLink(this.workflowProperties.Web, this.workflowProperties.TaskList, failureTaskAfterProperties.TaskItemId);

                string psBugLine = "";
                if (g_psBugID > 0)
                    psBugLine = "<tr><td>PS Bug #: </td><td>" + "<a href='http://psph/bug/" + g_psProductName + ":" + g_psBugID.ToString() + "'>" + g_psBugID.ToString() + "</a> (" + g_psProductName + ")</td></tr>";
                else
                    psBugLine = "<tr><td>PS Bug #: </td><td>N/A</td></tr>";

                string toList = g_emailTo;
                string sendTo = "";
                if (toList != "")
                {
                    string[] toAry = null;
                    toAry = toList.Split(';');
                    sendTo = toAry[0].Trim() + "@microsoft.com";
                }

                string emailTo = sendTo;
                string emailSubject = "Failure Task for " + workflowProperties.Item.Title;
                string emailBody = "<b><font size=5>Failure Notification</font></b><br><br>" +
                                    "A Prop Manager request has encountered a failure in workflow step: <b>" + workflowProperties.Item["Current Step"].ToString() + "</b>. A failure task has been created and assigned to you to take action.<br><br>" +
                                    "<i>Click <a href='" + taskLink + "'>here</a> to access the <b>failure task</b>.</i><br><br>" +
                                    "<b>Request Information</b><br><table>" +
                                    "<tr><td>Request Type: </td><td>" + workflowProperties.Item["Request Type"].ToString() + "</td></tr>" +
                                    psBugLine +
                                    "<tr><td>Current Step: </td><td>" + workflowProperties.Item["Current Step"].ToString() + "</td></tr>" +
                                    "<tr><td>Environment: </td><td>" + workflowProperties.Item["Environment"].ToString() + "</td></tr>" +
                                    "<tr><td>Priority: </td><td>" + workflowProperties.Item["Priority"].ToString() + "</td></tr>" +
                                    "<tr><td>Created By: </td><td>" + workflowProperties.Item["Created By"].ToString().Remove(0, 3) + "</td></tr>" +
                                    "<tr><td>Date Created: </td><td>" + workflowProperties.Item["Created"].ToString() + "</td></tr>" +
                                    "<tr><td>Last Known Error: </td><td>" + workflowProperties.Item["Last Error"].ToString() + "</td></tr></table><br>" +
                                    "<i>Click <a href='" + g_statusLink + "'>here</a> to access the workflow <b>status/history page</b> for more information.</i><br><br>" +
                                    "<font size=2>Generated by Prop Manager</font>";

                SPUtility.SendEmail(this.workflowProperties.Web, true, false, emailTo, emailSubject, emailBody);
                LogMessage("A failure task notification e-mail has been sent to " + emailTo + ".");

                AddTextToPSBug("[Bug automatically updated by Prop Manager Workflow]" + Environment.NewLine + Environment.NewLine + "The workflow step '" + workflowProperties.Item["Current Step"].ToString() + "' has failed and the workflow has been halted. Action Options are available for this workflow at the following link:" + Environment.NewLine + taskLink, "", true);
                if (g_psBugID > 0)
                    LogMessage("Product Studio Bug #" + g_psBugID.ToString() + " has been updated to indicate the failure.");
            }
            catch (Exception ex)
            {
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Could not update the PS bug and/or send e-mail notification with information about the failure task. Exception caught: " + ex.Message, "Error", g_systemUser);
                LogMessage("Failed to update PS Bug #" + g_psBugID.ToString() + " and/or send e-mail notification with information about the failure task. Exception caught: " + ex.Message);
            }
        }
        private void onFailureTaskChanged_Invoked(object sender, ExternalDataEventArgs e)
        {
            InitLogging();

            FailureTaskStatus = failureTaskAfterProperties.ExtendedProperties["FailureTaskStatus"].ToString();
            FailureTaskOutcome = failureTaskAfterProperties.ExtendedProperties["FailureTaskOutcome"].ToString();
            FailureTaskNotes = failureTaskAfterProperties.Description;

            if (FailureTaskOutcome.Equals("Reset Retries"))
            {
                if (workflowProperties.Item["Current Step"].ToString() == "Prop Request")
                {
                    g_PropRetrying = true;
                    ApprovalTaskNotCompleted = true;
                    g_CreatePropJobSucceeded = false;
                    g_TransferFilesSucceeded = false;
                    g_PropRequestSucceeded = false;
                    g_PropResultsCheckSucceeded = false;

                    ApprovalPropCommands = new ArrayList(ApprovalPropCommands_Backup);
                }

                FailureTaskNotCompleted = false;
                g_curRetryCount = this.g_stepRetryValue;
            }
            else if (FailureTaskOutcome.Equals("Skip Step"))
            {
                FailureTaskNotCompleted = false;

                if (workflowProperties.Item["Current Step"].ToString() == "Initialize Workflow")
                    g_InitWorkflowSucceeded = true;
                else if (workflowProperties.Item["Current Step"].ToString() == "Create PS Bug")
                    g_PSBugSucceeded = true;
                else if (workflowProperties.Item["Current Step"].ToString() == "TransferFiles")
                    g_TransferFilesSucceeded = true;
                else if (workflowProperties.Item["Current Step"].ToString() == "Send E-mail")
                    g_SendEmailSucceeded = true;
                else if (workflowProperties.Item["Current Step"].ToString() == "Create Prop Job")
                {
                    g_CreatePropJobSucceeded = true;
                    g_SkipPropApproval = true;
                    g_PropProcessSucceeded = true;
                }
                else if (workflowProperties.Item["Current Step"].ToString() == "Resolve Bug As")
                {
                    g_ResolveAsSucceeded = true;
                    g_SendFinalEmailSucceeded = true;
                    g_PropProcessSucceeded = true;
                }
                else if (workflowProperties.Item["Current Step"].ToString() == "Send Final E-mail")
                {
                    g_SendFinalEmailSucceeded = true;
                    g_PropProcessSucceeded = true;
                }
                else if (workflowProperties.Item["Current Step"].ToString() == "Prop Request")
                {
                    try
                    {
                        ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
                        JobState jobState = toolsMgmtObj.GetJobStatus(g_toolsMgmtJobID);
                        if (jobState == JobState.Created)
                            toolsMgmtObj.CancelJob(g_toolsMgmtJobID);
                    }
                    catch (Exception ex)
                    {
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, "Error", "");
                        LogMessage("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message);
                        FireEvent("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error, 2);
                    }

                    ApprovalTaskNotApproved = false;
                    ApprovalTaskNotCompleted = false;
                    g_PropRequestSucceeded = true;
                    g_SkipPropApproval = true;
                    g_PropResultsCheckSucceeded = true;
                    g_PropProcessSucceeded = true;
                }

                g_curRetryCount = this.g_stepRetryValue;
            }
            else if (FailureTaskOutcome.Equals("Abort Workflow"))
            {
                FailureTaskNotCompleted = false;

                if (workflowProperties.Item["Current Step"].ToString() != "Prop Request")
                    g_SkipPropApproval = true;

                if (workflowProperties.Item["Current Step"].ToString() == "Resolve Bug As")
                {
                    g_ResolveAsSucceeded = true;
                    g_SendFinalEmailSucceeded = true;
                }
                else if (workflowProperties.Item["Current Step"].ToString() == "Send Final E-mail")
                    g_SendFinalEmailSucceeded = true;
                else if (workflowProperties.Item["Current Step"].ToString() == "Prop Request")
                {
                    try
                    {
                        ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
                        JobState jobState = toolsMgmtObj.GetJobStatus(g_toolsMgmtJobID);
                        if (jobState == JobState.Created)
                            toolsMgmtObj.CancelJob(g_toolsMgmtJobID);
                    }
                    catch (Exception ex)
                    {
                        WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, "Error", "");
                        LogMessage("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message);
                        FireEvent("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error, 2);
                    }

                    g_propFailureTaskNotes = FailureTaskNotes;

                    g_ResolvedAsType = "Won't Fix";
                    ApprovalTaskNotApproved = false;
                    ApprovalTaskNotCompleted = false;
                    g_PropRequestSucceeded = true;
                    g_PropResultsCheckSucceeded = true;
                }

                workflowProperties.Item["Current Step"] = "Aborted";
                workflowProperties.Item["Date Completed"] = DateTime.Now.ToString("M/d/yyyy h:mm tt");
                workflowProperties.Item.Update();

                g_killWorkflow = true;
            }

            string taskUser = failureTaskAfterProperties.ExtendedProperties["FailureTaskUser"].ToString();
            LogMessage("The failure task has been completed. The '" + FailureTaskOutcome + "' action has been chosen.");
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.TaskCompleted, "", "The failure task has been completed. The '" + FailureTaskOutcome + "' action has been chosen.", "Complete", taskUser);
        }

        private void createApprovalTask_MethodInvoking(object sender, EventArgs e)
        {
            string stepName = "Prop Approval";
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.TaskCreated, stepName, "", "Started", "");            

            string assignedTo = "";
            string waitingOn = "";
            string toList = g_emailTo;
            if (toList != "")
            {
                string[] toAry = null;
                toAry = toList.Split(';');
                assignedTo = @"REDMOND\" + toAry[0].Trim();
                waitingOn = toAry[0].Trim();
            }

            workflowProperties.Item["Current Step"] = stepName;
            workflowProperties.Item["Request Status"] = "Waiting on " + waitingOn;
            workflowProperties.Item.Update();

            approvalTaskId = Guid.NewGuid();
            ApprovalTaskNotCompleted = true;

            approvalTaskProperties.Title = "Prop Approval for " + workflowProperties.Item.Title;
            approvalTaskProperties.Description = "";
            approvalTaskProperties.AssignedTo = assignedTo;
            approvalTaskProperties.StartDate = DateTime.Today;
            approvalTaskProperties.ExtendedProperties["Step"] = stepName;
        }
        private void onApprovalTaskChanged_Invoked(object sender, ExternalDataEventArgs e)
        {
            string stepName = "Prop Approval";

            ApprovalTaskStatus = approvalTaskAfterProperties.ExtendedProperties["ApprovalTaskStatus"].ToString();
            ApprovalTaskOutcome = approvalTaskAfterProperties.ExtendedProperties["ApprovalTaskOutcome"].ToString();
            ApprovalTaskNotes = approvalTaskAfterProperties.Description;
            ApprovalTaskUser = approvalTaskAfterProperties.ExtendedProperties["ApprovalTaskUser"].ToString();

            string addInfo = ".";
            if (ApprovalTaskOutcome == "Approve Prop" || ApprovalTaskOutcome == "Update Prop Information")
            {
                ApprovalPropDateTime = approvalTaskAfterProperties.ExtendedProperties["ApprovalPropDateTime"].ToString();
                addInfo = ". The Prop Date, Time is currently set for '" + ApprovalPropDateTime + "'.";
            }

            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The '" + ApprovalTaskOutcome + "' action option has been selected" + addInfo, "Complete", ApprovalTaskUser);

            if (ApprovalTaskOutcome == "Approve Prop" || ApprovalTaskOutcome == "Update Prop Information")
            {
                ApprovalTaskNotApproved = false;
                g_ResolvedAsType = "Fixed";

                ApprovalPropCommands = new ArrayList();
                ApprovalPropCommands_Backup = new ArrayList();
                string[] cmds = SplitByString(approvalTaskAfterProperties.ExtendedProperties["ApprovalPropCommands"].ToString(), "::::");
                foreach (string cmd in cmds)
                {
                    if (cmd != "")
                    {
                        ApprovalPropCommands.Add(cmd);
                        ApprovalPropCommands_Backup.Add(cmd);
                    }
                }
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "The workflow has been updated to reflect newly approved/updated prop values (see the Approval Task's history section for details).", "Complete", g_systemUser);
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, stepName, "", "Updated", ApprovalTaskUser);
            }
            else if (ApprovalTaskOutcome == "Skip Prop")
            {
                try
                {
                    ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
                    JobState jobState = toolsMgmtObj.GetJobStatus(g_toolsMgmtJobID);
                    if (jobState == JobState.Created)
                        toolsMgmtObj.CancelJob(g_toolsMgmtJobID);
                }
                catch (Exception ex)
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, "Error", "");
                    LogMessage("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message);
                    FireEvent("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error, 2);
                }

                ApprovalTaskNotApproved = false;
                ApprovalTaskNotCompleted = false;
                g_PropResultsCheckSucceeded = true;
                g_SkipPropApproval = true;
                g_PropProcessSucceeded = true;
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.TaskCompleted, stepName, "", "Complete", ApprovalTaskUser);
            }
            else if (ApprovalTaskOutcome == "Won't Fix")
            {
                try
                {
                    ToolsMgmt toolsMgmtObj = CreateToolsMgmtObj();
                    JobState jobState = toolsMgmtObj.GetJobStatus(g_toolsMgmtJobID);
                    if (jobState == JobState.Created)
                        toolsMgmtObj.CancelJob(g_toolsMgmtJobID);
                }
                catch (Exception ex)
                {
                    WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, "Error", "");
                    LogMessage("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message);
                    FireEvent("Failed to cancel Tools Management Job ID #" + g_toolsMgmtJobID + ". This will not stop the workflow from continuing. Exception caught: " + ex.Message, EVENTID_Tools_Management_Call_Error, 2);
                }

                g_ResolvedAsType = "Won't Fix";

                ApprovalTaskNotApproved = false;
                ApprovalTaskNotCompleted = false;
                g_PropResultsCheckSucceeded = true;
                g_killWorkflow = true;
                WriteToWorkflowHistory(SPWorkflowHistoryEventType.TaskCompleted, stepName, "", "Complete", ApprovalTaskUser);
            }
        }
        private void updateApprovalTaskStatus_MethodInvoking(object sender, EventArgs e)
        {
            approvalTaskProperties.ExtendedProperties["Status"] = "Completed";
            approvalTaskProperties.ExtendedProperties["ApprovalTaskStatus"] = "Completed";
            ApprovalTaskNotCompleted = false;
        }

        private void onWorkflowModified_Invoked(object sender, ExternalDataEventArgs e)
        {
            string[] contextAry = SplitByString(ContextData, "::::");

            // Deserialize the initiation data
            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(contextAry[1]));
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
            g_requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

            // Deserialize the association data
            stream = new MemoryStream(Encoding.UTF8.GetBytes(contextAry[0]));
            serializer = new XmlSerializer(typeof(WorkflowAssociationData));
            g_assocObj = (WorkflowAssociationData)serializer.Deserialize(stream);

            PopulateVars();

            System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
            workflowProperties.Item.Attachments.Add(DateTime.Now.ToString("yyyy-MM-dd-Hmmss") + "_" + g_requestObj.requestGUID + ".xml", encoding.GetBytes(contextAry[1]));
            workflowProperties.Item.Update();

            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowComment, "", "Workflow variables have been updated to reflect any modification page updates.", "Complete", g_modUser);
            LogMessage("Workflow variables have been updated to reflect any modification page updates.");
        }

        private void SystemException_ExecuteCode(object sender, EventArgs e)
        {
            try
            {
                workflowProperties.Item["Current Step"] = "Completed";
                workflowProperties.Item["Request Status"] = workflowProperties.Item["Status"].ToString();
                workflowProperties.Item.Update();
            }
            catch (Exception) {/* do nothing here */}

            FireEvent("Prop Manager Workflow - Error" + Environment.NewLine + Environment.NewLine +
                      "Request GUID: " + g_requestObj.requestGUID + Environment.NewLine +
                      "Status/History Page: " + g_statusLink + Environment.NewLine + Environment.NewLine +
                      "The following error occured:" + this.faultHandlerActivity1.Fault.Message,
                      EVENTID_Workflow_System_Error, 1);

            InitLogging();
            LogMessage("An unexpected workflow error occurred. Exception caught: " + this.faultHandlerActivity1.Fault.Message);
            DisableLogging();
            WriteToWorkflowHistory(SPWorkflowHistoryEventType.WorkflowError, "", "(!) An unexpected workflow error occurred. Exception caught: " + this.faultHandlerActivity1.Fault.Message, "Workflow Failure", "");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\ToolsMgmt.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace PropManagerWorkflow
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ToolsMgmtSoap", Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ToolsMgmt : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GetActionTableOperationCompleted;

        private System.Threading.SendOrPostCallback BeginWorkOperationCompleted;

        private System.Threading.SendOrPostCallback WorkFilesReadyOperationCompleted;

        private System.Threading.SendOrPostCallback GetWorkStatusOperationCompleted;

        private System.Threading.SendOrPostCallback CreateJobOperationCompleted;

        private System.Threading.SendOrPostCallback AddActionOperationCompleted;

        private System.Threading.SendOrPostCallback ExecuteJobOperationCompleted;

        private System.Threading.SendOrPostCallback CancelJobOperationCompleted;

        private System.Threading.SendOrPostCallback GetJobStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetActionStatusOperationCompleted;

        private System.Threading.SendOrPostCallback GetActionResultOperationCompleted;

        private System.Threading.SendOrPostCallback CleanupJobOperationCompleted;

        private System.Threading.SendOrPostCallback GetJobLogOperationCompleted;

        /// <remarks/>
        public ToolsMgmt()
        {
            this.Url = "http://paulram002:12000/wctoolsmgmt/toolsmgmt.asmx";
        }

        /// <remarks/>
        public event GetActionTableCompletedEventHandler GetActionTableCompleted;

        /// <remarks/>
        public event BeginWorkCompletedEventHandler BeginWorkCompleted;

        /// <remarks/>
        public event WorkFilesReadyCompletedEventHandler WorkFilesReadyCompleted;

        /// <remarks/>
        public event GetWorkStatusCompletedEventHandler GetWorkStatusCompleted;

        /// <remarks/>
        public event CreateJobCompletedEventHandler CreateJobCompleted;

        /// <remarks/>
        public event AddActionCompletedEventHandler AddActionCompleted;

        /// <remarks/>
        public event ExecuteJobCompletedEventHandler ExecuteJobCompleted;

        /// <remarks/>
        public event CancelJobCompletedEventHandler CancelJobCompleted;

        /// <remarks/>
        public event GetJobStatusCompletedEventHandler GetJobStatusCompleted;

        /// <remarks/>
        public event GetActionStatusCompletedEventHandler GetActionStatusCompleted;

        /// <remarks/>
        public event GetActionResultCompletedEventHandler GetActionResultCompleted;

        /// <remarks/>
        public event CleanupJobCompletedEventHandler CleanupJobCompleted;

        /// <remarks/>
        public event GetJobLogCompletedEventHandler GetJobLogCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionTable", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActionTable()
        {
            object[] results = this.Invoke("GetActionTable", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetActionTable(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetActionTable", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetActionTable(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetActionTableAsync()
        {
            this.GetActionTableAsync(null);
        }

        /// <remarks/>
        public void GetActionTableAsync(object userState)
        {
            if ((this.GetActionTableOperationCompleted == null))
            {
                this.GetActionTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionTableOperationCompleted);
            }
            this.InvokeAsync("GetActionTable", new object[0], this.GetActionTableOperationCompleted, userState);
        }

        private void OnGetActionTableOperationCompleted(object arg)
        {
            if ((this.GetActionTableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionTableCompleted(this, new GetActionTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/BeginWork", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BeginWorkResult BeginWork(BeginWorkInfo bwi)
        {
            object[] results = this.Invoke("BeginWork", new object[] {
                    bwi});
            return ((BeginWorkResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBeginWork(BeginWorkInfo bwi, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BeginWork", new object[] {
                    bwi}, callback, asyncState);
        }

        /// <remarks/>
        public BeginWorkResult EndBeginWork(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((BeginWorkResult)(results[0]));
        }

        /// <remarks/>
        public void BeginWorkAsync(BeginWorkInfo bwi)
        {
            this.BeginWorkAsync(bwi, null);
        }

        /// <remarks/>
        public void BeginWorkAsync(BeginWorkInfo bwi, object userState)
        {
            if ((this.BeginWorkOperationCompleted == null))
            {
                this.BeginWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginWorkOperationCompleted);
            }
            this.InvokeAsync("BeginWork", new object[] {
                    bwi}, this.BeginWorkOperationCompleted, userState);
        }

        private void OnBeginWorkOperationCompleted(object arg)
        {
            if ((this.BeginWorkCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginWorkCompleted(this, new BeginWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/WorkFilesReady", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WorkFilesReadyResult WorkFilesReady(WorkFilesReadyInfo wfri)
        {
            object[] results = this.Invoke("WorkFilesReady", new object[] {
                    wfri});
            return ((WorkFilesReadyResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginWorkFilesReady(WorkFilesReadyInfo wfri, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("WorkFilesReady", new object[] {
                    wfri}, callback, asyncState);
        }

        /// <remarks/>
        public WorkFilesReadyResult EndWorkFilesReady(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((WorkFilesReadyResult)(results[0]));
        }

        /// <remarks/>
        public void WorkFilesReadyAsync(WorkFilesReadyInfo wfri)
        {
            this.WorkFilesReadyAsync(wfri, null);
        }

        /// <remarks/>
        public void WorkFilesReadyAsync(WorkFilesReadyInfo wfri, object userState)
        {
            if ((this.WorkFilesReadyOperationCompleted == null))
            {
                this.WorkFilesReadyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWorkFilesReadyOperationCompleted);
            }
            this.InvokeAsync("WorkFilesReady", new object[] {
                    wfri}, this.WorkFilesReadyOperationCompleted, userState);
        }

        private void OnWorkFilesReadyOperationCompleted(object arg)
        {
            if ((this.WorkFilesReadyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WorkFilesReadyCompleted(this, new WorkFilesReadyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetWorkStatus", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetWorkStatusResult GetWorkStatus(GetWorkStatusInfo gwsi)
        {
            object[] results = this.Invoke("GetWorkStatus", new object[] {
                    gwsi});
            return ((GetWorkStatusResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetWorkStatus(GetWorkStatusInfo gwsi, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetWorkStatus", new object[] {
                    gwsi}, callback, asyncState);
        }

        /// <remarks/>
        public GetWorkStatusResult EndGetWorkStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetWorkStatusResult)(results[0]));
        }

        /// <remarks/>
        public void GetWorkStatusAsync(GetWorkStatusInfo gwsi)
        {
            this.GetWorkStatusAsync(gwsi, null);
        }

        /// <remarks/>
        public void GetWorkStatusAsync(GetWorkStatusInfo gwsi, object userState)
        {
            if ((this.GetWorkStatusOperationCompleted == null))
            {
                this.GetWorkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkStatusOperationCompleted);
            }
            this.InvokeAsync("GetWorkStatus", new object[] {
                    gwsi}, this.GetWorkStatusOperationCompleted, userState);
        }

        private void OnGetWorkStatusOperationCompleted(object arg)
        {
            if ((this.GetWorkStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkStatusCompleted(this, new GetWorkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CreateJob", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateJob(string description, out JobInfo jobInfo)
        {
            object[] results = this.Invoke("CreateJob", new object[] {
                    description});
            jobInfo = ((JobInfo)(results[1]));
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreateJob(string description, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateJob", new object[] {
                    description}, callback, asyncState);
        }

        /// <remarks/>
        public long EndCreateJob(System.IAsyncResult asyncResult, out JobInfo jobInfo)
        {
            object[] results = this.EndInvoke(asyncResult);
            jobInfo = ((JobInfo)(results[1]));
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void CreateJobAsync(string description)
        {
            this.CreateJobAsync(description, null);
        }

        /// <remarks/>
        public void CreateJobAsync(string description, object userState)
        {
            if ((this.CreateJobOperationCompleted == null))
            {
                this.CreateJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateJobOperationCompleted);
            }
            this.InvokeAsync("CreateJob", new object[] {
                    description}, this.CreateJobOperationCompleted, userState);
        }

        private void OnCreateJobOperationCompleted(object arg)
        {
            if ((this.CreateJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateJobCompleted(this, new CreateJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/AddAction", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAction(ActionInfo actionInfo)
        {
            object[] results = this.Invoke("AddAction", new object[] {
                    actionInfo});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddAction(ActionInfo actionInfo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddAction", new object[] {
                    actionInfo}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddAction(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddActionAsync(ActionInfo actionInfo)
        {
            this.AddActionAsync(actionInfo, null);
        }

        /// <remarks/>
        public void AddActionAsync(ActionInfo actionInfo, object userState)
        {
            if ((this.AddActionOperationCompleted == null))
            {
                this.AddActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActionOperationCompleted);
            }
            this.InvokeAsync("AddAction", new object[] {
                    actionInfo}, this.AddActionOperationCompleted, userState);
        }

        private void OnAddActionOperationCompleted(object arg)
        {
            if ((this.AddActionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActionCompleted(this, new AddActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/ExecuteJob", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteJob(long jobId)
        {
            object[] results = this.Invoke("ExecuteJob", new object[] {
                    jobId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteJob(long jobId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExecuteJob", new object[] {
                    jobId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndExecuteJob(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void ExecuteJobAsync(long jobId)
        {
            this.ExecuteJobAsync(jobId, null);
        }

        /// <remarks/>
        public void ExecuteJobAsync(long jobId, object userState)
        {
            if ((this.ExecuteJobOperationCompleted == null))
            {
                this.ExecuteJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteJobOperationCompleted);
            }
            this.InvokeAsync("ExecuteJob", new object[] {
                    jobId}, this.ExecuteJobOperationCompleted, userState);
        }

        private void OnExecuteJobOperationCompleted(object arg)
        {
            if ((this.ExecuteJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteJobCompleted(this, new ExecuteJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CancelJob", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelJob(long jobId)
        {
            this.Invoke("CancelJob", new object[] {
                    jobId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginCancelJob(long jobId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CancelJob", new object[] {
                    jobId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndCancelJob(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CancelJobAsync(long jobId)
        {
            this.CancelJobAsync(jobId, null);
        }

        /// <remarks/>
        public void CancelJobAsync(long jobId, object userState)
        {
            if ((this.CancelJobOperationCompleted == null))
            {
                this.CancelJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelJobOperationCompleted);
            }
            this.InvokeAsync("CancelJob", new object[] {
                    jobId}, this.CancelJobOperationCompleted, userState);
        }

        private void OnCancelJobOperationCompleted(object arg)
        {
            if ((this.CancelJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetJobStatus", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobState GetJobStatus(long jobId)
        {
            object[] results = this.Invoke("GetJobStatus", new object[] {
                    jobId});
            return ((JobState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetJobStatus(long jobId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetJobStatus", new object[] {
                    jobId}, callback, asyncState);
        }

        /// <remarks/>
        public JobState EndGetJobStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((JobState)(results[0]));
        }

        /// <remarks/>
        public void GetJobStatusAsync(long jobId)
        {
            this.GetJobStatusAsync(jobId, null);
        }

        /// <remarks/>
        public void GetJobStatusAsync(long jobId, object userState)
        {
            if ((this.GetJobStatusOperationCompleted == null))
            {
                this.GetJobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobStatusOperationCompleted);
            }
            this.InvokeAsync("GetJobStatus", new object[] {
                    jobId}, this.GetJobStatusOperationCompleted, userState);
        }

        private void OnGetJobStatusOperationCompleted(object arg)
        {
            if ((this.GetJobStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobStatusCompleted(this, new GetJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionStatus", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobState GetActionStatus(long jobId, int rank)
        {
            object[] results = this.Invoke("GetActionStatus", new object[] {
                    jobId,
                    rank});
            return ((JobState)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetActionStatus(long jobId, int rank, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetActionStatus", new object[] {
                    jobId,
                    rank}, callback, asyncState);
        }

        /// <remarks/>
        public JobState EndGetActionStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((JobState)(results[0]));
        }

        /// <remarks/>
        public void GetActionStatusAsync(long jobId, int rank)
        {
            this.GetActionStatusAsync(jobId, rank, null);
        }

        /// <remarks/>
        public void GetActionStatusAsync(long jobId, int rank, object userState)
        {
            if ((this.GetActionStatusOperationCompleted == null))
            {
                this.GetActionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionStatusOperationCompleted);
            }
            this.InvokeAsync("GetActionStatus", new object[] {
                    jobId,
                    rank}, this.GetActionStatusOperationCompleted, userState);
        }

        private void OnGetActionStatusOperationCompleted(object arg)
        {
            if ((this.GetActionStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionStatusCompleted(this, new GetActionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetActionResult", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ActionResult GetActionResult(long jobId, int rank)
        {
            object[] results = this.Invoke("GetActionResult", new object[] {
                    jobId,
                    rank});
            return ((ActionResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetActionResult(long jobId, int rank, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetActionResult", new object[] {
                    jobId,
                    rank}, callback, asyncState);
        }

        /// <remarks/>
        public ActionResult EndGetActionResult(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionResult)(results[0]));
        }

        /// <remarks/>
        public void GetActionResultAsync(long jobId, int rank)
        {
            this.GetActionResultAsync(jobId, rank, null);
        }

        /// <remarks/>
        public void GetActionResultAsync(long jobId, int rank, object userState)
        {
            if ((this.GetActionResultOperationCompleted == null))
            {
                this.GetActionResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionResultOperationCompleted);
            }
            this.InvokeAsync("GetActionResult", new object[] {
                    jobId,
                    rank}, this.GetActionResultOperationCompleted, userState);
        }

        private void OnGetActionResultOperationCompleted(object arg)
        {
            if ((this.GetActionResultCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionResultCompleted(this, new GetActionResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/CleanupJob", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CleanupJob(ulong jobId)
        {
            object[] results = this.Invoke("CleanupJob", new object[] {
                    jobId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCleanupJob(ulong jobId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CleanupJob", new object[] {
                    jobId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndCleanupJob(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void CleanupJobAsync(ulong jobId)
        {
            this.CleanupJobAsync(jobId, null);
        }

        /// <remarks/>
        public void CleanupJobAsync(ulong jobId, object userState)
        {
            if ((this.CleanupJobOperationCompleted == null))
            {
                this.CleanupJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanupJobOperationCompleted);
            }
            this.InvokeAsync("CleanupJob", new object[] {
                    jobId}, this.CleanupJobOperationCompleted, userState);
        }

        private void OnCleanupJobOperationCompleted(object arg)
        {
            if ((this.CleanupJobCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanupJobCompleted(this, new CleanupJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/ToolsMgmt/GetJobLog", RequestNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", ResponseNamespace = "http://websvc.xboxlive.com/ToolsMgmt/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJobLog(int jobId, out JobLogEntry[] jobLog)
        {
            object[] results = this.Invoke("GetJobLog", new object[] {
                    jobId});
            jobLog = ((JobLogEntry[])(results[1]));
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetJobLog(int jobId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetJobLog", new object[] {
                    jobId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetJobLog(System.IAsyncResult asyncResult, out JobLogEntry[] jobLog)
        {
            object[] results = this.EndInvoke(asyncResult);
            jobLog = ((JobLogEntry[])(results[1]));
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetJobLogAsync(int jobId)
        {
            this.GetJobLogAsync(jobId, null);
        }

        /// <remarks/>
        public void GetJobLogAsync(int jobId, object userState)
        {
            if ((this.GetJobLogOperationCompleted == null))
            {
                this.GetJobLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobLogOperationCompleted);
            }
            this.InvokeAsync("GetJobLog", new object[] {
                    jobId}, this.GetJobLogOperationCompleted, userState);
        }

        private void OnGetJobLogOperationCompleted(object arg)
        {
            if ((this.GetJobLogCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobLogCompleted(this, new GetJobLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class BeginWorkInfo
    {

        private uint workTypeField;

        private string titleIdField;

        /// <remarks/>
        public uint workType
        {
            get
            {
                return this.workTypeField;
            }
            set
            {
                this.workTypeField = value;
            }
        }

        /// <remarks/>
        public string titleId
        {
            get
            {
                return this.titleIdField;
            }
            set
            {
                this.titleIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class JobLogEntry
    {

        private System.DateTime loggedField;

        private int levelField;

        private string logField;

        /// <remarks/>
        public System.DateTime logged
        {
            get
            {
                return this.loggedField;
            }
            set
            {
                this.loggedField = value;
            }
        }

        /// <remarks/>
        public int level
        {
            get
            {
                return this.levelField;
            }
            set
            {
                this.levelField = value;
            }
        }

        /// <remarks/>
        public string log
        {
            get
            {
                return this.logField;
            }
            set
            {
                this.logField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ActionResult
    {

        private JobState stateField;

        private int returnCodeField;

        private string consoleOutputField;

        /// <remarks/>
        public JobState state
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        public int returnCode
        {
            get
            {
                return this.returnCodeField;
            }
            set
            {
                this.returnCodeField = value;
            }
        }

        /// <remarks/>
        public string consoleOutput
        {
            get
            {
                return this.consoleOutputField;
            }
            set
            {
                this.consoleOutputField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public enum JobState
    {

        /// <remarks/>
        Created,

        /// <remarks/>
        Pending,

        /// <remarks/>
        Download,

        /// <remarks/>
        Running,

        /// <remarks/>
        Canceled,

        /// <remarks/>
        Complete,

        /// <remarks/>
        Failed,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class Parameter
    {

        private string nameField;

        private string valueField;

        /// <remarks/>
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class ActionInfo
    {

        private long jobIdField;

        private string toolFileNameField;

        private Parameter[] parametersField;

        private string[] filesField;

        /// <remarks/>
        public long jobId
        {
            get
            {
                return this.jobIdField;
            }
            set
            {
                this.jobIdField = value;
            }
        }

        /// <remarks/>
        public string toolFileName
        {
            get
            {
                return this.toolFileNameField;
            }
            set
            {
                this.toolFileNameField = value;
            }
        }

        /// <remarks/>
        public Parameter[] parameters
        {
            get
            {
                return this.parametersField;
            }
            set
            {
                this.parametersField = value;
            }
        }

        /// <remarks/>
        public string[] files
        {
            get
            {
                return this.filesField;
            }
            set
            {
                this.filesField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class JobInfo
    {

        private long jobIdField;

        private ulong spaceAvailableField;

        private string uploadPathField;

        /// <remarks/>
        public long jobId
        {
            get
            {
                return this.jobIdField;
            }
            set
            {
                this.jobIdField = value;
            }
        }

        /// <remarks/>
        public ulong spaceAvailable
        {
            get
            {
                return this.spaceAvailableField;
            }
            set
            {
                this.spaceAvailableField = value;
            }
        }

        /// <remarks/>
        public string uploadPath
        {
            get
            {
                return this.uploadPathField;
            }
            set
            {
                this.uploadPathField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class GetWorkStatusResult
    {

        private bool workCompleteField;

        private int returnCodeField;

        private string consoleOutputField;

        /// <remarks/>
        public bool workComplete
        {
            get
            {
                return this.workCompleteField;
            }
            set
            {
                this.workCompleteField = value;
            }
        }

        /// <remarks/>
        public int returnCode
        {
            get
            {
                return this.returnCodeField;
            }
            set
            {
                this.returnCodeField = value;
            }
        }

        /// <remarks/>
        public string consoleOutput
        {
            get
            {
                return this.consoleOutputField;
            }
            set
            {
                this.consoleOutputField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class GetWorkStatusInfo
    {

        private ulong workIdField;

        /// <remarks/>
        public ulong workId
        {
            get
            {
                return this.workIdField;
            }
            set
            {
                this.workIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class WorkFilesReadyResult
    {

        private bool successField;

        /// <remarks/>
        public bool success
        {
            get
            {
                return this.successField;
            }
            set
            {
                this.successField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class WorkFilesReadyInfo
    {

        private ulong workIdField;

        private string relativePathField;

        /// <remarks/>
        public ulong workId
        {
            get
            {
                return this.workIdField;
            }
            set
            {
                this.workIdField = value;
            }
        }

        /// <remarks/>
        public string relativePath
        {
            get
            {
                return this.relativePathField;
            }
            set
            {
                this.relativePathField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://websvc.xboxlive.com/ToolsMgmt/")]
    public partial class BeginWorkResult
    {

        private ulong workIdField;

        private ulong spaceAvailableField;

        /// <remarks/>
        public ulong workId
        {
            get
            {
                return this.workIdField;
            }
            set
            {
                this.workIdField = value;
            }
        }

        /// <remarks/>
        public ulong spaceAvailable
        {
            get
            {
                return this.spaceAvailableField;
            }
            set
            {
                this.spaceAvailableField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionTableCompletedEventHandler(object sender, GetActionTableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetActionTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BeginWorkCompletedEventHandler(object sender, BeginWorkCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BeginWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public BeginWorkResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((BeginWorkResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void WorkFilesReadyCompletedEventHandler(object sender, WorkFilesReadyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WorkFilesReadyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal WorkFilesReadyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public WorkFilesReadyResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((WorkFilesReadyResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWorkStatusCompletedEventHandler(object sender, GetWorkStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetWorkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public GetWorkStatusResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((GetWorkStatusResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateJobCompletedEventHandler(object sender, CreateJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }

        /// <remarks/>
        public JobInfo jobInfo
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((JobInfo)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddActionCompletedEventHandler(object sender, AddActionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ExecuteJobCompletedEventHandler(object sender, ExecuteJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExecuteJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelJobCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetJobStatusCompletedEventHandler(object sender, GetJobStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public JobState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((JobState)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionStatusCompletedEventHandler(object sender, GetActionStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetActionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public JobState Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((JobState)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActionResultCompletedEventHandler(object sender, GetActionResultCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActionResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetActionResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ActionResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ActionResult)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CleanupJobCompletedEventHandler(object sender, CleanupJobCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CleanupJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CleanupJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetJobLogCompletedEventHandler(object sender, GetJobLogCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetJobLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }

        /// <remarks/>
        public JobLogEntry[] jobLog
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((JobLogEntry[])(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\Properties\AssemblyInfo.cs ===
#region Using directives

using System.Reflection;
using System.Runtime.CompilerServices;

#endregion

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("PropManagerWorkflow")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MS")]
[assembly: AssemblyProduct("PropManagerWorkflow")]
[assembly: AssemblyCopyright("Copyright @ MS 2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using '*'.
[assembly: AssemblyVersion("1.0.4.2")]

//NOTE: When updating the namespaces in the project please add new or update existing the XmlnsDefinitionAttribute
//You can add additional attributes in order to map any additional namespaces you have in the project
//[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.com/PropManagerWorkflow", "PropManagerWorkflow")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PropManagerWorkflow.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "8.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\Workflow.designer.cs ===
using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Drawing;
using System.Reflection;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Design;
using System.Workflow.Runtime;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;

namespace PropManagerWorkflow
{
	public sealed partial class Workflow
	{
		#region Designer generated code
		
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            this.CanModifyActivities = true;
            System.Workflow.ComponentModel.ActivityBind activitybind1 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken1 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind2 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference1 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind3 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken2 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind4 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken3 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind5 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind6 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind7 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference2 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference3 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind8 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind9 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference4 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference5 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind10 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken4 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind11 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind12 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken5 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind13 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference6 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference7 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind14 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken6 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind15 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference8 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind16 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken7 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind17 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind18 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference9 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind19 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken8 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind20 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind21 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken9 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind22 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken10 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind23 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind24 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference10 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind25 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken11 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind26 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind27 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken12 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind28 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken13 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind29 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind30 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind31 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken14 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind32 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind33 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken15 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind34 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind35 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken16 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind36 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference11 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind37 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken17 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind38 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken18 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind39 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind40 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference12 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference13 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind41 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken19 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind42 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind43 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind44 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind45 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken20 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind46 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference14 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind47 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind48 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind49 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken21 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind50 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference15 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind51 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference16 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind52 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken22 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind53 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind54 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken23 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind55 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken24 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind56 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind57 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind58 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind59 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken25 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind60 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind61 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference17 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind62 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken26 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind63 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind64 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken27 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind65 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken28 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind66 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind67 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind68 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference18 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind69 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken29 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind70 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind71 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken30 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind72 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken31 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind73 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind74 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken32 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind75 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind76 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference19 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference20 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind77 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken33 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind78 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind79 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken34 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind80 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind81 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind82 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind83 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference21 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind84 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind85 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind86 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken35 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind87 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference22 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference23 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference24 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind88 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken36 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind89 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference25 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind90 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken37 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind91 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind92 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken38 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind93 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken39 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind94 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind95 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind96 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind97 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind98 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind99 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference26 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference27 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind100 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind101 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind102 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind103 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference28 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference29 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference30 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference31 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference32 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind104 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken40 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind105 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference33 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference34 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference35 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference36 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind106 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken41 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind107 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind108 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken42 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind109 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind110 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind111 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind112 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken43 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind113 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind114 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind115 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind118 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind116 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken44 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind117 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference37 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference38 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference39 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind119 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind120 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind123 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind121 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind122 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference40 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference41 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind124 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken45 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind125 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind126 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken46 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind127 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind128 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind129 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind130 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind131 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference42 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference43 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference44 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind132 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind133 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind134 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind137 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind135 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind136 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference45 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference46 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference47 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.ComponentModel.ActivityBind activitybind138 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind139 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.ComponentModel.ActivityBind activitybind140 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Runtime.CorrelationToken correlationtoken47 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind141 = new System.Workflow.ComponentModel.ActivityBind();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference48 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference49 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference50 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference51 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference52 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference53 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference54 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference55 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference56 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference57 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference58 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference59 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Activities.Rules.RuleConditionReference ruleconditionreference60 = new System.Workflow.Activities.Rules.RuleConditionReference();
            System.Workflow.Runtime.CorrelationToken correlationtoken48 = new System.Workflow.Runtime.CorrelationToken();
            System.Workflow.ComponentModel.ActivityBind activitybind142 = new System.Workflow.ComponentModel.ActivityBind();
            this.onPropRequestFailureTaskChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.whilePropRequestFailure = new System.Workflow.Activities.WhileActivity();
            this.onPropRequestFailureTaskCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createPropRequestFailureTask = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.DelayForPropRequestFailure = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.ifPropRequestFailureTask = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropRequestFailureDelay = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropRequestFailureTaskActivity = new System.Workflow.Activities.IfElseActivity();
            this.ifPropRequestFailureDelayActivity = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScopePropFailure = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.PropRequest = new System.Workflow.Activities.CodeActivity();
            this.DelayBeforeProp = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.FileCheckDelay = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.ifTimeToProp = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifNotTimeToProp = new System.Workflow.Activities.IfElseBranchActivity();
            this.onFailureTaskSendEmailChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.onFailureTaskTransferFilesChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.ifElseBranchActivity8 = new System.Workflow.Activities.IfElseBranchActivity();
            this.onPropResultsFailureTaskChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.on_ApprovalTask_ChangedUpdate2 = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.DelayForPropResultsCheck = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.ifPropActivity = new System.Workflow.Activities.IfElseActivity();
            this.ComputePropDelay = new System.Workflow.Activities.CodeActivity();
            this.whileSendEmailFailure = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationSendEmail = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onFailureTaskSendEmailCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createFailureTaskSendEmail = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.whileTransferFilesFailure = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationTransferFiles = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onFailTaskTransferFilesCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createFailureTaskTransferFiles = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.ifTransferFilesCheckDelay = new System.Workflow.Activities.IfElseActivity();
            this.TransferFiles = new System.Workflow.Activities.CodeActivity();
            this.on_CreateToolsMgmtJob_FailureTask_Changed = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.onSendFinalEmailFailureTaskChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.onTaskResolveBugAsFailed = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.PropFailureCAG = new System.Workflow.Activities.ConditionedActivityGroup();
            this.onPropResultsFailureTaskCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createPropResultsFailureTask = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.ifPropResultsCheckNotComplete = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropApproved = new System.Workflow.Activities.IfElseBranchActivity();
            this.onApprovalTaskChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.wssUpdateModificationContextSendEmail = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModifiedSendEmail = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifActivity4 = new System.Workflow.Activities.IfElseBranchActivity();
            this.wssUpdateModificationContextTransferFiles = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModifiedTransferFiles = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifActivity3 = new System.Workflow.Activities.IfElseBranchActivity();
            this.sequenceActivity6 = new System.Workflow.Activities.SequenceActivity();
            this.delayFor_CreateToolsMgmtJob_Failure = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.while_CreateToolsMgmtJob_Failed = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModification_CreateToolsMgmtJob = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.on_CreateToolsMgmtJob_FailureTask_Created = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.create_CreateToolsMgmtJob_FailureTask = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.PSAttachFilesDelay = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.onFailureTaskAttachRequestXMLChanged = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.delayForActivity4 = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.whileSendFinalEmailFailed = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModification_SendFinalEmail = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onSendFinalEmailFailureTaskCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createSendFinalEmailFailureTask = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.delayForActivity2 = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.whileResolveBugAsFailed = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModification_ResolveBugAs = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onTaskResolveBugAsFailedCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createTaskResolveBugAsFailed = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.updateApprovalTask_Status = new Microsoft.SharePoint.WorkflowActions.UpdateTask();
            this.ifPropResultsFailed = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropResultsCheckNotComplete_Activity = new System.Workflow.Activities.IfElseActivity();
            this.PropResult = new System.Workflow.Activities.CodeActivity();
            this.ifPropApprovedActivity = new System.Workflow.Activities.IfElseActivity();
            this.whileWaitingForApproval = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationApproval = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.createApprovalTask = new Microsoft.SharePoint.WorkflowActions.CreateTaskWithContentType();
            this.SendEmailRetryDelay = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.eventDrivenActivity4 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifSendEmailFailureTask = new System.Workflow.Activities.IfElseActivity();
            this.SendMail = new System.Workflow.Activities.CodeActivity();
            this.TransferFilesRetryDelay = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.eventDrivenActivity3 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifTransferFilesFailTask = new System.Workflow.Activities.IfElseActivity();
            this.TransferFilesVerify = new System.Workflow.Activities.CodeActivity();
            this.whileTransferFilesProcess = new System.Workflow.Activities.WhileActivity();
            this.TransferFilesInit = new System.Workflow.Activities.CodeActivity();
            this.wssUpdateModificationContext_CreateToolsMgmtJob = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModified_CreateToolsMgmtJob = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.if_CreateToolsMgmtJob_Failure = new System.Workflow.Activities.IfElseBranchActivity();
            this.if_CreateToolsMgmtJob_Failed = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifElseBranchActivity5 = new System.Workflow.Activities.IfElseBranchActivity();
            this.cancellationHandlerActivity3 = new System.Workflow.ComponentModel.CancellationHandlerActivity();
            this.onFailureTaskPSBug = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.whileAttachRequestXMLFailure = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationAttachRequestXML = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onFailureTaskAttachRequestXMLCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createFailureTaskAttachRequestXML = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.wssUpdateModificationContext_SendFinalEmail = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModified_SendFinalEmail = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifElseBranchActivity11 = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifSendFinalEmailFailed = new System.Workflow.Activities.IfElseBranchActivity();
            this.wssUpdateModificationContext_ResolveBugAs = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModified_ResolveBugAs = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifResolveBugAsDelay = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifResolveBugAsFailed = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropProcessSucceeded = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropResultsFailed_Activity = new System.Workflow.Activities.IfElseActivity();
            this.sequencePropResultCheck = new System.Workflow.Activities.SequenceActivity();
            this.sequencePropApproved = new System.Workflow.Activities.SequenceActivity();
            this.onApprovalTaskChanged_Update = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.if_PropFirstTime2 = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifElseBranchActivity3 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlersActivity4 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceSendEmail = new System.Workflow.Activities.SequenceActivity();
            this.ifElseBranchActivity2 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlersActivity3 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceTransferFiles = new System.Workflow.Activities.SequenceActivity();
            this.eventDrivenActivity7 = new System.Workflow.Activities.EventDrivenActivity();
            this.if_CreateToolsMgmtJob_Failure_Activity = new System.Workflow.Activities.IfElseActivity();
            this.if_CreateToolsMgmtJob_Failed_Activity = new System.Workflow.Activities.IfElseActivity();
            this.CreateToolsMgmtJob = new System.Workflow.Activities.CodeActivity();
            this.ifPSBugAttachFilesDelay = new System.Workflow.Activities.IfElseActivity();
            this.PSBugAttachFiles = new System.Workflow.Activities.CodeActivity();
            this.whilePSBugFailure = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationPSBug = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onFailTaskPSBugCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createFailureTaskPSBug = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.onFailTask_InitWorkflow_Changed = new Microsoft.SharePoint.WorkflowActions.OnTaskChanged();
            this.wssUpdateModificationContextAttachRequestXML = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModifiedAttachRequestXML = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifElseBranchActivity9 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventDrivenActivity9 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifElseActivity3 = new System.Workflow.Activities.IfElseActivity();
            this.ifSendFinalEmailFailed_Activity = new System.Workflow.Activities.IfElseActivity();
            this.SendFinalEmail = new System.Workflow.Activities.CodeActivity();
            this.eventDrivenActivity6 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifResolveBugAsDelayActivity = new System.Workflow.Activities.IfElseActivity();
            this.ifResolveBugAsFailedActivity = new System.Workflow.Activities.IfElseActivity();
            this.ResolveBugAs = new System.Workflow.Activities.CodeActivity();
            this.SetPropProcessFalse = new System.Workflow.Activities.CodeActivity();
            this.if_PropProcessSucceeded_Activity = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScope_PropResults = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.whilePropResultCheck = new System.Workflow.Activities.WhileActivity();
            this.ApprovalAndPropCAG = new System.Workflow.Activities.ConditionedActivityGroup();
            this.if_PropFirstTime_Activity2 = new System.Workflow.Activities.IfElseActivity();
            this.ifSendEmailRetryDelay = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScopeSendEmail = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.ifTransferFilesRetryDelay = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScopeTransferFiles = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.eventHandlersActivity7 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequence_CreateToolsMgmtJob = new System.Workflow.Activities.SequenceActivity();
            this.sequencePSBugAttachFiles = new System.Workflow.Activities.SequenceActivity();
            this.wssUpdateModificationContextPSBug = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModifiedPSBug = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifActivity2 = new System.Workflow.Activities.IfElseBranchActivity();
            this.whileInitWorkflowFailed = new System.Workflow.Activities.WhileActivity();
            this.enableWorkflowModificationInitWorkflow = new Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification();
            this.onFailTaskInitWorkflowCreated = new Microsoft.SharePoint.WorkflowActions.OnTaskCreated();
            this.createFailureTaskInitWorkflow = new Microsoft.SharePoint.WorkflowActions.CreateTask();
            this.delayForActivity1 = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.eventDrivenActivity5 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifRequestXMLFailureTask = new System.Workflow.Activities.IfElseActivity();
            this.AttachRequestXMLToBug = new System.Workflow.Activities.CodeActivity();
            this.delayForActivity3 = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.eventHandlersActivity9 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceSendFinalEmail = new System.Workflow.Activities.SequenceActivity();
            this.eventHandlersActivity6 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceResolveBugAs = new System.Workflow.Activities.SequenceActivity();
            this.if_NotDoWeProp = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifPropApproval = new System.Workflow.Activities.IfElseBranchActivity();
            this.sequenceActivity3 = new System.Workflow.Activities.SequenceActivity();
            this.sequenceActivity2 = new System.Workflow.Activities.SequenceActivity();
            this.eventHandlingScope_CreateToolsMgmtJob = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.whilePSBugAttachFiles = new System.Workflow.Activities.WhileActivity();
            this.PSBugRetryDelay = new Microsoft.SharePoint.WorkflowActions.DelayForActivity();
            this.eventDrivenActivity1 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifPSBugFailureTask = new System.Workflow.Activities.IfElseActivity();
            this.PSBug = new System.Workflow.Activities.CodeActivity();
            this.wssUpdateModificationContextInitWorkflow = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModifiedInitWorkflow = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.ifActivity1 = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifElseBranchActivity6 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlersActivity5 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceActivity5 = new System.Workflow.Activities.SequenceActivity();
            this.ifElseBranchActivity7 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlingScopeSendFinalEmail = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.eventHandlingScopeResolveBugAs = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.wssUpdateModificationContextActivity1 = new Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity();
            this.onWorkflowModified1 = new Microsoft.SharePoint.WorkflowActions.OnWorkflowModified();
            this.if_NotDoWeProp_Activity = new System.Workflow.Activities.IfElseActivity();
            this.ifPropApprovalActivity = new System.Workflow.Activities.IfElseActivity();
            this.whileSendEmail = new System.Workflow.Activities.WhileActivity();
            this.whileTransferFiles = new System.Workflow.Activities.WhileActivity();
            this.whileCreateToolsMgmtJob = new System.Workflow.Activities.WhileActivity();
            this.ifElseBranchActivity4 = new System.Workflow.Activities.IfElseBranchActivity();
            this.ifElseBranchActivity1 = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlersActivity1 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequencePSBug = new System.Workflow.Activities.SequenceActivity();
            this.eventDrivenActivity2 = new System.Workflow.Activities.EventDrivenActivity();
            this.ifInitWorkflowFailTask = new System.Workflow.Activities.IfElseActivity();
            this.InitWorkflow = new System.Workflow.Activities.CodeActivity();
            this.SystemException_Execute = new System.Workflow.Activities.CodeActivity();
            this.ifAttachRequestXMLDelay = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScopeAttachRequestXML = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.ifElseActivity2 = new System.Workflow.Activities.IfElseActivity();
            this.psWorkNotComplete = new System.Workflow.Activities.CodeActivity();
            this.whileSendFinalEmail = new System.Workflow.Activities.WhileActivity();
            this.whileResolveBugAs = new System.Workflow.Activities.WhileActivity();
            this.eventDrivenActivity8 = new System.Workflow.Activities.EventDrivenActivity();
            this.sequence_PropProcess = new System.Workflow.Activities.SequenceActivity();
            this.ifPSBugAttachFiles = new System.Workflow.Activities.IfElseActivity();
            this.ifPSBugRetryDelay = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScopePSBug = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.eventHandlersActivity2 = new System.Workflow.Activities.EventHandlersActivity();
            this.sequenceInitWorkflow = new System.Workflow.Activities.SequenceActivity();
            this.faultHandlerActivity1 = new System.Workflow.ComponentModel.FaultHandlerActivity();
            this.sequenceActivity4 = new System.Workflow.Activities.SequenceActivity();
            this.sequenceActivity7 = new System.Workflow.Activities.SequenceActivity();
            this.if_DidWeProp = new System.Workflow.Activities.IfElseBranchActivity();
            this.eventHandlersActivity8 = new System.Workflow.Activities.EventHandlersActivity();
            this.whilePropProcess = new System.Workflow.Activities.WhileActivity();
            this.sequenceActivity1 = new System.Workflow.Activities.SequenceActivity();
            this.cancellationHandlerActivity2 = new System.Workflow.ComponentModel.CancellationHandlerActivity();
            this.eventHandlingScopeInitWorkflow = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.cancellationHandlerActivity1 = new System.Workflow.ComponentModel.CancellationHandlerActivity();
            this.faultHandlersActivity1 = new System.Workflow.ComponentModel.FaultHandlersActivity();
            this.End = new System.Workflow.Activities.CodeActivity();
            this.whileAttachRequestXMLToBug = new System.Workflow.Activities.WhileActivity();
            this.whilePSWorkNotComplete = new System.Workflow.Activities.WhileActivity();
            this.if_DidWeProp_Activity = new System.Workflow.Activities.IfElseActivity();
            this.eventHandlingScope_PropProcess = new System.Workflow.Activities.EventHandlingScopeActivity();
            this.DeterminePropState = new System.Workflow.Activities.CodeActivity();
            this.whilePSBug = new System.Workflow.Activities.WhileActivity();
            this.whileInitWorkflow = new System.Workflow.Activities.WhileActivity();
            this.onWorkflowActivated = new Microsoft.SharePoint.WorkflowActions.OnWorkflowActivated();
            // 
            // onPropRequestFailureTaskChanged
            // 
            activitybind1.Name = "Workflow";
            activitybind1.Path = "failureTaskAfterProperties";
            this.onPropRequestFailureTaskChanged.BeforeProperties = null;
            correlationtoken1.Name = "taskToken";
            correlationtoken1.OwnerActivityName = "eventHandlingScopePropFailure";
            this.onPropRequestFailureTaskChanged.CorrelationToken = correlationtoken1;
            this.onPropRequestFailureTaskChanged.Executor = null;
            this.onPropRequestFailureTaskChanged.Name = "onPropRequestFailureTaskChanged";
            activitybind2.Name = "Workflow";
            activitybind2.Path = "failureTaskId";
            this.onPropRequestFailureTaskChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onPropRequestFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind2)));
            this.onPropRequestFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind1)));
            // 
            // whilePropRequestFailure
            // 
            this.whilePropRequestFailure.Activities.Add(this.onPropRequestFailureTaskChanged);
            ruleconditionreference1.ConditionName = "Condition2";
            this.whilePropRequestFailure.Condition = ruleconditionreference1;
            this.whilePropRequestFailure.Name = "whilePropRequestFailure";
            // 
            // onPropRequestFailureTaskCreated
            // 
            activitybind3.Name = "Workflow";
            activitybind3.Path = "failureTaskAfterProperties";
            correlationtoken2.Name = "taskToken";
            correlationtoken2.OwnerActivityName = "eventHandlingScopePropFailure";
            this.onPropRequestFailureTaskCreated.CorrelationToken = correlationtoken2;
            this.onPropRequestFailureTaskCreated.Executor = null;
            this.onPropRequestFailureTaskCreated.Name = "onPropRequestFailureTaskCreated";
            activitybind4.Name = "Workflow";
            activitybind4.Path = "failureTaskId";
            this.onPropRequestFailureTaskCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onPropRequestFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind4)));
            this.onPropRequestFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind3)));
            // 
            // createPropRequestFailureTask
            // 
            correlationtoken3.Name = "taskToken";
            correlationtoken3.OwnerActivityName = "eventHandlingScopePropFailure";
            this.createPropRequestFailureTask.CorrelationToken = correlationtoken3;
            this.createPropRequestFailureTask.ListItemId = -1;
            this.createPropRequestFailureTask.Name = "createPropRequestFailureTask";
            this.createPropRequestFailureTask.SpecialPermissions = null;
            activitybind5.Name = "Workflow";
            activitybind5.Path = "failureTaskId";
            activitybind6.Name = "Workflow";
            activitybind6.Path = "failureTaskProperties";
            this.createPropRequestFailureTask.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createPropRequestFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind6)));
            this.createPropRequestFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind5)));
            // 
            // DelayForPropRequestFailure
            // 
            this.DelayForPropRequestFailure.Days = 0;
            this.DelayForPropRequestFailure.Hours = 0;
            activitybind7.Name = "Workflow";
            activitybind7.Path = "g_stepDelayMinutes";
            this.DelayForPropRequestFailure.Name = "DelayForPropRequestFailure";
            this.DelayForPropRequestFailure.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind7)));
            // 
            // ifPropRequestFailureTask
            // 
            this.ifPropRequestFailureTask.Activities.Add(this.createPropRequestFailureTask);
            this.ifPropRequestFailureTask.Activities.Add(this.onPropRequestFailureTaskCreated);
            this.ifPropRequestFailureTask.Activities.Add(this.whilePropRequestFailure);
            ruleconditionreference2.ConditionName = "IfCondPropRequestFailed";
            this.ifPropRequestFailureTask.Condition = ruleconditionreference2;
            this.ifPropRequestFailureTask.Name = "ifPropRequestFailureTask";
            // 
            // ifPropRequestFailureDelay
            // 
            this.ifPropRequestFailureDelay.Activities.Add(this.DelayForPropRequestFailure);
            ruleconditionreference3.ConditionName = "CondIfPropRequestFailureDelay";
            this.ifPropRequestFailureDelay.Condition = ruleconditionreference3;
            this.ifPropRequestFailureDelay.Name = "ifPropRequestFailureDelay";
            // 
            // ifPropRequestFailureTaskActivity
            // 
            this.ifPropRequestFailureTaskActivity.Activities.Add(this.ifPropRequestFailureTask);
            this.ifPropRequestFailureTaskActivity.Name = "ifPropRequestFailureTaskActivity";
            // 
            // ifPropRequestFailureDelayActivity
            // 
            this.ifPropRequestFailureDelayActivity.Activities.Add(this.ifPropRequestFailureDelay);
            this.ifPropRequestFailureDelayActivity.Name = "ifPropRequestFailureDelayActivity";
            // 
            // eventHandlingScopePropFailure
            // 
            this.eventHandlingScopePropFailure.Activities.Add(this.ifPropRequestFailureTaskActivity);
            this.eventHandlingScopePropFailure.Name = "eventHandlingScopePropFailure";
            // 
            // PropRequest
            // 
            this.PropRequest.Name = "PropRequest";
            this.PropRequest.ExecuteCode += new System.EventHandler(this.PropRequest_ExecuteCode);
            // 
            // DelayBeforeProp
            // 
            this.DelayBeforeProp.Days = 0;
            this.DelayBeforeProp.Hours = 0;
            activitybind8.Name = "Workflow";
            activitybind8.Path = "g_PrePropDelayMinutes";
            this.DelayBeforeProp.Name = "DelayBeforeProp";
            this.DelayBeforeProp.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind8)));
            // 
            // FileCheckDelay
            // 
            this.FileCheckDelay.Days = 0;
            this.FileCheckDelay.Hours = 0;
            activitybind9.Name = "Workflow";
            activitybind9.Path = "g_transferDelayMinutes";
            this.FileCheckDelay.Name = "FileCheckDelay";
            this.FileCheckDelay.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind9)));
            // 
            // ifTimeToProp
            // 
            this.ifTimeToProp.Activities.Add(this.PropRequest);
            this.ifTimeToProp.Activities.Add(this.eventHandlingScopePropFailure);
            this.ifTimeToProp.Activities.Add(this.ifPropRequestFailureDelayActivity);
            ruleconditionreference4.ConditionName = "CondIfPropNow";
            this.ifTimeToProp.Condition = ruleconditionreference4;
            this.ifTimeToProp.Name = "ifTimeToProp";
            // 
            // ifNotTimeToProp
            // 
            this.ifNotTimeToProp.Activities.Add(this.DelayBeforeProp);
            ruleconditionreference5.ConditionName = "CondIfPropDelay";
            this.ifNotTimeToProp.Condition = ruleconditionreference5;
            this.ifNotTimeToProp.Name = "ifNotTimeToProp";
            // 
            // onFailureTaskSendEmailChanged
            // 
            activitybind10.Name = "Workflow";
            activitybind10.Path = "failureTaskAfterProperties";
            this.onFailureTaskSendEmailChanged.BeforeProperties = null;
            correlationtoken4.Name = "taskToken";
            correlationtoken4.OwnerActivityName = "eventHandlingScopeSendEmail";
            this.onFailureTaskSendEmailChanged.CorrelationToken = correlationtoken4;
            this.onFailureTaskSendEmailChanged.Executor = null;
            this.onFailureTaskSendEmailChanged.Name = "onFailureTaskSendEmailChanged";
            activitybind11.Name = "Workflow";
            activitybind11.Path = "failureTaskId";
            this.onFailureTaskSendEmailChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onFailureTaskSendEmailChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind11)));
            this.onFailureTaskSendEmailChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind10)));
            // 
            // onFailureTaskTransferFilesChanged
            // 
            activitybind12.Name = "Workflow";
            activitybind12.Path = "failureTaskAfterProperties";
            this.onFailureTaskTransferFilesChanged.BeforeProperties = null;
            correlationtoken5.Name = "taskToken";
            correlationtoken5.OwnerActivityName = "eventHandlingScopeTransferFiles";
            this.onFailureTaskTransferFilesChanged.CorrelationToken = correlationtoken5;
            this.onFailureTaskTransferFilesChanged.Executor = null;
            this.onFailureTaskTransferFilesChanged.Name = "onFailureTaskTransferFilesChanged";
            activitybind13.Name = "Workflow";
            activitybind13.Path = "failureTaskId";
            this.onFailureTaskTransferFilesChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onFailureTaskTransferFilesChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind13)));
            this.onFailureTaskTransferFilesChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind12)));
            // 
            // ifElseBranchActivity8
            // 
            this.ifElseBranchActivity8.Activities.Add(this.FileCheckDelay);
            ruleconditionreference6.ConditionName = "ifTransferFilesCheckDelay";
            this.ifElseBranchActivity8.Condition = ruleconditionreference6;
            this.ifElseBranchActivity8.Name = "ifElseBranchActivity8";
            ruleconditionreference7.ConditionName = "CondCAG_FailureTaskChanged";
            // 
            // onPropResultsFailureTaskChanged
            // 
            activitybind14.Name = "Workflow";
            activitybind14.Path = "failureTaskAfterProperties";
            this.onPropResultsFailureTaskChanged.BeforeProperties = null;
            correlationtoken6.Name = "taskToken";
            correlationtoken6.OwnerActivityName = "eventHandlingScope_PropResults";
            this.onPropResultsFailureTaskChanged.CorrelationToken = correlationtoken6;
            this.onPropResultsFailureTaskChanged.Executor = null;
            this.onPropResultsFailureTaskChanged.Name = "onPropResultsFailureTaskChanged";
            activitybind15.Name = "Workflow";
            activitybind15.Path = "failureTaskId";
            this.onPropResultsFailureTaskChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onPropResultsFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind15)));
            this.onPropResultsFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind14)));
            this.onPropResultsFailureTaskChanged.SetValue(System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty, ruleconditionreference7);
            ruleconditionreference8.ConditionName = "CondCAG_PropFailure_ApprovalTaskUpdate";
            // 
            // on_ApprovalTask_ChangedUpdate2
            // 
            activitybind16.Name = "Workflow";
            activitybind16.Path = "approvalTaskAfterProperties";
            this.on_ApprovalTask_ChangedUpdate2.BeforeProperties = null;
            correlationtoken7.Name = "taskTokenApproval";
            correlationtoken7.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.on_ApprovalTask_ChangedUpdate2.CorrelationToken = correlationtoken7;
            this.on_ApprovalTask_ChangedUpdate2.Executor = null;
            this.on_ApprovalTask_ChangedUpdate2.Name = "on_ApprovalTask_ChangedUpdate2";
            activitybind17.Name = "Workflow";
            activitybind17.Path = "approvalTaskId";
            this.on_ApprovalTask_ChangedUpdate2.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onApprovalTaskChanged_Invoked);
            this.on_ApprovalTask_ChangedUpdate2.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind17)));
            this.on_ApprovalTask_ChangedUpdate2.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind16)));
            this.on_ApprovalTask_ChangedUpdate2.SetValue(System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty, ruleconditionreference8);
            // 
            // DelayForPropResultsCheck
            // 
            this.DelayForPropResultsCheck.Days = 0;
            this.DelayForPropResultsCheck.Hours = 0;
            activitybind18.Name = "Workflow";
            activitybind18.Path = "g_propCompletionCheckDelayMinutes";
            this.DelayForPropResultsCheck.Name = "DelayForPropResultsCheck";
            this.DelayForPropResultsCheck.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind18)));
            // 
            // ifPropActivity
            // 
            this.ifPropActivity.Activities.Add(this.ifNotTimeToProp);
            this.ifPropActivity.Activities.Add(this.ifTimeToProp);
            this.ifPropActivity.Name = "ifPropActivity";
            // 
            // ComputePropDelay
            // 
            this.ComputePropDelay.Name = "ComputePropDelay";
            this.ComputePropDelay.ExecuteCode += new System.EventHandler(this.ComputePropDelay_ExecuteCode);
            // 
            // whileSendEmailFailure
            // 
            this.whileSendEmailFailure.Activities.Add(this.onFailureTaskSendEmailChanged);
            ruleconditionreference9.ConditionName = "Condition2";
            this.whileSendEmailFailure.Condition = ruleconditionreference9;
            this.whileSendEmailFailure.Name = "whileSendEmailFailure";
            // 
            // enableWorkflowModificationSendEmail
            // 
            activitybind19.Name = "Workflow";
            activitybind19.Path = "ContextData";
            correlationtoken8.Name = "modificationTokenSendEmail";
            correlationtoken8.OwnerActivityName = "eventHandlingScopeSendEmail";
            this.enableWorkflowModificationSendEmail.CorrelationToken = correlationtoken8;
            activitybind20.Name = "Workflow";
            activitybind20.Path = "modPageId";
            this.enableWorkflowModificationSendEmail.Name = "enableWorkflowModificationSendEmail";
            this.enableWorkflowModificationSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind20)));
            this.enableWorkflowModificationSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind19)));
            // 
            // onFailureTaskSendEmailCreated
            // 
            activitybind21.Name = "Workflow";
            activitybind21.Path = "failureTaskAfterProperties";
            correlationtoken9.Name = "taskToken";
            correlationtoken9.OwnerActivityName = "eventHandlingScopeSendEmail";
            this.onFailureTaskSendEmailCreated.CorrelationToken = correlationtoken9;
            this.onFailureTaskSendEmailCreated.Executor = null;
            this.onFailureTaskSendEmailCreated.Name = "onFailureTaskSendEmailCreated";
            activitybind22.Name = "Workflow";
            activitybind22.Path = "failureTaskId";
            this.onFailureTaskSendEmailCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onFailureTaskSendEmailCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind22)));
            this.onFailureTaskSendEmailCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind21)));
            // 
            // createFailureTaskSendEmail
            // 
            correlationtoken10.Name = "taskToken";
            correlationtoken10.OwnerActivityName = "eventHandlingScopeSendEmail";
            this.createFailureTaskSendEmail.CorrelationToken = correlationtoken10;
            this.createFailureTaskSendEmail.ListItemId = -1;
            this.createFailureTaskSendEmail.Name = "createFailureTaskSendEmail";
            this.createFailureTaskSendEmail.SpecialPermissions = null;
            activitybind23.Name = "Workflow";
            activitybind23.Path = "failureTaskId";
            activitybind24.Name = "Workflow";
            activitybind24.Path = "failureTaskProperties";
            this.createFailureTaskSendEmail.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createFailureTaskSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind24)));
            this.createFailureTaskSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind23)));
            // 
            // whileTransferFilesFailure
            // 
            this.whileTransferFilesFailure.Activities.Add(this.onFailureTaskTransferFilesChanged);
            ruleconditionreference10.ConditionName = "Condition2";
            this.whileTransferFilesFailure.Condition = ruleconditionreference10;
            this.whileTransferFilesFailure.Name = "whileTransferFilesFailure";
            // 
            // enableWorkflowModificationTransferFiles
            // 
            activitybind25.Name = "Workflow";
            activitybind25.Path = "ContextData";
            correlationtoken11.Name = "modificationTokenTransferFiles";
            correlationtoken11.OwnerActivityName = "eventHandlingScopeTransferFiles";
            this.enableWorkflowModificationTransferFiles.CorrelationToken = correlationtoken11;
            activitybind26.Name = "Workflow";
            activitybind26.Path = "modPageId";
            this.enableWorkflowModificationTransferFiles.Name = "enableWorkflowModificationTransferFiles";
            this.enableWorkflowModificationTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind26)));
            this.enableWorkflowModificationTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind25)));
            // 
            // onFailTaskTransferFilesCreated
            // 
            activitybind27.Name = "Workflow";
            activitybind27.Path = "failureTaskAfterProperties";
            correlationtoken12.Name = "taskToken";
            correlationtoken12.OwnerActivityName = "eventHandlingScopeTransferFiles";
            this.onFailTaskTransferFilesCreated.CorrelationToken = correlationtoken12;
            this.onFailTaskTransferFilesCreated.Executor = null;
            this.onFailTaskTransferFilesCreated.Name = "onFailTaskTransferFilesCreated";
            activitybind28.Name = "Workflow";
            activitybind28.Path = "failureTaskId";
            this.onFailTaskTransferFilesCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onFailTaskTransferFilesCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind28)));
            this.onFailTaskTransferFilesCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind27)));
            // 
            // createFailureTaskTransferFiles
            // 
            correlationtoken13.Name = "taskToken";
            correlationtoken13.OwnerActivityName = "eventHandlingScopeTransferFiles";
            this.createFailureTaskTransferFiles.CorrelationToken = correlationtoken13;
            this.createFailureTaskTransferFiles.ListItemId = -1;
            this.createFailureTaskTransferFiles.Name = "createFailureTaskTransferFiles";
            this.createFailureTaskTransferFiles.SpecialPermissions = null;
            activitybind29.Name = "Workflow";
            activitybind29.Path = "failureTaskId";
            activitybind30.Name = "Workflow";
            activitybind30.Path = "failureTaskProperties";
            this.createFailureTaskTransferFiles.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createFailureTaskTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind30)));
            this.createFailureTaskTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind29)));
            // 
            // ifTransferFilesCheckDelay
            // 
            this.ifTransferFilesCheckDelay.Activities.Add(this.ifElseBranchActivity8);
            this.ifTransferFilesCheckDelay.Name = "ifTransferFilesCheckDelay";
            // 
            // TransferFiles
            // 
            this.TransferFiles.Name = "TransferFiles";
            this.TransferFiles.ExecuteCode += new System.EventHandler(this.TransferFiles_ExecuteCode);
            // 
            // on_CreateToolsMgmtJob_FailureTask_Changed
            // 
            activitybind31.Name = "Workflow";
            activitybind31.Path = "failureTaskAfterProperties";
            this.on_CreateToolsMgmtJob_FailureTask_Changed.BeforeProperties = null;
            correlationtoken14.Name = "taskToken";
            correlationtoken14.OwnerActivityName = "eventHandlingScope_CreateToolsMgmtJob";
            this.on_CreateToolsMgmtJob_FailureTask_Changed.CorrelationToken = correlationtoken14;
            this.on_CreateToolsMgmtJob_FailureTask_Changed.Executor = null;
            this.on_CreateToolsMgmtJob_FailureTask_Changed.Name = "on_CreateToolsMgmtJob_FailureTask_Changed";
            activitybind32.Name = "Workflow";
            activitybind32.Path = "failureTaskId";
            this.on_CreateToolsMgmtJob_FailureTask_Changed.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.on_CreateToolsMgmtJob_FailureTask_Changed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind32)));
            this.on_CreateToolsMgmtJob_FailureTask_Changed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind31)));
            // 
            // onSendFinalEmailFailureTaskChanged
            // 
            activitybind33.Name = "Workflow";
            activitybind33.Path = "failureTaskAfterProperties";
            this.onSendFinalEmailFailureTaskChanged.BeforeProperties = null;
            correlationtoken15.Name = "taskToken";
            correlationtoken15.OwnerActivityName = "eventHandlingScopeSendFinalEmail";
            this.onSendFinalEmailFailureTaskChanged.CorrelationToken = correlationtoken15;
            this.onSendFinalEmailFailureTaskChanged.Executor = null;
            this.onSendFinalEmailFailureTaskChanged.Name = "onSendFinalEmailFailureTaskChanged";
            activitybind34.Name = "Workflow";
            activitybind34.Path = "failureTaskId";
            this.onSendFinalEmailFailureTaskChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onSendFinalEmailFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind34)));
            this.onSendFinalEmailFailureTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind33)));
            // 
            // onTaskResolveBugAsFailed
            // 
            activitybind35.Name = "Workflow";
            activitybind35.Path = "failureTaskAfterProperties";
            this.onTaskResolveBugAsFailed.BeforeProperties = null;
            correlationtoken16.Name = "taskToken";
            correlationtoken16.OwnerActivityName = "eventHandlingScopeResolveBugAs";
            this.onTaskResolveBugAsFailed.CorrelationToken = correlationtoken16;
            this.onTaskResolveBugAsFailed.Executor = null;
            this.onTaskResolveBugAsFailed.Name = "onTaskResolveBugAsFailed";
            activitybind36.Name = "Workflow";
            activitybind36.Path = "failureTaskId";
            this.onTaskResolveBugAsFailed.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onTaskResolveBugAsFailed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind36)));
            this.onTaskResolveBugAsFailed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind35)));
            // 
            // PropFailureCAG
            // 
            this.PropFailureCAG.Activities.Add(this.on_ApprovalTask_ChangedUpdate2);
            this.PropFailureCAG.Activities.Add(this.onPropResultsFailureTaskChanged);
            this.PropFailureCAG.Name = "PropFailureCAG";
            ruleconditionreference11.ConditionName = "CAGCond_FailureTaskCompleted";
            this.PropFailureCAG.UntilCondition = ruleconditionreference11;
            // 
            // onPropResultsFailureTaskCreated
            // 
            activitybind37.Name = "Workflow";
            activitybind37.Path = "failureTaskAfterProperties";
            correlationtoken17.Name = "taskToken";
            correlationtoken17.OwnerActivityName = "eventHandlingScope_PropResults";
            this.onPropResultsFailureTaskCreated.CorrelationToken = correlationtoken17;
            this.onPropResultsFailureTaskCreated.Executor = null;
            this.onPropResultsFailureTaskCreated.Name = "onPropResultsFailureTaskCreated";
            activitybind38.Name = "Workflow";
            activitybind38.Path = "failureTaskId";
            this.onPropResultsFailureTaskCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onPropResultsFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind38)));
            this.onPropResultsFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind37)));
            // 
            // createPropResultsFailureTask
            // 
            correlationtoken18.Name = "taskToken";
            correlationtoken18.OwnerActivityName = "eventHandlingScope_PropResults";
            this.createPropResultsFailureTask.CorrelationToken = correlationtoken18;
            this.createPropResultsFailureTask.ListItemId = -1;
            this.createPropResultsFailureTask.Name = "createPropResultsFailureTask";
            this.createPropResultsFailureTask.SpecialPermissions = null;
            activitybind39.Name = "Workflow";
            activitybind39.Path = "failureTaskId";
            activitybind40.Name = "Workflow";
            activitybind40.Path = "failureTaskProperties";
            this.createPropResultsFailureTask.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createPropResultsFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind40)));
            this.createPropResultsFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind39)));
            // 
            // ifPropResultsCheckNotComplete
            // 
            this.ifPropResultsCheckNotComplete.Activities.Add(this.DelayForPropResultsCheck);
            ruleconditionreference12.ConditionName = "ifCondPropResultsCheckNotComplete";
            this.ifPropResultsCheckNotComplete.Condition = ruleconditionreference12;
            this.ifPropResultsCheckNotComplete.Name = "ifPropResultsCheckNotComplete";
            // 
            // ifPropApproved
            // 
            this.ifPropApproved.Activities.Add(this.ComputePropDelay);
            this.ifPropApproved.Activities.Add(this.ifPropActivity);
            ruleconditionreference13.ConditionName = "CondIfPropApproved";
            this.ifPropApproved.Condition = ruleconditionreference13;
            this.ifPropApproved.Name = "ifPropApproved";
            // 
            // onApprovalTaskChanged
            // 
            activitybind41.Name = "Workflow";
            activitybind41.Path = "approvalTaskAfterProperties";
            this.onApprovalTaskChanged.BeforeProperties = null;
            correlationtoken19.Name = "taskTokenApproval";
            correlationtoken19.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.onApprovalTaskChanged.CorrelationToken = correlationtoken19;
            this.onApprovalTaskChanged.Executor = null;
            this.onApprovalTaskChanged.Name = "onApprovalTaskChanged";
            activitybind42.Name = "Workflow";
            activitybind42.Path = "approvalTaskId";
            this.onApprovalTaskChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onApprovalTaskChanged_Invoked);
            this.onApprovalTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind42)));
            this.onApprovalTaskChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind41)));
            // 
            // wssUpdateModificationContextSendEmail
            // 
            activitybind43.Name = "Workflow";
            activitybind43.Path = "ContextData";
            activitybind44.Name = "Workflow";
            activitybind44.Path = "modPageId";
            this.wssUpdateModificationContextSendEmail.Name = "wssUpdateModificationContextSendEmail";
            this.wssUpdateModificationContextSendEmail.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind44)));
            this.wssUpdateModificationContextSendEmail.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind43)));
            // 
            // onWorkflowModifiedSendEmail
            // 
            activitybind45.Name = "Workflow";
            activitybind45.Path = "ContextData";
            correlationtoken20.Name = "modificationTokenSendEmail";
            correlationtoken20.OwnerActivityName = "eventHandlingScopeSendEmail";
            this.onWorkflowModifiedSendEmail.CorrelationToken = correlationtoken20;
            activitybind46.Name = "Workflow";
            activitybind46.Path = "modPageId";
            this.onWorkflowModifiedSendEmail.Name = "onWorkflowModifiedSendEmail";
            this.onWorkflowModifiedSendEmail.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModifiedSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind46)));
            this.onWorkflowModifiedSendEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind45)));
            // 
            // ifActivity4
            // 
            this.ifActivity4.Activities.Add(this.createFailureTaskSendEmail);
            this.ifActivity4.Activities.Add(this.onFailureTaskSendEmailCreated);
            this.ifActivity4.Activities.Add(this.enableWorkflowModificationSendEmail);
            this.ifActivity4.Activities.Add(this.whileSendEmailFailure);
            ruleconditionreference14.ConditionName = "IfConditionSendEmail";
            this.ifActivity4.Condition = ruleconditionreference14;
            this.ifActivity4.Name = "ifActivity4";
            // 
            // wssUpdateModificationContextTransferFiles
            // 
            activitybind47.Name = "Workflow";
            activitybind47.Path = "ContextData";
            activitybind48.Name = "Workflow";
            activitybind48.Path = "modPageId";
            this.wssUpdateModificationContextTransferFiles.Name = "wssUpdateModificationContextTransferFiles";
            this.wssUpdateModificationContextTransferFiles.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind48)));
            this.wssUpdateModificationContextTransferFiles.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind47)));
            // 
            // onWorkflowModifiedTransferFiles
            // 
            activitybind49.Name = "Workflow";
            activitybind49.Path = "ContextData";
            correlationtoken21.Name = "modificationTokenTransferFiles";
            correlationtoken21.OwnerActivityName = "eventHandlingScopeTransferFiles";
            this.onWorkflowModifiedTransferFiles.CorrelationToken = correlationtoken21;
            activitybind50.Name = "Workflow";
            activitybind50.Path = "modPageId";
            this.onWorkflowModifiedTransferFiles.Name = "onWorkflowModifiedTransferFiles";
            this.onWorkflowModifiedTransferFiles.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModifiedTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind50)));
            this.onWorkflowModifiedTransferFiles.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind49)));
            // 
            // ifActivity3
            // 
            this.ifActivity3.Activities.Add(this.createFailureTaskTransferFiles);
            this.ifActivity3.Activities.Add(this.onFailTaskTransferFilesCreated);
            this.ifActivity3.Activities.Add(this.enableWorkflowModificationTransferFiles);
            this.ifActivity3.Activities.Add(this.whileTransferFilesFailure);
            ruleconditionreference15.ConditionName = "IfConditionTransferFiles";
            this.ifActivity3.Condition = ruleconditionreference15;
            this.ifActivity3.Name = "ifActivity3";
            // 
            // sequenceActivity6
            // 
            this.sequenceActivity6.Activities.Add(this.TransferFiles);
            this.sequenceActivity6.Activities.Add(this.ifTransferFilesCheckDelay);
            this.sequenceActivity6.Name = "sequenceActivity6";
            // 
            // delayFor_CreateToolsMgmtJob_Failure
            // 
            this.delayFor_CreateToolsMgmtJob_Failure.Days = 0;
            this.delayFor_CreateToolsMgmtJob_Failure.Hours = 0;
            activitybind51.Name = "Workflow";
            activitybind51.Path = "g_stepDelayMinutes";
            this.delayFor_CreateToolsMgmtJob_Failure.Name = "delayFor_CreateToolsMgmtJob_Failure";
            this.delayFor_CreateToolsMgmtJob_Failure.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind51)));
            // 
            // while_CreateToolsMgmtJob_Failed
            // 
            this.while_CreateToolsMgmtJob_Failed.Activities.Add(this.on_CreateToolsMgmtJob_FailureTask_Changed);
            ruleconditionreference16.ConditionName = "Condition2";
            this.while_CreateToolsMgmtJob_Failed.Condition = ruleconditionreference16;
            this.while_CreateToolsMgmtJob_Failed.Name = "while_CreateToolsMgmtJob_Failed";
            // 
            // enableWorkflowModification_CreateToolsMgmtJob
            // 
            activitybind52.Name = "Workflow";
            activitybind52.Path = "ContextData";
            correlationtoken22.Name = "modificationTokenCreateToolsMgmtJob";
            correlationtoken22.OwnerActivityName = "eventHandlingScope_CreateToolsMgmtJob";
            this.enableWorkflowModification_CreateToolsMgmtJob.CorrelationToken = correlationtoken22;
            activitybind53.Name = "Workflow";
            activitybind53.Path = "modPageId";
            this.enableWorkflowModification_CreateToolsMgmtJob.Name = "enableWorkflowModification_CreateToolsMgmtJob";
            this.enableWorkflowModification_CreateToolsMgmtJob.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind53)));
            this.enableWorkflowModification_CreateToolsMgmtJob.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind52)));
            // 
            // on_CreateToolsMgmtJob_FailureTask_Created
            // 
            activitybind54.Name = "Workflow";
            activitybind54.Path = "failureTaskAfterProperties";
            correlationtoken23.Name = "taskToken";
            correlationtoken23.OwnerActivityName = "eventHandlingScope_CreateToolsMgmtJob";
            this.on_CreateToolsMgmtJob_FailureTask_Created.CorrelationToken = correlationtoken23;
            this.on_CreateToolsMgmtJob_FailureTask_Created.Executor = null;
            this.on_CreateToolsMgmtJob_FailureTask_Created.Name = "on_CreateToolsMgmtJob_FailureTask_Created";
            activitybind55.Name = "Workflow";
            activitybind55.Path = "failureTaskId";
            this.on_CreateToolsMgmtJob_FailureTask_Created.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.on_CreateToolsMgmtJob_FailureTask_Created.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind55)));
            this.on_CreateToolsMgmtJob_FailureTask_Created.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind54)));
            // 
            // create_CreateToolsMgmtJob_FailureTask
            // 
            correlationtoken24.Name = "taskToken";
            correlationtoken24.OwnerActivityName = "eventHandlingScope_CreateToolsMgmtJob";
            this.create_CreateToolsMgmtJob_FailureTask.CorrelationToken = correlationtoken24;
            this.create_CreateToolsMgmtJob_FailureTask.ListItemId = -1;
            this.create_CreateToolsMgmtJob_FailureTask.Name = "create_CreateToolsMgmtJob_FailureTask";
            this.create_CreateToolsMgmtJob_FailureTask.SpecialPermissions = null;
            activitybind56.Name = "Workflow";
            activitybind56.Path = "failureTaskId";
            activitybind57.Name = "Workflow";
            activitybind57.Path = "failureTaskProperties";
            this.create_CreateToolsMgmtJob_FailureTask.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.create_CreateToolsMgmtJob_FailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind57)));
            this.create_CreateToolsMgmtJob_FailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind56)));
            // 
            // PSAttachFilesDelay
            // 
            this.PSAttachFilesDelay.Days = 0;
            this.PSAttachFilesDelay.Hours = 0;
            activitybind58.Name = "Workflow";
            activitybind58.Path = "g_psAttachFilesDelayMinutes";
            this.PSAttachFilesDelay.Name = "PSAttachFilesDelay";
            this.PSAttachFilesDelay.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind58)));
            // 
            // onFailureTaskAttachRequestXMLChanged
            // 
            activitybind59.Name = "Workflow";
            activitybind59.Path = "failureTaskAfterProperties";
            this.onFailureTaskAttachRequestXMLChanged.BeforeProperties = null;
            correlationtoken25.Name = "taskToken";
            correlationtoken25.OwnerActivityName = "eventHandlingScopeAttachRequestXML";
            this.onFailureTaskAttachRequestXMLChanged.CorrelationToken = correlationtoken25;
            this.onFailureTaskAttachRequestXMLChanged.Executor = null;
            this.onFailureTaskAttachRequestXMLChanged.Name = "onFailureTaskAttachRequestXMLChanged";
            activitybind60.Name = "Workflow";
            activitybind60.Path = "failureTaskId";
            this.onFailureTaskAttachRequestXMLChanged.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onFailureTaskAttachRequestXMLChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind60)));
            this.onFailureTaskAttachRequestXMLChanged.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind59)));
            // 
            // delayForActivity4
            // 
            this.delayForActivity4.Days = 0;
            this.delayForActivity4.Hours = 0;
            activitybind61.Name = "Workflow";
            activitybind61.Path = "g_stepDelayMinutes";
            this.delayForActivity4.Name = "delayForActivity4";
            this.delayForActivity4.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind61)));
            // 
            // whileSendFinalEmailFailed
            // 
            this.whileSendFinalEmailFailed.Activities.Add(this.onSendFinalEmailFailureTaskChanged);
            ruleconditionreference17.ConditionName = "Condition2";
            this.whileSendFinalEmailFailed.Condition = ruleconditionreference17;
            this.whileSendFinalEmailFailed.Name = "whileSendFinalEmailFailed";
            // 
            // enableWorkflowModification_SendFinalEmail
            // 
            activitybind62.Name = "Workflow";
            activitybind62.Path = "ContextData";
            correlationtoken26.Name = "modificationTokenSendFinalEmail";
            correlationtoken26.OwnerActivityName = "eventHandlingScopeSendFinalEmail";
            this.enableWorkflowModification_SendFinalEmail.CorrelationToken = correlationtoken26;
            activitybind63.Name = "Workflow";
            activitybind63.Path = "modPageId";
            this.enableWorkflowModification_SendFinalEmail.Name = "enableWorkflowModification_SendFinalEmail";
            this.enableWorkflowModification_SendFinalEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind63)));
            this.enableWorkflowModification_SendFinalEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind62)));
            // 
            // onSendFinalEmailFailureTaskCreated
            // 
            activitybind64.Name = "Workflow";
            activitybind64.Path = "failureTaskAfterProperties";
            correlationtoken27.Name = "taskToken";
            correlationtoken27.OwnerActivityName = "eventHandlingScopeSendFinalEmail";
            this.onSendFinalEmailFailureTaskCreated.CorrelationToken = correlationtoken27;
            this.onSendFinalEmailFailureTaskCreated.Executor = null;
            this.onSendFinalEmailFailureTaskCreated.Name = "onSendFinalEmailFailureTaskCreated";
            activitybind65.Name = "Workflow";
            activitybind65.Path = "failureTaskId";
            this.onSendFinalEmailFailureTaskCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onSendFinalEmailFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind65)));
            this.onSendFinalEmailFailureTaskCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind64)));
            // 
            // createSendFinalEmailFailureTask
            // 
            correlationtoken28.Name = "taskToken";
            correlationtoken28.OwnerActivityName = "eventHandlingScopeSendFinalEmail";
            this.createSendFinalEmailFailureTask.CorrelationToken = correlationtoken28;
            this.createSendFinalEmailFailureTask.ListItemId = -1;
            this.createSendFinalEmailFailureTask.Name = "createSendFinalEmailFailureTask";
            this.createSendFinalEmailFailureTask.SpecialPermissions = null;
            activitybind66.Name = "Workflow";
            activitybind66.Path = "failureTaskId";
            activitybind67.Name = "Workflow";
            activitybind67.Path = "failureTaskProperties";
            this.createSendFinalEmailFailureTask.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createSendFinalEmailFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind67)));
            this.createSendFinalEmailFailureTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind66)));
            // 
            // delayForActivity2
            // 
            this.delayForActivity2.Days = 0;
            this.delayForActivity2.Hours = 0;
            activitybind68.Name = "Workflow";
            activitybind68.Path = "g_stepDelayMinutes";
            this.delayForActivity2.Name = "delayForActivity2";
            this.delayForActivity2.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind68)));
            // 
            // whileResolveBugAsFailed
            // 
            this.whileResolveBugAsFailed.Activities.Add(this.onTaskResolveBugAsFailed);
            ruleconditionreference18.ConditionName = "Condition2";
            this.whileResolveBugAsFailed.Condition = ruleconditionreference18;
            this.whileResolveBugAsFailed.Name = "whileResolveBugAsFailed";
            // 
            // enableWorkflowModification_ResolveBugAs
            // 
            activitybind69.Name = "Workflow";
            activitybind69.Path = "ContextData";
            correlationtoken29.Name = "modificationTokenResolveBug";
            correlationtoken29.OwnerActivityName = "eventHandlingScopeResolveBugAs";
            this.enableWorkflowModification_ResolveBugAs.CorrelationToken = correlationtoken29;
            activitybind70.Name = "Workflow";
            activitybind70.Path = "modPageId";
            this.enableWorkflowModification_ResolveBugAs.Name = "enableWorkflowModification_ResolveBugAs";
            this.enableWorkflowModification_ResolveBugAs.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind70)));
            this.enableWorkflowModification_ResolveBugAs.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind69)));
            // 
            // onTaskResolveBugAsFailedCreated
            // 
            activitybind71.Name = "Workflow";
            activitybind71.Path = "failureTaskAfterProperties";
            correlationtoken30.Name = "taskToken";
            correlationtoken30.OwnerActivityName = "eventHandlingScopeResolveBugAs";
            this.onTaskResolveBugAsFailedCreated.CorrelationToken = correlationtoken30;
            this.onTaskResolveBugAsFailedCreated.Executor = null;
            this.onTaskResolveBugAsFailedCreated.Name = "onTaskResolveBugAsFailedCreated";
            activitybind72.Name = "Workflow";
            activitybind72.Path = "failureTaskId";
            this.onTaskResolveBugAsFailedCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onTaskResolveBugAsFailedCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind72)));
            this.onTaskResolveBugAsFailedCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind71)));
            // 
            // createTaskResolveBugAsFailed
            // 
            correlationtoken31.Name = "taskToken";
            correlationtoken31.OwnerActivityName = "eventHandlingScopeResolveBugAs";
            this.createTaskResolveBugAsFailed.CorrelationToken = correlationtoken31;
            this.createTaskResolveBugAsFailed.ListItemId = -1;
            this.createTaskResolveBugAsFailed.Name = "createTaskResolveBugAsFailed";
            this.createTaskResolveBugAsFailed.SpecialPermissions = null;
            activitybind73.Name = "Workflow";
            activitybind73.Path = "failureTaskId";
            activitybind74.Name = "Workflow";
            activitybind74.Path = "failureTaskProperties";
            this.createTaskResolveBugAsFailed.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createTaskResolveBugAsFailed.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind74)));
            this.createTaskResolveBugAsFailed.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind73)));
            // 
            // updateApprovalTask_Status
            // 
            correlationtoken32.Name = "taskTokenApproval";
            correlationtoken32.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.updateApprovalTask_Status.CorrelationToken = correlationtoken32;
            this.updateApprovalTask_Status.Name = "updateApprovalTask_Status";
            activitybind75.Name = "Workflow";
            activitybind75.Path = "approvalTaskId";
            activitybind76.Name = "Workflow";
            activitybind76.Path = "approvalTaskProperties";
            this.updateApprovalTask_Status.MethodInvoking += new System.EventHandler(this.updateApprovalTaskStatus_MethodInvoking);
            this.updateApprovalTask_Status.SetBinding(Microsoft.SharePoint.WorkflowActions.UpdateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind76)));
            this.updateApprovalTask_Status.SetBinding(Microsoft.SharePoint.WorkflowActions.UpdateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind75)));
            // 
            // ifPropResultsFailed
            // 
            this.ifPropResultsFailed.Activities.Add(this.createPropResultsFailureTask);
            this.ifPropResultsFailed.Activities.Add(this.onPropResultsFailureTaskCreated);
            this.ifPropResultsFailed.Activities.Add(this.PropFailureCAG);
            ruleconditionreference19.ConditionName = "IfCondPropResultsFailed";
            this.ifPropResultsFailed.Condition = ruleconditionreference19;
            this.ifPropResultsFailed.Name = "ifPropResultsFailed";
            // 
            // ifPropResultsCheckNotComplete_Activity
            // 
            this.ifPropResultsCheckNotComplete_Activity.Activities.Add(this.ifPropResultsCheckNotComplete);
            this.ifPropResultsCheckNotComplete_Activity.Name = "ifPropResultsCheckNotComplete_Activity";
            // 
            // PropResult
            // 
            this.PropResult.Name = "PropResult";
            this.PropResult.ExecuteCode += new System.EventHandler(this.PropResults_ExecuteCode);
            // 
            // ifPropApprovedActivity
            // 
            this.ifPropApprovedActivity.Activities.Add(this.ifPropApproved);
            this.ifPropApprovedActivity.Name = "ifPropApprovedActivity";
            // 
            // whileWaitingForApproval
            // 
            this.whileWaitingForApproval.Activities.Add(this.onApprovalTaskChanged);
            ruleconditionreference20.ConditionName = "CondWaitingForApproval";
            this.whileWaitingForApproval.Condition = ruleconditionreference20;
            this.whileWaitingForApproval.Name = "whileWaitingForApproval";
            // 
            // enableWorkflowModificationApproval
            // 
            activitybind77.Name = "Workflow";
            activitybind77.Path = "ContextData";
            correlationtoken33.Name = "modificationTokenApproval";
            correlationtoken33.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.enableWorkflowModificationApproval.CorrelationToken = correlationtoken33;
            activitybind78.Name = "Workflow";
            activitybind78.Path = "modPageId";
            this.enableWorkflowModificationApproval.Name = "enableWorkflowModificationApproval";
            this.enableWorkflowModificationApproval.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind78)));
            this.enableWorkflowModificationApproval.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind77)));
            // 
            // createApprovalTask
            // 
            activitybind79.Name = "Workflow";
            activitybind79.Path = "approvalTaskTypeId";
            correlationtoken34.Name = "taskTokenApproval";
            correlationtoken34.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.createApprovalTask.CorrelationToken = correlationtoken34;
            this.createApprovalTask.ListItemId = -1;
            this.createApprovalTask.Name = "createApprovalTask";
            this.createApprovalTask.SpecialPermissions = null;
            activitybind80.Name = "Workflow";
            activitybind80.Path = "approvalTaskId";
            activitybind81.Name = "Workflow";
            activitybind81.Path = "approvalTaskProperties";
            this.createApprovalTask.MethodInvoking += new System.EventHandler(this.createApprovalTask_MethodInvoking);
            this.createApprovalTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTaskWithContentType.ContentTypeIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind79)));
            this.createApprovalTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTaskWithContentType.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind81)));
            this.createApprovalTask.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTaskWithContentType.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind80)));
            // 
            // SendEmailRetryDelay
            // 
            this.SendEmailRetryDelay.Days = 0;
            this.SendEmailRetryDelay.Hours = 0;
            activitybind82.Name = "Workflow";
            activitybind82.Path = "g_stepDelayMinutes";
            this.SendEmailRetryDelay.Name = "SendEmailRetryDelay";
            this.SendEmailRetryDelay.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind82)));
            // 
            // eventDrivenActivity4
            // 
            this.eventDrivenActivity4.Activities.Add(this.onWorkflowModifiedSendEmail);
            this.eventDrivenActivity4.Activities.Add(this.wssUpdateModificationContextSendEmail);
            this.eventDrivenActivity4.Name = "eventDrivenActivity4";
            // 
            // ifSendEmailFailureTask
            // 
            this.ifSendEmailFailureTask.Activities.Add(this.ifActivity4);
            this.ifSendEmailFailureTask.Name = "ifSendEmailFailureTask";
            // 
            // SendMail
            // 
            this.SendMail.Description = "Sends an e-mail containing request information";
            this.SendMail.Name = "SendMail";
            this.SendMail.ExecuteCode += new System.EventHandler(this.SendMail_ExecuteCode);
            // 
            // TransferFilesRetryDelay
            // 
            this.TransferFilesRetryDelay.Days = 0;
            this.TransferFilesRetryDelay.Hours = 0;
            activitybind83.Name = "Workflow";
            activitybind83.Path = "g_stepDelayMinutes";
            this.TransferFilesRetryDelay.Name = "TransferFilesRetryDelay";
            this.TransferFilesRetryDelay.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind83)));
            // 
            // eventDrivenActivity3
            // 
            this.eventDrivenActivity3.Activities.Add(this.onWorkflowModifiedTransferFiles);
            this.eventDrivenActivity3.Activities.Add(this.wssUpdateModificationContextTransferFiles);
            this.eventDrivenActivity3.Name = "eventDrivenActivity3";
            // 
            // ifTransferFilesFailTask
            // 
            this.ifTransferFilesFailTask.Activities.Add(this.ifActivity3);
            this.ifTransferFilesFailTask.Name = "ifTransferFilesFailTask";
            // 
            // TransferFilesVerify
            // 
            this.TransferFilesVerify.Name = "TransferFilesVerify";
            this.TransferFilesVerify.ExecuteCode += new System.EventHandler(this.TransferFilesVerify_ExecuteCode);
            // 
            // whileTransferFilesProcess
            // 
            this.whileTransferFilesProcess.Activities.Add(this.sequenceActivity6);
            ruleconditionreference21.ConditionName = "whileTransferFilesProcess";
            this.whileTransferFilesProcess.Condition = ruleconditionreference21;
            this.whileTransferFilesProcess.Name = "whileTransferFilesProcess";
            // 
            // TransferFilesInit
            // 
            this.TransferFilesInit.Name = "TransferFilesInit";
            this.TransferFilesInit.ExecuteCode += new System.EventHandler(this.TransferFilesInit_ExecuteCode);
            // 
            // wssUpdateModificationContext_CreateToolsMgmtJob
            // 
            activitybind84.Name = "Workflow";
            activitybind84.Path = "ContextData";
            activitybind85.Name = "Workflow";
            activitybind85.Path = "modPageId";
            this.wssUpdateModificationContext_CreateToolsMgmtJob.Name = "wssUpdateModificationContext_CreateToolsMgmtJob";
            this.wssUpdateModificationContext_CreateToolsMgmtJob.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind85)));
            this.wssUpdateModificationContext_CreateToolsMgmtJob.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind84)));
            // 
            // onWorkflowModified_CreateToolsMgmtJob
            // 
            activitybind86.Name = "Workflow";
            activitybind86.Path = "ContextData";
            correlationtoken35.Name = "modificationTokenCreateToolsMgmtJob";
            correlationtoken35.OwnerActivityName = "eventHandlingScope_CreateToolsMgmtJob";
            this.onWorkflowModified_CreateToolsMgmtJob.CorrelationToken = correlationtoken35;
            activitybind87.Name = "Workflow";
            activitybind87.Path = "modPageId";
            this.onWorkflowModified_CreateToolsMgmtJob.Name = "onWorkflowModified_CreateToolsMgmtJob";
            this.onWorkflowModified_CreateToolsMgmtJob.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModified_CreateToolsMgmtJob.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind87)));
            this.onWorkflowModified_CreateToolsMgmtJob.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind86)));
            // 
            // if_CreateToolsMgmtJob_Failure
            // 
            this.if_CreateToolsMgmtJob_Failure.Activities.Add(this.delayFor_CreateToolsMgmtJob_Failure);
            ruleconditionreference22.ConditionName = "ifCond_CreateToolsMgmtJob_Failure";
            this.if_CreateToolsMgmtJob_Failure.Condition = ruleconditionreference22;
            this.if_CreateToolsMgmtJob_Failure.Name = "if_CreateToolsMgmtJob_Failure";
            // 
            // if_CreateToolsMgmtJob_Failed
            // 
            this.if_CreateToolsMgmtJob_Failed.Activities.Add(this.create_CreateToolsMgmtJob_FailureTask);
            this.if_CreateToolsMgmtJob_Failed.Activities.Add(this.on_CreateToolsMgmtJob_FailureTask_Created);
            this.if_CreateToolsMgmtJob_Failed.Activities.Add(this.enableWorkflowModification_CreateToolsMgmtJob);
            this.if_CreateToolsMgmtJob_Failed.Activities.Add(this.while_CreateToolsMgmtJob_Failed);
            ruleconditionreference23.ConditionName = "IfCond_CreateToolsMgmtJob";
            this.if_CreateToolsMgmtJob_Failed.Condition = ruleconditionreference23;
            this.if_CreateToolsMgmtJob_Failed.Name = "if_CreateToolsMgmtJob_Failed";
            // 
            // ifElseBranchActivity5
            // 
            this.ifElseBranchActivity5.Activities.Add(this.PSAttachFilesDelay);
            ruleconditionreference24.ConditionName = "ifPSBugAttachFilesDelay";
            this.ifElseBranchActivity5.Condition = ruleconditionreference24;
            this.ifElseBranchActivity5.Name = "ifElseBranchActivity5";
            // 
            // cancellationHandlerActivity3
            // 
            this.cancellationHandlerActivity3.Name = "cancellationHandlerActivity3";
            // 
            // onFailureTaskPSBug
            // 
            activitybind88.Name = "Workflow";
            activitybind88.Path = "failureTaskAfterProperties";
            this.onFailureTaskPSBug.BeforeProperties = null;
            correlationtoken36.Name = "taskToken";
            correlationtoken36.OwnerActivityName = "eventHandlingScopePSBug";
            this.onFailureTaskPSBug.CorrelationToken = correlationtoken36;
            this.onFailureTaskPSBug.Executor = null;
            this.onFailureTaskPSBug.Name = "onFailureTaskPSBug";
            activitybind89.Name = "Workflow";
            activitybind89.Path = "failureTaskId";
            this.onFailureTaskPSBug.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onFailureTaskPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind89)));
            this.onFailureTaskPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind88)));
            // 
            // whileAttachRequestXMLFailure
            // 
            this.whileAttachRequestXMLFailure.Activities.Add(this.onFailureTaskAttachRequestXMLChanged);
            ruleconditionreference25.ConditionName = "Condition2";
            this.whileAttachRequestXMLFailure.Condition = ruleconditionreference25;
            this.whileAttachRequestXMLFailure.Name = "whileAttachRequestXMLFailure";
            // 
            // enableWorkflowModificationAttachRequestXML
            // 
            activitybind90.Name = "Workflow";
            activitybind90.Path = "ContextData";
            correlationtoken37.Name = "modificationTokenAttachRequestXML";
            correlationtoken37.OwnerActivityName = "eventHandlingScopeAttachRequestXML";
            this.enableWorkflowModificationAttachRequestXML.CorrelationToken = correlationtoken37;
            activitybind91.Name = "Workflow";
            activitybind91.Path = "modPageId";
            this.enableWorkflowModificationAttachRequestXML.Name = "enableWorkflowModificationAttachRequestXML";
            this.enableWorkflowModificationAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind91)));
            this.enableWorkflowModificationAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind90)));
            // 
            // onFailureTaskAttachRequestXMLCreated
            // 
            activitybind92.Name = "Workflow";
            activitybind92.Path = "failureTaskAfterProperties";
            correlationtoken38.Name = "taskToken";
            correlationtoken38.OwnerActivityName = "eventHandlingScopeAttachRequestXML";
            this.onFailureTaskAttachRequestXMLCreated.CorrelationToken = correlationtoken38;
            this.onFailureTaskAttachRequestXMLCreated.Executor = null;
            this.onFailureTaskAttachRequestXMLCreated.Name = "onFailureTaskAttachRequestXMLCreated";
            activitybind93.Name = "Workflow";
            activitybind93.Path = "failureTaskId";
            this.onFailureTaskAttachRequestXMLCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onFailureTaskAttachRequestXMLCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind93)));
            this.onFailureTaskAttachRequestXMLCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind92)));
            // 
            // createFailureTaskAttachRequestXML
            // 
            correlationtoken39.Name = "taskToken";
            correlationtoken39.OwnerActivityName = "eventHandlingScopeAttachRequestXML";
            this.createFailureTaskAttachRequestXML.CorrelationToken = correlationtoken39;
            this.createFailureTaskAttachRequestXML.ListItemId = -1;
            this.createFailureTaskAttachRequestXML.Name = "createFailureTaskAttachRequestXML";
            this.createFailureTaskAttachRequestXML.SpecialPermissions = null;
            activitybind94.Name = "Workflow";
            activitybind94.Path = "failureTaskId";
            activitybind95.Name = "Workflow";
            activitybind95.Path = "failureTaskProperties";
            this.createFailureTaskAttachRequestXML.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createFailureTaskAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind95)));
            this.createFailureTaskAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind94)));
            // 
            // wssUpdateModificationContext_SendFinalEmail
            // 
            activitybind96.Name = "Workflow";
            activitybind96.Path = "ContextData";
            activitybind97.Name = "Workflow";
            activitybind97.Path = "modPageId";
            this.wssUpdateModificationContext_SendFinalEmail.Name = "wssUpdateModificationContext_SendFinalEmail";
            this.wssUpdateModificationContext_SendFinalEmail.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind97)));
            this.wssUpdateModificationContext_SendFinalEmail.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind96)));
            // 
            // onWorkflowModified_SendFinalEmail
            // 
            activitybind98.Name = "Workflow";
            activitybind98.Path = "ContextData";
            this.onWorkflowModified_SendFinalEmail.CorrelationToken = correlationtoken26;
            activitybind99.Name = "Workflow";
            activitybind99.Path = "modPageId";
            this.onWorkflowModified_SendFinalEmail.Name = "onWorkflowModified_SendFinalEmail";
            this.onWorkflowModified_SendFinalEmail.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModified_SendFinalEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind99)));
            this.onWorkflowModified_SendFinalEmail.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind98)));
            // 
            // ifElseBranchActivity11
            // 
            this.ifElseBranchActivity11.Activities.Add(this.delayForActivity4);
            ruleconditionreference26.ConditionName = "ifResolveBugAsDelay";
            this.ifElseBranchActivity11.Condition = ruleconditionreference26;
            this.ifElseBranchActivity11.Name = "ifElseBranchActivity11";
            // 
            // ifSendFinalEmailFailed
            // 
            this.ifSendFinalEmailFailed.Activities.Add(this.createSendFinalEmailFailureTask);
            this.ifSendFinalEmailFailed.Activities.Add(this.onSendFinalEmailFailureTaskCreated);
            this.ifSendFinalEmailFailed.Activities.Add(this.enableWorkflowModification_SendFinalEmail);
            this.ifSendFinalEmailFailed.Activities.Add(this.whileSendFinalEmailFailed);
            ruleconditionreference27.ConditionName = "IfCondSendEmailFailed";
            this.ifSendFinalEmailFailed.Condition = ruleconditionreference27;
            this.ifSendFinalEmailFailed.Name = "ifSendFinalEmailFailed";
            // 
            // wssUpdateModificationContext_ResolveBugAs
            // 
            activitybind100.Name = "Workflow";
            activitybind100.Path = "ContextData";
            activitybind101.Name = "Workflow";
            activitybind101.Path = "modPageId";
            this.wssUpdateModificationContext_ResolveBugAs.Name = "wssUpdateModificationContext_ResolveBugAs";
            this.wssUpdateModificationContext_ResolveBugAs.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind101)));
            this.wssUpdateModificationContext_ResolveBugAs.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind100)));
            // 
            // onWorkflowModified_ResolveBugAs
            // 
            activitybind102.Name = "Workflow";
            activitybind102.Path = "ContextData";
            this.onWorkflowModified_ResolveBugAs.CorrelationToken = correlationtoken29;
            activitybind103.Name = "Workflow";
            activitybind103.Path = "modPageId";
            this.onWorkflowModified_ResolveBugAs.Name = "onWorkflowModified_ResolveBugAs";
            this.onWorkflowModified_ResolveBugAs.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModified_ResolveBugAs.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind103)));
            this.onWorkflowModified_ResolveBugAs.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind102)));
            // 
            // ifResolveBugAsDelay
            // 
            this.ifResolveBugAsDelay.Activities.Add(this.delayForActivity2);
            ruleconditionreference28.ConditionName = "ifResolveBugAsDelay";
            this.ifResolveBugAsDelay.Condition = ruleconditionreference28;
            this.ifResolveBugAsDelay.Name = "ifResolveBugAsDelay";
            // 
            // ifResolveBugAsFailed
            // 
            this.ifResolveBugAsFailed.Activities.Add(this.createTaskResolveBugAsFailed);
            this.ifResolveBugAsFailed.Activities.Add(this.onTaskResolveBugAsFailedCreated);
            this.ifResolveBugAsFailed.Activities.Add(this.enableWorkflowModification_ResolveBugAs);
            this.ifResolveBugAsFailed.Activities.Add(this.whileResolveBugAsFailed);
            ruleconditionreference29.ConditionName = "IfCondResolveBugAsFailed";
            this.ifResolveBugAsFailed.Condition = ruleconditionreference29;
            this.ifResolveBugAsFailed.Name = "ifResolveBugAsFailed";
            // 
            // ifPropProcessSucceeded
            // 
            this.ifPropProcessSucceeded.Activities.Add(this.updateApprovalTask_Status);
            ruleconditionreference30.ConditionName = "ifCond_PropSucceeded";
            this.ifPropProcessSucceeded.Condition = ruleconditionreference30;
            this.ifPropProcessSucceeded.Name = "ifPropProcessSucceeded";
            // 
            // ifPropResultsFailed_Activity
            // 
            this.ifPropResultsFailed_Activity.Activities.Add(this.ifPropResultsFailed);
            this.ifPropResultsFailed_Activity.Name = "ifPropResultsFailed_Activity";
            // 
            // sequencePropResultCheck
            // 
            this.sequencePropResultCheck.Activities.Add(this.PropResult);
            this.sequencePropResultCheck.Activities.Add(this.ifPropResultsCheckNotComplete_Activity);
            this.sequencePropResultCheck.Name = "sequencePropResultCheck";
            ruleconditionreference31.ConditionName = "CondWaitingForProp";
            // 
            // sequencePropApproved
            // 
            this.sequencePropApproved.Activities.Add(this.ifPropApprovedActivity);
            this.sequencePropApproved.Name = "sequencePropApproved";
            this.sequencePropApproved.SetValue(System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty, ruleconditionreference31);
            ruleconditionreference32.ConditionName = "CondApprCAG_NotPropped";
            // 
            // onApprovalTaskChanged_Update
            // 
            activitybind104.Name = "Workflow";
            activitybind104.Path = "approvalTaskAfterProperties";
            this.onApprovalTaskChanged_Update.BeforeProperties = null;
            correlationtoken40.Name = "taskTokenApproval";
            correlationtoken40.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.onApprovalTaskChanged_Update.CorrelationToken = correlationtoken40;
            this.onApprovalTaskChanged_Update.Executor = null;
            this.onApprovalTaskChanged_Update.Name = "onApprovalTaskChanged_Update";
            activitybind105.Name = "Workflow";
            activitybind105.Path = "approvalTaskId";
            this.onApprovalTaskChanged_Update.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onApprovalTaskChanged_Invoked);
            this.onApprovalTaskChanged_Update.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind105)));
            this.onApprovalTaskChanged_Update.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind104)));
            this.onApprovalTaskChanged_Update.SetValue(System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty, ruleconditionreference32);
            // 
            // if_PropFirstTime2
            // 
            this.if_PropFirstTime2.Activities.Add(this.createApprovalTask);
            this.if_PropFirstTime2.Activities.Add(this.enableWorkflowModificationApproval);
            this.if_PropFirstTime2.Activities.Add(this.whileWaitingForApproval);
            ruleconditionreference33.ConditionName = "ifCond_PropFirstTime";
            this.if_PropFirstTime2.Condition = ruleconditionreference33;
            this.if_PropFirstTime2.Name = "if_PropFirstTime2";
            // 
            // ifElseBranchActivity3
            // 
            this.ifElseBranchActivity3.Activities.Add(this.SendEmailRetryDelay);
            ruleconditionreference34.ConditionName = "ifSendEmailDelay";
            this.ifElseBranchActivity3.Condition = ruleconditionreference34;
            this.ifElseBranchActivity3.Name = "ifElseBranchActivity3";
            // 
            // eventHandlersActivity4
            // 
            this.eventHandlersActivity4.Activities.Add(this.eventDrivenActivity4);
            this.eventHandlersActivity4.Name = "eventHandlersActivity4";
            // 
            // sequenceSendEmail
            // 
            this.sequenceSendEmail.Activities.Add(this.SendMail);
            this.sequenceSendEmail.Activities.Add(this.ifSendEmailFailureTask);
            this.sequenceSendEmail.Name = "sequenceSendEmail";
            // 
            // ifElseBranchActivity2
            // 
            this.ifElseBranchActivity2.Activities.Add(this.TransferFilesRetryDelay);
            ruleconditionreference35.ConditionName = "ifTransferFilesDelay";
            this.ifElseBranchActivity2.Condition = ruleconditionreference35;
            this.ifElseBranchActivity2.Name = "ifElseBranchActivity2";
            // 
            // eventHandlersActivity3
            // 
            this.eventHandlersActivity3.Activities.Add(this.eventDrivenActivity3);
            this.eventHandlersActivity3.Name = "eventHandlersActivity3";
            // 
            // sequenceTransferFiles
            // 
            this.sequenceTransferFiles.Activities.Add(this.TransferFilesInit);
            this.sequenceTransferFiles.Activities.Add(this.whileTransferFilesProcess);
            this.sequenceTransferFiles.Activities.Add(this.TransferFilesVerify);
            this.sequenceTransferFiles.Activities.Add(this.ifTransferFilesFailTask);
            this.sequenceTransferFiles.Name = "sequenceTransferFiles";
            // 
            // eventDrivenActivity7
            // 
            this.eventDrivenActivity7.Activities.Add(this.onWorkflowModified_CreateToolsMgmtJob);
            this.eventDrivenActivity7.Activities.Add(this.wssUpdateModificationContext_CreateToolsMgmtJob);
            this.eventDrivenActivity7.Name = "eventDrivenActivity7";
            // 
            // if_CreateToolsMgmtJob_Failure_Activity
            // 
            this.if_CreateToolsMgmtJob_Failure_Activity.Activities.Add(this.if_CreateToolsMgmtJob_Failure);
            this.if_CreateToolsMgmtJob_Failure_Activity.Name = "if_CreateToolsMgmtJob_Failure_Activity";
            // 
            // if_CreateToolsMgmtJob_Failed_Activity
            // 
            this.if_CreateToolsMgmtJob_Failed_Activity.Activities.Add(this.if_CreateToolsMgmtJob_Failed);
            this.if_CreateToolsMgmtJob_Failed_Activity.Name = "if_CreateToolsMgmtJob_Failed_Activity";
            // 
            // CreateToolsMgmtJob
            // 
            this.CreateToolsMgmtJob.Name = "CreateToolsMgmtJob";
            this.CreateToolsMgmtJob.ExecuteCode += new System.EventHandler(this.CreateToolsMgmtJob_ExecuteCode);
            // 
            // ifPSBugAttachFilesDelay
            // 
            this.ifPSBugAttachFilesDelay.Activities.Add(this.ifElseBranchActivity5);
            this.ifPSBugAttachFilesDelay.Name = "ifPSBugAttachFilesDelay";
            // 
            // PSBugAttachFiles
            // 
            this.PSBugAttachFiles.Name = "PSBugAttachFiles";
            this.PSBugAttachFiles.ExecuteCode += new System.EventHandler(this.PSBugAttachFiles_ExecuteCode);
            // 
            // whilePSBugFailure
            // 
            this.whilePSBugFailure.Activities.Add(this.onFailureTaskPSBug);
            this.whilePSBugFailure.Activities.Add(this.cancellationHandlerActivity3);
            ruleconditionreference36.ConditionName = "Condition2";
            this.whilePSBugFailure.Condition = ruleconditionreference36;
            this.whilePSBugFailure.Name = "whilePSBugFailure";
            // 
            // enableWorkflowModificationPSBug
            // 
            activitybind106.Name = "Workflow";
            activitybind106.Path = "ContextData";
            correlationtoken41.Name = "modificationTokenPSBug";
            correlationtoken41.OwnerActivityName = "eventHandlingScopePSBug";
            this.enableWorkflowModificationPSBug.CorrelationToken = correlationtoken41;
            activitybind107.Name = "Workflow";
            activitybind107.Path = "modPageId";
            this.enableWorkflowModificationPSBug.Name = "enableWorkflowModificationPSBug";
            this.enableWorkflowModificationPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind107)));
            this.enableWorkflowModificationPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind106)));
            // 
            // onFailTaskPSBugCreated
            // 
            activitybind108.Name = "Workflow";
            activitybind108.Path = "failureTaskAfterProperties";
            correlationtoken42.Name = "taskToken";
            correlationtoken42.OwnerActivityName = "eventHandlingScopePSBug";
            this.onFailTaskPSBugCreated.CorrelationToken = correlationtoken42;
            this.onFailTaskPSBugCreated.Executor = null;
            this.onFailTaskPSBugCreated.Name = "onFailTaskPSBugCreated";
            activitybind109.Name = "Workflow";
            activitybind109.Path = "failureTaskId";
            this.onFailTaskPSBugCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onFailTaskPSBugCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind109)));
            this.onFailTaskPSBugCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind108)));
            // 
            // createFailureTaskPSBug
            // 
            this.createFailureTaskPSBug.CorrelationToken = correlationtoken42;
            this.createFailureTaskPSBug.ListItemId = -1;
            this.createFailureTaskPSBug.Name = "createFailureTaskPSBug";
            this.createFailureTaskPSBug.SpecialPermissions = null;
            activitybind110.Name = "Workflow";
            activitybind110.Path = "failureTaskId";
            activitybind111.Name = "Workflow";
            activitybind111.Path = "failureTaskProperties";
            this.createFailureTaskPSBug.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createFailureTaskPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind111)));
            this.createFailureTaskPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind110)));
            // 
            // onFailTask_InitWorkflow_Changed
            // 
            activitybind112.Name = "Workflow";
            activitybind112.Path = "failureTaskAfterProperties";
            this.onFailTask_InitWorkflow_Changed.BeforeProperties = null;
            correlationtoken43.Name = "taskToken";
            correlationtoken43.OwnerActivityName = "eventHandlingScopeInitWorkflow";
            this.onFailTask_InitWorkflow_Changed.CorrelationToken = correlationtoken43;
            this.onFailTask_InitWorkflow_Changed.Executor = null;
            this.onFailTask_InitWorkflow_Changed.Name = "onFailTask_InitWorkflow_Changed";
            activitybind113.Name = "Workflow";
            activitybind113.Path = "failureTaskId";
            this.onFailTask_InitWorkflow_Changed.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskChanged_Invoked);
            this.onFailTask_InitWorkflow_Changed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind113)));
            this.onFailTask_InitWorkflow_Changed.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskChanged.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind112)));
            // 
            // wssUpdateModificationContextAttachRequestXML
            // 
            activitybind114.Name = "Workflow";
            activitybind114.Path = "ContextData";
            activitybind115.Name = "Workflow";
            activitybind115.Path = "modPageId";
            this.wssUpdateModificationContextAttachRequestXML.Name = "wssUpdateModificationContextAttachRequestXML";
            this.wssUpdateModificationContextAttachRequestXML.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind115)));
            this.wssUpdateModificationContextAttachRequestXML.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind114)));
            activitybind118.Name = "Workflow";
            activitybind118.Path = "g_modUser";
            // 
            // onWorkflowModifiedAttachRequestXML
            // 
            activitybind116.Name = "Workflow";
            activitybind116.Path = "ContextData";
            correlationtoken44.Name = "modificationTokenAttachRequestXML";
            correlationtoken44.OwnerActivityName = "eventHandlingScopeAttachRequestXML";
            this.onWorkflowModifiedAttachRequestXML.CorrelationToken = correlationtoken44;
            activitybind117.Name = "Workflow";
            activitybind117.Path = "modPageId";
            this.onWorkflowModifiedAttachRequestXML.Name = "onWorkflowModifiedAttachRequestXML";
            this.onWorkflowModifiedAttachRequestXML.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModifiedAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind117)));
            this.onWorkflowModifiedAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind116)));
            this.onWorkflowModifiedAttachRequestXML.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.UserProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind118)));
            // 
            // ifElseBranchActivity9
            // 
            this.ifElseBranchActivity9.Activities.Add(this.createFailureTaskAttachRequestXML);
            this.ifElseBranchActivity9.Activities.Add(this.onFailureTaskAttachRequestXMLCreated);
            this.ifElseBranchActivity9.Activities.Add(this.enableWorkflowModificationAttachRequestXML);
            this.ifElseBranchActivity9.Activities.Add(this.whileAttachRequestXMLFailure);
            ruleconditionreference37.ConditionName = "IfConditionAttachRequestXML";
            this.ifElseBranchActivity9.Condition = ruleconditionreference37;
            this.ifElseBranchActivity9.Name = "ifElseBranchActivity9";
            // 
            // eventDrivenActivity9
            // 
            this.eventDrivenActivity9.Activities.Add(this.onWorkflowModified_SendFinalEmail);
            this.eventDrivenActivity9.Activities.Add(this.wssUpdateModificationContext_SendFinalEmail);
            this.eventDrivenActivity9.Name = "eventDrivenActivity9";
            // 
            // ifElseActivity3
            // 
            this.ifElseActivity3.Activities.Add(this.ifElseBranchActivity11);
            this.ifElseActivity3.Name = "ifElseActivity3";
            // 
            // ifSendFinalEmailFailed_Activity
            // 
            this.ifSendFinalEmailFailed_Activity.Activities.Add(this.ifSendFinalEmailFailed);
            this.ifSendFinalEmailFailed_Activity.Name = "ifSendFinalEmailFailed_Activity";
            // 
            // SendFinalEmail
            // 
            this.SendFinalEmail.Name = "SendFinalEmail";
            this.SendFinalEmail.ExecuteCode += new System.EventHandler(this.SendFinalEmail_ExecuteCode);
            // 
            // eventDrivenActivity6
            // 
            this.eventDrivenActivity6.Activities.Add(this.onWorkflowModified_ResolveBugAs);
            this.eventDrivenActivity6.Activities.Add(this.wssUpdateModificationContext_ResolveBugAs);
            this.eventDrivenActivity6.Name = "eventDrivenActivity6";
            // 
            // ifResolveBugAsDelayActivity
            // 
            this.ifResolveBugAsDelayActivity.Activities.Add(this.ifResolveBugAsDelay);
            this.ifResolveBugAsDelayActivity.Name = "ifResolveBugAsDelayActivity";
            // 
            // ifResolveBugAsFailedActivity
            // 
            this.ifResolveBugAsFailedActivity.Activities.Add(this.ifResolveBugAsFailed);
            this.ifResolveBugAsFailedActivity.Name = "ifResolveBugAsFailedActivity";
            // 
            // ResolveBugAs
            // 
            this.ResolveBugAs.Name = "ResolveBugAs";
            this.ResolveBugAs.ExecuteCode += new System.EventHandler(this.ResolveBugAs_ExecuteCode);
            // 
            // SetPropProcessFalse
            // 
            this.SetPropProcessFalse.Name = "SetPropProcessFalse";
            this.SetPropProcessFalse.ExecuteCode += new System.EventHandler(this.SetPropProcessFalse_ExecuteCode);
            // 
            // if_PropProcessSucceeded_Activity
            // 
            this.if_PropProcessSucceeded_Activity.Activities.Add(this.ifPropProcessSucceeded);
            this.if_PropProcessSucceeded_Activity.Name = "if_PropProcessSucceeded_Activity";
            // 
            // eventHandlingScope_PropResults
            // 
            this.eventHandlingScope_PropResults.Activities.Add(this.ifPropResultsFailed_Activity);
            this.eventHandlingScope_PropResults.Name = "eventHandlingScope_PropResults";
            // 
            // whilePropResultCheck
            // 
            this.whilePropResultCheck.Activities.Add(this.sequencePropResultCheck);
            ruleconditionreference38.ConditionName = "WhileCondPropResultCheckNotComplete";
            this.whilePropResultCheck.Condition = ruleconditionreference38;
            this.whilePropResultCheck.Name = "whilePropResultCheck";
            // 
            // ApprovalAndPropCAG
            // 
            this.ApprovalAndPropCAG.Activities.Add(this.onApprovalTaskChanged_Update);
            this.ApprovalAndPropCAG.Activities.Add(this.sequencePropApproved);
            this.ApprovalAndPropCAG.Name = "ApprovalAndPropCAG";
            ruleconditionreference39.ConditionName = "CondCAG_PropComplete";
            this.ApprovalAndPropCAG.UntilCondition = ruleconditionreference39;
            // 
            // if_PropFirstTime_Activity2
            // 
            this.if_PropFirstTime_Activity2.Activities.Add(this.if_PropFirstTime2);
            this.if_PropFirstTime_Activity2.Name = "if_PropFirstTime_Activity2";
            // 
            // ifSendEmailRetryDelay
            // 
            this.ifSendEmailRetryDelay.Activities.Add(this.ifElseBranchActivity3);
            this.ifSendEmailRetryDelay.Name = "ifSendEmailRetryDelay";
            // 
            // eventHandlingScopeSendEmail
            // 
            this.eventHandlingScopeSendEmail.Activities.Add(this.sequenceSendEmail);
            this.eventHandlingScopeSendEmail.Activities.Add(this.eventHandlersActivity4);
            this.eventHandlingScopeSendEmail.Name = "eventHandlingScopeSendEmail";
            // 
            // ifTransferFilesRetryDelay
            // 
            this.ifTransferFilesRetryDelay.Activities.Add(this.ifElseBranchActivity2);
            this.ifTransferFilesRetryDelay.Name = "ifTransferFilesRetryDelay";
            // 
            // eventHandlingScopeTransferFiles
            // 
            this.eventHandlingScopeTransferFiles.Activities.Add(this.sequenceTransferFiles);
            this.eventHandlingScopeTransferFiles.Activities.Add(this.eventHandlersActivity3);
            this.eventHandlingScopeTransferFiles.Name = "eventHandlingScopeTransferFiles";
            // 
            // eventHandlersActivity7
            // 
            this.eventHandlersActivity7.Activities.Add(this.eventDrivenActivity7);
            this.eventHandlersActivity7.Name = "eventHandlersActivity7";
            // 
            // sequence_CreateToolsMgmtJob
            // 
            this.sequence_CreateToolsMgmtJob.Activities.Add(this.CreateToolsMgmtJob);
            this.sequence_CreateToolsMgmtJob.Activities.Add(this.if_CreateToolsMgmtJob_Failed_Activity);
            this.sequence_CreateToolsMgmtJob.Activities.Add(this.if_CreateToolsMgmtJob_Failure_Activity);
            this.sequence_CreateToolsMgmtJob.Name = "sequence_CreateToolsMgmtJob";
            // 
            // sequencePSBugAttachFiles
            // 
            this.sequencePSBugAttachFiles.Activities.Add(this.PSBugAttachFiles);
            this.sequencePSBugAttachFiles.Activities.Add(this.ifPSBugAttachFilesDelay);
            this.sequencePSBugAttachFiles.Name = "sequencePSBugAttachFiles";
            // 
            // wssUpdateModificationContextPSBug
            // 
            activitybind119.Name = "Workflow";
            activitybind119.Path = "ContextData";
            activitybind120.Name = "Workflow";
            activitybind120.Path = "modPageId";
            this.wssUpdateModificationContextPSBug.Name = "wssUpdateModificationContextPSBug";
            this.wssUpdateModificationContextPSBug.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind120)));
            this.wssUpdateModificationContextPSBug.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind119)));
            activitybind123.Name = "Workflow";
            activitybind123.Path = "g_modUser";
            // 
            // onWorkflowModifiedPSBug
            // 
            activitybind121.Name = "Workflow";
            activitybind121.Path = "ContextData";
            this.onWorkflowModifiedPSBug.CorrelationToken = correlationtoken41;
            activitybind122.Name = "Workflow";
            activitybind122.Path = "modPageId";
            this.onWorkflowModifiedPSBug.Name = "onWorkflowModifiedPSBug";
            this.onWorkflowModifiedPSBug.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModifiedPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind122)));
            this.onWorkflowModifiedPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind121)));
            this.onWorkflowModifiedPSBug.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.UserProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind123)));
            // 
            // ifActivity2
            // 
            this.ifActivity2.Activities.Add(this.createFailureTaskPSBug);
            this.ifActivity2.Activities.Add(this.onFailTaskPSBugCreated);
            this.ifActivity2.Activities.Add(this.enableWorkflowModificationPSBug);
            this.ifActivity2.Activities.Add(this.whilePSBugFailure);
            ruleconditionreference40.ConditionName = "IfConditionPSBug";
            this.ifActivity2.Condition = ruleconditionreference40;
            this.ifActivity2.Name = "ifActivity2";
            // 
            // whileInitWorkflowFailed
            // 
            this.whileInitWorkflowFailed.Activities.Add(this.onFailTask_InitWorkflow_Changed);
            ruleconditionreference41.ConditionName = "Condition2";
            this.whileInitWorkflowFailed.Condition = ruleconditionreference41;
            this.whileInitWorkflowFailed.Name = "whileInitWorkflowFailed";
            // 
            // enableWorkflowModificationInitWorkflow
            // 
            activitybind124.Name = "Workflow";
            activitybind124.Path = "ContextData";
            correlationtoken45.Name = "modificationInitWorkflow";
            correlationtoken45.OwnerActivityName = "eventHandlingScopeInitWorkflow";
            this.enableWorkflowModificationInitWorkflow.CorrelationToken = correlationtoken45;
            activitybind125.Name = "Workflow";
            activitybind125.Path = "modPageId";
            this.enableWorkflowModificationInitWorkflow.Name = "enableWorkflowModificationInitWorkflow";
            this.enableWorkflowModificationInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind125)));
            this.enableWorkflowModificationInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind124)));
            // 
            // onFailTaskInitWorkflowCreated
            // 
            activitybind126.Name = "Workflow";
            activitybind126.Path = "failureTaskAfterProperties";
            correlationtoken46.Name = "taskToken";
            correlationtoken46.OwnerActivityName = "eventHandlingScopeInitWorkflow";
            this.onFailTaskInitWorkflowCreated.CorrelationToken = correlationtoken46;
            this.onFailTaskInitWorkflowCreated.Executor = null;
            this.onFailTaskInitWorkflowCreated.Name = "onFailTaskInitWorkflowCreated";
            activitybind127.Name = "Workflow";
            activitybind127.Path = "failureTaskId";
            this.onFailTaskInitWorkflowCreated.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onFailureTaskCreated_Invoked);
            this.onFailTaskInitWorkflowCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind127)));
            this.onFailTaskInitWorkflowCreated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnTaskCreated.AfterPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind126)));
            // 
            // createFailureTaskInitWorkflow
            // 
            this.createFailureTaskInitWorkflow.CorrelationToken = correlationtoken46;
            this.createFailureTaskInitWorkflow.ListItemId = -1;
            this.createFailureTaskInitWorkflow.Name = "createFailureTaskInitWorkflow";
            this.createFailureTaskInitWorkflow.SpecialPermissions = null;
            activitybind128.Name = "Workflow";
            activitybind128.Path = "failureTaskId";
            activitybind129.Name = "Workflow";
            activitybind129.Path = "failureTaskProperties";
            this.createFailureTaskInitWorkflow.MethodInvoking += new System.EventHandler(this.createFailureTask_MethodInvoking);
            this.createFailureTaskInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind128)));
            this.createFailureTaskInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.CreateTask.TaskPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind129)));
            // 
            // delayForActivity1
            // 
            this.delayForActivity1.Days = 0;
            this.delayForActivity1.Hours = 0;
            activitybind130.Name = "Workflow";
            activitybind130.Path = "g_psAttachFilesDelayMinutes";
            this.delayForActivity1.Name = "delayForActivity1";
            this.delayForActivity1.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind130)));
            // 
            // eventDrivenActivity5
            // 
            this.eventDrivenActivity5.Activities.Add(this.onWorkflowModifiedAttachRequestXML);
            this.eventDrivenActivity5.Activities.Add(this.wssUpdateModificationContextAttachRequestXML);
            this.eventDrivenActivity5.Name = "eventDrivenActivity5";
            // 
            // ifRequestXMLFailureTask
            // 
            this.ifRequestXMLFailureTask.Activities.Add(this.ifElseBranchActivity9);
            this.ifRequestXMLFailureTask.Name = "ifRequestXMLFailureTask";
            // 
            // AttachRequestXMLToBug
            // 
            this.AttachRequestXMLToBug.Name = "AttachRequestXMLToBug";
            this.AttachRequestXMLToBug.ExecuteCode += new System.EventHandler(this.AttachRequestXMLToBug_ExecuteCode);
            // 
            // delayForActivity3
            // 
            this.delayForActivity3.Days = 0;
            this.delayForActivity3.Hours = 0;
            activitybind131.Name = "Workflow";
            activitybind131.Path = "g_psWorkCheckDelayMinutes";
            this.delayForActivity3.Name = "delayForActivity3";
            this.delayForActivity3.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind131)));
            // 
            // eventHandlersActivity9
            // 
            this.eventHandlersActivity9.Activities.Add(this.eventDrivenActivity9);
            this.eventHandlersActivity9.Name = "eventHandlersActivity9";
            // 
            // sequenceSendFinalEmail
            // 
            this.sequenceSendFinalEmail.Activities.Add(this.SendFinalEmail);
            this.sequenceSendFinalEmail.Activities.Add(this.ifSendFinalEmailFailed_Activity);
            this.sequenceSendFinalEmail.Activities.Add(this.ifElseActivity3);
            this.sequenceSendFinalEmail.Name = "sequenceSendFinalEmail";
            // 
            // eventHandlersActivity6
            // 
            this.eventHandlersActivity6.Activities.Add(this.eventDrivenActivity6);
            this.eventHandlersActivity6.Name = "eventHandlersActivity6";
            // 
            // sequenceResolveBugAs
            // 
            this.sequenceResolveBugAs.Activities.Add(this.ResolveBugAs);
            this.sequenceResolveBugAs.Activities.Add(this.ifResolveBugAsFailedActivity);
            this.sequenceResolveBugAs.Activities.Add(this.ifResolveBugAsDelayActivity);
            this.sequenceResolveBugAs.Name = "sequenceResolveBugAs";
            // 
            // if_NotDoWeProp
            // 
            this.if_NotDoWeProp.Activities.Add(this.SetPropProcessFalse);
            ruleconditionreference42.ConditionName = "ifCond_NotDoWeProp";
            this.if_NotDoWeProp.Condition = ruleconditionreference42;
            this.if_NotDoWeProp.Name = "if_NotDoWeProp";
            // 
            // ifPropApproval
            // 
            this.ifPropApproval.Activities.Add(this.if_PropFirstTime_Activity2);
            this.ifPropApproval.Activities.Add(this.ApprovalAndPropCAG);
            this.ifPropApproval.Activities.Add(this.whilePropResultCheck);
            this.ifPropApproval.Activities.Add(this.eventHandlingScope_PropResults);
            this.ifPropApproval.Activities.Add(this.if_PropProcessSucceeded_Activity);
            ruleconditionreference43.ConditionName = "IfCondApproval";
            this.ifPropApproval.Condition = ruleconditionreference43;
            this.ifPropApproval.Name = "ifPropApproval";
            // 
            // sequenceActivity3
            // 
            this.sequenceActivity3.Activities.Add(this.eventHandlingScopeSendEmail);
            this.sequenceActivity3.Activities.Add(this.ifSendEmailRetryDelay);
            this.sequenceActivity3.Name = "sequenceActivity3";
            // 
            // sequenceActivity2
            // 
            this.sequenceActivity2.Activities.Add(this.eventHandlingScopeTransferFiles);
            this.sequenceActivity2.Activities.Add(this.ifTransferFilesRetryDelay);
            this.sequenceActivity2.Name = "sequenceActivity2";
            // 
            // eventHandlingScope_CreateToolsMgmtJob
            // 
            this.eventHandlingScope_CreateToolsMgmtJob.Activities.Add(this.sequence_CreateToolsMgmtJob);
            this.eventHandlingScope_CreateToolsMgmtJob.Activities.Add(this.eventHandlersActivity7);
            this.eventHandlingScope_CreateToolsMgmtJob.Name = "eventHandlingScope_CreateToolsMgmtJob";
            // 
            // whilePSBugAttachFiles
            // 
            this.whilePSBugAttachFiles.Activities.Add(this.sequencePSBugAttachFiles);
            ruleconditionreference44.ConditionName = "whilePSBugsAttachFiles";
            this.whilePSBugAttachFiles.Condition = ruleconditionreference44;
            this.whilePSBugAttachFiles.Name = "whilePSBugAttachFiles";
            // 
            // PSBugRetryDelay
            // 
            this.PSBugRetryDelay.Days = 0;
            this.PSBugRetryDelay.Hours = 0;
            activitybind132.Name = "Workflow";
            activitybind132.Path = "g_stepDelayMinutes";
            this.PSBugRetryDelay.Name = "PSBugRetryDelay";
            this.PSBugRetryDelay.SetBinding(Microsoft.SharePoint.WorkflowActions.DelayForActivity.MinutesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind132)));
            // 
            // eventDrivenActivity1
            // 
            this.eventDrivenActivity1.Activities.Add(this.onWorkflowModifiedPSBug);
            this.eventDrivenActivity1.Activities.Add(this.wssUpdateModificationContextPSBug);
            this.eventDrivenActivity1.Name = "eventDrivenActivity1";
            // 
            // ifPSBugFailureTask
            // 
            this.ifPSBugFailureTask.Activities.Add(this.ifActivity2);
            this.ifPSBugFailureTask.Name = "ifPSBugFailureTask";
            // 
            // PSBug
            // 
            this.PSBug.Name = "PSBug";
            this.PSBug.ExecuteCode += new System.EventHandler(this.PSBug_ExecuteCode);
            // 
            // wssUpdateModificationContextInitWorkflow
            // 
            activitybind133.Name = "Workflow";
            activitybind133.Path = "ContextData";
            activitybind134.Name = "Workflow";
            activitybind134.Path = "modPageId";
            this.wssUpdateModificationContextInitWorkflow.Name = "wssUpdateModificationContextInitWorkflow";
            this.wssUpdateModificationContextInitWorkflow.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind133)));
            this.wssUpdateModificationContextInitWorkflow.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind134)));
            activitybind137.Name = "Workflow";
            activitybind137.Path = "g_modUser";
            // 
            // onWorkflowModifiedInitWorkflow
            // 
            activitybind135.Name = "Workflow";
            activitybind135.Path = "ContextData";
            this.onWorkflowModifiedInitWorkflow.CorrelationToken = correlationtoken45;
            activitybind136.Name = "Workflow";
            activitybind136.Path = "modPageId";
            this.onWorkflowModifiedInitWorkflow.Name = "onWorkflowModifiedInitWorkflow";
            this.onWorkflowModifiedInitWorkflow.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModifiedInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind136)));
            this.onWorkflowModifiedInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind135)));
            this.onWorkflowModifiedInitWorkflow.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.UserProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind137)));
            // 
            // ifActivity1
            // 
            this.ifActivity1.Activities.Add(this.createFailureTaskInitWorkflow);
            this.ifActivity1.Activities.Add(this.onFailTaskInitWorkflowCreated);
            this.ifActivity1.Activities.Add(this.enableWorkflowModificationInitWorkflow);
            this.ifActivity1.Activities.Add(this.whileInitWorkflowFailed);
            ruleconditionreference45.ConditionName = "IfConditionInitWorkflow";
            this.ifActivity1.Condition = ruleconditionreference45;
            this.ifActivity1.Name = "ifActivity1";
            // 
            // ifElseBranchActivity6
            // 
            this.ifElseBranchActivity6.Activities.Add(this.delayForActivity1);
            ruleconditionreference46.ConditionName = "ifAttachRequestXMLToBugDelay";
            this.ifElseBranchActivity6.Condition = ruleconditionreference46;
            this.ifElseBranchActivity6.Name = "ifElseBranchActivity6";
            // 
            // eventHandlersActivity5
            // 
            this.eventHandlersActivity5.Activities.Add(this.eventDrivenActivity5);
            this.eventHandlersActivity5.Name = "eventHandlersActivity5";
            // 
            // sequenceActivity5
            // 
            this.sequenceActivity5.Activities.Add(this.AttachRequestXMLToBug);
            this.sequenceActivity5.Activities.Add(this.ifRequestXMLFailureTask);
            this.sequenceActivity5.Name = "sequenceActivity5";
            // 
            // ifElseBranchActivity7
            // 
            this.ifElseBranchActivity7.Activities.Add(this.delayForActivity3);
            ruleconditionreference47.ConditionName = "ConditionIfPSWorkNotComplete";
            this.ifElseBranchActivity7.Condition = ruleconditionreference47;
            this.ifElseBranchActivity7.Name = "ifElseBranchActivity7";
            // 
            // eventHandlingScopeSendFinalEmail
            // 
            this.eventHandlingScopeSendFinalEmail.Activities.Add(this.sequenceSendFinalEmail);
            this.eventHandlingScopeSendFinalEmail.Activities.Add(this.eventHandlersActivity9);
            this.eventHandlingScopeSendFinalEmail.Name = "eventHandlingScopeSendFinalEmail";
            // 
            // eventHandlingScopeResolveBugAs
            // 
            this.eventHandlingScopeResolveBugAs.Activities.Add(this.sequenceResolveBugAs);
            this.eventHandlingScopeResolveBugAs.Activities.Add(this.eventHandlersActivity6);
            this.eventHandlingScopeResolveBugAs.Name = "eventHandlingScopeResolveBugAs";
            // 
            // wssUpdateModificationContextActivity1
            // 
            activitybind138.Name = "Workflow";
            activitybind138.Path = "ContextData";
            activitybind139.Name = "Workflow";
            activitybind139.Path = "modPageId";
            this.wssUpdateModificationContextActivity1.Name = "wssUpdateModificationContextActivity1";
            this.wssUpdateModificationContextActivity1.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind139)));
            this.wssUpdateModificationContextActivity1.SetBinding(Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind138)));
            // 
            // onWorkflowModified1
            // 
            activitybind140.Name = "Workflow";
            activitybind140.Path = "ContextData";
            correlationtoken47.Name = "modificationTokenApproval";
            correlationtoken47.OwnerActivityName = "eventHandlingScope_PropProcess";
            this.onWorkflowModified1.CorrelationToken = correlationtoken47;
            activitybind141.Name = "Workflow";
            activitybind141.Path = "modPageId";
            this.onWorkflowModified1.Name = "onWorkflowModified1";
            this.onWorkflowModified1.Invoked += new System.EventHandler<System.Workflow.Activities.ExternalDataEventArgs>(this.onWorkflowModified_Invoked);
            this.onWorkflowModified1.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ModificationIdProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind141)));
            this.onWorkflowModified1.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowModified.ContextDataProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind140)));
            // 
            // if_NotDoWeProp_Activity
            // 
            this.if_NotDoWeProp_Activity.Activities.Add(this.if_NotDoWeProp);
            this.if_NotDoWeProp_Activity.Name = "if_NotDoWeProp_Activity";
            // 
            // ifPropApprovalActivity
            // 
            this.ifPropApprovalActivity.Activities.Add(this.ifPropApproval);
            this.ifPropApprovalActivity.Name = "ifPropApprovalActivity";
            // 
            // whileSendEmail
            // 
            this.whileSendEmail.Activities.Add(this.sequenceActivity3);
            ruleconditionreference48.ConditionName = "WhileConditionSendEmail";
            this.whileSendEmail.Condition = ruleconditionreference48;
            this.whileSendEmail.Name = "whileSendEmail";
            // 
            // whileTransferFiles
            // 
            this.whileTransferFiles.Activities.Add(this.sequenceActivity2);
            ruleconditionreference49.ConditionName = "WhileConditionTransferFiles";
            this.whileTransferFiles.Condition = ruleconditionreference49;
            this.whileTransferFiles.Name = "whileTransferFiles";
            // 
            // whileCreateToolsMgmtJob
            // 
            this.whileCreateToolsMgmtJob.Activities.Add(this.eventHandlingScope_CreateToolsMgmtJob);
            ruleconditionreference50.ConditionName = "WhileConditionCreatePropJob";
            this.whileCreateToolsMgmtJob.Condition = ruleconditionreference50;
            this.whileCreateToolsMgmtJob.Name = "whileCreateToolsMgmtJob";
            // 
            // ifElseBranchActivity4
            // 
            this.ifElseBranchActivity4.Activities.Add(this.whilePSBugAttachFiles);
            ruleconditionreference51.ConditionName = "ifPSBugAttachFiles";
            this.ifElseBranchActivity4.Condition = ruleconditionreference51;
            this.ifElseBranchActivity4.Name = "ifElseBranchActivity4";
            // 
            // ifElseBranchActivity1
            // 
            this.ifElseBranchActivity1.Activities.Add(this.PSBugRetryDelay);
            ruleconditionreference52.ConditionName = "ifPSDelay";
            this.ifElseBranchActivity1.Condition = ruleconditionreference52;
            this.ifElseBranchActivity1.Name = "ifElseBranchActivity1";
            // 
            // eventHandlersActivity1
            // 
            this.eventHandlersActivity1.Activities.Add(this.eventDrivenActivity1);
            this.eventHandlersActivity1.Name = "eventHandlersActivity1";
            // 
            // sequencePSBug
            // 
            this.sequencePSBug.Activities.Add(this.PSBug);
            this.sequencePSBug.Activities.Add(this.ifPSBugFailureTask);
            this.sequencePSBug.Name = "sequencePSBug";
            // 
            // eventDrivenActivity2
            // 
            this.eventDrivenActivity2.Activities.Add(this.onWorkflowModifiedInitWorkflow);
            this.eventDrivenActivity2.Activities.Add(this.wssUpdateModificationContextInitWorkflow);
            this.eventDrivenActivity2.Name = "eventDrivenActivity2";
            // 
            // ifInitWorkflowFailTask
            // 
            this.ifInitWorkflowFailTask.Activities.Add(this.ifActivity1);
            this.ifInitWorkflowFailTask.Name = "ifInitWorkflowFailTask";
            // 
            // InitWorkflow
            // 
            this.InitWorkflow.Name = "InitWorkflow";
            this.InitWorkflow.ExecuteCode += new System.EventHandler(this.InitWorkflow_ExecuteCode);
            // 
            // SystemException_Execute
            // 
            this.SystemException_Execute.Name = "SystemException_Execute";
            this.SystemException_Execute.ExecuteCode += new System.EventHandler(this.SystemException_ExecuteCode);
            // 
            // ifAttachRequestXMLDelay
            // 
            this.ifAttachRequestXMLDelay.Activities.Add(this.ifElseBranchActivity6);
            this.ifAttachRequestXMLDelay.Name = "ifAttachRequestXMLDelay";
            // 
            // eventHandlingScopeAttachRequestXML
            // 
            this.eventHandlingScopeAttachRequestXML.Activities.Add(this.sequenceActivity5);
            this.eventHandlingScopeAttachRequestXML.Activities.Add(this.eventHandlersActivity5);
            this.eventHandlingScopeAttachRequestXML.Name = "eventHandlingScopeAttachRequestXML";
            // 
            // ifElseActivity2
            // 
            this.ifElseActivity2.Activities.Add(this.ifElseBranchActivity7);
            this.ifElseActivity2.Name = "ifElseActivity2";
            // 
            // psWorkNotComplete
            // 
            this.psWorkNotComplete.Name = "psWorkNotComplete";
            this.psWorkNotComplete.ExecuteCode += new System.EventHandler(this.psWorkNotComplete_ExecuteCode);
            // 
            // whileSendFinalEmail
            // 
            this.whileSendFinalEmail.Activities.Add(this.eventHandlingScopeSendFinalEmail);
            ruleconditionreference53.ConditionName = "WhileCondSendFinalEmail";
            this.whileSendFinalEmail.Condition = ruleconditionreference53;
            this.whileSendFinalEmail.Name = "whileSendFinalEmail";
            // 
            // whileResolveBugAs
            // 
            this.whileResolveBugAs.Activities.Add(this.eventHandlingScopeResolveBugAs);
            ruleconditionreference54.ConditionName = "WhileCondResolveBugAs";
            this.whileResolveBugAs.Condition = ruleconditionreference54;
            this.whileResolveBugAs.Name = "whileResolveBugAs";
            // 
            // eventDrivenActivity8
            // 
            this.eventDrivenActivity8.Activities.Add(this.onWorkflowModified1);
            this.eventDrivenActivity8.Activities.Add(this.wssUpdateModificationContextActivity1);
            this.eventDrivenActivity8.Name = "eventDrivenActivity8";
            // 
            // sequence_PropProcess
            // 
            this.sequence_PropProcess.Activities.Add(this.whileCreateToolsMgmtJob);
            this.sequence_PropProcess.Activities.Add(this.whileTransferFiles);
            this.sequence_PropProcess.Activities.Add(this.whileSendEmail);
            this.sequence_PropProcess.Activities.Add(this.ifPropApprovalActivity);
            this.sequence_PropProcess.Activities.Add(this.if_NotDoWeProp_Activity);
            this.sequence_PropProcess.Name = "sequence_PropProcess";
            // 
            // ifPSBugAttachFiles
            // 
            this.ifPSBugAttachFiles.Activities.Add(this.ifElseBranchActivity4);
            this.ifPSBugAttachFiles.Name = "ifPSBugAttachFiles";
            // 
            // ifPSBugRetryDelay
            // 
            this.ifPSBugRetryDelay.Activities.Add(this.ifElseBranchActivity1);
            this.ifPSBugRetryDelay.Name = "ifPSBugRetryDelay";
            // 
            // eventHandlingScopePSBug
            // 
            this.eventHandlingScopePSBug.Activities.Add(this.sequencePSBug);
            this.eventHandlingScopePSBug.Activities.Add(this.eventHandlersActivity1);
            this.eventHandlingScopePSBug.Name = "eventHandlingScopePSBug";
            // 
            // eventHandlersActivity2
            // 
            this.eventHandlersActivity2.Activities.Add(this.eventDrivenActivity2);
            this.eventHandlersActivity2.Name = "eventHandlersActivity2";
            // 
            // sequenceInitWorkflow
            // 
            this.sequenceInitWorkflow.Activities.Add(this.InitWorkflow);
            this.sequenceInitWorkflow.Activities.Add(this.ifInitWorkflowFailTask);
            this.sequenceInitWorkflow.Name = "sequenceInitWorkflow";
            // 
            // faultHandlerActivity1
            // 
            this.faultHandlerActivity1.Activities.Add(this.SystemException_Execute);
            this.faultHandlerActivity1.FaultType = typeof(System.Exception);
            this.faultHandlerActivity1.Name = "faultHandlerActivity1";
            // 
            // sequenceActivity4
            // 
            this.sequenceActivity4.Activities.Add(this.eventHandlingScopeAttachRequestXML);
            this.sequenceActivity4.Activities.Add(this.ifAttachRequestXMLDelay);
            this.sequenceActivity4.Name = "sequenceActivity4";
            // 
            // sequenceActivity7
            // 
            this.sequenceActivity7.Activities.Add(this.psWorkNotComplete);
            this.sequenceActivity7.Activities.Add(this.ifElseActivity2);
            this.sequenceActivity7.Name = "sequenceActivity7";
            // 
            // if_DidWeProp
            // 
            this.if_DidWeProp.Activities.Add(this.whileResolveBugAs);
            this.if_DidWeProp.Activities.Add(this.whileSendFinalEmail);
            ruleconditionreference55.ConditionName = "ifCond_DidWeProp";
            this.if_DidWeProp.Condition = ruleconditionreference55;
            this.if_DidWeProp.Name = "if_DidWeProp";
            // 
            // eventHandlersActivity8
            // 
            this.eventHandlersActivity8.Activities.Add(this.eventDrivenActivity8);
            this.eventHandlersActivity8.Name = "eventHandlersActivity8";
            // 
            // whilePropProcess
            // 
            this.whilePropProcess.Activities.Add(this.sequence_PropProcess);
            ruleconditionreference56.ConditionName = "whileCond_PropProcess";
            this.whilePropProcess.Condition = ruleconditionreference56;
            this.whilePropProcess.Name = "whilePropProcess";
            // 
            // sequenceActivity1
            // 
            this.sequenceActivity1.Activities.Add(this.eventHandlingScopePSBug);
            this.sequenceActivity1.Activities.Add(this.ifPSBugRetryDelay);
            this.sequenceActivity1.Activities.Add(this.ifPSBugAttachFiles);
            this.sequenceActivity1.Name = "sequenceActivity1";
            // 
            // cancellationHandlerActivity2
            // 
            this.cancellationHandlerActivity2.Name = "cancellationHandlerActivity2";
            // 
            // eventHandlingScopeInitWorkflow
            // 
            this.eventHandlingScopeInitWorkflow.Activities.Add(this.sequenceInitWorkflow);
            this.eventHandlingScopeInitWorkflow.Activities.Add(this.eventHandlersActivity2);
            this.eventHandlingScopeInitWorkflow.Name = "eventHandlingScopeInitWorkflow";
            // 
            // cancellationHandlerActivity1
            // 
            this.cancellationHandlerActivity1.Name = "cancellationHandlerActivity1";
            // 
            // faultHandlersActivity1
            // 
            this.faultHandlersActivity1.Activities.Add(this.faultHandlerActivity1);
            this.faultHandlersActivity1.Name = "faultHandlersActivity1";
            // 
            // End
            // 
            this.End.Name = "End";
            this.End.ExecuteCode += new System.EventHandler(this.End_ExecuteCode);
            // 
            // whileAttachRequestXMLToBug
            // 
            this.whileAttachRequestXMLToBug.Activities.Add(this.sequenceActivity4);
            ruleconditionreference57.ConditionName = "whileAttachXMLFileToBug";
            this.whileAttachRequestXMLToBug.Condition = ruleconditionreference57;
            this.whileAttachRequestXMLToBug.Name = "whileAttachRequestXMLToBug";
            // 
            // whilePSWorkNotComplete
            // 
            this.whilePSWorkNotComplete.Activities.Add(this.sequenceActivity7);
            ruleconditionreference58.ConditionName = "ConditionWhilePSWorkNotComplete";
            this.whilePSWorkNotComplete.Condition = ruleconditionreference58;
            this.whilePSWorkNotComplete.Name = "whilePSWorkNotComplete";
            // 
            // if_DidWeProp_Activity
            // 
            this.if_DidWeProp_Activity.Activities.Add(this.if_DidWeProp);
            this.if_DidWeProp_Activity.Name = "if_DidWeProp_Activity";
            // 
            // eventHandlingScope_PropProcess
            // 
            this.eventHandlingScope_PropProcess.Activities.Add(this.whilePropProcess);
            this.eventHandlingScope_PropProcess.Activities.Add(this.eventHandlersActivity8);
            this.eventHandlingScope_PropProcess.Name = "eventHandlingScope_PropProcess";
            // 
            // DeterminePropState
            // 
            this.DeterminePropState.Name = "DeterminePropState";
            this.DeterminePropState.ExecuteCode += new System.EventHandler(this.DeterminePropState_ExecuteCode);
            // 
            // whilePSBug
            // 
            this.whilePSBug.Activities.Add(this.sequenceActivity1);
            ruleconditionreference59.ConditionName = "WhileConditionPSBug";
            this.whilePSBug.Condition = ruleconditionreference59;
            this.whilePSBug.Name = "whilePSBug";
            // 
            // whileInitWorkflow
            // 
            this.whileInitWorkflow.Activities.Add(this.eventHandlingScopeInitWorkflow);
            this.whileInitWorkflow.Activities.Add(this.cancellationHandlerActivity2);
            ruleconditionreference60.ConditionName = "WhileConditionInitWorkflow";
            this.whileInitWorkflow.Condition = ruleconditionreference60;
            this.whileInitWorkflow.Name = "whileInitWorkflow";
            // 
            // onWorkflowActivated
            // 
            correlationtoken48.Name = "WorkflowToken";
            correlationtoken48.OwnerActivityName = "Workflow";
            this.onWorkflowActivated.CorrelationToken = correlationtoken48;
            this.onWorkflowActivated.EventName = "OnWorkflowActivated";
            this.onWorkflowActivated.Name = "onWorkflowActivated";
            activitybind142.Name = "Workflow";
            activitybind142.Path = "workflowProperties";
            this.onWorkflowActivated.SetBinding(Microsoft.SharePoint.WorkflowActions.OnWorkflowActivated.WorkflowPropertiesProperty, ((System.Workflow.ComponentModel.ActivityBind)(activitybind142)));
            // 
            // Workflow
            // 
            this.Activities.Add(this.onWorkflowActivated);
            this.Activities.Add(this.whileInitWorkflow);
            this.Activities.Add(this.whilePSBug);
            this.Activities.Add(this.DeterminePropState);
            this.Activities.Add(this.eventHandlingScope_PropProcess);
            this.Activities.Add(this.if_DidWeProp_Activity);
            this.Activities.Add(this.whilePSWorkNotComplete);
            this.Activities.Add(this.whileAttachRequestXMLToBug);
            this.Activities.Add(this.End);
            this.Activities.Add(this.faultHandlersActivity1);
            this.Activities.Add(this.cancellationHandlerActivity1);
            this.Name = "Workflow";
            this.CanModifyActivities = false;

		}

		#endregion

        private Microsoft.SharePoint.WorkflowActions.CreateTask createTask;
        private IfElseBranchActivity if_NotDoWeProp;
        private IfElseActivity if_NotDoWeProp_Activity;
        private CodeActivity SetPropProcessFalse;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModification_ResolveBugAs;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModification_SendFinalEmail;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContext_SendFinalEmail;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModified_SendFinalEmail;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContext_ResolveBugAs;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModified_ResolveBugAs;
        private EventDrivenActivity eventDrivenActivity9;
        private EventDrivenActivity eventDrivenActivity6;
        private EventHandlersActivity eventHandlersActivity9;
        private EventHandlersActivity eventHandlersActivity6;
        private EventHandlingScopeActivity eventHandlingScope_PropProcess;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onPropRequestFailureTaskChanged;
        private WhileActivity whilePropRequestFailure;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onPropRequestFailureTaskCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createPropRequestFailureTask;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity DelayForPropRequestFailure;
        private IfElseBranchActivity ifPropRequestFailureTask;
        private IfElseBranchActivity ifPropRequestFailureDelay;
        private IfElseActivity ifPropRequestFailureTaskActivity;
        private IfElseActivity ifPropRequestFailureDelayActivity;
        private EventHandlingScopeActivity eventHandlingScopePropFailure;
        private CodeActivity PropRequest;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity DelayBeforeProp;
        private IfElseBranchActivity ifTimeToProp;
        private IfElseBranchActivity ifNotTimeToProp;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity DelayForPropResultsCheck;
        private IfElseActivity ifPropActivity;
        private CodeActivity ComputePropDelay;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity FileCheckDelay;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onPropResultsFailureTaskChanged;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged on_ApprovalTask_ChangedUpdate2;
        private IfElseBranchActivity ifPropResultsCheckNotComplete;
        private IfElseBranchActivity ifPropApproved;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onApprovalTaskChanged;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onFailureTaskSendEmailChanged;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onFailureTaskTransferFilesChanged;
        private IfElseBranchActivity ifElseBranchActivity8;
        private Microsoft.SharePoint.WorkflowActions.UpdateTask updateApprovalTask_Status;
        private ConditionedActivityGroup PropFailureCAG;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onPropResultsFailureTaskCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createPropResultsFailureTask;
        private IfElseActivity ifPropResultsCheckNotComplete_Activity;
        private CodeActivity PropResult;
        private IfElseActivity ifPropApprovedActivity;
        private WhileActivity whileWaitingForApproval;
        private Microsoft.SharePoint.WorkflowActions.CreateTaskWithContentType createApprovalTask;
        private WhileActivity whileSendEmailFailure;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationSendEmail;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onFailureTaskSendEmailCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createFailureTaskSendEmail;
        private WhileActivity whileTransferFilesFailure;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationTransferFiles;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onFailTaskTransferFilesCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createFailureTaskTransferFiles;
        private IfElseActivity ifTransferFilesCheckDelay;
        private CodeActivity TransferFiles;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged on_CreateToolsMgmtJob_FailureTask_Changed;
        private IfElseBranchActivity ifPropProcessSucceeded;
        private IfElseBranchActivity ifPropResultsFailed;
        private SequenceActivity sequencePropResultCheck;
        private SequenceActivity sequencePropApproved;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onApprovalTaskChanged_Update;
        private IfElseBranchActivity if_PropFirstTime2;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextSendEmail;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModifiedSendEmail;
        private IfElseBranchActivity ifActivity4;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextTransferFiles;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModifiedTransferFiles;
        private IfElseBranchActivity ifActivity3;
        private SequenceActivity sequenceActivity6;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity delayFor_CreateToolsMgmtJob_Failure;
        private WhileActivity while_CreateToolsMgmtJob_Failed;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModification_CreateToolsMgmtJob;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated on_CreateToolsMgmtJob_FailureTask_Created;
        private Microsoft.SharePoint.WorkflowActions.CreateTask create_CreateToolsMgmtJob_FailureTask;
        private IfElseActivity if_PropProcessSucceeded_Activity;
        private IfElseActivity ifPropResultsFailed_Activity;
        private WhileActivity whilePropResultCheck;
        private ConditionedActivityGroup ApprovalAndPropCAG;
        private IfElseActivity if_PropFirstTime_Activity2;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationApproval;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity SendEmailRetryDelay;
        private EventDrivenActivity eventDrivenActivity4;
        private IfElseActivity ifSendEmailFailureTask;
        private CodeActivity SendMail;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity TransferFilesRetryDelay;
        private EventDrivenActivity eventDrivenActivity3;
        private IfElseActivity ifTransferFilesFailTask;
        private CodeActivity TransferFilesVerify;
        private WhileActivity whileTransferFilesProcess;
        private CodeActivity TransferFilesInit;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContext_CreateToolsMgmtJob;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModified_CreateToolsMgmtJob;
        private IfElseBranchActivity if_CreateToolsMgmtJob_Failure;
        private IfElseBranchActivity if_CreateToolsMgmtJob_Failed;
        private IfElseBranchActivity ifPropApproval;
        private IfElseBranchActivity ifElseBranchActivity3;
        private EventHandlersActivity eventHandlersActivity4;
        private SequenceActivity sequenceSendEmail;
        private IfElseBranchActivity ifElseBranchActivity2;
        private EventHandlersActivity eventHandlersActivity3;
        private SequenceActivity sequenceTransferFiles;
        private EventDrivenActivity eventDrivenActivity7;
        private IfElseActivity if_CreateToolsMgmtJob_Failure_Activity;
        private IfElseActivity if_CreateToolsMgmtJob_Failed_Activity;
        private CodeActivity CreateToolsMgmtJob;
        private IfElseActivity ifPropApprovalActivity;
        private IfElseActivity ifSendEmailRetryDelay;
        private EventHandlingScopeActivity eventHandlingScopeSendEmail;
        private IfElseActivity ifTransferFilesRetryDelay;
        private EventHandlingScopeActivity eventHandlingScopeTransferFiles;
        private EventHandlersActivity eventHandlersActivity7;
        private SequenceActivity sequence_CreateToolsMgmtJob;
        private SequenceActivity sequenceActivity3;
        private SequenceActivity sequenceActivity2;
        private EventHandlingScopeActivity eventHandlingScope_CreateToolsMgmtJob;
        private WhileActivity whileSendEmail;
        private WhileActivity whileTransferFiles;
        private WhileActivity whileCreateToolsMgmtJob;
        private SequenceActivity sequence_PropProcess;
        private EventHandlingScopeActivity eventHandlingScope_PropResults;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextActivity1;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModified1;
        private EventDrivenActivity eventDrivenActivity8;
        private EventHandlersActivity eventHandlersActivity8;
        private IfElseBranchActivity if_DidWeProp;
        private IfElseActivity if_DidWeProp_Activity;
        private WhileActivity whilePropProcess;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onSendFinalEmailFailureTaskChanged;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity delayForActivity4;
        private WhileActivity whileSendFinalEmailFailed;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onSendFinalEmailFailureTaskCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createSendFinalEmailFailureTask;
        private IfElseBranchActivity ifElseBranchActivity11;
        private IfElseBranchActivity ifSendFinalEmailFailed;
        private IfElseActivity ifElseActivity3;
        private IfElseActivity ifSendFinalEmailFailed_Activity;
        private CodeActivity SendFinalEmail;
        private SequenceActivity sequenceSendFinalEmail;
        private EventHandlingScopeActivity eventHandlingScopeSendFinalEmail;
        private WhileActivity whileSendFinalEmail;
        private CodeActivity DeterminePropState;
        private WhileActivity whileResolveBugAs;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onTaskResolveBugAsFailed;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity delayForActivity2;
        private WhileActivity whileResolveBugAsFailed;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onTaskResolveBugAsFailedCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createTaskResolveBugAsFailed;
        private IfElseBranchActivity ifResolveBugAsDelay;
        private IfElseBranchActivity ifResolveBugAsFailed;
        private IfElseActivity ifResolveBugAsDelayActivity;
        private IfElseActivity ifResolveBugAsFailedActivity;
        private SequenceActivity sequenceResolveBugAs;
        private EventHandlingScopeActivity eventHandlingScopeResolveBugAs;
        private CodeActivity ResolveBugAs;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onFailureTaskAttachRequestXMLChanged;
        private WhileActivity whileAttachRequestXMLFailure;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationAttachRequestXML;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onFailureTaskAttachRequestXMLCreated;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createFailureTaskAttachRequestXML;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextAttachRequestXML;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModifiedAttachRequestXML;
        private IfElseBranchActivity ifElseBranchActivity9;
        private EventDrivenActivity eventDrivenActivity5;
        private IfElseActivity ifRequestXMLFailureTask;
        private EventHandlersActivity eventHandlersActivity5;
        private SequenceActivity sequenceActivity5;
        private EventHandlingScopeActivity eventHandlingScopeAttachRequestXML;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity delayForActivity1;
        private IfElseBranchActivity ifElseBranchActivity6;
        private IfElseActivity ifAttachRequestXMLDelay;
        private CodeActivity AttachRequestXMLToBug;
        private SequenceActivity sequenceActivity4;
        private WhileActivity whileAttachRequestXMLToBug;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity delayForActivity3;
        private IfElseBranchActivity ifElseBranchActivity7;
        private IfElseActivity ifElseActivity2;
        private SequenceActivity sequenceActivity7;
        private CodeActivity psWorkNotComplete;
        private WhileActivity whilePSWorkNotComplete;
        private CancellationHandlerActivity cancellationHandlerActivity3;
        private CancellationHandlerActivity cancellationHandlerActivity2;
        private IfElseBranchActivity ifElseBranchActivity4;
        private IfElseActivity ifPSBugAttachFiles;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity PSAttachFilesDelay;
        private IfElseBranchActivity ifElseBranchActivity5;
        private IfElseActivity ifPSBugAttachFilesDelay;
        private CodeActivity PSBugAttachFiles;
        private SequenceActivity sequencePSBugAttachFiles;
        private WhileActivity whilePSBugAttachFiles;
        private SequenceActivity sequenceActivity1;
        private Microsoft.SharePoint.WorkflowActions.DelayForActivity PSBugRetryDelay;
        private IfElseBranchActivity ifElseBranchActivity1;
        private IfElseActivity ifPSBugRetryDelay;
        private EventDrivenActivity eventDrivenActivity1;
        private EventHandlersActivity eventHandlersActivity1;
        private EventHandlingScopeActivity eventHandlingScopePSBug;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextInitWorkflow;
        private EventDrivenActivity eventDrivenActivity2;
        private EventHandlersActivity eventHandlersActivity2;
        private EventHandlingScopeActivity eventHandlingScopeInitWorkflow;
        private Microsoft.Office.Samples.ECM.Activities.WSSUpdateModificationContextActivity wssUpdateModificationContextPSBug;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModifiedInitWorkflow;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationInitWorkflow;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowModified onWorkflowModifiedPSBug;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onFailTaskInitWorkflowCreated;
        private Microsoft.SharePoint.WorkflowActions.OnTaskCreated onFailTaskPSBugCreated;
        private Microsoft.SharePoint.WorkflowActions.EnableWorkflowModification enableWorkflowModificationPSBug;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onFailureTaskPSBug;
        private WhileActivity whilePSBugFailure;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createFailureTaskPSBug;
        private IfElseBranchActivity ifActivity2;
        private IfElseActivity ifPSBugFailureTask;
        private SequenceActivity sequencePSBug;
        private WhileActivity whilePSBug;
        private CodeActivity End;
        private Microsoft.SharePoint.WorkflowActions.CreateTask createFailureTaskInitWorkflow;
        private IfElseBranchActivity ifActivity1;
        private IfElseActivity ifInitWorkflowFailTask;
        private SequenceActivity sequenceInitWorkflow;
        private WhileActivity whileInitWorkflow;
        private Microsoft.SharePoint.WorkflowActions.OnTaskChanged onFailTask_InitWorkflow_Changed;
        private WhileActivity whileInitWorkflowFailed;
        private CodeActivity SystemException_Execute;
        private FaultHandlerActivity faultHandlerActivity1;
        private CodeActivity InitWorkflow;
        private CancellationHandlerActivity cancellationHandlerActivity1;
        private FaultHandlersActivity faultHandlersActivity1;
        private CodeActivity PSBug;
        private Microsoft.SharePoint.WorkflowActions.OnWorkflowActivated onWorkflowActivated;



























































































    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerWebService\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerWebService\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerWorkflow\PropManagerWorkflow\Web References\XlTrans\Reference.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace PropManagerWorkflow.XlTrans {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="XlTransSoap", Namespace="http://tempuri.org/")]
    public partial class XlTrans : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TransferFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransferStatusExOperationCompleted;
        
        private System.Threading.SendOrPostCallback JobTransferFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransferStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XlTrans() {
            this.Url = global::PropManagerWorkflow.Properties.Settings.Default.PropManagerWorkflow_XLTrans_XlTrans;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TransferFileCompletedEventHandler TransferFileCompleted;
        
        /// <remarks/>
        public event GetTransferStatusExCompletedEventHandler GetTransferStatusExCompleted;
        
        /// <remarks/>
        public event JobTransferFileCompletedEventHandler JobTransferFileCompleted;
        
        /// <remarks/>
        public event GetTransferStatusCompletedEventHandler GetTransferStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long TransferFile(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath) {
            object[] results = this.Invoke("TransferFile", new object[] {
                        sourceEndpoint,
                        sourceFilePath,
                        destEndpoint,
                        destFilePath});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void TransferFileAsync(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath) {
            this.TransferFileAsync(sourceEndpoint, sourceFilePath, destEndpoint, destFilePath, null);
        }
        
        /// <remarks/>
        public void TransferFileAsync(string sourceEndpoint, string sourceFilePath, string destEndpoint, string destFilePath, object userState) {
            if ((this.TransferFileOperationCompleted == null)) {
                this.TransferFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFileOperationCompleted);
            }
            this.InvokeAsync("TransferFile", new object[] {
                        sourceEndpoint,
                        sourceFilePath,
                        destEndpoint,
                        destFilePath}, this.TransferFileOperationCompleted, userState);
        }
        
        private void OnTransferFileOperationCompleted(object arg) {
            if ((this.TransferFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFileCompleted(this, new TransferFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransferStatusEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransferStatus GetTransferStatusEx(long transferId) {
            object[] results = this.Invoke("GetTransferStatusEx", new object[] {
                        transferId});
            return ((TransferStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransferStatusExAsync(long transferId) {
            this.GetTransferStatusExAsync(transferId, null);
        }
        
        /// <remarks/>
        public void GetTransferStatusExAsync(long transferId, object userState) {
            if ((this.GetTransferStatusExOperationCompleted == null)) {
                this.GetTransferStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransferStatusExOperationCompleted);
            }
            this.InvokeAsync("GetTransferStatusEx", new object[] {
                        transferId}, this.GetTransferStatusExOperationCompleted, userState);
        }
        
        private void OnGetTransferStatusExOperationCompleted(object arg) {
            if ((this.GetTransferStatusExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransferStatusExCompleted(this, new GetTransferStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/JobTransferFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long JobTransferFile(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath) {
            object[] results = this.Invoke("JobTransferFile", new object[] {
                        srcRootID,
                        srcFilePath,
                        dstRootID,
                        jobId,
                        dstFilePath});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void JobTransferFileAsync(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath) {
            this.JobTransferFileAsync(srcRootID, srcFilePath, dstRootID, jobId, dstFilePath, null);
        }
        
        /// <remarks/>
        public void JobTransferFileAsync(string srcRootID, string srcFilePath, string dstRootID, long jobId, string dstFilePath, object userState) {
            if ((this.JobTransferFileOperationCompleted == null)) {
                this.JobTransferFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJobTransferFileOperationCompleted);
            }
            this.InvokeAsync("JobTransferFile", new object[] {
                        srcRootID,
                        srcFilePath,
                        dstRootID,
                        jobId,
                        dstFilePath}, this.JobTransferFileOperationCompleted, userState);
        }
        
        private void OnJobTransferFileOperationCompleted(object arg) {
            if ((this.JobTransferFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JobTransferFileCompleted(this, new JobTransferFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransferStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransferState GetTransferStatus(long transferId) {
            object[] results = this.Invoke("GetTransferStatus", new object[] {
                        transferId});
            return ((TransferState)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransferStatusAsync(long transferId) {
            this.GetTransferStatusAsync(transferId, null);
        }
        
        /// <remarks/>
        public void GetTransferStatusAsync(long transferId, object userState) {
            if ((this.GetTransferStatusOperationCompleted == null)) {
                this.GetTransferStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransferStatusOperationCompleted);
            }
            this.InvokeAsync("GetTransferStatus", new object[] {
                        transferId}, this.GetTransferStatusOperationCompleted, userState);
        }
        
        private void OnGetTransferStatusOperationCompleted(object arg) {
            if ((this.GetTransferStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransferStatusCompleted(this, new GetTransferStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TransferStatus {
        
        private TransferState stateField;
        
        private int errorcodeField;
        
        private string messageField;
        
        /// <remarks/>
        public TransferState state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int errorcode {
            get {
                return this.errorcodeField;
            }
            set {
                this.errorcodeField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum TransferState {
        
        /// <remarks/>
        NotFound,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Complete,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void TransferFileCompletedEventHandler(object sender, TransferFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTransferStatusExCompletedEventHandler(object sender, GetTransferStatusExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransferStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransferStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransferStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransferStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void JobTransferFileCompletedEventHandler(object sender, JobTransferFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JobTransferFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JobTransferFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void GetTransferStatusCompletedEventHandler(object sender, GetTransferStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransferStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransferStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransferState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransferState)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\ApiCheck.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using xonline.server.webcache.common;

namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// APICheck utility class to do partner validation.
    /// </summary>
    public class APICheck
    {
        private static APICheck apiCheckinstance = new APICheck();
        private Utilities apiCheckUtility = Utilities.Instance;
        private bool performAPICheck = true;
        private APICheck() { }
        /// <summary>
        /// Singleton instance of APICheck Class
        /// </summary>
        public static APICheck Instance
        {
            get 
            {
                return apiCheckinstance;
            }
        }
        /// <summary>
        /// Gets/Sets the PerformAPICheck Flag.Setting to false will result in NO-OP
        /// </summary>
        public bool PerformAPICheck
        {
            get 
            {
                return performAPICheck;
            }
            set
            {
                performAPICheck = value;
            }
        }
        /// <summary>
        /// Performs API Check for given API Name
        /// </summary>
        /// <param name="apiName"></param>
        public void CheckAPI(string apiName)
        {
            if (performAPICheck)
            {
                apiCheckUtility.CheckAPI(apiName);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\cache.cs ===
using System;
using System.Collections.Generic;
using System.Threading;
  
namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// Server Side Cache Class Implementing IIdentifiable
    /// </summary>
    public class Cache<T,U> where T : IIdentifiable<U>
    {
        /// <summary>
        /// Definition of the delegate which will be used for retrieving the data.
        /// It must return some type that implements the 'Generic.IEnumerable' interface.
        /// This can include (but is not limited to) the array type, the List<U> type etc.
        /// </summary>
        public delegate IEnumerable<T> CacheDataRetrievalDelegate();

        private CacheDataRetrievalDelegate dataSource;
        private TimeSpan refreshPeriod;
        private Object lockObject;
        private CachedDataHolder<T,U> data = null;

        private static readonly TimeSpan SmallestRefreshPeriod = new TimeSpan( 0, 0, 1 );
        private static readonly TimeSpan ZeroLengthPeriod = new TimeSpan( 0, 0, 0 );

        /// <summary>
        /// Creates an instance of the cache.
        /// </summary>
        /// <param name="dataSource">A delegate which is used to retrieve the data</param>
        /// <param name="refreshPeriod">The max length of time the data can remain in the cache before being purged.</param>
        public Cache ( CacheDataRetrievalDelegate dataSource, TimeSpan refreshPeriod )
        {
            if ( dataSource == null )
            {
                throw new ArgumentNullException( "The method specified for populating the data was null. This cannot be." );
            }

            if ( refreshPeriod < SmallestRefreshPeriod )
            {
                throw new ArgumentException( "The cache refresh period must be greater than one second." );
            }
            
            this.dataSource = dataSource;
            this.refreshPeriod = refreshPeriod;
            this.data = null;
            lockObject = new Object();
        }

        /// <summary>
        /// Returns the instance of the data type identified by a key
        /// </summary>
        public T Get( U key )
        {
            try
            {
                return GetCachedData().KeyedCollection[key];
            }
            catch( KeyNotFoundException  )
            {
                return default(T);
            }
        }

        /// <summary>
        /// Returns a list of all the instances of the data type
        /// </summary>
        public List<T> Get()
        {
            return GetCachedData().SortedList;
        }

        /// <summary>
        /// Causes the cached data, if any, to be refreshed
        /// </summary>
        public void Refresh()
        {
            lock( lockObject )
            {
                if ( data != null )
                {
                    data = null;
                }
                GetCachedData();
            }
        }

        protected virtual CachedDataHolder<T,U> GetCachedData()
        {
            // First thing to do is, atomically, get a reference to the current data object
            // The reason that we want our own reference is that the cache timer could null the
            // value of 'data' between our check for not null and when we return data (At this
            // point, we are not within the critical section, so other threads can interfere). This
            // way, we get our own reference - even if the timer nulls out 'data' we still 
            // have a reference that is valid for us to return.
            CachedDataHolder<T,U> currentCachedDataHolder = data;
            if ( currentCachedDataHolder == null )
            {
                lock( lockObject )
                {
                    // We are now serialised - only one thread at a time.
                    if ( data == null )
                    {
                        // Attempt to invoke the delegate. If this throws an exception, the variable
                        // 'data' will be left in its null state. So the next thread through will 
                        // hit the same problem.
                        IEnumerable<T> newlyRetrievedData = dataSource();

                        // Setup the object wichich holds the keyed lists and set the 'data'
                        // pointer to this new object
                        data = CacheData(newlyRetrievedData);

                        // setup the timer to destroy object
                        Timer timer = new Timer( delegate( Object state ) { lock( lockObject ){ data = null; }},  // callback - anonymous
                                                        null,
                                                        refreshPeriod,
                                                        ZeroLengthPeriod );
                    }
                    else
                    {
                        // Some other thread beat us into the critical section and has set
                        // the data object for us. Since we are in the critical section, we are gaurenteed
                        // that between our test and this point, no other thread can interfere with 'data'
                        // so, we can safely execute the next statement.
                    }

                    // Set the return variable
                    currentCachedDataHolder = data;
                }
            }
            return currentCachedDataHolder;
        }
        /// <summary>
        /// Cache Data method to Cache the Data
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        protected virtual CachedDataHolder<T,U> CacheData( IEnumerable<T> data )
        {
            return new CachedDataHolder<T,U>( data );
        }
        /// <summary>
        /// Generic CacheData Holder Class with Type of the Object and Type of Primary Key
        /// </summary>
        /// <typeparam name="DATA_TYPE"></typeparam>
        /// <typeparam name="KEY_TYPE"></typeparam>
        protected class CachedDataHolder<DATA_TYPE,KEY_TYPE> where DATA_TYPE: IIdentifiable<KEY_TYPE>
        {
            protected Dictionary<KEY_TYPE,DATA_TYPE> keyedCollection;
            protected List<DATA_TYPE> sortedList;

            public Dictionary<KEY_TYPE,DATA_TYPE> KeyedCollection
            {
                get { return keyedCollection; }
            }
            /// <summary>
            /// Sorted List which consists of All the Elements of Type DATA_TYPE
            /// </summary>
            public List<DATA_TYPE> SortedList
            {
                get { return sortedList; }
            }
            /// <summary>
            /// Empty Constructor
            /// </summary>
            public CachedDataHolder()
            { 
            }
            /// <summary>
            /// CacheDataholder Constructor which accepts IEnumerable and builds the Primarykeyed collection
            /// </summary>
            /// <param name="data"></param>
            public CachedDataHolder( IEnumerable<DATA_TYPE> data )
            {
                List<DATA_TYPE> newList = new List<DATA_TYPE>();
                Dictionary<KEY_TYPE,DATA_TYPE> newDictionary = new Dictionary<KEY_TYPE,DATA_TYPE>();
                foreach( DATA_TYPE element in data )
                {
                    newList.Add( element );
                    newDictionary.Add(element.PrimaryId, element);
                }

                sortedList = newList;
                keyedCollection = newDictionary;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerWebService\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("PropManagerWebService")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MS")]
[assembly: AssemblyProduct("PropManagerWebService")]
[assembly: AssemblyCopyright("Copyright © MS 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3d5900ae-111a-45be-96b3-d9e4606ca793")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\EnumeratorWrapper.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

namespace Microsoft.Ems.Common.Utils
{
    public class EnumeratorWrapper<T> : IEnumerable<T>
    {
        private IEnumerable<T> enumerator;
        public EnumeratorWrapper(IEnumerable<T> enumerator)
        {
            if (enumerator == null)
            {
                throw new ArgumentNullException("enumerator");
            }
            this.enumerator = enumerator;
        }
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return enumerator.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return enumerator.GetEnumerator();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\CheckAPIExtension.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Protocols;
using xonline.server.webcache.common;
using System.IO;

namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// SOAP Extension class to check the API Access privileges
    /// </summary>
    public class CheckApiExtension : SoapExtension
    {

        string apiName = string.Empty;
        /// <summary>
        /// Overridden implementation of GetInitializer.Returns the APIName
        /// </summary>
        /// <param name="methodInfo"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)
        {
            return ((CheckApiExtensionAttribute)attribute).APIName;
        }
        /// <summary>
        /// allocate the APIName into a string variable
        /// </summary>
        /// <param name="initializer"></param>
        public override void Initialize(object initializer)
        {
            apiName = (string)initializer;
        }
        /// <summary>
        /// return null. The is a method level extension and not configured in .config file
        /// </summary>
        /// <param name="serviceType"></param>
        /// <returns></returns>
        public override object GetInitializer(System.Type serviceType)
        {
            return null;
        }
        /// <summary>
        /// Check for API access just before deserialization
        /// </summary>
        /// <param name="message"></param>
        public override void ProcessMessage(SoapMessage message)
        {
            if (message.Stage == SoapMessageStage.BeforeDeserialize)
            {
                APICheck.Instance.CheckAPI(apiName);
            }
        }
    }
    /// <summary>
    /// Checkapiextension Attribute class.The class defines the API name and defaults it to ContentIngestionService.ALL
    /// This is a method level attribute
    /// </summary>
    [AttributeUsage(AttributeTargets.Method)]
    public class CheckApiExtensionAttribute : SoapExtensionAttribute
    {
        private string apiName = "ContentIngestionService.ALL";
        private int priority;
        /// <summary>
        /// Gets/Sets the APIName. Default to "ContentIngestionService.ALL"
        /// </summary>
        public string APIName
        {
            get
            {
                return apiName;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                    apiName = value;
            }
        }
        /// <summary>
        /// Return the extensiontype this attribute caters to.
        /// </summary>
        public override Type ExtensionType
        {
            get { return typeof(CheckApiExtension); }
        }
        public override int Priority
        {
            get { return priority; }
            set { priority = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\dualkeycache.cs ===
using System;
using System.Collections.Generic;
using System.Threading;
  
namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// Generic Dual key Cache Class Inheriting form Cache
    /// </summary>
    public class DualKeyCache<T,PRIMAY_KEY_TYPE,SECONDARY_KEY_TYPE> : Cache<T,PRIMAY_KEY_TYPE> where T : IDualKeyIdentifiable<PRIMAY_KEY_TYPE,SECONDARY_KEY_TYPE>
    {

        /// <summary>
        /// Creates an instance of the cache.
        /// </summary>
        /// <param name="dataSource">A delegate which is used to retrieve the data</param>
        /// <param name="refreshPeriod">The max length of time the data can remain in the cache before being purged.</param>
        public DualKeyCache ( CacheDataRetrievalDelegate dataSource, TimeSpan refreshPeriod )
            :base( dataSource, refreshPeriod )
        {
        }

        /// <summary>
        /// Returns the instance of the data type identified by a Secondary key
        /// </summary>
        public List<T> GetBySecondaryKey( SECONDARY_KEY_TYPE key )
        {
            try
            {
                return ((DualKeyCachedDataHolder<T, PRIMAY_KEY_TYPE, SECONDARY_KEY_TYPE>)GetCachedData()).SecondaryKeyedCollection[key];
            }
            catch (KeyNotFoundException)
            {
                return default(List<T>);
            }
        }
        /// <summary>
        /// Overridden Implemantation of CacheData method
        /// </summary>
        /// <param name="data"></param>
        /// <returns>Generic DualKeyCacheDataHolder</returns>
        protected override CachedDataHolder<T,PRIMAY_KEY_TYPE> CacheData( IEnumerable<T> data )
        {
            return new DualKeyCachedDataHolder<T, PRIMAY_KEY_TYPE, SECONDARY_KEY_TYPE>(data);
        }
        /// <summary>
        /// Generic DualKeyCachedDataHolder
        /// </summary>
        /// <typeparam name="CACHEHOLDER_TYPE"></typeparam>
        /// <typeparam name="CACHEHOLDER_PRIMAY_KEY_TYPE"></typeparam>
        /// <typeparam name="CACHEHOLDER_SECONDARY_KEY_TYPE"></typeparam>
        protected class DualKeyCachedDataHolder<CACHEHOLDER_TYPE, CACHEHOLDER_PRIMAY_KEY_TYPE, CACHEHOLDER_SECONDARY_KEY_TYPE> : CachedDataHolder<CACHEHOLDER_TYPE, CACHEHOLDER_PRIMAY_KEY_TYPE> where CACHEHOLDER_TYPE : IDualKeyIdentifiable<CACHEHOLDER_PRIMAY_KEY_TYPE, CACHEHOLDER_SECONDARY_KEY_TYPE>
        {
            private Dictionary<CACHEHOLDER_SECONDARY_KEY_TYPE, List<CACHEHOLDER_TYPE>> secondaryKeyedCollection;

            /// <summary>
            /// Gets the dictionary of object for Secondary Key
            /// </summary>
            public Dictionary<CACHEHOLDER_SECONDARY_KEY_TYPE, List<CACHEHOLDER_TYPE>> SecondaryKeyedCollection
            {
                get { return secondaryKeyedCollection; }
            }
            /// <summary>
            /// DualKeyCached Holder accepting a Generic Inumerable.
            /// This constructor also builds the CacheList,PrimaryKeyedCache and SecondaryKeyedCache
            /// </summary>
            /// <param name="data"></param>
            public DualKeyCachedDataHolder(IEnumerable<CACHEHOLDER_TYPE> data)
            {
                List<CACHEHOLDER_TYPE> newList = new List<CACHEHOLDER_TYPE>();
                Dictionary<CACHEHOLDER_PRIMAY_KEY_TYPE, CACHEHOLDER_TYPE> newPrimaryDictionary = new Dictionary<CACHEHOLDER_PRIMAY_KEY_TYPE, CACHEHOLDER_TYPE>();
                Dictionary<CACHEHOLDER_SECONDARY_KEY_TYPE, List<CACHEHOLDER_TYPE>> newSecondaryDictionary = new Dictionary<CACHEHOLDER_SECONDARY_KEY_TYPE, List<CACHEHOLDER_TYPE>>();
                List<CACHEHOLDER_TYPE> persistentList = null;
                foreach (CACHEHOLDER_TYPE element in data)
                {
                    newList.Add(element);
                    newPrimaryDictionary.Add(element.PrimaryId, element);
                    if (!newSecondaryDictionary.ContainsKey(element.SecondaryId))
                    {
                        persistentList = new List<CACHEHOLDER_TYPE>();
                        persistentList.Add(element);
                        newSecondaryDictionary.Add(element.SecondaryId, persistentList);
                    }
                    else
                    {
                        persistentList = newSecondaryDictionary[element.SecondaryId] as List<CACHEHOLDER_TYPE>;
                        persistentList.Add(element);
                    }
                }

                // Set the collections in the base class
                sortedList = newList;
                keyedCollection = newPrimaryDictionary;

                // Set the collection in this class
                secondaryKeyedCollection = newSecondaryDictionary;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerWebService\app_code\PropManagerWebservice.asmx.cs ===
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Caching;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Security;
using System.Collections.Generic;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Threading;
using System.Xml.Serialization;
using System.Xml;
using System.IO;
using System.Web.Mail;
using System.Workflow.Runtime;
using ProductStudio;
using System.Text.RegularExpressions;
using Microsoft.SharePoint;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;
using PropManagerRequest;
using System.Diagnostics;
using System.Collections;
using System.Web.SessionState;
using System.Data.SqlClient;
using System.Text;
namespace PropMgrWebService
{
    public class WebConfigException : System.ApplicationException
    {
        public WebConfigException(string message) : base(message) { }
    }
    public class NotAllowedException : System.ApplicationException
    {
        public NotAllowedException(string message) : base(message) { }
    }
    public class XemidFormatException : System.ApplicationException
    {
        public XemidFormatException(string message) : base(message) { }
    }
    public class CertificationStageException : System.ApplicationException
    {
        public CertificationStageException(string message) : base(message) { }
    }
    public class ResolveToException : System.ApplicationException
    {
        public ResolveToException(string message) : base(message) { }
    }

    public class EnvironmentException : System.ApplicationException
    {
        public EnvironmentException(string message) : base(message) { }
    }

    //public class BugIDException : System.ApplicationException
    //{
    //    public BugIDException(string message) : base(message) { }
    //}

    public class PsPriorityException : System.ApplicationException
    {
        public PsPriorityException(string message) : base(message) { }
    }
    public class ReqPropDateTimeException : System.ApplicationException
    {
        public ReqPropDateTimeException(string message) : base(message) { }
    }
    public class CCEmailException : System.ApplicationException
    {
        public CCEmailException(string message) : base(message) { }
    }

    public class FolderNotFoundException : System.ApplicationException
    {
        public FolderNotFoundException(string message) : base(message) { }
    }
    public class BaseVersionException : System.ApplicationException
    {
        public BaseVersionException(string message) : base(message) { }
    }
    public class XlastFileException : System.ApplicationException
    {
        public XlastFileException(string message) : base(message) { }
    }

    public class TitleIdException : System.ApplicationException
    {
        public TitleIdException(string message) : base(message) { }
    }
    public class BugIDException : System.ApplicationException
    {
        public BugIDException(string message) : base(message) { }
    }
    public class SubIdException : System.ApplicationException
    {
        public SubIdException(string message) : base(message) { }
    }
    public enum RequestStatus
    {
        NotStarted = 0,
        FailedOnStart = 1,
        InProgress = 2,
        ErrorOccurred = 3,
        StoppedByUser = 4,
        Completed = 5,
        FailedOnStartRetrying = 6,
        ErrorOccurredRetrying = 7,
        ViewQueryOverflow = 8,
        Max = 15,
        DoesNotExists = 16,



    }
    public enum VersionType
    {
        Xenon360,
        PCPanorama,
        Xbox1
    }
    public enum CertStage
    {
        NA,
        Xbox360Final,
        Xbox360PreCert,
        Xbox1Final,
        Xbox1PreCert
    }
    public struct BaseVersionType
    {
        public string BaseVersion;
        public VersionType versionType;
    }
    [Serializable()]
    public struct SerializableKeyValuePair
    {
        public string key;
        public string value;
    }
    public struct RequestStatusKeyValuePairs
    {
        public Guid GuidNumber;
        public RequestStatus WorkFlowStatus;
        public int psBug;
        public string CurrentStepStatus;
    }
    public enum Interface
    {
        [Description("User Interface")]
        UI,
        [Description("Web Service")]
        WS
    }


    public enum Priority
    {
        High = 1,
        Medium,
        Low
    }
    public struct BugInfo
    {
        public string EnvName;
        public string Status;
        public string OptionType;
        public string EnvLabel;
    }
    public struct ConfigInfo
    {
        public BugInfo PreReqBug;
        public BugInfo PreReqTitleBug;
    }
    public struct EnvInfo
    {
        public string EnvType;
        public string TVTEnvCode;
        public string MassiveServiceId;
        public string MassiveSiteId;
        public string Certificate;
        public string MassiveCertificate;
    }

    /// <summary>
    /// Summary description for Service1
    /// </summary>
    [WebService(Namespace = "http://xbox.com/PropManagerWebService")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [ToolboxItem(false)]
    public class PropManagerWebService : System.Web.Services.WebService
    {
        private RequestInfo RequestObj;
        private string reqGuid;
        private string g_requestXMLFileName;
        protected string xemid;
        protected string certificationStage;
        protected string resolveTo;
        protected string environment;
        protected Priority pSPriority;
        protected DateTime reqPropDateTime;
        protected String ccEmail;
        public BaseVersionType[] baseVersions;
        protected string preReqBugID;
        protected string subId;
        protected string TitlePropbugId;
        protected string sharedUrl;
        protected bool g_TEST;
        protected string g_psProductName;
        public string[] g_psDomains;
        protected string g_serializedTempPath;
        protected string g_sharedFolder;
        protected DataSet g_xmlDataWorkflows;
        private static bool g_logging;
        protected string titleId;
        protected string BaseVerBugId;
        protected string BaseVerSubId;
        // the global logging stream
        private static StreamWriter g_swLog;
        // trace setup
        private static string g_logFile;
        // gives access to the Title Verification tool
        public SqlConnection g_myConnection;

        private static EventLog g_eventLog;
        private bool g_PropXLAST_ProdDefault;
        // a standard Connect to Product Studio error
        private string g_psErrText;
        // Event IDs
        public const int EVENTID_DB_TitleVer_Error = 26500;
        public const int EVENTID_PS_Connection_Error = 26501;
        public const int EVENTID_Tracing_Init_Error = 26503;
        // holds all the workflows.xml data
        public static DataSet g_xmlDataAutoPropState;

        public string g_psEnvField;
        public string g_psStatusField;
        public static Hashtable g_environments;
        public static DataSet g_xmlConfig = null;


        public PropManagerWebService()
        {

            string eventSource = "Prop Manager";
            g_eventLog = new EventLog("Application");
            string g_eventLogSource = eventSource;
            g_psErrText = "Failed to connect to Product Studio. Please try again later.";
            xemid = "";
            resolveTo = "";
            ccEmail = "";
            TitlePropbugId = "";
            subId = "";
            titleId = "";
            preReqBugID = "";
            RequestObj = new RequestInfo();
            try
            {
                g_TEST = Convert.ToBoolean(ConfigurationManager.AppSettings["testState"].Trim());

                if (g_TEST)
                {
                    g_psProductName = Convert.ToString(ConfigurationManager.AppSettings["psProductNameTest"].Trim());
                    g_psEnvField = Convert.ToString(ConfigurationManager.AppSettings["psEnvFieldTestMode"].Trim());
                }
                else
                {
                    g_psProductName = Convert.ToString(ConfigurationManager.AppSettings["psProductName"].Trim());
                    g_psEnvField = Convert.ToString(ConfigurationManager.AppSettings["psEnvField"].Trim());
                }
                g_psStatusField = Convert.ToString(ConfigurationManager.AppSettings["psStatusField"].Trim());
                g_psDomains = Convert.ToString(ConfigurationManager.AppSettings["psDomain"]).Split(';');
                g_serializedTempPath = Convert.ToString(ConfigurationManager.AppSettings["serializedFileTempPath"].Trim());
                g_PropXLAST_ProdDefault = Convert.ToBoolean(ConfigurationManager.AppSettings["PropXLASTProdDefault"].Trim());


            }
            catch (Exception ex)
            {
                LogMessage("The web.config file is missing from the project directory.Exception caught: " + ex.Message);
                throw new Exception("The web.config file is missing from the project directory.Exception caught: ");
            }
        }



        /// <summary>
        /// Web Method Used to submit Prop Xlast Request
        /// </summary>
        /// <param name="Xemid">Required</param>
        /// <param name="CertificationStage">Required</param>
        /// <param name="ResolveTo">Required</param>
        /// <param name="Environment">Required</param>
        /// <param name="PreReqBugID">For NonProduction Request its value will be ignored</param>
        /// <param name="arrbaseversion">Required</param>
        /// <param name="PsPriority">Required</param>
        /// <param name="ReqPropDateTime"></param>
        /// <param name="CCEmail">Multiple aliases can be entered seperated by semicolon(Optional)</param>
        /// <param name="ReqGuid">Required</param>
        /// <returns>PSBugID</returns>
        [WebMethod]
        public Guid SubmitPropXlastRequest(string Xemid, CertStage CertificationStage, string ResolveTo, string Environment, string PreReqBugID, BaseVersionType[] arrbaseversion, Priority PsPriority, DateTime ReqPropDateTime, string CCEmail, Guid ReqGuid)
        {
            bool validEnv = false;
            g_sharedFolder = Convert.ToString(ConfigurationManager.AppSettings["fileDropPointPath"].Trim());
            string[] envname = GetEnvName(out g_environments);
            sharedUrl = g_sharedFolder + ReqGuid;
            reqGuid = ReqGuid.ToString();
            string msg = "";
            bool check1 = false;
            InitLogging();



            if ((Environment == null) || (Environment.Equals("")))
                throw new EnvironmentException("Missing Environment");
            foreach (string env in envname)
            {
                if (env.ToLower().Equals(Environment.ToLower()))
                {
                    validEnv = true;
                    environment = env;
                    break;
                }
            }
            if (!validEnv)
                throw new EnvironmentException(Environment + " Environment is not supported by Prop Manager Web Service.");

            EnvInfo envinfo = GetEnvInfo(environment);
            ConfigInfo configinfo = GetPreReqBugInfo(environment, "Prop XLAST");
            bool allowed = IsPermissionValid("PropXlast", environment, Interface.WS);
            if (!allowed)
                throw new NotAllowedException("User doesn't have Permission to submit this request");

            if (envinfo.EnvType.ToUpper().Equals("PROD"))
            {
                if (PreReqBugID.Equals(""))
                {
                    throw new BugIDException("A Linked Bug Id is required for Production requests");
                }
                else
                {
                    if (!IsFieldValid(PreReqBugID.ToString(), "BugID"))
                    {
                        throw new BugIDException("Invalid Linked BugID");
                    }
                    if (!VerifyBugID(PreReqBugID.ToString(), configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, out msg))
                    {
                        throw new BugIDException("Couldn't verify the Linked Bug : " + msg);
                    }
                    else
                        preReqBugID = PreReqBugID;
                }
            }
            else
            {
                preReqBugID = "";
            }

            if ((Xemid != null) && (!Xemid.Equals("")))
            {
                if (!IsFieldValid(Xemid, "XeMID"))
                {
                    throw new XemidFormatException("Xemid format is not correct");
                }
                else
                    xemid = Xemid;
            }
            else
                throw new XemidFormatException("Missing Xemid");

            certificationStage = GetCertStage(CertificationStage);


            if (ResolveTo != null)
            {
                if (ResolveTo.Equals(""))
                {
                    throw new ResolveToException("Missing Whom to Resolve To");
                }
                else
                    resolveTo = ResolveTo;
            }
            else
            {
                throw new ResolveToException("Missing Whom to Resolve To ");
            }

            if (PsPriority.Equals(""))
            {
                throw new PsPriorityException("Missing Priority for the Bug");
            }
            else
                pSPriority = PsPriority;

            if (ReqPropDateTime != null)
            {
                reqPropDateTime = ReqPropDateTime;
            }
            if ((CCEmail != null) && (!CCEmail.Equals("")))
            {
                CCEmail = CCEmail.Replace(',', ';');
                if (!(CCEmail.EndsWith(";")))
                    CCEmail += ';';
                if (!IsFieldValid(CCEmail, "CC"))
                {
                    throw new CCEmailException("Invalid CC Format");
                }

                ccEmail = CCEmail;
            }
            if ((arrbaseversion.Length == 0) || (arrbaseversion == null) || (arrbaseversion.Equals("")))
                throw new BaseVersionException("No Base Versions were provided. At least one is required to submit this request.");
            else
            {
                //Checking if Base Version has some duplicate values in it.
                for (int i = 0; i < arrbaseversion.Length; i++)
                {
                    arrbaseversion[i].BaseVersion = arrbaseversion[i].BaseVersion.Trim();

                    for (int j = i + 1; j < arrbaseversion.Length; j++)
                    {
                        if ((arrbaseversion[i].BaseVersion.ToLower().Trim().Equals(arrbaseversion[j].BaseVersion.ToLower().Trim())) && (arrbaseversion[i].versionType.Equals(arrbaseversion[j].versionType)))
                        {
                            throw new BaseVersionException("BaseVersions have some duplicate values");
                        }

                    }
                }
                foreach (BaseVersionType temp in arrbaseversion)
                {
                    if (!IsFieldValid(temp.BaseVersion.Trim(), "Hex32"))
                        throw new BaseVersionException("Invalid Base Version");

                    baseVersions = arrbaseversion;
                }
            }


            Guid guid = new Guid();
            RequestInfo PreReqBugInfo;
            if (IsValid(out PreReqBugInfo))
            {
                LogMessage("Prop Xlast Request Object has been initialized!");
                check1 = SubmitRequestforPropXlast(out guid, PreReqBugInfo);
            }

            return guid;
        }

        /// <summary>
        /// This Method returns the Path of the folder where .xlast and required .png files needs to be copied.
        /// </summary>
        /// <param name="ReqGuid">Requires a Guid Number.</param>
        /// <returns>Path of Folder where .xlast and required .png files needs to be copied.</returns>
        [WebMethod]
        public string GetFolderPath(Guid ReqGuid)
        {
            g_sharedFolder = Convert.ToString(ConfigurationManager.AppSettings["fileDropPointPath"].Trim());
            sharedUrl = g_sharedFolder + ReqGuid;
            System.IO.Directory.CreateDirectory(sharedUrl);
            return sharedUrl;
        }
        /// <summary>
        /// Web Method Used to submit Add Base Version Request
        /// </summary>
        /// <param name="Xemid">Required</param>        
        /// <param name="CertificationStage">Required</param>        
        /// <param name="ResolveTo">Required</param>
        /// <param name="Environment">Required</param>
        /// <param name="PreReqBugId">For NonProduction Request its value will be ignored</param>
        /// <param name="arrbaseversion">Required</param>
        /// <param name="PsPriority">Required</param>
        /// <param name="ReqPropDateTime">Required</param>
        /// <param name="CCEmail">Multiple aliases can be entered seperated by semicolon(Optional)</param>
        /// <param name="TitlePropBugId">Optional Unless the Title Isn't Propped Yet</param>
        /// <param name="SubId">e.g. 12345678-1a ('-1a' revision # optional)</param>
        /// <param name="TitleId">Required</param>
        /// <returns>PSBugID</returns>
        [WebMethod]
        public Guid SubmitAddBaseVersionRequest(string Xemid, CertStage CertificationStage, string ResolveTo, string Environment, string PreReqBugID, BaseVersionType[] arrbaseversion, Priority PsPriority, DateTime ReqPropDateTime, string CCEmail, string TitlePropBugId, string SubId, string TitleId)
        {
            try
            {
                g_myConnection = new SqlConnection(ConfigurationManager.AppSettings["dbConnStrTitleVer"].Trim());
                g_sharedFolder = Convert.ToString(ConfigurationManager.AppSettings["fileDropPointPath"].Trim());
            }
            catch (Exception)
            {
                LogMessage("Either Web.config file is missing from the project directory OR AppSetting dbConnStrTitleVer is missing from Web.config");
                throw new WebConfigException("Request couldn't be processed further because of some error occured while reading Web.config");
            }
            bool validEnv = false;
            string msg = "";
            string msg1 = "";
            string lError = "";
            RequestInfo PreReqBugInfo = new RequestInfo();

            InitLogging();
            string[] envname = GetEnvName(out g_environments);
            reqGuid = Guid.NewGuid().ToString();
            if ((Environment == null) || (Environment.Equals("")))
            {
                throw new EnvironmentException("Missing Environment");
            }
            foreach (string env in envname)
            {
                if (env.ToLower().Trim().Equals(Environment.ToLower().Trim()))
                {
                    validEnv = true;
                    environment = env;
                    break;
                }
            }
            if (!validEnv)
                throw new EnvironmentException(Environment + " Environment is not supported by Prop Manager Web Service.");
            EnvInfo envinfo = GetEnvInfo(environment);
            ConfigInfo configinfo = GetPreReqBugInfo(environment, "Add Base Version(s)");

            bool allowed = IsPermissionValid("AddBaseVersion", environment, Interface.WS);
            if (!allowed)
                throw new NotAllowedException("User doesn't have Permission to submit this request");

            if (envinfo.EnvType.ToUpper().Equals("PROD"))
            {
                if (PreReqBugID.Equals(""))
                {
                    throw new BugIDException("A Linked Bud Id is required for this request.");
                }
                else
                {
                    if (!IsFieldValid(PreReqBugID, "BugID"))
                    {
                        throw new BugIDException("Invalid Linked BugID");
                    }
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                    {
                        if (VerifyBugID(PreReqBugID, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, out lError))
                        {
                            PreReqBugInfo = GetRequestObjFromBug(out lError, configinfo.PreReqBug.OptionType, PreReqBugID);
                        }
                        else
                        {
                            LogMessage(lError);
                            throw new Exception(lError);
                        }

                        if (!lError.Equals(""))
                        {
                            if (lError.Equals("AutoPopulate functionality is not compatible with the Linked bug provided."))
                            {
                                LogMessage(lError);
                            }
                            else
                            {
                                LogMessage(lError);
                                throw new Exception(lError);
                            }
                        }
                    }
                    preReqBugID = PreReqBugID;

                }
            }
            if (PreReqBugID.Equals(""))
                preReqBugID = "";


            if (!(TitlePropBugId.Equals("")) && (!(TitlePropBugId == null)))
            {
                if (!IsFieldValid(TitlePropBugId, "BugID"))
                {
                    throw new BugIDException("Invalid BugID");
                }
                else
                    TitlePropbugId = TitlePropBugId;
            }
            if (TitlePropBugId == null)
                TitlePropbugId = "";



            if (!(SubId == null) && (!(SubId.Equals(""))))
            {
                if (!IsFieldValid(SubId, "SubID32"))
                {
                    throw new SubIdException("Invalid Sub ID");
                }
                subId = SubId;
            }
            else
            {
                subId = "";

            }
            if ((TitleId != null) && !(TitleId.Equals("")))
            {
                if (!IsFieldValid(TitleId, "Hex32"))
                {
                    throw new TitleIdException("Invalid Title Id");
                }
                titleId = TitleId;
            }
            else
            {
                throw new TitleIdException("Missing Title Id");
            }
            if ((Xemid != null) && (!Xemid.Equals("")))
            {
                if (!IsFieldValid(Xemid, "XeMID"))
                {
                    throw new XemidFormatException("Xemid format is not correct");
                }
                else
                    xemid = Xemid;
            }
            else
                throw new XemidFormatException("Missing Xemid");



            certificationStage = GetCertStage(CertificationStage);

            if (ResolveTo != null)
            {
                if (ResolveTo.Equals(""))
                {
                    throw new ResolveToException("Missing Whom to Resolve To");
                }
                else
                    resolveTo = ResolveTo;
            }
            else
            {
                throw new ResolveToException("Missing Whom to Resolve To ");
            }

            if (PsPriority.Equals(""))
            {
                throw new PsPriorityException("Missing Priority for the Bug");
            }
            else
                pSPriority = PsPriority;

            if (ReqPropDateTime != null)
            {
                reqPropDateTime = ReqPropDateTime;
            }
            if ((CCEmail != null) && (!CCEmail.Equals("")))
            {
                CCEmail = CCEmail.Replace(',', ';');
                if (!(CCEmail.EndsWith(";")))
                    CCEmail += ';';
                if (!IsFieldValid(CCEmail, "CC"))
                {
                    throw new CCEmailException("Invalid CC Format");
                }
                ccEmail = CCEmail;
            }
            else
                ccEmail = "";

            if ((arrbaseversion.Length == 0) || (arrbaseversion == null) || (arrbaseversion.Equals("")))
                throw new BaseVersionException("No Base Versions were provided. At least one is required to submit this request.");
            else
            {
                //Checking if Base Version has some duplicate values in it.
                for (int i = 0; i < arrbaseversion.Length; i++)
                {
                    arrbaseversion[i].BaseVersion = arrbaseversion[i].BaseVersion.Trim();

                    for (int j = i + 1; j < arrbaseversion.Length; j++)
                    {
                        if ((arrbaseversion[i].BaseVersion.ToUpper().Trim().Equals(arrbaseversion[j].BaseVersion.ToUpper().Trim())) && (arrbaseversion[i].versionType.Equals(arrbaseversion[j].versionType)))
                        {
                            throw new BaseVersionException("BaseVersions have some duplicate values");
                        }

                    }
                }
                foreach (BaseVersionType temp in arrbaseversion)
                {
                    if (!IsFieldValid(temp.BaseVersion.Trim(), "Hex32"))
                        throw new BaseVersionException(temp.BaseVersion + " Invalid Base Version");

                    if (VerifyVersions(temp.BaseVersion, GetVersionType(temp.versionType), g_environments[environment].ToString(), TitleId, 0))
                        throw new BaseVersionException("The Base Version 'Ox" + temp.BaseVersion + "[" + GetVersionType(temp.versionType) + "]" + " already exists on this title!");

                }
                baseVersions = arrbaseversion;
            }
            if (!(VerifyEnvironment(g_environments[environment].ToString(), TitleId, out msg)))
            {
                if (TitlePropbugId.Equals(""))
                {
                    throw new Exception(msg + " No 'Title Prop Bug ID' was provided. If you wish to submit this request for a title that has not been propped yet, you must provide the bug number for that prop.");
                }
                else if (!(VerifyBugID(TitlePropBugId, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel, configinfo.PreReqTitleBug.OptionType, TitleId, configinfo.PreReqTitleBug.Status, out msg1)))
                    throw new Exception(msg + " " + msg1);
            }
            Guid guid = new Guid();
            try
            {
                bool check = FillAddBaseVersionRequest(out guid, PreReqBugInfo);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return guid;
        }


        /// <summary>
        /// This Method accepts an array of Guid Numbers and returns the Workflow status as well as the current step status 
        /// </summary>
        /// <param name="guidarr">Array of Existing Guid Numbers</param>
        /// <returns>An array of struct RequestStatusKeyValuePairs containing 4 information 1:Guid Number 2:WorkFlowStatus 3:CurrentStepStatus 4:Ps Bug No</returns>
        [WebMethod]
        public RequestStatusKeyValuePairs[] GetRequestStatus(Guid[] guidarr)
        {
            string workflowPath = "";
            string workflowListName = "";
            string workflowHistoryName = "";

            RequestStatusKeyValuePairs[] rskv = new RequestStatusKeyValuePairs[guidarr.Length];
            try
            {
                workflowPath = ConfigurationManager.AppSettings["workflowPath"].ToString();
                workflowListName = ConfigurationManager.AppSettings["workflowListName"].ToString();
            }
            catch (Exception)
            {
                LogMessage("Exception occured in Method GetRequestStatus().Either Web.config file is missing from the project directory some  AppSettings are missing from Web.config");
                throw new WebConfigException("Request couldn't be processed further because of some error occured while reading Web.config");

            }
            SPWeb web = null;
            SPSite site = null;

            SPSecurity.RunWithElevatedPrivileges(delegate()
            {
                site = new SPSite("http://localhost/");

                //site.AllowUnsafeUpdates = true;

                web = site.OpenWeb();


            });
            web.AllowUnsafeUpdates = true;
            site.AllowUnsafeUpdates = true;
            SPList list = web.Lists[workflowListName.Trim()];
            RequestStatus Rs = new RequestStatus();
            for (int i = 0; i < guidarr.Length; i++)
            {
                SPListItem spItem;

                try
                {
                    spItem = list.Items[guidarr[i]];
                }
                catch (Exception)
                {
                    rskv[i] = new RequestStatusKeyValuePairs();
                    rskv[i].GuidNumber = guidarr[i];
                    rskv[i].WorkFlowStatus = RequestStatus.DoesNotExists;
                    rskv[i].CurrentStepStatus = "Does Not Exists";
                    rskv[i].psBug = -1;
                    continue;
                }

                string requeststs = spItem["Request Status"].ToString();
                string workflowName = GetWorkflowName(spItem["Request Type"].ToString(), spItem["Environment"].ToString());
                Rs = GetEnumValue(Convert.ToInt32(spItem[workflowName]));

                rskv[i] = new RequestStatusKeyValuePairs();
                rskv[i].GuidNumber = guidarr[i];
                rskv[i].WorkFlowStatus = Rs;
                rskv[i].CurrentStepStatus = spItem["Current Step"].ToString() + " : " + spItem["Request Status"].ToString();

                //IF PS Bug Column is null or "N/A" then there can be a problem with Product Studio or Bug is taking longer than expected time to create.

                if (!(spItem["PS Bug"] == null) && !(spItem["PS Bug"].Equals("N/A")))
                {
                    string parseBugId = spItem["PS Bug"].ToString();
                    rskv[i].psBug = Convert.ToInt32(parseBugId.Substring(parseBugId.IndexOf('>') + 1, (parseBugId.IndexOf("</a>") - (parseBugId.IndexOf('>') + 1))));
                }
                else
                {
                    rskv[i].psBug = -1;
                }
            }

            return rskv;
        }



        public bool IsValid(out RequestInfo PreReqBugInfo)
        {
            PreReqBugInfo = new RequestInfo();
            bool novalue = false;
            string lError = "";
            ArrayList fileList = new ArrayList();
            // basic field validation
            if (ccEmail == null || ccEmail.Length == 0)
                ccEmail = "";
            if (!(ccEmail.Equals("")) && (!ccEmail.EndsWith(";")))
                ccEmail += ";";

            EnvInfo envinfo = GetEnvInfo(environment);

            if (!System.IO.Directory.Exists(sharedUrl))
            {
                throw new FolderNotFoundException(sharedUrl + " :This folder does not exist in the file share.");
            }
            else // if the directory exists, make sure there's only *one* XLAST file
            {
                if ((envinfo.EnvType.ToUpper().Equals("PROD")) && g_PropXLAST_ProdDefault)
                {
                    PreReqBugInfo = GetRequestObjFromBug(out lError, "Prop XLAST", preReqBugID.ToString());
                    if (!lError.Equals(""))
                    {
                        LogMessage(lError);
                        throw new Exception(lError);
                    }

                    //fetch files from PS bug
                    if (!SaveFilesToShare(preReqBugID, sharedUrl))
                    {
                        LogMessage("Failed saving the Linked Bug files to the shared folder");
                        throw new Exception("Request couldn't be proccessed further. Failed saving the Linked Bug files to the shared folder");
                    }
                }
                fileList = FindFiles(sharedUrl, "xlast");

                if (fileList.Count == 0 && g_PropXLAST_ProdDefault)
                {
                    throw new FileNotFoundException("There is no XLAST file in the shared folder.");
                }
                if (fileList.Count == 0 && !g_PropXLAST_ProdDefault)
                {
                    throw new FileNotFoundException("There is no XLAST file in the shared folder.Files need to be dropped in the shared folder.");
                }
                else if (fileList.Count > 1)
                {
                    throw new XlastFileException("There is more than one XLAST file in the shared folder. Only one can be present per submission.");
                }
            }

            // check for prereqs... look for PNGs files found in the user's folder dropped in the share for the XLAST 
            StreamReader sr = new StreamReader(fileList[0].ToString());
            string upContent = sr.ReadToEnd();
            sr.Close();

            bool foundFile = false;
            MatchCollection matches = Regex.Matches(upContent, @"<[^:]{0,3}:?Path>([^<>]*\.png)<\/[^:]{0,3}:?Path>", RegexOptions.IgnoreCase);
            string actualMatch = "";
            string missingPng = "";
            foreach (Match match in matches)
            {
                actualMatch = match.Value;
                actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                foundFile = false;
                string[] files = System.IO.Directory.GetFiles(sharedUrl);
                foreach (string file in files)
                {
                    //  look for matches between the PNG files in the directory and PNG files listed inside the Marketplace file
                    if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                    {
                        foundFile = true;
                        break;
                    }
                }
                if (!foundFile)
                {
                    missingPng += Path.GetFileName(actualMatch) + "\n";
                }
            }
            if (!missingPng.Equals(""))
            {
                throw new FileNotFoundException("Required .png file(s) not found: '" + "\n" + missingPng);
            }
            return true;
        }



        public bool SubmitRequestforPropXlast(out Guid guidNum, RequestInfo PreReqBugInfo)
        {
            EnvInfo envinfo = GetEnvInfo(environment);
            ArrayList fileList = new ArrayList();
            bool wf_problem = false;
            bool novalue = false;
            if (PreReqBugInfo.requestName == null)
                novalue = true;

            RequestObj.requestName = "Prop XLAST";
            RequestObj.psIssueType = "Prop XLAST";
            RequestObj.requestEnvironmentName = environment;

            // pull the Title ID and Title Name out of the .xlast file
            fileList = FindFiles(sharedUrl, "xlast");

            StreamReader sr = null;
            string upContent = "";
            try
            {
                sr = new StreamReader(fileList[0].ToString());
                upContent = sr.ReadToEnd();
            }
            catch (Exception ex)
            {
                LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop XLAST'. " + ex.Message);
                throw new Exception("Error accessing file '" + fileList[0].ToString());

            }
            sr.Close();

            int idx = upContent.LastIndexOf("titleId=");
            string tempStr = upContent.Substring(idx + 8, 12);
            string[] strAry = tempStr.Split('"');
            foreach (string str in strAry)
            {
                if (str.Contains("0x"))
                {
                    RequestObj.requestTitleID = str;
                    break;
                }
            }

            string titleName = "";
            Match titleMatch = Regex.Match(upContent, "titleName=\"[^\"]+\"", RegexOptions.IgnoreCase);
            titleName = titleMatch.Value;
            titleName = titleName.Substring(titleName.IndexOf('\"') + 1, titleName.LastIndexOf('\"') - titleName.IndexOf('\"') - 1);
            string CertStg = "";
            if (certificationStage.Equals("N/A"))
                CertStg = " ";
            else
                CertStg = "(" + certificationStage + ")";


            ArrayList requestData = new ArrayList();

            RequestObj.psTitle = "Prop XLAST for " + titleName + " - " + RequestObj.requestTitleID + " -" + CertStg + " in " + environment;
            RequestObj.psDescription = "";
            if (titleName.Contains("OXM Disc") || titleName.Contains("OXM360"))
            {
                RequestObj.psDescription += "***IMPORTANT***" + System.Environment.NewLine + System.Environment.NewLine +
                                 "This is an OXM prop, which requires the LTC <MaxGamerPictures> bit be increased to 5 before running LiveTitle /deploy." +
                                 "There is outstanding WAR approval to increase all OXM Titles with 5 Gamer Pictures. Please see lead for any questions." + System.Environment.NewLine + System.Environment.NewLine;
            }
            RequestObj.psDescription += RequestObj.requestName + System.Environment.NewLine + System.Environment.NewLine +
                             "Title ID: " + RequestObj.requestTitleID + System.Environment.NewLine +
                             "XeMID/XMID: " + xemid + System.Environment.NewLine + System.Environment.NewLine +
                             "Base Version(s):" + System.Environment.NewLine;

            string versionList = "";
            string rVersionList = "";
            foreach (BaseVersionType baseversion in baseVersions)
            {
                string baseVer = baseversion.BaseVersion;
                string verType = GetVersionType(baseversion.versionType);

                RequestObj.psDescription += "0x" + baseVer.Trim() + " | " + verType.Trim() + System.Environment.NewLine;
                versionList += "0x" + baseVer.Trim() + " | " + verType.Trim() + "<br>";
                rVersionList += "0x" + baseVer.Trim() + " | " + verType.Trim() + ",";
            }
            RequestObj.psDescription += System.Environment.NewLine + "Resolve To: " + resolveTo;
            if (envinfo.EnvType.ToUpper().Equals("PROD") && g_PropXLAST_ProdDefault)
                RequestObj.psDescription += System.Environment.NewLine + System.Environment.NewLine + "Note: transferred files were pulled from the linked bug.";
            RequestObj.psPriority = Convert.ToInt32(pSPriority);

            if (reqPropDateTime.Equals(""))
                RequestObj.psPropDateTime = "N/A";
            else
                RequestObj.psPropDateTime = reqPropDateTime.ToString("MM/dd/yyyy HHmm");

            RequestObj.emailTitle = " to " + RequestObj.requestName + " for " + titleName + " (" + RequestObj.requestTitleID + ") - in " + environment + " - XeMID: " + xemid;
            RequestObj.emailCCList = ccEmail;

            RequestObj.emailHTMLBody = "<b>Title ID:</b> " + RequestObj.requestTitleID + "<br>" +
                                "<b>XeMID/XMID:</b> " + xemid + "<br>" +
                                "<b>Environment:</b> " + environment + "<br><br>" +
                                "<b>Base Version(s):</b> <br>" + versionList + "<br>" +
                                "<b>Priority:</b> " + RequestObj.psPriority + "<br>" +
                                "<b>Certification Stage:</b> " + certificationStage + "<br>" +
                                "<b>Resolve To:</b> " + resolveTo + "<br>" +
                                "<b>Requested Prop Date/Time: </b>" + RequestObj.psPropDateTime;


            ArrayList fileGroup = FindFiles(sharedUrl, "xlast");
            fileGroup.AddRange(FindFiles(sharedUrl, "png"));

            // only transfer required png files
            ArrayList removeList = new ArrayList();
            foreach (string fileStr in fileGroup)
            {
                if (Path.GetExtension(fileStr).ToLower() == ".png" && !upContent.ToLower().Contains(Path.GetFileName(fileStr).ToLower()))
                    removeList.Add(fileStr);
            }
            foreach (string fileStr in removeList)
            {
                fileGroup.Remove(fileStr);
            }

            // gather request data
            SerializableKeyValuePair skp = new SerializableKeyValuePair();
            skp.key = "Xemid"; skp.value = xemid;
            requestData.Add(skp);

            skp.key = "Base Versions"; skp.value = rVersionList;
            bool found = false;
            if (envinfo.EnvType.ToUpper().Equals("PROD") && g_PropXLAST_ProdDefault && !(novalue))
            {
                foreach (object obj in PreReqBugInfo.requestData)
                {
                    SerializableKeyValuePair skv = (SerializableKeyValuePair)obj;
                    if (skv.key == "Base Versions")
                    {
                        string[] baseVerAry = skv.value.Split(',');
                        string[] baseVerAryByUser = skp.value.Split(',');

                        if (!(baseVerAry.Length == baseVerAryByUser.Length))
                            throw new Exception("The Base Version provided doesn't match with the one assosiated with Linked BugId");
                        else
                        {
                            for (int i = 0; i < baseVerAryByUser.Length; i++)
                            {
                                for (int j = 0; j < baseVerAry.Length; j++)
                                {
                                    if (baseVerAryByUser[i].ToUpper().Trim().Equals(baseVerAry[j].ToUpper().Trim()))
                                    {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found)
                                    throw new Exception("The Base Version provided doesn't match with the one assosiated with Linked BugId.");
                            }
                        }
                    }
                }
            }
            requestData.Add(skp);
            skp.key = "Certification Stage"; skp.value = certificationStage;
            requestData.Add(skp);

            skp.key = "Resolve To"; skp.value = resolveTo;
            requestData.Add(skp);
            RequestObj.requestVersion = ConfigurationManager.AppSettings["version"].ToString();
            RequestObj.testState = g_TEST;
            RequestObj.requestGUID = reqGuid;
            RequestObj.requestSubmitter = System.Web.HttpContext.Current.User.Identity.Name;
            RequestObj.requestData = requestData;
            RequestObj.psLinkedBug = preReqBugID;
            RequestObj.psLinkedBugType = 0;
            if ((envinfo.EnvType.ToUpper().Equals("PROD") && (!g_PropXLAST_ProdDefault)) || (!envinfo.EnvType.ToUpper().Equals("PROD")))
            {
                RequestObj.psAttachFiles = true;
            }
            else
            {
                RequestObj.psAttachFiles = false;
            }

            bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropXLAST", environment));
            RequestObj.psSetAutoPropState = psSetAutoPropState;
            RequestObj.fileDropPointPath = g_sharedFolder;
            RequestObj.serializedTempPath = g_serializedTempPath;
            RequestObj.filePaths = fileGroup;
            string initData = SerializeRequest(RequestObj);

            string workflowName = GetWorkflowName("PropXLAST", environment);
            if (workflowName.Equals(""))
                throw new Exception("Request couldn't be processed further due to some error occured while reading WorkFlow.xml/.xsd.");
            Guid guidNumber;

            InitWorkflow(workflowName, RequestObj.psTitle, RequestObj.requestGUID, initData, out guidNumber);

            guidNum = guidNumber;
            return true;
        }

        protected string GetVersionType(VersionType val)
        {
            switch (val.ToString())
            {
                case "Xenon360":
                    return "Xenon (360)";
                case "PCPanorama":
                    return "PC (Panorama)";
                case "Xbox1":
                    return "Xbox1";
                default:
                    return "";

            }
        }
        protected string GetCertStage(CertStage val)
        {
            switch (val.ToString())
            {
                case "NA":
                    return "N/A";
                case "Xbox360Final":
                    return "Xbox 360 Final";
                case "Xbox360PreCert":
                    return "Xbox 360 PreCert";
                case "Xbox1Final":
                    return "Xbox 1.0 Final";
                case "Xbox1PreCert":
                    return "Xbox 1.0 PreCert";
                default:
                    return "";
            }
        }
        protected void InitWorkflowXML()
        {
            g_xmlDataWorkflows = new DataSet();
            try { g_xmlDataWorkflows.ReadXml(HttpContext.Current.Server.MapPath("workflows.xml")); }
            catch (Exception ex) { LogMessage("Error reading workflow XML data. " + ex.Message); throw ex; }

            try { g_xmlDataWorkflows.ReadXmlSchema(HttpContext.Current.Server.MapPath("workflows.xsd")); }
            catch (Exception ex) { LogMessage("Error reading workflow XML configuration data. " + ex.Message); throw ex; }
        }
        // <summary>
        // Retrieves the workflow name used in launching a request's workflow.
        // </summary>       

        //<param name="optionName">The name of the request option, as defined in the workflows.xml file.</param>
        // <param name="optionName">The name of the request option's environment, as defined in the web.config file.</param>
        //<returns>string value containing the workflow name for the given option/environment pair.</returns>
        protected string GetWorkflowName(string optionName, string envName)
        {
            InitWorkflowXML();

            try
            {
                if (!g_xmlDataWorkflows.HasErrors)
                {
                    for (int i = 0; i < g_xmlDataWorkflows.Tables["Option"].Rows.Count; i++) // for each option
                    {
                        if ((string)(g_xmlDataWorkflows.Tables["Option"].Rows[i]["Name"]) == optionName)
                        {
                            DataRow dr = g_xmlDataWorkflows.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                        }
                    }
                    for (int i = 0; i < g_xmlDataWorkflows.Tables["Option"].Rows.Count; i++) // if we didn't find a direct request option matche, check for all options
                    {
                        if ((string)(g_xmlDataWorkflows.Tables["Option"].Rows[i]["Name"]) == "All")
                        {
                            DataRow dr = g_xmlDataWorkflows.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct environment match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The workflow XML data has errors in it. Could not validate permissions.");
                }
            }
            catch (Exception ex)
            {
                return ""; // "" = failed
            }

            return ""; // "" = failed
        }

        protected string SerializeRequest(RequestInfo requestObj)
        {
            // get the request object serialized into xml and then converted to a string
            MemoryStream stream = new MemoryStream();
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
            serializer.Serialize(stream, requestObj);
            stream.Position = 0;
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            string xmlStr = Encoding.UTF8.GetString(bytes);

            if (!System.IO.Directory.Exists(requestObj.serializedTempPath))
                System.IO.Directory.CreateDirectory(requestObj.serializedTempPath);

            //write to file for later attachment to the workflow
            g_requestXMLFileName = DateTime.Now.ToString("yyyy-MM-dd-Hmmss") + "_" + requestObj.requestGUID + ".xml";
            StreamWriter sw = new StreamWriter(requestObj.serializedTempPath + g_requestXMLFileName);
            sw.Write(xmlStr);
            sw.Close();

            return xmlStr;
        }

        protected bool InitWorkflow(string workflowName, string workflowTitle, string requestGUID, string initData, out Guid guidnumber)
        {
            guidnumber = new Guid();
            string workflowFolder = "";

            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(initData));
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo));
            PropManagerRequest.RequestInfo requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

            string workflowPath = ConfigurationManager.AppSettings["workflowPath"].ToString();
            string workflowListName = ConfigurationManager.AppSettings["workflowListName"].ToString();
            string workflowHistoryName = ConfigurationManager.AppSettings["workflowHistoryName"].ToString();
            string servername = ConfigurationManager.AppSettings["ServerName"].ToString();
            SPWeb web = null;
            SPSite site = null;

            try
            {
                SPSecurity.RunWithElevatedPrivileges(delegate()
                {
                    site = new SPSite(servername);

                    //site.AllowUnsafeUpdates = true;

                    web = site.OpenWeb();


                });
                web.AllowUnsafeUpdates = true;
                site.AllowUnsafeUpdates = true;
                SPList list = web.Lists[workflowListName.Trim()];
                SPList historyList = web.Lists[workflowHistoryName];

                workflowFolder = site.Url + workflowPath;
                SPFolder f = web.GetFolder(workflowFolder);



                if (f.Exists)
                {
                    SPListItemCollection itemColl = list.Items;
                    SPListItem item = itemColl.Add(f.ServerRelativeUrl, SPFileSystemObjectType.File, null);

                    string priority = "";
                    if (requestObj.psPriority == 1)
                        priority = "High";
                    else if (requestObj.psPriority == 2)
                        priority = "Medium";
                    else if (requestObj.psPriority == 3)
                        priority = "Low";

                    ArrayList files = requestObj.filePaths;
                    string fileSize = "";
                    if (files.Count > 0)
                    {
                        long transferSizeBytes = 0;
                        FileInfo fInfo;
                        for (int i = 0; i < files.Count; i++)
                        {
                            fInfo = new FileInfo(files[i].ToString());
                            transferSizeBytes += fInfo.Length;
                        }
                        fileSize = GetSensibleByteSize(transferSizeBytes);
                    }
                    else
                        fileSize = "N/A";

                    string spColumnRequest = ConfigurationManager.AppSettings["spColumnRequest"].ToString();
                    string spColumnEnvironment = ConfigurationManager.AppSettings["spColumnEnvironment"].ToString();
                    string spColumnPriority = ConfigurationManager.AppSettings["spColumnPriority"].ToString();
                    string spColumnSize = ConfigurationManager.AppSettings["spColumnSize"].ToString();

                    item["Title"] = workflowTitle;
                    item[spColumnRequest] = requestObj.requestName;
                    item[spColumnEnvironment] = requestObj.requestEnvironmentName;
                    item[spColumnPriority] = priority;
                    item[spColumnSize] = fileSize;

                    StreamReader sr = new StreamReader(g_serializedTempPath + g_requestXMLFileName);
                    string xmlStr = sr.ReadToEnd();
                    sr.Close();

                    byte[] bytes = new byte[xmlStr.Length];
                    bytes = Encoding.UTF8.GetBytes(xmlStr);

                    item.Attachments.Add(g_requestXMLFileName, bytes);

                    item.Update();
                    //web.AllowUnsafeUpdates = false;

                    web.Update();
                    SPWorkflowAssociation wfAssociation = list.WorkflowAssociations.GetAssociationByName(workflowName, System.Globalization.CultureInfo.CurrentCulture);
                    SPWorkflowManager temp = site.WorkflowManager;
                    SPWorkflow wfInstance = temp.StartWorkflow(item, wfAssociation, initData);

                    string psBugMsg = "";
                    if (list.Items.GetItemById(wfInstance.ItemId)["PS Bug"] == null || list.Items.GetItemById(wfInstance.ItemId)["PS Bug"].ToString() == "N/A")
                    {
                        psBugMsg += "[" + requestObj.requestName + "] The bug is taking longer than normal to create and cannot be displayed at this time. You will receive the bug number by email shortly.";
                        guidnumber = list.Items.GetItemById(wfInstance.ItemId).UniqueId;
                    }
                    else
                    {
                        string parseBugId = list.Items.GetItemById(wfInstance.ItemId)["PS Bug"].ToString();
                        guidnumber = list.Items.GetItemById(wfInstance.ItemId).UniqueId;
                        psBugMsg += "[" + requestObj.requestName + "] Product Studio Bug #" + list.Items.GetItemById(wfInstance.ItemId)["PS Bug"].ToString() + " has been successfully created.";
                    }
                    LogMessage(psBugMsg);
                }
            }
            catch (FileNotFoundException ex)
            {
                throw new FileNotFoundException("Error initializing the workflow: " + ex.Message + " Workflow name: " + workflowName + ". Workflow list path: " + workflowFolder);
            }
            catch (Exception ex)
            {
                if (workflowName == "")
                    workflowName = "null";
                LogMessage("Error initializing the workflow: " + ex.Message);
                throw new Exception("Error initializing the workflow: " + ex.Message + " Workflow name: " + workflowName + ". Workflow list path: " + workflowFolder);
            }

            return true;
        }
        private string GetSensibleByteSize(long bytes)
        {
            if (bytes < 1024)
                return bytes.ToString() + " B";
            else if (bytes < (1024 * 1000))
                return ((int)(bytes / 1024)).ToString() + " KB";
            else if (bytes < (1024 * 1000000))
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000)), 2)) + " MB";
            else
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000000)), 2)) + " GB";
        }

        protected bool IsFieldValid(string val, string type)
        {
            Regex regEx;

            if (type == "Hex32") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){8}$)");
            else if (type == "Hex32Var") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){1,8}$)");
            else if (type == "SubID32") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){8}(-[0-9][A-Z|a-z])?$)");
            else if (type == "Int32List") regEx = new Regex(@"(^([0-9]+(\s*)\r\n)*$)");
            else if (type == "OfferList") regEx = new Regex(@"(^(0x([0-9]|[A-F]|[a-f]){16}(\s*)\r\n)*$)");
            else if (type == "CC") regEx = new Regex("(^(((([^@]+)@([^@]+))|([^@]+);))*$)");
            else if (type == "DateTime") regEx = new Regex("(^((0[1-9]|1[0-2])/([0-2][0-9]|3[0-1])/[0-9]{4} ([0-1][0-9]|2[0-3])[0-5][0-9])$)");
            else if (type == "XeMID") regEx = new Regex("(^.{13}$)");
            else if (type == "ConsoleID") regEx = new Regex(@"(^((((xe.)?[^\s\r\n]{12})|(0xFB00([^\s\r\n]{12})))(\s*)\r\n)+$)");
            else if (type == "BugID") regEx = new Regex("(^[0-9]*$)");
            else if (type == "TMSList") regEx = new Regex(@"(^((..*)(\s*)\r\n)*$)", RegexOptions.IgnoreCase);
            else if (type == "CertName") regEx = new Regex(@"(^([^\.]+\.[^\.]+\.[^\.]+\.[^\.]+)$)");
            else if (type == "IP") regEx = new Regex(@"^(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})$");
            else if (type == "IPList") regEx = new Regex(@"^((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})(\s*)\r\n)*$");
            else return false;

            if (regEx.IsMatch(val) && val != "") return true;
            else if (type == "CC" && val == "") return true;

            return false;
        }

        protected ArrayList FindFiles(string folderPath, string extension)
        {
            ArrayList fileList = new ArrayList();
            string[] files = null;

            try
            {
                files = System.IO.Directory.GetFiles(folderPath);
            }
            catch (Exception ex)
            {
                LogMessage("FindFiles() - The directory 'folderPath' doesn't exist.");
                return fileList;
            }

            // the ! simply means I want to return the paths to *all* files in this directory
            if (extension == "!")
            {
                foreach (string file in files)
                    fileList.Add(file);
            }
            else if (extension == "")
                return fileList;
            else
            {
                foreach (string file in files)
                {
                    if (Path.GetExtension(file).ToLower() == "." + extension.ToLower())
                        fileList.Add(file);
                }
            }

            return fileList;
        }
        protected void LogMessage(string message)
        {
            if (!g_logging)
                return;

            Application.Lock();
            try
            {
                g_swLog.WriteLine(DateTime.Now + " | " + User.Identity.Name + " | " + message);
                g_swLog.Flush();
            }
            catch (Exception ex)
            {
                FireEvent("Prop Manager: failed writing to logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 2);
            }
            Application.UnLock();
        }
        protected void FireEvent(string EvtText, int EventID, int Severity)
        {
            EventLogEntryType EvtSeverity;

            switch (Severity)
            {
                case 1:
                    //Error
                    EvtSeverity = EventLogEntryType.Error;
                    break;
                case 2:
                    //Warning
                    EvtSeverity = EventLogEntryType.Warning;
                    break;
                case 4:
                    //Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
                default:
                    //Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
            }

            //Write an event to  the event log.    
            try
            {
                g_eventLog.WriteEntry(EvtText, EvtSeverity, EventID);
            }
            catch (Exception) { }

            g_eventLog = null;
        }

        private DatastoreItem GetBug(Datastore datastore, string database, int bugId)
        {
            DatastoreItemList datalist;
            DatastoreItem dataitem;
            Query query;

            datalist = new DatastoreItemListClass();
            datalist.Datastore = datastore;

            if (bugId != 0)
            {
                query = new QueryClass();
                query.CountOnly = false;
                query.DatastoreItemType = PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs;
                query.SelectionCriteria = "<Query><Expression Column='ID' Operator='equals'><String>" + bugId + "</String></Expression></Query>";

                datalist.Query = query;
                datalist.Execute();

                if (datalist.DatastoreItems.Count != 1)
                    return null;

                dataitem = datalist.DatastoreItems[0];
            }
            else
            {
                datalist.CreateBlank(PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs);
                dataitem = datalist.DatastoreItems.Add(null, PsApplyRulesMask.psApplyRulesAll);
            }

            return dataitem;
        }
        protected bool ConnectToProductStudio(ref ProductStudio.Directory psDirectory, ref Product psProduct, ref Datastore psDataStore)
        {
            bool success = false;
            foreach (string psDomain in g_psDomains)
            {
                try
                {
                    //connect to the directory and the specific product.
                    psDirectory = new ProductStudio.DirectoryClass();
                    psDirectory.Connect(psDomain.Trim(), "", "");

                    psProduct = psDirectory.GetProductByName(g_psProductName);
                    psDataStore = psProduct.Connect("", "", "");

                    success = true;
                    break;
                }
                catch (Exception ex)
                {
                    LogMessage("Failed to connect to Product Studio [" + psDomain + "]. Exception caught: " + ex.Message);
                    return false;
                }
            }
            if (!success)
            {
                try
                {
                    psDirectory.Disconnect();
                }
                catch (Exception) { /* if we can't disconnect, we don't care. */ }

                FireEvent("Prop Manager: " + g_psErrText, EVENTID_PS_Connection_Error, 1);
                return false;
            }

            return true;
        }
        private bool SaveFilesToShare(string bugID, string sharePath)
        {
            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
                return false;

            if (!System.IO.Directory.Exists(sharePath))
                System.IO.Directory.CreateDirectory(sharePath);



            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            if (myBug == null)
                return false;

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);


            for (int i = 0; i < myBug.Files.Count; i++)
            {
                myBug.Files[i].SaveToFile(sharePath + "\\" + Path.GetFileName(myBug.Files[i].FileName), false);
            }
            try
            {
                myBug.Save(true);
            }
            catch (Exception ex)
            {
                LogMessage("Unable to save bug in function SaveFilesToShare(). " + ex.Message);
                return false;
            }

            return true;
        }
        protected void InitLogging()
        {
            string data = "";
            StreamReader sr = null;
            try
            {
                bool logging = Convert.ToBoolean(ConfigurationManager.AppSettings["loggingMode"]);
                string loggingPath = ConfigurationManager.AppSettings["loggingPath"].ToString();

                if (!System.IO.Directory.Exists(loggingPath))
                    System.IO.Directory.CreateDirectory(loggingPath);

                if (logging)
                {
                    g_logFile = loggingPath + DateTime.Now.ToString(@"M-d-yyyy") + ".txt";
                    EnableLogging();
                }
                else
                    DisableLogging();

                sr.Close();
            }
            catch (Exception)
            {
                if (sr != null) sr.Close();
            }
        }

        private ArrayList GetAttachedFilenames(string bugID)
        {
            ArrayList fileList = new ArrayList();
            string g_lDummy = "";
            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
                return null;

            if (bugID != "")
            {
                Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
                if (myBug == null)
                    return null;

                myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);
                if (myBug.Files.Count == 0)
                    return fileList;

                try
                {
                    for (int i = 0; i < myBug.Files.Count; i++)
                    {
                        fileList.Add(myBug.Files[i].FileName);
                    }

                    myBug.Save(true);
                }
                catch (Exception ex)
                {
                    LogMessage("Unable to save bug and/or add attached files in function GetAttachedFilenames(). " + ex.Message);
                }
            }

            return fileList;
        }
        // <summary>
        // Pulls the logging setup info out of the web.config file and enables or disables logging appropiately.
        //</summary>

        //<summary>
        //Determines if the StreamWriter object is still stored in the Cache or if we need a new one.
        //</summary>
        protected void EnableLogging()
        {
            g_logging = true;

            g_swLog = (StreamWriter)HttpContext.Current.Cache["LogStream"];
            try
            {
                if (g_swLog == null || g_swLog.BaseStream == null)
                {
                    g_swLog = new StreamWriter(g_logFile, true);
                    HttpContext.Current.Cache["LogStream"] = g_swLog;
                    LogMessage("Application logging has been enabled.");
                }
            }
            catch (Exception ex)
            {
                g_swLog = new StreamWriter(g_logFile, true);
                HttpContext.Current.Cache["LogStream"] = g_swLog;
                FireEvent("Prop Manager: failed opening logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 2);
                LogMessage("Application logging has been enabled");
            }

            //check to see if we're a new day's log file needs to be generated
            StreamWriter swLog2;
            try
            {
                swLog2 = new StreamWriter(g_logFile, true);
            }
            catch (Exception)   // this means that g_swLog is already writing to the correct log file
            {
                return;
            }
            if (swLog2 != null)
            {
                swLog2.Close();
            }
            g_swLog.Close();

            g_swLog = new StreamWriter(g_logFile, true);
            HttpContext.Current.Cache["LogStream"] = g_swLog;
            LogMessage("Application logging has been enabled");
        }


        //<summary>
        //Disables application logging.
        //</summary>
        protected void DisableLogging()
        {
            g_logging = false;

            try
            {
                g_swLog = (StreamWriter)HttpContext.Current.Cache["LogStream"];
                if (g_swLog != null)
                {
                    if (g_swLog.BaseStream != null)
                    {
                        LogMessage("Application logging has been disabled");
                        g_swLog.Close();
                        HttpContext.Current.Cache["LogStream"] = g_swLog;
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage("An error occurred when trying to disable application logging in DisableLogging(). " + ex.Message);
                FireEvent("Prop Manager: failed disabling logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 4);
            }
        }
        //<summary>
        //Checks whether user has permission to submit request using the Webservice or not
        //</summary>
        //<param name="optionName"></param>
        //<param name="envName"></param>
        //<returns></returns>
        public bool IsPermissionValid(string optionName, string envName, Interface iFace)
        {
            DataSet ds = new DataSet();
            try
            {

                ds.ReadXmlSchema(HttpContext.Current.Server.MapPath("permissions.xsd"));
                ds.ReadXml(HttpContext.Current.Server.MapPath("permissions.xml"));

            }
            catch (Exception ex)
            {
                LogMessage("Error reading permissions XML data. " + ex.Message);
                throw new NotAllowedException("Error reading Permision File");
            }

            foreach (DataRow dr in ds.Tables["Option"].Rows)
            {
                if (dr["Name"].ToString().ToUpper().Equals(optionName.ToUpper()) || dr["Name"].ToString().ToUpper().Equals("ALL"))
                {
                    foreach (DataRow dr1 in dr.GetChildRows("Option_Environment"))
                    {
                        if (dr1["Name"].ToString().ToUpper().Equals(("envName").ToUpper()) || dr1["Name"].ToString().ToUpper().Equals("ALL"))
                        {
                            if (IsAllowed(dr1["IFace"].ToString(), iFace))
                            {
                                string[] sarr = dr1["Aliases"].ToString().Split(',');
                                foreach (string s in sarr)
                                {
                                    if ((System.Web.HttpContext.Current.User.IsInRole(s.Trim())))
                                    {
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }

            }
            return false;
        }

        public bool IsAllowed(string iFaceval, Interface iFace)
        {
            if (!iFaceval.Equals(""))
            {
                int num = Convert.ToInt32(iFaceval);
                int x1 = num & 1; int x2 = num & 2; int x3 = num & 3; int x4 = num & 0;

                if (((x2 == 2) || (x3 == 3)) && (iFace.Equals(Interface.WS)))
                {
                    return true;
                }
                else if ((x1 == 1 || x4 == 0) && (iFace.Equals(Interface.UI)))
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        protected void InitAutoPropStateXML()
        {
            g_xmlDataAutoPropState = new DataSet();
            try { g_xmlDataAutoPropState.ReadXml(HttpContext.Current.Server.MapPath("autoprop.xml")); }
            catch (Exception ex) { LogMessage("Error reading AutoProp state XML data. " + ex.Message); throw ex; }

            try { g_xmlDataAutoPropState.ReadXmlSchema(HttpContext.Current.Server.MapPath("autoprop.xsd")); }
            catch (Exception ex) { LogMessage("Error reading AutoProp state XML configuration data. " + ex.Message); throw ex; }
        }

        protected string GetAutoPropState(string optionName, string envName)
        {
            InitAutoPropStateXML();

            try
            {
                if (!g_xmlDataAutoPropState.HasErrors)
                {
                    for (int i = 0; i < g_xmlDataAutoPropState.Tables["Option"].Rows.Count; i++) // for each option
                    {
                        if ((string)(g_xmlDataAutoPropState.Tables["Option"].Rows[i]["Name"]) == optionName)
                        {
                            DataRow dr = g_xmlDataAutoPropState.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                        }
                    }
                    for (int i = 0; i < g_xmlDataAutoPropState.Tables["Option"].Rows.Count; i++) // if we didn't find a direct request option matche, check for all options
                    {
                        if ((string)(g_xmlDataAutoPropState.Tables["Option"].Rows[i]["Name"]) == "All")
                        {
                            DataRow dr = g_xmlDataAutoPropState.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct environment match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The AutoProp state XML data has errors in it. Could not validate permissions.");

                }
            }
            catch (Exception ex)
            {
                return "FALSE"; // "" = failed
            }

            return "FALSE"; // "" = no matches
        }
        protected string GetTitleName(string titleID, string envID)
        {
            string titleName = "";

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            titleID = titleID.Trim();

            try
            {
                if (g_myConnection != null)
                    g_myConnection.Close();

                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_details " + envID + ", " + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (dataReader.Read())
                {
                    if (!(dataReader["TitleName"].ToString() == null))
                    {
                        titleName = dataReader["TitleName"].ToString();
                    }
                    else
                        titleName = "";
                }
                else
                    titleName = "-1";

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                g_myConnection.Close();
                titleName = "";
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return titleName;
        }
        protected bool VerifyEnvironment(string env, string titleID, out string errmsg)
        {
            errmsg = "";
            if (!IsFieldValid(titleID, "Hex32"))
            {

                errmsg += "Invalid Title ID.";
                return false;
            }

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            try
            {
                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                if (!titleID.Contains("0x"))
                    titleID = "0x" + titleID;

                myCommand = new SqlCommand("EXEC p_get_title_details " + env + ", " + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (!dataReader.HasRows)
                {

                    errmsg += "This Title ID does not exist in the selected environment.";
                }
                else
                {
                    dataReader.Close();
                    g_myConnection.Close();
                    return true;
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {


                LogMessage("Error: could not access the Title Verification DB");
                errmsg += "Cannot access the Title Verification database.";
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);

            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }


        public bool FillAddBaseVersionRequest(out Guid guidNum, RequestInfo PreReqBugInfo)
        {
            bool novalue = false;
            if (PreReqBugInfo.requestName == null)
                novalue = true;
            string msg = "";
            EnvInfo envinfo = GetEnvInfo(environment);

            RequestObj.requestName = "Add Base Version(s)";
            RequestObj.psIssueType = "Change Request";
            RequestObj.requestEnvironmentName = environment;

            RequestObj.requestTitleID = "0x" + titleId;
            if ((envinfo.EnvType.ToUpper().Equals("PROD")) && !(novalue))
            {
                if (!(PreReqBugInfo.requestTitleID.ToUpper().Trim().Equals(RequestObj.requestTitleID.ToUpper().Trim())))
                {
                    throw new Exception("The TitleId provided doesn't match with the one assosiated with Linked BugId");
                }
            }


            string titleName = GetTitleName(RequestObj.requestTitleID.Trim(), g_environments[environment].ToString());
            if (titleName.Equals("-1")) titleName = "";
            string CertStg = "";
            if (certificationStage.Equals("N/A"))
                CertStg = " ";
            else
                CertStg = "(" + certificationStage + ")";

            ArrayList requestData = new ArrayList();

            RequestObj.psTitle = "Add Base Version(s) for " + titleName + " - " + RequestObj.requestTitleID + " -" + CertStg + " in " + environment;
            RequestObj.psDescription = RequestObj.requestName + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + RequestObj.requestTitleID + Environment.NewLine;

            if (!VerifyEnvironment(g_environments[environment].ToString(), titleId, out msg))
            {
                RequestObj.psDescription += Environment.NewLine + "Note: this title hasn't been propped yet in this environment. The bug id for the prop is: " + TitlePropbugId + Environment.NewLine + Environment.NewLine;

            }
            RequestObj.psDescription += "XeMID/XMID: " + xemid + Environment.NewLine + Environment.NewLine +
                             "Base Version(s):" + Environment.NewLine;


            string versionList = "";
            string rVersionList = "";
            foreach (BaseVersionType baseversion in baseVersions)
            {
                string baseVer = baseversion.BaseVersion;
                string verType = GetVersionType(baseversion.versionType);

                RequestObj.psDescription += "0x" + baseVer.Trim() + " | " + verType.Trim() + System.Environment.NewLine;
                versionList += "0x" + baseVer.Trim() + " | " + verType.Trim() + "<br>";
                rVersionList += "0x" + baseVer.Trim() + " | " + verType.Trim() + ",";
            }

            RequestObj.psDescription += System.Environment.NewLine;
            if (subId != null && (!subId.Equals("")))
                RequestObj.psDescription += "Sub ID: " + "0x" + subId + Environment.NewLine;
            RequestObj.psDescription += "Resolve To: " + resolveTo;

            RequestObj.psPriority = Convert.ToInt32(pSPriority);

            if (reqPropDateTime.Equals(""))
                RequestObj.psPropDateTime = "N/A";
            else
                RequestObj.psPropDateTime = reqPropDateTime.ToString("MM/dd/yyyy HHmm");

            RequestObj.emailTitle = " to " + RequestObj.requestName + " for " + titleName + " (" + RequestObj.requestTitleID + ") in " + environment;
            RequestObj.emailCCList = ccEmail;

            RequestObj.emailHTMLBody = "<b>Title ID:</b> " + RequestObj.requestTitleID + "<br>" +
                                "<b>Environment:</b> " + environment + "<br><br>" +
                                "<b>XeMID/XMID:</b> " + xemid + "<br>";
            if ((!(subId == null)) && (!(subId.Equals(""))))
            {
                RequestObj.emailHTMLBody += "<b>Sub ID:</b> " + "0x" + subId + "<br>";
            }

            RequestObj.emailHTMLBody += "<br><b>Base Version(s):</b> <br>" + versionList + "<br>" +
                             "<b>Priority:</b> " + RequestObj.psPriority + "<br>" +
                             "<b>Certification Stage:</b> " + certificationStage + "<br>" +
                             "<b>Resolve To:</b> " + resolveTo + "<br>" +
                             "<b>Requested Prop Date/Time:</b> " + RequestObj.psPropDateTime;

            RequestObj.requestGUID = reqGuid;

            RequestObj.requestVersion = ConfigurationManager.AppSettings["version"].ToString();
            RequestObj.testState = g_TEST;

            RequestObj.requestSubmitter = System.Web.HttpContext.Current.User.Identity.Name;
            RequestObj.requestData = requestData;
            RequestObj.psLinkedBug = preReqBugID;
            RequestObj.psLinkedBugType = 0;

            // gather request data
            SerializableKeyValuePair skp = new SerializableKeyValuePair();
            skp.key = "Xemid"; skp.value = xemid;
            requestData.Add(skp);

            skp.key = "Base Versions"; skp.value = rVersionList;
            bool found = false;
            if ((envinfo.EnvType.ToUpper().Equals("PROD")) && !(novalue))
            {
                foreach (object obj in PreReqBugInfo.requestData)
                {
                    SerializableKeyValuePair skv = (SerializableKeyValuePair)obj;
                    if (skv.key == "Base Versions")
                    {
                        string[] baseVerAry = skv.value.Split(',');
                        string[] baseVerAryByUser = skp.value.Split(',');

                        if (!(baseVerAry.Length == baseVerAryByUser.Length))
                            throw new Exception("The list of Base Version provided doesn't match with the one assosiated with Linked BugId");
                        else
                        {
                            for (int i = 0; i < baseVerAryByUser.Length; i++)
                            {
                                for (int j = 0; j < baseVerAry.Length; j++)
                                {
                                    if (baseVerAryByUser[i].ToUpper().Trim().Equals(baseVerAry[j].ToUpper().Trim()))
                                    {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found)
                                    throw new Exception("The Base Version provided doesn't match with the one assosiated with Linked BugId");
                            }
                        }
                    }
                }
            }

            requestData.Add(skp);

            skp.key = "Certification Stage"; skp.value = certificationStage;
            requestData.Add(skp);

            skp.key = "Resolve To"; skp.value = resolveTo;
            requestData.Add(skp);
            skp.key = "SubID"; skp.value = subId;

            requestData.Add(skp);
            RequestObj.psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("AddBaseVersion", environment));
            RequestObj.psAttachFiles = false;

            RequestObj.fileDropPointPath = g_sharedFolder;
            RequestObj.serializedTempPath = g_serializedTempPath;
            RequestObj.filePaths = new ArrayList();
            string initData = SerializeRequest(RequestObj);

            string workflowName = GetWorkflowName("AddBaseVersion", environment);
            if (workflowName.Equals(""))
                throw new Exception("Request couldn't be processed further due to some error occured while reading WorkFlow.xml/.xsd.");
            Guid GuidId;
            try
            {
                InitWorkflow(workflowName, RequestObj.psTitle, RequestObj.requestGUID, initData, out GuidId);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            guidNum = GuidId;
            return true;


        }
        // <summary>
        // Confirms that the given versions actually exist
        // </summary>
        // <param name="verStr">Version number (in HEX) of the given type</param>
        //<param name="envStr">Title Verification-valid environment number</param>
        // <param name="titleID">The title id (in HEX)</param>
        // <param name="consoleType">Console type</param>
        // <param name="type">0=base, 1=update, 2=beta</param>
        // <returns>Indicates whether the version exists as the given type</returns>
        protected bool VerifyVersions(string verStr, string consoleType, string envStr, string titleID, int type)
        {
            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;
            try
            {
                if (consoleType.ToUpper() == "XBOX1")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTXbox1"].ToString().Trim();
                }
                if (consoleType.ToUpper() == "XENON (360)")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTXenon"].ToString().Trim();
                }
                if (consoleType.ToUpper() == "PC (PANORAMA)")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTPC"].ToString().Trim();
                }
            }
            catch (Exception ex)
            {
                LogMessage("Exception occured while reading web.config file in Function VerifyVersions()..." + ex.Message);
                FireEvent("Exception occured while reading web.config file in Function VerifyVersions()..." + ex.Message, EVENTID_Tracing_Init_Error, 1);
                throw new WebConfigException("Exception occured while reading web.config file in Function VerifyVersions()..." + ex.Message);
            }
            // accesses the Title Verification tool
            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_versions " + envStr + ", " + "0x" + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                while (dataReader.Read())
                {
                    if (type == 0 && (("0X" + verStr.ToUpper()) == dataReader["HexBaseVer"].ToString().ToUpper()) && (consoleType.ToUpper() == dataReader["ConsoleType"].ToString().ToUpper()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 1 && (("0X" + verStr.ToUpper()) == dataReader["HexUpdVer"].ToString().ToUpper()) && (consoleType.ToUpper() == dataReader["ConsoleType"].ToString().ToUpper()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 2 && (("0X" + verStr.ToUpper()) == dataReader["HexBetaVer"].ToString().ToUpper()) && (consoleType.ToUpper() == dataReader["ConsoleType"].ToString().ToUpper()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }

        protected PropManagerRequest.RequestInfo GetRequestObjFromBug(out string lError, string optionName, string bugID)
        {
            lError = "";
            PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();
            string msg = "";

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
            {
                lError += "Request Couldn't be processed further. Failed to connect to Product Studio. Please try again later.";
                return requestData;
            }

            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            if (myBug == null)
            {
                lError += "The bug doesn't exist";
                return requestData;
            }

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);
            if (myBug.Files.Count == 0)
            {
                lError += "AutoPopulate functionality is not compatible with the Linked bug provided.";
                return requestData;
            }

            ArrayList xmlFiles = new ArrayList();
            int index = 0;
            try
            {
                for (int i = 0; i < myBug.Files.Count; i++)
                {
                    if (Path.GetExtension(myBug.Files[i].FileName).ToLower() == ".xml")
                    {
                        index = i;
                        xmlFiles.Add(myBug.Files[i].FileName);
                    }
                }
                if (xmlFiles.Count > 0)
                {
                    myBug.Files[index].SaveToFile(g_serializedTempPath + "\\" + Path.GetFileName(myBug.Files[index].FileName), false);
                }

                myBug.Save(true);
            }
            catch (Exception ex)
            {
                LogMessage("Unable to save bug and/or pull files from bug in function GetRequestObjFromBug(). " + ex.Message);
            }

            if (xmlFiles.Count == 0)
            {
                requestData.requestName = null;
                return requestData;
            }

            StreamReader sr = new StreamReader(g_serializedTempPath + "\\" + xmlFiles[xmlFiles.Count - 1].ToString());
            string xmlStr = sr.ReadToEnd();
            sr.Close();

            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlStr));
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
            requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

            try
            {
                if (requestData.requestVersion == null)
                {
                    requestData.requestName = null;
                    return requestData;
                }
                else if (!Regex.IsMatch(requestData.requestName, optionName, RegexOptions.IgnoreCase))
                {
                    if (!requestData.requestName.Trim().ToLower().Equals(optionName.Trim().ToLower()))
                    {
                        lError += "The Linked bug provided is not of this request type. Request types must match to submit this request.";
                    }
                }
            }
            catch (Exception ex)
            {
                requestData.requestName = null;
                return requestData;
            }

            return requestData;
        }

        //public bool VerifyBugTitleMatch(string bugID, string envName, string bugOption, string titleID, out string lError)
        //{
        //    lError="";

        //    titleID = titleID.Trim();
        //    if (!titleID.Contains("0x"))
        //        titleID = "0x" + titleID;

        //    ProductStudio.Directory psDirectory = null;
        //    Product psProduct = null;
        //    Datastore psDataStore = null;
        //    if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
        //    {
        //        lError+= "Could not connect to Product Studio to validate the " + envName + " bug";
        //        return false;
        //    }

        //    Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
        //    try
        //    {
        //        if (myBug == null)
        //        {
        //            if (lError != null)
        //                lError+= "The " + envName + " bug provided (PS #" + bugID + ") does not exist</li>";
        //            return false;
        //        }

        //        myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);

        //        string bugIDEnv = "";
        //        if (g_TEST)
        //        {
        //            bugIDEnv = myBug.Fields["Node Name"].Value.ToString();
        //            if (bugIDEnv == "Seattle L3")
        //                bugIDEnv = "Seattle Level 3";
        //        }
        //        else
        //            bugIDEnv = myBug.Fields["Production Environment"].Value.ToString();

        //        if (envName == "Production")
        //            envName = "Seattle Level 3";
        //        if (bugIDEnv != envName)
        //        {
        //            if (envName == "Seattle Level 3")
        //                envName = "Production";

        //            lError+= "The bug provided (PS #" + bugID + ") is not a " + envName + " bug.";
        //            return false;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        LogMessage("A Product Studio error occurred. Exception: " + ex.Message);
        //        lError+= "Failed to validate the " + envName + " bug's title matches the provided Title ID. Exception: " + ex.Message;
        //        return false;
        //    }

        //    string workflowPath = ConfigurationManager.AppSettings["workflowPath"].ToString();
        //    string workflowListName = ConfigurationManager.AppSettings["workflowListName"].ToString();
        //    string workflowHistoryName = ConfigurationManager.AppSettings["workflowHistoryName"].ToString();
        //    string servername = ConfigurationManager.AppSettings["ServerName"].ToString();
        //    SPWeb web = null;
        //    SPSite site = null;
        //    SPSecurity.RunWithElevatedPrivileges(delegate()
        //    {
        //        site = new SPSite(servername);

        //        //site.AllowUnsafeUpdates = true;

        //        web = site.OpenWeb();


        //    });
        //        web.AllowUnsafeUpdates = true;
        //        site.AllowUnsafeUpdates = true;
        //        SPList list = web.Lists[workflowListName.Trim()];
        //        SPList historyList = web.Lists[workflowHistoryName];
        //    bool problem = true;

        //    for (int i = list.Items.Count - 1; i >= 0; i--)
        //    {
        //        SPListItem spItem = list.Items[i];
        //        if (spItem["PS Bug"] != null && spItem["PS Bug"].ToString().Contains(bugID))
        //        {
        //            if (spItem.Attachments.Count ==1)
        //            {
        //                try
        //                {
        //                    PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();

        //                    string xmlName = spItem.Attachments[0];
        //                    if (System.IO.File.Exists(g_serializedTempPath + xmlName))
        //                    {
        //                        problem = false;

        //                        StreamReader sr = new StreamReader(g_serializedTempPath + xmlName);
        //                        string xmlData = sr.ReadToEnd();
        //                        sr.Close();

        //                        MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlData));
        //                        XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
        //                        requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

        //                        if (requestData.requestVersion == null)
        //                        {
        //                            lError+= "Cannot verify Title IDs match. The provided bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.";
        //                            return false;
        //                        }
        //                        else if (requestData.requestName != bugOption)
        //                        {
        //                            lError += "The Bug ID provided is not a '" + bugOption + "' request.";
        //                            return false;
        //                        }
        //                        else if (requestData.requestTitleID.ToUpper() != titleID.ToUpper())
        //                        {
        //                            lError+= "The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.";
        //                            return false;
        //                        }
        //                    }
        //                    break;
        //                }
        //                catch (Exception)
        //                {
        //                    problem = true;
        //                }
        //            }
        //         }
        //    }

        //    // if the XML file doesn't exist in the expected directory, look in the PS bug for an attachment. This usually means the workflow has completed
        //    if (problem)
        //    {
        //        try
        //        {
        //            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);
        //            if (myBug.Files.Count == 0)
        //            {
        //                lError+= "Cannot verify Title IDs match.  The provided Bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.";
        //                return false;
        //            }

        //            ArrayList xmlFiles = new ArrayList();
        //            ListItem xmlFile = new ListItem();
        //            try
        //            {
        //                for (int i = 0; i < myBug.Files.Count; i++)
        //                {
        //                    if (Path.GetExtension(myBug.Files[i].FileName).ToLower() == ".xml")
        //                        xmlFiles.Add(new ListItem(myBug.Files[i].FileName, i.ToString()));
        //                }
        //                if (xmlFiles.Count > 0)
        //                {
        //                    xmlFile = (ListItem)xmlFiles[xmlFiles.Count - 1];
        //                    myBug.Files[Convert.ToInt32(xmlFile.Value)].SaveToFile(g_serializedTempPath + "\\" + Path.GetFileName(xmlFile.Text), false);
        //                }

        //                myBug.Save(true);
        //            }
        //            catch (Exception ex)
        //            {
        //                LogMessage("Unable to save bug and/or pull files from bug in function GetRequestObjFromBug(). " + ex.Message);
        //            }

        //            if (xmlFiles.Count == 0)
        //            {
        //                lError+= "Cannot verify Title IDs match. The provided Bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.";
        //                return false;
        //            }

        //            StreamReader sr = new StreamReader(g_serializedTempPath + xmlFile.Text);
        //            string xmlStr = sr.ReadToEnd();
        //            sr.Close();

        //            PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();
        //            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlStr));
        //            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
        //            requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

        //            try
        //            {
        //                System.IO.File.Delete(g_serializedTempPath + xmlFile.Text);
        //            }
        //            catch (Exception) {/* do nothing here */}

        //            try
        //            {
        //                if (requestData.requestVersion == null)
        //                {
        //                    lError+= "Cannot verify Title IDs match. The provided bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.";
        //                    return false;
        //                }
        //                else if (requestData.requestName != bugOption)
        //                {
        //                    lError+= "The Bug ID provided is not a '" + bugOption + "' request.";
        //                    return false;
        //                }
        //                else if (requestData.requestTitleID.ToUpper() != titleID.ToUpper())
        //                {
        //                    lError+= "The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.";
        //                    return false;
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                lError+= "Cannot verify Title IDs match. Please wait for the XLAST to be propped for the Title ID provided before submitting this request. Exception caught: " + ex.Message;
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            LogMessage("A Product Studio error occurred. Exception: " + ex.Message);
        //            if (lError != null)
        //                lError+= "Failed to validate the " + envName + " bug's title matches the provided Title ID. Exception: " + ex.Message;
        //            return false;
        //        }
        //    }

        //    return true;
        //}

        protected void InitConfigXML()
        {
            g_xmlConfig = new DataSet();
            try { g_xmlConfig.ReadXmlSchema(HttpContext.Current.Server.MapPath("PMConfig.xsd")); }
            catch (Exception ex) { LogMessage("Error reading Configuration XML data. " + ex.Message); throw ex; }


            try { g_xmlConfig.ReadXml(HttpContext.Current.Server.MapPath("PMConfig.xml")); }
            catch (Exception ex) { LogMessage("Error reading Configuration XML data. " + ex.Message); throw ex; }


        }
        public RequestStatus GetEnumValue(int s)
        {
            switch (s)
            {
                case 0:
                    return RequestStatus.NotStarted;
                case 1:
                    return RequestStatus.FailedOnStart;
                case 2:
                    return RequestStatus.InProgress;
                case 3:
                    return RequestStatus.ErrorOccurred;
                case 4:
                    return RequestStatus.StoppedByUser;
                case 5:
                    return RequestStatus.Completed;
                case 6:
                    return RequestStatus.FailedOnStartRetrying;
                case 7:
                    return RequestStatus.ErrorOccurredRetrying;
                case 8:
                    return RequestStatus.ViewQueryOverflow;
                default:
                    return RequestStatus.DoesNotExists;


            }
        }
        protected string[] GetEnvName(out Hashtable h)
        {
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized)
                InitConfigXML();
            int i = 0;
            ArrayList Envname = new ArrayList();
            h = new Hashtable();
            try
            {
                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        h.Add(dr["Name"].ToString(), dr["TVTCode"].ToString());
                        Envname.Add(dr["Name"].ToString());
                        i++;
                    }

                }
            }
            catch (Exception ex)
            {
                LogMessage("Exception Caught :" + ex.Message);
                return (string[])Envname.ToArray(typeof(string));
            }
            return (string[])Envname.ToArray(typeof(string));
        }

        protected EnvInfo GetEnvInfo(string EnvName)
        {
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized)
                InitConfigXML();

            EnvInfo envInfo = new EnvInfo();
            try
            {
                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        if (dr["Name"].ToString().ToUpper().Equals(EnvName.ToUpper()))
                        {
                            envInfo.EnvType = dr["Type"].ToString();
                            envInfo.TVTEnvCode = dr["TVTCode"].ToString();
                            envInfo.MassiveServiceId = dr["MassiveServiceId"].ToString();
                            envInfo.MassiveSiteId = dr["MassiveSiteId"].ToString();
                            envInfo.Certificate = dr["Certificate"].ToString();
                            envInfo.MassiveCertificate = dr["MassiveCertificate"].ToString();
                        }
                    }
                    return envInfo;
                }
                else
                {
                    LogMessage("The XML data has errors in it. Could not Get Environments.");

                }

            }
            catch (Exception ex)
            {
                LogMessage("Exception Caught :" + ex.Message);
                throw new Exception("Exception caught while reading configuration file in function GetEnvInfo() " + ex.Message);
            }
            return envInfo;
        }

        protected ConfigInfo GetPreReqBugInfo(string EnvName, string optionType)
        {
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized)
                InitConfigXML();

            ConfigInfo configInfo = new ConfigInfo();
            try
            {

                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        if (dr["Name"].ToString().ToUpper().Equals(EnvName.ToUpper()))
                        {
                            foreach (DataRow dr1 in dr.GetChildRows("Environment_Request"))
                            {
                                if (dr1["Type"].ToString().ToUpper().Equals(optionType.ToUpper()))
                                {
                                    foreach (DataRow dr2 in dr1.GetChildRows("Request_PreReqBug"))
                                    {
                                        configInfo.PreReqBug.EnvName = dr2["EnvName"].ToString();
                                        configInfo.PreReqBug.Status = dr2["BugStatus"].ToString();
                                        configInfo.PreReqBug.OptionType = dr2["Type"].ToString();
                                        configInfo.PreReqBug.EnvLabel = dr2["Label"].ToString();

                                    }
                                    foreach (DataRow dr3 in dr1.GetChildRows("Request_PreReqTitleBug"))
                                    {
                                        configInfo.PreReqTitleBug.EnvName = dr3["EnvName"].ToString();
                                        configInfo.PreReqTitleBug.Status = dr3["BugStatus"].ToString();
                                        configInfo.PreReqTitleBug.OptionType = dr3["Type"].ToString();
                                        configInfo.PreReqTitleBug.EnvLabel = dr3["Label"].ToString();
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The XML data has errors in it. Could not get pre required Bug Information ");
                }

            }
            catch (Exception ex)
            {
                LogMessage("Exception Caught :" + ex.Message);
                throw new Exception("Exception caught while reading configuration file in function GetPreReqBugInfo() " + ex.Message);
            }
            return configInfo;
        }

        protected bool VerifyBugID(string bugID, string envName, string label, string bugOption, string titleID, string Isclosed, out string lError)
        {
            bool problem = false;
            lError = "";

            if (!IsFieldValid(bugID, "BugID") || bugID == "")
            {
                lError += "Invalid Bug ID.";
                return false;
            }
            if (!(titleID.Equals("")))
            {
                titleID = titleID.Trim();
                if (!titleID.Contains("0x"))
                    titleID = "0x" + titleID;
            }

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;
            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
            {
                if (lError != null)
                    lError += "Could not connect to Product Studio to validate the  bug";
                return false;
            }
            string bugIDEnv = "";
            string bugIDStatus = "";
            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            try
            {
                if (myBug == null)
                {
                    if (lError != null)
                        lError += "The  bug provided (PS #" + bugID + ") does not exist";
                    return false;
                }

                myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);
                bugIDStatus = myBug.Fields[g_psStatusField].Value.ToString();



                bugIDEnv = myBug.Fields[g_psEnvField].Value.ToString();
            }
            catch (Exception ex)
            {
                LogMessage("A Product Studio error occurred. Exception: " + ex.Message);
                if (lError != null)
                    lError += "Failed to validate the  bug. Exception: " + ex.Message;
                return false;
            }
            try
            {
                if (envName == null)
                {
                    lError += "Environment Information of pre required bug is missing from configuration file.";
                    return false;
                }
                if (!Regex.IsMatch(bugIDEnv, envName, RegexOptions.IgnoreCase))
                {
                    lError += "The bug provided (PS #" + bugID + ") is not in " + label + " Environment.";
                    return false;
                }

            }
            catch (ArgumentNullException)
            {
                lError += "Environment Information of pre required bug is missing from configuration file.";
                return false;
            }
            catch (NullReferenceException)
            {
                lError += "Environment Information of pre required bug is missing from configuration file.";
                return false;
            }
            catch (Exception ex)
            {
                lError += "Environment Information of pre required bug couldn't be verified.Exception: " + ex.Message;
                return false;
            }

            try
            {
                if (!(Isclosed.Equals("")))
                {
                    if (!Regex.IsMatch(bugIDStatus, Isclosed, RegexOptions.IgnoreCase))
                    {
                        lError += "The " + label + " bug provided (PS #" + bugID + ") does not have required status.";
                        return false;
                    }
                }
            }
            catch (ArgumentNullException)
            {
                lError += "Status Information of pre required bug is missing from configuration file.";
                return false;
            }
            catch (NullReferenceException)
            {
                lError += "Status Information of pre required bug is missing from configuration file.";
                return false;
            }
            catch (Exception ex)
            {
                lError += "Status Information of pre required bug couldn't be verified.Exception: " + ex.Message;
                return false;

            }
            if ((myBug.Files.Count == 0))
            {
                problem = true;
            }


            if (!problem)
            {

                ArrayList xmlFiles = new ArrayList();
                ListItem xmlFile = new ListItem();
                try
                {
                    for (int i = 0; i < myBug.Files.Count; i++)
                    {
                        if (Path.GetExtension(myBug.Files[i].FileName).ToLower() == ".xml")
                            xmlFiles.Add(new ListItem(myBug.Files[i].FileName, i.ToString()));
                    }
                    if ((xmlFiles.Count == 0))
                    {
                        problem = true;
                    }
                    else if (xmlFiles.Count > 0)
                    {
                        xmlFile = (ListItem)xmlFiles[xmlFiles.Count - 1];
                        myBug.Files[Convert.ToInt32(xmlFile.Value)].SaveToFile(g_serializedTempPath + "\\" + Path.GetFileName(xmlFile.Text), false);
                    }

                    myBug.Save(true);
                }
                catch (Exception ex)
                {
                    LogMessage("Unable to save bug and/or pull files from bug in function GetRequestObjFromBug(). " + ex.Message);
                }

                if ((xmlFiles.Count != 0))
                {
                    StreamReader sr = new StreamReader(g_serializedTempPath + xmlFile.Text);
                    string xmlStr = sr.ReadToEnd();
                    sr.Close();

                    PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();
                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlStr));
                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                    requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

                    try
                    {
                        System.IO.File.Delete(g_serializedTempPath + xmlFile.Text);
                    }
                    catch (Exception) { }

                    try
                    {
                        if ((requestData.requestName == null) && (!(bugOption.Equals(""))))
                        {
                            lError+= "<li>Cannot verify request type match. The provided bug ID is not compatible for this check.</li>";
                            return false;
                        }
                        if (!Regex.IsMatch(bugOption.Trim(), requestData.requestName.ToString().Trim(), RegexOptions.IgnoreCase))
                        {
                            if (!requestData.requestName.Trim().ToLower().Equals(bugOption.Trim().ToLower()))
                            {
                                lError+= "<li>The Bug ID provided does not match with the request type required for this request.</li>";
                                return false;
                            }
                        }
                        if (!(titleID.Equals("")))
                        {
                            if (!(requestData.requestTitleID.ToString().ToUpper().Trim().Equals(titleID.ToUpper().Trim())))
                            {
                                lError+= "<li>The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.</li>";
                                return false;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!(titleID.Equals("")))
                            lError += "Cannot verify Title IDs match. Please wait for the XLAST to be propped for the Title ID provided before submitting this request. Exception caught: " + ex.Message;
                        else
                            lError += "Exception caught: " + ex.Message + "</li>";

                    }
                }
            }//end of (!problem)

            // if the XML file is not attached with PS bug, look in the sharepoint list items . This usually means the workflow has not completed yet 

            if (problem)
            {
                string workflowPath = ConfigurationSettings.AppSettings["workflowPath"].ToString();
                string workflowListName = ConfigurationSettings.AppSettings["workflowListName"].ToString();
                string workflowHistoryName = ConfigurationSettings.AppSettings["workflowHistoryName"].ToString();
                string servername = ConfigurationManager.AppSettings["ServerName"].ToString();
                SPWeb web = null;
                SPSite site = null;
                SPSecurity.RunWithElevatedPrivileges(delegate()
                {
                    site = new SPSite(servername);

                    //site.AllowUnsafeUpdates = true;

                    web = site.OpenWeb();


                });
                web.AllowUnsafeUpdates = true;
                site.AllowUnsafeUpdates = true;
                SPList list = web.Lists[workflowListName.Trim()];
                SPList historyList = web.Lists[workflowHistoryName];
                
                for (int i = list.Items.Count - 1; i >= 0; i--)
                {
                    SPListItem spItem = list.Items[i];
                    if (spItem["PS Bug"] != null && spItem["PS Bug"].ToString().Contains(bugID))
                    {
                        if (spItem.Attachments.Count >= 1)
                        {
                            try
                            {
                                PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();

                                string xmlName = spItem.Attachments[0];
                                if (System.IO.File.Exists(g_serializedTempPath + xmlName))
                                {
                                    problem = false;

                                    StreamReader sr = new StreamReader(g_serializedTempPath + xmlName);
                                    string xmlData = sr.ReadToEnd();
                                    sr.Close();

                                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlData));
                                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                                    requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

                                    if (!(titleID.Equals("")))
                                    {
                                        if (requestData.requestVersion == null)
                                        {
                                            lError+= "<li>Cannot verify Title IDs match. The provided bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.</li>";
                                            return false;
                                        }
                                        else if (requestData.requestTitleID.ToUpper().Trim() != titleID.ToUpper().Trim())
                                        {
                                            lError += "<li>The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.</li>";
                                            return false;
                                        }
                                    }
                                    if (bugOption == null)
                                    {
                                        lError += "<li>Request type of Bug required is missing from configuration File.</li>";
                                        return false;
                                    }
                                    if (!Regex.IsMatch(requestData.requestName, bugOption, RegexOptions.IgnoreCase))
                                    {
                                        if (!requestData.requestName.Trim().ToLower().Equals(bugOption.Trim().ToLower()))
                                        {
                                            lError+= "<li>The Bug ID provided is of invalid request type.</li>";
                                            return false;
                                        }
                                    }

                                }
                                break;
                            }
                            catch (Exception ex)
                            {
                                problem = true;
                                LogMessage("Exception caught while searching the BugId provided,in the sharepoint list item.Exception caught:" + ex.Message);
                                lError+= "<li>Exception caught while searching the BugId provided in the sharepoint list item.Exception caught:" + ex.Message + "</li>";
                                return false;
                            }
                        }
                    }
                }

            }

            return true;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\idualkeyidentifiable.cs ===
using System;
using System.Collections.Generic;

namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// Implemented by classes which needs to be identified by a non-unique SecondaryId
    /// </summary>
    public interface IDualKeyIdentifiable<T, U> : IIdentifiable<T>
    {
        /// <summary>
        /// The second identifier for the instance called the 'SecondId'
        /// </summary>
        U SecondaryId
        {
            get;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\iidentifiable.cs ===
using System;
using System.Collections.Generic;

namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// Implemented by classes which can be identified by a unique 'Id'
    /// </summary>
    public interface IIdentifiable<T>
    {
        /// <summary>
        /// The identifier for the instance
        /// </summary>
        T PrimaryId
        {
            get;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\Locks.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace Microsoft.Ems.Common.Utils
{
    public sealed class Optex:IDisposable
    {
        /// <summary>
        /// Counter to be updated by Threads
        /// </summary>
        private Int32 waiters = 0;
        /// <summary>
        /// Default Constructor
        /// </summary>
        public Optex()
        { 
            
        }
        /// <summary>
        /// Returns a boolean if theere is no Lock
        /// </summary>
        /// <returns></returns>
        public bool TryEnter()
        {
            int originalValue=Interlocked.CompareExchange(ref waiters, 1, 0);
            if (originalValue == 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// Leaves the Lock and Signals the Other threads
        /// </summary>
        public void Leave()
        {
            Interlocked.Decrement(ref waiters);
        }
        #region IDisposable Members
        /// <summary>
        /// Dispose method
        /// </summary>
        public void Dispose()
        {
            //Empty Implementation method
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\IKeyed.cs ===
using System;
using System.Collections.Generic;

namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// Implemented by by classes which can be identified by a key
    /// </summary>
    public interface IKeyed<T>
    {
        /// <summary>
        /// The Key for the instance
        /// </summary>
        T Id
        {
            get;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\Event.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Security;
using System.Security.AccessControl;
using System.Xml;
using System.Xml.XPath;

using Microsoft.Win32;

namespace Microsoft.Ems.Common.Utils
{
    public class Event
    {        
        private Int32 id;
        private String name;
        private EventLogEntryType level;
        private String source;

        private static readonly Dictionary<String,Event> events = new Dictionary<String,Event>();

        private static readonly String  NamespaceUri = String.Empty;

        private static readonly Int32 LowestPossibleEventId = 10000;
        private static readonly String DefaultLog = "Application";
        private static readonly String DefaultSource = "EMS";
        private static readonly Event DefaultEvent = new Event( LowestPossibleEventId, "DefaultEmsEvent", EventLogEntryType.Error, DefaultSource );

        /// <summary>
        /// Gets the id of the event
        /// </summary>
        public Int32 Id
        {
            get { return id; }
        }

        /// <summary>
        /// Gets the name of the event
        /// </summary>
        public String Name
        {
            get { return name; }
        }

        /// <summary>
        /// Gets the level of the event
        /// </summary>
        public EventLogEntryType Level
        {
            get { return level; }
        }

        /// <summary>
        /// Gets the source of the event
        /// </summary>
        public String Source
        {
            get { return source; }
        }


        /// <summary>
        /// Constructs an instance of an event from an xml navigator
        /// </summary>
        private Event( XPathNavigator navigator, String defaultSource )
        {
            id = Int32.Parse(navigator.GetAttribute("id", NamespaceUri));
            name = navigator.GetAttribute( "name", NamespaceUri );
            level = (EventLogEntryType)Enum.Parse( typeof(EventLogEntryType), navigator.GetAttribute( "level", NamespaceUri ));
            source = navigator.GetAttribute( "source", NamespaceUri );
            if ( String.IsNullOrEmpty( source ))
            {
                source = defaultSource;
            }
        }

        /// <summary>
        /// Constructs an instance of an event given the attributes
        /// </summary>
        private Event( Int32 id, String name, EventLogEntryType level, String source)
        {
            this.id = id;
            this.name = name;
            this.level = level;
            this.source = source;
        }

        /// <summary>
        /// Initializes the class
        /// </summary>
        /// <remarks>
        /// Particular care is taken in this static constructor to not throw any exceptions out
        /// and to leave things in a consistent state, such that even if this fails, the code 
        /// using it and raising event will not get other errors.
        /// </remarks>
        static Event()
        {
            // ----------
            // Find the install directory (held in the wxs file)
            //
            String installDir = UtilsSettings.GetSetting("DefinitionXmlPath");

            if (installDir == null)
            {
                try
                {
                    RegistryKey localMachine = Registry.LocalMachine;
                    RegistryKey rawCatalogDBRegistryKey = localMachine.OpenSubKey( "SOFTWARE\\Microsoft\\EMS\\RawCatalogDB" );
                    if ( rawCatalogDBRegistryKey == null )
                    {
                        rawCatalogDBRegistryKey = localMachine.OpenSubKey( "SOFTWARE\\Wow6432Node\\Microsoft\\EMS\\RawCatalogDB" );
                    }
                    installDir = ((String[])rawCatalogDBRegistryKey.GetValue( "InstallDir" ))[0];
                    installDir = Path.Combine( installDir, "Events.xml" );
                }
                catch( Exception exception )
                {
                    // Throw an event using the default source and then return. Make sure that throwing the 
                    // event in no way raises an exception that gets out of here.
                    try
                    {
                        EventLog.WriteEntry( DefaultSource,
                                                String.Format( "Unable to get the InstallDir from the registry. Will not be able to locate the file of events. Exception: {0}", exception),
                                                EventLogEntryType.Error,
                                                LowestPossibleEventId );
                    }
                    catch
                    {
                        // nothing you can do.
                    }
                    return;
                }
            }

            // ----------
            // Get the xml file containing the events and load it into an xml reader
            //
            XPathNavigator navigator = null;
            try
            {
                TextReader fileReader = new StreamReader( installDir );
                XPathDocument document = new XPathDocument( fileReader );
                navigator = document.CreateNavigator();
            }
            catch( Exception exception)
            {
                // Problem. Attempt to log an entry, throw no other exceptions and
                // then return.
                EventLog.WriteEntry( DefaultSource,
                                            String.Format( "Unable to create an XML navigator with the specified file. {0}", exception ),
                                            EventLogEntryType.Error,
                                            LowestPossibleEventId );
                return;
            }

            // ----------
            // For each event defined, create an instance of an event and add it to the dictionary            
            //
            try
            {
                Int32 eventIndex = 1;
                XPathNodeIterator iterator = navigator.Select("/Events/Event");
                while (iterator.MoveNext())
                {
                    try
                    {
                        Event e = new Event(iterator.Current, DefaultSource);
                        events.Add( e.Name, e );

                        // Make sure that the source exists
                        if( !EventLog.SourceExists(e.Source))
                        {
                            EventLog.CreateEventSource(e.Source, DefaultLog);
                        }
                    }
                    catch( Exception exception)
                    {
                        // Continue on so that we can create the other events
                        try
                        {
                            EventLog.WriteEntry( DefaultSource,
                                                    String.Format( "Unable read xml/create event/create event source for the {0} event in the list. Skipping. Exception:{1}", eventIndex, exception ),
                                                    EventLogEntryType.Error,
                                                    LowestPossibleEventId );
                        }
                        catch
                        {
                            // nothing you can do.
                        }
                    }
                    eventIndex++;
                }
            }
            catch( Exception exception )
            {
                // The xml could not be read or some other error
                try
                {
                    EventLog.WriteEntry( DefaultSource,
                                            String.Format( "Unable read xml and create events. Exception:{0}", exception ),
                                            EventLogEntryType.Error,
                                            LowestPossibleEventId );
                }
                catch
                {
                    // nothing you can do
                }
            }
        }

        public static Int32 RaiseTextEvent( String eventName, String text )
        {
            return RaiseEvent( eventName, text );
        }

        /// <summary>
        /// Raises a particular event.
        /// </summary>
        /// <remarks>
        /// One or both of eventName and data must be specified. If neither are specified then the method
        /// will simply return.
        /// </remarks>
        /// <param name="eventName">The name of the event, as listed in the xml file</param>
        /// <param name="data">The data to be associated with this instance of the event. The 'ToString()'
        ///                     method will be invoked to write it out. </param>
        /// <returns>
        /// Returns 1 if an event could be succesfully raised, zero otherwise. The only reason
        /// for this not being void is to allow the creation of SQL scaler function from this method.
        /// </returns>
        public static Int32 RaiseEvent( String eventName, Object data )
        {
            // This method should NEVER throw an exception and should make a best attempt to send an event
            // when invoked. In the case where the 'eventName' parameter is null but 'data' is not, we will
            // use the default EMS event. In the case where the 'data' parameter is null, but the 'eventName'
            // is not, we will just use String.Empty as the data.
            Event eventToRaise = GetEventToRaise( eventName );
            if ((eventToRaise == null) && (data != null)) 
            {
                eventToRaise = DefaultEvent;
            }
            else if ((eventToRaise != null) && (data == null)) 
            {
                // No data was specific but 
                data = String.Empty;
            }
            else if ((eventToRaise == null) && (data == null))
            {
                // nothing we can do in this case. Simply ignore
                return 0;
            }
            
            // Write out the event
            try
            {
                EventLog.WriteEntry( eventToRaise.Source, data.ToString(), eventToRaise.Level, eventToRaise.Id );
                return 1;
            }
            catch ( Exception )
            {
                // not much that we can do here if we fail to write an event
            } 

            return 0;
        }

        public static Int32 RaiseSqlExceptionEvent(SqlException e, String connectionString, String procName)
        {
            Event eventToRaise = null;
            if (String.IsNullOrEmpty(e.Server))
            {
                 eventToRaise = GetEventToRaise("Sql Server not found");
            }
            else if (e.Number > 18450 && e.Number < 18500) // Login Failure of some sort
            {
                eventToRaise = GetEventToRaise("Sql Login failed");
            }
            else // The connection is fine, but the Stored Procedure failed to execute successfully.
            {
                eventToRaise = GetEventToRaise("Sql Runtime");
            }
            if (eventToRaise != null)
            {
                string Message = String.Format("ConnectionString:{7}\r\nStored Procedure:{8}\r\nNumber:{0}\r\nLineNumber:{1}\r\nProcedure:{2}\r\nServer:{4}\r\nMessage:{5}\r\nSource:{6}\r\nStackTrace:{3}\r\n", e.Number, e.LineNumber, e.Procedure, e.StackTrace, e.Server, e.Message, e.Source, connectionString, procName);
                EventLog.WriteEntry(eventToRaise.Source, Message, eventToRaise.Level, eventToRaise.Id);
            }
            return 0;
        }

        private static Event GetEventToRaise( String eventName )
        {
            Event eventToRaise = null;
            if ( !String.IsNullOrEmpty( eventName ))
            {
                events.TryGetValue( eventName, out eventToRaise );
            }
            return eventToRaise;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\KeyedCache.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
  
namespace Microsoft.Ems.Common.Utils
{
    /// <summary>
    /// A generic class that allows lists of data which are keyed to be cached 
    /// The Key can be of any type, the data type to cache must implement IKeyed
    /// and must have a method that returns a List<> of the data type.
    /// </summary>
    public class KeyedCache<T,U> where U : IKeyed<T>
    {
        /// <summary>
        /// Holds the delegate (method) that will be invoked when data must be
        /// loaded from the db
        /// </summary>
        public delegate List<U> CachedDataLoaderDelegate();

        private CachedDataLoaderDelegate loader;
        private TimeSpan refreshPeriod;
        private Object lockObject;
        private CachedDataHolder data = null;

        private static readonly TimeSpan SmallestRefreshPeriod = new TimeSpan( 0, 0, 1 );
        private static readonly TimeSpan ZeroLengthPeriod = new TimeSpan( 0, 0, 0 );

        /// <summary>
        /// Creates an instance of the cache holder.
        /// </summary>
        /// <param name="loader">A delegate which is used to retrieve the data from the db</param>
        /// <param name="refreshPeriod">The max length of time the data can remain in the cache before being purged.</param>
        public KeyedCache ( CachedDataLoaderDelegate loader, TimeSpan refreshPeriod )
        {
            if ( loader == null )
            {
                throw new ArgumentNullException( "The method specified for populating the data was null. This cannot be." );
            }

            if ( refreshPeriod < SmallestRefreshPeriod )
            {
                throw new ArgumentException( "The cache refresh period must be greater than one second." );
            }
            
            this.loader = loader;
            this.refreshPeriod = refreshPeriod;
            this.data = null;
            lockObject = new Object();
        }

        /// <summary>
        /// Returns the instance of the data type identified by a key
        /// </summary>
        public U Get( T key )
        {
            try
            {
                return GetCachedData().dictionary[key];
            }
            catch( KeyNotFoundException  )
            {
                //throw new ArgumentException( String.Format( "No record matches the supplied key [{0}]", key ), exception );
                return default(U);
            }
        }

        /// <summary>
        /// Returns a list of all the instances of the data type
        /// </summary>
        public List<U> Get()
        {
            return GetCachedData().list;
        }

        /// <summary>
        /// Causes the cached data, if any, to be refreshed
        /// </summary>
        public void Refresh()
        {
            lock( lockObject )
            {
                if ( data != null )
                {
                    data = null;
                }
                GetCachedData();
            }
        }

        private CachedDataHolder GetCachedData()
        {
            // First thing to do is, atomically, get a reference to the current data object
            // The reason that we want our own reference is that the cache timer could null the
            // value of 'data' between our check for not null and when we return data (At this
            // point, we are not within the critical section, so other threads can interfere). This
            // way, we get our own reference - even if the timer nulls out 'data' we still 
            // have a reference that is valid for us to return.
            CachedDataHolder currentCachedDataHolder = data;
            if ( currentCachedDataHolder == null )
            {
                lock( lockObject )
                {
                    // We are now serialised - only one thread at a time.
                    if ( data == null )
                    {
                        // Attempt to invoke the delegate. If this throws an exception, the variable
                        // 'data' will be left in its null state. So the next thread through will 
                        // hit the same problem.
                        List<U> newList = loader();
                        Dictionary<T,U> newDictionary = new Dictionary<T,U>();
                        foreach( U element in newList )
                        {
                            newDictionary.Add( element.Id, element );
                        }

                        // No failures - create a new 'data' object
                        data = new CachedDataHolder();
                        data.list = newList;
                        data.dictionary = newDictionary;

                        // setup the timer to destroy object
                        Timer timer = new Timer( delegate( Object state ) { lock( lockObject ){ data = null; }},  // callback - anonymous
                                                        null,
                                                        refreshPeriod,
                                                        ZeroLengthPeriod );
                    }
                    else
                    {
                        // Some other thread beat us into the critical section and has set
                        // the data object for us. Since we are in the critical section, we are gaurenteed
                        // that between our test and this point, no other thread can interfere with 'data'
                    }

                    // Set the return variable
                    currentCachedDataHolder = data;
                }
            }
            return currentCachedDataHolder;
        }

        private class CachedDataHolder
        {
            public Dictionary<T,U> dictionary;
            public List<U> list;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\utils\UtilsSettings.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

namespace Microsoft.Ems.Common.Utils
{
    public class UtilsSettings
    {
        private static Dictionary<string, string> _settings;

        static UtilsSettings()
        {
            _settings = new Dictionary<string, string>();
        }

        public static string GetSetting(string key)
        {
            if (_settings.ContainsKey(key))
            {
                return _settings[key];
            }
            return null;
        }
        public static void SetSetting(string key, string value)
        {
            _settings[key] = value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\PropManager\PropManagerCore\PropManagerUI\PropManager\index.cs ===
/* ***************************************************************
 * Copyright (C) 2007 Microsoft Corporation.  All rights reserved.
 * 
 * Prop Manager
 * Front-End
 * Developer: Mikelangelo Marinaro (v-mikma)
 * index.cs - The primary code file for Prop Manager and all its validation functionality. 
 *            This page also launches WSS 3.0 workflows.
 * 
 * Version: 2.1
 * Start Date: February 5, 2007 (v1.0)
 * Last Updated: August, 2008
 * 
 * Update By:Leena Sheth(a-lsheth)
 * ***************************************************************/

using System;
using System.Data;
using System.Configuration;
using System.Collections.Generic;
using System.Diagnostics;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.Collections;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Threading;
using System.Xml.Serialization;
using System.Xml;
using System.Web.Mail;
using System.Workflow.Runtime;
using System.Reflection;
using ProductStudio;

using Microsoft.SharePoint;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;

namespace PropManagerCAP
{
    [Serializable()]
    public struct SerializableKeyValuePair
    {
        public string key;
        public string value;
    }
    public struct BugInfo
    {
        public string EnvName;
        public string Status;
        public string OptionType;
        public string EnvLabel;
    }
    public struct ConfigInfo
    {
        public BugInfo PreReqBug;
        public BugInfo PreReqTitleBug;
    }
    public struct EnvInfo
    {
        public string EnvType;
        public string TVTEnvCode;
        public string MassiveServiceId;
        public string MassiveSiteId;
        public string Certificate;
        public string MassiveCertificate;
    }
    public class PropManager : LayoutsPageBase
    {
        #region Global Variables

        // Event IDs
        public const int EVENTID_DB_TitleVer_Error = 26500;
        public const int EVENTID_PS_Connection_Error = 26501;
        public const int EVENTID_Tracing_Init_Error = 26503;

        // if set to true, Prop Manager will use the XboxOnlineTest DB for PS Bugs and will only send e-mail to the requester.
        bool g_TEST;

        public bool g_noSubmit;

        // if set to true, all options that have a Sub ID field will be required fields rather than optional
        public bool g_SubIDRequired;
        public bool g_fileDropToggle;

        // get Product Studio connection information
        public string g_psProductName = "";
        public string[] g_psDomains;
        public string g_psStatusField = "";
        public string g_psEnvField = "";
        
        // get Product Studio retry information
        public string[] g_emailAliases;
        public string g_serializedTempPath;
        public string g_requestXMLFileName;

        // logging state determined by web.config file
        private static bool g_logging;
        //server name on which sharepoint list item will be created
        public string g_servername;
        // location of the file share for the user to dump folders into for the requested transfer
        public string g_sharedFolder;
        public string g_fileDropPath;

        // gives access to the Title Verification tool
        public SqlConnection g_myConnection;

        // basic title to all application errors
        public const string g_errText = "<img src='Images\\warning_icon.gif'> <font size='2'><i>The following errors have occurred:</i></font><ul>";
        //email alias and name displayed on UI during maintenance mode
        public string g_emailcontactalias;
        public string g_emailcontactname;
        // basic title to all application errors
        public const string g_footerErrText = "<img src='Images\\warning_icon.gif'> <font color='red'><i>One or more errors have occurred. Your requests were not processed. See top of selected options for specifics.</i></font><br /><br />";

        // indicates whether there's a problem with *any* of the options
        public bool g_problem = false;

        // specifies whether or not to display the Title Prop Bug ID textbox for the 'Prop Un-keyed Offer' option
        public static bool g_unkeyedTitleBug = false;
        public bool g_ConfigXLSP_New_TitlePropRequired = false;
        public bool g_ConfigXLSP_Modify_TitlePropRequired = false;

        // dummy controls
        private TextBox g_tbDummy = null;
        private Label g_lDummy = null;

        // a global indicator if there was a problem connecting to Title Verification
        private bool g_titleVerConnErr = false;

        // a standard Connect to Product Studio error
        private string g_psErrText = "Failed to connect to Product Studio. Please try again later.";

        // handles all chat with the event log
        private static EventLog g_eventLog;

        // trace setup
        private static string g_logFile;

        // the global logging stream
        private static StreamWriter g_swLog;

        // keeps track, if production is selected, whether it's in "grab CertNet Bug files" mode or "file drop" mode
        public static bool g_PropUnKO_ProdDefault = true;
        public static bool g_PropKO_ProdDefault = true;
        public static bool g_PropXLAST_ProdDefault = true;
        public static bool g_PropMarket_ProdDefault = true;
        public static bool g_PropAU_ProdDefault = true;

        // holds all the permissions.xml data
        public static DataSet g_xmlData = new DataSet();

        // holds all the workflows.xml data
        public static DataSet g_xmlDataWorkflows = new DataSet();

        // holds all the workflows.xml data
        public static DataSet g_xmlDataAutoPropState = new DataSet();

        //holds all the PMConfig.xml data
        public static DataSet g_xmlConfig = null;

        // loaded from the PMConfig.xml file, this holds all the environments Prop Manager uses along with there codes used in Title Verification Tool
        public static Hashtable  g_environments = new Hashtable();

        // counts the numbers of times InitXML has been called from itself
        private static int g_permissionsCount = 0;
        #endregion

        #region .aspx Controls
        // WHEN ADDING NEW CONTROLS, DON'T FORGET TO ALSO ADD THEM TO THE GETCONTROLS() FUNCTION!
        protected TextBox tb_ConfigXLSP_Modify_TitleProp;
        protected TextBox tb_ConfigXLSP_New_TitleProp;
        protected DropDownList dList_ConfigXLSP_Modify_RemIPs_AvailableIPs;
        protected Button btn_ConfigXLSP_Modify_RemIPs_AddIP;
        protected Button btn_ConfigXLSP_Modify_RemIPs_RemIP;
        protected Button btn_ConfigXLSP_Modify_RemIPs_RemAllIPs;
        protected ListBox lb_ConfigXLSP_Modify_RemIPs_IPs;
        protected CheckBox cb_LBReset_All;
        protected Label lSpecial;
        protected Label lJScript;
        protected CheckBox cbRequestKO;
        protected CheckBox cbExpireOffer;
        protected CheckBox cbPropUnKO;
        protected CheckBox cbPropGonD;
        protected CheckBox cbPropKO;
        protected CheckBox cbPropXLAST;
        protected CheckBox cbPropMarket;
        protected CheckBox cbPropAU;
        protected CheckBox cbPropSample;
        protected CheckBox cbSwitchToGlobal;
        protected CheckBox cbAddBaseVer;
        protected CheckBox cbUploadTMS;
        protected CheckBox cbDeleteTMS;
        protected CheckBox cbConfigXLSP;
        protected CheckBox cbConfigEALSP;
        protected CheckBox cbConfigWebSvc;
        protected CheckBox cbLBReset;
        protected CheckBox cbTitleFencing;
        protected Label l_Req_Error;
        protected RadioButtonList rList_Prov;
        protected TextBox TextBox1;
        protected TextBox tb_Req_TitleID;
        protected Button btn_Prob_FindOffers;
        protected Label l_Req_OfferList;
        protected TextBox tb_Req_OfferIDs;
        protected DropDownList dropList_Prov;
        protected DropDownList dropList_Prov_Certificate;
        protected TextBox tb_Req_Resolve;
        protected TextBox tb_Req_DateTime;
        protected TextBox tb_Req_CCList;
        protected ListBox lb_Req_AliasList;
        protected Label l_EO_Error;
        protected RadioButtonList rList_EO;
        protected TextBox TextBox2;
        protected TextBox tb_EO_TitleID;
        protected Button btn_EO_FindOffers;
        protected Label l_EO_OfferList;
        protected TextBox tb_EO_OfferIDs;
        protected DropDownList dropList_EO;
        protected DropDownList dropList_EO_Certificate;
        protected TextBox tb_EO_Resolve;
        protected TextBox tb_EO_DateTime;
        protected TextBox tb_EO_CCList;
        protected ListBox lb_EO_AliasList;
        protected Label l_PropUnKO_Error;
        protected RadioButtonList rList_PropUnKO;
        protected TextBox tb_PropUnKO_BugID;
        protected TextBox tb_PropUnKO_BugID2;
        protected Button btn_PropUnKO_CertFiles;
        protected CheckBox cb_PropUnKO_Method1;
        protected ListBox lb_PropUnKO;
        protected Button btn_PropUnKO_SelectAll;
        protected Button btn_PropUnKO_DeselectAll;
        protected TextBox tb_PropUnKO_TitleBugID;
        protected Label l_PropUnKO_Guid;
        protected CheckBox cb_PropUnKO_Method2;
        protected DropDownList dropList_PropUnKO;
        protected DropDownList dropList_PropUnKO_Certificate;
        protected TextBox tb_PropUnKO_Resolve;
        protected TextBox tb_PropUnKO_DateTime;
        protected TextBox tb_PropUnKO_CCList;
        protected ListBox lb_PropUnKO_AliasList;
        protected Label l_PropKO_Error;
        protected RadioButtonList rList_PropKO;
        protected TextBox tb_PropKO_BugID;
        protected TextBox tb_PropKO_BugID2;
        protected Button btn_PropKO_CertFiles;
        protected CheckBox cb_PropKO_Method1;
        protected ListBox lb_PropKO;
        protected Button btn_PropKO_SelectAll;
        protected Button btn_PropKO_DeselectAll;
        protected Label l_PropKO_Guid;
        protected CheckBox cb_PropKO_Method2;
        protected DropDownList dropList_PropKO;
        protected DropDownList dropList_PropKO_Certificate;
        protected TextBox tb_PropKO_Resolve;
        protected TextBox tb_PropKO_DateTime;
        protected TextBox tb_PropKO_CCList;
        protected ListBox lb_PropKO_AliasList;
        protected Label l_PropXLAST_Error;
        protected RadioButtonList rList_PropXLAST;
        protected TextBox tb_PropXLAST_BugID;
        protected TextBox tb_PropXLAST_BugID2;
        protected Button btn_PropXLAST_CertFiles;
        protected CheckBox cb_PropXLAST_Method1;
        protected ListBox lb_PropXLAST;
        protected Button btn_PropXLAST_SelectAll;
        protected Button btn_PropXLAST_DeselectAll;
        protected Label l_XLAST_Guid;
        protected CheckBox cb_PropXLAST_Method2;
        protected TextBox tb_PropXLAST_XemID;
        protected TextBox TextBox50;
        protected TextBox tb_PropXLAST_BaseVerToAdd;
        protected DropDownList dList_PropXLAST_VerType;
        protected Button btn_PropXLAST_AddVersion;
        protected ListBox lb_PropXLAST_VersionAdds;
        protected Button btn_PropXLAST_RemVersion;
        protected Button btn_PropXLAST_RemAllVersions;
        protected DropDownList dropList_PropXLAST;
        protected DropDownList dropList_PropXLAST_Certificate;
        protected TextBox tb_PropXLAST_Resolve;
        protected TextBox tb_PropXLAST_DateTime;
        protected TextBox tb_PropXLAST_CCList;
        protected ListBox lb_PropXLAST_AliasList;
        protected Label l_PropMarket_Error;
        protected CheckBox cbPropMarketConfirm;
        protected RadioButtonList rList_PropMarket;
        protected TextBox tb_PropMarket_BugID;
        protected TextBox tb_PropMarket_BugID2;
        protected Button btn_PropMarket_CertFiles;
        protected CheckBox cb_PropMarket_Method1;
        protected ListBox lb_PropMarket;
        protected Button btn_PropMarket_SelectAll;
        protected Button btn_PropMarket_DeselectAll;
        protected Label l_Market_Guid;
        protected CheckBox cb_PropMarket_Method2;
        protected DropDownList dropList_PropMarket;
        protected DropDownList dropList_PropMarket_Certificate;
        protected TextBox tb_PropMarket_Resolve;
        protected TextBox tb_PropMarket_DateTime;
        protected TextBox tb_PropMarket_CCList;
        protected ListBox lb_PropMarket_AliasList;
        protected Label l_PropAU_Error;
        protected RadioButtonList rList_PropAU;
        protected TextBox tb_PropAU_BugID;
        protected TextBox tb_PropAU_BugID2;
        protected Button btn_PropAU_CertFiles;
        protected CheckBox cb_PropAU_Method1;
        protected ListBox lb_PropAU;
        protected Button btn_PropAU_SelectAll;
        protected Button btn_PropAU_DeselectAll;
        protected Label l_PropAU_Guid;
        protected CheckBox cb_PropAU_Method2;
        protected TextBox TextBox3;
        protected TextBox tb_PropAU_TitleID;
        protected Button btn_PropAU_FindName;
        protected Label l_PropAU_TitleName;
        protected TextBox tb_PropAU_XemID;
        protected TextBox TextBox8;
        protected TextBox tb_PropAU_SubID;
        protected TextBox TextBox13;
        protected TextBox tb_PropAU_Base;
        protected DropDownList rList_PropAU_VerType;
        protected TextBox TextBox14;
        protected TextBox tb_PropAU_Update;
        protected TextBox tb_PropAU_Console;
        protected DropDownList dropList_PropAU;
        protected DropDownList dropList_PropAU_Certificate;
        protected TextBox tb_PropAU_Resolve;
        protected TextBox tb_PropAU_DateTime;
        protected TextBox tb_PropAU_CCList;
        protected ListBox lb_PropAU_AliasList;
        protected Label l_PropSample_Error;
        protected RadioButtonList rList_PropSample;
        protected Label l_PropSample_Guid;
        protected TextBox TextBox16;
        protected TextBox tb_PropSample_TitleID;
        protected Button btn_PropSample_FindName;
        protected Label l_PropSample_TitleName;
        protected DropDownList dropList_PropSample;
        protected DropDownList dropList_PropSample_Certificate;
        protected TextBox tb_PropSample_Resolve;
        protected TextBox tb_PropSample_DateTime;
        protected TextBox tb_PropSample_CCList;
        protected ListBox lb_PropSample_AliasList;
        protected Label l_SwitchToGlobal_Error;
        protected RadioButtonList rList_SwitchToGlobal;
        protected TextBox tb_SwitchToGlobal_BugID;
        protected CheckBox cb_SwitchToGlobal_PubApproval;
        protected TextBox TextBox4;
        protected TextBox tb_SwitchToGlobal_TitleID;
        protected Button btn_SwitchToGlobal_FindName;
        protected Label l_SwitchToGlobal_TitleName;
        protected TextBox tb_SwitchToGlobal_XemID;
        protected TextBox TextBox9;
        protected TextBox tb_SwitchToGlobal_SubID;
        protected TextBox TextBox11;
        protected TextBox tb_SwitchToGlobal_Base;
        protected DropDownList rList_SwitchToGlobal_VerType;
        protected TextBox TextBox12;
        protected TextBox tb_SwitchToGlobal_Update;
        protected TextBox tb_SwitchToGlobal_DateTime;
        protected DropDownList dropList_SwitchToGlobal;
        protected DropDownList dropList_SwitchToGlobal_Certificate;
        protected TextBox tb_SwitchToGlobal_Resolve;
        protected TextBox tb_SwitchToGlobal_CCList;
        protected ListBox lb_SwitchToGlobal_AliasList;
        protected Label l_AddBaseVer_Error;
        protected RadioButtonList rList_AddBaseVer;
        protected TextBox tb_AddBaseVer_BugID;
        protected TextBox TextBox5;
        protected TextBox tb_AddBaseVer_TitleID;
        protected Button btn_AddBaseVer_FindName;
        protected Label l_AddBaseVer_TitleName;
        protected TextBox tb_AddBaseVer_TitleProp;
        protected TextBox tb_AddBaseVer_XemID;
        protected TextBox TextBox10;
        protected TextBox tb_AddBaseVer_SubID;
        protected TextBox TextBox15;
        protected TextBox tb_AddBaseVer_BaseVerToAdd;
        protected DropDownList dList_AddBaseVer_VerType;
        protected Button btn_AddBaseVer_AddVersion;
        protected ListBox lb_AddBaseVer_VersionAdds;
        protected Button btn_AddBaseVer_RemVersion;
        protected Button btn_AddBaseVer_RemAllVersions;
        protected DropDownList dropList_AddBaseVer;
        protected DropDownList dropList_AddBaseVer_Certificate;
        protected TextBox tb_AddBaseVer_Resolve;
        protected TextBox tb_AddBaseVer_DateTime;
        protected TextBox tb_AddBaseVer_CCList;
        protected ListBox lb_AddBaseVer_AliasList;
        protected Label l_UploadTMS_Error;
        protected RadioButtonList rList_UploadTMS;
        protected CheckBox cbUploadTMSToggle;
        protected TextBox tb_UploadTMS_DepBugID;
        protected Label l_UploadTMS_Guid;
        protected TextBox TextBox6;
        protected TextBox tb_UploadTMS_TitleID;
        protected Button btn_UploadTMS_FindName;
        protected Label l_UploadTMS_TitleName;
        protected DropDownList dropList_UploadTMS;
        protected DropDownList dropList_UploadTMS_Certificate;
        protected TextBox tb_UploadTMS_Resolve;
        protected TextBox tb_UploadTMS_DateTime;
        protected TextBox tb_UploadTMS_CCList;
        protected ListBox lb_UploadTMS_AliasList;
        protected Label l_DeleteTMS_Error;
        protected RadioButtonList rList_DeleteTMS;
        protected TextBox TextBox7;
        protected TextBox tb_DeleteTMS_TitleID;
        protected Button btn_DeleteTMS_FindName;
        protected Label l_DeleteTMS_TitleName;
        protected TextBox tb_DeleteTMS;
        protected DropDownList dropList_DeleteTMS;
        protected DropDownList dropList_DeleteTMS_Certificate;
        protected TextBox tb_DeleteTMS_Resolve;
        protected TextBox tb_DeleteTMS_DateTime;
        protected TextBox tb_DeleteTMS_CCList;
        protected ListBox lb_DeleteTMS_AliasList;
        protected Label l_ConfigXLSP_Error;
        protected RadioButtonList rList_ConfigXLSP_Environment;
        protected DropDownList dList_ConfigXLSP_Certificate;
        protected TextBox tb_ConfigXLSP_New_PartnerName;
        protected TextBox tb_ConfigXLSP_New_CertNameSugg;
        protected TextBox TextBox47;
        protected TextBox tb_ConfigXLSP_New_TitleID;
        protected Button btn_ConfigXLSP_New_FindName;
        protected Label l_ConfigXLSP_New_TitleName;
        protected TextBox tb_ConfigXLSP_IPs;
        protected RadioButtonList rList_ConfigXLSP_New_ServiceID;
        protected TextBox TextBox32;
        protected TextBox tb_ConfigXLSP_New_ServID1;
        protected TextBox TextBox33;
        protected TextBox tb_ConfigXLSP_New_SiteID1;
        protected TextBox TextBox34;
        protected TextBox tb_ConfigXLSP_New_ServID2;
        protected TextBox TextBox35;
        protected TextBox tb_ConfigXLSP_New_SiteID2;
        protected TextBox TextBox36;
        protected TextBox tb_ConfigXLSP_New_ServID3;
        protected TextBox TextBox37;
        protected TextBox tb_ConfigXLSP_New_SiteID3;
        protected TextBox TextBox38;
        protected TextBox tb_ConfigXLSP_New_ServID4;
        protected TextBox TextBox39;
        protected TextBox tb_ConfigXLSP_New_SiteID4;
        protected CheckBox cbConfigXLSPNewMassive;
        protected RadioButtonList rList_ConfigXLSP_New_SGVer;
        protected DropDownList dList_ConfigXLSP_Modify_CertNames;
        protected TextBox TextBox21;
        protected TextBox tb_ConfigXLSP_Modify_TitleID;
        protected Button btn_ConfigXLSP_Modify_FindName;
        protected Label l_ConfigXLSP_Modify_TitleName;
        protected CheckBox cbConfigXLSPAddTitle;
        protected CheckBox cbConfigXLSPAddServiceIDs;
        protected RadioButtonList rList_ConfigXLSP_Modify_ServiceID;
        protected TextBox TextBox19;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_ServID1;
        protected TextBox TextBox20;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_SiteID1;
        protected TextBox TextBox22;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_ServID2;
        protected TextBox TextBox23;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_SiteID2;
        protected TextBox TextBox24;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_ServID3;
        protected TextBox TextBox25;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_SiteID3;
        protected TextBox TextBox26;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_ServID4;
        protected TextBox TextBox27;
        protected TextBox tb_ConfigXLSP_Modify_AddTitle_SiteID4;
        protected CheckBox cbConfigXLSPModifyMassive;
        protected CheckBox cbConfigXLSPRemSvcids;
        protected DropDownList dList_ConfigXLSP_Modify_RemSvcids;
        protected Button btn_ConfigXLSP_Modify_RemSvcids_Add;
        protected ListBox lb_ConfigXLSP_Modify_RemSvcids;
        protected Button btn_ConfigXLSP_Modify_RemSvcids_Rem;
        protected Button btn_ConfigXLSP_Modify_RemSvcids_RemAll;
        protected CheckBox cbConfigXLSPAddIPs;
        protected TextBox tb_ConfigXLSP_Modify_AddIPs;
        protected CheckBox cbConfigXLSPRemIPs;
        protected TextBox tb_ConfigXLSP_Modify_RemIPs;
        protected DropDownList dList_ConfigXLSP_Renew_CertNames;
        protected TextBox tb_ConfigXLSP_CCList;
        protected ListBox lb_ConfigXLSP_AliasList;
        protected Label l_ConfigEALSP_Error;
        protected RadioButtonList rList_ConfigEALSP;
        protected TextBox TextBox18;
        protected TextBox tb_ConfigEALSP_TitleID;
        protected Button btn_ConfigEALSP_FindName;
        protected Label l_ConfigEALSP_TitleName;
        protected RadioButtonList rList_ConfigEALSP_ServiceID;
        protected DropDownList dList_ConfigEALSP_SvcID1;
        protected DropDownList dList_ConfigEALSP_SvcID2;
        protected DropDownList dList_ConfigEALSP_SvcID3;
        protected DropDownList dList_ConfigEALSP_SvcID4;
        protected CheckBox cbConfigEALSPMassive;
        protected TextBox tb_ConfigEALSP_CCList;
        protected ListBox lb_ConfigEALSP_AliasList;
        protected Label l_WebSvc_Error;
        protected RadioButtonList rList_WebSvc_Environment;
        protected DropDownList dList_WebSvc_Option;
        protected TextBox tb_WebSvc_New_PartnerName;
        protected TextBox tb_WebSvc_New_CertSugg;
        protected TextBox TextBox51;
        protected TextBox tb_WebSvc_New_TitleID;
        protected Button btn_WebSvc_New_AddTitleID;
        protected ListBox lb_WebSvc_New_TitleIDs;
        protected Button btn_WebSvc_New_RemTitleID;
        protected Button btn_WebSvc_New_RemAllTitleIDs;
        protected TextBox tb_WebSvc_New_IPList;
        protected RadioButtonList rList_WebSvc_New_APIs;
        protected Label l_WebSvc_New_APIs_Error;
        protected DropDownList dList_WebSvc_Modify_CertNames;
        protected CheckBox cb_WebSvc_Modify_AddTitles;
        protected TextBox tb_WebSvc_Modify_AddTitles_CurrentTitles;
        protected TextBox TextBox55;
        protected TextBox tb_WebSvc_Modify_AddTitles_TitleID;
        protected Button btn_WebSvc_Modify_AddTitles_AddTitleID;
        protected ListBox lb_WebSvc_Modify_AddTitles_TitleIDs;
        protected Button btn_WebSvc_Modify_AddTitles_RemTitleID;
        protected Button btn_WebSvc_Modify_AddTitles_RemAllTitleIDs;
        protected CheckBox cb_WebSvc_Modify_RemTitles;
        protected DropDownList dList_WebSvc_Modify_RemTitles_AvailableTitles;
        protected Button btn_WebSvc_Modify_RemTitles_AddTitleID;
        protected ListBox lb_WebSvc_Modify_RemTitles_TitleIDs;
        protected Button btn_WebSvc_Modify_RemTitles_RemTitleID;
        protected Button btn_WebSvc_Modify_RemTitles_RemAllTitleIDs;
        protected CheckBox cb_WebSvc_Modify_AddIPs;
        protected TextBox tb_WebSvc_Modify_AddIPs_CurrentIPs;
        protected TextBox tb_WebSvc_Modify_AddIPs_IP;
        protected Button btn_WebSvc_Modify_AddIPs_AddIP;
        protected ListBox lb_WebSvc_Modify_AddIPs_IPs;
        protected Button btn_WebSvc_Modify_AddIPs_RemIP;
        protected Button btn_WebSvc_Modify_AddIPs_RemAllIPs;
        protected CheckBox cb_WebSvc_Modify_RemIPs;
        protected DropDownList dList_WebSvc_Modify_RemIPs_AvailableIPs;
        protected Button btn_WebSvc_Modify_RemIPs_AddIP;
        protected ListBox lb_WebSvc_Modify_RemIPs_IPs;
        protected Button btn_WebSvc_Modify_RemIPs_RemIP;
        protected Button btn_WebSvc_Modify_RemIPs_RemAllIPs;
        protected CheckBox cb_WebSvc_Modify_AddAPIs;
        protected TextBox tb_WebSvc_Modify_AddAPIs_CurrentPackages;
        protected TextBox tb_WebSvc_Modify_AddAPIs_CurrentAPIs;
        protected DropDownList dList_WebSvc_Modify_AddAPIs_PackageList;
        protected Button btn_WebSvc_Modify_AddAPIs_ViewPackage;
        protected DropDownList dList_WebSvc_Modify_AddAPIs_AvailablePackages;
        protected Button btn_WebSvc_Modify_AddAPIs_AddPackage;
        protected DropDownList dList_WebSvc_Modify_AddAPIs_AvailableAPIs;
        protected Button btn_WebSvc_Modify_AddAPIs_AddAPI;
        protected ListBox lb_WebSvc_Modify_AddAPIs_APIs;
        protected Button btn_WebSvc_Modify_AddAPIs_RemAPI;
        protected Button btn_WebSvc_Modify_AddAPIs_RemAllAPIs;
        protected CheckBox cb_WebSvc_Modify_RemAPIs;
        protected DropDownList dList_WebSvc_Modify_RemAPIs_PackageList;
        protected Button btn_WebSvc_Modify_RemAPIs_ViewPackage;
        protected DropDownList dList_WebSvc_Modify_RemAPIs_AvailablePackages;
        protected Button btn_WebSvc_Modify_RemAPIs_AddPackage;
        protected DropDownList dList_WebSvc_Modify_RemAPIs_AvailableAPIs;
        protected Button btn_WebSvc_Modify_RemAPIs_AddAPI;
        protected ListBox lb_WebSvc_Modify_RemAPIs_APIs;
        protected Button btn_WebSvc_Modify_RemAPIs_RemAPI;
        protected Button btn_WebSvc_Modify_RemAPIs_RemAllAPIs;
        protected DropDownList dList_WebSvc_Renew_CertNames;
        protected TextBox tb_WebSvc_CCList;
        protected ListBox lb_WebSvc_AliasList;
        protected Label l_LBReset_Error;
        protected RadioButtonList rList_LBReset;
        protected TextBox TextBox17;
        protected TextBox tb_LBReset_TitleID;
        protected Button btn_LBReset_FindName;
        protected Label l_LBReset_TitleName;
        protected TextBox tb_LBReset_LBIDs;
        protected DropDownList dropList_LBReset_Certificate;
        protected TextBox tb_LBReset_DateTime;
        protected TextBox tb_LBReset_CCList;
        protected ListBox lb_LBReset_AliasList;
        protected Label l_TitleFencing_Error;
        protected RadioButtonList rList_TitleFencing;
        protected TextBox TextBox49;
        protected TextBox tb_TitleFencing_TitleID;
        protected Button btn_TitleFencing_FindName;
        protected Label l_TitleFencing_TitleName;
        protected TextBox tb_TitleFencing_TitleProp;
        protected TextBox tb_TitleFencing_Date;
        protected Label l_TitleFencing_DateInfo;
        protected DropDownList dropList_TitleFencing_Priority;
        protected TextBox tb_TitleFencing_Resolve;
        protected TextBox tb_TitleFencing_CCList;
        protected ListBox lb_TitleFencing_AliasList;
        protected Label lFooter;
        protected Button BtnSubmit;

        // WHEN ADDING NEW CONTROLS, DON'T FORGET TO ALSO ADD THEM TO THE GETCONTROLS() FUNCTION!
        #endregion


        protected void Page_Load(object sender, EventArgs e)
        {
            InitAppGlobals();
            SetAppState();

            if (!IsPostBack)
            {
                InitLogging();
                LogMessage("Prop Manager has been initialized!");

                InitXML();  // load XML data and config
            }
        }
        

        /* INITIALIZATION FUNCTIONS
        ----------------------------------------------------------------------------------*/

        protected ArrayList GetControls()
        {
            ArrayList controls = new ArrayList();

            controls.Add(tb_ConfigXLSP_Modify_TitleProp);
            controls.Add(tb_ConfigXLSP_New_TitleProp);
            controls.Add(dList_ConfigXLSP_Modify_RemIPs_AvailableIPs);
            controls.Add(btn_ConfigXLSP_Modify_RemIPs_AddIP);
            controls.Add(btn_ConfigXLSP_Modify_RemIPs_RemIP);
            controls.Add(btn_ConfigXLSP_Modify_RemIPs_RemAllIPs);
            controls.Add(lb_ConfigXLSP_Modify_RemIPs_IPs);
            controls.Add(cb_LBReset_All);
            controls.Add(lSpecial);
            controls.Add(lJScript);
            controls.Add(cbRequestKO);
            controls.Add(cbExpireOffer);
            controls.Add(cbPropUnKO);
            controls.Add(cbPropGonD);
            controls.Add(cbPropKO);
            controls.Add(cbPropXLAST);
            controls.Add(cbPropMarket);
            controls.Add(cbPropAU);
            controls.Add(cbPropSample);
            controls.Add(cbSwitchToGlobal);
            controls.Add(cbAddBaseVer);
            controls.Add(cbUploadTMS);
            controls.Add(cbDeleteTMS);
            controls.Add(cbConfigXLSP);
            controls.Add(cbConfigEALSP);
            controls.Add(cbConfigWebSvc);
            controls.Add(cbLBReset);
            controls.Add(cbTitleFencing);
            controls.Add(l_Req_Error);
            controls.Add(rList_Prov);
            controls.Add(TextBox1);
            controls.Add(tb_Req_TitleID);
            controls.Add(btn_Prob_FindOffers);
            controls.Add(l_Req_OfferList);
            controls.Add(tb_Req_OfferIDs);
            controls.Add(dropList_Prov);
            controls.Add(dropList_Prov_Certificate);
            controls.Add(tb_Req_Resolve);
            controls.Add(tb_Req_DateTime);
            controls.Add(tb_Req_CCList);
            controls.Add(lb_Req_AliasList);
            controls.Add(l_EO_Error);
            controls.Add(rList_EO);
            controls.Add(TextBox2);
            controls.Add(tb_EO_TitleID);
            controls.Add(btn_EO_FindOffers);
            controls.Add(l_EO_OfferList);
            controls.Add(tb_EO_OfferIDs);
            controls.Add(dropList_EO);
            controls.Add(dropList_EO_Certificate);
            controls.Add(tb_EO_Resolve);
            controls.Add(tb_EO_DateTime);
            controls.Add(tb_EO_CCList);
            controls.Add(lb_EO_AliasList);
            controls.Add(l_PropUnKO_Error);
            controls.Add(rList_PropUnKO);
            controls.Add(tb_PropUnKO_BugID);
            controls.Add(tb_PropUnKO_BugID2);
            controls.Add(btn_PropUnKO_CertFiles);
            controls.Add(cb_PropUnKO_Method1);
            controls.Add(lb_PropUnKO);
            controls.Add(btn_PropUnKO_SelectAll);
            controls.Add(btn_PropUnKO_DeselectAll);
            controls.Add(tb_PropUnKO_TitleBugID);
            controls.Add(l_PropUnKO_Guid);
            controls.Add(cb_PropUnKO_Method2);
            controls.Add(dropList_PropUnKO);
            controls.Add(dropList_PropUnKO_Certificate);
            controls.Add(tb_PropUnKO_Resolve);
            controls.Add(tb_PropUnKO_DateTime);
            controls.Add(tb_PropUnKO_CCList);
            controls.Add(lb_PropUnKO_AliasList);
            controls.Add(l_PropKO_Error);
            controls.Add(rList_PropKO);
            controls.Add(tb_PropKO_BugID);
            controls.Add(tb_PropKO_BugID2);
            controls.Add(btn_PropKO_CertFiles);
            controls.Add(cb_PropKO_Method1);
            controls.Add(lb_PropKO);
            controls.Add(btn_PropKO_SelectAll);
            controls.Add(btn_PropKO_DeselectAll);
            controls.Add(l_PropKO_Guid);
            controls.Add(cb_PropKO_Method2);
            controls.Add(dropList_PropKO);
            controls.Add(dropList_PropKO_Certificate);
            controls.Add(tb_PropKO_Resolve);
            controls.Add(tb_PropKO_DateTime);
            controls.Add(tb_PropKO_CCList);
            controls.Add(lb_PropKO_AliasList);
            controls.Add(l_PropXLAST_Error);
            controls.Add(rList_PropXLAST);
            controls.Add(tb_PropXLAST_BugID);
            controls.Add(tb_PropXLAST_BugID2);
            controls.Add(btn_PropXLAST_CertFiles);
            controls.Add(cb_PropXLAST_Method1);
            controls.Add(lb_PropXLAST);
            controls.Add(btn_PropXLAST_SelectAll);
            controls.Add(btn_PropXLAST_DeselectAll);
            controls.Add(l_XLAST_Guid);
            controls.Add(cb_PropXLAST_Method2);
            controls.Add(tb_PropXLAST_XemID);
            controls.Add(TextBox50);
            controls.Add(tb_PropXLAST_BaseVerToAdd);
            controls.Add(dList_PropXLAST_VerType);
            controls.Add(btn_PropXLAST_AddVersion);
            controls.Add(lb_PropXLAST_VersionAdds);
            controls.Add(btn_PropXLAST_RemVersion);
            controls.Add(btn_PropXLAST_RemAllVersions);
            controls.Add(dropList_PropXLAST);
            controls.Add(dropList_PropXLAST_Certificate);
            controls.Add(tb_PropXLAST_Resolve);
            controls.Add(tb_PropXLAST_DateTime);
            controls.Add(tb_PropXLAST_CCList);
            controls.Add(lb_PropXLAST_AliasList);
            controls.Add(l_PropMarket_Error);
            controls.Add(cbPropMarketConfirm);
            controls.Add(rList_PropMarket);
            controls.Add(tb_PropMarket_BugID);
            controls.Add(tb_PropMarket_BugID2);
            controls.Add(btn_PropMarket_CertFiles);
            controls.Add(cb_PropMarket_Method1);
            controls.Add(lb_PropMarket);
            controls.Add(btn_PropMarket_SelectAll);
            controls.Add(btn_PropMarket_DeselectAll);
            controls.Add(l_Market_Guid);
            controls.Add(cb_PropMarket_Method2);
            controls.Add(dropList_PropMarket);
            controls.Add(dropList_PropMarket_Certificate);
            controls.Add(tb_PropMarket_Resolve);
            controls.Add(tb_PropMarket_DateTime);
            controls.Add(tb_PropMarket_CCList);
            controls.Add(lb_PropMarket_AliasList);
            controls.Add(l_PropAU_Error);
            controls.Add(rList_PropAU);
            controls.Add(tb_PropAU_BugID);
            controls.Add(tb_PropAU_BugID2);
            controls.Add(btn_PropAU_CertFiles);
            controls.Add(cb_PropAU_Method1);
            controls.Add(lb_PropAU);
            controls.Add(btn_PropAU_SelectAll);
            controls.Add(btn_PropAU_DeselectAll);
            controls.Add(l_PropAU_Guid);
            controls.Add(cb_PropAU_Method2);
            controls.Add(TextBox3);
            controls.Add(tb_PropAU_TitleID);
            controls.Add(btn_PropAU_FindName);
            controls.Add(l_PropAU_TitleName);
            controls.Add(tb_PropAU_XemID);
            controls.Add(TextBox8);
            controls.Add(tb_PropAU_SubID);
            controls.Add(TextBox13);
            controls.Add(tb_PropAU_Base);
            controls.Add(rList_PropAU_VerType);
            controls.Add(TextBox14);
            controls.Add(tb_PropAU_Update);
            controls.Add(tb_PropAU_Console);
            controls.Add(dropList_PropAU);
            controls.Add(dropList_PropAU_Certificate);
            controls.Add(tb_PropAU_Resolve);
            controls.Add(tb_PropAU_DateTime);
            controls.Add(tb_PropAU_CCList);
            controls.Add(lb_PropAU_AliasList);
            controls.Add(l_PropSample_Error);
            controls.Add(rList_PropSample);
            controls.Add(l_PropSample_Guid);
            controls.Add(TextBox16);
            controls.Add(tb_PropSample_TitleID);
            controls.Add(btn_PropSample_FindName);
            controls.Add(l_PropSample_TitleName);
            controls.Add(dropList_PropSample);
            controls.Add(dropList_PropSample_Certificate);
            controls.Add(tb_PropSample_Resolve);
            controls.Add(tb_PropSample_DateTime);
            controls.Add(tb_PropSample_CCList);
            controls.Add(lb_PropSample_AliasList);
            controls.Add(l_SwitchToGlobal_Error);
            controls.Add(rList_SwitchToGlobal);
            controls.Add(tb_SwitchToGlobal_BugID);
            controls.Add(cb_SwitchToGlobal_PubApproval);
            controls.Add(TextBox4);
            controls.Add(tb_SwitchToGlobal_TitleID);
            controls.Add(btn_SwitchToGlobal_FindName);
            controls.Add(l_SwitchToGlobal_TitleName);
            controls.Add(tb_SwitchToGlobal_XemID);
            controls.Add(TextBox9);
            controls.Add(tb_SwitchToGlobal_SubID);
            controls.Add(TextBox11);
            controls.Add(tb_SwitchToGlobal_Base);
            controls.Add(rList_SwitchToGlobal_VerType);
            controls.Add(TextBox12);
            controls.Add(tb_SwitchToGlobal_Update);
            controls.Add(tb_SwitchToGlobal_DateTime);
            controls.Add(dropList_SwitchToGlobal);
            controls.Add(dropList_SwitchToGlobal_Certificate);
            controls.Add(tb_SwitchToGlobal_Resolve);
            controls.Add(tb_SwitchToGlobal_CCList);
            controls.Add(lb_SwitchToGlobal_AliasList);
            controls.Add(l_AddBaseVer_Error);
            controls.Add(rList_AddBaseVer);
            controls.Add(tb_AddBaseVer_BugID);
            controls.Add(TextBox5);
            controls.Add(tb_AddBaseVer_TitleID);
            controls.Add(btn_AddBaseVer_FindName);
            controls.Add(l_AddBaseVer_TitleName);
            controls.Add(tb_AddBaseVer_TitleProp);
            controls.Add(tb_AddBaseVer_XemID);
            controls.Add(TextBox10);
            controls.Add(tb_AddBaseVer_SubID);
            controls.Add(TextBox15);
            controls.Add(tb_AddBaseVer_BaseVerToAdd);
            controls.Add(dList_AddBaseVer_VerType);
            controls.Add(btn_AddBaseVer_AddVersion);
            controls.Add(lb_AddBaseVer_VersionAdds);
            controls.Add(btn_AddBaseVer_RemVersion);
            controls.Add(btn_AddBaseVer_RemAllVersions);
            controls.Add(dropList_AddBaseVer);
            controls.Add(dropList_AddBaseVer_Certificate);
            controls.Add(tb_AddBaseVer_Resolve);
            controls.Add(tb_AddBaseVer_DateTime);
            controls.Add(tb_AddBaseVer_CCList);
            controls.Add(lb_AddBaseVer_AliasList);
            controls.Add(l_UploadTMS_Error);
            controls.Add(rList_UploadTMS);
            controls.Add(cbUploadTMSToggle);
            controls.Add(tb_UploadTMS_DepBugID);
            controls.Add(l_UploadTMS_Guid);
            controls.Add(TextBox6);
            controls.Add(tb_UploadTMS_TitleID);
            controls.Add(btn_UploadTMS_FindName);
            controls.Add(l_UploadTMS_TitleName);
            controls.Add(dropList_UploadTMS);
            controls.Add(dropList_UploadTMS_Certificate);
            controls.Add(tb_UploadTMS_Resolve);
            controls.Add(tb_UploadTMS_DateTime);
            controls.Add(tb_UploadTMS_CCList);
            controls.Add(lb_UploadTMS_AliasList);
            controls.Add(l_DeleteTMS_Error);
            controls.Add(rList_DeleteTMS);
            controls.Add(TextBox7);
            controls.Add(tb_DeleteTMS_TitleID);
            controls.Add(btn_DeleteTMS_FindName);
            controls.Add(l_DeleteTMS_TitleName);
            controls.Add(tb_DeleteTMS);
            controls.Add(dropList_DeleteTMS);
            controls.Add(dropList_DeleteTMS_Certificate);
            controls.Add(tb_DeleteTMS_Resolve);
            controls.Add(tb_DeleteTMS_DateTime);
            controls.Add(tb_DeleteTMS_CCList);
            controls.Add(lb_DeleteTMS_AliasList);
            controls.Add(l_ConfigXLSP_Error);
            controls.Add(rList_ConfigXLSP_Environment);
            controls.Add(dList_ConfigXLSP_Certificate);
            controls.Add(tb_ConfigXLSP_New_PartnerName);
            controls.Add(tb_ConfigXLSP_New_CertNameSugg);
            controls.Add(TextBox47);
            controls.Add(tb_ConfigXLSP_New_TitleID);
            controls.Add(btn_ConfigXLSP_New_FindName);
            controls.Add(l_ConfigXLSP_New_TitleName);
            controls.Add(tb_ConfigXLSP_IPs);
            controls.Add(rList_ConfigXLSP_New_ServiceID);
            controls.Add(TextBox32);
            controls.Add(tb_ConfigXLSP_New_ServID1);
            controls.Add(TextBox33);
            controls.Add(tb_ConfigXLSP_New_SiteID1);
            controls.Add(TextBox34);
            controls.Add(tb_ConfigXLSP_New_ServID2);
            controls.Add(TextBox35);
            controls.Add(tb_ConfigXLSP_New_SiteID2);
            controls.Add(TextBox36);
            controls.Add(tb_ConfigXLSP_New_ServID3);
            controls.Add(TextBox37);
            controls.Add(tb_ConfigXLSP_New_SiteID3);
            controls.Add(TextBox38);
            controls.Add(tb_ConfigXLSP_New_ServID4);
            controls.Add(TextBox39);
            controls.Add(tb_ConfigXLSP_New_SiteID4);
            controls.Add(cbConfigXLSPNewMassive);
            controls.Add(rList_ConfigXLSP_New_SGVer);
            controls.Add(dList_ConfigXLSP_Modify_CertNames);
            controls.Add(TextBox21);
            controls.Add(tb_ConfigXLSP_Modify_TitleID);
            controls.Add(btn_ConfigXLSP_Modify_FindName);
            controls.Add(l_ConfigXLSP_Modify_TitleName);
            controls.Add(cbConfigXLSPAddTitle);
            controls.Add(cbConfigXLSPAddServiceIDs);
            controls.Add(rList_ConfigXLSP_Modify_ServiceID);
            controls.Add(TextBox19);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_ServID1);
            controls.Add(TextBox20);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_SiteID1);
            controls.Add(TextBox22);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_ServID2);
            controls.Add(TextBox23);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_SiteID2);
            controls.Add(TextBox24);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_ServID3);
            controls.Add(TextBox25);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_SiteID3);
            controls.Add(TextBox26);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_ServID4);
            controls.Add(TextBox27);
            controls.Add(tb_ConfigXLSP_Modify_AddTitle_SiteID4);
            controls.Add(cbConfigXLSPModifyMassive);
            controls.Add(cbConfigXLSPRemSvcids);
            controls.Add(dList_ConfigXLSP_Modify_RemSvcids);
            controls.Add(btn_ConfigXLSP_Modify_RemSvcids_Add);
            controls.Add(lb_ConfigXLSP_Modify_RemSvcids);
            controls.Add(btn_ConfigXLSP_Modify_RemSvcids_Rem);
            controls.Add(btn_ConfigXLSP_Modify_RemSvcids_RemAll);
            controls.Add(cbConfigXLSPAddIPs);
            controls.Add(tb_ConfigXLSP_Modify_AddIPs);
            controls.Add(cbConfigXLSPRemIPs);
            controls.Add(tb_ConfigXLSP_Modify_RemIPs);
            controls.Add(dList_ConfigXLSP_Renew_CertNames);
            controls.Add(tb_ConfigXLSP_CCList);
            controls.Add(lb_ConfigXLSP_AliasList);
            controls.Add(l_ConfigEALSP_Error);
            controls.Add(rList_ConfigEALSP);
            controls.Add(TextBox18);
            controls.Add(tb_ConfigEALSP_TitleID);
            controls.Add(btn_ConfigEALSP_FindName);
            controls.Add(l_ConfigEALSP_TitleName);
            controls.Add(rList_ConfigEALSP_ServiceID);
            controls.Add(dList_ConfigEALSP_SvcID1);
            controls.Add(dList_ConfigEALSP_SvcID2);
            controls.Add(dList_ConfigEALSP_SvcID3);
            controls.Add(dList_ConfigEALSP_SvcID4);
            controls.Add(cbConfigEALSPMassive);
            controls.Add(tb_ConfigEALSP_CCList);
            controls.Add(lb_ConfigEALSP_AliasList);
            controls.Add(l_WebSvc_Error);
            controls.Add(rList_WebSvc_Environment);
            controls.Add(dList_WebSvc_Option);
            controls.Add(tb_WebSvc_New_PartnerName);
            controls.Add(tb_WebSvc_New_CertSugg);
            controls.Add(TextBox51);
            controls.Add(tb_WebSvc_New_TitleID);
            controls.Add(btn_WebSvc_New_AddTitleID);
            controls.Add(lb_WebSvc_New_TitleIDs);
            controls.Add(btn_WebSvc_New_RemTitleID);
            controls.Add(btn_WebSvc_New_RemAllTitleIDs);
            controls.Add(tb_WebSvc_New_IPList);
            controls.Add(rList_WebSvc_New_APIs);
            controls.Add(l_WebSvc_New_APIs_Error);
            controls.Add(dList_WebSvc_Modify_CertNames);
            controls.Add(cb_WebSvc_Modify_AddTitles);
            controls.Add(tb_WebSvc_Modify_AddTitles_CurrentTitles);
            controls.Add(TextBox55);
            controls.Add(tb_WebSvc_Modify_AddTitles_TitleID);
            controls.Add(btn_WebSvc_Modify_AddTitles_AddTitleID);
            controls.Add(lb_WebSvc_Modify_AddTitles_TitleIDs);
            controls.Add(btn_WebSvc_Modify_AddTitles_RemTitleID);
            controls.Add(btn_WebSvc_Modify_AddTitles_RemAllTitleIDs);
            controls.Add(cb_WebSvc_Modify_RemTitles);
            controls.Add(dList_WebSvc_Modify_RemTitles_AvailableTitles);
            controls.Add(btn_WebSvc_Modify_RemTitles_AddTitleID);
            controls.Add(lb_WebSvc_Modify_RemTitles_TitleIDs);
            controls.Add(btn_WebSvc_Modify_RemTitles_RemTitleID);
            controls.Add(btn_WebSvc_Modify_RemTitles_RemAllTitleIDs);
            controls.Add(cb_WebSvc_Modify_AddIPs);
            controls.Add(tb_WebSvc_Modify_AddIPs_CurrentIPs);
            controls.Add(tb_WebSvc_Modify_AddIPs_IP);
            controls.Add(btn_WebSvc_Modify_AddIPs_AddIP);
            controls.Add(lb_WebSvc_Modify_AddIPs_IPs);
            controls.Add(btn_WebSvc_Modify_AddIPs_RemIP);
            controls.Add(btn_WebSvc_Modify_AddIPs_RemAllIPs);
            controls.Add(cb_WebSvc_Modify_RemIPs);
            controls.Add(dList_WebSvc_Modify_RemIPs_AvailableIPs);
            controls.Add(btn_WebSvc_Modify_RemIPs_AddIP);
            controls.Add(lb_WebSvc_Modify_RemIPs_IPs);
            controls.Add(btn_WebSvc_Modify_RemIPs_RemIP);
            controls.Add(btn_WebSvc_Modify_RemIPs_RemAllIPs);
            controls.Add(cb_WebSvc_Modify_AddAPIs);
            controls.Add(tb_WebSvc_Modify_AddAPIs_CurrentPackages);
            controls.Add(tb_WebSvc_Modify_AddAPIs_CurrentAPIs);
            controls.Add(dList_WebSvc_Modify_AddAPIs_PackageList);
            controls.Add(btn_WebSvc_Modify_AddAPIs_ViewPackage);
            controls.Add(dList_WebSvc_Modify_AddAPIs_AvailablePackages);
            controls.Add(btn_WebSvc_Modify_AddAPIs_AddPackage);
            controls.Add(dList_WebSvc_Modify_AddAPIs_AvailableAPIs);
            controls.Add(btn_WebSvc_Modify_AddAPIs_AddAPI);
            controls.Add(lb_WebSvc_Modify_AddAPIs_APIs);
            controls.Add(btn_WebSvc_Modify_AddAPIs_RemAPI);
            controls.Add(btn_WebSvc_Modify_AddAPIs_RemAllAPIs);
            controls.Add(cb_WebSvc_Modify_RemAPIs);
            controls.Add(dList_WebSvc_Modify_RemAPIs_PackageList);
            controls.Add(btn_WebSvc_Modify_RemAPIs_ViewPackage);
            controls.Add(dList_WebSvc_Modify_RemAPIs_AvailablePackages);
            controls.Add(btn_WebSvc_Modify_RemAPIs_AddPackage);
            controls.Add(dList_WebSvc_Modify_RemAPIs_AvailableAPIs);
            controls.Add(btn_WebSvc_Modify_RemAPIs_AddAPI);
            controls.Add(lb_WebSvc_Modify_RemAPIs_APIs);
            controls.Add(btn_WebSvc_Modify_RemAPIs_RemAPI);
            controls.Add(btn_WebSvc_Modify_RemAPIs_RemAllAPIs);
            controls.Add(dList_WebSvc_Renew_CertNames);
            controls.Add(tb_WebSvc_CCList);
            controls.Add(lb_WebSvc_AliasList);
            controls.Add(l_LBReset_Error);
            controls.Add(rList_LBReset);
            controls.Add(TextBox17);
            controls.Add(tb_LBReset_TitleID);
            controls.Add(btn_LBReset_FindName);
            controls.Add(l_LBReset_TitleName);
            controls.Add(tb_LBReset_LBIDs);
            controls.Add(dropList_LBReset_Certificate);
            controls.Add(tb_LBReset_DateTime);
            controls.Add(tb_LBReset_CCList);
            controls.Add(lb_LBReset_AliasList);
            controls.Add(l_TitleFencing_Error);
            controls.Add(rList_TitleFencing);
            controls.Add(TextBox49);
            controls.Add(tb_TitleFencing_TitleID);
            controls.Add(btn_TitleFencing_FindName);
            controls.Add(l_TitleFencing_TitleName);
            controls.Add(tb_TitleFencing_TitleProp);
            controls.Add(tb_TitleFencing_Date);
            controls.Add(l_TitleFencing_DateInfo);
            controls.Add(dropList_TitleFencing_Priority);
            controls.Add(tb_TitleFencing_Resolve);
            controls.Add(tb_TitleFencing_CCList);
            controls.Add(lb_TitleFencing_AliasList);
            controls.Add(lFooter);
            controls.Add(BtnSubmit);

            return controls;
        }

        /// <summary>
        /// Initializes global application settings, controls, and variables.
        /// </summary>
        protected void InitAppGlobals()
        {         
       
            try
            {
                g_noSubmit = Convert.ToBoolean(ConfigurationSettings.AppSettings["noSubmit"].Trim());
                g_TEST = Convert.ToBoolean(ConfigurationSettings.AppSettings["testState"].Trim());

                if (g_TEST)
                {
                    g_psProductName = Convert.ToString(ConfigurationSettings.AppSettings["psProductNameTest"].Trim());
                    g_psEnvField=Convert.ToString(ConfigurationSettings.AppSettings["psEnvFieldTestMode"].Trim());
                }
                else
                {
                    g_psProductName = Convert.ToString(ConfigurationSettings.AppSettings["psProductName"].Trim());
                    g_psEnvField=Convert.ToString(ConfigurationSettings.AppSettings["psEnvField"].Trim());
                }
                g_psDomains = Convert.ToString(ConfigurationSettings.AppSettings["psDomain"]).Split(';');
                g_psStatusField=Convert.ToString(ConfigurationSettings.AppSettings["psStatusField"].Trim());

                g_SubIDRequired = Convert.ToBoolean(ConfigurationSettings.AppSettings["subIDRequired"].Trim());
                g_fileDropToggle = Convert.ToBoolean(ConfigurationSettings.AppSettings["fileDropToggle"].Trim());
                g_emailAliases = ConfigurationSettings.AppSettings["emailAliases"].ToString().Split(("\r\n").ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                g_serializedTempPath = Convert.ToString(ConfigurationSettings.AppSettings["serializedFileTempPath"].Trim());
                g_sharedFolder = Convert.ToString(ConfigurationSettings.AppSettings["fileDropPointPath"].Trim());
                g_myConnection = new SqlConnection(ConfigurationSettings.AppSettings["dbConnStrTitleVer"].Trim());
                g_emailcontactalias = Convert.ToString(ConfigurationSettings.AppSettings["emailContactAlias"].Trim());
                g_emailcontactname = Convert.ToString(ConfigurationSettings.AppSettings["emailContactName"].Trim());
                g_servername = Convert.ToString(ConfigurationSettings.AppSettings["ServerName"].Trim());
            }
            catch (Exception ex)
            {
                Response.Write("<font size='4'>Error: Failed loading Prop Manager. The <b>web.config</b> file is missing from the project directory.</font><br><br> Exception caught: " + ex.Message);
                Response.End();
            }

            MaintainScrollPositionOnPostBack = true;

            this.BtnSubmit.Attributes.Add("onclick", GetPostBackEventReference(this.BtnSubmit).ToString() + ";this.value='Processing...';this.disabled = true;");
            btn_PropUnKO_CertFiles.Attributes.Add("onclick", GetPostBackEventReference(btn_PropUnKO_CertFiles).ToString() + ";this.value='Getting Filelist...';this.disabled = true;");
            btn_PropKO_CertFiles.Attributes.Add("onclick", GetPostBackEventReference(btn_PropKO_CertFiles).ToString() + ";this.value='Getting Filelist...';this.disabled = true;");
            btn_PropXLAST_CertFiles.Attributes.Add("onclick", GetPostBackEventReference(btn_PropXLAST_CertFiles).ToString() + ";this.value='Getting Filelist...';this.disabled = true;");
            btn_PropMarket_CertFiles.Attributes.Add("onclick", GetPostBackEventReference(btn_PropMarket_CertFiles).ToString() + ";this.value='Getting Filelist...';this.disabled = true;");
            btn_PropAU_CertFiles.Attributes.Add("onclick", GetPostBackEventReference(btn_PropAU_CertFiles).ToString() + ";this.value='Getting Filelist...';this.disabled = true;");

            string eventSource = "Prop Manager";
            g_eventLog = new EventLog("Application");
            g_eventLog.Source = eventSource;

            // clear out the errors on each page refresh so they get updated info
            l_Req_Error.Text = "";
            l_AddBaseVer_Error.Text = "";
            l_DeleteTMS_Error.Text = "";
            l_PropAU_Error.Text = "";
            l_PropKO_Error.Text = "";
            l_PropMarket_Error.Text = "";
            l_PropUnKO_Error.Text = "";
            l_PropXLAST_Error.Text = "";
            l_PropSample_Error.Text = "";
            l_SwitchToGlobal_Error.Text = "";
            l_UploadTMS_Error.Text = "";
            l_EO_Error.Text = "";
            l_ConfigXLSP_Error.Text = "";
            l_ConfigEALSP_Error.Text = "";
            l_WebSvc_Error.Text = "";
            l_LBReset_Error.Text = "";
            l_TitleFencing_Error.Text = "";

            this.lSpecial.Text = "";
            this.lJScript.Text = "";
            lFooter.Text = "";
          

            if (tb_PropUnKO_BugID2.Text != "") tb_PropUnKO_BugID.Text = tb_PropUnKO_BugID2.Text;
            if (tb_PropUnKO_BugID.Text != "") tb_PropUnKO_BugID2.Text = tb_PropUnKO_BugID.Text;

            if (tb_PropKO_BugID2.Text != "") tb_PropKO_BugID.Text = tb_PropKO_BugID2.Text;
            if (tb_PropKO_BugID.Text != "") tb_PropKO_BugID2.Text = tb_PropKO_BugID.Text;

            if (tb_PropXLAST_BugID2.Text != "") tb_PropXLAST_BugID.Text = tb_PropXLAST_BugID2.Text;
            if (tb_PropXLAST_BugID.Text != "") tb_PropXLAST_BugID2.Text = tb_PropXLAST_BugID.Text;

            if (tb_PropMarket_BugID2.Text != "") tb_PropMarket_BugID.Text = tb_PropMarket_BugID2.Text;
            if (tb_PropMarket_BugID.Text != "") tb_PropMarket_BugID2.Text = tb_PropMarket_BugID.Text;

            if (tb_PropAU_BugID2.Text != "") tb_PropAU_BugID.Text = tb_PropAU_BugID2.Text;
            if (tb_PropAU_BugID.Text != "") tb_PropAU_BugID2.Text = tb_PropAU_BugID.Text;

            g_fileDropPath = g_sharedFolder.Replace("\\\\", "\\\\\\\\");
            g_fileDropPath = g_fileDropPath.Replace("\\", "\\\\");           
           
            

            if (rList_WebSvc_Environment.SelectedIndex != -1)
            {
                int selIdx = rList_WebSvc_New_APIs.SelectedIndex;
                string selVal = "";

                if (selIdx > -1)
                    selVal = rList_WebSvc_New_APIs.Items[selIdx].Value;

                SqlCommand myCommand = null;
                SqlDataReader dr = null;

                try
                {
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();
                    EnvInfo envinfo = GetEnvInfo(rList_WebSvc_Environment.SelectedValue);
                    // pull titles based on an environment
                   // myCommand = new SqlCommand("EXEC p_get_env_packages " + GetTitleVerID(rList_WebSvc_Environment.SelectedValue), g_myConnection);
                    myCommand = new SqlCommand("EXEC p_get_env_packages " + envinfo.TVTEnvCode , g_myConnection);
                    dr = myCommand.ExecuteReader();

                    rList_WebSvc_New_APIs.Items.Clear();

                    while (dr.Read())
                    {
                        string curPackage = dr["vc_package_name"].ToString();
                        string curPackageID = dr["ti_ws_api_package_id"].ToString();

                        ListItem li = new ListItem(curPackage, curPackageID);
                        rList_WebSvc_New_APIs.Items.Add(li);
                    }
                    dr.Close();

                    g_myConnection.Close();
                }
                catch (Exception ex)
                {
                    LogMessage("Error loading API package options for configuring new Web Services.");
                }
                finally
                {
                    if (dr != null && !dr.IsClosed)
                        dr.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }

                l_WebSvc_New_APIs_Error.Text = "";

                if (selVal != "")
                {
                    for (int i = 0; i < rList_WebSvc_New_APIs.Items.Count; i++)
                    {
                        if (rList_WebSvc_New_APIs.Items[i].Value == selVal)
                        {
                            rList_WebSvc_New_APIs.SelectedIndex = i;
                            break;
                        }
                    }
                }
            }
            else
                l_WebSvc_New_APIs_Error.Text = "<font color='red' size='2'><li>Select an environment to generate available APIs.</li></font><br />";


            if (!this.IsPostBack)
            {
                ArrayList liList = new ArrayList();
                foreach (string alias in g_emailAliases)
                {
                    string fAlias = alias.Replace(":", " (") + ")";
                    string[] tempAry = fAlias.Split('(');
                    ListItem li = new ListItem(fAlias.Trim(), tempAry[0].Trim());

                    lb_Req_AliasList.Items.Add(li);
                    lb_EO_AliasList.Items.Add(li);
                    lb_PropUnKO_AliasList.Items.Add(li);
                    lb_PropKO_AliasList.Items.Add(li);
                    lb_PropXLAST_AliasList.Items.Add(li);
                    lb_PropMarket_AliasList.Items.Add(li);
                    lb_PropAU_AliasList.Items.Add(li);
                    lb_PropSample_AliasList.Items.Add(li);
                    lb_SwitchToGlobal_AliasList.Items.Add(li);
                    lb_AddBaseVer_AliasList.Items.Add(li);
                    lb_ConfigXLSP_AliasList.Items.Add(li);
                    lb_ConfigEALSP_AliasList.Items.Add(li);
                    lb_UploadTMS_AliasList.Items.Add(li);
                    lb_DeleteTMS_AliasList.Items.Add(li);
                    this.lb_LBReset_AliasList.Items.Add(li);
                    lb_TitleFencing_AliasList.Items.Add(li);
                    lb_WebSvc_AliasList.Items.Add(li);
                }

                g_PropUnKO_ProdDefault = true;
                g_PropKO_ProdDefault = true;
                g_PropXLAST_ProdDefault = true;
                g_PropMarket_ProdDefault = true;
                g_PropAU_ProdDefault = true;

                l_PropUnKO_Guid.Text = Guid.NewGuid().ToString();
                l_PropKO_Guid.Text = Guid.NewGuid().ToString();
                l_XLAST_Guid.Text = Guid.NewGuid().ToString();
                l_Market_Guid.Text = Guid.NewGuid().ToString();
                l_PropAU_Guid.Text = Guid.NewGuid().ToString();
                l_UploadTMS_Guid.Text = Guid.NewGuid().ToString();
                l_PropSample_Guid.Text = Guid.NewGuid().ToString();

                string[] envList = GetEnvName(out g_environments);
                
                foreach (string env in envList)
                {
                    ListItem li = new ListItem(env, env);
                    EnvInfo envinfo=GetEnvInfo(env);
                    
                    // add the environments
                    if (IsPermissionValid("RequestKeyedOffers", env)) rList_Prov.Items.Add(li);
                    if (IsPermissionValid("ExpireOffers", env)) rList_EO.Items.Add(li);
                    if (IsPermissionValid("PropUnkeyedOffers", env) || IsPermissionValid("PropGond", env)) rList_PropUnKO.Items.Add(li);
                    if (IsPermissionValid("PropKeyedOffer", env)) rList_PropKO.Items.Add(li);
                    if (IsPermissionValid("PropXLAST", env)) rList_PropXLAST.Items.Add(li);
                    if (IsPermissionValid("PropMarket", env)) rList_PropMarket.Items.Add(li);
                    if (IsPermissionValid("PropAutoUpdate", env)) rList_PropAU.Items.Add(li);
                    if (IsPermissionValid("PropSample", env)) rList_PropSample.Items.Add(li);
                    if (IsPermissionValid("SwitchSelective", env)) rList_SwitchToGlobal.Items.Add(li);
                    if (IsPermissionValid("AddBaseVersion", env)) rList_AddBaseVer.Items.Add(li);
                    if (IsPermissionValid("UploadTMS", env)) rList_UploadTMS.Items.Add(li);
                    if (IsPermissionValid("DeleteTMS", env)) rList_DeleteTMS.Items.Add(li);
                    if (IsPermissionValid("ConfigXLSP", env)) rList_ConfigXLSP_Environment.Items.Add(li);
                    if (IsPermissionValid("ConfigEALSP", env)) rList_ConfigEALSP.Items.Add(li);
                    if (IsPermissionValid("WebSvc", env)) rList_WebSvc_Environment.Items.Add(li);
                    if (IsPermissionValid("LeaderboardReset", env)) this.rList_LBReset.Items.Add(li);
                    if (IsPermissionValid("TitleFencing", env)) rList_TitleFencing.Items.Add(li);
                }

                if (rList_Prov.Items.Count == 0) this.cbRequestKO.Visible = false;
                else if (rList_EO.Items.Count == 0) this.cbExpireOffer.Visible = false;
                else if (rList_PropUnKO.Items.Count == 0) this.cbPropUnKO.Visible = false;
                else if (rList_PropUnKO.Items.Count == 0) this.cbPropGonD.Visible = false;
                else if (rList_PropKO.Items.Count == 0) this.cbPropKO.Visible = false;
                else if (rList_PropXLAST.Items.Count == 0) this.cbPropXLAST.Visible = false;
                else if (rList_PropMarket.Items.Count == 0) this.cbPropMarket.Visible = false;
                else if (rList_PropAU.Items.Count == 0) this.cbPropAU.Visible = false;
                else if (rList_PropSample.Items.Count == 0) this.cbPropSample.Visible = false;
                else if (rList_SwitchToGlobal.Items.Count == 0) this.cbSwitchToGlobal.Visible = false;
                else if (rList_AddBaseVer.Items.Count == 0) this.cbAddBaseVer.Visible = false;
                else if (rList_UploadTMS.Items.Count == 0) this.cbUploadTMS.Visible = false;
                else if (rList_DeleteTMS.Items.Count == 0) this.cbDeleteTMS.Visible = false;
                else if (rList_ConfigXLSP_Environment.Items.Count == 0) this.cbConfigXLSP.Visible = false;
                else if (rList_ConfigEALSP.Items.Count == 0) this.cbConfigEALSP.Visible = false;
                else if (rList_WebSvc_Environment.Items.Count == 0) this.cbConfigWebSvc.Visible = false;
                else if (this.rList_LBReset.Items.Count == 0) this.cbLBReset.Visible = false;
                else if (rList_TitleFencing.Items.Count == 0) this.cbTitleFencing.Visible = false;
            }
        }

        /// <summary>
        /// Sets the application's state to a mode such as Test Mode or Maintenance Mode.
        /// </summary>
        protected void SetAppState()
        {
            bool maintenanceMode = Convert.ToBoolean(ConfigurationSettings.AppSettings["maintenanceMode"].ToString());
            string maintenanceModeList = ConfigurationSettings.AppSettings["maintenanceModeUsers"].ToString();

            if (maintenanceMode)
            {
                bool canContinue = false;

                string[] approvedAry = maintenanceModeList.Split(',');
                foreach (string approvedGroup in approvedAry)
                {
                    if (User.IsInRole(approvedGroup.Trim()))
                    {
                        canContinue = true;
                        break;
                    }
                }

                if (!canContinue)
                {
                    Response.Write("<font color='orange' size='5'><b>Prop Manager is currently undergoing maintenance.</b></font><br /><br />We apologize for any inconvenience and appreciate your patience. If you feel this is an error, please contact <a href='mailto:" + g_emailcontactalias + "@microsoft.com'><b>"+g_emailcontactname+"</b></a>.");
                    Response.End();
                }
                else
                    this.lSpecial.Text += "<b><font color='orange' size='4'>*** MAINTENANCE MODE IS ENABLED *** MAINTENANCE MODE IS ENABLED ***</font></b><br /><br>";
            }
            if (g_TEST) this.lSpecial.Text += "<b><font color='red' size='4'>*** TEST MODE IS ENABLED *** TEST MODE IS ENABLED *** TEST MODE IS ENABLED ***</font></b><br /><br>";
        }

        /// <summary>
        /// Pulls the logging setup info out of the web.config file and enables or disables logging appropiately.
        /// </summary>
        protected void InitLogging()
        {
            string data = "";
            StreamReader sr = null;
            try
            {
                bool logging = Convert.ToBoolean(ConfigurationSettings.AppSettings["loggingMode"]);
                string loggingPath = ConfigurationSettings.AppSettings["loggingPath"].ToString();

                if (!System.IO.Directory.Exists(loggingPath))
                    System.IO.Directory.CreateDirectory(loggingPath);

                if (logging)
                {
                    g_logFile = loggingPath + DateTime.Now.ToString(@"M-d-yyyy") + ".txt";
                    EnableLogging();
                }
                else
                    DisableLogging();

                sr.Close();
            }
            catch (Exception ex)
            {
                if (sr != null) sr.Close();
            }
        }

        public bool IsProdType(string env)
        {
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized || !IsPostBack)
                InitConfigXML();

            try
            {
                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        if (dr["Name"].ToString().ToUpper().Equals(env.ToUpper()))
                        {
                           if(dr["Type"].ToString().ToUpper().Equals("PROD"))
                            return true;
                           else 
                            return false;
                            
                        }
                    }
                    return false;
                }
                else
                {
                    LogMessage("The XML data has errors in it. Could not Get Environments Type.");
                    Response.Write("The XML data has errors in it. Could not Get Environments Type.<br /><br />");
                }
                
            }
            catch(Exception ex)
            {
                LogMessage("Exception Caught :" + ex.Message);
                return false;
            }
            return false;
        }
 
        
        protected string[] GetEnvName(out Hashtable h)
        { 
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized || !IsPostBack)
                InitConfigXML();
            int i = 0;
            ArrayList Envname = new ArrayList();
            h = new Hashtable();
            try
            {
                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        h.Add(dr["Name"].ToString(),dr["TVTCode"].ToString());
                        Envname.Add(dr["Name"].ToString());
                        i++;
                    }                 
                    
                }
            }
            catch (Exception ex)
            {
                LogMessage("Exception Caught :"+ ex.Message);
                //return Envname;
                return (string[])Envname.ToArray(typeof(string));
            }
            //return Envname;
            return (string[])Envname.ToArray(typeof(string));
        }
        
        protected EnvInfo GetEnvInfo(string EnvName)
        {
            if (g_xmlConfig == null || !g_xmlConfig.IsInitialized || !IsPostBack)
                InitConfigXML();

            EnvInfo envInfo=new EnvInfo();
            try
            {
                if (!g_xmlConfig.HasErrors)
                {
                    foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                    {
                        if (dr["Name"].ToString().ToUpper().Equals(EnvName.ToUpper()))
                        {
                            envInfo.EnvType=dr["Type"].ToString();
                            envInfo.TVTEnvCode=dr["TVTCode"].ToString();
                            envInfo.MassiveServiceId=dr["MassiveServiceId"].ToString();
                            envInfo.MassiveSiteId=dr["MassiveSiteId"].ToString();
                            envInfo.Certificate = dr["Certificate"].ToString();
                            envInfo.MassiveCertificate = dr["MassiveCertificate"].ToString();
                            break;
                        }
                    }
                    return envInfo;
                }
                else
                {
                    LogMessage("The XML data has errors in it. Could not Get Environments.");
                    Response.Write("The XML data has errors in it. Could not Get Environments.<br /><br />");
                }
                
            }
            catch(Exception ex)
            {
                LogMessage("Exception Caught :" + ex.Message);
                return envInfo;
            }
            return envInfo;
        }
                           
         protected ConfigInfo GetPreReqBugInfo(string EnvName, string optionType)
        { 
        if (g_xmlConfig == null || !g_xmlConfig.IsInitialized || !IsPostBack)
            InitConfigXML();

             ConfigInfo configInfo=new ConfigInfo();
             try
             {

                 if (!g_xmlConfig.HasErrors)
                 {
                     foreach (DataRow dr in g_xmlConfig.Tables["Environment"].Rows)
                     {
                         if (dr["Name"].ToString().ToUpper().Equals(EnvName.ToUpper()))
                         {
                             foreach (DataRow dr1 in dr.GetChildRows("Environment_Request"))
                             {
                                 if (dr1["Type"].ToString().ToUpper().Equals(optionType.ToUpper()))
                                 {
                                     foreach (DataRow dr2 in dr1.GetChildRows("Request_PreReqBug"))
                                     {
                                         configInfo.PreReqBug.EnvName = dr2["EnvName"].ToString();
                                         configInfo.PreReqBug.Status =dr2["BugStatus"].ToString();
                                         configInfo.PreReqBug.OptionType = dr2["Type"].ToString();
                                         configInfo.PreReqBug.EnvLabel = dr2["Label"].ToString();

                                     }
                                     foreach (DataRow dr3 in dr1.GetChildRows("Request_PreReqTitleBug"))
                                     {
                                         configInfo.PreReqTitleBug.EnvName =dr3["EnvName"].ToString();
                                         configInfo.PreReqTitleBug.Status =dr3["BugStatus"].ToString();
                                         configInfo.PreReqTitleBug.OptionType =dr3["Type"].ToString();
                                         configInfo.PreReqTitleBug.EnvLabel = dr3["Label"].ToString();
                                     }
                                     break;
                                 }
                             }
                         }
                     }
                 }
                 else
                {
                    LogMessage("The XML data has errors in it. Could not Prerequired Bug Information ");
                    Response.Write("The XML data has errors in it. Could not Prerequired Bug Information.<br /><br />");
                }                    
                  
             }
             catch (Exception ex)
             {
                 LogMessage("Exception Caught :" + ex.Message);
                 return configInfo;
             }
             return configInfo;
         }

        /// <summary>
        /// Determines whether a user has permission to the passed option.
        /// </summary>
        /// <param name="optionName">The name of the request option to test permissions against.</param>
        /// <param name="envName">The name of the environment to test permissions against.</param>
        /// <returns>boolean value to indicate success or failure</returns>
        protected bool IsPermissionValid(string optionName, string envName)
        {
            if (g_xmlData == null || !g_xmlData.IsInitialized || !IsPostBack)
                InitXML();

            try
            {
                string[] aliases = null;

                if (!g_xmlData.HasErrors)
                {
                    // if we just want to find out if the user has access to this option, *any* environment
                    if (envName == "")
                    {
                        for (int i = 0; i < g_xmlData.Tables["Option"].Rows.Count; i++) // for each option
                        {
                            if ((string)(g_xmlData.Tables["Option"].Rows[i]["Name"]) == optionName || (string)(g_xmlData.Tables["Option"].Rows[i]["Name"]) == "All")
                            {
                                DataRow dr = g_xmlData.Tables["Option"].Rows[i];
                                foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                                {
                                    if (drChild["Aliases"] != DBNull.Value) aliases = drChild["Aliases"].ToString().Split(',');
                                    if (aliases != null && aliases[0] != "")
                                    {
                                        foreach (string alias in aliases)
                                            if (User.IsInRole(alias.Trim())) return true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < g_xmlData.Tables["Option"].Rows.Count; i++) // for each option
                        {
                            if ((string)(g_xmlData.Tables["Option"].Rows[i]["Name"]) == optionName || (string)(g_xmlData.Tables["Option"].Rows[i]["Name"]) == "All")
                            {
                                DataRow dr = g_xmlData.Tables["Option"].Rows[i];
                                foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                                {
                                    if (drChild["Name"].ToString() == envName || drChild["Name"].ToString() == "All")
                                    {
                                        if (drChild["Aliases"] != DBNull.Value) aliases = drChild["Aliases"].ToString().Split(',');
                                        if (aliases != null && aliases[0] != "")
                                        {
                                            foreach (string alias in aliases)
                                                if (User.IsInRole(alias.Trim())) return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The XML data has errors in it. Could not validate permissions.");
                    Response.Write("The XML data has errors in it. Could not validate permissions.<br /><br />");
                }
            }
            catch (Exception)
            {
                if (g_permissionsCount > 1)
                {
                    g_permissionsCount = 0;
                    return false;
                }
                else
                    g_permissionsCount++;

                InitXML();
                IsPermissionValid(optionName, envName);
            }

            return false;
        }

        /// <summary>
        /// Retrieves the workflow name used in launching a request's workflow.
        /// </summary>
        /// <param name="optionName">The name of the request option, as defined in the workflows.xml file.</param>
        /// <param name="optionName">The name of the request option's environment, as defined in the web.config file.</param>
        /// <returns>string value containing the workflow name for the given option/environment pair.</returns>
        protected string GetWorkflowName(string optionName, string envName)
        {
            InitWorkflowXML();

            try
            {
                if (!g_xmlDataWorkflows.HasErrors)
                {
                    for (int i = 0; i < g_xmlDataWorkflows.Tables["Option"].Rows.Count; i++) // for each option
                    {
                        if ((string)(g_xmlDataWorkflows.Tables["Option"].Rows[i]["Name"]) == optionName)
                        {
                            DataRow dr = g_xmlDataWorkflows.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                        }
                    }
                    for (int i = 0; i < g_xmlDataWorkflows.Tables["Option"].Rows.Count; i++) // if we didn't find a direct request option matche, check for all options
                    {
                        if ((string)(g_xmlDataWorkflows.Tables["Option"].Rows[i]["Name"]) == "All")
                        {
                            DataRow dr = g_xmlDataWorkflows.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct environment match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["Workflow"] != DBNull.Value) return drChild["Workflow"].ToString();
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The workflow XML data has errors in it. Could not validate permissions.");
                    Response.Write("The workflow XML data has errors in it. Could not validate permissions.<br /><br />");
                }
            }
            catch (Exception ex)
            {
                return ""; // "" = failed
            }

            return ""; // "" = failed
        }

        /// <summary>
        /// Retrieves the boolean value as to whether or not this is an AutoProp request.
        /// </summary>
        /// <param name="optionName">The name of the request option, as defined in the workflows.xml file.</param>
        /// <param name="optionName">The name of the request option's environment, as defined in the web.config file.</param>
        /// <returns>A string value containing whether or not the given request option/environment pair should utilize AutoProp.</returns>
        protected string GetAutoPropState(string optionName, string envName)
        {
            InitAutoPropStateXML();

            try
            {
                if (!g_xmlDataAutoPropState.HasErrors)
                {
                    for (int i = 0; i < g_xmlDataAutoPropState.Tables["Option"].Rows.Count; i++) // for each option
                    {
                        if ((string)(g_xmlDataAutoPropState.Tables["Option"].Rows[i]["Name"]) == optionName)
                        {
                            DataRow dr = g_xmlDataAutoPropState.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                        }
                    }
                    for (int i = 0; i < g_xmlDataAutoPropState.Tables["Option"].Rows.Count; i++) // if we didn't find a direct request option matche, check for all options
                    {
                        if ((string)(g_xmlDataAutoPropState.Tables["Option"].Rows[i]["Name"]) == "All")
                        {
                            DataRow dr = g_xmlDataAutoPropState.Tables["Option"].Rows[i];
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment"))
                            {
                                if (drChild["Name"].ToString() == envName)
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                            foreach (DataRow drChild in dr.GetChildRows("Option_Environment")) // if we didn't find a direct environment match, check for all environments
                            {
                                if (drChild["Name"].ToString() == "All")
                                    if (drChild["AutoPropState"] != DBNull.Value) return drChild["AutoPropState"].ToString();
                            }
                        }
                    }
                }
                else
                {
                    LogMessage("The AutoProp state XML data has errors in it. Could not validate permissions.");
                    Response.Write("The AutoProp state XML data has errors in it. Could not validate permissions.<br /><br />");
                }
            }
            catch (Exception ex)
            {
                return "FALSE"; // "" = failed
            }

            return "FALSE"; // "" = no matches
        }

        /// <summary>
        /// Loads the 'permissions.xml' data and the 'permissions.xsd' configuration files into memeory.
        /// </summary>
        protected void InitXML()
        {
            g_xmlData = new DataSet();
           
            try { g_xmlData.ReadXml(MapPath("Config\\permissions.xml")); }
            catch (Exception ex) { LogMessage("Error reading permissions XML data. " + ex.Message); }

            try { g_xmlData.ReadXmlSchema(MapPath("Config\\permissions.xsd")); }
            catch (Exception ex) { LogMessage("Error reading permissions XML configuration data. " + ex.Message); }
        }

        /// <summary>
        /// Loads the 'workflows.xml' data and the 'workflows.xsd' configuration files into memeory.
        /// </summary>
        protected void InitWorkflowXML()
        {
            g_xmlDataWorkflows = new DataSet();
            try { g_xmlDataWorkflows.ReadXml(MapPath("Config\\workflows.xml")); }
            catch (Exception ex) { LogMessage("Error reading workflow XML data. " + ex.Message); }

            try { g_xmlDataWorkflows.ReadXmlSchema(MapPath("Config\\workflows.xsd")); }
            catch (Exception ex) { LogMessage("Error reading workflow XML configuration data. " + ex.Message); }
        }

        protected void InitAutoPropStateXML()
        {
            g_xmlDataAutoPropState = new DataSet();
            try { g_xmlDataAutoPropState.ReadXml(MapPath("Config\\autoprop.xml")); }
            catch (Exception ex) { LogMessage("Error reading AutoProp state XML data. " + ex.Message); }

            try { g_xmlDataAutoPropState.ReadXmlSchema(MapPath("Config\\autoprop.xsd")); }
            catch (Exception ex) { LogMessage("Error reading AutoProp state XML configuration data. " + ex.Message); }
        }
        /// <summary>
        /// Loads the 'PMConfig.xml' data and the 'PMConfig.xsd' configuration files into memeory.
        /// </summary>
        protected void InitConfigXML()
        {
            g_xmlConfig= new DataSet();
            try { g_xmlConfig.ReadXmlSchema(MapPath("Config\\PMConfig.xsd")); }
            catch (Exception ex) { LogMessage("Error reading Configuration XML data. " + ex.Message); }


            try { g_xmlConfig.ReadXml(MapPath("Config\\PMConfig.xml")); }
            catch (Exception ex) { LogMessage("Error reading Configuration XML data. " + ex.Message); }

            
        }



        /* 
         * HOW OPTIONS ARE PROCESSED:
         * -----------------------------------------------------------------------------------------------------------------------------
         * When the Submit button is clicked, the following happens:
         * 1. Do basic field validation via ValidateFields(). Pass this method a reference to every control you're using in your Option. 
         *    Give the method refs to g_tbDummy if you're not using that field.
         * 2. If no problems, do prerequisite validation. This is completely dependent on the needs of the Option you're processing.
         *    For example, an XLAST file must be parsed and checked for required PNG files.
         * 3. If there's any problems, get the Option's error label prepared and set the global problem (g_problem) flag to true.
         * 4. Repeat Steps 1-3 for every Option you have.
         * 5. Now that all chosen request options have been verified, gather the request data together and launch the workflow.
         */
        protected void BtnSubmit_Click(object sender, EventArgs e)
        {
            #region Option Checking

            // Trim every single textbox in the entire form and check to see if at least *some* option is checked
            ArrayList controls = GetControls();
            bool proceed = false;
            foreach (Control ctrl in controls)
            {
                if (ctrl is TextBox)
                {
                    TextBox tbTemp = (TextBox)ctrl;
                    if (tbTemp.Text != "") tbTemp.Text = tbTemp.Text.Trim();
                }
                if (ctrl is CheckBox)
                {
                    CheckBox cbTemp = (CheckBox)ctrl;
                    if (cbTemp.Checked)
                        proceed = true;
                }
            }
            if (!proceed)   // no Option was selected... do nothing
                return;
            #endregion

            // FIELD AND PREREQUISITE VALIDATION
            // *******************************************

            ArrayList fileList = new ArrayList();
            string unkoTitleID = "";

            #region Request Keyed Offers
            if (this.cbRequestKO.Checked)
            {
                if (!tb_Req_OfferIDs.Text.EndsWith("\r\n") && tb_Req_OfferIDs.Text != "")
                    tb_Req_OfferIDs.Text += "\r\n";
                if (!tb_Req_CCList.Text.EndsWith(";") && tb_Req_CCList.Text != "")
                    tb_Req_CCList.Text += ";";
                if (tb_Req_DateTime.Text == "")
                    tb_Req_DateTime = null;

                bool problem = ValidateFields(ref l_Req_Error, ref rList_Prov, ref tb_Req_TitleID, ref g_tbDummy, ref tb_Req_OfferIDs,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_Req_CCList, ref dropList_Prov, ref dropList_Prov_Certificate, ref tb_Req_Resolve, ref tb_Req_DateTime);

                if (tb_Req_OfferIDs.Text != "")
                {                   
                    string[] offerId = tb_Req_OfferIDs.Text.Split('\n');
                    bool found = false;
                    for (int i = 0; i < offerId.Length - 1; i++)
                    {
                        for (int j = i + 1; j < offerId.Length - 1; j++)
                        {
                            if (offerId[i].Trim().Equals(offerId[j].Trim()))
                            {
                                found = true;
                                problem = true;
                                l_Req_Error.Text += "<li>Duplicate offer ID entries found</li><br>";
                                break;
                            }
                        }
                        if (found)
                            break;
                    }
                }

                if (!problem)
                {
                    // offer id(s) must exist in the given environment
                    ArrayList badOffers = VerifyOfferIDs(tb_Req_OfferIDs.Text,g_environments[rList_Prov.SelectedValue].ToString());
                    if (badOffers.Count > 0)
                    {
                        l_Req_Error.Text += "<li>The following Offer IDs don't exist in the selected environment:</li><br>";
                        foreach (string badOffer in badOffers)
                        {
                            l_Req_Error.Text += "&nbsp;&nbsp;&nbsp;&nbsp;" + badOffer + "<br>";
                        }
                        problem = true;
                    }
                }
                if (problem)
                {
                    l_Req_Error.Text = g_errText + l_Req_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Expire Offers
            if (this.cbExpireOffer.Checked)
            {
                if (!tb_EO_OfferIDs.Text.EndsWith("\r\n") && tb_EO_OfferIDs.Text != "")
                   tb_EO_OfferIDs.Text += "\r\n";
                if (!tb_EO_CCList.Text.EndsWith(";") && tb_EO_CCList.Text != "")
                    tb_EO_CCList.Text += ";";
                if (tb_EO_DateTime.Text == "")
                    tb_EO_DateTime = null;


                bool problem = ValidateFields(ref l_EO_Error, ref rList_EO, ref tb_EO_TitleID, ref g_tbDummy, ref tb_EO_OfferIDs,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_EO_CCList, ref dropList_EO, ref dropList_EO_Certificate, ref tb_EO_Resolve, ref tb_EO_DateTime);


                if (tb_EO_OfferIDs.Text != "")
                {
                    bool found = false;
                    string[] offerId = tb_EO_OfferIDs.Text.Split('\n');
                    for (int i = 0; i < offerId.Length - 1; i++)
                    {
                        for (int j = i + 1; j < offerId.Length - 1; j++)
                        {
                            if (offerId[i].Trim().Equals(offerId[j].Trim()))
                            {
                                found = true;
                                l_EO_Error.Text += "<li>Duplicate offer ID entries found</li><br>";
                                problem = true;
                                break;
                            }
                        }
                        if (found)
                            break;
                    }
                    
                }



                
                if (!problem)
                {
                    // offer id(s) must exist in the given environment
                    ArrayList badOffers = VerifyOfferIDs(tb_EO_OfferIDs.Text, g_environments[rList_EO.SelectedValue].ToString());
                    if (badOffers.Count > 0)
                    {
                        l_EO_Error.Text += "<li>The following Offer IDs don't exist in the selected environment:</li><br>";
                        foreach (string badOffer in badOffers)
                        {
                            l_EO_Error.Text += "&nbsp;&nbsp;&nbsp;&nbsp;" + badOffer + "<br>";
                        }
                        problem = true;
                    }
                }
                if (problem)
                {
                    l_EO_Error.Text = g_errText + l_EO_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop Real Content or GonD
            if ((this.cbPropUnKO.Checked) || (this.cbPropGonD.Checked))
            {
                if (!tb_PropUnKO_CCList.Text.EndsWith(";") && tb_PropUnKO_CCList.Text != "")
                    tb_PropUnKO_CCList.Text += ";";
                if (tb_PropUnKO_DateTime.Text == "")
                    tb_PropUnKO_DateTime = null;

                bool problem = ValidateFields(ref l_PropUnKO_Error, ref rList_PropUnKO, ref g_tbDummy, ref tb_PropUnKO_BugID, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_PropUnKO_CCList, ref dropList_PropUnKO, ref dropList_PropUnKO_Certificate, ref tb_PropUnKO_Resolve, ref tb_PropUnKO_DateTime);
                               
                EnvInfo envinfo=GetEnvInfo(rList_PropUnKO.SelectedValue);
                
                ConfigInfo configinfo;
                if (this.cbPropGonD.Checked)
                {
                    configinfo = GetPreReqBugInfo(rList_PropUnKO.SelectedValue, "Prop GonD");
                }
                else
                {
                    configinfo = GetPreReqBugInfo(rList_PropUnKO.SelectedValue, "Prop Real Content");
                }

                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {                     
                    if (!(VerifyBugID(tb_PropUnKO_BugID.Text, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropUnKO_Error)))
                    problem = true;
                }

                if (!System.IO.Directory.Exists(g_sharedFolder + l_PropUnKO_Guid.Text))
                {
                    l_PropUnKO_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager.</li>";
                    problem = true;
                }
                else
                {
                    if (lb_PropUnKO.SelectedIndex == -1 && envinfo.EnvType.ToUpper().Equals("PROD") && g_PropUnKO_ProdDefault)
                    {
                        l_PropUnKO_Error.Text += "<li>There are no  files selected. Make sure you have the correct Bug ID entered and have selected the files you want to transfer.</li>";
                        problem = true;
                    }
                    else if ((envinfo.EnvType.ToUpper().Equals("PROD") && g_PropUnKO_ProdDefault && !problem))
                    {
                        if (!SaveFilesToShare(tb_PropUnKO_BugID.Text, GetSelectedFilenames(ref lb_PropUnKO), g_sharedFolder + l_PropUnKO_Guid.Text))
                        {
                            l_PropUnKO_Error.Text += "<li>Failed saving the  Bug files to the shared folder.</li>";
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    if (this.cbPropGonD.Checked)
                    {
                        fileList = FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "xpkg");
                        if (fileList.Count == 0)
                        {
                            l_PropUnKO_Error.Text += "<li>A SVOD (.xpkg) file was not detected in the file drop point.</li>";
                            problem = true;
                        }
                        else if (fileList.Count > 1)
                        {
                            l_PropUnKO_Error.Text += "<li>More than one SVOD (.xpkg) file was detected in the file drop point. This request type requires one SVOD (.xpkg) file per submission.</li>";
                            problem = true;
                        }
                    }
                    else //default Prop Real Content 
                    {
                        fileList = FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "cab");
                        if (fileList.Count == 0)
                        {
                            l_PropUnKO_Error.Text += "<li>A CAB file was not detected in the file drop point.</li>";
                            problem = true;
                        }
                        else if (fileList.Count > 1)
                        {
                            l_PropUnKO_Error.Text += "<li>More than one CAB file was detected in the file drop point. This request type requires one CAB file per submission.</li>";
                            problem = true;
                        }
                    }

                    fileList = FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "offer");
                    if (fileList.Count == 0)
                    {
                        l_PropUnKO_Error.Text += "<li>An OFFER file was not detected in the file drop point.</li>";
                        problem = true;
                    }
                    else if (fileList.Count > 1)
                    {
                        l_PropUnKO_Error.Text += "<li>More than one OFFER file was detected in the file drop point. This request type requires one OFFER file per submission.</li>";
                        problem = true;
                    }
                }

                if (!problem)
                {
                    try
                    {
                        StreamReader sr = new StreamReader(fileList[0].ToString());
                        string upContent = sr.ReadToEnd();
                        sr.Close();

                        // grab the primary title id
                        string titleID = "";
                        Match titleMatch = Regex.Match(upContent, @"\<[^\:<>]*\:?primaryTitleID\>(.*)\<\/[^\:<>]*\:?primaryTitleID\>", RegexOptions.IgnoreCase);
                        titleID = titleMatch.Value;
                        titleID = titleID.Substring(titleID.IndexOf('>') + 3, titleID.LastIndexOf('<') - titleID.IndexOf('>') - 3);

                        // check to see if the primary title id exists in the selected environment
                        if (!VerifyEnvironment(g_environments[rList_PropUnKO.SelectedValue].ToString(), titleID, ref g_lDummy))
                        {
                            bool idProb = false;
                            if (tb_PropUnKO_TitleBugID.Text != "")
                            {
                                // if the user entered in a title bug, we want to skip the Title ID check regardless of whether the bug is valid or not
                                idProb = true;
                                
                                // verify the bug id exists in the selected environment. On NO, display error & problem=true. On YES, continue processing.
                                if (!(VerifyBugID(tb_PropUnKO_TitleBugID.Text, configinfo.PreReqTitleBug.EnvName,configinfo.PreReqTitleBug.EnvLabel, configinfo.PreReqTitleBug.OptionType, titleID, configinfo.PreReqTitleBug.Status, ref l_PropUnKO_Error)))
                                {
                                    if (!l_PropUnKO_Error.Text.Contains("<li>The Bug ID for Title Prop"))
                                        l_PropUnKO_Error.Text += "<li>The Bug ID for Title Prop does not exist in the selected environment.</li>";
                                    problem = true;
                                }
                            }
                            else
                                g_unkeyedTitleBug = true;

                            if (!idProb)
                            {
                                if (!l_PropUnKO_Error.Text.Contains("<li>The primary Title ID '0x" + titleID))
                                {
                                    l_PropUnKO_Error.Text += "<li>The primary Title ID '0x" + titleID + "' in '" + Path.GetFileName(fileList[0].ToString()) + "' does not exist in the selected environment. If the title is in the prop queue, please enter the Bug ID of that request below.</li>";
                                    problem = true;
                                }
                            }
                        }

                        if (!upContent.Contains("offerID>0x"))
                        {
                            l_PropUnKO_Error.Text += "<li>No Offer ID found in '" + Path.GetFileName(fileList[0].ToString()) + "'.</li>";
                            problem = true;
                        }

                        // check to see if all the png files referenced in the offer file are in the folder given by the user
                        bool foundFile = false;
                        MatchCollection matches = Regex.Matches(upContent, @"\<[^\:<>]*\:?imageFilePath\>([^<>]*\.png)\<\/[^\:<>]*\:?imageFilePath\>", RegexOptions.IgnoreCase);
                        string actualMatch = "";
                        foreach (Match match in matches)
                        {
                            actualMatch = match.Value;
                            actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                            foundFile = false;
                            string[] files = System.IO.Directory.GetFiles(g_sharedFolder + l_PropUnKO_Guid.Text);
                            foreach (string file in files)
                            {
                                if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                                    foundFile = true;
                            }
                            if (!foundFile)
                            {
                                if (!l_PropUnKO_Error.Text.Contains(Path.GetFileName(actualMatch)))
                                    l_PropUnKO_Error.Text += "<li>Required file not found: '" + Path.GetFileName(actualMatch) + "'</li>";
                                problem = true;
                            }
                        }
                        if (matches.Count == 0)
                        {
                            l_PropUnKO_Error.Text += "<li>Invalid OFFER file. Does not reference any PNG files.'" + Path.GetFileName(fileList[0].ToString()) + "'.</li>";
                            problem = true;
                        }

                        MatchCollection begTagMatches = Regex.Matches(upContent, @"(<LiveOffer)|(<ns[0-9]:LiveOffer)", RegexOptions.IgnoreCase);
                        //MatchCollection begTagMatches = Regex.Matches(upContent, @"(<LiveOffer)|(<[^\:]*\:?LiveOffer)", RegexOptions.IgnoreCase);

                        MatchCollection endTagMatches = Regex.Matches(upContent, @"(</LiveOffer>)|(</ns[0-9]:LiveOffer>)", RegexOptions.IgnoreCase);
                        //MatchCollection endTagMatches = Regex.Matches(upContent, @"(</LiveOffer>)|(</[^\:]*\:?LiveOffer>)", RegexOptions.IgnoreCase);
                        if (begTagMatches.Count == 0)
                        {
                            l_PropUnKO_Error.Text += "<li>The OFFER file '" + Path.GetFileName(fileList[0].ToString()) + "' is invalid; missing LiveOffer tags.</li>";
                            problem = true;
                        }
                        else if (endTagMatches.Count == 0)
                        {
                            l_PropUnKO_Error.Text += "<li>The OFFER file '" + Path.GetFileName(fileList[0].ToString()) + "' is truncated; missing /LiveOffer closing tag.</li>";
                            problem = true;
                        }
                    }
                    catch
                    {
                        l_PropUnKO_Error.Text += "<li>Corrupt OFFER data detected.</li>";
                        problem = true;
                    }
                }
                if (problem)
                {
                    l_PropUnKO_Error.Text = g_errText + l_PropUnKO_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop LIVE Offers
            if (this.cbPropKO.Checked)
            {
                if (!tb_PropKO_CCList.Text.EndsWith(";") && tb_PropKO_CCList.Text != "")
                    tb_PropKO_CCList.Text += ";";
                if (tb_PropKO_DateTime.Text == "")
                    tb_PropKO_DateTime = null;

                bool problem = ValidateFields(ref l_PropKO_Error, ref rList_PropKO, ref g_tbDummy, ref tb_PropKO_BugID, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_PropKO_CCList, ref dropList_PropKO, ref dropList_PropKO_Certificate, ref tb_PropKO_Resolve, ref tb_PropKO_DateTime);
                EnvInfo envinfo=GetEnvInfo(rList_PropKO.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_PropKO.SelectedValue,this.cbPropKO.Text);
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    
                    if (!VerifyBugID(tb_PropKO_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropKO_Error))
                        problem = true;
                }

                if (!System.IO.Directory.Exists(g_sharedFolder + l_PropKO_Guid.Text))
                {
                    l_PropKO_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager.</li>";
                    problem = true;
                }
                else
                {
                    if (lb_PropKO.SelectedIndex == -1 && envinfo.EnvType.ToUpper().Equals("PROD") && g_PropKO_ProdDefault)
                    {
                        l_PropKO_Error.Text += "<li>There are no Bug files selected. Make sure you have the correct Bug ID entered and have selected the files you want to transfer.</li>";
                        problem = true;
                    }
                    else if ((envinfo.EnvType.ToUpper().Equals("PROD") && g_PropKO_ProdDefault && !problem))
                    {
                        if (!SaveFilesToShare(tb_PropKO_BugID.Text, GetSelectedFilenames(ref lb_PropKO), g_sharedFolder + l_PropKO_Guid.Text))
                        {
                            l_PropKO_Error.Text += "<li>Failed saving the Bug files to the shared folder.</li>";
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    fileList = FindFiles(g_sharedFolder + l_PropKO_Guid.Text, "offer");
                    if (fileList.Count == 0)
                    {
                        l_PropKO_Error.Text += "<li>An OFFER file was not detected in the file drop point.</li>";
                        problem = true;
                    }
                    else if (fileList.Count > 1)
                    {
                        l_PropKO_Error.Text += "<li>More than one OFFER file was detected in the file drop point. This request type requires one OFFER file per submission.</li>";
                        problem = true;
                    }
                }

                if (!problem)
                {
                    string upContent = "";
                    StreamReader sr = null;
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                        sr.Close();
                    }
                    catch (Exception ex)
                    {
                        sr.Close();
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in option 'Prop Keyed Offers'. " + ex.Message);
                    }

                    if (!(upContent.Contains("<symKey>") && upContent.Contains("<publicKey>")))
                    {
                        l_PropKO_Error.Text += "<li>The OFFER file '" + Path.GetFileName(fileList[0].ToString()) + "' is <b>not keyed</b>.";
                        problem = true;
                    }

                    // grab the primary title id
                    string titleID = "";
                    Match titleMatch = Regex.Match(upContent, @"\<[^\:]{0,3}\:?primaryTitleID\>(.*)\<\/[^\:]{0,3}\:?primaryTitleID\>", RegexOptions.IgnoreCase);
                    titleID = titleMatch.Value;
                    titleID = titleID.Substring(titleID.IndexOf('>') + 3, titleID.LastIndexOf('<') - titleID.IndexOf('>') - 3);

                    // check to see if the primary title id exists in the selected environment
                    if (!VerifyEnvironment(g_environments[rList_PropKO.SelectedValue].ToString(), titleID, ref g_lDummy))
                    {
                        l_PropKO_Error.Text += "<li>The Title ID in the OFFER file provided does not exist in the selected environment.</li>";
                        problem = true;
                    }

                    if (!upContent.Contains("offerID>0x"))
                    {
                        l_PropKO_Error.Text += "<li>No Offer ID found in '" + Path.GetFileName(fileList[0].ToString()) + "'.</li>";
                        problem = true;
                    }

                    // check to see if all the png files referenced in the offer file are in the folder given by the user
                    bool foundFile = false;
                    MatchCollection matches = Regex.Matches(upContent, @"\<[^\:]{0,3}\:?imageFilePath\>([^<>]*\.png)\<\/[^\:]{0,3}\:?imageFilePath\>", RegexOptions.IgnoreCase);
                    string actualMatch = "";
                    foreach (Match match in matches)
                    {
                        actualMatch = match.Value;
                        actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                        foundFile = false;
                        string[] files = System.IO.Directory.GetFiles(g_sharedFolder + l_PropKO_Guid.Text);
                        foreach (string file in files)
                        {
                            if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                                foundFile = true;
                        }
                        if (!foundFile)
                        {
                            if (!l_PropKO_Error.Text.Contains(Path.GetFileName(actualMatch)))
                                l_PropKO_Error.Text += "<li>Required file not found: '" + Path.GetFileName(actualMatch) + "'</li>";
                            problem = true;
                        }
                    }
                    if (matches.Count == 0)
                    {
                        l_PropKO_Error.Text += "<li>Invalid OFFER file. Does not reference any PNG files.'" + Path.GetFileName(fileList[0].ToString()) + "'.</li>";
                        problem = true;
                    }

                    if (!upContent.Contains("<LiveOffer"))
                    {
                        l_PropKO_Error.Text += "<li>The OFFER file '" + Path.GetFileName(fileList[0].ToString()) + "' is invalid; missing LiveOffer tags.</li>";
                        problem = true;
                    }
                    else if (!upContent.Contains("</LiveOffer>"))
                    {
                        l_PropKO_Error.Text += "<li>The OFFER file '" + Path.GetFileName(fileList[0].ToString()) + "' is truncated; missing /LiveOffer closing tag.</li>";
                        problem = true;
                    }
                }

                if (problem)
                {
                    l_PropKO_Error.Text = g_errText + l_PropKO_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop XLAST
            if (this.cbPropXLAST.Checked)
            {
                // basic field validation
                if (!tb_PropXLAST_CCList.Text.EndsWith(";") && tb_PropXLAST_CCList.Text != "")
                    tb_PropXLAST_CCList.Text += ";";
                if (tb_PropXLAST_DateTime.Text == "")
                    tb_PropXLAST_DateTime = null;

                bool problem = ValidateFields(ref l_PropXLAST_Error, ref rList_PropXLAST, ref g_tbDummy, ref tb_PropXLAST_BugID, ref g_tbDummy,
                                              ref tb_PropXLAST_XemID, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_PropXLAST_CCList, ref dropList_PropXLAST, ref dropList_PropXLAST_Certificate, ref tb_PropXLAST_Resolve, ref tb_PropXLAST_DateTime);

                // additional specialized validation
                if (lb_PropXLAST_VersionAdds.Items.Count == 0)
                {
                    l_PropXLAST_Error.Text += "<li>No Base Versions were provided. At least one is required to submit this request.</li>";
                    problem = true;
                }

                EnvInfo envinfo=GetEnvInfo(rList_PropXLAST.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_PropXLAST.SelectedValue,this.cbPropXLAST.Text);
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    
                    if (!VerifyBugID(tb_PropXLAST_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropXLAST_Error))
                        problem = true;
                }
                       

                if (!System.IO.Directory.Exists(g_sharedFolder + l_XLAST_Guid.Text))
                {
                    l_PropXLAST_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager. Please refresh the page.</li>";
                    problem = true;
                }
                else // if the directory exists, make sure there's only *one* XLAST file
                {
                    if (lb_PropXLAST.SelectedIndex == -1 && envinfo.EnvType.ToUpper().Equals("PROD") && g_PropXLAST_ProdDefault)
                    {
                        l_PropXLAST_Error.Text += "<li>There are no Bug files selected. Make sure you have the correct Bug ID entered and have selected the files you want to transfer.</li>";
                        problem = true;
                    }
                    else if (envinfo.EnvType.ToUpper().Equals("PROD") && g_PropXLAST_ProdDefault && !problem)
                    {
                        if (!SaveFilesToShare(tb_PropXLAST_BugID.Text, GetSelectedFilenames(ref lb_PropXLAST), g_sharedFolder + l_XLAST_Guid.Text))
                        {
                            l_PropXLAST_Error.Text += "<li>Failed saving the Bug files to the shared folder.</li>";
                            problem = true;
                        }
                    }

                    // if no problems up to this point...
                    if (!problem)
                    {
                        fileList = FindFiles(g_sharedFolder + l_XLAST_Guid.Text, "xlast");
                        if (fileList.Count == 0)
                        {
                            l_PropXLAST_Error.Text += "<li>There is no XLAST file in the shared folder.</li>";
                            problem = true;
                        }
                        else if (fileList.Count > 1)
                        {
                            l_PropXLAST_Error.Text += "<li>There is more than one XLAST file in the shared folder. Only one can be present per submission.</li>";
                            problem = true;
                        }
                    }
                }

                // check for prereqs... look for PNGs files found in the user's folder dropped in the share for the XLAST 
                if (!problem)
                {
                    try
                    {
                        StreamReader sr = new StreamReader(fileList[0].ToString());
                        string upContent = sr.ReadToEnd();
                        sr.Close();

                        bool foundFile = false;
                        MatchCollection matches = Regex.Matches(upContent, @"<[^:]{0,3}:?Path>([^<>]*\.png)<\/[^:]{0,3}:?Path>", RegexOptions.IgnoreCase);
                       
                        string actualMatch = "";
                        foreach (Match match in matches)
                        {
                            actualMatch = match.Value;
                            actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                            foundFile = false;
                            string[] files = System.IO.Directory.GetFiles(g_sharedFolder + l_XLAST_Guid.Text);
                            foreach (string file in files)
                            {
                                // look for matches between the PNG files in the directory and PNG files listed inside the Marketplace file
                                if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                                {
                                    foundFile = true;
                                    break;
                                }
                            }
                            if (!foundFile)
                            {
                                if (!l_PropXLAST_Error.Text.Contains(Path.GetFileName(actualMatch)))
                                    l_PropXLAST_Error.Text += "<li>Required file not found: '" + Path.GetFileName(actualMatch) + "'</li>";
                                problem = true;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        l_PropXLAST_Error.Text += "<li>Corrupt data detected in the XLAST file. " + ex.Message + "</li>";
                        problem = true;
                    }
                }

                // if any prereq or field validation issues, display the error title message
                if (problem)
                {
                    l_PropXLAST_Error.Text = g_errText + l_PropXLAST_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop Marketplace
            if (this.cbPropMarket.Checked)
            {
                // basic field validation
                if (!tb_PropMarket_CCList.Text.EndsWith(";") && tb_PropMarket_CCList.Text != "")
                    tb_PropMarket_CCList.Text += ";";
                if (tb_PropMarket_DateTime.Text == "")
                    tb_PropMarket_DateTime = null;

                bool problem = ValidateFields(ref l_PropMarket_Error, ref rList_PropMarket, ref g_tbDummy, ref tb_PropMarket_BugID, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_PropMarket_CCList, ref dropList_PropMarket, ref dropList_PropMarket_Certificate, ref tb_PropMarket_Resolve, ref tb_PropMarket_DateTime);


                EnvInfo envinfo=GetEnvInfo(rList_PropMarket.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_PropMarket.SelectedValue,this.cbPropMarket.Text);
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                        if (!VerifyBugID(tb_PropMarket_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropXLAST_Error))
                        problem = true;
                }                   
                

                if (!System.IO.Directory.Exists(g_sharedFolder + l_Market_Guid.Text))
                {
                    l_PropMarket_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager.</li>";
                    problem = true;
                }
                else
                {
                    if (lb_PropMarket.SelectedIndex == -1 && envinfo.EnvType.ToUpper().Equals("PROD") && g_PropMarket_ProdDefault)
                    {
                        l_PropMarket_Error.Text += "<li>There are no Bug files selected. Make sure you have the correct Bug ID entered and have selected the files you want to transfer.</li>";
                        problem = true;
                    }
                    else if (envinfo.EnvType.ToUpper().Equals("PROD") && g_PropMarket_ProdDefault && !problem)
                    {
                        if (!SaveFilesToShare(tb_PropMarket_BugID.Text, GetSelectedFilenames(ref lb_PropMarket), g_sharedFolder + l_Market_Guid.Text))
                        {
                            l_PropMarket_Error.Text += "<li>Failed saving the Bug files to the shared folder.</li>";
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    fileList = FindFiles(g_sharedFolder + l_Market_Guid.Text, "marketplace");
                    if (fileList.Count == 0)
                    {
                        l_PropMarket_Error.Text += "<li>There is no Marketplace file in the shared folder.</li>";
                        problem = true;
                    }
                    else if (fileList.Count > 1)
                    {
                        l_PropMarket_Error.Text += "<li>There is more than one Markeplace file in the shared folder. Only one can be present per submission.</li>";
                        problem = true;
                    }
                }

                // check for prereqs... look for PNGs files found in the user's folder dropped in the share for the Marketplace 
                if (!problem)
                {
                    StreamReader sr = null;
                    string upContent = "";
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                    }
                    catch (Exception ex)
                    {
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop Marketplace'. " + ex.Message);
                    }
                    sr.Close();

                    // grab the Title ID out of the Marketplace file
                    string titleID = "";
                    if (upContent.Contains("titleId="))
                    {
                        int idx = upContent.LastIndexOf("titleId=");
                        string tempStr = upContent.Substring(idx + 8, 12);
                        string[] strAry = tempStr.Split('"');
                        foreach (string str in strAry)
                        {
                            if (str.Contains("0x"))
                            {
                                titleID = str;
                                break;
                            }
                        }
                    }

                    if (this.cbPropUnKO.Checked && "0x" + unkoTitleID == titleID)
                    {
                        l_PropMarket_Error.Text += "<li>The Title ID in this request and in the Prop Un-keyed Offer request are identical. A Title ID must exist in the given environment before requesting props for Un-Keyed Offer files.</li>";
                        problem = true;
                    }

                    try
                    {
                        bool foundFile = false;
                        MatchCollection matches = Regex.Matches(upContent, @"<[^:]{0,3}:?Path>([^<>]*\.png)<\/[^:]{0,3}:?Path>", RegexOptions.IgnoreCase);
                        if (matches.Count == 0)
                        {
                            l_PropMarket_Error.Text += "<li>No PNG files are referenced in the Marketplace file. Incorrect Marketplace file format.</li>";
                            problem = true;
                        }
                        string actualMatch = "";
                        foreach (Match match in matches)
                        {
                            actualMatch = match.Value;
                            actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                            foundFile = false;
                            string[] files = System.IO.Directory.GetFiles(g_sharedFolder + l_Market_Guid.Text);
                            foreach (string file in files)
                            {
                                // look for matches between the PNG files in the directory and PNG files listed inside the Marketplace file
                                if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                                {
                                    foundFile = true;
                                    break;
                                }
                            }
                            if (!foundFile)
                            {
                                if (!l_PropMarket_Error.Text.Contains(Path.GetFileName(actualMatch)))
                                    l_PropMarket_Error.Text += "<li>Required file not found: '" + Path.GetFileName(actualMatch) + "'</li>";
                                problem = true;
                            }
                        }
                        sr.Close();
                    }
                    catch
                    {
                        problem = true;
                        l_PropMarket_Error.Text += "<li>Corrupt data detected in the Marketplace file.</li>";
                    }

                    SqlCommand myCommand = null;
                    SqlDataReader dataReader = null;

                    // check to see if the title is propped as a non-Marketplace file in the selected environment
                    try
                    {
                        // accesses the Title Verification tool
                        if (g_myConnection.State != ConnectionState.Open)
                            g_myConnection.Open();

                        myCommand = new SqlCommand("EXEC p_get_title_details " + g_environments[rList_PropMarket.SelectedValue].ToString() + ", " + titleID, g_myConnection);
                        dataReader = myCommand.ExecuteReader();

                        if (dataReader.Read())
                        {
                            if (dataReader["ConsoleType"].ToString() != "Marketplace")
                            {
                                if (!this.cbPropMarketConfirm.Checked)
                                {
                                    this.cbPropMarketConfirm.Visible = true;
                                    l_PropMarket_Error.Text += " <li>Warning: this title is propped as a non-Marketplace file in this environment.</li> <br>Check to override this warning: ";
                                    problem = true;
                                }
                                else
                                {
                                    this.cbPropMarketConfirm.Visible = false;
                                    this.cbPropMarketConfirm.Checked = false;
                                }
                            }
                        }

                        dataReader.Close();
                        g_myConnection.Close();
                    }
                    catch (SqlException ex)
                    {
                        problem = true;
                        l_PropMarket_Error.Text += "<li><font color=red>Cannot access the Title Verification database.</font><li>";
                        FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                    }
                    finally
                    {
                        if (dataReader != null && !dataReader.IsClosed)
                            dataReader.Close();
                        if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                            g_myConnection.Close();
                    }
                }

                if (problem)
                {
                    l_PropMarket_Error.Text = g_errText + l_PropMarket_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop Auto-update as Selective
            if (this.cbPropAU.Checked)
            {
                // basic field validation
                if (!tb_PropAU_Console.Text.EndsWith("\r\n") && tb_PropAU_Console.Text != "")
                    tb_PropAU_Console.Text += "\r\n";
                if (!tb_PropAU_CCList.Text.EndsWith(";") && tb_PropAU_CCList.Text != "")
                    tb_PropAU_CCList.Text += ";";
                if (tb_PropAU_DateTime.Text == "")
                    tb_PropAU_DateTime = null;

                if (!g_SubIDRequired && tb_PropAU_SubID.Text == "") tb_PropAU_SubID = null;
                bool problem = ValidateFields(ref l_PropAU_Error, ref rList_PropAU, ref tb_PropAU_TitleID, ref tb_PropAU_BugID, ref g_tbDummy,
                                              ref tb_PropAU_XemID, ref tb_PropAU_SubID, ref tb_PropAU_Base, ref tb_PropAU_Update, ref tb_PropAU_Console, ref g_tbDummy,
                                              ref tb_PropAU_CCList, ref dropList_PropAU, ref dropList_PropAU_Certificate, ref tb_PropAU_Resolve, ref tb_PropAU_DateTime);

                if (tb_PropAU_Console.Text != "")
                {
                    string[] ConsoleId = tb_PropAU_Console.Text.Split('\n');
                    bool found = false;
                    for (int i = 0; i < ConsoleId.Length - 1; i++)
                    {
                        for (int j = i + 1; j < ConsoleId.Length - 1; j++)
                        {
                            if (ConsoleId[i].Trim().Equals(ConsoleId[j].Trim()))
                            {
                                found = true;
                                problem = true;
                                l_PropAU_Error.Text += "<li>Duplicate Console ID entries found</li><br>";
                                break;
                            }
                        }
                        if (found)
                            break;
                    }
                }

                if (rList_PropAU_VerType.SelectedIndex == 0)
                {
                    l_PropAU_Error.Text += "<li>No Version Type Selected</li>";
                    problem = true;
                }

                EnvInfo envinfo=GetEnvInfo(rList_PropAU.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_PropAU.SelectedValue,this.cbPropAU.Text);
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                       if (!VerifyBugID(tb_PropAU_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropAU_Error))
                        problem = true;
                }
                

                if (!System.IO.Directory.Exists(g_sharedFolder + l_PropAU_Guid.Text))
                {
                    l_PropAU_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager.</li>";
                    problem = true;
                }
                else
                {
                    if (lb_PropAU.SelectedIndex == -1 && envinfo.EnvType.ToUpper().Equals("PROD") && g_PropAU_ProdDefault)
                    {
                        l_PropAU_Error.Text += "<li>There are no Bug files selected. Make sure you have the correct Bug ID entered and have selected the files you want to transfer.</li>";
                        problem = true;
                    }
                    else if (envinfo.EnvType.ToUpper().Equals("PROD") && g_PropAU_ProdDefault && !problem)
                    {
                        if (!SaveFilesToShare(tb_PropAU_BugID.Text, GetSelectedFilenames(ref lb_PropAU), g_sharedFolder + l_PropAU_Guid.Text) && !problem)
                        {
                            l_PropAU_Error.Text += "<li>Failed saving the Bug files to the shared folder.</li>";
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    string baseVer = tb_PropAU_Base.Text;
                    string updateVer = tb_PropAU_Update.Text;

                    if (baseVer.ToLower().Trim() == updateVer.ToLower().Trim())
                    {
                        l_PropAU_Error.Text += "<li>The Base Version and Update Version are identical.</li>";
                        problem = true;
                    }
                    else if (baseVer.Remove(0, baseVer.Length - 2).ToLower().Trim() != updateVer.Remove(0, updateVer.Length - 2).ToLower().Trim())
                    { 
                        l_PropAU_Error.Text += "<li>The right-most two hex digits of the Base Version and the Update Version are not the same.</li>";
                        problem = true;
                    }
                    else
                    {
                        fileList = FindFiles(g_sharedFolder + l_PropAU_Guid.Text, "cab");
                        if (fileList.Count == 0)
                        {
                            l_PropAU_Error.Text += "<li>There is no CAB file in the shared folder.</li>";
                            problem = true;
                        }
                        else if (fileList.Count > 1)
                        {
                            l_PropAU_Error.Text += "<li>There is more than one CAB file in the shared folder. Only one must be present.</li>";
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_PropAU.SelectedValue].ToString(), tb_PropAU_TitleID.Text, ref l_PropAU_Error))
                        problem = true;
                }
                if (problem)
                {
                    l_PropAU_Error.Text = g_errText + l_PropAU_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Prop Sample Content
            if (this.cbPropSample.Checked)
            {
                // field validation
                if (!tb_PropSample_CCList.Text.EndsWith(";") && tb_PropSample_CCList.Text != "")
                    tb_PropSample_CCList.Text += ";";
                if (tb_PropSample_DateTime.Text == "")
                    tb_PropSample_DateTime = null;

                bool problem = ValidateFields(ref l_PropSample_Error, ref rList_PropSample, ref tb_PropSample_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_PropSample_CCList, ref dropList_PropSample, ref dropList_PropSample_Certificate, ref tb_PropSample_Resolve, ref tb_PropSample_DateTime);
                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_PropSample.SelectedValue].ToString(), tb_PropSample_TitleID.Text, ref l_PropSample_Error))
                        problem = true;
                    else
                    {
                        fileList = FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "cab");
                        if (fileList.Count == 0)
                        {
                            l_PropSample_Error.Text += "<li>There is no CAB file in the shared folder.</li>";
                            problem = true;
                        }
                        else if (fileList.Count > 1)
                        {
                            l_PropSample_Error.Text += "<li>There is more than one CAB file in the shared folder. Only one must be present.</li>";
                            problem = true;
                        }
                        else
                        {
                            fileList = FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "offer");

                            if (!problem && fileList.Count > 0)
                            {
                                try
                                {
                                    // loop through all offer files found in the folder given by the user
                                    for (int i = 0; i < fileList.Count; i++)
                                    {
                                        StreamReader sr = new StreamReader(fileList[i].ToString());
                                        string upContent = sr.ReadToEnd();
                                        sr.Close();

                                        // check to see if all the png files referenced in the offer file are in the folder given by the user
                                        bool foundFile = false;
                                        MatchCollection matches = Regex.Matches(upContent, @"\<[^\:]{0,3}\:?imageFilePath\>(.*\.png)\<\/[^\:]{0,3}\:?imageFilePath\>", RegexOptions.IgnoreCase);
                                        string actualMatch = "";
                                        foreach (Match match in matches)
                                        {
                                            actualMatch = match.Value;
                                            actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);

                                            foundFile = false;
                                            string[] files = System.IO.Directory.GetFiles(g_sharedFolder + l_PropSample_Guid.Text);
                                            foreach (string file in files)
                                            {
                                                if (Path.GetFileName(file).ToLower() == Path.GetFileName(actualMatch).ToLower())
                                                    foundFile = true;
                                            }
                                            if (!foundFile)
                                            {
                                                if (!l_PropSample_Error.Text.Contains(Path.GetFileName(actualMatch)))
                                                    l_PropSample_Error.Text += "<li>Required file not found: '" + Path.GetFileName(actualMatch) + "'</li>";
                                                problem = true;
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                    l_PropSample_Error.Text += "<li>Corrupt OFFER data detected.</li>";
                                    problem = true;
                                }
                            }
                        }
                    }
                }
                if (problem)
                {
                    l_PropSample_Error.Text = g_errText + l_PropSample_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Switch Auto-update to Global
            if (this.cbSwitchToGlobal.Checked)
            {
                // basic field validation
                if (!tb_SwitchToGlobal_CCList.Text.EndsWith(";") && tb_SwitchToGlobal_CCList.Text != "")
                    tb_SwitchToGlobal_CCList.Text += ";";

                if (!g_SubIDRequired && tb_SwitchToGlobal_SubID.Text == "") tb_SwitchToGlobal_SubID = null;
                bool problem = ValidateFields(ref l_SwitchToGlobal_Error, ref rList_SwitchToGlobal, ref tb_SwitchToGlobal_TitleID, ref tb_SwitchToGlobal_BugID, ref g_tbDummy,
                                              ref tb_SwitchToGlobal_XemID, ref tb_SwitchToGlobal_SubID, ref tb_SwitchToGlobal_Base, ref tb_SwitchToGlobal_Update, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_SwitchToGlobal_CCList, ref dropList_SwitchToGlobal, ref dropList_SwitchToGlobal_Certificate, ref tb_SwitchToGlobal_Resolve, ref tb_SwitchToGlobal_DateTime);

                if (rList_SwitchToGlobal_VerType.SelectedIndex == 0)
                {
                    l_SwitchToGlobal_Error.Text += "<li>No Version Type Selected</li>";
                    problem = true;
                }

                EnvInfo envinfo=GetEnvInfo(rList_SwitchToGlobal.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_SwitchToGlobal.SelectedValue,this.cbSwitchToGlobal.Text);
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    if (!cb_SwitchToGlobal_PubApproval.Checked)
                    {
                        l_SwitchToGlobal_Error.Text += "<li>Publisher's approval has not been received. This request cannot be processed.</li>";
                        problem = true;
                    }
                    if (!VerifyBugID(tb_SwitchToGlobal_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_SwitchToGlobal_Error))
                        problem = true;
                }
                             
                if (!problem)
                {
                    string baseVer = tb_SwitchToGlobal_Base.Text;
                    string updateVer = tb_SwitchToGlobal_Update.Text;

                    if (baseVer == updateVer)
                    {
                        l_SwitchToGlobal_Error.Text += "<li>The Base Version and Update Version are identical.</li>";
                        problem = true;
                    }
                    else if (baseVer.Remove(0, baseVer.Length - 2) != updateVer.Remove(0, updateVer.Length - 2))
                    {
                        l_SwitchToGlobal_Error.Text += "<li>The right-most two hex digits of the Base Version and the Update Version are not the same.</li>";
                        problem = true;
                    }
                    else
                    {
                        // auto-update and base version checks
                        if (!VerifyVersions(tb_SwitchToGlobal_Base.Text, rList_SwitchToGlobal_VerType.SelectedValue, g_environments[rList_SwitchToGlobal.SelectedValue].ToString(), tb_SwitchToGlobal_TitleID.Text, 0))
                        {
                            l_SwitchToGlobal_Error.Text += "<li>The base version (0x" + tb_SwitchToGlobal_Base.Text + ") does not exist in " + rList_SwitchToGlobal.SelectedValue + ".</li>";
                            problem = true;
                        }
                        else if (!VerifyVersions(tb_SwitchToGlobal_Update.Text, g_environments[rList_SwitchToGlobal.SelectedValue].ToString(), tb_SwitchToGlobal_TitleID.Text, 0))
                        {
                            l_SwitchToGlobal_Error.Text += "<li>The auto-update (0x" + tb_SwitchToGlobal_Update.Text + ") does not have the required base version information propped to " + rList_SwitchToGlobal.SelectedValue + ".</li>";
                            problem = true;
                        }
                        else if (!VerifyVersions(tb_SwitchToGlobal_Update.Text, g_environments[rList_SwitchToGlobal.SelectedValue].ToString(), tb_SwitchToGlobal_TitleID.Text, 2))
                        {
                            l_SwitchToGlobal_Error.Text += "<li>The auto-update (0x" + tb_SwitchToGlobal_Update.Text + ") does not exist selectively in " + rList_SwitchToGlobal.SelectedValue + ".</li>";
                            problem = true;
                        }
                    }
                }

                if (problem)
                {
                    l_SwitchToGlobal_Error.Text = g_errText + l_SwitchToGlobal_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Add New Base Version to Existing Title
            if (this.cbAddBaseVer.Checked)
            {
                // basic field validation
                if (!tb_AddBaseVer_CCList.Text.EndsWith(";") && tb_AddBaseVer_CCList.Text != "")
                    tb_AddBaseVer_CCList.Text += ";";
                if (tb_AddBaseVer_DateTime.Text == "")
                    tb_AddBaseVer_DateTime = null;

                if (!g_SubIDRequired && tb_AddBaseVer_SubID.Text == "") tb_AddBaseVer_SubID = null;
                bool problem = ValidateFields(ref l_AddBaseVer_Error, ref rList_AddBaseVer, ref tb_AddBaseVer_TitleID, ref tb_AddBaseVer_BugID, ref g_tbDummy,
                                              ref tb_AddBaseVer_XemID, ref tb_AddBaseVer_SubID, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_AddBaseVer_CCList, ref dropList_AddBaseVer, ref dropList_AddBaseVer_Certificate, ref tb_AddBaseVer_Resolve, ref tb_AddBaseVer_DateTime);

                if (lb_AddBaseVer_VersionAdds.Items.Count == 0)
                {
                    l_AddBaseVer_Error.Text += "<li>No Base Versions were provided. At least one is required to submit this request.</li>";
                    problem = true;
                }
                else
                {
                    foreach (ListItem li in lb_AddBaseVer_VersionAdds.Items)
                    {
                        string[] tempAry = li.Text.Split('|');
                        tempAry[0] = tempAry[0].Remove(0, 2).Trim();

                        if (VerifyVersions(tempAry[0], tempAry[1], g_environments[rList_AddBaseVer.SelectedValue].ToString(), tb_AddBaseVer_TitleID.Text, 0))
                        {
                            l_AddBaseVer_Error.Text += "<li>The Base Version '0x" + tempAry[0] + "[" + tempAry[1] + "]" + "' already exists on this title!</li>";
                            problem = true;
                        }
                    }
                }
                EnvInfo envinfo=GetEnvInfo(rList_AddBaseVer.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_AddBaseVer.SelectedValue, "Add Base Version(s)");
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    
                    if (!VerifyBugID(tb_AddBaseVer_BugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_AddBaseVer_Error))
                        problem = true;
                }           
                

                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_AddBaseVer.SelectedValue].ToString(), tb_AddBaseVer_TitleID.Text, ref l_AddBaseVer_Error))
                    {
                        if (tb_AddBaseVer_TitleProp.Text == "")
                        {
                            l_AddBaseVer_Error.Text += "<li>No 'Title Prop Bug ID' was provided. If you wish to submit this request for a title that has not been propped yet, you must provide the bug number for that prop.</li>";
                            problem = true;
                        }
                        else if (!VerifyBugID(tb_AddBaseVer_TitleProp.Text, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel, configinfo.PreReqTitleBug.OptionType, tb_AddBaseVer_TitleID.Text, configinfo.PreReqTitleBug.Status, ref l_AddBaseVer_Error))                        
                        {
                            
                            problem = true;
                        }
                    }
                }
                if (problem)
                {
                    l_AddBaseVer_Error.Text = g_errText + l_AddBaseVer_Error.Text;
                    g_problem = true;
                }
                else
                    l_AddBaseVer_Error.Text = "";
            }
            #endregion

            #region Upload TMS Files
            if (this.cbUploadTMS.Checked)
            {
                // basic field validation
                if (!tb_UploadTMS_CCList.Text.EndsWith(";") && tb_UploadTMS_CCList.Text != "")
                    tb_UploadTMS_CCList.Text += ";";
                if (tb_UploadTMS_DateTime.Text == "")
                    tb_UploadTMS_DateTime = null;

                bool problem = ValidateFields(ref l_UploadTMS_Error, ref rList_UploadTMS, ref tb_UploadTMS_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_UploadTMS_CCList, ref dropList_UploadTMS, ref dropList_UploadTMS_Certificate, ref tb_UploadTMS_Resolve, ref tb_UploadTMS_DateTime);
                EnvInfo envinfo=GetEnvInfo(rList_UploadTMS.SelectedValue);
                ConfigInfo configinfo=GetPreReqBugInfo(rList_UploadTMS.SelectedValue,this.cbUploadTMS.Text);

                if (!System.IO.Directory.Exists(g_sharedFolder + l_UploadTMS_Guid.Text))
                {
                    l_UploadTMS_Error.Text += "<li>The folder does not exist in the file share. Try reloading Prop Manager.</li>";
                    problem = true;
                }
                else
                {
                    if (this.cbUploadTMSToggle.Checked)
                    {
                        if (tb_UploadTMS_DepBugID.Text == "")
                        {
                            l_UploadTMS_Error.Text += "<li>Missing 'Global TU Bug ID'!</li>";
                            problem = true;
                        }
                        else if (!VerifyBugID(tb_UploadTMS_DepBugID.Text, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_UploadTMS_Error))
                        {
                            
                            problem = true;
                        }
                    }
                }

                if (!problem)
                {
                    fileList = FindFiles(g_sharedFolder + l_UploadTMS_Guid.Text, "!");
                    if (fileList.Count == 0)
                    {
                        l_UploadTMS_Error.Text += "<li>There are no TMS files in the shared folder.</li>";
                        problem = true;
                    }
                }

                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_UploadTMS.SelectedValue].ToString(), tb_UploadTMS_TitleID.Text, ref l_UploadTMS_Error))
                        problem = true;
                }
                if (problem)
                {
                    l_UploadTMS_Error.Text = g_errText + l_UploadTMS_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Delete TMS Files
            if (this.cbDeleteTMS.Checked)
            {
                // basic field validation
                if (!tb_DeleteTMS.Text.EndsWith("\r\n") && tb_DeleteTMS.Text != "")
                    tb_DeleteTMS.Text += "\r\n";
                if (!tb_DeleteTMS_CCList.Text.EndsWith(";") && tb_DeleteTMS_CCList.Text != "")
                    tb_DeleteTMS_CCList.Text += ";";
                if (tb_DeleteTMS_DateTime.Text == "")
                    tb_DeleteTMS_DateTime = null;

                bool problem = ValidateFields(ref l_DeleteTMS_Error, ref rList_DeleteTMS, ref tb_DeleteTMS_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_DeleteTMS_CCList, ref dropList_DeleteTMS, ref dropList_DeleteTMS_Certificate, ref tb_DeleteTMS_Resolve, ref tb_DeleteTMS_DateTime);


                if (tb_DeleteTMS.Text != "")
                {                    
                    string[] offerId = tb_DeleteTMS.Text.Split('\n');
                    bool found = false;
                    for (int i = 0; i < offerId.Length - 1; i++)
                    {
                        
                        for (int j = i + 1; j < offerId.Length - 1; j++)
                        {
                            if (offerId[i].Trim().Equals(offerId[j].Trim()))
                            {
                                l_DeleteTMS_Error.Text += "<li>Duplicate File Name entries found</li><br>";
                                found = true;
                                problem = true;
                                 break;
                            }
                        }
                        if (found)
                            break;
                    }
                }

                
                if (!IsFieldValid(tb_DeleteTMS.Text, "TMSList"))
                {
                    l_DeleteTMS_Error.Text += "<li>Invalid Name file list.</li>";
                    problem = true;
                }

                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_DeleteTMS.SelectedValue].ToString(), tb_DeleteTMS_TitleID.Text, ref l_DeleteTMS_Error))
                        problem = true;
                }
                if (problem)
                {
                    l_DeleteTMS_Error.Text = g_errText + l_DeleteTMS_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Configure XLSP Server
            if (this.cbConfigXLSP.Checked)
            {
                if (!tb_ConfigXLSP_CCList.Text.EndsWith(";") && tb_ConfigXLSP_CCList.Text != "")
                    tb_ConfigXLSP_CCList.Text += ";";

                bool problem = false;

                if (rList_ConfigXLSP_Environment.SelectedIndex == -1)
                {
                    l_ConfigXLSP_Error.Text += "<li>No 'Environment' was selected.</li>";
                    problem = true;
                }
                EnvInfo envinfo = new EnvInfo();
                ConfigInfo configinfo = new ConfigInfo();
                if(!problem)
                {
                    envinfo=GetEnvInfo(rList_ConfigXLSP_Environment.SelectedValue);
                    configinfo=GetPreReqBugInfo(rList_ConfigXLSP_Environment.SelectedValue,this.cbConfigXLSP.Text);
                }
                if (dList_ConfigXLSP_Certificate.SelectedIndex == 0)        // NOTHING SELECTED
                {
                    l_ConfigXLSP_Error.Text += "<li>No 'XLSP Option' was selected.</li>";
                    problem = true;
                }
                else if (dList_ConfigXLSP_Certificate.SelectedIndex == 1)   // NEW
                {
                    #region NEW XLSP

                    string envID = g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString();
                    string titleID = "0x" + tb_ConfigXLSP_New_TitleID.Text;

                    string serviceID1 = ""; string serviceID2 = ""; string serviceID3 = ""; string serviceID4 = "";
                    string siteID1 = ""; string siteID2 = ""; string siteID3 = ""; string siteID4 = "";

                    // connect to TitleVer and verify the Service/Site ID Pairs don't already exist!
                    
                    if (rList_ConfigXLSP_New_ServiceID.SelectedIndex >= 1)
                    {
                        serviceID1 = tb_ConfigXLSP_New_ServID1.Text.ToUpper();
                        siteID1 = tb_ConfigXLSP_New_SiteID1.Text.ToUpper();

                        if (serviceID1 == "" || siteID1 == "")
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #1 and/or Site ID #1 is missing.</li>";
                            problem = true;
                        }
                        else if (!IsFieldValid(serviceID1, "Hex32") && !IsFieldValid(siteID1, "Hex32"))
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #1 and/or Site ID #1 is invalid.</li>";
                            problem = true;
                        }
                        else if (!VerifyServiceIDs("0x" + serviceID1, "0x" + siteID1, envID, titleID))
                        {
                            l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID1 + ")/Site ID (0x" + siteID1 + ") pair already exists for this title in the selected environment.</li>";
                            problem = true;
                        }
                    }
                    if (rList_ConfigXLSP_New_ServiceID.SelectedIndex >= 2)
                    {
                        serviceID2 = tb_ConfigXLSP_New_ServID2.Text.ToUpper();
                        siteID2 = tb_ConfigXLSP_New_SiteID2.Text.ToUpper();

                        if (serviceID2 == "" || siteID2 == "")
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #2 and/or Site ID #2 is missing.</li>";
                            problem = true;
                        }
                        else if (!IsFieldValid(serviceID2, "Hex32") && !IsFieldValid(siteID2, "Hex32"))
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #2 and/or Site ID #2 is invalid.</li>";
                            problem = true;
                        }
                        if (!VerifyServiceIDs("0x" + serviceID2, "0x" + siteID2, envID, titleID))
                        {
                            l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID2 + ")/Site ID (0x" + siteID2 + ") pair already exists for this title in the selected environment.</li>";
                            problem = true;
                        }
                    }
                    if (rList_ConfigXLSP_New_ServiceID.SelectedIndex >= 3)
                    {
                        serviceID3 = tb_ConfigXLSP_New_ServID3.Text.ToUpper();
                        siteID3 = tb_ConfigXLSP_New_SiteID3.Text.ToUpper();

                        if (serviceID3 == "" || siteID3 == "")
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #3 and/or Site ID #3 is missing.</li>";
                            problem = true;
                        }
                        else if (!IsFieldValid(serviceID3, "Hex32") && !IsFieldValid(siteID3, "Hex32"))
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #3 and/or Site ID #3 is invalid.</li>";
                            problem = true;
                        }
                        if (!VerifyServiceIDs("0x" + serviceID3, "0x" + siteID3, envID, titleID))
                        {
                            l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID3 + ")/Site ID (0x" + siteID3 + ") pair already exists for this title in the selected environment.</li>";
                            problem = true;
                        }
                    }
                    if (rList_ConfigXLSP_New_ServiceID.SelectedIndex >= 4)
                    {
                        serviceID4 = tb_ConfigXLSP_New_ServID4.Text.ToUpper();
                        siteID4 = tb_ConfigXLSP_New_SiteID4.Text.ToUpper();

                        if (serviceID4 == "" || siteID4 == "")
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #4 and/or Site ID #4 is missing.</li>";
                            problem = true;
                        }
                        else if (!IsFieldValid(serviceID4, "Hex32") && !IsFieldValid(siteID4, "Hex32"))
                        {
                            l_ConfigXLSP_Error.Text += "<li>Service ID #4 and/or Site ID #4 is invalid.</li>";
                            problem = true;
                        }
                        if (!VerifyServiceIDs("0x" + serviceID4, "0x" + siteID4, envID, titleID))
                        {
                            l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID4 + ")/Site ID (0x" + siteID4 + ") pair already exists for this title in the selected environment.</li>";
                            problem = true;
                        }
                    }
                    if (rList_ConfigXLSP_New_ServiceID.SelectedIndex == 0 && !this.cbConfigXLSPNewMassive.Checked)
                    {
                        l_ConfigXLSP_Error.Text += "<li>No Service ID selected (#0) and  Massive is also not checked.</li>";
                        problem = true;
                    }
                    if (this.cbConfigXLSPNewMassive.Checked)
                    {
                        string serviceIDMass =envinfo.MassiveServiceId;
                        string siteIDMass =envinfo.MassiveSiteId;
                        //string serviceIDMass = "0x00000016";
                        //string siteIDMass = "0x4D540001";

                        if (!VerifyServiceIDs(serviceIDMass, siteIDMass, envID, titleID))
                        {
                            l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceIDMass + ")/Site ID (0x" + siteIDMass + ") pair already exists for this title in the selected environment.</li>";
                            problem = true;
                        }
                    }

                    if ((((serviceID1 == serviceID2 && serviceID2 != "") || (serviceID1 == serviceID3 && serviceID3 != "") || (serviceID1 == serviceID4 && serviceID4 != "")) && ((siteID1 == siteID2 && siteID2 != "") || (siteID1 == siteID3 && siteID3 != "") || (siteID1 == siteID4 && siteID4 != ""))) ||
                         (((serviceID2 == serviceID1 && serviceID1 != "") || (serviceID2 == serviceID3 && serviceID3 != "") || (serviceID2 == serviceID4 && serviceID4 != "")) && ((siteID2 == siteID1 && siteID1 != "") || (siteID2 == siteID3 && siteID3 != "") || (siteID2 == siteID4 && siteID4 != ""))) ||
                         (((serviceID3 == serviceID1 && serviceID1 != "") || (serviceID3 == serviceID2 && serviceID2 != "") || (serviceID3 == serviceID4 && serviceID4 != "")) && ((siteID3 == siteID1 && siteID1 != "") || (siteID3 == siteID2 && siteID2 != "") || (siteID3 == siteID4 && siteID4 != ""))) ||
                         (((serviceID4 == serviceID1 && serviceID1 != "") || (serviceID4 == serviceID3 && serviceID3 != "") || (serviceID4 == serviceID2 && serviceID2 != "")) && ((siteID4 == siteID1 && siteID1 != "") || (siteID4 == siteID3 && siteID3 != "") || (siteID4 == siteID2 && siteID2 != ""))))
                    {
                        l_ConfigXLSP_Error.Text += "<li>There are one or more duplicate Service/Site ID pairs.</li>";
                        problem = true;
                    }
                    if ((serviceID1 == envinfo.MassiveServiceId && siteID1 == envinfo.MassiveSiteId && this.cbConfigXLSPNewMassive.Checked) ||
                         (serviceID2 == envinfo.MassiveServiceId && siteID2 == envinfo.MassiveSiteId && this.cbConfigXLSPNewMassive.Checked) ||
                         (serviceID3 == envinfo.MassiveServiceId && siteID3 == envinfo.MassiveSiteId && this.cbConfigXLSPNewMassive.Checked) ||
                         (serviceID4 == envinfo.MassiveServiceId && siteID4 == envinfo.MassiveSiteId && this.cbConfigXLSPNewMassive.Checked))
                    {
                        l_ConfigXLSP_Error.Text += "<li>Duplicate Service/Site ID pairs detected. Please verify you don't have Massive typed <b>and</b> checked.</li>";
                        problem = true;
                    }

                    if (tb_ConfigXLSP_New_PartnerName.Text == "")
                    {
                        l_ConfigXLSP_Error.Text += "<li>Missing 'Partner Name'.</li>";
                        problem = true;
                    }

                    if (tb_ConfigXLSP_New_TitleID.Text == "")
                    {
                        l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'.</li>";
                        problem = true;
                    }
                    else if (!IsFieldValid(tb_ConfigXLSP_New_TitleID.Text, "Hex32"))
                    {
                        l_ConfigXLSP_Error.Text += "<li>Invalid 'Title ID'.</li>";
                        problem = true;
                    }
                    else
                    {
                        if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_New_TitleID.Text, ref l_ConfigXLSP_Error) || ((VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_New_TitleID.Text, ref g_lDummy) && (!(VerifyNotMarketplace(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_New_TitleID.Text, ref l_ConfigXLSP_Error))))))
                        {
                            if (tb_ConfigXLSP_New_TitleProp.Text == "")
                            {
                                l_ConfigXLSP_Error.Text += "<li>No Title Prop (XLAST) Bug ID was provided. This is required if the Title ID does not exist or exist as MarketPlace file.</li>";
                                problem = true;
                            }
                            else if (!VerifyBugID(tb_ConfigXLSP_New_TitleProp.Text, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel,configinfo.PreReqTitleBug.OptionType, tb_ConfigXLSP_New_TitleID.Text, configinfo.PreReqTitleBug.Status, ref l_ConfigXLSP_Error))
                                problem = true;

                            if (!problem)
                                g_ConfigXLSP_New_TitlePropRequired = true;
                        }
                        
                    }

                    if (tb_ConfigXLSP_IPs.Text == "")
                    {
                        l_ConfigXLSP_Error.Text += "<li>No 'Internet Routable IP Addresses' were provided.</li>";
                        problem = true;
                    }
                    else
                    {
                        if (!tb_ConfigXLSP_IPs.Text.EndsWith("\r\n") && tb_ConfigXLSP_IPs.Text != "")
                            tb_ConfigXLSP_IPs.Text += "\r\n";
                        if (!IsFieldValid(tb_ConfigXLSP_IPs.Text, "IPList"))
                        {
                            l_ConfigXLSP_Error.Text += "<li>Invalid IP Address List.</li>";
                            problem = true;
                        }
                        if (tb_ConfigXLSP_IPs.Text != "")
                        {
                            string[] ipList = tb_ConfigXLSP_IPs.Text.Split('\n');
                            bool found = false;
                            for (int i = 0; i < ipList.Length - 1; i++)
                            {
                                for (int j = i + 1; j < ipList.Length - 1; j++)
                                {
                                    if (ipList[i].Trim().Equals(ipList[j].Trim()))
                                    {
                                        found = true;
                                        problem = true;
                                        l_ConfigXLSP_Error.Text += "<li>Duplicate IP Address entries found</li><br>";
                                        break;
                                    }
                                }
                                if (found)
                                    break;
                            }
                        }
                    }
                  
                    if (rList_ConfigXLSP_New_SGVer.SelectedIndex == -1)
                    {
                        l_ConfigXLSP_Error.Text += "<li>No 'XLSP SG Version' was selected.</li>";
                        problem = true;
                    }
                    #endregion
                }
                else if (dList_ConfigXLSP_Certificate.SelectedIndex == 2)   // MODIFY
                {
                    #region MODIFY XLSP

                    if (dList_ConfigXLSP_Modify_CertNames.SelectedIndex == 0)
                    {
                        l_ConfigXLSP_Error.Text += "<li>Missing 'Certificate Name'.</li>";
                        problem = true;
                    }

                    if (!(this.cbConfigXLSPAddIPs.Checked || this.cbConfigXLSPAddServiceIDs.Checked || this.cbConfigXLSPRemIPs.Checked || this.cbConfigXLSPRemSvcids.Checked || this.cbConfigXLSPAddTitle.Checked))
                    {
                        l_ConfigXLSP_Error.Text += "<li>No 'Change Type' checked.</li>";
                        problem = true;
                    }

                    if (this.cbConfigXLSPAddTitle.Checked)
                    {
                        if (tb_ConfigXLSP_Modify_TitleID.Text == "")
                        {
                            l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'.</li>";
                            problem = true;
                        }
                        else
                        {
                            if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error) || ((VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref g_lDummy) && (!(VerifyNotMarketplace(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))))))
                            {
                                
                                if (tb_ConfigXLSP_Modify_TitleProp.Text == "")
                                {
                                    l_ConfigXLSP_Error.Text += "<li>No Title Prop (XLAST) Bug ID was provided. This is required if the Title ID does not exist or exists as a MarketPlace file.</li>";
                                    problem = true;
                                }
                                
                                else if (!VerifyBugID(tb_ConfigXLSP_Modify_TitleProp.Text, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel,configinfo.PreReqTitleBug.OptionType, tb_ConfigXLSP_Modify_TitleID.Text, configinfo.PreReqTitleBug.Status, ref l_ConfigXLSP_Error))
                                    problem = true;

                                if (!problem)
                                    g_ConfigXLSP_Modify_TitlePropRequired = true;
                            }
                           
                            if (!VerifyServiceIDs(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), "0x" + tb_ConfigXLSP_Modify_TitleID.Text) && !this.cbConfigXLSPAddServiceIDs.Checked)
                            {
                                l_ConfigXLSP_Error.Text += "<li>There are currently no Service/Site ID pairs associated with this title. In order to add a title to this certificate, you must also provide at least one Service/Site ID pair by utilizing the <b>Add Service ID(s)</b> checkbox below.</li>";
                                problem = true;
                            }
                        }

                        string titleID = tb_ConfigXLSP_Modify_TitleID.Text;
                        string envID = g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString();
                        string certificateID = dList_ConfigXLSP_Modify_CertNames.SelectedItem.Value;

                        if (IsTitleOnCertificate("0x" + titleID, envID, certificateID))
                        {
                            if (!g_titleVerConnErr)
                                l_ConfigXLSP_Error.Text += "<li>The Title ID (0x" + titleID + ") already exists on the selected certificate (" + dList_ConfigXLSP_Modify_CertNames.SelectedItem.Text + ") in the selected environment.</li>";
                            else
                            {
                                l_ConfigXLSP_Error.Text += "<li>Could not connect to Title Verification.</li>";
                                g_titleVerConnErr = false;
                            }
                            problem = true;
                        }
                    }

                    if (!problem)
                    {
                        if (this.cbConfigXLSPAddServiceIDs.Checked)
                        {
                            string envID = g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString();
                            string titleID = "0x" + tb_ConfigXLSP_Modify_TitleID.Text;

                            string serviceID1 = ""; string serviceID2 = ""; string serviceID3 = ""; string serviceID4 = "";
                            string siteID1 = ""; string siteID2 = ""; string siteID3 = ""; string siteID4 = "";

                            // connect to TitleVer and verify the Service/Site ID Pairs don't already exist!
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex >= 1)
                            {
                                serviceID1 = tb_ConfigXLSP_Modify_AddTitle_ServID1.Text.ToUpper();
                                siteID1 = tb_ConfigXLSP_Modify_AddTitle_SiteID1.Text.ToUpper();

                                if (serviceID1 == "" || siteID1 == "")
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #1 and/or Site ID #1 is missing.</li>";
                                    problem = true;
                                }
                                else if (!IsFieldValid(serviceID1, "Hex32") && !IsFieldValid(siteID1, "Hex32"))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #1 and/or Site ID #1 is invalid.</li>";
                                    problem = true;
                                }
                                if (!VerifyServiceIDs("0x" + serviceID1, "0x" + siteID1, envID, titleID))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID1 + ")/Site ID (0x" + siteID1 + ") pair already exists for this title in the selected environment.</li>";
                                    problem = true;
                                }
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex >= 2)
                            {
                                serviceID2 = tb_ConfigXLSP_Modify_AddTitle_ServID2.Text.ToUpper();
                                siteID2 = tb_ConfigXLSP_Modify_AddTitle_SiteID2.Text.ToUpper();

                                if (serviceID2 == "" || siteID2 == "")
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #2 and/or Site ID #2 is missing.</li>";
                                    problem = true;
                                }
                                else if (!IsFieldValid(serviceID2, "Hex32") && !IsFieldValid(siteID2, "Hex32"))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #2 and/or Site ID #2 is invalid.</li>";
                                    problem = true;
                                }
                                if (!VerifyServiceIDs("0x" + serviceID2, "0x" + siteID2, envID, titleID))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID2 + ")/Site ID (0x" + siteID2 + ") pair already exists for this title in the selected environment.</li>";
                                    problem = true;
                                }
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex >= 3)
                            {
                                serviceID3 = tb_ConfigXLSP_Modify_AddTitle_ServID3.Text.ToUpper();
                                siteID3 = tb_ConfigXLSP_Modify_AddTitle_SiteID3.Text.ToUpper();

                                if (serviceID3 == "" || siteID3 == "")
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #3 and/or Site ID #3 is missing.</li>";
                                    problem = true;
                                }
                                else if (!IsFieldValid(serviceID3, "Hex32") && !IsFieldValid(siteID3, "Hex32"))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #3 and/or Site ID #3 is invalid.</li>";
                                    problem = true;
                                }
                                if (!VerifyServiceIDs("0x" + serviceID3, "0x" + siteID3, envID, titleID))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID3 + ")/Site ID (0x" + siteID3 + ") pair already exists for this title in the selected environment.</li>";
                                    problem = true;
                                }
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex >= 4)
                            {
                                serviceID4 = tb_ConfigXLSP_Modify_AddTitle_ServID4.Text.ToUpper();
                                siteID4 = tb_ConfigXLSP_Modify_AddTitle_SiteID4.Text.ToUpper();

                                if (serviceID4 == "" || siteID4 == "")
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #4 and/or Site ID #4 is missing.</li>";
                                    problem = true;
                                }
                                else if (!IsFieldValid(serviceID4, "Hex32") && !IsFieldValid(siteID4, "Hex32"))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Service ID #4 and/or Site ID #4 is invalid.</li>";
                                    problem = true;
                                }
                                if (!VerifyServiceIDs("0x" + serviceID4, "0x" + siteID4, envID, titleID))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>The Service ID (0x" + serviceID4 + ")/Site ID (0x" + siteID4 + ") pair already exists for this title in the selected environment.</li>";
                                    problem = true;
                                }
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex == 0 && !this.cbConfigXLSPModifyMassive.Checked)
                            {
                                l_ConfigXLSP_Error.Text += "<li>No Service ID selected (#0) and  Massive is also not checked.</li>";
                                problem = true;
                            }
                            if (this.cbConfigXLSPModifyMassive.Checked)
                            {
                                string serviceIDMass = envinfo.MassiveServiceId;// "0x00000016";
                                string siteIDMass = envinfo.MassiveSiteId; //"0x4D540001";
                                
                                if (!VerifyServiceIDs(serviceIDMass, siteIDMass, envID, titleID))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>The Service ID (" + serviceIDMass + ")/Site ID (" + siteIDMass + ") pair already exists for this title in the selected environment.</li>";
                                    problem = true;
                                }
                            }

                            if ((((serviceID1 == serviceID2 && serviceID2 != "") || (serviceID1 == serviceID3 && serviceID3 != "") || (serviceID1 == serviceID4 && serviceID4 != "")) && ((siteID1 == siteID2 && siteID2 != "") || (siteID1 == siteID3 && siteID3 != "") || (siteID1 == siteID4 && siteID4 != ""))) ||
                               (((serviceID2 == serviceID1 && serviceID1 != "") || (serviceID2 == serviceID3 && serviceID3 != "") || (serviceID2 == serviceID4 && serviceID4 != "")) && ((siteID2 == siteID1 && siteID1 != "") || (siteID2 == siteID3 && siteID3 != "") || (siteID2 == siteID4 && siteID4 != ""))) ||
                               (((serviceID3 == serviceID1 && serviceID1 != "") || (serviceID3 == serviceID2 && serviceID2 != "") || (serviceID3 == serviceID4 && serviceID4 != "")) && ((siteID3 == siteID1 && siteID1 != "") || (siteID3 == siteID2 && siteID2 != "") || (siteID3 == siteID4 && siteID4 != ""))) ||
                               (((serviceID4 == serviceID1 && serviceID1 != "") || (serviceID4 == serviceID3 && serviceID3 != "") || (serviceID4 == serviceID2 && serviceID2 != "")) && ((siteID4 == siteID1 && siteID1 != "") || (siteID4 == siteID3 && siteID3 != "") || (siteID4 == siteID2 && siteID2 != ""))))
                            {
                                l_ConfigXLSP_Error.Text += "<li>There are one or more duplicate Service/Site ID pairs.</li>";
                                problem = true;
                            }
                            if ((serviceID1 == envinfo.MassiveServiceId && siteID1 == envinfo.MassiveSiteId && this.cbConfigXLSPModifyMassive.Checked) ||
                                 (serviceID2 == envinfo.MassiveServiceId  && siteID2 == envinfo.MassiveSiteId && this.cbConfigXLSPModifyMassive.Checked) ||
                                 (serviceID3 == envinfo.MassiveServiceId  && siteID3 == envinfo.MassiveSiteId && this.cbConfigXLSPModifyMassive.Checked) ||
                                 (serviceID4 == envinfo.MassiveServiceId  && siteID4 == envinfo.MassiveSiteId && this.cbConfigXLSPModifyMassive.Checked))
                            {
                                l_ConfigXLSP_Error.Text += "<li>Duplicate Service/Site ID pairs detected. Please verify you don't have Massive typed <b>and</b> checked.</li>";
                                problem = true;
                            }

                            if (tb_ConfigXLSP_Modify_TitleID.Text == "")
                            {
                                l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'.</li>";
                                problem = true;
                            }
                            else if (!IsFieldValid(tb_ConfigXLSP_Modify_TitleID.Text, "Hex32"))
                            {
                                l_ConfigXLSP_Error.Text += "<li>Invalid 'Title ID'.</li>";
                                problem = true;
                            }
                            else
                            {
                                if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error) || ((VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref g_lDummy) && (!(VerifyNotMarketplace(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))))))
                                {
                                    if (tb_ConfigXLSP_Modify_TitleProp.Text == "")
                                    {
                                        l_ConfigXLSP_Error.Text += "<li>No Title Prop (XLAST) Bug ID was provided. This is required if the Title ID does not exist or exists as MarketPlace File.</li>";
                                        problem = true;
                                    }
                                    
                                    else if (!VerifyBugID(tb_ConfigXLSP_Modify_TitleProp.Text, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel,configinfo.PreReqTitleBug.OptionType, tb_ConfigXLSP_Modify_TitleID.Text, configinfo.PreReqTitleBug.Status, ref l_ConfigXLSP_Error))
                                        problem = true;

                                    if (!problem)
                                        g_ConfigXLSP_Modify_TitlePropRequired = true;
                                }
                                
                            }
                        }

                        if (this.cbConfigXLSPRemSvcids.Checked)
                        {
                            if (lb_ConfigXLSP_Modify_RemSvcids.Items.Count == 0)
                            {
                                l_ConfigXLSP_Error.Text += "<li>There are no Service/Site ID Pairs in the list to remove.</li>";
                                problem = true;
                            }

                            if (!this.cbConfigXLSPAddServiceIDs.Checked && tb_ConfigXLSP_Modify_TitleID.Text == "")
                            {
                                l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'.</li>";
                                problem = true;
                            }
                            else
                            {
                                if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))
                                    problem = true;
                            }
                        }

                        if (this.cbConfigXLSPAddIPs.Checked)
                        {
                            if (tb_ConfigXLSP_Modify_AddIPs.Text == "")
                            {
                                l_ConfigXLSP_Error.Text += "<li>No 'Internet Routable IP Addresses' were provided.</li>";
                                problem = true;

                                tb_ConfigXLSP_Modify_AddIPs.BackColor = System.Drawing.Color.Red;
                            }
                            else
                            {
                                tb_ConfigXLSP_Modify_AddIPs.BackColor = System.Drawing.Color.White;

                                if (!tb_ConfigXLSP_Modify_AddIPs.Text.EndsWith("\r\n") && tb_ConfigXLSP_Modify_AddIPs.Text != "")
                                    tb_ConfigXLSP_Modify_AddIPs.Text += "\r\n";
                                if (!IsFieldValid(tb_ConfigXLSP_Modify_AddIPs.Text, "IPList"))
                                {
                                    l_ConfigXLSP_Error.Text += "<li>Invalid IP Address List.</li>";
                                    problem = true;
                                }
                            }
                        }

                        if (this.cbConfigXLSPRemIPs.Checked)
                        {
                            if (lb_ConfigXLSP_Modify_RemIPs_IPs.Items.Count == 0)
                            {
                                l_ConfigXLSP_Error.Text += "<li>No 'IP Addresses' were provided to remove.</li>";
                                problem = true;
                            }
                        }
                    }
                    #endregion
                }
                else if (dList_ConfigXLSP_Certificate.SelectedIndex == 3)   // Renew Certificate
                {
                    #region RENEW CERT

                    if (dList_ConfigXLSP_Renew_CertNames.SelectedIndex == 0)
                    {
                        l_ConfigXLSP_Error.Text += "<li>Missing 'Certificate Name'.</li>";
                        problem = true;
                    }

                    #endregion
                }

                if (tb_ConfigXLSP_CCList.Text != "")
                {
                    if (!IsFieldValid(tb_ConfigXLSP_CCList.Text, "CC"))
                    {
                        l_ConfigXLSP_Error.Text += "<li>Invalid 'Cc E-mail' list.</li>";
                        problem = true;
                    }
                }

                if (problem)
                {
                    l_ConfigXLSP_Error.Text = g_errText + l_ConfigXLSP_Error.Text;
                    g_problem = true;

                }
            }
            #endregion

            #region Configure New EA LSP
            if (this.cbConfigEALSP.Checked)
            {
                if (!tb_ConfigEALSP_CCList.Text.EndsWith(";") && tb_ConfigEALSP_CCList.Text != "")
                    tb_ConfigEALSP_CCList.Text += ";";

                bool problem = false;

                if (rList_ConfigEALSP.SelectedIndex == -1)
                {
                    l_ConfigEALSP_Error.Text += "<li>No environment selected.</li>";
                    problem = true;
                }

                if (!problem)
                {
                    if (tb_ConfigEALSP_TitleID.Text == "")
                    {
                        l_ConfigEALSP_Error.Text += "<li>Missing 'Title ID'.</li>";
                        problem = true;
                    }

                    // Service IDs
                    if (dList_ConfigEALSP_SvcID1.SelectedIndex == 0 && !this.cbConfigEALSPMassive.Checked)
                    {
                        l_ConfigEALSP_Error.Text += "<li>No Service ID selected and Massive is also not checked.</li>";
                        problem = true;
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 0 && dList_ConfigEALSP_SvcID1.SelectedIndex == 0)
                    {
                        l_ConfigEALSP_Error.Text += "<li>No Service ID selected (#1).</li>";
                        problem = true;
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 1 && dList_ConfigEALSP_SvcID2.SelectedIndex == 0)
                    {
                        l_ConfigEALSP_Error.Text += "<li>No Service ID selected (#2).</li>";
                        problem = true;
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 2 && dList_ConfigEALSP_SvcID3.SelectedIndex == 0)
                    {
                        l_ConfigEALSP_Error.Text += "<li>No Service ID selected (#3).</li>";
                        problem = true;
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex >3 && dList_ConfigEALSP_SvcID4.SelectedIndex == 0)
                    {
                        l_ConfigEALSP_Error.Text += "<li>No Service ID selected (#3).</li>";
                        problem = true;
                    }
                }

                if (tb_ConfigEALSP_CCList.Text != "")
                {
                    if (!IsFieldValid(tb_ConfigEALSP_CCList.Text, "CC"))
                    {
                        l_ConfigEALSP_Error.Text += "<li>Invalid 'Cc E-mail' list.</li>";
                        problem = true;
                    }
                }

                string serviceID1 = ""; string serviceID2 = ""; string serviceID3 = ""; string serviceID4 = "";
                serviceID1 = dList_ConfigEALSP_SvcID1.SelectedItem.Text.ToUpper();
                serviceID2 = dList_ConfigEALSP_SvcID2.SelectedItem.Text.ToUpper();
                serviceID3 = dList_ConfigEALSP_SvcID3.SelectedItem.Text.ToUpper();
                serviceID4 = dList_ConfigEALSP_SvcID4.SelectedItem.Text.ToUpper();

                string noSel = "-- SELECT SERVICE ID -> SITE ID --";

                if (((serviceID1 == serviceID2 && serviceID2 != noSel) || (serviceID1 == serviceID3 && serviceID3 != noSel) || (serviceID1 == serviceID4 && serviceID4 != noSel)) ||
                    ((serviceID2 == serviceID3 && serviceID3 != noSel) || (serviceID2 == serviceID4 && serviceID4 != noSel)) ||
                    ((serviceID3 == serviceID4 && serviceID4 != noSel)))
                {
                    if (rList_ConfigEALSP_ServiceID.SelectedItem.Text != "1")
                    {
                        l_ConfigEALSP_Error.Text += "<li>There are one or more duplicate Service IDs selected.</li>";
                        problem = true;
                    }
                }

                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[rList_ConfigEALSP.SelectedValue].ToString(), tb_ConfigEALSP_TitleID.Text, ref l_ConfigEALSP_Error))
                        problem = true;
                }
                if (problem)
                {
                    l_ConfigEALSP_Error.Text = g_errText + l_ConfigEALSP_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Configure Web Services
            if (this.cbConfigWebSvc.Checked)
            {
                if (!tb_WebSvc_CCList.Text.EndsWith(";") && tb_WebSvc_CCList.Text != "")
                    tb_WebSvc_CCList.Text += ";";

                bool problem = false;

                if (rList_WebSvc_Environment.SelectedIndex == -1)
                {
                    l_WebSvc_Error.Text += "<li>No 'Environment' was selected.</li>";
                    problem = true;
                }

                if (dList_WebSvc_Option.SelectedIndex == 0)        // invalid selection
                {
                    l_WebSvc_Error.Text += "<li>No 'Web Services Option' was selected.</li>";
                    problem = true;
                }
                else if (dList_WebSvc_Option.SelectedIndex == 1)   // NEW
                {
                    if (tb_WebSvc_New_PartnerName.Text == "")
                    {
                        l_WebSvc_Error.Text += "<li>Missing 'Partner Name'.</li>";
                        problem = true;
                    }
                    if (lb_WebSvc_New_TitleIDs.Items.Count == 0)
                    {
                        l_WebSvc_Error.Text += "<li>No 'Title ID(s)' added.</li>";
                        problem = true;
                    }
                    if (tb_WebSvc_New_IPList.Text == "")
                    {
                        l_WebSvc_Error.Text += "<li>No 'Internet Routable IP Address(es)' were provided.</li>";
                        problem = true;
                    }
                    else
                    {
                        if (!tb_WebSvc_New_IPList.Text.EndsWith("\r\n") && tb_WebSvc_New_IPList.Text != "")
                            tb_WebSvc_New_IPList.Text += "\r\n";
                        if (!IsFieldValid(tb_WebSvc_New_IPList.Text, "IPList"))
                        {
                            l_WebSvc_Error.Text += "<li>Invalid IP Address List.</li>";
                            problem = true;
                        }
                        if (tb_WebSvc_New_IPList.Text != "")
                        {
                            string[] ipList = tb_WebSvc_New_IPList.Text.Split('\n');
                            bool found = false;
                            for (int i = 0; i < ipList.Length - 1; i++)
                            {
                                for (int j = i + 1; j < ipList.Length - 1; j++)
                                {
                                    if (ipList[i].Trim().Equals(ipList[j].Trim()))
                                    {
                                        found = true;
                                        problem = true;
                                        l_WebSvc_Error.Text += "<li>Duplicate IP Address entries found</li><br>";
                                        break;
                                    }
                                }
                                if (found)
                                    break;
                            }
                        }
                    }
                    if (rList_WebSvc_New_APIs.SelectedIndex == -1)
                    {
                        l_WebSvc_Error.Text += "<li>No 'API Package' was selected.</li>";
                        problem = true;
                    }
                }
                else if (dList_WebSvc_Option.SelectedIndex == 2)   // MODIFY
                {
                    if (dList_WebSvc_Modify_CertNames.SelectedIndex == 0)
                    {
                        l_WebSvc_Error.Text += "<li>No 'Certificate Name' was selected.</li>";
                        problem = true;
                    }
                    if (!(cb_WebSvc_Modify_AddTitles.Checked || cb_WebSvc_Modify_RemTitles.Checked || cb_WebSvc_Modify_AddIPs.Checked || cb_WebSvc_Modify_RemIPs.Checked || cb_WebSvc_Modify_AddAPIs.Checked || cb_WebSvc_Modify_RemAPIs.Checked))
                    {
                        l_WebSvc_Error.Text += "<li>No 'Change Type' checked.</li>";
                        problem = true;
                    }

                    if (cb_WebSvc_Modify_AddTitles.Checked)
                    {
                        if (lb_WebSvc_Modify_AddTitles_TitleIDs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'Title IDs' were provided to add.</li>";
                            problem = true;
                        }
                    }
                    if (cb_WebSvc_Modify_RemTitles.Checked)
                    {
                        if (lb_WebSvc_Modify_RemTitles_TitleIDs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'Title IDs' were provided to remove.</li>";
                            problem = true;
                        }
                    }
                    if (cb_WebSvc_Modify_AddIPs.Checked)
                    {
                        if (lb_WebSvc_Modify_AddIPs_IPs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'IP Addresses' were provided to add.</li>";
                            problem = true;
                        }
                    }
                    if (cb_WebSvc_Modify_RemIPs.Checked)
                    {
                        if (lb_WebSvc_Modify_RemIPs_IPs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'IP Addresses' were provided to remove.</li>";
                            problem = true;
                        }
                    }
                    if (cb_WebSvc_Modify_AddAPIs.Checked)
                    {
                        if (lb_WebSvc_Modify_AddAPIs_APIs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'APIs' or 'Packages' were provided to add.</li>";
                            problem = true;
                        }
                    }
                    if (cb_WebSvc_Modify_RemAPIs.Checked)
                    {
                        if (lb_WebSvc_Modify_RemAPIs_APIs.Items.Count == 0)
                        {
                            l_WebSvc_Error.Text += "<li>No 'APIs' or 'Packages' were provided to remove.</li>";
                            problem = true;
                        }
                    }
                }
                else if (dList_WebSvc_Option.SelectedIndex == 3)   // RENEW
                {
                    if (dList_WebSvc_Renew_CertNames.SelectedIndex == 0)
                    {
                        l_WebSvc_Error.Text += "<li>No 'Certificate Name' selected.</li>";
                        problem = true;
                    }
                }

                if (problem)
                {
                    l_WebSvc_Error.Text = g_errText + l_WebSvc_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Reset Leaderboards
            if (this.cbLBReset.Checked)
            {
                // basic field validation
                if (!tb_LBReset_LBIDs.Text.EndsWith("\r\n") && tb_LBReset_LBIDs.Text != "")
                    tb_LBReset_LBIDs.Text += "\r\n";
                if (!tb_LBReset_CCList.Text.EndsWith(";") && tb_LBReset_CCList.Text != "")
                    tb_LBReset_CCList.Text += ";";

                bool problem = false;
                DropDownList dropListDummy = null;
                if (!cb_LBReset_All.Checked)
                    problem = ValidateFields(ref l_LBReset_Error, ref this.rList_LBReset, ref tb_LBReset_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref tb_LBReset_LBIDs,
                                              ref tb_LBReset_CCList, ref dropListDummy, ref dropList_LBReset_Certificate, ref g_tbDummy, ref tb_LBReset_DateTime);
                else
                    problem = ValidateFields(ref l_LBReset_Error, ref this.rList_LBReset, ref tb_LBReset_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_LBReset_CCList, ref dropListDummy, ref dropList_LBReset_Certificate, ref g_tbDummy, ref tb_LBReset_DateTime);
                
                
                if (!problem)
                {
                    if (!VerifyEnvironment(g_environments[this.rList_LBReset.SelectedValue].ToString(), tb_LBReset_TitleID.Text, ref l_LBReset_Error))
                        problem = true;
                }
                if (problem)
                {
                    l_LBReset_Error.Text = g_errText + l_LBReset_Error.Text;
                    g_problem = true;
                }
            }
            #endregion

            #region Xbox.com Achievement Blacklisting
            if (this.cbTitleFencing.Checked)
            {
                DropDownList dropListDummy = null;

                // field validation
                if (!tb_TitleFencing_CCList.Text.EndsWith(";") && tb_TitleFencing_CCList.Text != "")
                    tb_TitleFencing_CCList.Text += ";";

                bool problem = ValidateFields(ref l_TitleFencing_Error, ref rList_TitleFencing, ref tb_TitleFencing_TitleID, ref g_tbDummy, ref g_tbDummy,
                                              ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                              ref tb_TitleFencing_CCList, ref dropList_TitleFencing_Priority, ref dropListDummy, ref tb_TitleFencing_Resolve, ref g_tbDummy);
                             
                DateTime result;
                if (tb_TitleFencing_Date.Text.Equals(""))
                {
                    l_TitleFencing_Error.Text += "<li>Missing 'Fencing Date'</li>";
                    problem = true;
                }
                else
                {
                    string[] dt = tb_TitleFencing_Date.Text.Trim().Split(' ');
                    bool dt1 = DateTime.TryParseExact(dt[0], "mm/dd/yyyy",null, System.Globalization.DateTimeStyles.None, out result);
                    
                    Regex regEx = new Regex(@"(([0-1][0-9]|2[0-3])[0-5][0-9])$");
                    bool check = false; ;
                    if (dt.Length > 1)
                    {
                        check = regEx.IsMatch(dt[1]);
                    }

                    if ((!(dt1 && check)) || (dt.Length > 2))
                    {
                        l_TitleFencing_Error.Text += "<li>Invalid 'Fencing Date'.</li>";
                        problem = true;
                    }
                }
              

                if (!problem)
                {
                    EnvInfo envinfo=GetEnvInfo(rList_TitleFencing.SelectedValue);
                    ConfigInfo configinfo=GetPreReqBugInfo(rList_TitleFencing.SelectedValue,this.cbTitleFencing.Text);
                    if (!VerifyEnvironment(g_environments[rList_TitleFencing.SelectedValue].ToString(), tb_TitleFencing_TitleID.Text, ref l_TitleFencing_Error))
                    {
                        if (tb_TitleFencing_TitleProp.Text == "")
                        {
                            l_TitleFencing_Error.Text += "<li>No 'Title Prop Bug ID' was provided. If you wish to submit this request for a title that has not been propped yet, you must provide the bug number for that prop.</li>";
                            problem = true;
                        }
                        
                        else if (!VerifyBugID(tb_TitleFencing_TitleProp.Text, configinfo.PreReqTitleBug.EnvName, configinfo.PreReqTitleBug.EnvLabel,configinfo.PreReqTitleBug.OptionType, "", configinfo.PreReqTitleBug.Status, ref l_TitleFencing_Error))
                            problem = true;
                    }
                }
                if (problem)
                {
                    l_TitleFencing_Error.Text = g_errText + l_TitleFencing_Error.Text;
                    g_problem = true;
                }
                else
                    l_TitleFencing_Error.Text = "";
            }
            #endregion

            LogMessage("Field validation completed.");

            if (!g_problem && !g_noSubmit)
            {
                bool wf_problem = false;

                #region Request Keyed Offers Workflow
                if (cbRequestKO.Checked)
                {
                    string optionTitle = this.cbRequestKO.Text;// "Request Keyed Offer File(s)";
                    string type = "Prop Content";

                    string envName = rList_Prov.SelectedValue;
                    string titleID = "0x" + tb_Req_TitleID.Text;

                    string certStage = dropList_Prov_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Request Keyed Offer File(s) for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Offer ID(s):" + Environment.NewLine + tb_Req_OfferIDs.Text + Environment.NewLine + Environment.NewLine +
                                           "Resolve To: " + tb_Req_Resolve.Text;
                    int psPriority = dropList_Prov.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_Req_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_Req_DateTime.Text;

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_Req_CCList, ref lb_Req_AliasList);
                    string emailCCList = tb_Req_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br><br>" +
                                        "<b>Offer ID(s):</b> " + "<br>" + tb_Req_OfferIDs.Text + "<br><br>" +
                                        "<b>Priority:</b> " + dropList_Prov.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_Prov_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_Req_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("RequestKeyedOffers", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Offer IDs"; skp.value = tb_Req_OfferIDs.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_Prov_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_Req_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("RequestKeyedOffers", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_Req_Error))
                        wf_problem = true;
                }
                #endregion

                #region Expire Offers Worfklow
                if (cbExpireOffer.Checked)
                {
                    string optionTitle = this.cbExpireOffer.Text;// "Expire Offer(s)";
                    string type = "Prop Content";

                    string envName = rList_EO.SelectedValue;
                    string titleID = "0x" + tb_EO_TitleID.Text;

                    string certStage = dropList_EO_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Expire Offer(s) for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Offer ID(s):" + Environment.NewLine + tb_EO_OfferIDs.Text + Environment.NewLine + Environment.NewLine +
                                           "Resolve To: " + tb_EO_Resolve.Text;
                    int psPriority = dropList_EO.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_EO_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_EO_DateTime.Text;

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_EO_CCList, ref lb_EO_AliasList);
                    string emailCCList = tb_EO_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br><br>" +
                                        "<b>Offer ID(s):</b> " + "<br>" + tb_EO_OfferIDs.Text + "<br><br>" +
                                        "<b>Priority:</b> " + dropList_EO.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_EO_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_EO_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("ExpireOffers", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Offer IDs"; skp.value = tb_EO_OfferIDs.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_EO_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_EO_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("ExpireOffers", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_EO_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop Real Content and GonD Workflow
                if ((cbPropUnKO.Checked) || (cbPropGonD.Checked))
                {
                    string optionTitle = "Prop Real Content";
                    string type = "Prop Content";

                    if (this.cbPropGonD.Checked)
                    {
                        optionTitle = "Prop Games on Demand";
                        type = "Prop GonD"; 
                    }

                    fileList = FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "offer");

                    StreamReader sr = null;
                    string upContent = "";
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                    }
                    catch (Exception ex)
                    {
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop Keyed Offers'. " + ex.Message);
                    }
                    sr.Close();

                    int idx = upContent.LastIndexOf("primaryTitleID>0x");
                    string titleID = "0x" + upContent.Substring(idx + 17, 8);

                    string offerIDs = "";
                    MatchCollection matches = Regex.Matches(upContent, @"\<[^\:<>]*\:?offerID\>([^<>]*)\<\/[^\:]*\:?offerID\>", RegexOptions.IgnoreCase);
                    foreach (Match match in matches)
                    {
                        string actualMatch = match.Value;
                        actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);
                        offerIDs += actualMatch + ",";
                    }

                    string envName = rList_PropUnKO.SelectedValue;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_PropUnKO_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = optionTitle + " for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Offer ID(s):" + Environment.NewLine + offerIDs.Replace(",", Environment.NewLine) + Environment.NewLine +
                                           "Resolve To: " + tb_PropUnKO_Resolve.Text;

                    //To get the type of environment
                    EnvInfo envinfo=GetEnvInfo(rList_PropUnKO.SelectedValue);
                                     
                    if (g_PropUnKO_ProdDefault && (envinfo.EnvType.ToUpper().Equals("PROD"))) psDescription += Environment.NewLine + Environment.NewLine + "Note: Transferred files were pulled from the linked bug.";
                    if (tb_PropUnKO_TitleBugID.Text != "") psDescription += Environment.NewLine + Environment.NewLine + "This title is not propped yet. Propping information is tied to Bug ID: " + tb_PropUnKO_TitleBugID.Text;

                    int psPriority = dropList_PropUnKO.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropUnKO_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropUnKO_DateTime.Text;

                    string requestGUID = l_PropUnKO_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_PropUnKO_CCList, ref lb_PropUnKO_AliasList);
                    string emailCCList = tb_PropUnKO_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br><br>" +
                                       "<b>Offer ID(s):</b><br>" + offerIDs.Replace(",", "<br>") + "<br>" +
                                       "<b>Priority:</b> " + dropList_PropUnKO.SelectedValue + "<br>" +
                                       "<b>Certification Stage:</b> " + dropList_PropUnKO_Certificate.SelectedValue + "<br>" +
                                       "<b>Resolve To:</b> " + tb_PropUnKO_Resolve.Text + "<br>" +
                                       "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string certBug = "";
                   
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_PropUnKO_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "offer");
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "png"));

                    if (this.cbPropGonD.Checked)
                    {
                        fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, ".xpkg"));
                    }
                    else
                    {
                        fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropUnKO_Guid.Text, "cab"));
                    }

                    // only transfer required png files
                    ArrayList removeList = new ArrayList();
                    foreach (string fileStr in fileGroup)
                    {
                        if (Path.GetExtension(fileStr).ToLower() == ".png" && !upContent.ToLower().Contains(Path.GetFileName(fileStr).ToLower()))
                            removeList.Add(fileStr);
                    }
                    foreach (string fileStr in removeList)
                        fileGroup.Remove(fileStr);

                    bool attachFiles = false;
                    if ((envinfo.EnvType.ToUpper().Equals("PROD") && !g_PropUnKO_ProdDefault) ||(!(envinfo.EnvType.ToUpper().Equals("PROD"))))
                         attachFiles = true;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Certification Stage"; skp.value = dropList_PropUnKO_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Offer IDs"; skp.value = offerIDs;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_PropUnKO_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropUnkeyedOffers", envName));
                    
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                   psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, attachFiles, psSetAutoPropState,
                                   emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropUnkeyedOffers", envName);

                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropUnKO_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop LIVE Offer Workflow
                if (cbPropKO.Checked)
                {
                    string optionTitle = "Prop LIVE Offer";
                    string type = "Prop Content";

                    fileList = FindFiles(g_sharedFolder + l_PropKO_Guid.Text, "offer");

                    StreamReader sr = null;
                    string upContent = "";
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                    }
                    catch (Exception ex)
                    {
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop Keyed Offers'. " + ex.Message);
                    }
                    sr.Close();

                    int idx = upContent.LastIndexOf("primaryTitleID>0x");
                    string titleID = "0x" + upContent.Substring(idx + 17, 8);

                    string offerIDs = "";
                    MatchCollection matches = Regex.Matches(upContent, @"<offerID>([^<>]+)</offerID>", RegexOptions.IgnoreCase);
                    foreach (Match match in matches)
                    {
                        string actualMatch = match.Value;
                        actualMatch = actualMatch.Substring(actualMatch.IndexOf('>') + 1, actualMatch.LastIndexOf('<') - actualMatch.IndexOf('>') - 1);
                        offerIDs += actualMatch + ",";
                    }

                    string envName = rList_PropKO.SelectedValue;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_PropKO_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = optionTitle + " for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Offer ID(s):" + Environment.NewLine + offerIDs.Replace(",", Environment.NewLine) + Environment.NewLine +
                                           "Resolve To: " + tb_PropKO_Resolve.Text;

                    EnvInfo envinfo = GetEnvInfo(rList_PropKO.SelectedValue);
                    ConfigInfo configinfo=GetPreReqBugInfo(rList_PropKO.SelectedValue,optionTitle);

                    if (g_PropKO_ProdDefault && envinfo.EnvType.ToUpper().Equals("PROD")) psDescription += Environment.NewLine + Environment.NewLine + "Note: Transferred files were pulled from the linked "+configinfo.PreReqBug.EnvLabel+" bug.";

                    int psPriority = dropList_PropKO.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropKO_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropKO_DateTime.Text;

                    string requestGUID = l_PropKO_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_PropKO_CCList, ref lb_PropKO_AliasList);
                    string emailCCList = tb_PropKO_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br><br>" +
                                       "<b>Offer ID(s):</b><br>" + offerIDs.Replace(",", "<br>") + "<br>" +
                                       "<b>Priority:</b> " + dropList_PropKO.SelectedValue + "<br>" +
                                       "<b>Certification Stage:</b> " + dropList_PropKO_Certificate.SelectedValue + "<br>" +
                                       "<b>Resolve To:</b> " + tb_PropKO_Resolve.Text + "<br>" +
                                       "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string certBug = "";

                    
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_PropKO_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_PropKO_Guid.Text, "offer");
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropKO_Guid.Text, "png"));

                    bool attachFiles = false;
                    if ((envinfo.EnvType.ToUpper().Equals("PROD") && !g_PropKO_ProdDefault) || (!(envinfo.EnvType.ToUpper().Equals("PROD"))))
                        attachFiles = true;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Certification Stage"; skp.value = dropList_PropKO_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Offer IDs"; skp.value = offerIDs;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_PropKO_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropKeyedOffer", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, attachFiles, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropKeyedOffer", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropKO_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop XLAST Workflow
                if (cbPropXLAST.Checked)
                {
                    string optionTitle = this.cbPropXLAST.Text;// "Prop XLAST";
                    string type = "Prop XLAST";

                    string envName = rList_PropXLAST.SelectedValue;

                    // pull the Title ID and Title Name out of the .xlast file
                    fileList = FindFiles(g_sharedFolder + l_XLAST_Guid.Text, "xlast");

                    StreamReader sr = null;
                    string upContent = "";
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                    }
                    catch (Exception ex)
                    {
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop XLAST'. " + ex.Message);
                    }
                    sr.Close();

                    string titleID = "";
                    int idx = upContent.LastIndexOf("titleId=");
                    string tempStr = upContent.Substring(idx + 8, 12);
                    string[] strAry = tempStr.Split('"');
                    foreach (string str in strAry)
                    {
                        if (str.Contains("0x"))
                        {
                            titleID = str;
                            break;
                        }
                    }

                    string titleName = "";
                    Match titleMatch = Regex.Match(upContent, "titleName=\"[^\"]+\"", RegexOptions.IgnoreCase);
                    titleName = titleMatch.Value;
                    titleName = titleName.Substring(titleName.IndexOf('\"') + 1, titleName.LastIndexOf('\"') - titleName.IndexOf('\"') - 1);

                    string certStage = dropList_PropXLAST_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Prop XLAST for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = "";
                    if (titleName.Contains("OXM Disc") || titleName.Contains("OXM360"))
                    {
                        psDescription += "***IMPORTANT***" + Environment.NewLine + Environment.NewLine +
                                         "This is an OXM prop, which requires the LTC <MaxGamerPictures> bit be increased to 5 before running LiveTitle /deploy." +
                                         "There is outstanding WAR approval to increase all OXM Titles with 5 Gamer Pictures. Please see lead for any questions." + Environment.NewLine + Environment.NewLine;
                    }
                    psDescription += optionTitle + Environment.NewLine + Environment.NewLine +
                                     "Title ID: " + titleID + Environment.NewLine +
                                     "XeMID/XMID: " + tb_PropXLAST_XemID.Text + Environment.NewLine + Environment.NewLine +
                                     "Base Version(s):" + Environment.NewLine;

                    string versionList = "";
                    string rVersionList = "";
                    foreach (ListItem li in lb_PropXLAST_VersionAdds.Items)
                    {
                        string[] tempAry = li.Text.Split('|');
                        string baseVer = tempAry[0];
                        string verType = tempAry[1];

                        psDescription += baseVer.Trim() + " | " + verType.Trim() + Environment.NewLine;
                        versionList += baseVer.Trim() + " | " + verType.Trim() + "<br>";
                        rVersionList += baseVer.Trim() + " | " + verType.Trim() + ",";
                    }
                    psDescription += Environment.NewLine + "Resolve To: " + tb_PropXLAST_Resolve.Text;
                    EnvInfo envinfo = GetEnvInfo(rList_PropXLAST.SelectedValue);
                    ConfigInfo configinfo = GetPreReqBugInfo(rList_PropXLAST.SelectedValue, optionTitle);
                    

                    if (g_PropXLAST_ProdDefault && envinfo.EnvType.ToUpper().Equals("PROD")) psDescription += Environment.NewLine + Environment.NewLine + "Note: transferred files were pulled from the linked "+configinfo.PreReqBug.EnvLabel+" bug.";

                    int psPriority = dropList_PropXLAST.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropXLAST_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropXLAST_DateTime.Text;

                    string requestGUID = l_XLAST_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") - in " + envName + " - XeMID: " + tb_PropXLAST_XemID.Text;
                    AppendCCList(ref tb_PropXLAST_CCList, ref lb_PropXLAST_AliasList);
                    string emailCCList = tb_PropXLAST_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>XeMID/XMID:</b> " + tb_PropXLAST_XemID.Text + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br><br>" +
                                        "<b>Base Version(s):</b> <br>" + versionList + "<br>" +
                                        "<b>Priority:</b> " + dropList_PropXLAST.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_PropXLAST_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_PropXLAST_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time: </b>" + requestDateTime;

                    string certBug = "";
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_PropXLAST_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_XLAST_Guid.Text, "xlast");
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_XLAST_Guid.Text, "png"));

                    // only transfer required png files
                    ArrayList removeList = new ArrayList();
                    foreach (string fileStr in fileGroup)
                    {
                        if (Path.GetExtension(fileStr).ToLower() == ".png" && !upContent.ToLower().Contains(Path.GetFileName(fileStr).ToLower()))
                            removeList.Add(fileStr);
                    }
                    foreach (string fileStr in removeList)
                    {
                        fileGroup.Remove(fileStr);
                    }

                    bool attachFiles = false;
                    if ((envinfo.EnvType.ToUpper().Equals("PROD") && !g_PropXLAST_ProdDefault) ||(!(envinfo.EnvType.ToUpper().Equals("PROD"))))
                         attachFiles = true;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Xemid"; skp.value = tb_PropXLAST_XemID.Text;
                    requestData.Add(skp);
                    skp.key = "Base Versions"; skp.value = rVersionList;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_PropXLAST_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_PropXLAST_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropXLAST", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, attachFiles, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropXLAST", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropXLAST_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop Marketplace Workflow
                if (cbPropMarket.Checked)
                {
                    string optionTitle = this.cbPropMarket.Text;// "Prop Marketplace";
                    string type = "Prop TitleID";

                    string envName = rList_PropMarket.SelectedValue;

                    // pull the Title ID and Title Name out of the .marketplace file
                    fileList = FindFiles(g_sharedFolder + l_Market_Guid.Text, "marketplace");

                    StreamReader sr = null;
                    string upContent = "";
                    try
                    {
                        sr = new StreamReader(fileList[0].ToString());
                        upContent = sr.ReadToEnd();
                    }
                    catch (Exception ex)
                    {
                        LogMessage("Error accessing file '" + fileList[0].ToString() + "' in Option 'Prop Marketplace'. " + ex.Message);
                    }
                    sr.Close();

                    string titleID = "";
                    int idx = upContent.LastIndexOf("titleId=");
                    string tempStr = upContent.Substring(idx + 8, 12);
                    string[] strAry = tempStr.Split('"');
                    foreach (string str in strAry)
                    {
                        if (str.Contains("0x"))
                        {
                            titleID = str;
                            break;
                        }
                    }

                    string titleName = "";
                    Match titleMatch = Regex.Match(upContent, "titleName=\"[^\"]+\"", RegexOptions.IgnoreCase);
                    titleName = titleMatch.Value;
                    titleName = titleName.Substring(titleName.IndexOf('\"') + 1, titleName.LastIndexOf('\"') - titleName.IndexOf('\"') - 1);

                    string certStage = dropList_PropMarket_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Prop Marketplace for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Resolve To: " + tb_PropMarket_Resolve.Text;

                    EnvInfo envinfo = GetEnvInfo(rList_PropMarket.SelectedValue);
                    ConfigInfo configinfo = GetPreReqBugInfo(rList_PropMarket.SelectedValue, optionTitle);

                    if (g_PropMarket_ProdDefault && envinfo.EnvType.ToUpper().Equals("PROD")) psDescription += Environment.NewLine + Environment.NewLine + "Note: transferred files were pulled from the linked "+configinfo.PreReqBug.EnvLabel+" bug.";

                    int psPriority = dropList_PropMarket.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropMarket_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropMarket_DateTime.Text;

                    string requestGUID = l_Market_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_PropMarket_CCList, ref lb_PropMarket_AliasList);
                    string emailCCList = tb_PropMarket_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br>" +
                                        "<b>Priority:</b> " + dropList_PropMarket.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_PropMarket_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_PropMarket_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string certBug = "";
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_PropMarket_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_Market_Guid.Text, "marketplace");
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_Market_Guid.Text, "png"));

                    // only transfer required png files
                    ArrayList removeList = new ArrayList();
                    foreach (string fileStr in fileGroup)
                    {
                        if (Path.GetExtension(fileStr).ToLower() == ".png" && !upContent.ToLower().Contains(Path.GetFileName(fileStr).ToLower()))
                            removeList.Add(fileStr);
                    }
                    foreach (string fileStr in removeList)
                    {
                        fileGroup.Remove(fileStr);
                    }

                    bool attachFiles = false;
                    if ((envinfo.EnvType.ToUpper().Equals("PROD") && !g_PropMarket_ProdDefault) || (!(envinfo.EnvType.ToUpper().Equals("PROD"))))                        
                        attachFiles = true;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Certification Stage"; skp.value = dropList_PropMarket_Certificate.SelectedValue;
                    requestData.Add(skp);

                    skp.key = "Resolve To"; skp.value = tb_PropMarket_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropMarket", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, attachFiles, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropMarket", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropMarket_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop Auto-update Workflow
                if (cbPropAU.Checked)
                {
                    string optionTitle = this.cbPropAU.Text;// "Prop Auto-update as Selective";
                    string type = "Prop Autoupdate";

                    string envName = rList_PropAU.SelectedValue;
                    string titleID = "0x" + tb_PropAU_TitleID.Text;

                    string certStage = dropList_PropAU_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string consoleIDs = tb_PropAU_Console.Text;
                    consoleIDs = consoleIDs.Replace("0xFB00", "PC.");   // convert any pc puids from 0xFB00XXXXXXXXXXXX to PC.XXXXXXXXXXXX
                    if (consoleIDs == "")
                        consoleIDs = "None" + Environment.NewLine;

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Prop SELECTIVE Autoupdate for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine +
                                           "XeMID/XMID: " + tb_PropAU_XemID.Text + Environment.NewLine;
                    if (tb_PropAU_SubID != null && tb_PropAU_SubID.Text != "") psDescription += "Sub ID: " + "0x" + tb_PropAU_SubID.Text + Environment.NewLine;
                    psDescription += "Base Version: " + "0x" + tb_PropAU_Base.Text + Environment.NewLine +
                                     "Version Type: " + rList_PropAU_VerType.SelectedValue + Environment.NewLine +
                                     "Update Version: " + "0x" + tb_PropAU_Update.Text + Environment.NewLine + Environment.NewLine +
                                     "Console ID(s) to be Flagged: " + Environment.NewLine + consoleIDs + Environment.NewLine +
                                     "Resolve To: " + tb_PropAU_Resolve.Text;

                    EnvInfo envinfo = GetEnvInfo(rList_PropAU.SelectedValue);
                    ConfigInfo configinfo = GetPreReqBugInfo(rList_PropAU.SelectedValue, optionTitle);
                    if (g_PropAU_ProdDefault && envinfo.EnvType.ToUpper().Equals("PROD")) psDescription += Environment.NewLine + Environment.NewLine + "Note: transferred files were pulled from the linked "+configinfo.PreReqBug.EnvLabel+" bug.";

                    int psPriority = dropList_PropAU.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropAU_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropAU_DateTime.Text;

                    string requestGUID = l_PropAU_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_PropAU_CCList, ref lb_PropAU_AliasList);
                    string emailCCList = tb_PropAU_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + rList_PropAU.SelectedValue + "<br>" +
                                        "<b>XeMID/XMID:</b> " + tb_PropAU_XemID.Text + "<br>";

                    if (tb_PropAU_SubID != null && tb_PropAU_SubID.Text != "") emailBody += "<b>Sub ID:</b> " + "0x" + tb_PropAU_SubID.Text + "<br>";

                    emailBody += "<b>Base Version:</b> " + "0x" + tb_PropAU_Base.Text + "<br>" +
                                   "<b>Version Type:</b> " + rList_PropAU_VerType.SelectedValue + "<br>" +
                                   "<b>Update Version:</b> " + "0x" + tb_PropAU_Update.Text + "<br><br>" +
                                   "<b>Console ID(s):</b> " + "<br>" + consoleIDs + "<br><br>" +
                                   "<b>Priority:</b> " + dropList_PropAU.SelectedValue + "<br>" +
                                   "<b>Certification Stage:</b> " + dropList_PropAU_Certificate.SelectedValue + "<br>" +
                                   "<b>Resolve To:</b> " + tb_PropAU_Resolve.Text + "<br>" +
                                   "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    // dump Console IDs to a text file and cram it into the user file drop point for this request
                    if (consoleIDs != "")
                    {
                        StreamWriter sw = null;
                        try
                        {
                            sw = new StreamWriter(g_sharedFolder + "\\" + l_PropAU_Guid.Text + "\\ConsoleIDs.txt");
                            sw.Write(consoleIDs);
                        }
                        catch (Exception)
                        {
                            LogMessage("Failed to dump Console IDs to the 'ConsoleIDs.txt' file.");
                        }
                        sw.Close();
                    }
                    else
                        consoleIDs = "None";

                    string certBug = "";
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_PropAU_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_PropAU_Guid.Text, "cab");
                    if (consoleIDs != "None") fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropAU_Guid.Text, "txt"));

                    bool attachFiles = false;
                    if ((envinfo.EnvType.ToUpper().Equals("PROD") && !g_PropAU_ProdDefault) || (!(envinfo.EnvType.ToUpper().Equals("PROD"))))
                         attachFiles = true;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Xemid"; skp.value = tb_PropAU_XemID.Text;
                    requestData.Add(skp);

                    string subID = "";
                    if (tb_PropAU_SubID != null)
                        subID = tb_PropAU_SubID.Text;
                    skp.key = "SubID"; skp.value = subID;
                    requestData.Add(skp);

                    skp.key = "Base Version"; skp.value = tb_PropAU_Base.Text;
                    requestData.Add(skp);
                    skp.key = "Base Version Type"; skp.value = rList_PropAU_VerType.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Update Version"; skp.value = tb_PropAU_Update.Text;
                    requestData.Add(skp);
                    skp.key = "Console IDs"; skp.value = tb_PropAU_Console.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_PropAU_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_PropAU_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropAutoUpdate", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, attachFiles, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropAutoUpdate", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropAU_Error))
                        wf_problem = true;
                }
                #endregion

                #region Prop Sample Content Workflow
                if (cbPropSample.Checked)
                {
                    string optionTitle = this.cbPropSample.Text;// "Prop Sample Content";
                    string type = "Prop Content";

                    string envName = rList_PropSample.SelectedValue;
                    string titleID = "0x" + tb_PropSample_TitleID.Text;

                    string certStage = dropList_PropSample_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Prop Sample Content for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine +
                                           "Resolve To: " + tb_PropSample_Resolve.Text;

                    int psPriority = dropList_PropSample.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_PropSample_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_PropSample_DateTime.Text;

                    string requestGUID = l_PropSample_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_PropSample_CCList, ref lb_PropSample_AliasList);
                    string emailCCList = tb_PropSample_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br><br>" +
                                        "<b>Priority:</b> " + dropList_PropSample.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_PropSample_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_PropSample_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    if (requestDateTime == "N/A") requestDateTime = "";

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "cab");
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "offer"));
                    fileGroup.AddRange(FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "png"));

                    // grabs data from every including OFFER for easy checking on unneeded png files
                    string bigContent = "";
                    StreamReader sr = null;
                    fileList = FindFiles(g_sharedFolder + l_PropSample_Guid.Text, "offer");
                    foreach (string offerFile in fileList)
                    {
                        try
                        {
                            sr = new StreamReader(offerFile);
                            bigContent += sr.ReadToEnd();
                        }
                        catch (Exception ex)
                        {
                            LogMessage("Error accessing file '" + offerFile + "' in Option 'Prop Sample Content'. " + ex.Message);
                        }
                        sr.Close();
                    }

                    // only transfer required png files
                    ArrayList removeList = new ArrayList();
                    foreach (string fileStr in fileGroup)
                    {
                        if (Path.GetExtension(fileStr).ToLower() == ".png" && !bigContent.ToLower().Contains(Path.GetFileName(fileStr).ToLower()))
                            removeList.Add(fileStr);
                    }
                    foreach (string fileStr in removeList)
                    {
                        fileGroup.Remove(fileStr);
                    }

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Certification Stage"; skp.value = dropList_PropSample_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_PropSample_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("PropSample", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", "", -1, true, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("PropSample", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_PropSample_Error))
                        wf_problem = true;
                }
                #endregion

                #region Switch to Global Workflow
                if (cbSwitchToGlobal.Checked)
                {
                    string optionTitle = this.cbSwitchToGlobal.Text;// "Switch Selective Auto-update to Global";
                    string type = "Prop Autoupdate";

                    string envName = rList_SwitchToGlobal.SelectedValue;
                    string titleID = "0x" + tb_SwitchToGlobal_TitleID.Text;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_SwitchToGlobal_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string dateTimeMsg = "";

                    EnvInfo envinfo = GetEnvInfo(rList_SwitchToGlobal.SelectedValue);

                    if (tb_SwitchToGlobal_DateTime != null && tb_SwitchToGlobal_DateTime.Text != "")
                    {
                        if (envinfo.EnvType.ToUpper().Equals("PROD"))
                            dateTimeMsg = "Publisher's approval has been received to release the Title Update GLOBALLY on " + tb_SwitchToGlobal_DateTime.Text + Environment.NewLine + Environment.NewLine;
                        else if (tb_SwitchToGlobal_DateTime.Text != "")
                            dateTimeMsg = "Requested Prop Date/Time: " + tb_SwitchToGlobal_DateTime.Text + Environment.NewLine + Environment.NewLine;
                    }

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Prop GLOBAL Autoupdate for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine;
                    psDescription += dateTimeMsg + "Title ID: " + titleID + Environment.NewLine + "XeMID/XMID: " + tb_SwitchToGlobal_XemID.Text + Environment.NewLine;
                    if (tb_SwitchToGlobal_SubID != null && tb_SwitchToGlobal_SubID.Text != "") psDescription += "Sub ID: " + "0x" + tb_SwitchToGlobal_SubID.Text + Environment.NewLine;
                    psDescription += "Base Version: " + "0x" + tb_SwitchToGlobal_Base.Text + " | " + rList_SwitchToGlobal_VerType.SelectedValue + Environment.NewLine +
                                     "Update Version: " + "0x" + tb_SwitchToGlobal_Update.Text + Environment.NewLine + Environment.NewLine +
                                     "Resolve To: " + tb_SwitchToGlobal_Resolve.Text;

                    int psPriority = dropList_SwitchToGlobal.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_SwitchToGlobal_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_SwitchToGlobal_DateTime.Text;

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_SwitchToGlobal_CCList, ref lb_SwitchToGlobal_AliasList);
                    string emailCCList = tb_SwitchToGlobal_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br>" +
                                       "<b>XeMID/XMID:</b> " + tb_SwitchToGlobal_XemID.Text + "<br>";
                    if (tb_SwitchToGlobal_SubID != null && tb_SwitchToGlobal_SubID.Text != "") emailBody += "<b>Sub ID:</b> " + "0x" + tb_SwitchToGlobal_SubID.Text + "<br>";
                    emailBody += "<b>Base Version:</b> " + "0x" + tb_SwitchToGlobal_Base.Text + "<br>" +
                                 "<b>Version Type:</b> " + rList_SwitchToGlobal_VerType.SelectedValue + "<br>" +
                                 "<b>Update Version:</b> " + "0x" + tb_SwitchToGlobal_Update.Text + "<br>" +
                                 "<b>Priority:</b> " + dropList_SwitchToGlobal.SelectedValue + "<br>" +
                                 "<b>Certification Stage:</b> " + dropList_SwitchToGlobal_Certificate.SelectedValue + "<br>" +
                                 "<b>Resolve To:</b> " + tb_SwitchToGlobal_Resolve.Text + "<br><br>" +
                                 "<b>Prop Date/Time:</b> " + requestDateTime;

                    string certBug = "";
                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_SwitchToGlobal_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("SwitchSelective", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Xemid"; skp.value = tb_SwitchToGlobal_XemID.Text;
                    requestData.Add(skp);

                    string subID = "";
                    if (tb_SwitchToGlobal_SubID != null)
                        subID = tb_SwitchToGlobal_SubID.Text;
                    skp.key = "SubID"; skp.value = subID;
                    requestData.Add(skp);

                    skp.key = "Base Version"; skp.value = tb_SwitchToGlobal_Base.Text;
                    requestData.Add(skp);
                    skp.key = "Base Version Type"; skp.value = rList_SwitchToGlobal_VerType.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Update Version"; skp.value = tb_SwitchToGlobal_Update.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_SwitchToGlobal_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_SwitchToGlobal_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("SwitchSelective", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_SwitchToGlobal_Error))
                        wf_problem = true;
                }
                #endregion

                #region Add Base Versions Workflow
                if (cbAddBaseVer.Checked)
                {
                    string optionTitle = "Add Base Version(s)";
                    string type = "Change Request";

                    string envName = rList_AddBaseVer.SelectedValue;
                    string titleID = "0x" + tb_AddBaseVer_TitleID.Text;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_AddBaseVer_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Add Base Version(s) for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine;
                    if (!VerifyEnvironment(g_environments[rList_AddBaseVer.SelectedValue].ToString(), tb_AddBaseVer_TitleID.Text, ref l_AddBaseVer_Error))
                    {
                        psDescription += Environment.NewLine + "Note: this title hasn't been propped yet in this environment. The bug id for the prop is: " + tb_AddBaseVer_TitleProp.Text + Environment.NewLine + Environment.NewLine;
                        l_AddBaseVer_Error.Text = "";
                    }
                    psDescription += "XeMID/XMID: " + tb_AddBaseVer_XemID.Text + Environment.NewLine + Environment.NewLine +
                                     "Base Version(s):" + Environment.NewLine;
                    string versionList = "";
                    string rVersionList = "";
                    foreach (ListItem li in lb_AddBaseVer_VersionAdds.Items)
                    {
                        string[] tempAry = li.Text.Split('|');
                        string baseVer = tempAry[0];
                        string verType = tempAry[1];

                        psDescription += baseVer.Trim() + " | " + verType.Trim() + Environment.NewLine;
                        versionList += baseVer.Trim() + " | " + verType.Trim() + "<br>";
                        rVersionList += baseVer.Trim() + " | " + verType.Trim() + ",";
                    }
                    psDescription += Environment.NewLine;
                    if (tb_AddBaseVer_SubID != null && tb_AddBaseVer_SubID.Text != "") psDescription += "Sub ID: " + "0x" + tb_AddBaseVer_SubID.Text + Environment.NewLine;
                    psDescription += "Resolve To: " + tb_AddBaseVer_Resolve.Text;

                    int psPriority = dropList_AddBaseVer.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_AddBaseVer_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_AddBaseVer_DateTime.Text;

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_AddBaseVer_CCList, ref lb_AddBaseVer_AliasList);
                    string emailCCList = tb_AddBaseVer_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br>" +
                                       "<b>XeMID/XMID:</b> " + tb_AddBaseVer_XemID.Text + "<br>";
                    if ((tb_AddBaseVer_SubID != null && tb_AddBaseVer_SubID.Text != "")) emailBody += "<b>Sub ID:</b> " + "0x" + tb_AddBaseVer_SubID.Text + "<br>";
                    emailBody += "<br><b>Base Version(s):</b> <br>" + versionList + "<br>" +
                                 "<b>Priority:</b> " + dropList_AddBaseVer.SelectedValue + "<br>" +
                                 "<b>Certification Stage:</b> " + dropList_AddBaseVer_Certificate.SelectedValue + "<br>" +
                                 "<b>Resolve To:</b> " + tb_AddBaseVer_Resolve.Text + "<br>" +
                                 "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string certBug = "";

                    EnvInfo envinfo = GetEnvInfo(rList_AddBaseVer.SelectedValue);

                    if (envinfo.EnvType.ToUpper().Equals("PROD"))
                        certBug = tb_AddBaseVer_BugID.Text;

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("AddBaseVersion", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Xemid"; skp.value = tb_AddBaseVer_XemID.Text;
                    requestData.Add(skp);

                    string subID = "";
                    if (tb_AddBaseVer_SubID != null)
                        subID = tb_AddBaseVer_SubID.Text;
                    skp.key = "SubID"; skp.value = subID;
                    requestData.Add(skp);

                    skp.key = "Base Versions"; skp.value = rVersionList;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_AddBaseVer_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_AddBaseVer_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", certBug, 0, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("AddBaseVersion", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_AddBaseVer_Error))
                        wf_problem = true;
                }
                #endregion

                #region Upload TMS Workflow
                if (cbUploadTMS.Checked)
                {
                    string optionTitle = this.cbUploadTMS.Text;// "Upload TMS File(s)";
                    string type = "Prop Content";

                    string envName = rList_UploadTMS.SelectedValue;
                    string titleID = "0x" + tb_UploadTMS_TitleID.Text;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_UploadTMS_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Title Managed Storage (TMS) for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Resolve To: " + tb_UploadTMS_Resolve.Text;

                    int psPriority = dropList_UploadTMS.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_UploadTMS_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_UploadTMS_DateTime.Text;

                    string requestGUID = l_UploadTMS_Guid.Text;

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_UploadTMS_CCList, ref lb_UploadTMS_AliasList);
                    string emailCCList = tb_UploadTMS_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                        "<b>Environment:</b> " + envName + "<br>" +
                                        "<b>Priority:</b> " + dropList_UploadTMS.SelectedValue + "<br>" +
                                        "<b>Certification Stage:</b> " + dropList_UploadTMS_Certificate.SelectedValue + "<br>" +
                                        "<b>Resolve To:</b> " + tb_UploadTMS_Resolve.Text + "<br>" +
                                        "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string globalBug = "";
                    if (tb_UploadTMS_DepBugID.Text != "") globalBug = tb_UploadTMS_DepBugID.Text;

                    ArrayList fileGroup = FindFiles(g_sharedFolder + l_UploadTMS_Guid.Text, "!");

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("UploadTMS", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Certification Stage"; skp.value = dropList_UploadTMS_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_UploadTMS_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", globalBug, 1, true, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, fileGroup);

                    string workflowName = GetWorkflowName("UploadTMS", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_UploadTMS_Error))
                        wf_problem = true;
                }
                #endregion

                #region Delete TMS Workflow
                if (cbDeleteTMS.Checked)
                {
                    string optionTitle = this.cbDeleteTMS.Text;// "Delete TMS File(s)";
                    string type = "Prop Content";

                    string envName = rList_DeleteTMS.SelectedValue;
                    string titleID = "0x" + tb_DeleteTMS_TitleID.Text;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_DeleteTMS_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Delete Title Managed Storage (TMS) for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Files: " + Environment.NewLine + tb_DeleteTMS.Text + Environment.NewLine + Environment.NewLine +
                                           "Resolve To: " + tb_DeleteTMS_Resolve.Text;

                    int psPriority = dropList_DeleteTMS.SelectedIndex;

                    string requestDateTime = "";
                    if (tb_DeleteTMS_DateTime == null) requestDateTime = "N/A";
                    else requestDateTime = tb_DeleteTMS_DateTime.Text;

                    string emailTitle = " to Delete TMS File(s) for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_DeleteTMS_CCList, ref lb_DeleteTMS_AliasList);
                    string emailCCList = tb_DeleteTMS_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br><br>" +
                                       "<b>Name of TMS File(s):</b> " + "<br>" + tb_DeleteTMS.Text + "<br><br>" +
                                       "<b>Priority:</b> " + dropList_DeleteTMS.SelectedValue + "<br>" +
                                       "<b>Certification Stage:</b> " + dropList_DeleteTMS_Certificate.SelectedValue + "<br>" +
                                       "<b>Resolve To:</b> " + tb_DeleteTMS_Resolve.Text + "<br>" +
                                       "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    string requestGUID = Guid.NewGuid().ToString();

                    if (requestDateTime == "N/A") requestDateTime = "";
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("DeleteTMS", envName));

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "TMS Files"; skp.value = tb_DeleteTMS.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_DeleteTMS_Certificate.SelectedValue;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_DeleteTMS_Resolve.Text;
                    requestData.Add(skp);

                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, requestDateTime, psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("DeleteTMS", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_DeleteTMS_Error))
                        wf_problem = true;
                }
                #endregion

                #region Configure XLSP Workflow
                if (cbConfigXLSP.Checked)
                {
                    string optionTitle = this.cbConfigXLSP.Text;// "Configure XLSP";
                    string type = "LSP";

                    string envName = rList_ConfigXLSP_Environment.SelectedValue;
                    EnvInfo envinfo = GetEnvInfo(envName);
                    ArrayList requestData = new ArrayList();

                    string psTitle = "";
                    string psDescription = "";

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();

                    if (dList_ConfigXLSP_Certificate.SelectedIndex == 1)   // NEW
                    {
                        #region New XLSP

                        string titleName = GetTitleName("0x" + tb_ConfigXLSP_New_TitleID.Text, g_environments[envName].ToString());
                        if (titleName == "-1") titleName = "";
                        psTitle = "Create New LSP for " + titleName + " (0x" + tb_ConfigXLSP_New_TitleID.Text + ") on " + envName;

                        psDescription += "Partner Name: " + tb_ConfigXLSP_New_PartnerName.Text + Environment.NewLine + Environment.NewLine;

                        if (tb_ConfigXLSP_New_CertNameSugg.Text != "")
                        {
                            psDescription += "Preferred Certificate Name: " + Environment.NewLine+Environment.NewLine+ tb_ConfigXLSP_New_CertNameSugg.Text + Environment.NewLine + Environment.NewLine;
                        }
                        if (cbConfigXLSPNewMassive.Checked)
                            {
                                psDescription += "Massive Certificate Name: " +Environment.NewLine+Environment.NewLine+ envinfo.MassiveCertificate + Environment.NewLine + Environment.NewLine;
                            }
                        psDescription += "Title ID: 0x" + tb_ConfigXLSP_New_TitleID.Text + Environment.NewLine + Environment.NewLine +
                                         "Internet Routable IP Addresses:" + Environment.NewLine + tb_ConfigXLSP_IPs.Text + Environment.NewLine +
                                         "--Service ID/Site ID Pairs--" + Environment.NewLine;

                        string rServiceSitePairs = "";
                        //string CertificateName = tb_ConfigXLSP_New_CertNameSugg.Text; 
                        if (rList_ConfigXLSP_New_ServiceID.SelectedIndex > 0)
                        {
                            psDescription += "Service ID: 0x" + tb_ConfigXLSP_New_ServID1.Text + " -> Site ID: 0x" + tb_ConfigXLSP_New_SiteID1.Text;
                            rServiceSitePairs += "0x" + tb_ConfigXLSP_New_ServID1.Text + " -> 0x" + tb_ConfigXLSP_New_SiteID1.Text + ",";
                        }
                        if (rList_ConfigXLSP_New_ServiceID.SelectedIndex > 1)
                        {
                            psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_New_ServID2.Text + " -> Site ID: 0x" + tb_ConfigXLSP_New_SiteID2.Text;
                            rServiceSitePairs += "0x" + tb_ConfigXLSP_New_ServID2.Text + " -> 0x" + tb_ConfigXLSP_New_SiteID2.Text + ",";
                        }
                        if (rList_ConfigXLSP_New_ServiceID.SelectedIndex > 2)
                        {
                            psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_New_ServID3.Text + " -> Site ID: 0x" + tb_ConfigXLSP_New_SiteID3.Text;
                            rServiceSitePairs += "0x" + tb_ConfigXLSP_New_ServID3.Text + " -> 0x" + tb_ConfigXLSP_New_SiteID3.Text + ",";
                        }
                        if (rList_ConfigXLSP_New_ServiceID.SelectedIndex > 3)
                        {
                            psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_New_ServID4.Text + " -> Site ID: 0x" + tb_ConfigXLSP_New_SiteID4.Text;
                            rServiceSitePairs += "0x" + tb_ConfigXLSP_New_ServID4.Text + " -> 0x" + tb_ConfigXLSP_New_SiteID4.Text + ",";
                        }

                        if (cbConfigXLSPNewMassive.Checked)
                        {
                            psDescription += Environment.NewLine + "Service ID: "+envinfo.MassiveServiceId+" -> Site ID: "+envinfo.MassiveSiteId;
                            rServiceSitePairs += envinfo.MassiveServiceId + " -> " + envinfo.MassiveSiteId;
                            skp.key = "Massive Certificate Name"; skp.value = envinfo.MassiveCertificate;
                            requestData.Add(skp);
                            
                        }

                        psDescription += Environment.NewLine + Environment.NewLine + "XLSP SG Version: " + rList_ConfigXLSP_New_SGVer.SelectedValue;

                        skp.key = "Partner Name"; skp.value = tb_ConfigXLSP_New_PartnerName.Text;
                        requestData.Add(skp);
                        skp.key = "Certificate Name"; skp.value = tb_ConfigXLSP_New_CertNameSugg.Text;                        
                        requestData.Add(skp);
                        skp.key = "IP Addresses"; skp.value = tb_ConfigXLSP_IPs.Text;
                        requestData.Add(skp);
                        skp.key = "Service/Site ID Pairs"; skp.value = rServiceSitePairs;
                        requestData.Add(skp);
                        skp.key = "XLSP SG Version"; skp.value = rList_ConfigXLSP_New_SGVer.SelectedValue;
                        requestData.Add(skp);

                        #endregion
                    }
                    else if (dList_ConfigXLSP_Certificate.SelectedIndex == 2) // MODIFY
                    {
                        #region Modify XLSP

                        string titleID = "";
                        string titleName = "";
                        string CertificateName = dList_ConfigXLSP_Modify_CertNames.SelectedItem.Text;
                        if (cbConfigXLSPAddServiceIDs.Checked || cbConfigXLSPRemSvcids.Checked || cbConfigXLSPAddTitle.Checked)
                        {
                            titleName = GetTitleName("0x" + tb_ConfigXLSP_Modify_TitleID.Text,g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString());
                            if (titleName == "-1") titleName = "";
                            titleID = " (0x" + tb_ConfigXLSP_Modify_TitleID.Text + ")";
                        }
                        else
                            titleName = dList_ConfigXLSP_Modify_CertNames.SelectedItem.Text;

                        psTitle = "Configure XLSP for " + titleName + titleID + " on " + rList_ConfigXLSP_Environment.SelectedValue;

                        if (cbConfigXLSPModifyMassive.Checked)
                        {
                            psDescription += "Certificate(s) to Modify: " + Environment.NewLine + Environment.NewLine + dList_ConfigXLSP_Modify_CertNames.SelectedItem.Text + Environment.NewLine + envinfo.MassiveCertificate + Environment.NewLine;
                        }
                        else
                        {
                            psDescription += "Certificate(s) to Modify: " + Environment.NewLine + Environment.NewLine + dList_ConfigXLSP_Modify_CertNames.SelectedItem.Text + Environment.NewLine;
                        }

                        if (tb_ConfigXLSP_Modify_TitleID.Text != "")
                        {
                            skp.key = "Title ID"; skp.value = "0x" + tb_ConfigXLSP_Modify_TitleID.Text;
                            requestData.Add(skp);
                        }

                        if (cbConfigXLSPAddTitle.Checked)
                        {
                            psDescription += Environment.NewLine + "--ADD TITLE--" + Environment.NewLine + Environment.NewLine +
                                            "Add Title ID: 0x" + tb_ConfigXLSP_Modify_TitleID.Text + Environment.NewLine;
                        }
                        if (cbConfigXLSPAddServiceIDs.Checked)
                        {
                            psDescription += Environment.NewLine + "--ADD SERVICE ID(s)--" + Environment.NewLine + Environment.NewLine +
                                             "Title ID: 0x" + tb_ConfigXLSP_Modify_TitleID.Text + Environment.NewLine;

                            string rServiceSitePairs = "";
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex > 0)
                            {
                                psDescription += "Service ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_ServID1.Text + " -> Site ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID1.Text;
                                rServiceSitePairs += "0x" + tb_ConfigXLSP_Modify_AddTitle_ServID1.Text + " -> 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID1.Text + ",";
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex > 1)
                            {
                                psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_ServID2.Text + " -> Site ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID2.Text;
                                rServiceSitePairs += "0x" + tb_ConfigXLSP_Modify_AddTitle_ServID2.Text + " -> 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID2.Text + ",";
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex > 2)
                            {
                                psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_ServID3.Text + " -> Site ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID3.Text;
                                rServiceSitePairs += "0x" + tb_ConfigXLSP_Modify_AddTitle_ServID3.Text + " -> 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID3.Text + ",";
                            }
                            if (rList_ConfigXLSP_Modify_ServiceID.SelectedIndex > 3)
                            {
                                psDescription += Environment.NewLine + "Service ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_ServID4.Text + " -> Site ID: 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID4.Text;
                                rServiceSitePairs += "0x" + tb_ConfigXLSP_Modify_AddTitle_ServID4.Text + " -> 0x" + tb_ConfigXLSP_Modify_AddTitle_SiteID4.Text + ",";
                            }
                            if (cbConfigXLSPModifyMassive.Checked)
                            {
                                psDescription += Environment.NewLine + "Service ID: " + envinfo.MassiveServiceId + " -> Site ID: " + envinfo.MassiveSiteId;
                                rServiceSitePairs += envinfo.MassiveServiceId+" -> "+envinfo.MassiveSiteId;
                                CertificateName += "," + envinfo.MassiveCertificate;
                            }

                            skp.key = "Add Service/Site ID Pairs"; skp.value = rServiceSitePairs;
                            requestData.Add(skp);
                        }
                        skp.key = "Certificate"; skp.value = CertificateName;
                        requestData.Add(skp);
                        if (cbConfigXLSPRemSvcids.Checked)
                        {
                            psDescription += Environment.NewLine + "--REMOVE SERVICE ID(s)--" + Environment.NewLine + Environment.NewLine +
                                             "Title ID: 0x" + tb_ConfigXLSP_Modify_TitleID.Text + Environment.NewLine + Environment.NewLine +
                                             "Service ID -> Site ID Pair(s) to Remove:" + Environment.NewLine;

                            string sList = "";
                            foreach (ListItem li in lb_ConfigXLSP_Modify_RemSvcids.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                sList += li.Text + ",";
                            }

                            skp.key = "Remove Service/Site ID Pairs"; skp.value = sList;
                            requestData.Add(skp);
                        }
                        if (cbConfigXLSPAddIPs.Checked)
                        {
                            psDescription += Environment.NewLine + "--ADD IP(s)--" + Environment.NewLine + Environment.NewLine +
                                             "Internet Routable IP Addresses to Add:" + Environment.NewLine + tb_ConfigXLSP_Modify_AddIPs.Text;

                            skp.key = "Remove Service/Site ID Pairs"; skp.value = tb_ConfigXLSP_Modify_AddIPs.Text;
                            requestData.Add(skp);
                        }
                        if (cbConfigXLSPRemIPs.Checked)
                        {
                            string strIPs = "";
                            psDescription += Environment.NewLine + "-- REMOVE IP ADDRESS(ES) --" + Environment.NewLine + Environment.NewLine;
                            foreach (ListItem li in lb_ConfigXLSP_Modify_RemIPs_IPs.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                strIPs += li.Text + ",";
                            }

                            skp.key = "Remove IPs"; skp.value = strIPs;
                            requestData.Add(skp);
                        }

                        #endregion
                    }
                    else if (dList_ConfigXLSP_Certificate.SelectedIndex == 3)   // RENEW CERTIFICATE
                    {
                        #region Renew XLSP

                        psTitle = "Renew Certificate for " + dList_ConfigXLSP_Renew_CertNames.SelectedItem.Text + " on " + rList_ConfigXLSP_Environment.SelectedValue;
                        psDescription += "Certificate to Renew: " + dList_ConfigXLSP_Renew_CertNames.SelectedItem.Text;

                        skp.key = "Certificate"; skp.value = dList_ConfigXLSP_Renew_CertNames.SelectedItem.Text;
                        requestData.Add(skp);

                        #endregion
                    }

                    string emailTitle = " to " + psTitle;
                    AppendCCList(ref tb_ConfigXLSP_CCList, ref lb_ConfigXLSP_AliasList);
                    string emailCCList = tb_ConfigXLSP_CCList.Text;
                    string emailBody = psDescription.Replace(Environment.NewLine, "<br>");

                    string requestGUID = Guid.NewGuid().ToString();
                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("ConfigXLSP", envName));

                    string psLinkedBug = "";
                    int psLinkedType = -1;
                    if (g_ConfigXLSP_New_TitlePropRequired)
                    {
                        psLinkedBug = tb_ConfigXLSP_New_TitleProp.Text;
                        psLinkedType = 1;
                    }
                    if (g_ConfigXLSP_Modify_TitlePropRequired)
                    {
                        psLinkedBug = tb_ConfigXLSP_Modify_TitleProp.Text;
                        psLinkedType = 1;
                    }

                    string initData = SerializeRequest(requestGUID, optionTitle, "", envName, User.Identity.Name, requestData,
                                                       psTitle, 3, type, "", psDescription, "", psLinkedBug, psLinkedType, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("ConfigXLSP", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_ConfigXLSP_Error))
                        wf_problem = true;
                }
                #endregion

                #region Configure EA LSP Workflow
                if (cbConfigEALSP.Checked)
                {
                    string optionTitle = this.cbConfigEALSP.Text;// "Configure New EA LSP";
                    string type = "LSP";

                    string envName = rList_ConfigEALSP.SelectedValue;
                    EnvInfo envinfo = GetEnvInfo(envName);
                    string titleID = "0x" + tb_ConfigEALSP_TitleID.Text;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";
                                        
                    ArrayList requestData = new ArrayList();

                    string psTitle = "EA LSP for " + titleName + " - " + titleID + " - in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine;
                    if (cbConfigEALSPMassive.Checked)
                    {
                        psDescription += "Certificate: " + Environment.NewLine+envinfo.Certificate + Environment.NewLine + envinfo.MassiveCertificate + Environment.NewLine + Environment.NewLine +
                                              "--Service ID -> Site ID Pair(s)--";
                    }
                    else
                    {
                        psDescription += "Certificate: " + Environment.NewLine+envinfo.Certificate + Environment.NewLine + Environment.NewLine +
                                                 "--Service ID -> Site ID Pair(s)--";
 
                    }

                    string rServiceSitePairs = "";
                    //if (rList_ConfigEALSP_ServiceID.SelectedIndex >= 0 && dList_ConfigEALSP_SvcID1.SelectedIndex != 0)
                    //{
                    //    psDescription += Environment.NewLine + dList_ConfigEALSP_SvcID1.SelectedItem.Text;
                    //    rServiceSitePairs += dList_ConfigEALSP_SvcID1.SelectedItem.Text + ",";
                    //}
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 0)
                    {
                        psDescription += Environment.NewLine + dList_ConfigEALSP_SvcID1.SelectedItem.Text;
                        rServiceSitePairs += dList_ConfigEALSP_SvcID1.SelectedItem.Text + ",";
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 1)
                    {
                        psDescription += Environment.NewLine + dList_ConfigEALSP_SvcID2.SelectedItem.Text;
                        rServiceSitePairs += dList_ConfigEALSP_SvcID2.SelectedItem.Text + ",";
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 2)
                    {
                        psDescription += Environment.NewLine + dList_ConfigEALSP_SvcID3.SelectedItem.Text;
                        rServiceSitePairs += dList_ConfigEALSP_SvcID3.SelectedItem.Text + ",";
                    }
                    if (rList_ConfigEALSP_ServiceID.SelectedIndex > 3)
                    {
                        psDescription += Environment.NewLine + dList_ConfigEALSP_SvcID4.SelectedItem.Text;
                        rServiceSitePairs += dList_ConfigEALSP_SvcID4.SelectedItem.Text + ",";
                    }

                    if (cbConfigEALSPMassive.Checked)
                    {
                        psDescription += Environment.NewLine + envinfo.MassiveServiceId + " -> " + envinfo.MassiveSiteId;
                        rServiceSitePairs += envinfo.MassiveServiceId + " -> " + envinfo.MassiveSiteId;
                    }

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_ConfigEALSP_CCList, ref lb_ConfigEALSP_AliasList);
                    string emailCCList = tb_ConfigEALSP_CCList.Text;

                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + envName + "<br>" +
                                       "<b>Certificate:</b> " + envinfo.Certificate + "<br><br>" +
                                       psDescription.Replace(Environment.NewLine, "<br>");

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    if (cbConfigEALSPMassive.Checked)
                    {
                        skp.key = "Certificate"; skp.value = envinfo.Certificate+","+envinfo.MassiveCertificate;
                    }
                    else
                    {
                        skp.key = "Certificate"; skp.value = envinfo.Certificate;
                    }
                    requestData.Add(skp);
                    skp.key = "Service/Site ID Pairs"; skp.value = rServiceSitePairs;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("ConfigEALSP", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, 3, type, "", psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("ConfigEALSP", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_ConfigEALSP_Error))
                        wf_problem = true;
                }
                #endregion

                #region Configure Web Services Workflow
                if (cbConfigWebSvc.Checked)
                {
                    string optionTitle = this.cbConfigWebSvc.Text;// "Configure Web Services";
                    string type = "Web Services";

                    ArrayList requestData = new ArrayList();

                    string envName = rList_WebSvc_Environment.SelectedValue;
                    string psTitle = "";
                    string psDescription = "";
                    string psRepro = "";

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();

                    if (dList_WebSvc_Option.SelectedIndex == 1)   // NEW
                    {
                        #region New Web Service

                        psTitle = "Create New Web Services Configuration for " + tb_WebSvc_New_PartnerName.Text + " on " + envName;

                        psDescription += "Partner Name: " + tb_WebSvc_New_PartnerName.Text + Environment.NewLine + Environment.NewLine;
                        if (tb_WebSvc_New_CertSugg.Text != "")
                            psDescription += "Preferred Certificate Name: " + tb_WebSvc_New_CertSugg.Text + Environment.NewLine + Environment.NewLine;

                        string strTitleIDs = "";
                        psDescription += "Title ID(s):" + Environment.NewLine;
                        foreach (ListItem li in lb_WebSvc_New_TitleIDs.Items)
                        {
                            psDescription += li.Text + Environment.NewLine;
                            strTitleIDs += li.Text + ",";
                        }

                        psDescription += Environment.NewLine + "Internet Routable IP Addresses:" + Environment.NewLine + tb_WebSvc_New_IPList.Text + Environment.NewLine +
                                         "API Package: " + rList_WebSvc_New_APIs.SelectedItem.Text + " (associated APIs are located in the Repro Steps)";

                        string apiList = "";
                        SqlCommand myCommand = null;
                        SqlDataReader dr = null;
                        try
                        {
                            // pull all apis based on an environment
                            if (g_myConnection.State != ConnectionState.Open)
                                g_myConnection.Open();

                            myCommand = new SqlCommand("EXEC p_get_env_package_apis " + g_environments[envName].ToString() + "," + rList_WebSvc_New_APIs.SelectedValue, g_myConnection);
                            dr = myCommand.ExecuteReader();

                            while (dr.Read())
                            {
                                apiList += dr["vc_api_name"].ToString() + Environment.NewLine;
                            }
                            dr.Close();
                            g_myConnection.Close();
                        }
                        catch (Exception ex)
                        {
                            LogMessage("Error loading all APIs based on a given environment. " + ex.Message);
                        }
                        finally
                        {
                            if (dr != null && !dr.IsClosed)
                                dr.Close();
                            if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                                g_myConnection.Close();
                        }

                        psRepro = rList_WebSvc_New_APIs.SelectedItem.Text + " Package APIs:" + Environment.NewLine + Environment.NewLine + apiList;

                        skp.key = "Partner Name"; skp.value = tb_WebSvc_New_PartnerName.Text;
                        requestData.Add(skp);
                        skp.key = "Certificate Name"; skp.value = tb_WebSvc_New_CertSugg.Text;
                        requestData.Add(skp);
                        skp.key = "IP Addresses"; skp.value = tb_WebSvc_New_IPList.Text;
                        requestData.Add(skp);
                        skp.key = "Title IDs"; skp.value = strTitleIDs;
                        requestData.Add(skp);
                        skp.key = "API Package"; skp.value = rList_WebSvc_New_APIs.SelectedValue;
                        requestData.Add(skp);

                        #endregion
                    }
                    else if (dList_WebSvc_Option.SelectedIndex == 2)   // MODIFY
                    {
                        #region Modify Web Service

                        psTitle = "Modify Web Services Configuration for " + dList_WebSvc_Modify_CertNames.SelectedItem.Text + " on " + envName;

                        skp.key = "Certificate"; skp.value = dList_WebSvc_Modify_CertNames.SelectedItem.Text;
                        requestData.Add(skp);

                        psDescription += "Certificate Name: " + dList_WebSvc_Modify_CertNames.SelectedItem.Text + Environment.NewLine;
                        if (cb_WebSvc_Modify_AddTitles.Checked)
                        {
                            string strTitleIDs = "";
                            psDescription += Environment.NewLine + "-- ADD TITLE ID(S) --" + Environment.NewLine + Environment.NewLine;
                            foreach (ListItem li in lb_WebSvc_Modify_AddTitles_TitleIDs.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                strTitleIDs += li.Text + ",";
                            }

                            skp.key = "Add Title IDs"; skp.value = strTitleIDs;
                            requestData.Add(skp);
                        }
                        if (cb_WebSvc_Modify_RemTitles.Checked)
                        {
                            string strTitleIDs = "";
                            psDescription += Environment.NewLine + "-- REMOVE TITLE ID(S) --" + Environment.NewLine + Environment.NewLine;
                            foreach (ListItem li in lb_WebSvc_Modify_RemTitles_TitleIDs.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                strTitleIDs += li.Text + ",";
                            }

                            skp.key = "Remove Title IDs"; skp.value = strTitleIDs;
                            requestData.Add(skp);
                        }
                        if (cb_WebSvc_Modify_AddIPs.Checked)
                        {
                            string strIPs = "";
                            psDescription += Environment.NewLine + "-- ADD IP ADDRESS(ES) --" + Environment.NewLine + Environment.NewLine;
                            foreach (ListItem li in lb_WebSvc_Modify_AddIPs_IPs.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                strIPs += li.Text + ",";
                            }

                            skp.key = "Add IPs"; skp.value = strIPs;
                            requestData.Add(skp);
                        }
                        if (cb_WebSvc_Modify_RemIPs.Checked)
                        {
                            string strIPs = "";
                            psDescription += Environment.NewLine + "-- REMOVE IP ADDRESS(ES) --" + Environment.NewLine + Environment.NewLine;
                            foreach (ListItem li in lb_WebSvc_Modify_RemIPs_IPs.Items)
                            {
                                psDescription += li.Text + Environment.NewLine;
                                strIPs += li.Text + ",";
                            }

                            skp.key = "Remove IPs"; skp.value = strIPs;
                            requestData.Add(skp);
                        }
                        if (cb_WebSvc_Modify_AddAPIs.Checked)
                        {
                            psDescription += Environment.NewLine + "-- ADD API(S) --" + Environment.NewLine + Environment.NewLine;

                            string strPackages = "";
                            string strAPIs = "";
                            string apiList = "";
                            string packageList = "";
                            foreach (ListItem li in lb_WebSvc_Modify_AddAPIs_APIs.Items)
                            {
                                if (li.Text.Contains("(Package)"))
                                {
                                    string[] aryStr = li.Text.Split('(');
                                    packageList += aryStr[0].Trim() + Environment.NewLine;
                                    strPackages += aryStr[0].Trim() + ",";

                                    SqlCommand myCommand = null;
                                    SqlDataReader dr = null;

                                    try
                                    {
                                        //pull all apis based on an package and environment
                                        if (g_myConnection.State != ConnectionState.Open)
                                            g_myConnection.Open();

                                        myCommand = new SqlCommand("EXEC p_get_env_package_apis " + g_environments[envName].ToString() + "," + li.Value, g_myConnection);
                                        dr = myCommand.ExecuteReader();

                                        while (dr.Read())
                                        {
                                            if (!apiList.Contains(dr["vc_api_name"].ToString()))
                                            {
                                                apiList += dr["vc_api_name"].ToString() + Environment.NewLine;
                                                strAPIs += dr["vc_api_name"].ToString() + ",";
                                            }
                                        }
                                        dr.Close();
                                        g_myConnection.Close();
                                    }
                                    catch (Exception ex)
                                    {
                                        LogMessage("Error loading API package options for a modifying existing Web Services to add APIs. Exception: " + ex.Message);
                                    }
                                    finally
                                    {
                                        if (dr != null && !dr.IsClosed)
                                            dr.Close();
                                        if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                                            g_myConnection.Close();
                                    }
                                }
                                else
                                {
                                    string[] aryStr = li.Text.Split('(');

                                    if (!apiList.Contains(aryStr[0].Trim()))
                                    {
                                        apiList += aryStr[0].Trim() + Environment.NewLine;
                                        strAPIs += aryStr[0].Trim() + ",";
                                    }
                                }
                            }

                            if (packageList == "")
                                packageList = "None" + Environment.NewLine;

                            psDescription += "Package(s) to Add:" + Environment.NewLine + packageList;
                            psDescription += Environment.NewLine + "API(s) to Add (Includes Package APIs):" + Environment.NewLine + apiList;

                            skp.key = "Add Packages"; skp.value = strPackages;
                            requestData.Add(skp);
                            skp.key = "Add APIs"; skp.value = strAPIs;
                            requestData.Add(skp);
                        }
                        if (cb_WebSvc_Modify_RemAPIs.Checked)
                        {
                            psDescription += Environment.NewLine + "-- REMOVE API(S) --" + Environment.NewLine + Environment.NewLine;

                            string strPackages = "";
                            string strAPIs = "";
                            string apiList = "";
                            string packageList = "";
                            foreach (ListItem li in lb_WebSvc_Modify_RemAPIs_APIs.Items)
                            {
                                if (li.Text.Contains("(Package)"))
                                {
                                    string[] aryStr = li.Text.Split('(');
                                    packageList += aryStr[0].Trim() + Environment.NewLine;
                                    strPackages += aryStr[0].Trim() + ",";

                                    SqlCommand myCommand = null;
                                    SqlDataReader dr = null;

                                    try
                                    {
                                        //pull all apis based on an package and environment
                                        if (g_myConnection.State != ConnectionState.Open)
                                            g_myConnection.Open();

                                        myCommand = new SqlCommand("EXEC p_get_env_package_apis " + g_environments[envName].ToString() + "," + li.Value, g_myConnection);
                                        dr = myCommand.ExecuteReader();

                                        while (dr.Read())
                                        {
                                            if (!apiList.Contains(dr["vc_api_name"].ToString()))
                                            {
                                                apiList += dr["vc_api_name"].ToString() + Environment.NewLine;
                                                strAPIs += dr["vc_api_name"].ToString() + ",";
                                            }
                                        }
                                        dr.Close();
                                        g_myConnection.Close();
                                    }
                                    catch (Exception ex)
                                    {
                                        LogMessage("Error loading API package options for modifying Web Services by removing APIs. " + ex.Message);
                                    }
                                    finally
                                    {
                                        if (dr != null && !dr.IsClosed)
                                            dr.Close();
                                        if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                                            g_myConnection.Close();
                                    }
                                }
                                else
                                {
                                    string[] aryStr = li.Text.Split('(');
                                    apiList += aryStr[0].Trim() + Environment.NewLine;
                                    strAPIs += aryStr[0].Trim() + ",";
                                }
                            }

                            if (packageList == "")
                                packageList = "None" + Environment.NewLine;

                            psDescription += "Package(s) to Remove:" + Environment.NewLine + packageList;
                            psDescription += Environment.NewLine + "API(s) to Remove (Includes Package APIs):" + Environment.NewLine + apiList;

                            skp.key = "Remove Packages"; skp.value = strPackages;
                            requestData.Add(skp);
                            skp.key = "Remove APIs"; skp.value = strAPIs;
                            requestData.Add(skp);
                        }

                        #endregion
                    }
                    else if (dList_WebSvc_Option.SelectedIndex == 3)   // RENEW
                    {
                        #region Renew Web Service

                        psTitle = "Renew Certificate for " + dList_WebSvc_Renew_CertNames.SelectedItem.Text + " on " + rList_WebSvc_Environment.SelectedValue;
                        psDescription += "Certificate to Renew: " + dList_WebSvc_Renew_CertNames.SelectedItem.Text;

                        skp.key = "Certificate"; skp.value = dList_WebSvc_Renew_CertNames.SelectedItem.Text;
                        requestData.Add(skp);

                        #endregion
                    }

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to " + psTitle;
                    AppendCCList(ref tb_WebSvc_CCList, ref lb_WebSvc_AliasList);
                    string emailCCList = tb_WebSvc_CCList.Text;
                    string emailBody = psDescription.Replace(Environment.NewLine, "<br>");

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("WebSvc", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, "", envName, User.Identity.Name, requestData,
                                                       psTitle, 3, type, "", psDescription, psRepro, "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("WebSvc", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_WebSvc_Error))
                        wf_problem = true;
                }
                #endregion

                #region Reset Leaderboards Workflow
                if (cbLBReset.Checked)
                {
                    string optionTitle = this.cbLBReset.Text;// "Reset Leaderboard(s)";
                    string type = "";
                    if (g_TEST) type = "Prop Content";
                    else type = "Leaderboards";

                    string titleID = "0x" + tb_LBReset_TitleID.Text;
                    string envName = rList_LBReset.SelectedValue;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    string certStage = dropList_LBReset_Certificate.SelectedValue;
                    if (certStage == "N/A") certStage = " ";
                    else certStage = " (" + certStage + ") ";

                    string requestDateTime = tb_LBReset_DateTime.Text;

                    if (cb_LBReset_All.Checked)
                        tb_LBReset_LBIDs.Text = "All";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Leaderboard Reset for " + titleName + " - " + titleID + " -" + certStage + "in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine + Environment.NewLine +
                                           "Leaderboard ID(s) to Reset: " + Environment.NewLine + tb_LBReset_LBIDs.Text + Environment.NewLine + Environment.NewLine +
                                           "Requested Prop Date/Time: " + requestDateTime + Environment.NewLine +
                                           "Resolve To: xladmins";

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_LBReset_CCList, ref lb_LBReset_AliasList);
                    string emailCCList = tb_LBReset_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + rList_LBReset.SelectedValue + "<br><br>" +
                                       "<b>Leaderboard ID(s) to Reset:</b> " + "<br>" + tb_LBReset_LBIDs.Text + "<br><br>" +
                                       "<b>Priority:</b> High<br>" +
                                       "<b>Certification Stage:</b> " + dropList_LBReset_Certificate.SelectedValue + "<br>" +
                                       "<b>Resolve To:</b> xladmins<br>" +
                                       "<b>Requested Prop Date/Time:</b> " + requestDateTime;

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Leaderboard IDs"; skp.value = tb_LBReset_LBIDs.Text;
                    requestData.Add(skp);
                    skp.key = "Certification Stage"; skp.value = dropList_LBReset_Certificate.SelectedValue;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("LeaderboardReset", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, 1, type, requestDateTime, psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("LeaderboardReset", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_LBReset_Error))
                        wf_problem = true;
                }
                #endregion

                #region Xbox.com Achievement Blacklisting Workflow
                if (cbTitleFencing.Checked)
                {
                    string optionTitle = this.cbTitleFencing.Text;// "Xbox.com Achievement Blacklisting";
                    string type = "Other";

                    string titleID = "0x" + tb_TitleFencing_TitleID.Text;
                    string envName = rList_TitleFencing.SelectedValue;

                    string titleName = GetTitleName(titleID, g_environments[envName].ToString());
                    if (titleName == "-1") titleName = "";

                    ArrayList requestData = new ArrayList();

                    string psTitle = "Xbox.com Achievement Blacklisting for " + titleName + " - " + titleID + " - in " + envName;
                    string psDescription = optionTitle + Environment.NewLine + Environment.NewLine +
                                           "Title ID: " + titleID + Environment.NewLine +
                                           "Fencing Date: " + tb_TitleFencing_Date.Text + Environment.NewLine +
                                           "Resolve To: " + tb_TitleFencing_Resolve.Text;

                    int psPriority = dropList_TitleFencing_Priority.SelectedIndex;

                    string requestGUID = Guid.NewGuid().ToString();

                    string emailTitle = " to add " + optionTitle + " for " + titleName + " (" + titleID + ") in " + envName;
                    AppendCCList(ref tb_TitleFencing_CCList, ref lb_TitleFencing_AliasList);
                    string emailCCList = tb_TitleFencing_CCList.Text;
                    string emailBody = "<b>Title ID:</b> " + titleID + "<br>" +
                                       "<b>Environment:</b> " + rList_TitleFencing.SelectedValue + "<br><br>" +
                                       "<b>Fencing Date: </b>" + tb_TitleFencing_Date.Text + "<br>" +
                                       "<b>Priority:</b> " + dropList_TitleFencing_Priority.SelectedValue + "<br>" +
                                       "<b>Resolve To:</b> " + tb_TitleFencing_Resolve.Text + "<br>";

                    // gather request data
                    SerializableKeyValuePair skp = new SerializableKeyValuePair();
                    skp.key = "Fencing Date"; skp.value = tb_TitleFencing_Date.Text;
                    requestData.Add(skp);
                    skp.key = "Resolve To"; skp.value = tb_DeleteTMS_Resolve.Text;
                    requestData.Add(skp);

                    bool psSetAutoPropState = Convert.ToBoolean(GetAutoPropState("TitleFencing", envName));
                    string initData = SerializeRequest(requestGUID, optionTitle, titleID, envName, User.Identity.Name, requestData,
                                                       psTitle, psPriority, type, "", psDescription, "", "", -1, false, psSetAutoPropState,
                                                       emailTitle, emailBody, emailCCList, new ArrayList());

                    string workflowName = GetWorkflowName("TitleFencing", envName);
                    if (!InitWorkflow(workflowName, psTitle, requestGUID, initData, ref l_TitleFencing_Error))
                        wf_problem = true;
                }
                #endregion

                if (!wf_problem)
                {
                    #region Success!
                    LogMessage("All requests have been submitted.");
                    lFooter.Text = "<br /><font color='green' size='3'><b>Your requests have been successfully submitted!</b></font><br />" + lFooter.Text + "<br /><br />";

                    // reset controls
                    foreach (Control ctrl in controls)
                    {
                        if (ctrl is CheckBox)
                        {
                            CheckBox cbTemp = (CheckBox)ctrl;
                            cbTemp.Checked = false;
                        }
                        else if (ctrl is RadioButton)
                        {
                            RadioButton rBtnTemp = (RadioButton)ctrl;
                            rBtnTemp.Checked = false;
                        }
                        else if (ctrl is RadioButtonList)
                        {
                            RadioButtonList rListTemp = (RadioButtonList)ctrl;
                            rListTemp.SelectedIndex = -1;
                        }
                        else if (ctrl is ListBox)
                        {
                            if (!ctrl.ID.Contains("AliasList"))
                            {
                                ListBox lbTemp = (ListBox)ctrl;
                                lbTemp.Items.Clear();
                                lbTemp.Enabled = true;
                            }
                        }
                        else if (ctrl is TextBox)
                        {
                            TextBox tbTemp = (TextBox)ctrl;
                            if (tbTemp.Text != "0x")
                            {
                                tbTemp.Text = "";
                                tbTemp.Enabled = true;
                            }
                        }
                        else if (ctrl is Button)
                        {
                            Button btnTemp = (Button)ctrl;
                            if (btnTemp.ID != "BtnSubmit")
                                btnTemp.Enabled = true;
                        }
                        else if (ctrl is Label)
                        {
                            if (ctrl.ID != "lFooter" && ctrl.ID != "lSpecial")
                            {
                                Label lTemp = (Label)ctrl;
                                lTemp.Text = "";
                            }
                        }
                        else if (ctrl is DropDownList)
                        {
                            DropDownList dListTemp = (DropDownList)ctrl;
                            dListTemp.Enabled = true;
                        }
                    }

                    l_PropUnKO_Guid.Text = Guid.NewGuid().ToString();
                    l_PropKO_Guid.Text = Guid.NewGuid().ToString();
                    l_XLAST_Guid.Text = Guid.NewGuid().ToString();
                    l_Market_Guid.Text = Guid.NewGuid().ToString();
                    l_PropSample_Guid.Text = Guid.NewGuid().ToString();
                    l_PropAU_Guid.Text = Guid.NewGuid().ToString();
                    l_UploadTMS_Guid.Text = Guid.NewGuid().ToString();
                    #endregion
                }
                else
                    lFooter.Text = g_footerErrText;
            }
            else
                lFooter.Text = g_footerErrText;

            this.BtnSubmit.Enabled = true;
        }


        public string SerializeRequest(string requestGUID, string requestName, string requestTitleID, string requestEnvironmentName, string requestSubmitter, ArrayList requestData,
                                       string psTitle, int psPriority, string psIssueType, string psPropDateTime, string psDescription, string psReproSteps, string psLinkedBug, int psLinkedBugType, bool psAttachFiles, bool psSetAutoPropState,
                                       string emailTitle, string emailHTMLBody, string emailCCList, ArrayList filePaths)
        {
            // pack the request info into a request object
            PropManagerRequest.RequestInfo requestObj = new PropManagerRequest.RequestInfo();

            requestObj.requestVersion = ConfigurationSettings.AppSettings["version"].ToString();
            requestObj.testState = g_TEST;

            requestObj.requestGUID = requestGUID;
            requestObj.requestName = requestName;
            requestObj.requestTitleID = requestTitleID;
            requestObj.requestEnvironmentName = requestEnvironmentName;
            requestObj.requestSubmitter = requestSubmitter;
            requestObj.requestData = requestData;

            requestObj.psTitle = psTitle;
            requestObj.psPriority = psPriority;
            requestObj.psIssueType = psIssueType;
            requestObj.psPropDateTime = psPropDateTime;
            requestObj.psDescription = psDescription;
            requestObj.psReproSteps = psReproSteps;
            requestObj.psLinkedBug = psLinkedBug;
            requestObj.psLinkedBugType = psLinkedBugType;
            requestObj.psAttachFiles = psAttachFiles;
            requestObj.psSetAutoPropState = psSetAutoPropState;

            requestObj.emailTitle = emailTitle;
            requestObj.emailHTMLBody = emailHTMLBody;
            requestObj.emailCCList = emailCCList;

            requestObj.fileDropPointPath = g_sharedFolder;
            requestObj.serializedTempPath = g_serializedTempPath;
            requestObj.filePaths = filePaths;

            // get the request object serialized into xml and then converted to a string
            MemoryStream stream = new MemoryStream();
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
            serializer.Serialize(stream, requestObj);
            stream.Position = 0;
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            string xmlStr = Encoding.UTF8.GetString(bytes);

            if (!System.IO.Directory.Exists(g_serializedTempPath))
                System.IO.Directory.CreateDirectory(g_serializedTempPath);

            // write to file for later attachment to the workflow
            g_requestXMLFileName = DateTime.Now.ToString("yyyy-MM-dd-Hmmss") + "_" + requestGUID + ".xml";
            StreamWriter sw = new StreamWriter(g_serializedTempPath + g_requestXMLFileName);
            sw.Write(xmlStr);
            sw.Close();

            return xmlStr;
        }

        public bool InitWorkflow(string workflowName, string workflowTitle, string requestGUID, string initData, ref Label errLabel)
        {
            string workflowFolder = "";
          
            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(initData));
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo));
            PropManagerRequest.RequestInfo requestObj = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

            try
            {
                string workflowPath = ConfigurationSettings.AppSettings["workflowPath"].ToString();
                string workflowListName = ConfigurationSettings.AppSettings["workflowListName"].ToString();
                string workflowHistoryName = ConfigurationSettings.AppSettings["workflowHistoryName"].ToString();

                SPSite site = new SPSite(g_servername);
                SPWeb web = site.OpenWeb();
                SPList list = web.Lists[workflowListName];
                SPList historyList = web.Lists[workflowHistoryName];

                workflowFolder = site.Url + workflowPath;
                SPFolder f = web.GetFolder(workflowFolder);
                if (f.Exists)
                {
                    SPListItemCollection itemColl = list.Items;
                    SPListItem item = itemColl.Add(f.ServerRelativeUrl, SPFileSystemObjectType.File, null);

                    string priority = "";
                    if (requestObj.psPriority == 1)
                        priority = "High";
                    else if (requestObj.psPriority == 2)
                        priority = "Medium";
                    else if (requestObj.psPriority == 3)
                        priority = "Low";

                    ArrayList files = requestObj.filePaths;
                    string fileSize = "";
                    if (files.Count > 0)
                    {
                        long transferSizeBytes = 0;
                        FileInfo fInfo;
                        for (int i = 0; i < files.Count; i++)
                        {
                            fInfo = new FileInfo(files[i].ToString());
                            transferSizeBytes += fInfo.Length;
                        }
                        fileSize = GetSensibleByteSize(transferSizeBytes);
                    }
                    else
                        fileSize = "N/A";

                    string spColumnRequest = ConfigurationSettings.AppSettings["spColumnRequest"].ToString();
                    string spColumnEnvironment = ConfigurationSettings.AppSettings["spColumnEnvironment"].ToString();
                    string spColumnPriority = ConfigurationSettings.AppSettings["spColumnPriority"].ToString();
                    string spColumnSize = ConfigurationSettings.AppSettings["spColumnSize"].ToString();

                    item["Title"] = workflowTitle;
                    item[spColumnRequest] = requestObj.requestName;
                    item[spColumnEnvironment] = requestObj.requestEnvironmentName;
                    item[spColumnPriority] = priority;
                    item[spColumnSize] = fileSize;

                    StreamReader sr = new StreamReader(g_serializedTempPath + g_requestXMLFileName);
                    string xmlStr = sr.ReadToEnd();
                    sr.Close();

                    byte[] bytes = new byte[xmlStr.Length];
                    bytes = Encoding.UTF8.GetBytes(xmlStr);

                    item.Attachments.Add(g_requestXMLFileName, bytes);
                    item.Update();

                    SPWorkflowAssociation wfAssociation = list.WorkflowAssociations.GetAssociationByName(workflowName, System.Globalization.CultureInfo.CurrentCulture);
                    SPWorkflow wfInstance = site.WorkflowManager.StartWorkflow(item, wfAssociation, initData);

                    string psBugMsg = "<font color='green'>";
                    if (list.Items.GetItemById(wfInstance.ItemId)["PS Bug"] == null || list.Items.GetItemById(wfInstance.ItemId)["PS Bug"].ToString() == "N/A")
                        psBugMsg += "[" + requestObj.requestName + "] The bug is taking longer than normal to create and cannot be displayed at this time. You will receive the bug number by email shortly.";
                    else
                        psBugMsg += "[" + requestObj.requestName + "] Product Studio Bug #" + list.Items.GetItemById(wfInstance.ItemId)["PS Bug"].ToString() + " has been successfully created.";
                    lFooter.Text += "<br />" + psBugMsg + "</font>";

                    LogMessage(psBugMsg);
                }
            }
            catch (Exception ex)
            {
                if (workflowName == "")
                    workflowName = "<b>null</b>";

                errLabel.Text += "<li>Error initializing the workflow: " + ex.Message + " Workflow name: " + workflowName + ". Workflow list path: " + workflowFolder + "</li>";
                return false;
            }

            return true;
        }



        public void AppendCCList(ref TextBox srcTB, ref ListBox srcLB)
        {
            if (srcTB.Text != "" && !srcTB.Text.EndsWith(";"))
                srcTB.Text += ";";

            foreach (ListItem li in srcLB.Items)
            {
                if (li.Selected)
                    srcTB.Text += li.Value + ";";
            }
        }

        private ArrayList GetSelectedFilenames(ref ListBox curLB)
        {
            ArrayList fileInfo = new ArrayList();

            for (int i = 0; i < curLB.Items.Count; i++)
            {
                if (curLB.Items[i].Selected)
                    fileInfo.Add(curLB.Items[i].Text);
            }

            return fileInfo;
        }

        /// <summary>
        /// Looks for all files in a given directory with a certain extension
        /// </summary>
        /// <param name="folderPath">The path to search for files</param>
        /// <param name="extension">The extension of files to find</param>
        /// <returns>Path to every file found in the given directory with the given extension</returns>
        protected ArrayList FindFiles(string folderPath, string extension)
        {
            ArrayList fileList = new ArrayList();
            string[] files = null;

            try
            {
                files = System.IO.Directory.GetFiles(folderPath);
            }
            catch (Exception ex)
            {
                LogMessage("FindFiles() - The directory 'folderPath' doesn't exist.");
                return fileList;
            }

            // the ! simply means I want to return the paths to *all* files in this directory
            if (extension == "!")
            {
                foreach (string file in files)
                    fileList.Add(file);
            }
            else if (extension == "")
                return fileList;
            else
            {
                foreach (string file in files)
                {
                    if (Path.GetExtension(file).ToLower() == "." + extension.ToLower())
                        fileList.Add(file);
                }
            }

            return fileList;
        }

        /// <summary>
        /// Grabs a title's name based on it's id
        /// </summary>
        /// <param name="titleID">Title ID (in HEX, 0x00000000)</param>
        /// <returns>The title's name. Returns "" if the title id doesn't exist</returns>
        protected string GetTitleName(string titleID, string envID)
        {
            string titleName = "";

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            titleID.Trim();

            try
            {
                if (g_myConnection != null)
                    g_myConnection.Close();

                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_details " + envID + ", " + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (dataReader.Read())
                    titleName = dataReader["TitleName"].ToString();
                else
                    titleName = "-1";
                if (titleName == null || titleName=="")
                {
                    titleName = "< No Title Name >";
                }
                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                g_myConnection.Close();
                titleName = "";
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return titleName;
        }

        /// <summary>
        /// Converts a 0x... hex value to a decimal value.
        /// </summary>
        /// <param name="hexVal">The hexadecimal value to be converted to decimal</param>
        protected string HexToDec(string hexVal)
        {
            hexVal = hexVal.Remove(0, 2);
            int number = int.Parse(hexVal, System.Globalization.NumberStyles.HexNumber);

            return number.ToString("d");
        }

        /// <summary>
        /// Converts an amount of bytes into a more easily readable size.
        /// </summary>
        /// <param name="bytes">A long value that that specifies the byte amount.</param>
        /// <returns>A string value that is formatted for human readability.</returns>
        private string GetSensibleByteSize(long bytes)
        {
            if (bytes < 1024)
                return bytes.ToString() + " B";
            else if (bytes < (1024 * 1000))
                return ((int)(bytes / 1024)).ToString() + " KB";
            else if (bytes < (1024 * 1000000))
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000)), 2)) + " MB";
            else
                return Convert.ToString(Math.Round(((double)bytes / (1024 * 1000000)), 2)) + " GB";
        }



        // PRODUCT STUDIO HELPER FUNCTIONS
        // ***********************************************************************************************

                 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="bugID"></param>
        /// <param name="envName"></param>
        /// <param name="bugOption"></param>
        /// <param name="titleID"></param>
        /// <param name="Isclosed"></param>
        /// <param name="label">Friendly name of Environments to be displayed in error messages and on UI</param>
        /// <param name="lError"></param>
        /// <returns></returns>
        public bool VerifyBugID(string bugID, string envName, string label, string bugOption, string titleID, string Isclosed, ref Label lError)
        {
            bool problem = false;
            if (!IsFieldValid(bugID, "BugID") || bugID == "")
            {
                lError.Text += "<li>Invalid Bug ID.</li>";
                return false;
            }
            if (!(titleID.Equals("")))
            {
                titleID = titleID.Trim();
                if (!titleID.Contains("0x"))
                    titleID = "0x" + titleID;
            }

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;
            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
            {
                if (lError != null)
                    lError.Text += "<li>Could not connect to Product Studio to validate the  bug</li>";
                return false;
            }
            string bugIDEnv = "";
            string bugIDStatus = "";
            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            try
            {
                if (myBug == null)
                {
                    if (lError != null)
                        lError.Text += "<li>The  bug provided (PS #" + bugID + ") does not exist</li>";
                    return false;
                }

                myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);
                bugIDStatus = myBug.Fields[g_psStatusField].Value.ToString();                
                
                bugIDEnv = myBug.Fields[g_psEnvField].Value.ToString();
            }
            catch (Exception ex)
            {
                LogMessage("A Product Studio error occurred. Exception: " + ex.Message);
                if(lError != null)
                    lError.Text += "<li>A Product Studio error occurred. Failed to validate the  bug. Exception: " + ex.Message + "</li>";
                return false;
            }
            try
            {
                if (envName == null)
                {
                    lError.Text += "<li>Environment Information of pre required bug is missing from configuration file.</li>";
                    return false;
                }
                if (!Regex.IsMatch(bugIDEnv, envName, RegexOptions.IgnoreCase))
                {
                    lError.Text += "<li>The bug provided (PS #" + bugID + ") is not in " + label + " Environment.</li>";
                    return false;
                }
            }
            catch (ArgumentNullException)
            {
                lError.Text += "<li>Environment Information of pre required bug is missing from configuration file.</li>";
                return false;
            }
            catch (NullReferenceException)
            {
                lError.Text += "<li>Environment Information of pre required bug is missing from configuration file.</li>";
                return false;
            }
            catch (Exception ex)
            {
                lError.Text += "<li>Environment Information of pre required bug couldn't be verified.Exception: " + ex.Message + "</li>";
                return false;
            }

            try
            {
                if (!(Isclosed.Equals("")))
                {
                    if (!Regex.IsMatch(bugIDStatus, Isclosed, RegexOptions.IgnoreCase))
                    {
                        lError.Text += "<li>The " + label + " bug provided (PS #" + bugID + ") does not have required status.</li>";
                        return false;
                    }
                }
            }
            catch(ArgumentNullException)
            {
                lError.Text += "<li>Status Information of pre required bug is missing from configuration file.</li>";
                return false;
             }
            catch (NullReferenceException)
            {
                lError.Text += "<li>Status Information of pre required bug is missing from configuration file.</li>";
                return false;
            }
            catch (Exception ex)
            {
                lError.Text += "<li>Status Information of pre required bug couldn't be verified.Exception: " + ex.Message + "</li>";
                return false;

            }
            if ((myBug.Files.Count == 0))
            {
                problem = true;
            }
            if(!problem)
            {
                ArrayList xmlFiles = new ArrayList();
                ListItem xmlFile = new ListItem();
                try
                {
                    for (int i = 0; i < myBug.Files.Count; i++)
                    {
                        if (Path.GetExtension(myBug.Files[i].FileName).ToLower() == ".xml")
                            xmlFiles.Add(new ListItem(myBug.Files[i].FileName, i.ToString()));
                    }
                    if ((xmlFiles.Count == 0))
                    {
                        problem = true;
                    }
                    else if (xmlFiles.Count > 0)
                    {
                        xmlFile = (ListItem)xmlFiles[xmlFiles.Count - 1];
                        myBug.Files[Convert.ToInt32(xmlFile.Value)].SaveToFile(g_serializedTempPath + "\\" + Path.GetFileName(xmlFile.Text), false);
                    }

                    myBug.Save(true);
                }
                catch (Exception ex)
                {
                    LogMessage("Unable to save bug and/or pull files from bug in function GetRequestObjFromBug(). " + ex.Message);
                }
                if ((xmlFiles.Count!= 0))
                {
                    StreamReader sr = new StreamReader(g_serializedTempPath + xmlFile.Text);
                    string xmlStr = sr.ReadToEnd();
                    sr.Close();

                    PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();
                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlStr));
                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                    requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

                    try
                    {
                        System.IO.File.Delete(g_serializedTempPath + xmlFile.Text);
                    }
                    catch (Exception) {/* do nothing here */}

                    try
                    {
                        if ((requestData.requestName == null) && (!(bugOption.Equals(""))))
                        {
                            lError.Text += "<li>Cannot verify request type match. The provided bug ID is not compatible for this check.</li>";
                            return false;
                        }
                        if (!Regex.IsMatch(bugOption.Trim(), requestData.requestName.ToString().Trim(), RegexOptions.IgnoreCase))
                        {
                            if (!requestData.requestName.Trim().ToLower().Equals(bugOption.Trim().ToLower()))
                            {
                                lError.Text += "<li>The Bug ID provided does not match with the request type required for this request.</li>";
                                return false;
                            }
                        }
                        if (!(titleID.Equals("")))
                        {
                            if(!(requestData.requestTitleID.ToString().ToUpper().Trim().Equals(titleID.ToUpper().Trim())))
                            {
                                lError.Text += "<li>The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.</li>";
                                return false;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!(titleID.Equals("")))
                            lError.Text += "<li>Cannot verify Title IDs match. Please wait for the XLAST to be propped for the Title ID provided before submitting this request. Exception caught: " + ex.Message + "</li>";
                        else
                            lError.Text += "<li>Exception caught: " + ex.Message + "</li>";
                    }
                }
            }//end of (!problem)

            // if the XML file is not attached with PS bug, look in the sharepoint list items . This usually means the workflow has not completed yet 

            if(problem)
            {
                string workflowPath = ConfigurationSettings.AppSettings["workflowPath"].ToString();
                string workflowListName = ConfigurationSettings.AppSettings["workflowListName"].ToString();
                string workflowHistoryName = ConfigurationSettings.AppSettings["workflowHistoryName"].ToString();
               
                SPSite site = new SPSite(g_servername);
                SPWeb web = site.OpenWeb();
                SPList list = web.Lists[workflowListName];
                for (int i = list.Items.Count - 1; i >= 0; i--)
                {
                    SPListItem spItem = list.Items[i];
                    if (spItem["PS Bug"] != null && spItem["PS Bug"].ToString().Contains(bugID))
                    {
                        if (spItem.Attachments.Count >= 1)
                        {
                            try
                            {
                                PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();

                                string xmlName = spItem.Attachments[0];
                                if (System.IO.File.Exists(g_serializedTempPath + xmlName))
                                {
                                    problem = false;

                                    StreamReader sr = new StreamReader(g_serializedTempPath + xmlName);
                                    string xmlData = sr.ReadToEnd();
                                    sr.Close();

                                    MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlData));
                                    XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
                                    requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

                                    if (!(titleID.Equals("")))
                                    {
                                        if (requestData.requestVersion == null)
                                        {
                                            lError.Text += "<li>Cannot verify Title IDs match. The provided bug ID is not compatible for this check. Please wait for the XLAST to be propped for the Title ID provided before submitting this request.</li>";
                                            return false;
                                        }
                                        else if (requestData.requestTitleID.ToUpper().Trim() != titleID.ToUpper().Trim())
                                        {
                                            lError.Text += "<li>The Title ID (" + requestData.requestTitleID + ") in the bug provided does not match the Title ID (" + titleID + ") provided. The Title IDs must match to bypass environment verification.</li>";
                                            return false;
                                        }
                                    }                                    
                                    if (bugOption==null)
                                    {
                                        lError.Text += "<li>Request type of Bug required is missing from configuration File.</li>";
                                        return false;
                                    }
                                    if (!Regex.IsMatch(requestData.requestName, bugOption, RegexOptions.IgnoreCase))
                                    {
                                        if (!requestData.requestName.Trim().ToLower().Equals(bugOption.Trim().ToLower()))
                                        {
                                            lError.Text += "<li>The Bug ID provided is of invalid request type.</li>";
                                            return false;
                                        }
                                    }

                                }
                                break;
                            }
                            catch (Exception ex)
                            {
                                problem = true;
                                LogMessage("Exception caught while searching the BugId provided,in the sharepoint list item.Exception caught:" + ex.Message);
                                lError.Text += "<li>Exception caught while searching the BugId provided in the sharepoint list item.Exception caught:"+ ex.Message +"</li>";
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        private ArrayList GetAttachedFilenames(string bugID)
        {
            if (!IsFieldValid(bugID, "BugID") || bugID == "")
                return null;

            ArrayList fileList = new ArrayList();

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
                return null;

            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            if (myBug == null )
                return null;

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);
            if (myBug.Files.Count == 0)
                return fileList;

            try
            {
                for (int i = 0; i < myBug.Files.Count; i++)
                    fileList.Add(myBug.Files[i].FileName);

                myBug.Save(true);
            }
            catch (Exception ex)
            {
                LogMessage("Unable to save bug and/or add attached files in function GetAttachedFilenames(). " + ex.Message);
            }

            return fileList;
        }

        private bool SaveFilesToShare(string bugID, ArrayList fileInfo, string sharePath)
        {
            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
                return false;

            if (!System.IO.Directory.Exists(sharePath))
                System.IO.Directory.CreateDirectory(sharePath);

            if (bugID != "")
            {
                string[] existingFiles = System.IO.Directory.GetFiles(sharePath);

                // compare each file in the share against every file in fileInfo... if the file isn't in fileInfo, delete it.
                foreach (string exFile in existingFiles)
                {
                    bool match = false;
                    for (int i = 0; i < fileInfo.Count; i++)
                    {
                        if (Path.GetFileName(exFile).ToLower() == Path.GetFileName(fileInfo[i].ToString()).ToLower())
                        {
                            match = true;
                            break;
                        }
                    }
                    if (!match)
                    {
                        try
                        {
                            System.IO.File.Delete(sharePath + "\\" + Path.GetFileName(exFile));
                        }
                        catch (Exception ex)
                        {
                            LogMessage("Could not delete file '" + sharePath + "\\" + Path.GetFileName(exFile) + "'. " + ex.Message);
                        }
                    }
                }

                Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
                if (myBug == null)
                    return false;

                myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionEdit, "xoc", PsApplyRulesMask.psApplyRulesAll);

                for (int i = 0; i < myBug.Files.Count; i++)
                {
                    foreach (string fileName in fileInfo)
                    {
                        try
                        {
                            if (Path.GetFileName(myBug.Files[i].FileName).ToUpper() == Path.GetFileName(fileName).ToUpper())
                            {
                                myBug.Files[i].SaveToFile(sharePath + "\\" + Path.GetFileName(fileName), false);
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            LogMessage("Could not pull file '" + fileName + "' from  Bug ID #" + bugID + ". " + ex.Message);
                            return false;
                        }
                    }
                }

                try
                {
                    myBug.Save(true);
                }
                catch (Exception ex)
                {
                    LogMessage("Unable to save bug in function SaveFilesToShare(). " + ex.Message);
                }
            }

            return true;
        }

        /// <summary>
        /// Connects to Product Studio using the connection refs given.
        /// </summary>
        /// <returns>Whether or not a connection was successfully established.</returns>
        public bool ConnectToProductStudio(ref ProductStudio.Directory psDirectory, ref Product psProduct, ref Datastore psDataStore)
        {
            bool success = false;
            foreach (string psDomain in g_psDomains)
            {
                try
                {
                    // connect to the directory and the specific product.
                    psDirectory = new ProductStudio.DirectoryClass();
                    psDirectory.Connect(psDomain.Trim(), "", "");

                    psProduct = psDirectory.GetProductByName(g_psProductName);
                    psDataStore = psProduct.Connect("", "", "");

                    success = true;
                    break;
                }
                catch (Exception ex)
                {
                    LogMessage("Failed to connect to Product Studio [" + psDomain + "]. Exception caught: " + ex.Message);
                }
            }
            if (!success)
            {
                try
                {
                    psDirectory.Disconnect();
                }
                catch (Exception) { /* if we can't disconnect, we don't care. */ }

                FireEvent("Prop Manager: " + g_psErrText, EVENTID_PS_Connection_Error, 1);
                return false;
            }

            return true;
        }

        private DatastoreItem GetBug(Datastore datastore, string database, int bugId)
        {
            DatastoreItemList datalist;
            DatastoreItem dataitem;
            Query query;

            datalist = new DatastoreItemListClass();
            datalist.Datastore = datastore;

            if (bugId != 0)
            {
                query = new QueryClass();
                query.CountOnly = false;
                query.DatastoreItemType = PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs;
                query.SelectionCriteria = "<Query><Expression Column='ID' Operator='equals'><String>" + bugId + "</String></Expression></Query>";

                datalist.Query = query;
                datalist.Execute();

                if (datalist.DatastoreItems.Count != 1)
                    return null;

                dataitem = datalist.DatastoreItems[0];
            }
            else
            {
                datalist.CreateBlank(PsDatastoreItemTypeEnum.psDatastoreItemTypeBugs);
                dataitem = datalist.DatastoreItems.Add(null, PsApplyRulesMask.psApplyRulesAll);
            }

            return dataitem;
        }




        // FIELD VALIDATION FUNCTIONS
        // ***********************************************************************************************


        /// <summary>
        /// Accepts all the possible controls of an Option for comprehensive field validation. If an Option doesn't have certain fields, send [ref g_tbDummy] instead
        /// </summary>
        /// <param name="errCtrl">The error label</param>
        /// <param name="rList">The environment radio button list</param>
        /// <param name="titleIDCtrl">The title id textbox</param>
        /// <param name="bugIDCtrl">The bug id textbox</param>
        /// <param name="offerIDCtrl">The offer id textbox</param>
        /// <param name="xemIDCtrl">The xemid/xmid textbox</param>
        /// <param name="subIDCtrl">The subid textbox</param> 
        /// <param name="baseVerCtrl">The base version textbox</param>
        /// <param name="updateVerCtrl">The update version textbox</param>
        /// <param name="consoleIDListCtrl">The console id textbox</param>
        /// <param name="leaderboardIDListCtrl">The leaderboard id textbox</param>
        /// <param name="ccListCtrl">The cclist textbox</param>
        /// <param name="resolvedByCtrl">The resolved by textbox</param>
        /// <param name="propDateTimeCtrl">The prop date/time textbox</param>
        /// <returns>Indicates whether all the fields in the sent Option are valid</returns>
        protected bool ValidateFields(ref Label errCtrl, ref RadioButtonList rList, ref TextBox titleIDCtrl, ref TextBox bugIDCtrl, ref TextBox offerIDCtrl,
                                      ref TextBox xemIDCtrl, ref TextBox subIDCtrl, ref TextBox baseVerCtrl, ref TextBox updateVerCtrl,
                                      ref TextBox consoleIDListCtrl, ref TextBox leaderboardIDListCtrl, ref TextBox ccListCtrl,
                                      ref DropDownList priorityCtrl, ref DropDownList certificateCtrl, ref TextBox resolvedByCtrl, ref TextBox propDateTimeCtrl)
        {
            bool problem = false;
            EnvInfo envinfo=new EnvInfo();
            
            if (rList != null)
            {
                envinfo = GetEnvInfo(rList.SelectedValue);
                if (rList.SelectedIndex < 0)
                {
                    errCtrl.Text += "<li>No Environment Selected</li>";
                    problem = true;
                }
                               
          
                if (envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    if (bugIDCtrl != null && !IsFieldValid(bugIDCtrl.Text.Trim(), "BugID"))
                    {
                        errCtrl.Text += "<li>Invalid Bug ID</li>";
                        problem = true;
                    }
                }
            }
            if (titleIDCtrl != null)
            {
                if (!IsFieldValid(titleIDCtrl.Text.Trim(), "Hex32"))
                {
                    errCtrl.Text += "<li>Invalid Title ID</li>";
                    problem = true;
                }
            }
            if (xemIDCtrl != null)
            {
                if (!IsFieldValid(xemIDCtrl.Text.Trim(), "XeMID"))
                {
                    errCtrl.Text += "<li>Invalid XeMID</li>";
                    problem = true;
                }
            }
            if (subIDCtrl != null)
            {
                if (!IsFieldValid(subIDCtrl.Text.Trim(), "SubID32"))
                {
                    errCtrl.Text += "<li>Invalid Sub ID</li>";
                    problem = true;
                }
            }
            if (baseVerCtrl != null)
            {
                if (!IsFieldValid(baseVerCtrl.Text.Trim(), "Hex32"))
                {
                    errCtrl.Text += "<li>Invalid Base Version</li>";
                    problem = true;
                }
            }
            if (updateVerCtrl != null)
            {
                if (!IsFieldValid(updateVerCtrl.Text.Trim(), "Hex32"))
                {
                    errCtrl.Text += "<li>Invalid Update Version</li>";
                    problem = true;
                }
            }
            if (offerIDCtrl != null)
            {
                if (!IsFieldValid(offerIDCtrl.Text, "OfferList"))
                {
                    errCtrl.Text += "<li>Invalid Offer ID List (make sure IDs are preceded by 0x)</li>";
                    problem = true;
                }
            }
            if (leaderboardIDListCtrl != null)
            {
                if (!IsFieldValid(leaderboardIDListCtrl.Text, "Int32List"))
                {
                    errCtrl.Text += "<li>Invalid Leaderboard ID List (make sure IDs are decimal values)</li>";
                    problem = true;

                }
                
                if (!problem)
                {
                    bool found = false;
                    string[] arrleaderboardId = leaderboardIDListCtrl.Text.Split('\n');
                    for (int i = 0; i < arrleaderboardId.Length - 1; i++)
                    {
                        for (int j = i + 1; j < arrleaderboardId.Length - 1; j++)
                        {
                            if (arrleaderboardId[i].Trim().Equals(arrleaderboardId[j].Trim()))
                            {
                                found = true;
                                errCtrl.Text += "<li>Duplicate Leaderboard ID entries found.</li>";
                                problem = true;
                                break;
                            }
                        }

                        if (found)
                            break;
                    }
                    
                }


            }
            if (consoleIDListCtrl != null)
            {
                bool empty = false;
                //TBD 
                if (rList.SelectedValue == "CertNet" || envinfo.EnvType.ToUpper().Equals("PROD"))
                {
                    if (consoleIDListCtrl.Text == "") empty = true;
                }

                if (!empty)
                {
                    if (!IsFieldValid(consoleIDListCtrl.Text, "ConsoleID"))
                    {
                        errCtrl.Text += "<li>Invalid Console ID List (this field is required in PartnerNet).</li>";
                        problem = true;
                    }
                }
            }
            if (ccListCtrl != null)
            {
                if (!IsFieldValid(ccListCtrl.Text, "CC"))
                {
                    errCtrl.Text += "<li>Invalid Cc List</li>";
                    problem = true;
                }
            }
            if (priorityCtrl != null)
            {
                if (priorityCtrl.SelectedIndex == 0)
                {
                    errCtrl.Text += "<li>No Priority Selected</li>";
                    problem = true;
                }
            }
            if (certificateCtrl != null)
            {
                if (certificateCtrl.SelectedIndex == 0)
                {
                    errCtrl.Text += "<li>No Certification Stage Selected</li>";
                    problem = true;
                }
            }
            if (resolvedByCtrl != null)
            {
                if (resolvedByCtrl.Text == "")                {
                    errCtrl.Text += "<li>Invalid 'Whom to Resolve To' Field</li>";
                    problem = true;
                }
            }
            DateTime result;
            if (propDateTimeCtrl != null)
            {
                if (propDateTimeCtrl.Text.Equals(""))
                {
                    errCtrl.Text += "<li>Invalid Requested Prop Date/Time</li>";
                    problem = true;
                }
                else
                {
                    string[] dt = propDateTimeCtrl.Text.Trim().Split(' ');
                    bool dt1 = DateTime.TryParseExact(dt[0], "mm/dd/yyyy", null, System.Globalization.DateTimeStyles.None, out result);
                    Regex regEx = new Regex(@"(([0-1][0-9]|2[0-3])[0-5][0-9])$");
                    bool check = false;
                    if (dt.Length > 1)
                    {
                        check = regEx.IsMatch(dt[1]);
                    }

                    if ((!(dt1 && check)) || (dt.Length > 2))
                    {
                        errCtrl.Text += "<li>Invalid Requested Prop Date/Time</li>";
                        problem = true;
                    }
                }
            }

            if (problem)
                return true;

            return false;
        }


        /// <summary>
        /// Gets sent a value and a type then returns whether that value is valid.
        /// </summary>
        /// <param name="val">Content to validate. This is usually a control's text</param>
        /// <param name="type">The type to check it agaist. Available types are listed inside the method</param>
        /// <returns>Indicates whether 'val' is a valid 'type'</returns>
        protected bool IsFieldValid(string val, string type)
        {
            Regex regEx;

            if (type == "Hex32") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){8}$)");
            else if (type == "Hex32Var") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){1,8}$)");
            else if (type == "SubID32") regEx = new Regex("(^([0-9]|[A-F]|[a-f]){8}(-[0-9][A-Z|a-z])?$)");
            else if (type == "Int32List") regEx = new Regex(@"(^((\s*)[0-9]+(\s*)\r\n)*$)");
            else if (type == "OfferList") regEx = new Regex(@"(^((\s*)0x([0-9]|[A-F]|[a-f]){16}(\s*)\r\n)*$)");
            else if (type == "CC") regEx = new Regex("(^(((([^@]+)@([^@]+))|([^@]+);))*$)");
            else if (type == "DateTime") regEx = new Regex("(^((0[1-9]|1[0-2])/([0-2][0-9]|3[0-1])/[0-9]{4} ([0-1][0-9]|2[0-3])[0-5][0-9])$)");
            else if (type == "XeMID") regEx = new Regex("(^.{13}$)");
            else if (type == "ConsoleID") regEx = new Regex(@"(^((\s*)(((xe.)?[^\s\r\n]{12})|(0xFB00([^\s\r\n]{12})))(\s*)\r\n)+$)");
            else if (type == "BugID") regEx = new Regex("(^[0-9]{1,9}$)");
            else if (type == "TMSList") regEx = new Regex(@"(^((\s*)(..*)(\s*)\r\n)*$)", RegexOptions.IgnoreCase);
            else if (type == "CertName") regEx = new Regex(@"(^([^\.]+\.[^\.]+\.[^\.]+\.[^\.]+)$)");
            else if (type == "IP") regEx = new Regex(@"^(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})$");
            else if (type == "IPList") regEx = new Regex(@"^((\s*)(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})(\s*)\r\n)*$");
            else return false;

            if (regEx.IsMatch(val) && val != "") return true;
            else if (type == "CC" && val == "") return true;

            return false;
        }
                

        // PREREQUISITE VALIDATION FUNCTIONS
        // ***********************************************************************************************

        /// <summary>
        /// Verifies that all the Offer IDs in the list exist in the given env
        /// </summary>
        /// <param name="offerList">A newline separated list of Offer IDs</param>
        /// <param name="env">A Title Verification-valid environment number</param>
        /// <returns>Every Offer ID that did not exist. If none, it will just be empty</returns>
        protected ArrayList VerifyOfferIDs(string offerList, string env)
        {
            ArrayList badMatches = new ArrayList();

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            try
            {
                string[] delimStr = new string[] { "\r\n" };
                string[] offerAry = offerList.Split(delimStr, StringSplitOptions.RemoveEmptyEntries);

                foreach (string offerID in offerAry)
                {
                    // accesses the Title Verification tool
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    myCommand = new SqlCommand("EXEC p_get_offer_prop_date " + env + ", " + offerID, g_myConnection);
                    dataReader = myCommand.ExecuteReader();

                    if (!dataReader.HasRows)
                        badMatches.Add(offerID);

                    dataReader.Close();
                    g_myConnection.Close();
                }
            }
            catch (SqlException ex)
            {
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return badMatches;
        }

        public bool VerifyServiceIDs(string serviceID, string siteID, string envID, string titleID)
        {
            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                // pull titles based on an environment
                myCommand = new SqlCommand("EXEC p_get_service_instances " + envID + "," + titleID, g_myConnection);
                dr = myCommand.ExecuteReader();

                if (!dr.HasRows)
                    return true;
                while (dr.Read())
                {
                    string tempSvcID = dr["HexServiceID"].ToString();
                    string tempSiteID = dr["SiteID"].ToString();

                    if (serviceID.ToUpper() == tempSvcID.ToUpper() && siteID.ToUpper() == tempSiteID.ToUpper())
                        return false;
                }
                dr.Close();
                g_myConnection.Close();
            }
            catch (Exception ex)
            {
                LogMessage("Error getting information out of Title Verification. " + ex.Message);
            }
            finally
            {
                if (dr != null && !dr.IsClosed)
                    dr.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return true;
        }

        /// <summary>
        /// Confirms that the given versions along with the console type actually exist in selected Environment
        /// </summary>
        /// <param name="verStr">Version number (in HEX) of the given type</param>
        /// <param name="consoleType">Console type</param>
        /// <param name="envStr">Title Verification-valid environment number</param>
        /// <param name="titleID">The title id (in HEX)</param>
        /// <param name="consoleType">The Console Type </param>
        /// <param name="type">0=base, 1=update, 2=beta</param>
        /// <returns>Indicates whether the version exists as the given type</returns>
        protected bool VerifyVersions(string verStr, string consoleType, string envStr, string titleID, int type)
        {
            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            // accesses the Title Verification tool
            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_versions " + envStr + ", " + "0x" + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (consoleType.ToUpper().Trim() == "XBOX1")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTXbox1"].ToString().Trim();
                }
                if (consoleType.ToUpper().Trim() == "XENON (360)")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTXenon"].ToString().Trim();
                }
                if (consoleType.ToUpper().Trim() == "PC (PANORAMA)")
                {
                    consoleType = ConfigurationSettings.AppSettings["TVTPC"].ToString().Trim();
                }
                while (dataReader.Read())
                {
                    if (type == 0 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexBaseVer"].ToString().ToUpper().Trim()) && (consoleType.ToUpper().Trim() == dataReader["ConsoleType"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 1 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexUpdVer"].ToString().ToUpper().Trim()) && (consoleType.ToUpper().Trim() == dataReader["ConsoleType"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 2 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexBetaVer"].ToString().ToUpper().Trim()) && (consoleType.ToUpper().Trim() == dataReader["ConsoleType"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }
        /// <summary>
        /// Confirms that the given versions actually exist in selected Environment
        /// </summary>
        /// <param name="verStr">Version number (in HEX) of the given type</param>
        /// <param name="envStr">Title Verification-valid environment number</param>
        /// <param name="titleID">The title id (in HEX)</param>
        /// <param name="consoleType">The Console Type </param>
        /// <param name="type">0=base, 1=update, 2=beta</param>
        /// <returns>Indicates whether the version exists as the given type</returns>
        protected bool VerifyVersions(string verStr, string envStr, string titleID, int type)
        {
            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            // accesses the Title Verification tool
            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_versions " + envStr + ", " + "0x" + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                while (dataReader.Read())
                {
                    if (type == 0 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexBaseVer"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 1 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexUpdVer"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                    else if (type == 2 && (("0X" + verStr.ToUpper().Trim()) == dataReader["HexBetaVer"].ToString().ToUpper().Trim()))
                    {
                        dataReader.Close();
                        g_myConnection.Close();

                        return true;
                    }
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }

        /// <summary>
        /// Check to see if the given title id exists in the given environment
        /// </summary>
        /// <param name="env">Title Verification-valid environment number</param>
        /// <param name="titleID">Title ID (in HEX)</param>
        /// <param name="errCtrl">A reference to the error label of this Option </param>
        /// <returns>Indicates whether the Title ID exists in the given environment</returns>
        protected bool VerifyEnvironment(string env, string titleID, ref Label errCtrl)
        {
            if (!IsFieldValid(titleID, "Hex32"))
            {
                if (errCtrl != null)
                    errCtrl.Text += "<li>Invalid Title ID.</li>";
                return false;
            }

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            try
            {
                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                if (!titleID.Contains("0x"))
                    titleID = "0x" + titleID;

                myCommand = new SqlCommand("EXEC p_get_title_details " + env + ", " + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (!dataReader.HasRows)
                {
                    if (errCtrl != null)
                        errCtrl.Text += "<li>This Title ID does not exist in the selected environment.</li>";
                }
                else
                {
                    dataReader.Close();
                    g_myConnection.Close();
                    return true;
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                if (errCtrl != null)
                {
                    LogMessage("Error: could not access the Title Verification DB");
                    errCtrl.Text += "<li><font color=red>Cannot access the Title Verification database.</font></li>";
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }

        public bool VerifyServiceIDs(string envID, string titleID)
        {
            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                // pull titles based on an environment
                myCommand = new SqlCommand("EXEC p_get_service_instances " + envID + "," + titleID, g_myConnection);
                dr = myCommand.ExecuteReader();

                if (!dr.HasRows)
                    return false;
                else
                    return true;
            }
            catch (Exception ex)
            {
                LogMessage("Error getting information out of Title Verification. Exception thrown: " + ex.Message);
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Exception thrown: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dr != null && !dr.IsClosed)
                    dr.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }

        protected bool VerifyNotMarketplace(string envID, string titleID, ref Label lError)
        {
            if (!IsFieldValid(titleID, "Hex32"))
            {
                if (lError != null)
                    lError.Text += "<li>Invalid Title ID.</li>";
                return false;
            }

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            // check to see if the title is propped as a non-Marketplace file in the selected environment
            try
            {
                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_details " + envID + ", 0x" + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (dataReader.Read())
                {
                    if (dataReader["ConsoleType"].ToString().ToUpper().Trim() == "MARKETPLACE")
                    {
                        if (lError != null)
                            lError.Text += "<li>This title (0x" + titleID + ") has been propped as a Marketplace file. This title needs to exist as an XLAST (Xbox 360 or PC) prior to submitting this XLSP request.</li>";
                    }
                    else
                        return true;
                }

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                if (lError != null)
                    lError.Text += "<li>Cannot access the Title Verification database.</li>";

                LogMessage("Error: could not access the Title Verification DB.");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return false;
        }

        protected bool IsTitleOnCertificate(string titleID, string envID, string certificateID)
        {
            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                // pull titles based on an environment
                myCommand = new SqlCommand("EXEC p_get_cert_titles " + envID + "," + certificateID, g_myConnection);
                dr = myCommand.ExecuteReader();

                while (dr.Read())
                {
                    string curTitleID = dr["TextTitleID"].ToString();

                    if (titleID.ToUpper() == curTitleID.ToUpper())
                        return true;  // this means validation = false, as the title already exists on this certificate
                }
                dr.Close();
                return false;   // this means validation = true, as the title does not exists on this certificate yet
            }
            catch (Exception ex)
            {
                if (g_myConnection != null) g_myConnection.Close();

                LogMessage("Error: Could not access the Title Verification DB.");
                FireEvent("Prop Manager encountered an error when connecting to the Title Verification DB, which indicates it's down. Exception: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                g_titleVerConnErr = true;
                return true;
            }
        }


        // APPLICATION LOGGING
        // ***********************************************************************************************

        /// <summary>
        /// Determines if the StreamWriter object is still stored in the Cache or if we need a new one.
        /// </summary>
        protected void EnableLogging()
        {
            g_logging = true;

            g_swLog = (StreamWriter)Cache["LogStream"];
            try
            {
                if (g_swLog == null || g_swLog.BaseStream == null)
                {
                    g_swLog = new StreamWriter(g_logFile, true);
                    Cache["LogStream"] = g_swLog;
                    LogMessage("Application logging has been enabled.");
                }
            }
            catch (Exception ex)
            {
                g_swLog = new StreamWriter(g_logFile, true);
                Cache["LogStream"] = g_swLog;
                FireEvent("Prop Manager: failed opening logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 2);
                LogMessage("Application logging has been enabled");
            }

            // check to see if we're a new day's log file needs to be generated
            StreamWriter swLog2;
            try
            {
                swLog2 = new StreamWriter(g_logFile, true);
            }
            catch (Exception)   // this means that g_swLog is already writing to the correct log file
            {
                return;
            }
            if (swLog2 != null)
            {
                swLog2.Close();
            }
            g_swLog.Close();

            g_swLog = new StreamWriter(g_logFile, true);
            Cache["LogStream"] = g_swLog;
            LogMessage("Application logging has been enabled");
        }


        /// <summary>
        /// Disables application logging.
        /// </summary>
        protected void DisableLogging()
        {
            g_logging = false;

            try
            {
                g_swLog = (StreamWriter)Cache["LogStream"];
                if (g_swLog != null)
                {
                    if (g_swLog.BaseStream != null)
                    {
                        LogMessage("Application logging has been disabled");
                        g_swLog.Close();
                        Cache["LogStream"] = g_swLog;
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage("An error occurred when trying to disable application logging in DisableLogging(). " + ex.Message);
                FireEvent("Prop Manager: failed disabling logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 4);
            }
        }


        /// <summary>
        /// Writes formatted messages to the log file.
        /// </summary>
        /// <param name="message">The message</param>
        protected void LogMessage(string message)
        {
            if (!g_logging)
                return;

            Application.Lock();
            try
            {
                g_swLog.WriteLine(DateTime.Now + " | " + User.Identity.Name + " | " + message);
                g_swLog.Flush();
            }
            catch (Exception ex)
            {
                FireEvent("Prop Manager: failed writing to logfile located at " + g_logFile + ". " + ex.ToString(), EVENTID_Tracing_Init_Error, 2);
            }
            Application.UnLock();
        }




        // EVENTING
        // ***********************************************************************************************

        /// <summary>
        /// Fires an event into the eventlog (originally written by shawnbe, modified by v-mikma)
        /// </summary>
        /// <param name="EvtText">String to include in the event description.</param>
        /// <param name="EventID">Event ID</param>
        /// <param name="Severity">Event Type (1=Error,2=Warning,4=Info)</param>
        protected void FireEvent(string EvtText, int EventID, int Severity)
        {
            EventLogEntryType EvtSeverity;

            switch (Severity)
            {
                case 1:
                    // Error
                    EvtSeverity = EventLogEntryType.Error;
                    break;
                case 2:
                    // Warning
                    EvtSeverity = EventLogEntryType.Warning;
                    break;
                case 4:
                    // Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
                default:
                    // Informational
                    EvtSeverity = EventLogEntryType.Information;
                    break;
            }

            // Write an event to  the event log.    
            try
            {
                g_eventLog.WriteEntry(EvtText, EvtSeverity, EventID);
            }
            catch (Exception) { }

            g_eventLog = null;
        }



        // EVENT HANDLERS
        // ***********************************************************************************************

        protected void BtnFindOffers_Click(object sender, EventArgs e)
        {
            Button btnCur = (Button)sender;
            DropDownList dropDummy = null;
            RadioButtonList rListDummy = null;

            if (btnCur.ID == "btn_Prob_FindOffers")
            {
                l_Req_OfferList.Text = "";

                SqlCommand myCommand = null;
                SqlDataReader dataReader = null;

                try
                {
                    bool problem = ValidateFields(ref l_Req_Error, ref rListDummy, ref tb_Req_TitleID, ref g_tbDummy, ref g_tbDummy,
                                                  ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                                  ref g_tbDummy, ref dropDummy, ref dropDummy, ref g_tbDummy, ref g_tbDummy);

                    string envID = rList_Prov.SelectedIndex.ToString();
                    if (Convert.ToInt32(envID) < 0)
                    {
                        l_Req_Error.Text += "<li>No Environment Selected</li>";
                        problem = true;
                    }

                    if (problem)
                    {
                        l_Req_Error.Text = g_errText + l_Req_Error.Text;
                        return;
                    }

                    // accesses the Title Verification tool
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    myCommand = new SqlCommand("EXEC p_get_title_offers " + g_environments[rList_Prov.SelectedValue].ToString() + ", 0x" + tb_Req_TitleID.Text.Trim(), g_myConnection);
                    dataReader = myCommand.ExecuteReader();

                    if (dataReader.HasRows)
                        l_Req_OfferList.Text += "<tr><td width='40%'><b>Hex Offer ID</b></td><td><b>Offer Name</b></td></tr>";
                    int count = 0;
                    while (dataReader.Read())
                    {
                        l_Req_OfferList.Text += "<tr><td>" + dataReader["HexOfferID"].ToString() + "</td><td>" + dataReader["OfferName"].ToString() + "</td></tr>";
                        count++;
                    }
                    if (count == 0)
                        l_Req_OfferList.Text += "<tr><td width='100%'><i>There are no offers for the Title ID and selected Environment.</i></td></tr>";

                    dataReader.Close();
                    g_myConnection.Close();
                }
                catch (SqlException ex)
                {
                    l_Req_Error.Text += g_errText;
                    l_Req_Error.Text += "<li><font color=red>Cannot access the Title Verification database.</font><li>";
                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dataReader != null && !dataReader.IsClosed)
                        dataReader.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }
            }
            else if (btnCur.ID == "btn_EO_FindOffers")
            {
                l_EO_OfferList.Text = "";

                SqlCommand myCommand = null;
                SqlDataReader dataReader = null;

                try
                {
                    bool problem = ValidateFields(ref l_EO_Error, ref rListDummy, ref tb_EO_TitleID, ref g_tbDummy, ref g_tbDummy,
                                                  ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy, ref g_tbDummy,
                                                  ref g_tbDummy, ref dropDummy, ref dropDummy, ref g_tbDummy, ref g_tbDummy);
                    string envID = rList_EO.SelectedIndex.ToString();
                    if (Convert.ToInt32(envID) < 0)
                    {
                        l_EO_Error.Text += "<li>No Environment Selected</li>";
                        problem = true;
                    }

                    if (problem)
                    {
                        l_EO_Error.Text = g_errText + l_EO_Error.Text;
                        return;
                    }

                    // accesses the Title Verification tool
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    myCommand = new SqlCommand("EXEC p_get_title_offers " + g_environments[rList_EO.SelectedValue] + ", 0x" + tb_EO_TitleID.Text.Trim(), g_myConnection);
                    dataReader = myCommand.ExecuteReader();

                    if (dataReader.HasRows)
                        l_EO_OfferList.Text += "<tr><td><b>Hex Offer ID</b></td><td><b>Offer Name</b></td></tr>";
                    int count = 0;
                    while (dataReader.Read())
                    {
                        l_EO_OfferList.Text += "<tr><td>" + dataReader["HexOfferID"].ToString() + "</td><td>" + dataReader["OfferName"].ToString() + "</td></tr>";
                        count++;
                    }
                    if (count == 0)
                        l_EO_OfferList.Text += "<tr><td width='100%'><i>There are no offers for the Title ID and selected Environment.</i></td></tr>";

                    dataReader.Close();
                    g_myConnection.Close();
                }
                catch (SqlException ex)
                {
                    l_EO_Error.Text += g_errText;
                    l_EO_Error.Text += "<li><font color=red>Cannot access the Title Verification database.</font></li>";
                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dataReader != null && !dataReader.IsClosed)
                        dataReader.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }
            }
        }

        protected void btnAddVersion_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_PropXLAST_AddVersion") btnAddVersion_Click_Process(ref rList_PropXLAST, ref g_tbDummy, ref tb_PropXLAST_BaseVerToAdd, ref dList_PropXLAST_VerType, ref lb_PropXLAST_VersionAdds, ref l_PropXLAST_Error);
            else if (curBtn.ID == "btn_AddBaseVer_AddVersion") btnAddVersion_Click_Process(ref rList_AddBaseVer, ref tb_AddBaseVer_TitleID, ref tb_AddBaseVer_BaseVerToAdd, ref dList_AddBaseVer_VerType, ref lb_AddBaseVer_VersionAdds, ref l_AddBaseVer_Error);
        }
        private void btnAddVersion_Click_Process(ref RadioButtonList rList, ref TextBox tbTitleID, ref TextBox tbBaseVer, ref DropDownList dListPlatform, ref ListBox lbVer, ref Label lError)
        {
            bool problem = false;

            tbBaseVer.Text = tbBaseVer.Text.Trim();

            if (!IsFieldValid(tbBaseVer.Text, "Hex32"))
            {
                lError.Text += "<li>Invalid Base Version. Make sure you have provided an 8 digit hex number.</li>";
                problem = true;
            }
            if (dListPlatform.SelectedIndex == 0)
            {
                lError.Text += "<li>No 'Platform' selected while trying to add a Base Version.</li>";
                problem = true;
            }

            if (!problem && tbTitleID != null)
            {
                // verify this base version doesn't already exist before adding it
                if (rList.SelectedIndex == -1)
                {
                    lError.Text += "<li>Missing 'Environment'.</li>";
                    problem = true;
                }
                else if (VerifyVersions(tbBaseVer.Text.Trim(), dListPlatform.SelectedValue, g_environments[rList.SelectedValue].ToString(), tbTitleID.Text.Trim(), 0))
                {
                    lError.Text += "<li>The Base Version '0x" + tbBaseVer.Text + "' already exists on this title!</li>";
                    problem = true;
                }
            }


            if (problem)
                lError.Text = g_errText + lError.Text;
            else
            {
                ListItem liTemp = new ListItem(("0x" + tbBaseVer.Text + " | " + dListPlatform.SelectedItem.Text));
                if (lbVer.Items.Contains(liTemp))
                    lError.Text = g_errText + "<li>Base Version '" + liTemp + "' has already been added to this request.</li>";
                else
                {
                    lbVer.Items.Add("0x" + tbBaseVer.Text + " | " + dListPlatform.Text);
                    tbBaseVer.Text = "";
                }
            }
        }

        protected void btnRemVersion_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_PropXLAST_RemVersion") btnRemVersion_Click_Process(ref lb_PropXLAST_VersionAdds, false);
            else if (curBtn.ID == "btn_PropXLAST_RemAllVersions") btnRemVersion_Click_Process(ref lb_PropXLAST_VersionAdds, true);
            else if (curBtn.ID == "btn_AddBaseVer_RemVersion") btnRemVersion_Click_Process(ref lb_AddBaseVer_VersionAdds, false);
            else if (curBtn.ID == "btn_AddBaseVer_RemAllVersions") btnRemVersion_Click_Process(ref lb_AddBaseVer_VersionAdds, true);
        }
        private void btnRemVersion_Click_Process(ref ListBox lbVer, bool removeAll)
        {
            if (!removeAll) lbVer.Items.Remove(lbVer.SelectedItem);
            else lbVer.Items.Clear();
        }

        protected void BtnTitleSearch_Click(object sender, EventArgs e)
        {
            Button btnCur;
            TextBox tbCur;

            Type type = sender.GetType();
            if (type.Name == "Button")
            {
                btnCur = (Button)sender;

                if (btnCur.ID == "btn_ConfigXLSP_New_FindName") BtnTitleSearch_Click_Process(ref rList_ConfigXLSP_Environment, ref tb_ConfigXLSP_New_TitleID, ref l_ConfigXLSP_New_TitleName, ref l_ConfigXLSP_Error);
                else if (btnCur.ID == "btn_ConfigXLSP_Modify_FindName") BtnTitleSearch_Click_Process(ref rList_ConfigXLSP_Environment, ref tb_ConfigXLSP_Modify_TitleID, ref l_ConfigXLSP_Modify_TitleName, ref l_ConfigXLSP_Error);
                else if (btnCur.ID == "btn_PropAU_FindName") BtnTitleSearch_Click_Process(ref rList_PropAU, ref tb_PropAU_TitleID, ref l_PropAU_TitleName, ref l_PropAU_Error);
                else if (btnCur.ID == "btn_PropSample_FindName") BtnTitleSearch_Click_Process(ref rList_PropSample, ref tb_PropSample_TitleID, ref l_PropSample_TitleName, ref l_PropSample_Error);
                else if (btnCur.ID == "btn_SwitchToGlobal_FindName") BtnTitleSearch_Click_Process(ref rList_SwitchToGlobal, ref tb_SwitchToGlobal_TitleID, ref l_SwitchToGlobal_TitleName, ref l_SwitchToGlobal_Error);
                else if (btnCur.ID == "btn_AddBaseVer_FindName") BtnTitleSearch_Click_Process(ref rList_AddBaseVer, ref tb_AddBaseVer_TitleID, ref l_AddBaseVer_TitleName, ref l_AddBaseVer_Error);
                else if (btnCur.ID == "btn_UploadTMS_FindName") BtnTitleSearch_Click_Process(ref rList_UploadTMS, ref tb_UploadTMS_TitleID, ref l_UploadTMS_TitleName, ref l_UploadTMS_Error);
                else if (btnCur.ID == "btn_DeleteTMS_FindName") BtnTitleSearch_Click_Process(ref rList_DeleteTMS, ref tb_DeleteTMS_TitleID, ref l_DeleteTMS_TitleName, ref l_DeleteTMS_Error);
                else if (btnCur.ID == "btn_ConfigEALSP_FindName") BtnTitleSearch_Click_Process(ref rList_ConfigEALSP, ref tb_ConfigEALSP_TitleID, ref l_ConfigEALSP_TitleName, ref l_ConfigEALSP_Error);
                else if (btnCur.ID == "btn_LBReset_FindName") BtnTitleSearch_Click_Process(ref this.rList_LBReset, ref tb_LBReset_TitleID, ref  l_LBReset_TitleName, ref l_LBReset_Error);
                else if (btnCur.ID == "btn_TitleFencing_FindName") BtnTitleSearch_Click_Process(ref rList_TitleFencing, ref tb_TitleFencing_TitleID, ref l_TitleFencing_TitleName, ref l_TitleFencing_Error);
            }
            else if (type.Name == "TextBox")
            {
                tbCur = (TextBox)sender;

                if (tbCur.ID == "tb_ConfigXLSP_New_FindName") BtnTitleSearch_Click_Process(ref rList_ConfigXLSP_Environment, ref tb_ConfigXLSP_New_TitleID, ref l_ConfigXLSP_New_TitleName, ref l_ConfigXLSP_Error);
                else if (tbCur.ID == "tb_ConfigXLSP_Modify_TitleID") BtnTitleSearch_Click_Process(ref rList_ConfigXLSP_Environment, ref tb_ConfigXLSP_Modify_TitleID, ref l_ConfigXLSP_Modify_TitleName, ref l_ConfigXLSP_Error);
                else if (tbCur.ID == "tb_PropAU_TitleID") BtnTitleSearch_Click_Process(ref rList_PropAU, ref tb_PropAU_TitleID, ref l_PropAU_TitleName, ref l_PropAU_Error);
                else if (tbCur.ID == "tb_PropSample_TitleID") BtnTitleSearch_Click_Process(ref rList_PropSample, ref tb_PropSample_TitleID, ref l_PropSample_TitleName, ref l_PropSample_Error);
                else if (tbCur.ID == "tb_SwitchToGlobal_TitleID") BtnTitleSearch_Click_Process(ref rList_SwitchToGlobal, ref tb_SwitchToGlobal_TitleID, ref l_SwitchToGlobal_TitleName, ref l_SwitchToGlobal_Error);
                else if (tbCur.ID == "tb_AddBaseVer_TitleID") BtnTitleSearch_Click_Process(ref rList_AddBaseVer, ref tb_AddBaseVer_TitleID, ref l_AddBaseVer_TitleName, ref l_AddBaseVer_Error);
                else if (tbCur.ID == "tb_UploadTMS_TitleID") BtnTitleSearch_Click_Process(ref rList_UploadTMS, ref tb_UploadTMS_TitleID, ref l_UploadTMS_TitleName, ref l_UploadTMS_Error);
                else if (tbCur.ID == "tb_DeleteTMS_TitleID") BtnTitleSearch_Click_Process(ref rList_DeleteTMS, ref tb_DeleteTMS_TitleID, ref l_DeleteTMS_TitleName, ref l_DeleteTMS_Error);
                else if (tbCur.ID == "tb_ConfigEALSP_TitleID") BtnTitleSearch_Click_Process(ref rList_ConfigEALSP, ref tb_ConfigEALSP_TitleID, ref l_ConfigEALSP_TitleName, ref l_ConfigEALSP_Error);
                else if (tbCur.ID == "tb_LBReset_TitleID") BtnTitleSearch_Click_Process(ref this.rList_LBReset, ref tb_LBReset_TitleID, ref  l_LBReset_TitleName, ref l_LBReset_Error);
                else if (tbCur.ID == "tb_TitleFencing_TitleID") BtnTitleSearch_Click_Process(ref rList_TitleFencing, ref tb_TitleFencing_TitleID, ref l_TitleFencing_TitleName, ref l_TitleFencing_Error);
            }
        }
        protected void BtnTitleSearch_Click_Process(ref RadioButtonList rList, ref TextBox tbTitleID, ref Label lTitleName, ref Label lError)
        {
            tbTitleID.Text = tbTitleID.Text.Trim();

            if (rList.SelectedValue == "")
            {
                lTitleName.Text = "";
                lError.Text = g_errText + "<li>No 'Environment' selected.</li>";
            }
            else if (IsFieldValid(tbTitleID.Text.Trim(), "Hex32"))
            {
                string titleName = GetTitleName("0x" + tbTitleID.Text, g_environments[rList.SelectedValue].ToString());

                if (titleName == "-1")
                {
                    titleName = "";
                    lTitleName.Text = "";
                    lError.Text = g_errText + "<li>The Title ID does not exist in " + rList.SelectedValue + ".</li>";
                }
                else if (titleName == "")
                {
                    lTitleName.Text = "< No Title Name >";
                    //lError.Text = g_errText + "<li>Could not connect to Title Verification.</li>";
                }
                else
                {
                    if (lTitleName.ID == "l_WebSvc_TitleName")
                        lTitleName.Text = "Name: <font color='green'><b>" + titleName + "</b></font><br />";
                    else if (lTitleName.ID == "l_TitleFencing_TitleName")
                    {
                        lTitleName.Text = "<br><i>Title Name:</i><br /> <font color='green'><b>" + titleName + "</b></font><br />";

                        // pull pre-existing Fencing Date (if it exists) from TitleVer
                        string preDate = GetFencingDate(g_environments[rList.SelectedValue].ToString(), tb_TitleFencing_TitleID.Text);

                        if (preDate == "")
                        {
                            tb_TitleFencing_Date.Text = preDate;
                            l_TitleFencing_DateInfo.Text = "(no pre-existing date)";
                        }
                        else if (preDate == "-1")
                        {
                            l_TitleFencing_DateInfo.Text = "";
                            lError.Text = "<li>Could not connect to Title Verification. Please try again later.</li>";
                        }
                        else
                        {
                            DateTime preDateTime = DateTime.Parse(preDate);
                            preDate = preDateTime.Month.ToString().PadLeft(2, '0') + "/" + preDateTime.Day.ToString().PadLeft(2, '0') + "/" + preDateTime.Year.ToString() + " " + preDateTime.Hour.ToString() + preDateTime.Minute.ToString().PadLeft(2, '0');
                            tb_TitleFencing_Date.Text = preDate;
                            l_TitleFencing_DateInfo.Text = "(current blacklisted date in GMT)";
                        }
                    }
                    else
                        lTitleName.Text = "<br><i>Title Name:</i><br /> <font color='green'><b>" + titleName + "</b></font><br />";

                }
            }
            else
            {
                lTitleName.Text = "";
                lError.Text = g_errText + "<li>Invalid 'Title ID'.</li>";
            }
        }

        protected string GetFencingDate(string envID, string titleID)
        {
            string fencingDate = "";

            SqlCommand myCommand = null;
            SqlDataReader dataReader = null;

            titleID = titleID.Trim();

            try
            {
                if (g_myConnection != null)
                    g_myConnection.Close();

                // accesses the Title Verification tool
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                myCommand = new SqlCommand("EXEC p_get_title_details " + envID + ", 0x" + titleID, g_myConnection);
                dataReader = myCommand.ExecuteReader();

                if (dataReader.Read())
                    fencingDate = dataReader["XboxComBlacklistEndDate"].ToString();
                else
                    fencingDate = "-1";

                dataReader.Close();
                g_myConnection.Close();
            }
            catch (SqlException ex)
            {
                g_myConnection.Close();
                fencingDate = "";
                LogMessage("Error: could not access the Title Verification DB");
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
            finally
            {
                if (dataReader != null && !dataReader.IsClosed)
                    dataReader.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();
            }

            return fencingDate;
        }

        protected void CheckBox_Click(object sender, EventArgs e)
        {
            CheckBox cbCur = (CheckBox)sender;

            if (cbCur.ID == "cb_PropXLAST_Method1" && cbCur.Checked) g_PropXLAST_ProdDefault = false;
            else if (cbCur.ID == "cb_PropXLAST_Method2" && cbCur.Checked) g_PropXLAST_ProdDefault = true;
            else if (cbCur.ID == "cb_PropMarket_Method1" && cbCur.Checked) g_PropMarket_ProdDefault = false;
            else if (cbCur.ID == "cb_PropMarket_Method2" && cbCur.Checked) g_PropMarket_ProdDefault = true;
            else if (cbCur.ID == "cb_PropKO_Method1" && cbCur.Checked) g_PropKO_ProdDefault = false;
            else if (cbCur.ID == "cb_PropKO_Method2" && cbCur.Checked) g_PropKO_ProdDefault = true;
            else if (cbCur.ID == "cb_PropUnKO_Method1" && cbCur.Checked) g_PropUnKO_ProdDefault = false;
            else if (cbCur.ID == "cb_PropUnKO_Method2" && cbCur.Checked) g_PropUnKO_ProdDefault = true;
            else if (cbCur.ID == "cb_PropAU_Method1" && cbCur.Checked) g_PropAU_ProdDefault = false;
            else if (cbCur.ID == "cb_PropAU_Method2" && cbCur.Checked) g_PropAU_ProdDefault = true;
        }

        protected void Btn_CertPopulate_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_PropUnKO_CertFiles")
            {
                #region Auto-populate Prop Real Content and Gond

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_PropUnKeyedOffers"].Trim());
                string optionName = "Prop Real Content";

                if(this.cbPropGonD.Checked)
                    optionName = "Prop Games on Demand";
                   
                string certBugID = tb_PropUnKO_BugID.Text.Trim();
                
                EnvInfo envinfo = GetEnvInfo(rList_PropUnKO.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_PropUnKO.SelectedValue, optionName);
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropUnKO_Error))
                Btn_CertPopulate_Click_ProcessFiles(ref lb_PropUnKO, ref l_PropUnKO_Error, certBugID);
                if (l_PropUnKO_Error.Text != "")
                    return;

                PropManagerRequest.RequestInfo certRequest = GetRequestObjFromBug(ref l_PropUnKO_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_PropUnKO_Error.Text != "")
                {
                    btn_PropUnKO_DeselectAll.Enabled = true;
                    lb_PropUnKO.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Certification Stage")
                            dropList_PropUnKO_Certificate.SelectedIndex = dropList_PropUnKO_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_PropUnKO_Resolve.Text = skp.value;
                    }

                    dropList_PropUnKO.SelectedIndex = certRequest.psPriority;
                    tb_PropUnKO_DateTime.Text = certRequest.psPropDateTime;
                    tb_PropUnKO_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        btn_PropUnKO_DeselectAll.Enabled = false;
                        lb_PropUnKO.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_PropUnKO_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_PropKO_CertFiles")
            {
                #region Auto-populate Keyed Offer Request

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_PropKeyedOffers"].Trim());
                string optionName = "Prop LIVE Offer";
                string certBugID = tb_PropKO_BugID.Text.Trim();

                EnvInfo envinfo = GetEnvInfo(rList_PropKO.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_PropKO.SelectedValue, optionName);
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropKO_Error))
                Btn_CertPopulate_Click_ProcessFiles(ref lb_PropKO, ref l_PropKO_Error, certBugID);
                if (l_PropKO_Error.Text != "")
                    return;

                PropManagerRequest.RequestInfo certRequest = GetRequestObjFromBug(ref l_PropKO_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_PropKO_Error.Text != "")
                {
                    btn_PropKO_DeselectAll.Enabled = true;
                    lb_PropKO.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Certification Stage")
                            dropList_PropKO_Certificate.SelectedIndex = dropList_PropKO_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_PropKO_Resolve.Text = skp.value;
                    }

                    dropList_PropKO.SelectedIndex = certRequest.psPriority;
                    tb_PropKO_DateTime.Text = certRequest.psPropDateTime;
                    tb_PropKO_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        btn_PropKO_DeselectAll.Enabled = false;
                        lb_PropKO.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_PropKO_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_PropXLAST_CertFiles")
            {
                #region Auto-populate XLAST Request

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_PropXLAST"].Trim());
                string optionName = this.cbPropXLAST.Text; //"Prop XLAST";
                string certBugID = tb_PropXLAST_BugID.Text.Trim();

                EnvInfo envinfo = GetEnvInfo(rList_PropXLAST.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_PropXLAST.SelectedValue, optionName);
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName, configinfo.PreReqBug.EnvLabel,configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropXLAST_Error))
                   Btn_CertPopulate_Click_ProcessFiles(ref lb_PropXLAST, ref l_PropXLAST_Error, certBugID);
                if (l_PropXLAST_Error.Text != "")
                    return;

                PropManagerRequest.RequestInfo certRequest = GetRequestObjFromBug(ref l_PropXLAST_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_PropXLAST_Error.Text != "")
                {
                    lb_PropXLAST_VersionAdds.Enabled = true;
                    btn_PropXLAST_RemAllVersions.Enabled = true;
                    btn_PropXLAST_RemVersion.Enabled = true;
                    btn_PropXLAST_AddVersion.Enabled = true;
                    btn_PropXLAST_DeselectAll.Enabled = true;
                    lb_PropXLAST.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Xemid")
                            tb_PropXLAST_XemID.Text = skp.value;
                        if (skp.key == "Base Versions")
                        {
                            lb_PropXLAST_VersionAdds.Items.Clear();
                            string[] baseVerAry = skp.value.Split(',');
                            foreach (string baseVer in baseVerAry)
                            {
                                if (baseVer != "")
                                    lb_PropXLAST_VersionAdds.Items.Add(baseVer);
                            }
                        }
                        if (skp.key == "Certification Stage")
                            dropList_PropXLAST_Certificate.SelectedIndex = dropList_PropXLAST_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_PropXLAST_Resolve.Text = skp.value;
                    }

                    dropList_PropXLAST.SelectedIndex = certRequest.psPriority;
                    tb_PropXLAST_DateTime.Text = certRequest.psPropDateTime;
                    tb_PropXLAST_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        lb_PropXLAST_VersionAdds.Enabled = false;
                        btn_PropXLAST_RemAllVersions.Enabled = false;
                        btn_PropXLAST_RemVersion.Enabled = false;
                        btn_PropXLAST_AddVersion.Enabled = false;
                        btn_PropXLAST_DeselectAll.Enabled = false;
                        lb_PropXLAST.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_PropXLAST_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_PropMarket_CertFiles")
            {
                #region Auto-populate Marketplace Request

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_PropMarketplace"].Trim());
                string optionName = this.cbPropMarket.Text;//"Prop Marketplace";
                string certBugID = tb_PropMarket_BugID.Text.Trim();
                EnvInfo envinfo = GetEnvInfo(rList_PropMarket.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_PropMarket.SelectedValue, optionName);
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropMarket_Error))
                Btn_CertPopulate_Click_ProcessFiles(ref lb_PropMarket, ref l_PropMarket_Error, certBugID);
                if (l_PropMarket_Error.Text != "")
                    return;

                PropManagerRequest.RequestInfo certRequest = GetRequestObjFromBug(ref l_PropMarket_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_PropMarket_Error.Text != "")
                {
                    btn_PropMarket_DeselectAll.Enabled = true;
                    lb_PropMarket.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Certification Stage")
                            dropList_PropMarket_Certificate.SelectedIndex = dropList_PropMarket_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_PropMarket_Resolve.Text = skp.value;
                    }

                    dropList_PropMarket.SelectedIndex = certRequest.psPriority;
                    tb_PropMarket_DateTime.Text = certRequest.psPropDateTime;
                    tb_PropMarket_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        btn_PropMarket_DeselectAll.Enabled = false;
                        lb_PropMarket.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_PropMarket_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_PropAU_CertFiles")
            {
                #region Auto-populate Auto-update Request

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_PropAutoUpdate"].Trim());
                string optionName = this.cbPropAU.Text;//"Prop Auto-update as Selective";
                string certBugID = tb_PropAU_BugID.Text.Trim();

                EnvInfo envinfo = GetEnvInfo(rList_PropAU.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_PropAU.SelectedValue, optionName);
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_PropAU_Error))
                Btn_CertPopulate_Click_ProcessFiles(ref lb_PropAU, ref l_PropAU_Error, certBugID);
                if (l_PropAU_Error.Text != "")
                    return;

                PropManagerRequest.RequestInfo certRequest = GetRequestObjFromBug(ref l_PropAU_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_PropAU_Error.Text != "")
                {
                    rList_PropAU_VerType.Enabled = true;
                    tb_PropAU_Base.Enabled = true;
                    tb_PropAU_Update.Enabled = true;
                    tb_PropAU_TitleID.Enabled = true;
                    btn_PropAU_DeselectAll.Enabled = true;
                    lb_PropAU.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Xemid")
                            tb_PropAU_XemID.Text = skp.value;
                        if (skp.key == "SubID")
                            tb_PropAU_SubID.Text = skp.value;
                        if (skp.key == "Base Version")
                            tb_PropAU_Base.Text = skp.value;
                        if (skp.key == "Base Version Type")
                            rList_PropAU_VerType.SelectedIndex = rList_PropAU_VerType.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Update Version")
                            tb_PropAU_Update.Text = skp.value;
                        if (skp.key == "Console IDs")
                            tb_PropAU_Console.Text = skp.value;
                        if (skp.key == "Certification Stage")
                            dropList_PropAU_Certificate.SelectedIndex = dropList_PropAU_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_PropAU_Resolve.Text = skp.value;
                    }

                    tb_PropAU_TitleID.Text = certRequest.requestTitleID.Remove(0, 2);
                    dropList_PropAU.SelectedIndex = certRequest.psPriority;
                    tb_PropAU_DateTime.Text = certRequest.psPropDateTime;
                    tb_PropAU_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        rList_PropAU_VerType.Enabled = false;
                        tb_PropAU_Base.Enabled = false;
                        tb_PropAU_Update.Enabled = false;
                        tb_PropAU_TitleID.Enabled = false;
                        btn_PropAU_DeselectAll.Enabled = false;
                        lb_PropAU.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_PropAU_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_AddBaseVer_CertPopulate")
            {
                #region Auto-populate Add Base Version Request

                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_AddBaseVer"].Trim());
                string optionName = "Add Base Version(s)";
                string certBugID = tb_AddBaseVer_BugID.Text.Trim();

                EnvInfo envinfo = GetEnvInfo(rList_AddBaseVer.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_AddBaseVer.SelectedValue, optionName);
                PropManagerRequest.RequestInfo certRequest=new PropManagerRequest.RequestInfo();
                if (VerifyBugID(certBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_AddBaseVer_Error))
                    certRequest = GetRequestObjFromBug(ref l_AddBaseVer_Error, configinfo.PreReqBug.OptionType, configinfo.PreReqBug.EnvName, certBugID);
                if (l_AddBaseVer_Error.Text != "")
                {
                    tb_AddBaseVer_TitleID.Enabled = true;
                    lb_AddBaseVer_VersionAdds.Enabled = true;
                    btn_AddBaseVer_RemAllVersions.Enabled = true;
                    btn_AddBaseVer_RemVersion.Enabled = true;
                    btn_AddBaseVer_AddVersion.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in certRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Xemid")
                            tb_AddBaseVer_XemID.Text = skp.value;
                        if (skp.key == "SubID")
                            tb_AddBaseVer_SubID.Text = skp.value;
                        if (skp.key == "Base Versions")
                        {
                            lb_AddBaseVer_VersionAdds.Items.Clear();

                            string[] baseVerAry = skp.value.Split(',');
                            foreach (string baseVer in baseVerAry)
                            {
                                if (baseVer != "")
                                    lb_AddBaseVer_VersionAdds.Items.Add(baseVer);
                            }
                        }
                        if (skp.key == "Certification Stage")
                            dropList_AddBaseVer_Certificate.SelectedIndex = dropList_AddBaseVer_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_AddBaseVer_Resolve.Text = skp.value;
                    }

                    tb_AddBaseVer_TitleID.Text = certRequest.requestTitleID.Remove(0, 2);
                    dropList_AddBaseVer.SelectedIndex = certRequest.psPriority;
                    tb_AddBaseVer_DateTime.Text = certRequest.psPropDateTime;
                    tb_AddBaseVer_CCList.Text = certRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        tb_AddBaseVer_TitleID.Enabled = false;
                        lb_AddBaseVer_VersionAdds.Enabled = false;
                        btn_AddBaseVer_RemAllVersions.Enabled = false;
                        btn_AddBaseVer_RemVersion.Enabled = false;
                        btn_AddBaseVer_AddVersion.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_AddBaseVer_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + certBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
            else if (curBtn.ID == "btn_SwitchToGlobal_ProdPopulate")
            {
                #region Auto-populate Selective Auto-update to Global Request
                if (!cb_SwitchToGlobal_PubApproval.Checked)
                {
                    l_SwitchToGlobal_Error.Text += "<li>Publisher's approval has not been received. This request cannot be processed.</li>";
                    //problem = true;
                    return;
                }
                bool fieldsLocked = Convert.ToBoolean(ConfigurationSettings.AppSettings["populateFieldLock_AddBaseVer"].Trim());
                string optionName = this.cbSwitchToGlobal.Text;//"Switch Selective Auto-update to Global";
                string prodBugID = tb_SwitchToGlobal_BugID.Text.Trim();
                
                EnvInfo envinfo = GetEnvInfo(rList_SwitchToGlobal.SelectedValue);
                ConfigInfo configinfo = GetPreReqBugInfo(rList_SwitchToGlobal.SelectedValue, optionName);
                PropManagerRequest.RequestInfo prodRequest = new PropManagerRequest.RequestInfo();

                if (VerifyBugID(prodBugID, configinfo.PreReqBug.EnvName,configinfo.PreReqBug.EnvLabel, configinfo.PreReqBug.OptionType, "", configinfo.PreReqBug.Status, ref l_SwitchToGlobal_Error))
                     prodRequest = GetRequestObjFromBug(ref l_SwitchToGlobal_Error, configinfo.PreReqBug.OptionType,configinfo.PreReqBug.EnvName, prodBugID);
                if (l_SwitchToGlobal_Error.Text != "")
                {
                    tb_SwitchToGlobal_TitleID.Enabled = true;
                    tb_SwitchToGlobal_Base.Enabled = true;

                    rList_SwitchToGlobal_VerType.Enabled = true;
                    tb_SwitchToGlobal_Update.Enabled = true;
                    return;
                }

                try
                {
                    foreach (object obj in prodRequest.requestData)
                    {
                        SerializableKeyValuePair skp = (SerializableKeyValuePair)obj;

                        if (skp.key == "Xemid")
                            tb_SwitchToGlobal_XemID.Text = skp.value;
                        if (skp.key == "SubID")
                            tb_SwitchToGlobal_SubID.Text = skp.value;
                        if (skp.key == "Base Version")
                            tb_SwitchToGlobal_Base.Text = skp.value;
                        if (skp.key == "Base Version Type")
                            rList_SwitchToGlobal_VerType.SelectedIndex = rList_SwitchToGlobal_VerType.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Update Version")
                            tb_SwitchToGlobal_Update.Text = skp.value;
                        if (skp.key == "Certification Stage")
                            dropList_SwitchToGlobal_Certificate.SelectedIndex = dropList_SwitchToGlobal_Certificate.Items.IndexOf(new ListItem(skp.value, skp.value));
                        if (skp.key == "Resolve To")
                            tb_SwitchToGlobal_Resolve.Text = skp.value;
                    }

                    tb_SwitchToGlobal_TitleID.Text = prodRequest.requestTitleID.Remove(0, 2);
                    dropList_SwitchToGlobal.SelectedIndex = prodRequest.psPriority;
                    tb_SwitchToGlobal_DateTime.Text = prodRequest.psPropDateTime;

                    tb_SwitchToGlobal_CCList.Text = prodRequest.emailCCList;

                    if (fieldsLocked)
                    {
                        tb_SwitchToGlobal_TitleID.Enabled = false;
                        tb_SwitchToGlobal_Base.Enabled = false;
                        rList_SwitchToGlobal_VerType.Enabled = false;
                        tb_SwitchToGlobal_Update.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    l_SwitchToGlobal_Error.Text += "<li>Failed to auto-populate this request. Please fill out the fields manually for this request. Exception caught: " + ex.Message;
                    LogMessage("An error occurred while trying to auto-populate this '" + optionName + "' request from Bug ID #" + prodBugID + ". Exception caught: " + ex.Message);
                }

                #endregion
            }
        }
        protected void Btn_CertPopulate_Click_ProcessFiles(ref ListBox curLB, ref Label errLabel, string bugID)
        {
            bugID = bugID.Trim();

            if (bugID == "")
            {
                errLabel.Text = g_errText;
                errLabel.Text += "<li>Missing Bug ID.</li>";
                return;
            }
            else if (!IsFieldValid(bugID, "BugID"))
            {
                errLabel.Text = g_errText;
                errLabel.Text += "<li>Invalid Bug ID.</li>";
                return;
            }

            ArrayList files = GetAttachedFilenames(bugID);
            if (files == null)
            {
                errLabel.Text = g_errText;
                errLabel.Text += "<li>The bug either doesn't exist or isn't in required status or isn't in required Environment.</li>";
                return;
            }
            if (files.Count == 0)
            {
                errLabel.Text = g_errText;
                errLabel.Text += "<li>No files are attached the given bug! Make sure you have the correct one.</li>";
                return;
            }

            curLB.Items.Clear();

            ArrayList temp = new ArrayList(files);
            temp.Sort();
            for (int i = 0; i < files.Count; i++)
            {
                if (i > 0 && temp[i].ToString() == temp[i - 1].ToString())
                {
                    errLabel.Text = g_errText;
                    errLabel.Text += "<li>Files with identical names were detected in the bug; this bug is not supported.</li>";
                    curLB.Items.Clear();
                    break;
                }

                // .xml files are not supported (this is intended to prevent a request .xml from being on this list)
                // a ConsoleIDs.txt should not appear on the list as well, as this is generated by Prop Manager
                if (Path.GetExtension(files[i].ToString().ToLower()) != ".xml" && Path.GetFileName(files[i].ToString()) != "ConsoleIDs.txt")
                {
                    curLB.Items.Add(Path.GetFileName(files[i].ToString()));
                    curLB.Items[curLB.Items.Count - 1].Attributes.Add("title", files[i].ToString());
                    curLB.Items[curLB.Items.Count - 1].Selected = true;
                }
            }
        }
        
        protected PropManagerRequest.RequestInfo GetRequestObjFromBug(ref Label lError, string optionName, string env, string bugID)
        {
            PropManagerRequest.RequestInfo requestData = new PropManagerRequest.RequestInfo();

            if (bugID == "")
            {
                lError.Text = g_errText;
                lError.Text += "<li>Missing Bug ID.</li>";
                return requestData;
            }
            else if (!IsFieldValid(bugID, "BugID"))
            {
                lError.Text = g_errText;
                lError.Text += "<li>Invalid Bug ID.</li>";
                return requestData;
            }

            ProductStudio.Directory psDirectory = null;
            Product psProduct = null;
            Datastore psDataStore = null;

            if (!ConnectToProductStudio(ref psDirectory, ref psProduct, ref psDataStore))
            {
                lError.Text += "<li>Failed to connect to Product Studio. Please try again later.</li>";
                return requestData;
            }

            Bug myBug = (Bug)GetBug(psDataStore, g_psProductName, Convert.ToInt32(bugID));
            if (myBug == null)
            {
                lError.Text += "<li>The bug either doesn't exist, isn't closed, or isn't in required environment.</li>";
                return requestData;
            }

            myBug.Edit(PsItemEditActionEnum.psDatastoreItemEditActionReadOnly, "xoc", PsApplyRulesMask.psApplyRulesAll);
            if (myBug.Files.Count == 0)
            {
                lError.Text += "<li>This functionality is not compatible with the bug provided.</li>";
                return requestData;
            }

            ArrayList xmlFiles = new ArrayList();
            ListItem xmlFile = new ListItem();
            try
            {
                for (int i = 0; i < myBug.Files.Count; i++)
                {
                    if (Path.GetExtension(myBug.Files[i].FileName).ToLower() == ".xml")
                        xmlFiles.Add(new ListItem(myBug.Files[i].FileName, i.ToString()));
                }
                if (xmlFiles.Count > 0)
                {
                    xmlFile = (ListItem)xmlFiles[xmlFiles.Count - 1];
                    myBug.Files[Convert.ToInt32(xmlFile.Value)].SaveToFile(g_serializedTempPath + "\\" + Path.GetFileName(xmlFile.Text), false);
                }

                myBug.Save(true);
            }
            catch (Exception ex)
            {
                LogMessage("Unable to save bug and/or pull files from bug in function GetRequestObjFromBug(). " + ex.Message);
            }

            if (xmlFiles.Count == 0)
            {
                lError.Text += "<li>Field auto-population is not compatible with the bug provided. Please provide the form data manually.</li>";
                return requestData;
            }

            StreamReader sr = new StreamReader(g_serializedTempPath + "\\" + xmlFile.Text);
            string xmlStr = sr.ReadToEnd();
            sr.Close();

            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlStr));
            XmlSerializer serializer = new XmlSerializer(typeof(PropManagerRequest.RequestInfo), new Type[] { typeof(SerializableKeyValuePair) });
            requestData = (PropManagerRequest.RequestInfo)serializer.Deserialize(stream);

            try
            {
                if (requestData.requestVersion == null)
                    lError.Text += "<li>Field auto-population is not compatible with the bug provided. Please provide the form data manually.</li>";
                
                else if (!Regex.IsMatch(requestData.requestName, optionName, RegexOptions.IgnoreCase))
                {
                    if (!requestData.requestName.Trim().ToLower().Equals(optionName.Trim().ToLower()))
                    {
                        lError.Text += "<li>The bug provided does not match request types. Request types must match to perform field auto-population.</li>";
                    }
                }
            }
            catch (Exception ex)
            {
                lError.Text += "<li>Field auto-population is not compatible with the bug provided. Please provide the form data manually.</li>";
            }

            return requestData;
        }

        protected void LBSelect(object sender, EventArgs e)
        {
            Button btnCur = (Button)sender;

            if (btnCur.ID == "btn_PropXLAST_SelectAll") LBProcess(ref lb_PropXLAST, true);
            else if (btnCur.ID == "btn_PropXLAST_DeselectAll") LBProcess(ref lb_PropXLAST, false);
            else if (btnCur.ID == "btn_PropKO_SelectAll") LBProcess(ref lb_PropKO, true);
            else if (btnCur.ID == "btn_PropKO_DeselectAll") LBProcess(ref lb_PropKO, false);
            else if (btnCur.ID == "btn_PropUnKO_SelectAll") LBProcess(ref lb_PropUnKO, true);
            else if (btnCur.ID == "btn_PropUnKO_DeselectAll") LBProcess(ref lb_PropUnKO, false);
            else if (btnCur.ID == "btn_PropMarket_SelectAll") LBProcess(ref lb_PropMarket, true);
            else if (btnCur.ID == "btn_PropMarket_DeselectAll") LBProcess(ref lb_PropMarket, false);
            else if (btnCur.ID == "btn_PropAU_SelectAll") LBProcess(ref lb_PropAU, true);
            else if (btnCur.ID == "btn_PropAU_DeselectAll") LBProcess(ref lb_PropAU, false);
        }
        protected void LBProcess(ref ListBox curLB, bool selected)
        {
            for (int i = 0; i < curLB.Items.Count; i++)
            {
                curLB.Items[i].Selected = selected;
                curLB.Items[i].Attributes.Add("title", curLB.Items[i].Value);
            }
        }

        protected void rList_Environment_Clicked(object sender, EventArgs e)
        {
            RadioButtonList rListCur = (RadioButtonList)sender;

            EnvInfo envinfo=GetEnvInfo(rListCur.SelectedValue);
            

            if (rListCur.ID == "rList_PropXLAST")
            {
                if (envinfo.EnvType.ToUpper().Equals("PROD") && !g_fileDropToggle)
                {
                    btn_PropXLAST_AddVersion.Enabled = false;
                    btn_PropXLAST_RemAllVersions.Enabled = false;
                    btn_PropXLAST_RemVersion.Enabled = false;
                    lb_PropXLAST_VersionAdds.Enabled = false;
                }
                else if (!(envinfo.EnvType.ToUpper().Equals("PROD")))
                {
                    btn_PropXLAST_AddVersion.Enabled = true;
                    btn_PropXLAST_RemAllVersions.Enabled = true;
                    btn_PropXLAST_RemVersion.Enabled = true;
                    lb_PropXLAST_VersionAdds.Enabled = true;
                }
            }
            else if (rListCur.ID == "rList_PropAU")
            {
                if (envinfo.EnvType.ToUpper().Equals("PROD") && !g_fileDropToggle)
                {
                    tb_PropAU_TitleID.Enabled = false;
                    tb_PropAU_Base.Enabled = false;
                    tb_PropAU_Update.Enabled = false;
                    rList_PropAU_VerType.Enabled = false;
                }
                else if (!(envinfo.EnvType.ToUpper().Equals("PROD")))
                {
                    tb_PropAU_TitleID.Enabled = true;
                    tb_PropAU_Base.Enabled = true;
                    tb_PropAU_Update.Enabled = true;
                    rList_PropAU_VerType.Enabled = true;
                }
            }
            else if (rListCur.ID == "rList_AddBaseVer")
            {
                if (envinfo.EnvType.ToUpper().Equals("PROD") && !g_fileDropToggle)
                {
                    tb_AddBaseVer_TitleID.Enabled = false;
                    btn_AddBaseVer_AddVersion.Enabled = false;
                    btn_AddBaseVer_RemAllVersions.Enabled = false;
                    btn_AddBaseVer_RemVersion.Enabled = false;
                    lb_AddBaseVer_VersionAdds.Enabled = false;
                }
                else if (!(envinfo.EnvType.ToUpper().Equals("PROD")))
                {
                    tb_AddBaseVer_TitleID.Enabled = true;
                    btn_AddBaseVer_AddVersion.Enabled = true;
                    btn_AddBaseVer_RemAllVersions.Enabled = true;
                    btn_AddBaseVer_RemVersion.Enabled = true;
                    lb_AddBaseVer_VersionAdds.Enabled = true;
                }
            }
            else if (rListCur.ID == "rList_ConfigXLSP_Environment")
            {
                rList_Environment_Clicked_Process(ref rListCur, ref dList_ConfigXLSP_Modify_CertNames, rListCur.SelectedValue);
                rList_Environment_Clicked_Process(ref rListCur, ref dList_ConfigXLSP_Renew_CertNames, rListCur.SelectedValue);
                rList_Environment_Clicked_Process(ref rListCur, ref dList_ConfigXLSP_Modify_RemSvcids, rListCur.SelectedValue);
            }
            else if (rListCur.ID == "rList_WebSvc_Environment")
            {
                rList_Environment_Clicked_Process(ref rListCur, ref dList_WebSvc_Modify_CertNames, rListCur.SelectedValue);
                rList_Environment_Clicked_Process(ref rListCur, ref dList_WebSvc_Renew_CertNames, rListCur.SelectedValue);
            }
        }
        protected void rList_Environment_Clicked_Process(ref RadioButtonList rList, ref DropDownList dList, string envName)
        {
            string queryStr = "";
            string textField = "";
            string valueField = "";

            queryStr = "EXEC p_list_WebSvc_Certs " + g_environments[rList.SelectedValue];
            textField = "vc_subject_name";
            valueField = "i_partner_id";

            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            if (dList.ID == "dList_ConfigXLSP_Modify_RemSvcids")
            {
                if (this.cbConfigXLSPRemSvcids.Checked)
                {
                    bool problem = false;
                    if (rList_ConfigXLSP_Environment.SelectedIndex == -1)
                    {
                        l_ConfigXLSP_Error.Text += "<li>No 'Environment' selected. You must select a an environment before continuing.</li>";
                        problem = true;
                    }
                    else if (tb_ConfigXLSP_Modify_TitleID.Text == "")
                    {
                        l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                        problem = true;
                    }
                    else if (!IsFieldValid(tb_ConfigXLSP_Modify_TitleID.Text, "Hex32"))
                    {
                        l_ConfigXLSP_Error.Text += "<li>Invalid 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                        problem = true;
                    }
                    else if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))
                        problem = true;

                    if (problem)
                        l_ConfigXLSP_Error.Text = g_errText + l_ConfigXLSP_Error.Text;
                    else
                    {
                        dList_ConfigXLSP_Modify_RemSvcids.Items.Clear();
                        dList_ConfigXLSP_Modify_RemSvcids.Items.Add("--Select Service/Site ID Pair--");

                        try
                        {
                            if (g_myConnection.State != ConnectionState.Open)
                                g_myConnection.Open();

                            myCommand = new SqlCommand("EXEC p_get_service_instances " + g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString() + "," + "0x" + tb_ConfigXLSP_Modify_TitleID.Text, g_myConnection);
                            dr = myCommand.ExecuteReader();

                            while (dr.Read())
                            {
                                string curSvcID = dr["HexServiceID"].ToString();
                                string curSiteID = dr["SiteID"].ToString();

                                string curPair = curSvcID + " -> " + curSiteID;
                                dList_ConfigXLSP_Modify_RemSvcids.Items.Add(curPair);
                            }

                            dr.Close();
                            g_myConnection.Close();
                        }
                        catch (Exception ex)
                        {
                            if (g_myConnection != null) g_myConnection.Close();

                            LogMessage("Error: could not access the Title Verification DB");
                            FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                        }
                        finally
                        {
                            if (dr != null && !dr.IsClosed)
                                dr.Close();
                            if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                                g_myConnection.Close();
                        }
                    }
                }
            }
            else
            {

                try
                {
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    myCommand = new SqlCommand(queryStr, g_myConnection);
                    dr = myCommand.ExecuteReader();
                    dList.DataSource = dr;
                    dList.DataTextField = textField;
                    dList.DataValueField = valueField;
                    dList.DataBind();

                }
                catch (Exception ex)
                {
                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connecting to the Title Verification DB. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dr != null && !dr.IsClosed)
                        dr.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }

                if (dList.Items[0].Text != "--Select Certificate--")
                    dList.Items.Insert(0, "--Select Certificate--");
            }
        }

        protected void Tb_CertNetBug_OnTextChanged(object sender, EventArgs e)
        {
            TextBox tbCertBug = sender as TextBox;

            if (tbCertBug.ID == "tb_PropXLAST_BugID") lb_PropXLAST.Items.Clear();
            else if (tbCertBug.ID == "tb_PropUnKO_BugID") lb_PropUnKO.Items.Clear();
            else if (tbCertBug.ID == "tb_PropKO_BugID") lb_PropKO.Items.Clear();
            else if (tbCertBug.ID == "tb_PropMarket_BugID") lb_PropMarket.Items.Clear();
            else if (tbCertBug.ID == "tb_PropAU_BugID") lb_PropAU.Items.Clear();
        }

        protected void Tb_XLSP_Modify_OnTextChanged(object sender, EventArgs e)
        {
            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            TextBox curTB = (TextBox)sender;

            if (curTB.ID == "tb_ConfigXLSP_Modify_TitleID")
            {
                bool problem = false;
                if (rList_ConfigXLSP_Environment.SelectedIndex == -1)
                {
                    l_ConfigXLSP_Error.Text += "<li>No 'Environment' selected. You must select a an environment before continuing.</li>";
                    problem = true;
                }
                else if (tb_ConfigXLSP_Modify_TitleID.Text == "")
                {
                    l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                    problem = true;
                }
                else if (!IsFieldValid(tb_ConfigXLSP_Modify_TitleID.Text, "Hex32"))
                {
                    l_ConfigXLSP_Error.Text += "<li>Invalid 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                    problem = true;
                }
                else if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))
                    problem = true;
                else
                    l_ConfigXLSP_Modify_TitleName.Text = "<br><i>Title Name:</i><br /> <font color='green'><b>" + GetTitleName("0x" + tb_ConfigXLSP_Modify_TitleID.Text.Trim(), g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString()) + "</b></font><br />";

                if (problem)
                    l_ConfigXLSP_Error.Text = g_errText + l_ConfigXLSP_Error.Text;
                else if (this.cbConfigXLSPRemSvcids.Checked)
                {
                    dList_ConfigXLSP_Modify_RemSvcids.Items.Clear();
                    dList_ConfigXLSP_Modify_RemSvcids.Items.Add("--Select Service/Site ID Pair--");

                    try
                    {
                        if (g_myConnection.State != ConnectionState.Open)
                            g_myConnection.Open();

                        myCommand = new SqlCommand("EXEC p_get_service_instances " + g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString() + "," + "0x" + tb_ConfigXLSP_Modify_TitleID.Text, g_myConnection);
                        dr = myCommand.ExecuteReader();

                        while (dr.Read())
                        {
                            string curSvcID = dr["HexServiceID"].ToString();
                            string curSiteID = dr["SiteID"].ToString();

                            string curPair = curSvcID + " -> " + curSiteID;
                            dList_ConfigXLSP_Modify_RemSvcids.Items.Add(curPair);
                        }

                        dr.Close();
                        g_myConnection.Close();
                    }
                    catch (Exception ex)
                    {
                        if (g_myConnection != null) g_myConnection.Close();

                        LogMessage("Error: could not access the Title Verification DB");
                        FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                    }
                    finally
                    {
                        if (dr != null && !dr.IsClosed)
                            dr.Close();
                        if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                            g_myConnection.Close();
                    }
                }
            }
        }

        protected void BtnAddTitleID_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_WebSvc_New_AddTitleID") BtnAddTitleID_Click_Process(ref rList_WebSvc_Environment, ref tb_WebSvc_New_TitleID, ref g_tbDummy, ref lb_WebSvc_New_TitleIDs, ref l_WebSvc_Error);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddTitles_AddTitleID") BtnAddTitleID_Click_Process(ref rList_WebSvc_Environment, ref tb_WebSvc_Modify_AddTitles_TitleID, ref tb_WebSvc_Modify_AddTitles_CurrentTitles, ref lb_WebSvc_Modify_AddTitles_TitleIDs, ref l_WebSvc_Error);
        }
        protected void BtnAddTitleID_Click_Process(ref RadioButtonList rList, ref TextBox tbTitleID, ref TextBox tbCurTitleIDs, ref ListBox lbTitle, ref Label lError)
        {
            bool problem = false;
            tbTitleID.Text=tbTitleID.Text.Trim();

            if (rList.SelectedIndex == -1)
            {
                lError.Text += "<li>No 'Environment' selected.</li>";
                problem = true;
            }
            else if (tbTitleID.Text == "")
            {
                lError.Text += "<li>Missing 'Title ID'.</li>";
                problem = true;
            }
            else if (!IsFieldValid(tbTitleID.Text.Trim(), "Hex32"))
            {
                lError.Text += "<li>Invalid 'Title ID'. Make sure you have provided an 8 digit hex number.</li>";
                problem = true;
            }
            else if (tbCurTitleIDs != null && tbCurTitleIDs.Text.Contains(tbTitleID.Text.Trim()))
            {
                lError.Text += "<li>The 'Title ID' already exists with this certificate.</li>";
                problem = true;
            }
            else if (!VerifyEnvironment(g_environments[rList.SelectedValue].ToString(), tbTitleID.Text, ref g_lDummy))
            {
                lError.Text += "<li>The Title ID does not exist in the selected environment. You must wait for the title to be propped before submitting this request.</li>";
                problem = true;
            }

            if (problem)
                lError.Text = g_errText + lError.Text;
            else
            {
                string titleName = GetTitleName("0x" + tbTitleID.Text, g_environments[rList.SelectedValue].ToString());
                if (titleName != "")
                    titleName = " (" + titleName + ")";

                ListItem liTemp = new ListItem("0x" + tbTitleID.Text + titleName);
                if (lbTitle.Items.Contains(liTemp))
                    lError.Text = g_errText + "<li>Title '" + liTemp + "' has already been added to this request.</li>";
                else
                {
                    lbTitle.Items.Add(liTemp);
                    tbTitleID.Text = "";
                }
            }
        }

        protected void BtnRemTitleID_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_WebSvc_New_RemTitleID") BtnRemTitleID_Click_Process(ref lb_WebSvc_New_TitleIDs, false);
            else if (curBtn.ID == "btn_WebSvc_New_RemAllTitleIDs") BtnRemTitleID_Click_Process(ref lb_WebSvc_New_TitleIDs, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddTitles_RemTitleID") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_AddTitles_TitleIDs, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddTitles_RemAllTitleIDs") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_AddTitles_TitleIDs, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemTitles_RemTitleID") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_RemTitles_TitleIDs, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemTitles_RemAllTitleIDs") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_RemTitles_TitleIDs, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddIPs_RemIP") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_AddIPs_IPs, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddIPs_RemAllIPs") BtnRemTitleID_Click_Process(ref lb_WebSvc_Modify_AddIPs_IPs, true);
        }
        protected void BtnRemTitleID_Click_Process(ref ListBox lbTitleID, bool removeAll)
        {
            if (!removeAll) lbTitleID.Items.Remove(lbTitleID.SelectedItem);
            else lbTitleID.Items.Clear();
        }

        protected void BtnAddIP_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_WebSvc_Modify_AddIPs_AddIP") BtnAddIP_Click_Process(ref rList_WebSvc_Environment, ref tb_WebSvc_Modify_AddIPs_IP, ref tb_WebSvc_Modify_AddIPs_CurrentIPs, ref lb_WebSvc_Modify_AddIPs_IPs, ref l_WebSvc_Error);
        }
        protected void BtnAddIP_Click_Process(ref RadioButtonList rList, ref TextBox tbIP, ref TextBox tbCurIPs, ref ListBox lbIP, ref Label lError)
        {
            bool problem = false;
            tbIP.Text.Trim();

            if (rList.SelectedIndex == -1)
            {
                lError.Text += "<li>No 'Environment' selected.</li>";
                problem = true;
            }

            if (tbIP.Text == "")
            {
                lError.Text += "<li>Missing 'IP Address'.</li>";
                problem = true;
            }
            else if (!IsFieldValid(tbIP.Text, "IP"))
            {
                lError.Text += "<li>Invalid 'IP Address'.</li>";
                problem = true;
            }
            else if (tbCurIPs != null && tbCurIPs.Text.Contains(tbIP.Text))
            {
                lError.Text += "<li>The 'IP Address' already exists with this certificate.</li>";
                problem = true;
            }

            if (problem)
                lError.Text = g_errText + lError.Text;
            else
            {
                ListItem liTemp = new ListItem(tbIP.Text);
                if (lbIP.Items.Contains(liTemp))
                    lError.Text = g_errText + "<li>IP Address '" + liTemp + "' has already been added to this request.</li>";
                else
                {
                    lbIP.Items.Add(liTemp);
                    tbIP.Text = "";
                }
            }
        }

        protected void BtnAddAPI_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_WebSvc_Modify_AddAPIs_AddAPI") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_AddAPIs_AvailableAPIs, ref lb_WebSvc_Modify_AddAPIs_APIs, ref l_WebSvc_Error, "API");
            else if (curBtn.ID == "btn_WebSvc_Modify_RemAPIs_AddAPI") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_RemAPIs_AvailableAPIs, ref lb_WebSvc_Modify_RemAPIs_APIs, ref l_WebSvc_Error, "API");
            else if (curBtn.ID == "btn_WebSvc_Modify_RemTitles_AddTitleID") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_RemTitles_AvailableTitles, ref lb_WebSvc_Modify_RemTitles_TitleIDs, ref l_WebSvc_Error, "Title");
            else if (curBtn.ID == "btn_WebSvc_Modify_RemIPs_AddIP") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_RemIPs_AvailableIPs, ref lb_WebSvc_Modify_RemIPs_IPs, ref l_WebSvc_Error, "IP");
            else if (curBtn.ID == "btn_WebSvc_Modify_AddAPIs_AddPackage") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_AddAPIs_AvailablePackages, ref lb_WebSvc_Modify_AddAPIs_APIs, ref l_WebSvc_Error, "Package");
            else if (curBtn.ID == "btn_WebSvc_Modify_RemAPIs_AddPackage") BtnAddAPI_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_RemAPIs_AvailablePackages, ref lb_WebSvc_Modify_RemAPIs_APIs, ref l_WebSvc_Error, "Package");
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemSvcids_Add") BtnAddAPI_Click_Process(ref rList_ConfigXLSP_Environment, ref dList_ConfigXLSP_Modify_RemSvcids, ref lb_ConfigXLSP_Modify_RemSvcids, ref l_ConfigXLSP_Error, "Service/Site ID Pair");
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemIPs_AddIP") BtnAddAPI_Click_Process(ref rList_ConfigXLSP_Environment, ref dList_ConfigXLSP_Modify_RemIPs_AvailableIPs, ref lb_ConfigXLSP_Modify_RemIPs_IPs, ref l_ConfigXLSP_Error, "IP");
        }
        protected void BtnAddAPI_Click_Process(ref RadioButtonList rLIst, ref DropDownList dList, ref ListBox lbAPI, ref Label lError, string type)
        {
            if (dList.SelectedIndex == 0)
                lError.Text = g_errText + "<li>No '" + type + "' was selected!</li>";
            else
            {
                ListItem liTemp;

                if (type != "API" && type != "Package")
                    liTemp = new ListItem(dList.SelectedItem.Text, dList.SelectedValue);
                else
                    liTemp = new ListItem(dList.SelectedItem.Text + " (" + type + ")", dList.SelectedValue);

                if (lbAPI.Items.Contains(liTemp))
                    lError.Text = g_errText + "<li>The '" + type + "' has already been added to this request.</li>";
                else
                {
                    lbAPI.Items.Add(liTemp);

                    ListItem liNew = new ListItem(dList.SelectedItem.Text, dList.SelectedItem.Value);
                    dList.Items.Remove(liNew);
                    dList.SelectedIndex = 0;
                }
            }
        }

        protected void BtnRemAPI_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            DropDownList dListDummy = null;

            if (curBtn.ID == "btn_WebSvc_Modify_AddAPIs_RemAPI") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_AddAPIs_APIs, ref dList_WebSvc_Modify_AddAPIs_AvailableAPIs, ref dList_WebSvc_Modify_AddAPIs_AvailablePackages, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_AddAPIs_RemAllAPIs") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_AddAPIs_APIs, ref dList_WebSvc_Modify_AddAPIs_AvailableAPIs, ref dList_WebSvc_Modify_AddAPIs_AvailablePackages, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemAPIs_RemAPI") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemAPIs_APIs, ref dList_WebSvc_Modify_RemAPIs_AvailableAPIs, ref dList_WebSvc_Modify_RemAPIs_AvailablePackages, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemAPIs_RemAllAPIs") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemAPIs_APIs, ref dList_WebSvc_Modify_RemAPIs_AvailableAPIs, ref dList_WebSvc_Modify_RemAPIs_AvailablePackages, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemTitles_RemTitleID") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemTitles_TitleIDs, ref dList_WebSvc_Modify_RemTitles_AvailableTitles, ref dListDummy, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemTitles_RemAllTitleIDs") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemTitles_TitleIDs, ref dList_WebSvc_Modify_RemTitles_AvailableTitles, ref dListDummy, true);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemIPs_RemIP") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemIPs_IPs, ref dList_WebSvc_Modify_RemIPs_AvailableIPs, ref dListDummy, false);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemIPs_RemAllIPs") BtnRemAPI_Click_Process(ref lb_WebSvc_Modify_RemIPs_IPs, ref dList_WebSvc_Modify_RemIPs_AvailableIPs, ref dListDummy, true);
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemSvcids_Rem") BtnRemAPI_Click_Process(ref lb_ConfigXLSP_Modify_RemSvcids, ref dList_ConfigXLSP_Modify_RemSvcids, ref dListDummy, false);
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemSvcids_RemAll") BtnRemAPI_Click_Process(ref lb_ConfigXLSP_Modify_RemSvcids, ref dList_ConfigXLSP_Modify_RemSvcids, ref dListDummy, true);
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemIPs_RemIP") BtnRemAPI_Click_Process(ref lb_ConfigXLSP_Modify_RemIPs_IPs, ref dList_ConfigXLSP_Modify_RemIPs_AvailableIPs, ref dListDummy, false);
            else if (curBtn.ID == "btn_ConfigXLSP_Modify_RemIPs_RemAllIPs") BtnRemAPI_Click_Process(ref lb_ConfigXLSP_Modify_RemIPs_IPs, ref dList_ConfigXLSP_Modify_RemIPs_AvailableIPs, ref dListDummy, true);
        }
        protected void BtnRemAPI_Click_Process(ref ListBox lbAPI, ref DropDownList dListAPIs, ref DropDownList dListPackages, bool removeAll)
        {
            if (!removeAll)
            {
                if (lbAPI.SelectedItem != null)
                {
                    ListItem li = lbAPI.SelectedItem;
                    string[] aryStr = li.Text.Split('(');

                    ListItem liNew = new ListItem(aryStr[0].Trim(), li.Value);
                    if (aryStr.Length > 1 && aryStr[1] == "Package)")
                    {
                        if (dListPackages != null)
                        {
                            dListPackages.Items.Add(liNew);
                            dListPackages.SelectedIndex = 0;
                            lbAPI.Items.Remove(li);
                        }
                    }
                    else
                    {
                        dListAPIs.Items.Add(liNew);
                        dListAPIs.SelectedIndex = 0;
                        lbAPI.Items.Remove(li);
                    }
                }
            }
            else
            {
                foreach (ListItem li in lbAPI.Items)
                {
                    string[] aryStr = li.Text.Split('(');

                    ListItem liNew = new ListItem(aryStr[0].Trim(), li.Value);
                    if (aryStr.Length > 1 && aryStr[1] == "Package)")
                        dListPackages.Items.Add(liNew);
                    else
                        dListAPIs.Items.Add(liNew);
                }

                dListAPIs.SelectedIndex = 0;
                if (dListPackages != null)
                    dListPackages.SelectedIndex = 0;

                lbAPI.Items.Clear();
            }
        }

        protected void btn_WebSvc_Modify_ViewPackage_Click(object sender, EventArgs e)
        {
            Button curBtn = (Button)sender;

            if (curBtn.ID == "btn_WebSvc_Modify_AddAPIs_ViewPackage") btn_WebSvc_Modify_ViewPackage_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_AddAPIs_PackageList);
            else if (curBtn.ID == "btn_WebSvc_Modify_RemAPIs_ViewPackage") btn_WebSvc_Modify_ViewPackage_Click_Process(ref rList_WebSvc_Environment, ref dList_WebSvc_Modify_RemAPIs_PackageList);

        }
        protected void btn_WebSvc_Modify_ViewPackage_Click_Process(ref RadioButtonList rList, ref DropDownList dList)
        {
            string envVal = "";
            string packageVal = "";
            string packageName = "";

            if (dList.SelectedIndex != 0)
            {
                envVal = g_environments[rList.SelectedValue].ToString();
                packageVal = dList.SelectedValue;
                packageName = dList.SelectedItem.Text;

                this.lJScript.Text = "<script language=\"javascript\" type=\"text/javascript\">javascript:window.open('popup_package.aspx?env=" + envVal + "&package=" + packageVal + "&pname=" + packageName + "', '', 'width=800, height=600, scrollbars=1');</script>";
            }
        }

        protected void CheckBox_Changed(object sender, EventArgs e)
        {
            CheckBox curCb = (CheckBox)sender;

            bool problem = false;
            if (curCb.Checked && curCb.ID == "this.cbConfigXLSPRemSvcids")
            {
                if (rList_ConfigXLSP_Environment.SelectedIndex == -1)
                {
                    l_ConfigXLSP_Error.Text += "<li>No 'Environment' selected. You must select a an environment before continuing.</li>";
                    problem = true;
                }
                else if (tb_ConfigXLSP_Modify_TitleID.Text == "")
                {
                    l_ConfigXLSP_Error.Text += "<li>Missing 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                    problem = true;
                }
                else if (!IsFieldValid(tb_ConfigXLSP_Modify_TitleID.Text, "Hex32"))
                {
                    l_ConfigXLSP_Error.Text += "<li>Invalid 'Title ID'. You must enter a valid Title ID before continuing.</li>";
                    problem = true;
                }
                else if (!VerifyEnvironment(g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString(), tb_ConfigXLSP_Modify_TitleID.Text, ref l_ConfigXLSP_Error))
                    problem = true;
            }

            if (problem)
            {
                curCb.Checked = false;
                l_ConfigXLSP_Error.Text = g_errText + l_ConfigXLSP_Error.Text;
            }
            else if (curCb.Checked)
            {
                SqlCommand myCommand = null;
                SqlDataReader dr = null;

                dList_ConfigXLSP_Modify_RemSvcids.Items.Clear();
                dList_ConfigXLSP_Modify_RemSvcids.Items.Add("--Select Service/Site ID Pair--");

                try
                {
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    myCommand = new SqlCommand("EXEC p_get_service_instances " + g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString() + "," + "0x" + tb_ConfigXLSP_Modify_TitleID.Text, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    while (dr.Read())
                    {
                        string curSvcID = dr["HexServiceID"].ToString();
                        string curSiteID = dr["SiteID"].ToString();

                        string curPair = curSvcID + " -> " + curSiteID;
                        dList_ConfigXLSP_Modify_RemSvcids.Items.Add(curPair);
                    }

                    dr.Close();
                    g_myConnection.Close();
                }
                catch (Exception ex)
                {
                    if (g_myConnection != null) g_myConnection.Close();

                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dr != null && !dr.IsClosed)
                        dr.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }
            }
        }

        protected void CertificateSelection_IndexChanged(object sender, EventArgs e)
        {
            DropDownList curDList = (DropDownList)sender;

            if (curDList.ID == "dList_WebSvc_Modify_CertNames")
            {
                #region Populate Web Services

                lb_WebSvc_Modify_RemAPIs_APIs.Items.Clear();
                lb_WebSvc_Modify_RemIPs_IPs.Items.Clear();
                lb_WebSvc_Modify_RemTitles_TitleIDs.Items.Clear();

                string titleVerID_WebSvc = g_environments[rList_WebSvc_Environment.SelectedValue].ToString();

                SqlCommand myCommand = null;
                SqlDataReader dr = null;

                try
                {
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();

                    // pull titles based on an environment
                    myCommand = new SqlCommand("EXEC p_get_cert_titles " + titleVerID_WebSvc + "," + curDList.SelectedValue, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    tb_WebSvc_Modify_AddTitles_CurrentTitles.Text = "";
                    dList_WebSvc_Modify_RemTitles_AvailableTitles.Items.Clear();
                    if (!dr.HasRows)
                    {
                        tb_WebSvc_Modify_AddTitles_CurrentTitles.Text = "(No titles exist with this certificate)";
                        dList_WebSvc_Modify_RemTitles_AvailableTitles.Items.Add("(No titles exist with this certificate)");
                    }
                    else
                        dList_WebSvc_Modify_RemTitles_AvailableTitles.Items.Add("--Select Title--");

                    while (dr.Read())
                    {
                        string curTitle = dr["TitleName"].ToString();
                        string curTitleID = dr["TextTitleID"].ToString();

                        tb_WebSvc_Modify_AddTitles_CurrentTitles.Text += curTitleID + " (" + curTitle + ")\r\n";
                        dList_WebSvc_Modify_RemTitles_AvailableTitles.Items.Add(curTitleID + " (" + curTitle + ")");
                    }
                    dr.Close();


                    // pull ips based on an environment
                    myCommand = new SqlCommand("EXEC p_get_cert_ips " + titleVerID_WebSvc + "," + curDList.SelectedValue, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    dList_WebSvc_Modify_RemIPs_AvailableIPs.Items.Clear();
                    dList_WebSvc_Modify_RemIPs_AvailableIPs.Items.Add("--Select IP--");

                    tb_WebSvc_Modify_AddIPs_CurrentIPs.Text = "";
                    while (dr.Read())
                    {
                        string curIP = dr["IP"].ToString();
                        tb_WebSvc_Modify_AddIPs_CurrentIPs.Text += curIP + "\r\n";
                        dList_WebSvc_Modify_RemIPs_AvailableIPs.Items.Add(curIP);
                    }
                    dr.Close();


                    // pull apis based on a certificate
                    myCommand = new SqlCommand("EXEC p_get_cert_apis " + titleVerID_WebSvc + "," + curDList.SelectedValue, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    dList_WebSvc_Modify_RemAPIs_AvailableAPIs.Items.Clear();
                    dList_WebSvc_Modify_RemAPIs_AvailableAPIs.Items.Add("--Select API--");

                    tb_WebSvc_Modify_AddAPIs_CurrentAPIs.Text = "";
                    while (dr.Read())
                    {
                        string curAPI = dr["vc_api_name"].ToString();
                        tb_WebSvc_Modify_AddAPIs_CurrentAPIs.Text += curAPI + "\r\n";
                        dList_WebSvc_Modify_RemAPIs_AvailableAPIs.Items.Add(curAPI);
                    }
                    dr.Close();


                    // pull packages based on a certificate
                    myCommand = new SqlCommand("EXEC p_get_env_cert_packages " + titleVerID_WebSvc + "," + curDList.SelectedValue, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    tb_WebSvc_Modify_AddAPIs_CurrentPackages.Text = "";
                    dList_WebSvc_Modify_RemAPIs_AvailablePackages.Items.Clear();

                    if (!dr.HasRows)
                    {
                        tb_WebSvc_Modify_AddAPIs_CurrentPackages.Text = "(No packages exist with this certificate)";
                        dList_WebSvc_Modify_RemAPIs_AvailablePackages.Items.Add("(No packages exist with this certificate)");
                    }
                    else
                        dList_WebSvc_Modify_RemAPIs_AvailablePackages.Items.Add("--Select Package--");

                    while (dr.Read())
                    {
                        string curPackage = dr["vc_package_name"].ToString();
                        string curPackageID = dr["ti_ws_api_package_id"].ToString();

                        tb_WebSvc_Modify_AddAPIs_CurrentPackages.Text += curPackage + "\r\n";

                        ListItem li = new ListItem(curPackage, curPackageID);
                        dList_WebSvc_Modify_RemAPIs_AvailablePackages.Items.Add(li);
                    }
                    dr.Close();


                    // pull all packages based on an environment
                    myCommand = new SqlCommand("EXEC p_get_env_packages " + titleVerID_WebSvc, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    dList_WebSvc_Modify_AddAPIs_AvailablePackages.Items.Clear();
                    dList_WebSvc_Modify_AddAPIs_AvailablePackages.Items.Add("--Select Package--");

                    dList_WebSvc_Modify_AddAPIs_PackageList.Items.Clear();
                    dList_WebSvc_Modify_AddAPIs_PackageList.Items.Add("--Select Package--");

                    dList_WebSvc_Modify_RemAPIs_PackageList.Items.Clear();
                    dList_WebSvc_Modify_RemAPIs_PackageList.Items.Add("--Select Package--");

                    while (dr.Read())
                    {
                        string curPackage = dr["vc_package_name"].ToString();
                        string curPackageID = dr["ti_ws_api_package_id"].ToString();

                        ListItem li = new ListItem(curPackage, curPackageID);
                        if (!tb_WebSvc_Modify_AddAPIs_CurrentPackages.Text.Contains(li.Text + "\r\n"))
                            dList_WebSvc_Modify_AddAPIs_AvailablePackages.Items.Add(li);

                        dList_WebSvc_Modify_AddAPIs_PackageList.Items.Add(li);
                        dList_WebSvc_Modify_RemAPIs_PackageList.Items.Add(li);
                    }
                    dr.Close();


                    // pull all apis based on an environment
                    myCommand = new SqlCommand("EXEC p_get_env_apis " + titleVerID_WebSvc, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    dList_WebSvc_Modify_AddAPIs_AvailableAPIs.Items.Clear();
                    dList_WebSvc_Modify_AddAPIs_AvailableAPIs.Items.Add("--Select API--");

                    while (dr.Read())
                    {
                        string curAPI = dr["vc_api_name"].ToString();
                        if (!tb_WebSvc_Modify_AddAPIs_CurrentAPIs.Text.Contains(curAPI + "\r\n"))
                            dList_WebSvc_Modify_AddAPIs_AvailableAPIs.Items.Add(curAPI);
                    }
                    dr.Close();

                    g_myConnection.Close();
                }
                catch (Exception ex)
                {
                    if (g_myConnection != null) g_myConnection.Close();

                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dr != null && !dr.IsClosed)
                        dr.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }

                #endregion
            }
            if (curDList.ID == "dList_ConfigXLSP_Modify_CertNames")
            {
                #region Populate XLSP

                lb_ConfigXLSP_Modify_RemIPs_IPs.Items.Clear();
                string titleVerID_ConfigXLSP = g_environments[rList_ConfigXLSP_Environment.SelectedValue].ToString();

                SqlCommand myCommand = null;
                SqlDataReader dr = null;

                try
                {
                    if (g_myConnection.State != ConnectionState.Open)
                        g_myConnection.Open();
                    // pull ips based on an environment
                    myCommand = new SqlCommand("EXEC p_get_cert_ips " + titleVerID_ConfigXLSP + "," + curDList.SelectedValue, g_myConnection);
                    dr = myCommand.ExecuteReader();

                    dList_ConfigXLSP_Modify_RemIPs_AvailableIPs.Items.Clear();
                    dList_ConfigXLSP_Modify_RemIPs_AvailableIPs.Items.Add("--Select IP--");

                    while (dr.Read())
                    {
                        string curIP = dr["IP"].ToString();
                        dList_ConfigXLSP_Modify_RemIPs_AvailableIPs.Items.Add(curIP);
                    }
                    dr.Close();
                }
                catch (Exception ex)
                {
                    if (g_myConnection != null) g_myConnection.Close();

                    LogMessage("Error: could not access the Title Verification DB");
                    FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Formal Error: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
                }
                finally
                {
                    if (dr != null && !dr.IsClosed)
                        dr.Close();
                    if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                        g_myConnection.Close();
                }

                #endregion
            }
        }

        protected void ConfigEALSP_Env_IndexChanged(object sender, EventArgs e)
        {
            RadioButtonList curDList = (RadioButtonList)sender;

            SqlCommand myCommand = null;
            SqlDataReader dr = null;

            try
            {
                if (g_myConnection.State != ConnectionState.Open)
                    g_myConnection.Open();

                // pull titles based on an environment
                myCommand = new SqlCommand("EXEC p_get_ea_service_ids " + g_environments[curDList.SelectedItem.Text].ToString(), g_myConnection);
                dr = myCommand.ExecuteReader();

                dList_ConfigEALSP_SvcID1.Items.Clear();
                dList_ConfigEALSP_SvcID2.Items.Clear();
                dList_ConfigEALSP_SvcID3.Items.Clear();
                dList_ConfigEALSP_SvcID4.Items.Clear();

                dList_ConfigEALSP_SvcID1.Items.Add("-- Select Service ID -> Site ID --");
                dList_ConfigEALSP_SvcID2.Items.Add("-- Select Service ID -> Site ID --");
                dList_ConfigEALSP_SvcID3.Items.Add("-- Select Service ID -> Site ID --");
                dList_ConfigEALSP_SvcID4.Items.Add("-- Select Service ID -> Site ID --");

                while (dr.Read())
                {
                    string serviceID = dr["HexServiceID"].ToString();
                    string siteID = dr["SiteID"].ToString();
                    string decSiteID = HexToDec(siteID);

                    ListItem li = new ListItem(serviceID + " -> " + siteID + " (" + decSiteID + ")");
                    dList_ConfigEALSP_SvcID1.Items.Add(li);
                    dList_ConfigEALSP_SvcID2.Items.Add(li);
                    dList_ConfigEALSP_SvcID3.Items.Add(li);
                    dList_ConfigEALSP_SvcID4.Items.Add(li);
                }
                dr.Close();
            }
            catch (Exception ex)
            {
                if (dr != null && !dr.IsClosed)
                    dr.Close();
                if (g_myConnection != null && g_myConnection.State != ConnectionState.Closed)
                    g_myConnection.Close();

                LogMessage("Error: could not access the Title Verification DB. Exception thrown: " + ex.Message);
                FireEvent("Prop Manager encountered an error when connection to the Title Verification DB, which indicates it's down. Exception thrown: " + ex.Message, EVENTID_DB_TitleVer_Error, 1);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\addjob.cs ===
// 
// AddJob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// xqry Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;


namespace xonline.server.cron.fd 
{
    public class AddJob : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            AddJobCounters counters = new AddJobCounters();
            CronJob job;
            AddJobRequest req;
            AddJobResponse resp;
            
            HResult hr = HResult.S_OK;

            counters.StartRequest();

            CallSource.Check(VirtualInterface.cron_int);   
            
            req = new AddJobRequest();
            req.ReadFromRequest(ctx.Request);

            XRLUtil.VerifyParam(req.execCount == 1 || req.intervalSecs >= XOn.XONLINE_CRON_MIN_INTERVAL_SECS, "Interval must be more than XONLINE_CRON_MIN_INTERVAL_SECS!");
            
            job = new CronJob();
            job.Name = req.name;
            job.TitleId = req.titleId;
            job.AssemblyName = req.assembly;
            job.ClassName = req.className;
            job.ArgsXml = req.argsXml;
            job.NextExecTime = req.nextExec;
            job.ExecInterval = req.intervalSecs;
            job.ExecsRemaining = req.execCount;
            job.ExecTimeout = req.timeoutSecs;
            
            
            
            hr = job.SaveNew();
            
            resp = new AddJobResponse();
            if (HResult.Succeeded(hr))
            {
                resp.jobId = job.JobId;
            }
            else
            {
                resp.jobId = 0;
            }    
            
            CronDriver.CronStateChange();
            
            Xom.Log(XomAreaName.log, "ADD|" + 
                    hr + "|" + 
                    job.JobId + "|" +
                    job.Name + "|" + 
                    job.TitleId.ToString("x8") + "|" +
                    job.AssemblyName + "|" + 
                    job.ClassName + "|" + 
                    job.ArgsXml + "|" + 
                    job.NextExecTime + "|" + 
                    job.ExecInterval + "|" + 
                    job.ExecsRemaining + "|" + 
                    job.ExecTimeout);
            
            counters.EndRequest(HResult.Failed(hr));            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.InvalidService, hr, resp);
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
        
            
    }              
    
    
    public class AddJobCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            AddJobCountersCategory.Current.RequestsPerSecond.Increment();
            AddJobCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                AddJobCountersCategory.Current.FailuresPerSecond,
                AddJobCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            AddJobCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            AddJobCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                AddJobCountersCategory.Current.FailuresPerSecond.Increment();
                AddJobCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Cron FD: AddJob", "CRON: AddJob" )]
	public class AddJobCountersCategory : XomPerformanceCounterCategory
	{
        static public AddJobCountersCategory Current = new AddJobCountersCategory();
       
        // AddJob request counters

		[XomPerformanceCounterAttr(
			"AddJob requests/sec", 
			"AddJob requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"AddJob total", 
			"Total AddJob requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"AddJob failures/sec", 
			"Number of unsuccessful results returned by AddJob per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"AddJob total failures", 
			"Total number unsuccessful results returned by AddJob in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"Add avg. execution time", 
			"Add Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\cronapp.cs ===
using System;
using System.Web;
using System.Text;
using System.Data.SqlClient;
using System.Collections;
using System.IO;

using xonline.common.service;
using xonline.common.config;
using xonline.common.installer;
using xonline.common.mgmt;
using xonline.common.sql.sqlclient;

using xonline.server.cron.plugins.cronlib;


[assembly: XomIisInstallerAttribute( Interface.cron_int )]
[assembly: ConfigAttribute(Component.cron)]
[assembly: XomAreaDefinition(XomAreaName.log)]
[assembly: XomAreaDefinition(XomAreaName.crontrace)]

namespace xonline.server.cron.fd 
{
    public class CronApp : FrontEndApp
    {
        private static bool _isInitialized = false;       
        
        public override void Application_BeginRequest(object sender, EventArgs e)
        {
            base.Application_BeginRequest(sender, e);
            
            // we have to do initalization here instead of Application_Start, because
            // the former isn't yet impersonating the iis application's credentials. 
            // 
            if (_isInitialized == false)
            {
                lock(this)
                {
                    if (_isInitialized == false)                    
                    {
                        CronDriver.Start();
                        XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnControlRequest2);
                        _isInitialized = true;
                    }
                }
            }

        }

        
        public override void Application_End(object sender, EventArgs e)
        {
            CronDriver.Stop();
            base.Application_End(sender, e);
        }

        private static long _timeWarp = 0;
        
        public static DateTime UtcNow
        {
            get 
            {
                return DateTime.UtcNow.AddSeconds(_timeWarp);
            }
        }
        
        public static long TimeWarpAdjustment
        {
            get { return _timeWarp; }
            set { _timeWarp = value; }
        }

        // Reason the 2 is appended, is there is a default OnControlRequest defined in FrontEndApp
        public void OnControlRequest2(object sender, ControlRequestEventArgs args)
        {
            try
            {
                CronJob[] jobs;

                switch (args.Command)
                {
                    case "help":
                        XomControlConnection.SendMessage(
                            "Cron help:\r\n" +
                            "  command [pluginname] [argument0] .. [argumentN] -- Executes given command against the plugin\r\n" +
                            "\r\n",
                            args.RequestId
                        );

                        args.Handled = true;
                        break;
                    case "command":
                        jobs = CronJob.FindJobs(args.CommandArgs[0]);

                        if (jobs.Length == 0)
                        {
                            XomControlConnection.SendMessage(
                                  string.Format("No job with name [{0}] found!", args.CommandArgs[0]),
                                  args.RequestId
                              );
                        }
                        else
                        {
                            ICronJob cronJobObject = jobs[0].GetJobObject();
                            if (!(cronJobObject is ICronJobCommand))
                            {
                                XomControlConnection.SendMessage(
                                      string.Format("Type {0} is not of type ICronJobCommand!", jobs[0].ClassName),
                                      args.RequestId
                                  );
                            }
                            else
                            {
                                Hashtable argumentList = new Hashtable();
                                int i = 1;
                                while (i < args.CommandArgs.Length)
                                {
                                    argumentList[i] = args.CommandArgs[i];
                                    ++i;
                                }

                                StringBuilder result = new StringBuilder();

                                // Execute the command
                                // The args.RequestId is the Id used to send messages to XomControlConnection
                                ((ICronJobCommand)cronJobObject).Command(argumentList, result, args.RequestId);

                                // Return response to the user
                                XomControlConnection.SendMessage(
                                  result.ToString(),
                                  args.RequestId
                              );
                            }
                        }

                        args.Handled = true;
                        break;
                }
            }
            catch (Exception e)
            {
                HResult hr = XRLException.ToHResult(e, HResult.XONLINE_E_CATALOG_ERROR);
                XomControlConnection.SendMessage(
                    string.Format("Error: {0}, hr = {1}\r\n\r\n", e.ToString(), hr),
                    args.RequestId
                );
            }
        }        

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\command.cs ===
// 
// Command.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Online Service

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Text;
using System.Web;
using System.Collections;
using System.Reflection;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.server.cron.plugins.cronlib;

namespace xonline.server.cron.fd 
{
    public class Command : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            CommandCounters counters = new CommandCounters();
            counters.StartRequest();
            try
            {                
                ICronJobCommand jobCommand;
                HResult hr = HResult.S_OK;
               
                CallSource.Check(VirtualInterface.cron_int);

                // Move all of the query string commands into a hash table for processing
                Hashtable argumentList = new Hashtable();
                foreach (string key in ctx.Request.QueryString.AllKeys)
                {
                    argumentList[key] = ctx.Request[key];
                }

                jobCommand = GetJobCommandObject((string)argumentList["assembly"], (string)argumentList["classname"]);

                hr = jobCommand.Command(argumentList, ctx.Response);

                Xom.Log(XomAreaName.log, "Command|" +
                        hr + "|" +
                        ctx.Request.QueryString);

                counters.EndRequest(HResult.Failed(hr));
            }
            catch (Exception ex)
            {
                counters.EndRequest(HResult.Failed(HResult.E_FAIL));
                throw ex;
            }
        }
        
        /// <summary>
        /// Constructs a class object based on the passed in assembly and class 
        /// </summary>
        /// <param name="assemblyName">DLL to which contains your class</param>
        /// <param name="className">Class to load</param>
        /// <returns>Initialized ICronJobCommand</returns>
        ICronJobCommand GetJobCommandObject(string assemblyName, string className)
        {
            ICronJobCommand jobCommand;
            Assembly asm;
            object ob;

            if (assemblyName == null || className == null)
            {
                throw new Exception("no plugin class or assembly specified!\r\n");
            }

            // strip .dll off the name
            if (assemblyName.EndsWith(".dll"))
            {
                assemblyName = assemblyName.Substring(0, assemblyName.Length - 4);
            }

            // create the plugin class
            asm = Assembly.Load(assemblyName);
            XomLoggingControl.RegisterAssembly(asm);
            ob = asm.CreateInstance(className, false);
            if (ob == null)
            {
                throw new Exception("Type " + className + " not found in assembly " + assemblyName + "!");
            }
            if (!(ob is ICronJobCommand))
            {
                throw new Exception("Type " + className + " is not of type ICronJobCommand!");
            }

            jobCommand = (ICronJobCommand)ob;

            return jobCommand;

        }

        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
        
            
    }              
        
    public class CommandCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            CommandCountersCategory.Current.RequestsPerSecond.Increment();
            CommandCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                CommandCountersCategory.Current.FailuresPerSecond,
                CommandCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            CommandCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            CommandCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                CommandCountersCategory.Current.FailuresPerSecond.Increment();
                CommandCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }      
    
    [XomPerformanceCounterCategoryAttr( "Cron FD: Command", "CRON: Command" )]
    public class CommandCountersCategory : XomPerformanceCounterCategory
    {
        static public CommandCountersCategory Current = new CommandCountersCategory();
       
        // Command request counters

        [XomPerformanceCounterAttr(
            "Command requests/sec", 
            "Command requests per second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RequestsPerSecond;

        [XomPerformanceCounterAttr(
            "Command total", 
            "Total Command requests recorded in the the current AppDomain.", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
            "Command failures/sec", 
            "Number of unsuccessful results returned by Command per second in the current AppDomain.", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter FailuresPerSecond;

        [XomPerformanceCounterAttr(
            "Command total failures", 
            "Total number unsuccessful results returned by Command in the current AppDomain.",  
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
            "Add avg. execution time", 
            "Add Total requests failed", 
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AvgExecTime;
        
        [XomPerformanceCounterAttr(
            "Avg waiting time base", 
            "Avg waiting time base", 
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AvgExecTimeBase;

                
    }
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\CronDriver.cs ===
using System;
using System.Threading;
using System.Collections;
using System.Diagnostics;
using System.Security.Principal;
using System.Runtime.InteropServices;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;


namespace xonline.server.cron.fd
{
    public class CronDriver
    {

        public const int MAX_JOB_THREADS = 63;


        public static WindowsIdentity Id
        {
            get { return _id; }
            set { _id = value; }
        }

        private static WindowsIdentity _id;


        public static void Start()
        {
            Id = WindowsIdentity.GetCurrent();
            ThreadPool.QueueUserWorkItem(new WaitCallback(PumpFunc), Id);
        }

        public static void Stop()
        {
            _isStopped = true;
            CronDriver.CronStateChange();

            if (_timer != null)
            {
                _timer.Dispose();
                _timer = null;
            }
        }

        public static void CronStateChange()
        {
            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Registering state change..");

            _stateChangeEvent.Set();
            ResetPumpTimer(CronApp.UtcNow);
        }




        public static void PumpFunc(object o)
        {
            WindowsIdentity id = (WindowsIdentity)o;
            WindowsImpersonationContext impctx = null;
            CronJob job = new CronJob();
            DateTime nextRun = DateTime.UtcNow;
            int numJobs;
            WaitHandle[] events;
            int workerThreads;
            int ioPortThreads;
            int waitTerm;
            int completed;
            int i;


            lock(typeof(CronDriver))
            {
                if (true == _isExecuting)
                {
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_WARNING, "CronDriver is already executing on another thread.  Aborting..");
                    return;
                }

                _isExecuting = true;
            }



            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "++++++++" + DateTime.Now.ToString() + "++++++++" );
            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Cron Driver pump initiated" );
            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "" );

            try
            {
                impctx = StartImpersonation(id);

                ThreadPool.GetAvailableThreads(out workerThreads, out ioPortThreads);

                // make sure there are at least the configured number of threads open to
                // serve incoming requests
                //
                workerThreads -= Config.GetIntSetting(Setting.cron_requestThreads);
                workerThreads =  Math.Max(1, workerThreads);
                workerThreads =  Math.Min(workerThreads, MAX_JOB_THREADS);


                events = new WaitHandle[workerThreads + 1];

                for (i = 0; i < workerThreads; i++)
                {
                    events[i] = new ManualResetEvent(false);
                }

                events[workerThreads] = _stateChangeEvent;

                // job loop
                //
                numJobs = 0;
                completed = WaitHandle.WaitTimeout;
                nextRun = CronApp.UtcNow.AddMilliseconds(Config.GetIntSetting(Setting.cron_jobCheckInterval));

                int sleepTimeInMilliseconds = Config.GetIntSetting(Setting.cron_load_job_max_sleep_time_milliseconds);

                while (_isStopped == false)
                {
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Looking for jobs to execute..");

                    job = CronJob.LoadNext();
                    Random random = null;
                    while (job.RunNow && numJobs < workerThreads)
                    {
                        i = numJobs;

                        // if one of the previous jobs completed, use that index..
                        if (completed != WaitHandle.WaitTimeout && completed != workerThreads)
                        {
                            i = completed;
                            completed = WaitHandle.WaitTimeout;
                        }

                        Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Executing job " + job.JobId + " on thread " + i + " of " + events.Length);

                        // send the job to a worker thread..
                        JobContext jctx = new JobContext(job, (ManualResetEvent)events[i], id);
                        ThreadPool.QueueUserWorkItem(new WaitCallback(DoJob), jctx);

                        numJobs++;

                        if (_isStopped == true)
                        {
                            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Aborting job loop..");
                            goto end;
                        }

                        // PS 133263
                        // If one machine is slightly ahead of the others (as happens in StressNet2), 
                        // that Cron machine gets to do all the work of all the jobs. To avoid getting into this situation, 
                        // when the cron machine looks for the next job, it should wait a random number of milliseconds.
                        if (sleepTimeInMilliseconds > 0)
                        {
                            if (random == null)
                            {
                                random = new Random();
                            }
                            int randomDelayInMilliseconds = random.Next(sleepTimeInMilliseconds);
                            Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Sleeping "+ randomDelayInMilliseconds + " ms before loading next job ...");
                            Thread.Sleep(randomDelayInMilliseconds);
                        }
                        job = CronJob.LoadNext();
                    }

                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Done looking. Currently executing " + numJobs + " jobs.");

                    nextRun = job.NextExecTime;
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Next job is scheduled to run in " + nextRun.Subtract(CronApp.UtcNow).TotalMilliseconds + " ms. (at " + nextRun.ToString() + " UTC)");

                    if (CronApp.UtcNow.AddMilliseconds(Config.GetIntSetting(Setting.cron_jobCheckInterval)) < nextRun)
                    {
                        nextRun = CronApp.UtcNow.AddMilliseconds(Config.GetIntSetting(Setting.cron_jobCheckInterval));
                        Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Too far, checking in " + nextRun.Subtract(CronApp.UtcNow).TotalMilliseconds + " ms instead.");

                    }

                    if (numJobs == 0)
                    {
                        // no more jobs running
                        goto end;
                    }

                    // REVIEW: do we really want to do infinite here?  It would be bad if a job never completes..
                    waitTerm = Timeout.Infinite;
                    if (numJobs < events.Length - 1)
                    {
                        // check again when the next job should come up
                        waitTerm = (int)nextRun.Subtract(CronApp.UtcNow).TotalMilliseconds;
                        waitTerm = Math.Max(0, waitTerm);
                    }

                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Waiting " + waitTerm + " ms for a job to complete..");
                    completed = WaitHandle.WaitAny(events, waitTerm, false);


                    if (completed == WaitHandle.WaitTimeout)
                    {
                        Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Timeout waiting for a job to complete!");
                    }
                    else if (completed == workerThreads)
                    {
                        Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "A job state change was detected!");
                    }
                    else
                    {
                        // one of the existing jobs finished!
                        Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Job on thread " + completed + " completed.");

                        ((ManualResetEvent)events[completed]).Reset();
                        numJobs--;
                    }


                }

end:
                StopImpersonation(impctx);
            }
            catch(Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_UNEXPECTED_ERROR, e, "Failed to execute p_cron_get_next_job.");
            }
            finally
            {

                _isExecuting = false;

                // test for state change again, in case a job was added
                // since the most recent call to LoadNext()
                if (_stateChangeEvent.WaitOne(0, true) == true)
                {
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "A job state change was detected on the way out of PumpFunc! Resetting pump timer to 0.");
                    // reset to run again now
                    nextRun = CronApp.UtcNow;
                }



                ResetPumpTimer(nextRun);

                Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "Cron Driver pump complete.  Next run: " + nextRun );
                Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "+++++++++" + DateTime.Now.ToString() + "++++++++" );
                Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "" );
            }


        }

        public static void DoJob(object o)
        {
            JobContext jctx = (JobContext)o;
            WindowsImpersonationContext impctx = null;

            impctx = StartImpersonation(jctx.Id);

            jctx.Job.Execute();

            StopImpersonation(impctx);

            jctx.Event.Set();

        }



        public static void ResetPumpTimer(DateTime nextRunTime)
        {
            long ms = 0;

            try
            {
                if (_isStopped)
                {
                    return;
                }

                ms = (long)(nextRunTime.Subtract(CronApp.UtcNow).TotalMilliseconds);

                if (ms < 0)
                {
                    ms = 0;
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_WARNING, "ResetPumpTimer: Replacing past nextRunTime with Current Time" );
                }


                lock(typeof(CronDriver))
                {
                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "ResetPumpTimer: setting timer to activiate in " + ms + " milliseconds." );
                    if (_timer == null)
                    {
                        _timer = new Timer(new TimerCallback(PumpFunc), Id, ms, Timeout.Infinite);
                    }
                    else
                    {
                        _timer.Change(ms, Timeout.Infinite);
                    }

                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, "ResetPumpTimer: Timer set to activiate in " + ms + " milliseconds." );

                }
            }
            catch (Exception e)
            {
               Xom.NtEvent( XEvent.Id.CRON_UNEXPECTED_ERROR_1, e, "Failure to reset the cron timer!!!!! THIS SHOULD NEVER HAPPEN!");
            }
        }

        public static WindowsImpersonationContext StartImpersonation(WindowsIdentity id)
        {
            WindowsImpersonationContext impctx = null;

            try
            {
                if (id.IsSystem == false)
                {
                    // impersonate the thread that started this
                    impctx = id.Impersonate();
                }
            }
            catch(Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_CONFIG_FAILURE_2, e, "Failed to impersonate {0}.", id.Name);
            }

            return impctx;
        }

        public static void StopImpersonation(WindowsImpersonationContext impctx)
        {
            try
            {
                if (impctx != null)
                {
                    impctx.Undo();
                }

            }
            catch (Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_CONFIG_FAILURE_3, e, "Failure undoing impersonation.");
            }

        }


        private static Timer _timer = null;
        private static bool _isStopped = false;
        private static AutoResetEvent _stateChangeEvent = new AutoResetEvent(false);
        private static bool _isExecuting = false;

    }

    internal class JobContext
    {
        public JobContext(CronJob job, ManualResetEvent evt, WindowsIdentity id)
        {
            Id = id;
            Job = job;
            Event = evt;
        }

        public WindowsIdentity Id;
        public ManualResetEvent Event;
        public CronJob Job;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\WebServiceUtils\LoggingExtension.cs ===
using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;
using System.Reflection;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Apps.Web.WebServiceUtils
{
	/// <summary>
	/// Interface which can be implemented to add web method specific logging
	/// </summary>
	public interface WebMethodLogger
	{
		/// <summary>
		/// The method which is invoked for adding specific logging to this web method.
		/// It allows for logging of the input parameters.
		///
		/// The variable 'message' has several attributeas and methods which can be
		/// used for retrieving information to log:
		///
		/// - GetInParameterValue( int index )
		///
		/// </summary>
		void LogInput( SoapServerMessage message, StringBuilder stringBuilder, StringDictionary dictionary );

		/// <summary>
		/// The method which is invoked for adding specific logging to this web method.
		/// It allows for logging of the input parameters.
		///
		/// The variable 'message' has several attributeas and methods which can be
		/// used for retrieving information to log:
		///
		/// - GetOutParameterValue( int index )
		/// - GetReturnValue()
		///
		/// </summary>
		void LogOutput( SoapServerMessage message, StringBuilder stringBuilder, StringDictionary dictionary );
	}

	/// <summary>
	/// Adds logging of incoming and outgoing messages
	/// </summary>
	public class LoggingExtension : SoapExtension
	{
		private Stream m_oldStream;
		private Stream m_newStream;
		private StringDictionary		genericLogAttributes = null;
		private StringBuilder		    stringBuilder = null;

		private LoggingExtensionInitializer	loggingExtensionInitializer = null;
	
		/// <summary>
		/// Invoked multiple times with the message
		/// </summary>
		public override void ProcessMessage( SoapMessage message )
		{
			switch ( message.Stage )
			{
				// 'BeforeSerialize' - this is before the resultant object is serialized and returned
				// to the client. It is at this point that we log the method invocation and any user
				// specific logging.
			    case SoapMessageStage.BeforeSerialize:
					LogOutput( (SoapServerMessage)message );
            				break;

 				// 'AfterSerialize' - this is after the incoming Soap XMl has been converted into
 				// the input parameter types.
			    case SoapMessageStage.AfterDeserialize:
					LogInput( (SoapServerMessage)message );
            				break;

	       		case SoapMessageStage.AfterSerialize:
            		if ( loggingExtensionInitializer.LogOutgoingXml == true )
					{
						LogOutgoingSoapXml( message );
					}
            				break;

        		case SoapMessageStage.BeforeDeserialize:
					if ( loggingExtensionInitializer.LogIncomingXml == true )
					{
            					LogIncomingSoapXml( message );
					}
            				break;
			}
		}

		/// <summary>
		/// Required to make the class non abstract
		/// </summary>
		public override Object GetInitializer( Type type )
		{
			return GetType();
		}

		/// <summary>
		/// This method is called the first time this class is constructed for this particular web method.
		/// </summary>
		public override Object GetInitializer( LogicalMethodInfo info, SoapExtensionAttribute attribute )
		{
			LoggingExtensionAttribute loggingExtensionAttribute = (LoggingExtensionAttribute)attribute;
			LoggingExtensionInitializer initializer = new LoggingExtensionInitializer();

			// Get the type/name for this method:
			initializer.FullWebMethodName = info.MethodInfo.DeclaringType.FullName + "." + info.MethodInfo.Name;
			

			initializer.LogIncomingXml = loggingExtensionAttribute.LogIncomingXml;
			initializer.LogOutgoingXml = loggingExtensionAttribute.LogOutgoingXml;

			// Now, check for the name of a specfic logging class. If their is one, create an
			// instance of it
			Type type = null;
			if (( loggingExtensionAttribute.LogClassName != null ) && ( loggingExtensionAttribute.LogClassName != String.Empty ))
			{
				if (( loggingExtensionAttribute.LogClassAssemblyName != null ) && ( loggingExtensionAttribute.LogClassAssemblyName != String.Empty ))
				{
					Assembly assembly = null;
					try
					{
						assembly = Assembly.Load( loggingExtensionAttribute.LogClassAssemblyName );
					}
					catch ( Exception exception )
					{
                        Utils.Event.RaiseEvent("LoggingExtensionFailure", 
                                                    String.Format( "Unable to load specified assembly {0} for logging for web method {1}. Exception is: {2}",
												        loggingExtensionAttribute.LogClassAssemblyName,
												        initializer.FullWebMethodName,
												        exception ));
					}

					if ( assembly != null )
					{
						try
						{
							type = assembly.GetType( loggingExtensionAttribute.LogClassName );
						}
						catch ( Exception exception )
						{
                            Utils.Event.RaiseEvent("LoggingExtensionFailure", 
												    String.Format( "Unable to load type {0} from assembly assembly {1} for logging for web method {2}. Exception is: {3}",
													    loggingExtensionAttribute.LogClassName,
													    loggingExtensionAttribute.LogClassAssemblyName,
													    initializer.FullWebMethodName,
													    exception ));
						}
					}
				}
				else
				{
					try
					{
						type = Type.GetType( loggingExtensionAttribute.LogClassName );
					}
					catch ( Exception exception )
					{
                        Utils.Event.RaiseEvent("LoggingExtensionFailure", 
											String.Format( "Unable to load type {0} (no assembly specified) for logging for web method {1}. Exception is: {2}",
												loggingExtensionAttribute.LogClassName,
												initializer.FullWebMethodName,
												exception ));
					}
				}
			}

			if ( type != null )
			{
				// Make sure that the specified logging class implements the 'WebMethodLogger' interface
				if ( type.GetInterface( "WebMethodLogger" ) == null )
				{
                    Utils.Event.RaiseEvent("LoggingExtensionFailure", 
										String.Format( "The specified logging class {0} for method {1} does not implement the interface 'WebMethodLogger'. Defaulting to generic web method logging.",
											loggingExtensionAttribute.LogClassAssemblyName,
											initializer.FullWebMethodName ));
				}
				else
				{
                   	ConstructorInfo constructorInfo = type.GetConstructor(new Type[0]);
					if ( constructorInfo == null )
					{
                        Utils.Event.RaiseEvent("LoggingExtensionFailure", 
											String.Format( "Cannot find a default constructor for the specified logging class {0} for method {1}. Defaulting to generic web method logging.",
														loggingExtensionAttribute.LogClassName,
														initializer.FullWebMethodName ));
					}
					else
					{
						try
						{
                       					initializer.Logger = (WebMethodLogger)(constructorInfo.Invoke(new Object[0]));
						}
						catch ( Exception exception )
						{
                            Utils.Event.RaiseEvent("LoggingExtensionFailure", 
												String.Format( "Failed to construct an instance of the specified logging class {0} for method {1}. Defaulting to generic web method logging. Exception is {2}",
														loggingExtensionAttribute.LogClassName,
														initializer.FullWebMethodName,
														exception ));
						}
					}
				}
			}
			
			return initializer;
		}

		/// <summary>
		/// Every time an instance of this class is constructed, this method is called to init it.
		/// </summary>
		public override void Initialize( Object initializer )
		{
			loggingExtensionInitializer = (LoggingExtensionInitializer) initializer;
		}

		/// <summary>
		/// Chain Stream - used when logging the actual XML
		/// </summary>
		public override Stream ChainStream( Stream stream )
		{
			if (( loggingExtensionInitializer.LogIncomingXml == true ) || ( loggingExtensionInitializer.LogOutgoingXml == true ))
			{
				m_oldStream = stream;
				m_newStream = new MemoryStream();
				return m_newStream;
			}
			else
			{
				return stream;
			}
		}

		/// <summary>
		/// This method logs the incoming soap request xml before it is deserialized
		/// </summary>
		private void LogIncomingSoapXml( SoapMessage message )
		{
			Copy( m_oldStream, m_newStream);
			m_newStream.Position = 0;
			TextReader reader = new StreamReader( m_newStream );
            // TODO
            //UnifiedLogging.Log( IncomingSoapXmlLoggingId, reader.ReadToEnd() );
			System.Diagnostics.Trace.Write(String.Format( "Incoming SOAP Message: {0}", reader.ReadToEnd()));
			m_newStream.Position = 0;
		}
		
		/// <summary>
		/// This method logs the outgoing serialized soap xml
		/// </summary>
		private void LogOutgoingSoapXml( SoapMessage message )
		{
			m_newStream.Position = 0;
			TextReader reader = new StreamReader( m_newStream );
            // TODO
			//UnifiedLogging.Log( OutgoingSoapXmlLoggingId, reader.ReadToEnd() );
			System.Diagnostics.Trace.Write(String.Format( "Incoming SOAP Message: {0}", reader.ReadToEnd()));
            Utils.Event.RaiseEvent( "Web service informattion", String.Format( "Incoming SOAP Message: {0}", reader.ReadToEnd()) );
			m_newStream.Position = 0;
		        Copy( m_newStream, m_oldStream );
		}
		
		/// <summary>
		/// </summary>
		private void LogInput( SoapServerMessage message )
		{
			// We have a default dictionary for all attributs.
			genericLogAttributes = new StringDictionary();
			stringBuilder = new StringBuilder();

			foreach( SoapHeader header in message.Headers )
			{
                /**
				if ( header.GetType() == typeof( Microsoft.WindowsMedia.Services.Platform.Apps.Mds.Common.WMHeader ))
				{
					WMHeader wmHeader = (WMHeader)header;
					genericLogAttributes["clientType"] = wmHeader.ClientType;
					genericLogAttributes["clientVersion"] = wmHeader.ClientVersion;
					genericLogAttributes["locale"] = wmHeader.Locale;
					genericLogAttributes["countryCode"] = wmHeader.CountryCode;
					genericLogAttributes["oemName"] = wmHeader.OemName;
					genericLogAttributes["oemBetaString"] = wmHeader.OemBetaString;
					break;
				}
				***/
			}

			// Invoke the custom log method if their is one
			if ( loggingExtensionInitializer.Logger != null )
			{
				try
				{
					loggingExtensionInitializer.Logger.LogInput( message, stringBuilder, genericLogAttributes );
				}
				catch ( Exception exception )
				{
					Utils.Event.RaiseEvent("LoggingExtensionFailure", exception.ToString()); 
				}
			}
		}


		/// <summary>
		/// Invoked after the incoming message has been converted into
		/// the objects
		/// </summary>
		private void LogOutput( SoapServerMessage message )
		{
			// If an exception was thrown
			if ( message.Exception != null )
			{
				stringBuilder.Append( String.Format( "Exception: {0}", message.Exception.Message ));
			}
			else if ( loggingExtensionInitializer.Logger != null )
			{
				try
				{
					loggingExtensionInitializer.Logger.LogOutput( message, stringBuilder, genericLogAttributes );
				}
				catch ( Exception exception )
				{
					Utils.Event.RaiseEvent("LoggingExtensionFailure", exception.ToString()); 
				}
			}

			// Log a message
			// TODO
			//UnifiedLogging.Log( WebMethodLoggingId,
				//			String.Format( "{0}\n{1}", loggingExtensionInitializer.FullWebMethodName, stringBuilder.ToString()),
					//		genericLogAttributes );
		}

		
		/// <summary>
		/// Copies one stream to another ...
		/// </summary>
		private void Copy(Stream from, Stream to) 
		{
			TextReader reader = new StreamReader(from);
			TextWriter writer = new StreamWriter(to);
			writer.WriteLine(reader.ReadToEnd());
			writer.Flush();
		}
	}

	/// <summary>
	/// Need this class inorder to use the above class as an attribute
	/// </summary>
	[AttributeUsage (AttributeTargets.Method)]
	public class LoggingExtensionAttribute : SoapExtensionAttribute
	{
		int m_priority;
		Boolean logIncomingXml = false;
		Boolean logOutgoingXml = false;
		String logClassName = String.Empty;
		String logClassAssemblyName = String.Empty;

		/// <summary>
		/// Gets/Sets the priority
		/// </summary>
		public override int Priority
		{
			get { return m_priority; }
			set { m_priority = value; }
		}

		/// <summary>
		/// The type of the extension
		/// </summary>
		public override Type ExtensionType
		{
			get { return typeof(LoggingExtension); }
		}

		/// <summary>
		/// Determines whether incoming Xml messages are logged
		/// </summary>
		public Boolean LogIncomingXml
		{
			get { return logIncomingXml; }
			set { logIncomingXml = value; }
		}

		/// <summary>
		/// Determines whether outgoing Xml messages are logged
		/// </summary>
		public Boolean LogOutgoingXml
		{
			get { return logOutgoingXml; }
			set { logOutgoingXml = value; }
		}

		/// <summary>
		/// The name of the class to be used to log information specific to the interface
		/// for which this is defined
		/// </summary>
		public String LogClassName
		{
			get { return logClassName; }
			set { logClassName = value; }
		}

		/// <summary>
		/// The assembly name which hols the logging class.
		/// The format is the 'Long form'.
		/// </summary>
		public String LogClassAssemblyName
		{
			get { return logClassAssemblyName; }
			set { logClassAssemblyName = value; }
		}
	}

	internal class LoggingExtensionInitializer
	{
		private WebMethodLogger	logger;
		private String				fullWebMethodName;
		private Boolean			logIncomingXml = false;
		private Boolean			logOutgoingXml = false;
		

		public WebMethodLogger Logger
		{
			get { return logger; }
			set { logger = value; }
		}

		public String FullWebMethodName
		{
			get { return fullWebMethodName; }
			set { fullWebMethodName = value; }
		}

		public Boolean LogIncomingXml
		{
			get { return logIncomingXml; }
			set { logIncomingXml = value; }
		}

		public Boolean LogOutgoingXml
		{
			get { return logOutgoingXml; }
			set { logOutgoingXml = value; }
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\CronFastEspIngestionHealth.cs ===
using System;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Text;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Content.Config;

using xonline.common.health;
using xonline.common.config;

namespace xonline.server.cron.fd
{

    public class CronFastEspIngestionHealth : IHealthBlock
    {
        public CronFastEspIngestionHealth()
        {
            // leave this empty
        }

        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; } 
        }

        public void DoCheck(
            HealthBlockManager  blockManager, 
            NameValueCollection blockParams,
            HealthReport        report
        )
        {
            report.HealthStatus = HealthStatusEnum.Red;

            // Retrieve virtual interface information, construct connection string
            string[] ingestionIps = Config.GetMultiSetting(MultiSetting.fastEspMarketplaceIngestionIps);
            string collectionName = Config.GetSetting(Setting.catalogwatcher_fast_esp_collection_name);
            string ingestionPort = Config.GetSetting(Setting.catalogwatcher_fast_esp_ingestion_port);

            StringBuilder espContentDistributor = new StringBuilder();
            string noFirstComma = string.Empty;

            // Format of the content distributor is a comma seperated list of host:port values
            //      host1:port,host2:port,host3:port
            foreach (string ip in ingestionIps)
            {
                espContentDistributor.AppendFormat("{0}{1}:{2}", noFirstComma, ip, ingestionPort);
                noFirstComma = ",";
            }

            report.ExtendedReport = new CronFastEspIngestionHealthExtendedHealth()
                                        {
                                            ingestionIps = ingestionIps,
                                            collectionName = collectionName,
                                            ingestionPort = ingestionPort
                                        };

            try
            {
                IContentFactory _contentFactory = Factory.CreateContentFactory();
                IDocumentFeeder _documentFeeder = Factory.CreateDocumentFeeder(espContentDistributor.ToString(), collectionName);
                report.HealthStatus = HealthStatusEnum.Green;
            }
            catch (FactoryException fe)
            {
                report.ErrorDetails = fe.ToString();
            }
        }

        public class CronFastEspIngestionHealthExtendedHealth : IExtendedHealthReport
        {
            public string[] ingestionIps;
            public string collectionName;
            public string ingestionPort;            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\CronPluginHealthCheck.cs ===
//
// CronPluginHealthBlock.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Linq;

using xonline.common.health;
using xonline.common.plugins;
using xonline.server.cron.plugins.cronlib;

namespace xonline.server.cron.fd
{

    public class CronPluginHealthCheck : IHealthBlock
    {
        public CronPluginHealthCheck()
        {
            // leave this empty
        }

        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; } 
        }

        /// <summary>
        /// Loops through all plugins available, and performs a rollup health check for Cron
        /// </summary>
        public void DoCheck(
            HealthBlockManager  blockManager, 
            NameValueCollection blockParams,
            HealthReport        report
        )
        {
            // Default to green
            report.HealthStatus = HealthStatusEnum.Green;
            try
            {
                Hashtable allSharedHealthCronAssemblies = new Hashtable();
                CronJob job = new CronJob();
                int id = Int32.Parse(blockParams["jobId"]);
                job = CronJob.FindJobs(blockParams["Name"]).First(a => a.JobId == id);
                int sharedRun = Int32.Parse(blockParams["SharedRun"]);

                report.ExtendedReport = new CronPluginExtendedHealthReport() { Job = job };

                // If the job is disabled, then there is no reason to run the healthcheck, as the job will never run.
                // This is to prevent jobs for components that don't exist from attempting to run again.
                if (job.Enable == 0 && sharedRun == 0)
                {
                    if (String.IsNullOrEmpty(job.ErrorText))
                    {
                        report.HealthStatus = HealthStatusEnum.Yellow;
                        report.ErrorDetails = "Job has been DISABLED.  Please investigate to re-enable, or remove.";
                    }
                    else
                    {
                        report.HealthStatus = HealthStatusEnum.Red;
                        report.ErrorDetails = "Job has been DISABLED and requires manual enable in NPDB. Plugin error text at time of last execution:\r\n\r\n" + job.ErrorText;
                    }
                }
                else
                {
                    ICronJob obj = job.GetJobObject();
                    if (obj is IHealthBlock)
                    {
                        if (!obj.ShareHealthBlock || sharedRun == 1)
                        {
                            NameValueCollection coll = new NameValueCollection();
                            foreach (DictionaryEntry e in PluginUtil.XmlToHashtable(job.ArgsXml))
                            {
                                coll.Add(e.Key.ToString(), e.Value.ToString());
                            }

                            if (!String.IsNullOrEmpty(job.ErrorText))
                            {
                                if (!String.IsNullOrEmpty(job.ErrorText))
                                {
                                    coll.Add("ErrorText", job.ErrorText);
                                }                                
                            }
                            IHealthBlock healthPlugin = (IHealthBlock)obj;                          

                            healthPlugin.DoCheck(blockManager, coll, report);
                        }
                    }
                    else
                    {
                        if (!String.IsNullOrEmpty(job.ErrorText))
                        {
                            report.HealthStatus = HealthStatusEnum.Yellow;
                            report.ErrorDetails = "Plugin Failure at time of last execution:\r\n\r\n" + job.ErrorText;
                        }
                    }
                }

                
            }
            catch (Exception e)
            {
                report.HealthStatus = HealthStatusEnum.Red;
                report.ErrorDetails = e.ToString();
            }
        }

        public class CronPluginExtendedHealthReport : IExtendedHealthReport
        {
            public CronJob Job;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\CronInfoHealthBlock.cs ===
//
// CronInfoHealthBlock.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Collections;

using xonline.common.health;
using xonline.server.cron.plugins.cronlib;

namespace xonline.server.cron.fd
{

    public class CronInfoHealthBlock : IHealthBlock
    {
        public CronInfoHealthBlock()
        {
            // leave this empty
        }

        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; } 
        }

        public void DoCheck(
            HealthBlockManager  blockManager, 
            NameValueCollection blockParams,
            HealthReport        report
        )
        {
            report.HealthStatus = HealthStatusEnum.Green;            
            Dictionary<string, CronJob> allSharedHealthCronAssemblies = new Dictionary<string, CronJob>();
            try
            {
                // Retrieve all of the cron jobs from NPDB
                CronJob[] jobs = CronJob.FindJobs("%");

                // See that they are all in good standing
                foreach (CronJob job in jobs)
                {
                    string parms = "jobId=" + job.JobId;
                    parms = parms + ",Name=" + job.Name;
                    parms = parms + ",SharedRun=0";

                    blockManager.AddBlockToRun("CronPluginHealth_" + job.Name, typeof(CronPluginHealthCheck).FullName, parms, true);
                    ICronJob obj = job.GetJobObject();
                    if (obj is IHealthBlock && obj.ShareHealthBlock && !allSharedHealthCronAssemblies.ContainsKey(obj.GetType().ToString()))
                    {
                        allSharedHealthCronAssemblies.Add(obj.GetType().ToString(), job);
                    }
                }

                foreach(CronJob job in allSharedHealthCronAssemblies.Values)
                {
                    string parms = "jobId=" + job.JobId;
                    parms = parms + ",Name=" + job.Name;
                    parms = parms + ",SharedRun=1";

                    blockManager.AddBlockToRun(job.AssemblyName, typeof(CronPluginHealthCheck).FullName, parms, true);
                }
            }
            catch (Exception e)
            {
                report.HealthStatus = HealthStatusEnum.Red;
                report.ErrorDetails = e.ToString();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\findjobs.cs ===
// 
// FindJobs.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// cron Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;


namespace xonline.server.cron.fd 
{
    public class FindJobs : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            FindJobsCounters counters = new FindJobsCounters();
            FindJobsRequest req = null;
            FindJobsResponse resp = null;
            
            HResult hr = HResult.S_OK;

            counters.StartRequest();
            
            CallSource.Check(VirtualInterface.cron_int);   
            
            req = new FindJobsRequest();
            req.ReadFromRequest(ctx.Request);
            
            CronJob[] jobs = CronJob.FindJobs(req.search);
            
            resp = new FindJobsResponse();
            resp.jobs = new CronJobWire[jobs.Length];
            for (int i = 0; i < jobs.Length; i++)
            {
                resp.jobs[i] = new CronJobWire();
                jobs[i].CopyTo(resp.jobs[i]);
            }
            
            
            Xom.Log(XomAreaName.log, "FND|" + hr + "|" + req.search + "|" + resp.jobs.Length);
            
            counters.EndRequest(HResult.Failed(hr));            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.InvalidService, hr, resp);
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
        
            
    }              
    
    
    public class FindJobsCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            FindJobsCountersCategory.Current.RequestsPerSecond.Increment();
            FindJobsCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                FindJobsCountersCategory.Current.FailuresPerSecond,
                FindJobsCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            FindJobsCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            FindJobsCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                FindJobsCountersCategory.Current.FailuresPerSecond.Increment();
                FindJobsCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Cron FD: FindJobs", "CRON: FindJobs" )]
	public class FindJobsCountersCategory : XomPerformanceCounterCategory
	{
        static public FindJobsCountersCategory Current = new FindJobsCountersCategory();
       
        // FindJobs request counters

		[XomPerformanceCounterAttr(
			"FindJobs requests/sec", 
			"FindJobs requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"FindJobs total", 
			"Total FindJobs requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"FindJobs failures/sec", 
			"Number of unsuccessful results returned by FindJobs per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"FindJobs total failures", 
			"Total number unsuccessful results returned by FindJobs in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"Add avg. execution time", 
			"Add Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\getjob.cs ===
// 
// GetJob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// xqry Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;


namespace xonline.server.cron.fd 
{
    public class GetJob : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            GetJobCounters counters = new GetJobCounters();
            CronJob job = null;
            GetJobRequest req = null;
            GetJobResponse resp = null;
            
            HResult hr = HResult.S_OK;

            counters.StartRequest();
            
            CallSource.Check(VirtualInterface.cron_int);   
            
            req = new GetJobRequest();
            req.ReadFromRequest(ctx.Request);
            
            job = new CronJob();
            hr = job.Load(req.jobId);
            
            if (HResult.Succeeded(hr))
            {
                resp = new GetJobResponse();
                resp.name = job.Name;
                resp.titleId = job.TitleId;
                resp.assembly = job.AssemblyName;
                resp.className = job.ClassName;
                resp.argsXml = job.ArgsXml;
                resp.nextExec = job.NextExecTime;
                resp.intervalSecs = job.ExecInterval;
                resp.execCount = job.ExecsRemaining;
                resp.timeoutSecs = job.ExecTimeout;
            }
            
            Xom.Log(XomAreaName.log, "GET|" + hr + "|" + job.JobId);
            
            counters.EndRequest(HResult.Failed(hr));            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.InvalidService, hr, resp);
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
        
            
    }              
    
    
    public class GetJobCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetJobCountersCategory.Current.RequestsPerSecond.Increment();
            GetJobCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetJobCountersCategory.Current.FailuresPerSecond,
                GetJobCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetJobCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetJobCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetJobCountersCategory.Current.FailuresPerSecond.Increment();
                GetJobCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Cron FD: GetJob", "CRON: GetJob" )]
	public class GetJobCountersCategory : XomPerformanceCounterCategory
	{
        static public GetJobCountersCategory Current = new GetJobCountersCategory();
       
        // GetJob request counters

		[XomPerformanceCounterAttr(
			"GetJob requests/sec", 
			"GetJob requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetJob total", 
			"Total GetJob requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetJob failures/sec", 
			"Number of unsuccessful results returned by GetJob per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetJob total failures", 
			"Total number unsuccessful results returned by GetJob in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"Add avg. execution time", 
			"Add Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\timewarp.cs ===
// 
// TimeWarp.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// cron Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Diagnostics;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;


namespace xonline.server.cron.fd 
{
    public class TimeWarp : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
  // Natalyp: the line is commented out TimeWarpRequest req = new TimeWarpRequest();
            CronTimeWarpRequest req = new CronTimeWarpRequest();   // Natalyp: the line is added

            //
            // Ensure this is a datacenter-only call
            //
            CallSource.Check(VirtualInterface.cron_int);   

                        
            // read request header
            //
            req.ReadFromRequest(ctx.Request);
            
            CronApp.TimeWarpAdjustment = req.offsetSeconds;
            
            // kick off the cron driver to pick up this new job
            CronDriver.CronStateChange();

            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.Cron, HResult.S_OK);
            
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
            
    }              
    
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CatalogWatcherPlugin\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CatalogWatcherPlugin\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\CronJob.cs ===
using System;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Reflection;
using System.Data.SqlTypes;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.server.cron.plugins.cronlib;

namespace xonline.server.cron.fd
{
    public class CronJob
    {
        public static CronJob LoadNext()
        {
            CronJob job = new CronJob();

            try
            {
                using (SqlClient sc = new SqlClient(Interface.npdb))
                {
                    sc.StoredProc = "dbo.p_cron_get_next_job";
                    sc.AddParameter("@dt_time", CronApp.UtcNow);
                    sc.AddParameter("@vc_frontdoor", Environment.MachineName);

                    using (SqlDataReader reader = sc.Execute())
                    {
                        if (reader.Read())
                        {
                            job.JobId        = reader.GetInt32(0);
                            job.NextExecTime = (DateTime)reader.GetSqlDateTime(1);
                            job.RunNow       = (job.JobId != 0);

                            if (job.RunNow)
                            {
                                job.TitleId        = (uint)reader.GetInt32(2);
                                job.AssemblyName   = reader.GetString(3);
                                job.ClassName      = reader.GetString(4);
                                job.ArgsXml        = reader.IsDBNull(5) ? null : reader.GetString(5);
                                job.ExecsRemaining = (uint)reader.GetInt32(6);
                                job.ExecInterval   = (uint)reader.GetInt32(7);
                                job.ExecTimeout    = (uint)reader.GetInt32(8);
                                job.Enable         = reader.GetByte(9);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_DB_FAILURE, e, "Failed to execute p_cron_get_next_job.");
            }

            return job;
        }

        public static CronJob[] FindJobs(string search)
        {
            List<CronJob> cronJobList = new List<CronJob>();

            using (SqlClient sc = new SqlClient(Interface.npdb))
            {
                sc.StoredProc = "dbo.p_cron_find_jobs";
                sc.AddParameter("@vc_search", search);

                using (SqlDataReader reader = sc.Execute())
                {
                    while (reader.Read())
                    {
                        CronJob job        = new CronJob();

                        job.JobId          = reader.GetInt32(reader.GetOrdinal("i_job_id"));
                        job.NextExecTime   = (DateTime)reader.GetSqlDateTime(reader.GetOrdinal("dt_exec_next_scheduled"));
                        job.TitleId        = (uint)reader.GetInt32(reader.GetOrdinal("i_title_id"));
                        job.Name           = reader.GetString(reader.GetOrdinal("vc_name"));
                        job.AssemblyName   = reader.GetString(reader.GetOrdinal("vc_assembly"));
                        job.ClassName      = reader.GetString(reader.GetOrdinal("vc_class"));
                        job.ArgsXml        = reader.IsDBNull(reader.GetOrdinal("txt_args")) ? null : reader.GetString(reader.GetOrdinal("txt_args"));
                        job.ExecsRemaining = (uint)reader.GetInt32(reader.GetOrdinal("i_exec_count"));
                        job.ExecInterval   = (uint)reader.GetInt32(reader.GetOrdinal("i_exec_interval_secs"));
                        job.ExecTimeout    = (uint)reader.GetInt32(reader.GetOrdinal("i_exec_timeout"));
                        job.ExecFrontdoor  = reader.GetString(reader.GetOrdinal("vc_exec_frontdoor"));
                        job.Enable         = reader.GetByte(reader.GetOrdinal("b_enabled"));
                        job.ErrorText      = reader.GetString(reader.GetOrdinal("vc_error_text"));

                        cronJobList.Add(job);
                    }
                }
            }

            if ( cronJobList.Count == 0 )
            {
                throw new XRLException(HResult.XONLINE_E_DATABASE_RESULT_ERROR, XEvent.Id.CRON_DB_FAILURE_1,
                    "CronJob.FindJobs: unexpected lack of results from p_cron_find_jobs. No jobs were returned!");
            }

            return cronJobList.ToArray();
        }

        public CronJob()
        {
            ResetJob();
        }

        public int JobId
        {
            get { return _jobId; }
            set { _jobId = value; }
        }

        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public uint TitleId
        {
            get { return _titleId; }
            set { _titleId = value; }
        }

        public string AssemblyName
        {
            get { return _assemblyName; }
            set { _assemblyName = value; }
        }

        public string ClassName
        {
            get { return _className; }
            set { _className = value; }
        }

        public string ArgsXml
        {
            get { return _argsXml; }
            set { _argsXml = value; }
        }

        public uint ExecsRemaining
        {
            get { return _execsRemaining; }
            set { _execsRemaining = value; }
        }

        public byte Enable
        {
            get { return _enable; }
            set { _enable = value; }
        }

        public DateTime NextExecTime
        {
            get { return _nextExecTime; }
            set { _nextExecTime = value; }
        }

        public uint ExecInterval
        {
            get { return _execInterval; }
            set { _execInterval = value; }
        }

        public uint ExecTimeout
        {
            get { return _execTimeout; }
            set { _execTimeout = value; }
        }

        public string ExecFrontdoor
        {
            get { return _execFrontdoor; }
            set { _execFrontdoor = value; }
        }


        public string ErrorText
        {
            get { return _errorText; }
            set { _errorText = value; }
        }

        public bool RunNow
        {
            get { return _runNow; }
            set { _runNow = value; }
        }

        /// <summary>
        /// A constant value for 'ExecsRemaining' - if it is set to this value,
        /// then the job should be run infinately and the executino count never
        /// decremented.
        /// = 2,147,483,647
        /// </summary>
        public static readonly UInt32 ExecInfinitely = (UInt32)(Int32.MaxValue);

        public HResult Load(int jobId)
        {
            HResult hr = HResult.XONLINE_E_INVALID_REQUEST;

            ResetJob();

            try
            {
                using (SqlClient sc = new SqlClient(Interface.npdb))
                {
                    sc.StoredProc = "dbo.p_cron_load_job";
                    sc.AddParameter("@i_job_id", jobId);

                    using (SqlDataReader reader = sc.Execute())
                    {
                        if (reader.Read())
                        {
                            hr = HResult.S_OK;

                            _jobId        = jobId;
                            _nextExecTime = (DateTime)reader.GetSqlDateTime(0);
                            _titleId        = (uint)reader.GetInt32(1);
                            _name           = reader.GetString(2);
                            _assemblyName   = reader.GetString(3);
                            _className      = reader.GetString(4);
                            _argsXml        = reader.IsDBNull(5) ? null : reader.GetString(5);
                            _execsRemaining = (uint)reader.GetInt32(6);
                            _execInterval   = (uint)reader.GetInt32(7);
                            _execTimeout    = (uint)reader.GetInt32(8);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                hr = XRLException.ToHResult(e, HResult.XONLINE_E_DATABASE_ERROR);
                throw new XRLException(hr, XEvent.Id.CRON_DB_FAILURE_4, "Failed to execute p_cron_load_job(" + jobId + ")\r\n", e);
            }

            return hr;
        }



        public HResult SaveNew()
        {
            HResult hr = HResult.S_OK;

            SqlConnection cxn = null;
            SqlCommand cmd = null;
            SqlParameter param = null;


            try
            {
                // make sure we can instantiate the provided class
                // this will throw if the class or assembly dosent exist
                GetJobObject();
            }
            catch(Exception e)
            {
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.CRON_CONFIG_FAILURE_4, "Failed to create class " + ClassName + " in assembly " + AssemblyName + ".  Does the assembly exist in the cron service bin directory?", e);
            }


            try
            {
                IInterfaceInfo npdbInterface = Config.GetInterface(Config.GetServerListByInterface(Interface.npdb)[0], Interface.npdb);
                cxn = new SqlConnection(npdbInterface.SqlConnectionString);
                cxn.Open();

                cmd = new SqlCommand("p_cron_add_job", cxn);
                cmd.CommandType = CommandType.StoredProcedure;

                param = new SqlParameter();
                param.ParameterName = "@vc_name";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.String;
                param.Value = _name;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@i_title_id";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Int32;
                param.Value = (int)_titleId;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@vc_assembly";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.String;
                param.Value = _assemblyName;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@vc_class";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.String;
                param.Value = _className;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@txt_args";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.String;
                param.Value = (_argsXml == null ? DBNull.Value : (object)_argsXml);
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@dt_exec_next";
                param.Direction = ParameterDirection.Input;
                param.SqlDbType = SqlDbType.DateTime;
                param.Value = (SqlDateTime)_nextExecTime;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@i_interval_secs";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Int32;
                param.Value = (int)_execInterval;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@i_exec_count";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Int32;
                param.Value = (int)_execsRemaining;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@i_exec_timeout";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Int32;
                param.Value = (int)_execTimeout;
                cmd.Parameters.Add(param);

                param = new SqlParameter();
                param.ParameterName = "@i_job_id";
                param.Direction = ParameterDirection.Output;
                param.DbType = DbType.Int32;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                _jobId = (int)cmd.Parameters["@i_job_id"].Value;
            }
            catch(Exception e)
            {
                hr = XRLException.ToHResult(e, HResult.XONLINE_E_DATABASE_ERROR);
                throw new XRLException(hr, XEvent.Id.CRON_DB_FAILURE_5, "Failed to execute p_cron_add_job!\r\n-------\r\n" + GetJobInfoString(), e);
            }
            finally
            {
                if (cmd != null)    cmd.Cancel();
                if (cxn != null)    cxn.Close();
            }

            return hr;

        }


        void Update()
        {
            byte currentEnabledStatus = _enable;
            try
            {
                using (SqlClient sc = new SqlClient(Interface.npdb))
                {
                    sc.StoredProc = "dbo.p_cron_load_job";
                    sc.AddParameter("@i_job_id", _jobId);

                    using (SqlDataReader reader = sc.Execute())
                    {
                        if (reader.Read())
                        {
                            currentEnabledStatus = reader.GetByte(reader.GetOrdinal("b_enabled"));
                        }
                    }
                }

                // If disabled, leave disabled
                if (currentEnabledStatus == 0)
                {
                    _enable = 0;
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.CRON_DB_FAILURE_6, e, "Failed to execute p_cron_load_job, {0}", GetJobInfoString());
            }

            try
            {
                using (SqlClient sc = new SqlClient(Interface.npdb))
                {
                    sc.StoredProc = "dbo.p_cron_update_job";
                    sc.AddParameter("@i_job_id", _jobId);
                    sc.AddParameter("@txt_args", (_argsXml == null) ? string.Empty : _argsXml);
                    sc.AddParameter("@i_exec_count", _execsRemaining);
                    sc.AddParameter("@dt_next_exec", _nextExecTime);
                    sc.AddParameter("@b_enabled", _enable);
                    sc.AddParameter("@vc_error_text", _errorText);

                    sc.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_DB_FAILURE_6, e, "Failed to execute p_cron_job_complete, {0}", GetJobInfoString());
            }
        }

        public static HResult Remove(int jobId, uint titleId)
        {
            HResult hr = HResult.E_FAIL;

            try
            {
                using (SqlClient sc = new SqlClient(Interface.npdb))
                {
                    sc.StoredProc = "dbo.p_cron_remove_job";
                    sc.AddParameter(ParameterDirection.ReturnValue, "@hr", hr);
                    sc.AddParameter("@i_job_id", jobId);
                    sc.AddParameter("@i_title_id", titleId);

                    sc.ExecuteNonQuery();

                    hr = (uint) sc.GetIntParameter("@hr");

                    Xom.Trace(XomAreaName.crontrace, LogLevel.L_LOW, string.Format("dbo.p_cron_remove_job returned hr: 0x{0}", hr.ToString()));
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent( XEvent.Id.CRON_DB_FAILURE_7, e, "Failed to execute p_cron_remove_job, jobId = {0}, titleId = {1}.", jobId, (TitleId) titleId);

                hr = XRLException.ToHResult(e, HResult.XONLINE_E_DATABASE_ERROR);
            }

            return hr;
        }



        public void Execute()
        {
            Hashtable args = null;
            ICronJob job = null;
            bool retry = false;

            CronJobCounters.Current.ExecRate.Increment();
            CronJobCounters.Current.ExecTotal.Increment();

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            //
            // create the job object and args
            //
            try
            {
                job = GetJobObject();

                // create the arguments hashtable
                args = PluginUtil.XmlToHashtable(_argsXml);
            }
            catch(Exception e)
            {
                _errorText = "An error occured attempting to create the plugin!\r\n" + e.ToString() + "\r\n-------\r\n" + GetJobInfoString();
                _enable = 0;
            }

            //
            // execute the job
            //
            if (job != null && args != null && _enable != 0)
            {
                try
                {
                    if (job is CronJobExtender)
                    {
                        ((CronJobExtender)job).Start((uint)_jobId);
                    }

                    job.Execute((uint)_jobId, (uint)_titleId, ref args);

                }
                catch (CronJobException cje)
                {
                    _errorText = "An error occured executing job!\r\n" + cje.ToString() + "-----\r\n" + GetJobInfoString();
                    retry = cje.Retry;
                }
                catch (Exception e)
                {
                    _errorText = "An error occured executing job!\r\n" + e.ToString() + "-----\r\n" + GetJobInfoString();

                    // Exponentially increase _enable 8 times, allowing a way to throttle back
                    // the number of retries due to unexpected failures.   This value will be used below
                    // as the # of minutes to wait until the next retry.   If the job isn't fixed
                    // by the 8th time, forget it.
                    //
                    // bug 37304.
                    //
                    _enable = (byte)(_enable << 1);
                    retry = (_enable != 0);

                }
                finally
                {
                    if (job is CronJobExtender)
                    {
                        ((CronJobExtender)job).Stop();
                    }
                }

                CronJobCounters.Current.ExecTime.IncrementBy(timeElapsed.TimeElapsed);
                CronJobCounters.Current.ExecTimeBase.Increment();
            }

            if (_errorText != "")
            {
                Xom.NtEvent( XEvent.Id.QUERY_PLUGIN_CREATION_ERROR, _errorText);
                CronJobCounters.Current.ExecFailureRate.Increment();
                CronJobCounters.Current.ExecFailureTotal.Increment();
            }

            //
            // update job results
            //

            if (!retry && _execsRemaining > 0 && _enable != 0)
            {
                // update args only when not retrying
                _argsXml = PluginUtil.HashtableToXml(args);

                // decrement exec count only when not retrying AND when not 'run infinate'
                if ( _execsRemaining < ExecInfinitely )
                {
                    _execsRemaining--;
                }
            }

            if (_execsRemaining > 0)
            {
                _nextExecTime = _nextExecTime.AddSeconds(_execInterval);

                // retry in the lesser of the next interval or the retry interval
                if(retry && (_nextExecTime > CronApp.UtcNow.AddMinutes(_enable) || _execInterval == 0))
                {
                    _nextExecTime = CronApp.UtcNow.AddMinutes(_enable);
                }


            }

            if (_execsRemaining == 0 && Config.GetBoolSetting(Setting.cron_deleteCompletedJobs) == true)
            {
                CronJob.Remove(_jobId, _titleId);
            }
            else
            {
                Update();
            }

        }

        /// <summary>
        /// This function recursively registers the whole dependency tree for this assembly
        /// </summary>
        Assembly RegisterAssemblyWithXomLogging(string assemblyName)
        {
            Assembly asm = null;

            try
            {
                asm = Assembly.Load(assemblyName);

                XomLoggingControl.RegisterAssemblyAndReferences(asm);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.CRON_PLUGIN_XMGMT_REGISTRATION_FAILURE, e, 
                    "RegisterAssemblyWithXomLogging: an error occurred attempting to load and register assembly: {0} or one of its referenced assemblies. This is likely not fatal.", assemblyName
                );
            }

            return asm;
        }

        internal ICronJob GetJobObject()
        {
            ICronJob job;
            Assembly asm;
            object ob;


            if (_assemblyName == null || _className == null)
            {
                throw new Exception("no plugin class or assembly specified!\r\n" + GetJobInfoString());
            }

            // strip .dll off the name
            if (_assemblyName.EndsWith(".dll"))
            {
                _assemblyName = _assemblyName.Substring(0, _assemblyName.Length - 4);
            }


            job = (ICronJob)_jobCache[_assemblyName + "." + _className + _jobId];

            if (job == null)
            {
                asm = RegisterAssemblyWithXomLogging(_assemblyName);
                // create the plugin class
                ob = asm.CreateInstance(_className, false);
                if (ob == null)
                {
                    throw new Exception("Type " + _className + " not found in assembly " + _assemblyName + "!");
                }
                if (!(ob is ICronJob))
                {
                    throw new Exception("Type " + _className + " is not of type ICronJob!");
                }

                job = (ICronJob)ob;
                _jobCache[_assemblyName + "." + _className + _jobId] = job;
            }

            return job;

        }

        public void CopyTo(CronJobWire wireJob)
        {
            wireJob.jobId = _jobId;
            wireJob.name = _name;
            wireJob.titleId = _titleId;
            wireJob.assembly = _assemblyName;
            wireJob.className = _className;
            wireJob.argsXml = _argsXml;
            wireJob.execCount = _execsRemaining;
            wireJob.nextExec = _nextExecTime;
            wireJob.intervalSecs = _execInterval;
            wireJob.timeoutSecs = _execTimeout;
            wireJob.frontDoor = _execFrontdoor;
        }

        void ResetJob()
        {
            _jobId = 0;
            _name = "";
            _titleId = 0;
            _assemblyName = "";
            _className = "";
            _argsXml = null;
            _execsRemaining = 0;
            _enable = 1;
            _nextExecTime = DateTime.MaxValue;
            _execInterval = 0;
            _errorText = "";
            _execFrontdoor = "";
        }

        public string GetJobInfoString()
        {
            return "JobId: " + _jobId + "\r\n" +
                   "TitleId: " + _titleId + "\r\n" +
                   "Assembly: " + _assemblyName + "\r\n" +
                   "Class: " + _className + "\r\n" +
                   "Args: " + _argsXml + "\r\n" +
                   "ExecsRemaining: " + _execsRemaining + "\r\n" +
                   "NextExecTime: " + _nextExecTime + " (" + _nextExecTime.ToLocalTime() + " local) \r\n" +
                   "ExecInterval: " + _execInterval + "\r\n" +
                   "Enable: " + _enable + "\r\n";
        }

        private static Hashtable _jobCache = new Hashtable();

        private int _jobId;
        private string _name;
        private uint _titleId;
        private string _assemblyName;
        private string _className;
        private string _argsXml;
        private uint _execsRemaining;
        private byte _enable;
        private DateTime _nextExecTime;
        private uint _execInterval;
        private uint _execTimeout;
        private string _errorText;
        private string _execFrontdoor;
        private bool _runNow;
    }


    [XomPerformanceCounterCategoryAttr( "Cron FD: Job counters", "Cron serivce jobs" )]
    public class CronJobCounters : XomPerformanceCounterCategory
    {
        static public CronJobCounters Current = new CronJobCounters();

        [XomPerformanceCounterAttr(
            "Job executions/sec",
            "Job executions per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ExecRate;

        [XomPerformanceCounterAttr(
            "Job execution total",
            "Total number of jobs executed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ExecTotal;


        [XomPerformanceCounterAttr(
            "Job failures/sec",
            "Job failures per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ExecFailureRate;

        [XomPerformanceCounterAttr(
            "Job failures total",
            "Total number of jobs failed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ExecFailureTotal;

        [XomPerformanceCounterAttr(
            "Job avg. execution time",
            "Average time taken to execute a job",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ExecTime;

        [XomPerformanceCounterAttr(
            "Job avg. execution time base",
            "Base average time taken to execute a job",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter ExecTimeBase;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CatalogWatcherPlugin\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\removejob.cs ===
// 
// RemoveJob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// xqry Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;


namespace xonline.server.cron.fd 
{
    public class RemoveJob : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            RemoveJobCounters counters = new RemoveJobCounters();
            RemoveJobRequest req;
            
            HResult hr = HResult.S_OK;

            counters.StartRequest();
            
            CallSource.Check(VirtualInterface.cron_int);   
            
            req = new RemoveJobRequest();
            req.ReadFromRequest(ctx.Request);
            
            hr = CronJob.Remove(req.jobId, req.titleId);
            CronDriver.CronStateChange();
            
            Xom.Log(XomAreaName.log, "REM|" + hr + "|" + req.jobId + "|" + req.titleId);
            
            counters.EndRequest(HResult.Failed(hr));            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.InvalidService, hr);
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
        
            
    }              
    
    
    public class RemoveJobCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            RemoveJobCountersCategory.Current.RequestsPerSecond.Increment();
            RemoveJobCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                RemoveJobCountersCategory.Current.FailuresPerSecond,
                RemoveJobCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            RemoveJobCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            RemoveJobCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                RemoveJobCountersCategory.Current.FailuresPerSecond.Increment();
                RemoveJobCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Cron FD: RemoveJob", "CRON: RemoveJob" )]
	public class RemoveJobCountersCategory : XomPerformanceCounterCategory
	{
        static public RemoveJobCountersCategory Current = new RemoveJobCountersCategory();
       
        // RemoveJob request counters

		[XomPerformanceCounterAttr(
			"RemoveJob requests/sec", 
			"RemoveJob requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveJob total", 
			"Total RemoveJob requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"RemoveJob failures/sec", 
			"Number of unsuccessful results returned by RemoveJob per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveJob total failures", 
			"Total number unsuccessful results returned by RemoveJob in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"Add avg. execution time", 
			"Add Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\lib\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\lib\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\fd\ping.cs ===
// 
// Ping.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// xqry Front Door
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Web;
using System.Text;
using System.Diagnostics;
using xonline.common.config;
using xonline.common.plugins;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.cron.fd 
{
    public class Ping : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            PingCounters counters = new PingCounters();
            
            HResult hr = HResult.S_OK;
            
            counters.StartRequest();
            
            CallSource.Check(VirtualInterface.cron_int);   

            // TODO: test db connections?
            
            Xom.Log(XomAreaName.log, "PNG|" + hr);
            
            counters.EndRequest(HResult.Failed(hr));            
            XRLUtil.SetXRLResponse(ctx.Response, XOService.InvalidService, 0, hr);
        }
        
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
            
    }              
    
    
    public class PingCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            PingCountersCategory.Current.RequestsPerSecond.Increment();
            PingCountersCategory.Current.RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                PingCountersCategory.Current.FailuresPerSecond,
                PingCountersCategory.Current.FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            PingCountersCategory.Current.AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            PingCountersCategory.Current.AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                PingCountersCategory.Current.FailuresPerSecond.Increment();
                PingCountersCategory.Current.FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Cron FD: Ping", "CRON: Ping" )]
	public class PingCountersCategory : XomPerformanceCounterCategory
	{
        static public PingCountersCategory Current = new PingCountersCategory();
       
        // Ping request counters

		[XomPerformanceCounterAttr(
			"Ping requests/sec", 
			"Ping requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"Ping total", 
			"Total Ping requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"Ping failures/sec", 
			"Number of unsuccessful results returned by Ping per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"Ping total failures", 
			"Total number unsuccessful results returned by Ping in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"Add avg. execution time", 
			"Add Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CatalogWatcherPlugin\CatalogWatcherCronWrapper.cs ===
using System;
using System.Web;
using System.Collections;
using System.Collections.Specialized;
using System.Data;
using System.Xml;
using System.Text;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Content.Config;

using xonline.common.health;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.catalogwatcher;
using xonline.common.config;


namespace xonline.server.cron.plugins.CatalogWatcherPlugin
{

    /// <summary>
    /// The wrapper for the CatalogWatcher code
    /// </summary>
    public class CatalogWatcherCronWrapper : CronJobExtender, ICronJobCommand, IHealthBlock
    {
        public override bool ShareHealthBlock
        {
            get { return true; }
        }
        
        private object lockObject = new object();        

        public override void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            lock(lockObject) // Apparently cron can call the same object while it might be already running
            {
                CatalogWatcher watcher = new CatalogWatcher();
                // Create interupt handler to listen for abort events
                InterruptHandler handler = delegate(object obj, InterruptEventArgs eventArgs)
                {
                    watcher.SetAbortFlag(eventArgs.Interrupted);
                };           
                // CronJobExtender holds the interrupt handler and logic for keeping track of the interrupted flag
                InterruptEvent += handler;
                watcher.Execute(ref args); // This call will block until complete. Remove the handler right after
                InterruptEvent -= handler;
            }
        }

        // This is the xmgmt command handler
        // The reqId is the Id used to send messages to XomControlConnection
        public HResult Command(Hashtable args, StringBuilder resultText, uint reqId)
        {
            UserCommandHandler commandHandler = new UserCommandHandler(reqId);
            Hashtable convertedArgs = new Hashtable();
            // The current command infrastructure in the watcher expects the following format:
            // the command is passed in as op=CommandName
            // Any parameters are passed in as p1=ParameterValue1 p2=ParameterValue2
            if (args[1] != null) // This is the Watcher command name
            {
                convertedArgs["op"] = args[1];
                int i = 2;
                while (args[i] != null)
                {
                    convertedArgs["p" + (i - 1)] = args[i];
                    i++;
                }
            }
            HResult hr = commandHandler.Command(convertedArgs, resultText);
            return hr;
        }

        // This is the http command handler
        public HResult Command(Hashtable args, HttpResponse response)
        {
            // html color codes
            string redColor = "#FF0000";
            string greenColor = "#00FF00";

            UserCommandHandler commandHandler = new UserCommandHandler();
            StringBuilder resultHtml = new StringBuilder();
            resultHtml.Append("<html>");
            StringBuilder resultText = new StringBuilder();
            HResult hr = commandHandler.Command(args, resultText);
            resultHtml.Append(String.Format("<font color=\"{0}\">", (hr.IsSuccess() ? greenColor : redColor)));
            // Replace newlines with html 'break'
            resultHtml.Append(resultText.Replace(System.Environment.NewLine, "<br>").ToString());
            resultHtml.Append("</font></html>");
            response.Write(resultHtml);
            return hr;
        }

        public ResourceTypeEnum ResourceType
        {
            get { return ResourceTypeEnum.Remote; }
        }

        public void DoCheck(
            HealthBlockManager blockManager,
            NameValueCollection blockParams,
            HealthReport report
        )
        {
            report.HealthStatus = HealthStatusEnum.Red;

            // Retrieve virtual interface information, construct connection string
            string[] ingestionIps = Config.GetMultiSetting(MultiSetting.fastEspMarketplaceIngestionIps);
            string collectionName = Config.GetSetting(Setting.catalogwatcher_fast_esp_collection_name);
            string ingestionPort = Config.GetSetting(Setting.catalogwatcher_fast_esp_ingestion_port);

            StringBuilder espContentDistributor = new StringBuilder();
            string noFirstComma = string.Empty;

            // Format of the content distributor is a comma seperated list of host:port values
            //      host1:port,host2:port,host3:port
            foreach (string ip in ingestionIps)
            {
                espContentDistributor.AppendFormat("{0}{1}:{2}", noFirstComma, ip, ingestionPort);
                noFirstComma = ",";
            }

            report.ExtendedReport = new CronFastEspIngestionHealthExtendedHealth()
            {
                ingestionIps = ingestionIps,
                collectionName = collectionName,
                ingestionPort = ingestionPort
            };

            try
            {
                IContentFactory contentFactory = Factory.CreateContentFactory();
                using (IDocumentFeeder documentFeeder = Factory.CreateDocumentFeeder(espContentDistributor.ToString(), collectionName))
                {

                }
                report.HealthStatus = HealthStatusEnum.Green;
            }
            catch (FactoryException fe)
            {
                report.ErrorDetails = fe.ToString();
            }
        }

        public class CronFastEspIngestionHealthExtendedHealth : IExtendedHealthReport
        {
            public string[] ingestionIps;
            public string collectionName;
            public string ingestionPort;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\lib\CertGrabber.cs ===
using System;                               // Convert
using System.Collections;                   // Hashtable
using System.Collections.Specialized;       // NameValueCollection
using System.IO;                            // Stream
using System.Net;                           // HttpWebResponse
using System.Text;                          // Encoding
using System.Text.RegularExpressions;       // Regex
using System.Xml;                           // XmlDocument
using xonline.common.config;                // Config
using xonline.common.health;                // IHealthBlock
using xonline.common.mgmt;                  // Xom
using xonline.common.service;               // XRLException
using xonline.common.sql.sqlclient;         // SqlClient
using xonline.server.cron.plugins.cronlib;  // ICronJob
using xonline.common.billing;               // PassportClient

namespace xonline.server.cron.plugins.certgrabber
{
    public class CertGrabber : ICronJob, IHealthBlock
    {
        const string BEGIN_CERT = "-----BEGIN CERTIFICATE-----  ";
        const string END_CERT = "  -----END CERTIFICATE-----";

        /*
         * Note: This tool is intended to be the place where any cert updating logic should be.
         * 
         * However, currently the code is only for the passport_publicKeyCert cert, and should
         * be made more general as more certs need to be updated.
         * 
         */
        public void Execute(uint jobID, uint titleId, ref Hashtable args)
        {
            string xmlResponse;
            try
            {
                xmlResponse = GetXmlFromUrl(Config.GetSetting(Setting.passport_publicKeyCertUrl));
            }
            catch (Exception e)
            {
                if (e is ExceptionWithEventId || e is ExceptionWithoutEvent) throw;

                HResult hr = XRLException.ToHResult(e, HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_GET_NEW_CERT);
                throw new XRLException( hr,
                                        XEvent.Id.CERT_GRABBER_GET_CERT_FAILURE,
                                        "Unable to query for the latest cert",
                                        true,
                                        e);
            }

            string latestCert;
            try
            {
                latestCert = ParseLatestCertFromPassport(xmlResponse);
            }
            catch (Exception e)
            {
                if (e is ExceptionWithEventId || e is ExceptionWithoutEvent) throw;

                HResult hr = XRLException.ToHResult(e, HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_PARSE_NEW_CERT);
                throw new XRLException( hr,
                                        XEvent.Id.CERT_GRABBER_PARSE_CERT_FAILURE,
                                        "Unable to query for the latest cert",
                                        true,
                                        e);
            }

            try
            {
                if (latestCert != Config.GetSetting(Setting.passport_publicKeyCert))
                {
                    CacheNewCert(latestCert);
                }
            }
            catch (Exception e)
            {
                if (e is ExceptionWithEventId || e is ExceptionWithoutEvent) throw;

                HResult hr = XRLException.ToHResult(e, HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_UPDATE_CERT);
                throw new XRLException( hr,
                                        XEvent.Id.CERT_GRABBER_UPDATE_CERT_FAILURE,
                                        "Unable to update npdb with the latest cert",
                                        true,
                                        e);
            }
        }

        private string ParseLatestCertFromPassport(string xmlResponse)
        {
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xmlResponse);

            XmlNode encryptNode = doc.SelectSingleNode("/RPSPartner/Certs/Encrypt");
            if (encryptNode == null)
            {
                throw new Exception("Unable to parse xml response: The node tree '/RPSPartner/Certs/Encrypt' not found");
            }

            int maxVersion = -1;
            string latestCert = String.Empty;
            for (XmlNode certNode = encryptNode.FirstChild; certNode != null; certNode = certNode.NextSibling)
            {
                Match matchedCertVersion = Regex.Match(certNode.Name, @"^v(?<versionNumber>[\d]+)$", RegexOptions.IgnoreCase);
                if (matchedCertVersion.Success)
                {
                    int thisVersion = Convert.ToInt32(matchedCertVersion.Groups["versionNumber"].Value);
                    if (thisVersion > maxVersion)
                    {
                        maxVersion = thisVersion;
                        latestCert = certNode.InnerText;
                    }
                }
            }

            if (maxVersion == -1)
            {
                throw new Exception("Unable to parse xml response: The node tree '/RPSPartner/Certs/Encrypt' didn't have a child node with name 'v#'");
            }

            latestCert = BEGIN_CERT + latestCert + END_CERT;

            // will throw an exception if unable to parse the blob.
            PassportClient.LoadPublicKeyFromCertificate(Encoding.ASCII.GetBytes(latestCert), null);

            return latestCert;
        }

        private string GetXmlFromUrl(string url)
        {
            HttpWebResponse httpResponse = null;
            Stream streamResponse = null;
            string xmlResponse;

            try
            {
                // Post
                HttpWebRequest httpReq = (HttpWebRequest)WebRequest.Create(url);
                string proxy = Config.GetSetting(Setting.billing_proxy);
                httpReq.Proxy = (string.IsNullOrEmpty(proxy)) ? new WebProxy() : new WebProxy(proxy, true);
                httpReq.Method = "GET";
                httpReq.Timeout = Config.GetIntSetting(Setting.passport_partnerCallTimeoutSeconds) * 1000;

                // Get response
                httpResponse = (HttpWebResponse)httpReq.GetResponse();
                streamResponse = httpResponse.GetResponseStream();
                byte[] binaryResponse = (new BinaryReader(streamResponse)).ReadBytes((int)httpResponse.ContentLength);
                xmlResponse = Encoding.UTF8.GetString(binaryResponse);
            }
            finally
            {
                if (streamResponse != null)
                    streamResponse.Close();

                if (httpResponse != null)
                    httpResponse.Close();
            }

            return xmlResponse;
        }

        private void CacheNewCert(string latestCert)
        {
            using (SqlClient cmd = new SqlClient(Interface.npdb))
            {
                cmd.StoredProc = "p_config_add_setting_override";

                cmd.AddParameter("@setting", Setting.passport_publicKeyCert);
                cmd.AddParameter("@value", latestCert);
                cmd.AddParameter("@environment", Config.Environment);
                cmd.AddParameter("@component", "ALL");
                cmd.AddParameter("@siteId", -1);
                cmd.AddParameter("@server", "ALL");
                cmd.AddParameter("@overwriteExistingValue", 1);

                cmd.ExecuteNonQuery();
            }

            Xom.NtEvent(XEvent.Id.PLUGIN_CERTGRABBER_CERTIFICATE_UPDATED,
                "Passport certificate has been updated in npdb.  Please attempt an account recovery to confirm that new password operates properly.  If this fails, revert and escalate to the product team.");
        }

        public ResourceTypeEnum ResourceType
        {
            get
            {
                return ResourceTypeEnum.Local;
            }
        }

        public void DoCheck(
            HealthBlockManager  blockManager, 
            NameValueCollection blockParams,
            HealthReport        report
        )
        {
            // Main test is to confirm connectivity to the Passport site.
            // I don't want to perform the check every time, so only attempt if job has
            // previously failed.
            if (!String.IsNullOrEmpty(blockParams["ErrorText"]))
            {
                string xml = GetXmlFromUrl(Config.GetSetting(Setting.passport_publicKeyCertUrl));
            }
        }

        public bool ShareHealthBlock
        {
            get { return false; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\test\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\test\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\test\FuncCertGrabberCronJob.cs ===
using System;

using ServerTestFramework;
using System.Data.SqlClient;
using xonline.common.config;
using ServerTestFramework.LiveService.UserAccount;

namespace xonline.test.certgrabber.functional
{
    [TestGroup]
    public class CertGrabberCronJobTests : TestNode
    {
        public class CronJobInfo
        {
            public int i_job_id;
            public string vc_name;
            public int i_title_id;
            public string vc_assembly;
            public string vc_class;
            public string txt_args;
            public DateTime dt_exec_next_scheduled;
            public DateTime dt_exec_next_actual;
            public int i_exec_interval_secs;
            public int i_exec_count;
            public int i_exec_timeout;
            public string vc_exec_frontdoor;
            public byte b_enabled;
            public string vc_error_text;
        }

        private static CronJobInfo GetCronJob(string jobName)
        {
            CronJobInfo job = new CronJobInfo();
            using (SqlConnection sqlConnection = new SqlConnection(ConfigUtil.NpdbConnectionString))
            {
                sqlConnection.Open();

                string cmdString = String.Format("select * from npdb.dbo.t_cron_jobs where vc_name = '{0}'", jobName);
                SqlCommand cmd = new SqlCommand(cmdString, sqlConnection);

                SqlDataReader reader = null;
                                
                // Get the results...                
                try
                {
                    reader = cmd.ExecuteReader();
                    reader.Read();

                    job.i_job_id = reader.GetInt32(0);
                    job.vc_name = reader.GetString(1);
                    job.i_title_id = reader.GetInt32(2);
                    job.vc_assembly = reader.GetString(3);
                    job.vc_class = reader.GetString(4);

                    if (reader.IsDBNull(5) == false)
                    {
                        job.txt_args = reader.GetString(5);
                    }
                    else
                    {
                        job.txt_args = null;
                    }

                    job.dt_exec_next_scheduled = reader.GetDateTime(6);
                    job.dt_exec_next_actual = reader.GetDateTime(7);
                    job.i_exec_interval_secs = reader.GetInt32(8);
                    job.i_exec_count = reader.GetInt32(9);
                    job.i_exec_timeout = reader.GetInt32(10);
                    job.vc_exec_frontdoor = reader.GetString(11);
                    job.b_enabled = reader.GetByte(12);
                    job.vc_error_text = reader.GetString(13);
                }
                catch
                {
                    //
                    // Rethrow...let the caller handle the exception.
                    //
                    throw;
                }
                finally
                {
                    if (reader != null)
                    {
                        reader.Close();
                    }
                }
            }
            return job;
        }

        private static int AddJob()
        {
            SqlConnection cxn = null;
            SqlCommand cmd = null;
            
            try
            {
                IInterfaceInfo npdbInfo = Config.GetSingleInterface(Interface.npdb);
                using (cxn = new SqlConnection("Data Source=" + npdbInfo.IPAddressString + ";Initial Catalog=" + npdbInfo.DBName + ";Integrated Security=SSPI"))
                {
                    cxn.Open();

                    // SP command
                    cmd = new SqlCommand("p_cron_add_job", cxn);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;

                    cmd.Parameters.Add(new SqlParameter("@vc_name", "CertGrabberTest"));
                    cmd.Parameters.Add(new SqlParameter("@i_title_id", 0x1234));
                    cmd.Parameters.Add(new SqlParameter("@vc_assembly", "CertGrabber.dll"));
                    cmd.Parameters.Add(new SqlParameter("@vc_class", "xonline.server.cron.plugins.certgrabber.CertGrabber"));
                    cmd.Parameters.Add(new SqlParameter("@txt_args", DBNull.Value));
                    cmd.Parameters.Add(new SqlParameter("@dt_exec_next", DateTime.UtcNow));
                    cmd.Parameters.Add(new SqlParameter("@i_interval_secs", 1));
                    cmd.Parameters.Add(new SqlParameter("@i_exec_count", 1));
                    cmd.Parameters.Add(new SqlParameter("@i_exec_timeout", 5));
                    cmd.Parameters.Add(new SqlParameter("@i_job_id", 0));
                    cmd.Parameters["@i_job_id"].Direction = System.Data.ParameterDirection.Output;

                    cmd.ExecuteNonQuery();
                    return Convert.ToInt32(cmd.Parameters["@i_job_id"].Value);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static void RemoveJob(int jobId)
        {
            SqlConnection cxn = null;
            SqlCommand cmd = null;
            
            try
            {
                IInterfaceInfo npdbInfo = Config.GetSingleInterface(Interface.npdb);
                using (cxn = new SqlConnection("Data Source=" + npdbInfo.IPAddressString + ";Initial Catalog=" + npdbInfo.DBName + ";Integrated Security=SSPI"))
                {
                    cxn.Open();

                    // SP command
                    cmd = new SqlCommand("p_cron_remove_job", cxn);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                                        
                    cmd.Parameters.Add(new SqlParameter("@i_title_id", 0x1234));
                    cmd.Parameters.Add(new SqlParameter("@i_job_id", 0));
                    cmd.Parameters["@i_job_id"].Value = jobId;
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static int PickupJob(int jobId)
        {
            SqlConnection cxn = null;
            SqlCommand cmd = null;
            int ret = 0;

            try
            {
                IInterfaceInfo npdbInfo = Config.GetSingleInterface(Interface.npdb);
                using (cxn = new SqlConnection("Data Source=" + npdbInfo.IPAddressString + ";Initial Catalog=" + npdbInfo.DBName + ";Integrated Security=SSPI"))
                {
                    cxn.Open();
                    cmd = new SqlCommand("select i_job_id, vc_error_text from t_cron_jobs where i_job_id = " + jobId, cxn);

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        ret = 1;
                        if (Convert.ToString(reader[1]).Contains("error"))
                        {
                            ret = -1;
                        }
                    }
                    return ret;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(1), TestFrequency("Regression")]
        class P_VerifyCertGrabberJobEnabledInNPDB : TestBase
        {
            protected override void Execute()
            {
                CronJobInfo job;
                string jobName = "CertGrabber";
                job = GetCronJob(jobName);
                if (job.vc_name != jobName)
                {
                    throw new UnexpectedTestResultException(String.Format("Test FAIL!\nActual value == '{0}'\nExpected value == '{1}'", job.vc_name, "jobName"));
                }
                if (job.i_exec_timeout != 300)
                {
                    throw new UnexpectedTestResultException(String.Format("Test FAIL!\nActual value == '{0}'\nExpected value == '{1}'", job.i_exec_timeout, 300));
                }
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Regression")]
        class P_VerifyAddCronJob : TestBase
        {
            protected override void Execute()
            {
                int jobId = -1; ;
                string originalCert = xonline.tagrecycle.functionaltests.CertGrabberTests.GetCert();
                try
                {
                    xonline.tagrecycle.functionaltests.CertGrabberTests.ClearCert();
                    Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacherefresh");
                    Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacheflush");
                                        
                    Global.RO.Info("Update Cert >> " + Config.GetSetting(Setting.passport_publicKeyCert));
                    
                    jobId = AddJob();
                    while (PickupJob(jobId) > 0)
                    {
                        System.Threading.Thread.Sleep(1000);
                    }
                    Config.DiscardCachedValues();
                    string cert = xonline.tagrecycle.functionaltests.CertGrabberTests.GetCert();

                    Global.RO.Info("CERT >> \n" + cert + "\n << CERT");
                    if (cert == "blank")
                    {
                        throw new UnexpectedTestResultException("Cert wrong!");
                    }

                    Config.DiscardCachedValues();
                    Global.XEnv.ExecuteXmgmtCommand("xuacs", "e :xuacs  configcacherefresh");
                    XeUser user = new XeUser(true);
                    if (user.Create() == 0)
                    {
                        throw new UnexpectedTestResultException("XeUser.Create() should succeed! " + user.GetDumpString());
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    RemoveJob(jobId);
                    if (originalCert != null)
                    {
                        Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCert", originalCert, -1);                        
                        Config.DiscardCachedValues();
                        Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacherefresh");
                        Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configflush");
                    }
                }                                
            }
        }

        /// <summary>
        /// This test will bring healthcheck to be red. So I don't want it to run automatically.
        /// </summary>
        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Regression")]
        class P_VerifyExceptionInCronJob : TestBase
        {
            protected override void Execute()
            {
                int jobId = -1; ;
                string originalCert = xonline.tagrecycle.functionaltests.CertGrabberTests.GetCert();
                string originalPassportCertUrl = Global.XEnv.GetSetting("passport_publicKeyCertUrl");
                try
                {
                    xonline.tagrecycle.functionaltests.CertGrabberTests.ClearCert();
                    xonline.tagrecycle.functionaltests.CertGrabberTests.SetPassportCertUrlValue("http://invalidwebsite.invalid");                    
                    Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacheflush");
                    Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacherefresh");
                                            
                    jobId = AddJob();
                    int status = 0;
                    do
                    {
                        status = PickupJob(jobId);
                        System.Threading.Thread.Sleep(1000);
                    } while ( status > 0);
                    if (status == 0)
                    {
                        throw new UnexpectedTestResultException("Job gone? What's going on?");
                    }
                    Config.DiscardCachedValues();
                    string cert = xonline.tagrecycle.functionaltests.CertGrabberTests.GetCert();
                    Global.RO.Info("CERT >> \n" + cert + "\n << CERT");                    
                    xonline.tagrecycle.functionaltests.CertGrabberTests.CheckHealthStatus("Red");
                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                    RemoveJob(jobId);
                    if (originalCert != null)
                    {
                        Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCert", originalCert, -1);
                        Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCertUrl", originalPassportCertUrl, -1);
                        Config.DiscardCachedValues();
                        Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configcacherefresh");
                        Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.cron_int, "e :cron configflush");                        
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cleanclips\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\CertGrabber\test\FuncCertGrabber.cs ===
﻿using Microsoft.Webstore.WstClient;         // WstPartitionType
using System;                               // Magic
using System.Collections;                   // Hashtable
using xonline.common.config;                // ConfigUtil
using xonline.common.sql.webstore;          // WSClient

using ServerTestFramework;
using ServerTestFramework.LiveService;
using xonline.server.cron.plugins.certgrabber;
using ServerTestFramework.LiveService.UserAccount;
using System.Net;
using System.IO;
using System.Xml;
using System.Xml.XPath;

namespace xonline.tagrecycle.functionaltests
{
    [TestGroup]
    public class CertGrabberTests : TestNode
    {
        private static string originalCert = null;
        private static string originalPassportCertUrl = null;
        private static string alternatePassportCertUrlValue = "http://" + System.Net.Dns.GetHostName() + "/MusicNetEmulator/";

        [TestGroupSetup]
        public void Setup()
        {
            if (!System.IO.File.Exists("cronlib.dll") || !System.IO.File.Exists("CertGrabber.dll"))
            {
                throw new UnexpectedTestResultException("Files cronlib.dll and certgrabber.dll not found!");
            }
            originalCert = GetCert();
            originalPassportCertUrl = Global.XEnv.GetSetting("passport_publicKeyCertUrl");
        }

        [TestGroupTearDown]
        public void TearDown()
        {
            if (originalCert != null)
            {                
                Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCert", originalCert, -1);
                Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCertUrl", originalPassportCertUrl, -1);
                Config.DiscardCachedValues();
            }
        }

        #region HelperFunction

        public static void ClearCert()
        {
            Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCert", "blank", -1);
            Config.DiscardCachedValues();
            if (GetCert() != "blank")
            {
                throw new UnexpectedTestResultException("Cert wrong!");
            }
        }

        public static string GetCert()
        {
            return Global.XEnv.GetSetting("passport_publicKeyCert");
        }

        public static void RunCertGrabber()
        {
            CertGrabber cGrabber = new CertGrabber();
            Hashtable dummyHashTable = new Hashtable();
            cGrabber.Execute(0, 0, ref dummyHashTable);
            Config.DiscardCachedValues();
            Global.XEnv.ExecuteXmgmtCommand("xuacs", "e :xuacs  configcacherefresh");
        }

        public static void SetPassportCertUrlValue(string newValue)
        {
            Global.XEnv.OverrideSetting("ALL", "ALL", "passport_publicKeyCertUrl", newValue, -1);

            Config.DiscardCachedValues();

            if (newValue != Global.XEnv.GetSetting("passport_publicKeyCertUrl"))
            {
                throw new UnexpectedTestResultException("passport_publicKeyCertUrl didn't update!");
            }            
        }

        public static void CheckHealthStatus(string status)
        {            
            string healthCheckURL = String.Format("http://{0}/cron/health.ashx?stylesheet=no&op=status", Global.XEnv.GetVirtualInterface("cron_int").ToString());
            string results = null;
            Global.RO.Info( String.Format(
                    "Test case will attempt to contact the health check at the following URL: {0}",
                    healthCheckURL));
            Global.RO.Info("Opening connection to the health check URL");
            try
            {
                WebClient client = new WebClient();
                Stream stream = client.OpenRead(healthCheckURL);
                StreamReader reader = new StreamReader(stream);
                results = reader.ReadToEnd();
                reader.Close();
            }
            catch (Exception ex)
            {
                throw new UnexpectedTestResultException(
                    String.Format(
                        "There was a problem opening the health check URL: {0}",
                        ex.ToString()));
            }
            XmlDocument document = new XmlDocument();
            document.LoadXml(results);

            XPathNavigator navigator = document.CreateNavigator();
            XPathNodeIterator nodes = navigator.Select("/Healthcheck");
            if (nodes.Count == 0)
            {
                throw new UnexpectedTestResultException("Invalid health check response received!");
            }
            else
            {
                nodes.MoveNext();                
                navigator = document.CreateNavigator();
                nodes = navigator.Select("/Healthcheck/Reports/HealthReport");
                bool bFound = false;
                while (nodes.MoveNext())
                {
                    if ("CronPluginHealth_CertGrabberTest" == nodes.Current.GetAttribute("Name", String.Empty))
                    {
                        bFound = true;
                        if (status != nodes.Current.GetAttribute("HealthStatus", String.Empty))
                        {
                            throw new UnexpectedTestResultException("HealthCheck status for CronPluginHealth_CertGrabberTest is not " + status);
                        }
                        break;
                    }
                }
                if (!bFound && !String.IsNullOrEmpty(status))
                {
                    throw new UnexpectedTestResultException("We didn't find healthcheck info for CronPluginHealth_CertGrabberTest!\n" + results);
                }
            }
        }

        #endregion

        [TestCase, Owner("yixuanl"), TestCasePriority(1), TestFrequency("Manual"), EnvRequirement("")]
        class P_Mainline : TestBase
        {
            override protected void Execute()
            {
                ClearCert();                              
                RunCertGrabber();
                string cert = GetCert();

                Global.RO.Info("CERT >> \n" + cert + "\n << CERT");
                if (cert == "blank")
                {
                    throw new UnexpectedTestResultException("Cert wrong!");
                }
                
                XeUser user = new XeUser(true);
                if (user.Create() == 0)
                {
                    throw new UnexpectedTestResultException("XeUser.Create() should suceed! " + user.GetDumpString());
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Manual"), EnvRequirement("")]
        class N_Website_Down : TestBase
        {
            override protected void Execute()
            {
                ClearCert();

                SetPassportCertUrlValue("http://invalidwebsite.invalid");

                try
                {
                    RunCertGrabber();
                }
                catch (xonline.common.service.XRLException e)
                {
                    if (e.HResult == xonline.common.service.HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_GET_NEW_CERT)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Manual"), EnvRequirement("")]
        class N_NotExist_Cert_Page : TestBase
        {
            override protected void Execute()
            {
                ClearCert();

                SetPassportCertUrlValue(alternatePassportCertUrlValue + "invalidpage.xml");

                try
                {
                    RunCertGrabber();
                }
                catch (xonline.common.service.XRLException e)
                {
                    if (e.HResult == xonline.common.service.HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_GET_NEW_CERT)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }

        /// <summary>
        /// To run tests below, make sure all the xml files under config directory have been deployed to your local musicnet website
        /// </summary>

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Manual"), EnvRequirement("")]
        class P_Multiple_Certificates : TestBase
        {
            override protected void Execute()
            {
                ClearCert();

                SetPassportCertUrlValue(alternatePassportCertUrlValue + "multiplecert.xml");
                RunCertGrabber();

                string cert = GetCert();

                Global.RO.Info("CERT >> \n" + cert + "\n << CERT");
                if (cert.Length < 20)
                {
                    throw new UnexpectedTestResultException("Cert wrong!");
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Manual"), EnvRequirement("")]
        class P_Long_Certificates : TestBase
        {
            override protected void Execute()
            {
                ClearCert();

                SetPassportCertUrlValue(alternatePassportCertUrlValue + "longcert.xml");
                try
                {
                    RunCertGrabber();
                }
                catch (xonline.common.service.XRLException e)
                {
                    if (e.HResult == xonline.common.service.HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_PARSE_NEW_CERT)
                    {
                        string cert = GetCert();
                        Global.RO.Info("CERT >> \n" + cert + "\n << CERT");
                        if (cert != "blank")
                        {
                            throw new UnexpectedTestResultException("Cert wrong!");
                        }
                        
                        XeUser user = new XeUser(true);
                        if (user.Create() == 0)
                        {
                            throw new UnexpectedTestResultException("XeUser.Create() should suceed! " + user.GetDumpString());
                        } 
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }               
            }
        }

        [TestCase, Owner("yixuanl"), TestCasePriority(2), TestFrequency("Manual"), EnvRequirement("")]
        class N_Invalid_Certificates : TestBase
        {
            override protected void Execute()
            {
                string[] certfiles = {"invalidcert2.xml", "invalidcert3.xml", "invalidcert4.xml"};
                ResultCode = TEST_RESULTS.PASSED;

                foreach (string certfile in certfiles)
                {
                    bool isExpectedResults = false;
                    ClearCert();

                    SetPassportCertUrlValue(alternatePassportCertUrlValue + certfile);

                    try
                    {
                        RunCertGrabber();

                        string cert = GetCert();

                        Global.RO.Info("CERT >> \n" + cert + "\n << CERT");
                    }
                    catch (xonline.common.service.XRLException e)
                    {
                        if (e.HResult == xonline.common.service.HResult.XONLINE_E_CERT_GRABBER_FAILED_TO_PARSE_NEW_CERT)
                        {
                            isExpectedResults = true;
                        }
                    }
                    if (!isExpectedResults)
                    {
                        Global.RO.Error("Why does grab cert " + certfile + " succeed? What's Wrong?");
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                }
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cleanclips\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cleanclipstest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cronlib\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cleanclips\cleanclips.cs ===
// 
// cleanclips.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service


using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;

using System.Collections;
using System.Diagnostics;
using System.Text;
using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.common.sql.webstore;
using xonline.stats.admin;

[assembly: XomAreaDefinition(XomAreaName.cleanclips)]

namespace xonline.server.cron.plugins.cleanclips
{
    public class ClipInfoWithTimeStamp:ClipInfo
    {
        public ClipInfoWithTimeStamp(ulong user, int nSizeClipUnCompress, DateTime dtUtcTime):base(user, nSizeClipUnCompress)
        {
            m_dtTime = System.TimeZone.CurrentTimeZone.ToLocalTime(dtUtcTime);
        }

        public DateTime TimeStamp
        {
            get
            {
                return m_dtTime;
            }
        }

        protected DateTime m_dtTime;
    }
        
    public class ClipInfo
    {
        public ClipInfo(ulong user, int nSizeClipUnCompress)
        {
            m_user = user;
            m_nSizeClipUnCompress = nSizeClipUnCompress;
        }

        public int SizeClipUnCompress
        {
            get
            {
                return m_nSizeClipUnCompress;
            }
        }

        public ulong User
        {
            get
            {
                return m_user;
            }
        }
        
        protected ulong m_user;
        protected int   m_nSizeClipUnCompress;
    }
        
    public class CleanClipsJob : ICronJob
    {
        public bool ShareHealthBlock
        {
            get { return false; }
        }

        private static int CronCleanClipNoDeleteWindowMinutes
        {
            get { return xonline.common.config.Config.GetIntSetting(Setting.clean_clip_delete_window_minute); }
        } 

        protected int GetNumPhysicalPartition()
        {
            int nPhysicalPartition = 0;
            using (WSClient ws = new WSClient(ConfigUtil.GetWebstoreApp(VirtualInterface.storedb), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                nPhysicalPartition = ws.PhysicalPartitions;
            }

            return nPhysicalPartition;
        }


        /*
                The algorithm is as follows

                Let L = Top N Entries in leaderboard
                Let S = All storage entries for a leaderboard

                For all element e in S not in L and meets the window rule
                    1) delete e from Storage (As they don't meet the top N Rule)
                        1.1) For the (user, lbid), set the attachment size column in the leaderboard to be 0
                    
                For all element l in L not in S (This is regardless of the window rule)
                    1) Set the attachemnt size column to 0 (Because their file is non existent in Storage - so they should have 0 size attachment)
                
        */
        
        public void Execute(uint jobID, uint titleId, ref Hashtable args)
        {
            Xom.Trace(XomAreaName.cleanclips, LogLevel.L_LOW, "Executing CleanClipsJob.." );
            
            int numPartitions = GetNumPhysicalPartition();
            int noDeleteWindowMinutes = CronCleanClipNoDeleteWindowMinutes;

            // Allow the deletion time to be overridden via the parameter set
            // overriding this using config.t_setting_overrides is not deterministic
            // enough.
            if(args.Contains("NoDeleteWindowMinutes"))
            {
                noDeleteWindowMinutes = (int)args["NoDeleteWindowMinutes"];
            }
            
            TitleConfig tcfg  = TitleConfig.GetTitle(titleId);
            if (null == tcfg)
            {
                //log a warning
                return;
            }
   
            for (int i = 0; i < tcfg.Leaderboards.Count; i++)
            {
                Leaderboard lb = (Leaderboard)tcfg.Leaderboards.GetByIndex(i);
                Xom.Trace(XomAreaName.cleanclips, LogLevel.L_LOW, "Cleaning attachments for titleId: " + tcfg.TitleId.ToString("x") + " leaderboard: " + lb.Id.ToString("x"));

                if (lb.MaxAttachments >= XOn.XONLINE_MAX_STATS_ATTACHMENT_COUNT)
                {
                    Xom.Trace(XomAreaName.cleanclips, LogLevel.L_LOW, string.Format("Skipping No Attachment Limit TitleId: 0x{0:x8} LbID 0x{1:x8}", tcfg.TitleId, lb.Id));
                   continue;
                }
                
                ClipInfoWithTimeStamp [] arrClipInfoFromStorage = EnumerateFileUsers(tcfg.TitleId, lb.Id, numPartitions);
                ClipInfo[] arrClipInfoFromLb = EnumerateTopUsers(tcfg.TitleId, lb.Id, lb.MaxAttachments);
    
                DateTime dtLastUploadTimeToConsider = DateTime.Now.AddMinutes(-noDeleteWindowMinutes);

                //First Direction verification
                foreach (ClipInfoWithTimeStamp userClipInfoFromStorage in arrClipInfoFromStorage)    
                {
                    if (userClipInfoFromStorage.TimeStamp >= dtLastUploadTimeToConsider.ToUniversalTime())
                        continue; //this clip is too new to consider for deletion
                    
                    bool  bDelete = true;
                    
                    foreach (ClipInfo userClipInfoFromLb in arrClipInfoFromLb)
                    {
                        if (userClipInfoFromLb.User == userClipInfoFromStorage.User)
                        {
                            bDelete = false;
                            
                            if (userClipInfoFromLb.SizeClipUnCompress != 0) //if the size is 0, we will skip this check because of legacy
                            {
                                if (userClipInfoFromLb.SizeClipUnCompress != userClipInfoFromStorage.SizeClipUnCompress)
                                {
                                    bDelete = true; //this means that either storage upload failed or stats write failed - Either way we are deleting the clip
                                }
                            }

                            break;
                        }
                    }    
                    
                    if (bDelete)
                    {
                        RemoveFile(tcfg.TitleId, lb.Id, userClipInfoFromStorage.User);
                        ResetAttachmentSizeInLb(tcfg.TitleId, lb.Id, userClipInfoFromStorage.User);
                    }    
                    
                }

                /*
                    NOTE:
                        If a clip is being uploaded now (e.g. Large Clip), but his stats has already been written. Then it is possible that,
                        Clean Clip thinks the clip never made it to storage and reset the size value in Stats.
                */

                //second Direction verification
                foreach (ClipInfo userClipInfoFromLb in arrClipInfoFromLb)
                {
                    if (userClipInfoFromLb.SizeClipUnCompress == 0)
                        continue; //nothing to do
                        
                    bool bResetSizeInLb = true;
                    foreach (ClipInfo userClipInfoFromStorage in arrClipInfoFromStorage)    
                    {
                        if (userClipInfoFromLb.User == userClipInfoFromStorage.User && userClipInfoFromLb.SizeClipUnCompress == userClipInfoFromStorage.SizeClipUnCompress)
                        {
                            bResetSizeInLb = false;
                            break;
                        }
                    }

                    if (bResetSizeInLb)
                    {
                        //note we don't delete the storage file even if there is one because the stats could still be in arbitration queue
                        //if the stat never gets written, this storage file will get deleted eventually
                        ResetAttachmentSizeInLb(tcfg.TitleId, lb.Id, userClipInfoFromLb.User); 
                    }
                }
            }
        }    

        void ResetAttachmentSizeInLb(uint titleId, uint lbId, ulong user)
        {
            DbLeaderboard.ZeroAttachmentSizeForUser(unchecked((int)titleId),unchecked((int)lbId) , unchecked((Int64)user));
        }

        public ClipInfo [] EnumerateTopUsers(uint titleId, uint lbId, uint maxAttachments)
        {
            HResult hr;
            uint startingRank = 1;
            ArrayList arrTopUserInfo = new ArrayList();
            
            StatsSpec spec = new StatsSpec();
            spec.ViewId = lbId;
            spec.ColumnCount = 1;
            spec.ColumnIds = new ushort[] {SpecialAttrib.AttachmentSize};
                
            StatsEnumByRankRequest req = new StatsEnumByRankRequest();
            StatsEnumResponse resp = new StatsEnumResponse();
            
            req.TitleId  = titleId;
            req.PageSize = Math.Min(maxAttachments, XOn.XONLINE_MAX_STATS_ENUM_COUNT);
            req.Specs    = new StatsSpec[] { spec };
            
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
            xrlreq.Path = req.GetXRL();
            xrlreq.RequestOb = req;
            xrlreq.ResponseOb = resp;
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, 0, titleId, 0, 0).GetBase64EncodedString();
            
            while (startingRank < maxAttachments)
            {
                req.Rank     = startingRank;
                
                hr = xrlreq.Send();
                if (hr != HResult.S_OK)
                {
                    throw new XRLException(hr, XEvent.Id.CRON_CODE_2, 
                        "Enumerating stats leaderboard " + lbId + 
                        " for title id " + titleId.ToString("x") + 
                        " failed! " + hr);
                }        
                    
                if (resp.Results.Length == 0 || resp.Results[0].Rows.Length == 0)
                {
                    break; //done
                }

                // copy page users to the overall list of users
                for (int i = 0; i < resp.Results[0].Rows.Length; i++)
                {
                    if ((resp.Results[0].Rows[i].Columns.Length != 1) || (resp.Results[0].Rows[i].Columns[0].ColumnId != SpecialAttrib.AttachmentSize))
                    {
                        String szMessage = String.Format("Unexpected result for Enumerating stats titleId 0x{0:X8} LbID 0x{1:X8}", titleId, lbId );
                        
                        //we expect only 1 column and that should be attachment size
                        throw new XRLException(HResult.XONLINE_E_DATABASE_RESULT_ERROR, XEvent.Id.CRON_CODE_3, szMessage);
                    }
                    
                    ClipInfo userInfo = new ClipInfo(resp.Results[0].Rows[i].Puid, (int) resp.Results[0].Rows[i].Columns[0].Data);
                    arrTopUserInfo.Add(userInfo);
                    startingRank++;
                }    
            }
                                
            return (ClipInfo [])arrTopUserInfo.ToArray(typeof(ClipInfo));;
    
        }
            
        ClipInfoWithTimeStamp [] EnumerateFileUsers(uint titleId, uint lbId, int numPartitions)
        {
            ArrayList users = new ArrayList();
            
            using (WSClient ws = new WSClient(ConfigUtil.GetWebstoreApp(VirtualInterface.storedb), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "p_file_enumerate_by_title";
                ws.AddParameter("@i_domain_id", 5);
                ws.AddParameter("@vc_path", "/" + titleId.ToString("X8") + "/" + lbId.ToString("X8"));
                ws.AddParameter("@i_title_id", titleId);
                
                for (int i = 0; i < numPartitions; i++)
                {
                    ws.PhysicalPartition = i;
                    WstDataReader reader = ws.Execute();
                    
                    while (reader.Read())
                    {
                        ClipInfoWithTimeStamp info = new ClipInfoWithTimeStamp((ulong)(long)reader["bi_user_puid"], (int)reader["i_size_uncompressed"], (DateTime)reader["dt_modified"]);
                        users.Add(info);
                    }
                }
            }   
                             
            return (ClipInfoWithTimeStamp [])users.ToArray(typeof(ClipInfoWithTimeStamp));
        }
       
            
        uint RemoveFile(uint titleId, uint lbId, ulong fileUser)
        {
            Xom.Trace(XomAreaName.cleanclips, LogLevel.L_LOW, 
            "Removing attachment for title id " + titleId.ToString("x8") + 
            " leaderboard id " + lbId + " user id " + fileUser.ToString("x"));

            RemoveFileToken t  = new RemoveFileToken();
            t._operation = (ushort) Operation.FileRemove;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = fileUser;
            t._xboxPuid = 0;
            t._pathName = "//xestats/u:" + fileUser.ToString("x") + "/" + titleId.ToString("x8") + "/" + lbId.ToString("x8");
            t._tokenExpirationDate = 0;

            ReqRemoveFile msg       = new ReqRemoveFile();
            msg._titleId            = titleId;
            msg._titleVersion       = 0;
            msg._accessToken        = t;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            HResult hr = HResult.S_OK;
            
            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
            req.PostData = reqbuf;
            
            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, 0, fileUser, titleId, (uint)XOService.Storage, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
            authdata.OverrideTitleVersion = 0;
            
            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = msg.GetXRL();
            
            hr = req.Send();

            return hr;
        }
                
            
    }                    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cronlib\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cleanclipstest\cleanclipsdvt.cs ===
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Security.Cryptography;
using System.Collections;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.stfutil;
using xonline.server.cron.plugins.cleanclips;

namespace xonline.server.storage.test.dvt 
{
    [TestGroup, DVT]
    public class CleanClipDevTest : TestNode
    {    
        //deploy this title from SD - Title Vault - Xblob - using live title/livestats
        //you also need to set the Setting.clean_clip_delete_window_minute to 0, otherwise no clip will qualify for deletion
        public const uint TITLE_ID = 0xFFFE07D0; 
        public const uint VIEW_ID  = 1;
        
        /*
            Both Storage & Leaderboards are in sync
        
            This test case 
            1. generates 10 users
            2. Upload file for all 10 of them.
            3. Simulate writing the stats & attachment size for them
            4. Run CRON - Clean Clips
            5. Verify TOP 5 attachments still exists but bottom 5 attachments is gone from Storage
            6. Verify Top 5 users in LB still has the correct attachment size but bottom 5 have 0
        */

        [TestCase]
        public void CleanClipsBaseline()
        {
            RandomEx rex = new RandomEx();
            ulong[] userIds = new ulong[10];
            ulong[] xboxIds = new ulong[10];
            byte[][] files  = new byte[10][];
            StatsOperator[] statsOps = new StatsOperator[10];
            uint hr;

            int nAttachmentSize = 100;
            int nMaxAttachment  = 5; 
                        
            for (int i = 0; i < userIds.Length; i++)
            {
                userIds[i] = rex.NextPuid();
                xboxIds[i] = rex.NextPuid();
                
                statsOps[i] = GenerateReplaceRatingOp(userIds[i], VIEW_ID, i, nAttachmentSize);
                                                         
                files[i] = rex.GenerateRandomBlob(nAttachmentSize);
            }                
            
            Console.WriteLine("Clearing leaderboard...");
            ResetView(VIEW_ID);

            Console.WriteLine("Populating leaderboard..");
            hr = StatPost(userIds, statsOps);
            Assert.AreEqual(hr, HResult.S_OK);
            
            Console.WriteLine("Writing files...");
            for (int i = 0; i < userIds.Length; i++)
            {
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Writing file to " + path);
                hr = WriteFile(true, userIds[i], xboxIds[i], path, files[i]);
                Assert.AreEqual(hr, HResult.S_OK);
            }
            
                    
            Console.WriteLine("Running cleanup...");
            Hashtable args = new Hashtable();
            xonline.server.cron.plugins.cleanclips.CleanClipsJob cleanjob = new xonline.server.cron.plugins.cleanclips.CleanClipsJob();
            cleanjob.Execute(0, TITLE_ID, ref args);


            Console.WriteLine("Verifying the right files were removed...");
            for (int i = 0; i < userIds.Length; i++)
            {
                byte[] serverFile;
                
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Reading file from " + path);
                hr = ReadFile(true, userIds[i], xboxIds[i], path, out serverFile);
                
                if (i < userIds.Length - nMaxAttachment)
                {
                    Console.WriteLine("Verfying file from user " + i + " is NOT there..");
                    Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);
                }
                else
                {
                    Console.WriteLine("Verfying file from user " + i + " is there..");
                    Assert.AreEqual(hr, HResult.S_OK);
                    Assert.AreEqual(serverFile, files[i]);
                }
            }

            Console.WriteLine("Verifying Attachment Size From Leaderboard");

            ClipInfo [] arrClipInfo = cleanjob.EnumerateTopUsers(TITLE_ID, VIEW_ID, (uint)userIds.Length);
            for (int i=0;i<arrClipInfo.Length;i++)
            {
                ClipInfo dataFromLeaderboard = arrClipInfo[i];

                if (i < nMaxAttachment)
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, nAttachmentSize);
                }
                else
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, 0);
                }
            }
            
            
        }


         /*
            Leaderboard is correct but Storage is missing files
         
            This test case 
            1. generates 10 users
            2. TRY to Upload file for all 10 of them but only succeed 8 of them (don't upload top 2)
            3. Simulate writing the stats & attachment size for ALL 10 of them
            4. Run CRON - Clean Clips
            5. Verify only 3 in the top 5 users has attachments, verify all below rank 5 have no attachments
            6. Verify Top 5 users in LB still has the correct attachment size but 2 of them should have 0 attachment size because their attachment upload fails
        */
        [TestCase]
        public void CleanClipsFailedToUploadAttachment()
        {
            RandomEx rex = new RandomEx();
            ulong[] userIds = new ulong[10];
            ulong[] xboxIds = new ulong[10];
            byte[][] files  = new byte[10][];
            StatsOperator[] statsOps = new StatsOperator[10];
            uint hr;

            int nAttachmentSize = 100;
            int nMaxAttachment  = 5; 
                        
            for (int i = 0; i < userIds.Length; i++)
            {
                userIds[i] = rex.NextPuid();
                xboxIds[i] = rex.NextPuid();
                
                statsOps[i] = GenerateReplaceRatingOp(userIds[i], VIEW_ID, i, nAttachmentSize);
                                                         
                files[i] = rex.GenerateRandomBlob(nAttachmentSize);
            }                
            
            Console.WriteLine("Clearing leaderboard...");
            ResetView(VIEW_ID);

            Console.WriteLine("Populating leaderboard..");
            hr = StatPost(userIds, statsOps);
            Assert.AreEqual(hr, HResult.S_OK);
            
            Console.WriteLine("Writing files...");
            for (int i = 0; i < userIds.Length - 2; i++)
            {
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Writing file to " + path);
                hr = WriteFile(true, userIds[i], xboxIds[i], path, files[i]);
                Assert.AreEqual(hr, HResult.S_OK);
            }
            
                    
            Console.WriteLine("Running cleanup...");
            Hashtable args = new Hashtable();
            xonline.server.cron.plugins.cleanclips.CleanClipsJob cleanjob = new xonline.server.cron.plugins.cleanclips.CleanClipsJob();
            cleanjob.Execute(0, TITLE_ID, ref args);


            Console.WriteLine("Verifying the right files were removed...");
            for (int i = 0; i < userIds.Length; i++)
            {
                byte[] serverFile;
                
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Reading file from " + path);
                hr = ReadFile(true, userIds[i], xboxIds[i], path, out serverFile);
                
                if ((i < userIds.Length - nMaxAttachment) || (i >= userIds.Length -2))
                {
                    Console.WriteLine("Verfying file from user " + i + " is NOT there..");
                    Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);
                }
                else
                {
                    Console.WriteLine("Verfying file from user " + i + " is there..");
                    Assert.AreEqual(hr, HResult.S_OK);
                    Assert.AreEqual(serverFile, files[i]);
                }
            }

            Console.WriteLine("Verifying Attachment Size From Leaderboard");

            ClipInfo [] arrClipInfo = cleanjob.EnumerateTopUsers(TITLE_ID, VIEW_ID, (uint)userIds.Length);
            for (int i=0;i<arrClipInfo.Length;i++)
            {
                ClipInfo dataFromLeaderboard = arrClipInfo[i];

                if (i < nMaxAttachment && i >= 2)
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, nAttachmentSize);
                }
                else
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, 0);
                }
            }
        }

        /*
            Storage is correct but Leaderboard contains old attachment size
         
            This test case 
            1. generates 10 users
            2. Upload file for all 10 of them
            3. Simulate writing WRONG stats for 2 of them, make sure they are above qualifying rank
            4. Run CRON - Clean Clips
            5. Verify only 3 in the top 5 users has attachments, verify all below rank 5 have no attachments
            6. Verify Top 5 users in LB still has the correct attachment size but 2 of them should have 0 attachment size because CRON zero them out
        */
        [TestCase]
        public void CleanClipsFailedToWriteLB()
        {
            RandomEx rex = new RandomEx();
            ulong[] userIds = new ulong[10];
            ulong[] xboxIds = new ulong[10];
            byte[][] files  = new byte[10][];
            StatsOperator[] statsOps = new StatsOperator[10];
            uint hr;

            int nAttachmentSize = 100;
            int nMaxAttachment  = 5; 
                        
            for (int i = 0; i < userIds.Length; i++)
            {
                userIds[i] = rex.NextPuid();
                xboxIds[i] = rex.NextPuid();
                if (i >= userIds.Length -2 )
                {
                    statsOps[i] = GenerateReplaceRatingOp(userIds[i], VIEW_ID, i, nAttachmentSize * 10); //incorrect attachment size
                }
                else
                {
                    statsOps[i] = GenerateReplaceRatingOp(userIds[i], VIEW_ID, i, nAttachmentSize);
                }
                
                files[i] = rex.GenerateRandomBlob(nAttachmentSize);
            }                
            
            Console.WriteLine("Clearing leaderboard...");
            ResetView(VIEW_ID);

            Console.WriteLine("Populating leaderboard..");
            hr = StatPost(userIds, statsOps);
            Assert.AreEqual(hr, HResult.S_OK);
            
            Console.WriteLine("Writing files...");
            for (int i = 0; i < userIds.Length; i++)
            {
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Writing file to " + path);
                hr = WriteFile(true, userIds[i], xboxIds[i], path, files[i]);
                Assert.AreEqual(hr, HResult.S_OK);
            }
            
                    
            Console.WriteLine("Running cleanup...");
            Hashtable args = new Hashtable();
            xonline.server.cron.plugins.cleanclips.CleanClipsJob cleanjob = new xonline.server.cron.plugins.cleanclips.CleanClipsJob();
            cleanjob.Execute(0, TITLE_ID, ref args);


            Console.WriteLine("Verifying the right files were removed...");
            for (int i = 0; i < userIds.Length; i++)
            {
                byte[] serverFile;
                
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Reading file from " + path);
                hr = ReadFile(true, userIds[i], xboxIds[i], path, out serverFile);
                
                if ((i < userIds.Length - nMaxAttachment)|| (i >= userIds.Length -2))
                {
                    Console.WriteLine("Verfying file from user " + i + " is NOT there..");
                    Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);
                }
                else
                {
                    Console.WriteLine("Verfying file from user " + i + " is there..");
                    Assert.AreEqual(hr, HResult.S_OK);
                    Assert.AreEqual(serverFile, files[i]);
                }
            }

            Console.WriteLine("Verifying Attachment Size From Leaderboard");

            ClipInfo [] arrClipInfo = cleanjob.EnumerateTopUsers(TITLE_ID, VIEW_ID, (uint)userIds.Length);
            for (int i=0;i<arrClipInfo.Length;i++)
            {
                ClipInfo dataFromLeaderboard = arrClipInfo[i];

                if (i < nMaxAttachment && i >= 2)
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, nAttachmentSize);
                }
                else
                {
                    Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, 0);
                }
            }
            
            
        }


         /*
            Make sure we don't delete clip when attachment size is 0
         
            This test case 
            1. generates 10 users
            2. Upload file for all 10 of them
            3. Write 0 attachment size stats
            4. Run CRON - Clean Clips
            5. Verify top 5 users has attachments, verify all below rank 5 have no attachments
            6. Verify all users have attachment size 0
        */
        [TestCase]
        public void CleanClipsDontDeleteThoseWithZeroAttachmentSize()
        {
            RandomEx rex = new RandomEx();
            ulong[] userIds = new ulong[10];
            ulong[] xboxIds = new ulong[10];
            byte[][] files  = new byte[10][];
            StatsOperator[] statsOps = new StatsOperator[10];
            uint hr;

            int nAttachmentSize = 100;
            int nMaxAttachment  = 5; 
                        
            for (int i = 0; i < userIds.Length; i++)
            {
                userIds[i] = rex.NextPuid();
                xboxIds[i] = rex.NextPuid();

                statsOps[i] = GenerateReplaceRatingOp(userIds[i], VIEW_ID, i, 0);
                files[i] = rex.GenerateRandomBlob(nAttachmentSize);
            }                
            
            Console.WriteLine("Clearing leaderboard...");
            ResetView(VIEW_ID);

            Console.WriteLine("Populating leaderboard..");
            hr = StatPost(userIds, statsOps);
            Assert.AreEqual(hr, HResult.S_OK);
            
            Console.WriteLine("Writing files...");
            for (int i = 0; i < userIds.Length; i++)
            {
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Writing file to " + path);
                hr = WriteFile(true, userIds[i], xboxIds[i], path, files[i]);
                Assert.AreEqual(hr, HResult.S_OK);
            }
            
                    
            Console.WriteLine("Running cleanup...");
            Hashtable args = new Hashtable();
            xonline.server.cron.plugins.cleanclips.CleanClipsJob cleanjob = new xonline.server.cron.plugins.cleanclips.CleanClipsJob();
            cleanjob.Execute(0, TITLE_ID, ref args);


            Console.WriteLine("Verifying the right files were removed...");
            for (int i = 0; i < userIds.Length; i++)
            {
                byte[] serverFile;
                
                string path = "//xestats/u:" + userIds[i].ToString("x") + "/" + TITLE_ID.ToString("x8") + "/" + VIEW_ID.ToString("x8");
                
                Console.WriteLine("Reading file from " + path);
                hr = ReadFile(true, userIds[i], xboxIds[i], path, out serverFile);
                
                if (i < userIds.Length - nMaxAttachment)
                {
                    Console.WriteLine("Verfying file from user " + i + " is NOT there..");
                    Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);
                }
                else
                {
                    Console.WriteLine("Verfying file from user " + i + " is there..");
                    Assert.AreEqual(hr, HResult.S_OK);
                    Assert.AreEqual(serverFile, files[i]);
                }
            }

            Console.WriteLine("Verifying Attachment Size From Leaderboard");

            ClipInfo [] arrClipInfo = cleanjob.EnumerateTopUsers(TITLE_ID, VIEW_ID, (uint)userIds.Length);
            for (int i=0;i<arrClipInfo.Length;i++)
            {
                ClipInfo dataFromLeaderboard = arrClipInfo[i];

                Assert.AreEqual(dataFromLeaderboard.SizeClipUnCompress, 0);                
            }
            
            
        }
         
        
        static uint ResetView(uint viewId)
        {
            MsgReset msg = new MsgReset();
            msg.titleId = TITLE_ID;
            msg.userId = 0;
            msg.leaderBoardType = viewId;
            
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            msg.WriteTo(writer);
            
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
            xrlreq.PostData = stream.ToArray();
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, 0, TITLE_ID, 0, 0).GetBase64EncodedString();
            xrlreq.Path = "/xstats/xstatsreset.ashx";
            
            return xrlreq.Send();
            
        }
        
                
        protected static StatsOperator GenerateReplaceRatingOp(ulong userid, uint viewid, long rating, int nAttachmentSize)
        {
            // Setup operation
            StatsOperator op = new StatsOperator();
            op.OperatorId = StatPostProcedure.Replace;
            op.Parameters = new StatsOperatorParameter[7];
            
            op.Parameters[0] = new StatsOperatorParameter(StatParam.Puid, userid);
            op.Parameters[1] = new StatsOperatorParameter(StatParam.Int32, (Int32)viewid);
            op.Parameters[2] = new StatsOperatorParameter(StatParam.Int16, (Int16)0);            
            op.Parameters[3] = new StatsOperatorParameter(StatParam.Int16, unchecked((Int16)SpecialAttrib.Rating));
            op.Parameters[4] = new StatsOperatorParameter(StatParam.Int64, rating);
            op.Parameters[5] = new StatsOperatorParameter(StatParam.Int16, unchecked((Int16)SpecialAttrib.AttachmentSize));
            op.Parameters[6] = new StatsOperatorParameter(StatParam.Int32, nAttachmentSize);
    
            return op;
        }
            
        static uint StatPost(ulong[] users, StatsOperator[] operators)
        {
            uint hr;
    
            StatsPostRequest req = new StatsPostRequest();
            req.TitleId = TITLE_ID;
            req.Operators = operators;
            
            XUIDAndTrust[] xuids = new XUIDAndTrust[users.Length];
            for (int i = 0; i < xuids.Length; i++)
            {
                xuids[i] = new XUIDAndTrust((ulong)users[i], 0, 0);
            }    
    
            Console.WriteLine("Send StatsPostRequest");
            
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
            xrlreq.RequestOb = req;
            xrlreq.Path = req.GetXRL();
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, (ulong)users[0], TITLE_ID, 0, 0).GetBase64EncodedString();
            xrlreq.RequestHeaders.Add(BundledAuthData.HTTP_HEADER_BUNDLED_AUTH_DATA, new BundledAuthData(TITLE_ID, xuids).GetBase64EncodedString());
            
            hr = xrlreq.Send();
            
            return hr;
        }
        
        
         // SHA1 object for computing blob hashes
        protected static SHA1 _sha1 = new SHA1CryptoServiceProvider();
       
        public uint WriteFile(bool fromConsole, ulong userId, ulong xboxId, string path, byte[] file)
        {
            uint hr = HResult.S_OK;

            WriteFileToken t = new WriteFileToken();
            t._operation = (ushort) Operation.FileWrite;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;
            
            t._tokenExpirationDate = 0;
            t._fileExpirationDate = (new DateTime(2333, 11, 15)).ToLocalTime().ToFileTime();
            t._maxFileSize = Int32.MaxValue;

            // only stats uses signed access tokens
            if ( path.StartsWith("//stats") )
            {
                XSigAuthData authData = new XSigAuthData();
                authData._titleID = TITLE_ID;
                authData._titleVersion = 1;
                authData._userID1 = userId;
                authData._userID2 = 0;
                authData._userID3 = 0;
                authData._userID4 = 0;
                authData._XboxID = xboxId;
                t.SignOnBehalf(XOService.Storage, authData);
            
                t.VerifySignature(XOService.Storage);
                t.VerifySignature();
                t._signatureSize = (ushort) t._signature.Length;
            }
            
            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            //t._signature = new byte[ProtocolConstants.sizeSignature];
            //t._signature[4] = 7;
            //t._signature[82] = 42;
            //t._signature[83] = 42;
            //t._signature[84] = 42;
            //t._signature[85] = 42;
            
            ReqHdrWriteFile msg     = new ReqHdrWriteFile();
            msg._titleId            = TITLE_ID;
            msg._titleVersion       = 1;
            msg._userCountryId      = 103;
            
            msg._compressionType    = 0;
            msg._contentType        = 0;
            msg._blobHash           = _sha1.ComputeHash(file);
            msg._blobSignature      = new byte[ProtocolConstants.sizeSignature];
            msg._blobSizeUncompressed = (uint) file.Length;
            msg._blobSize           = (uint) file.Length;
            msg._attributes         = new byte[] {42, 3, 5, 7, 11, 13, 17, 19};
            //msg._attributes         = new byte[999];
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;
            msg._teamTickets        = null;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);
            writer.Write(file);
            
            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            
            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;
            
                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);
            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;
                
                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;
                
                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();
                
                hr = req.Send();
                
            }                

            
                                                           
            return hr;
        }
        
        uint ReadFile(bool fromConsole, ulong userId, ulong xboxId, string path, out byte[] file)
        {
            file = null;
            
            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileRead;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._signature = null;
            
            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            ReqReadFile msg          = new ReqReadFile();
            msg._titleId             = TITLE_ID;
            msg._titleVersion        = 1;
            msg._userCountryId       = 103;
            msg._rangeStart          = 0;
            msg._rangeEnd            = 0;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;
            //msg._teamTickets         = _teamTickets;
            msg._teamTickets         = null;
            
            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;
            
            
            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;
                
                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);
                                                               
                if ( HResult.Succeeded(hr) )
                {
                    RepHdrReadFile rep      = new RepHdrReadFile();
                    memStream               = new MemoryStream(respbuf);
                    BinaryReader reader     = new BinaryReader(memStream);
                    rep.ReadFrom(reader);
                    
                    file = reader.ReadBytes((int)rep._blobSize);
                }
            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;
                
                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;
                
                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();
                
                hr = req.Send();
                
                if (HResult.Succeeded(hr))
                {
                    RepHdrReadFile rep      = new RepHdrReadFile();
                    memStream               = new MemoryStream(req.ResponseData);
                    BinaryReader reader     = new BinaryReader(memStream);
                    rep.ReadFrom(reader);
                    
                    file = reader.ReadBytes((int)rep._blobSize);
                }
                
            }                
                        
            return hr;

        }    
        
        uint RemoveFile(bool fromConsole, ulong userId, ulong xboxId, string path)
        {
            RemoveFileToken t  = new RemoveFileToken();
            t._operation = (ushort) Operation.FileRemove;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;

/*
            if ( path.StartsWith("//stats") )
            {
                if (StorageUnitest._verifyAccessTokens)
                {
                    XSigAuthData authData = new XSigAuthData();
                    authData._titleID = TITLE_ID;
                    authData._titleVersion = 1;
                    authData._userID1 = userId;
                    authData._userID2 = 0;
                    authData._userID3 = 0;
                    authData._userID4 = 0;
                    authData._XboxID = xboxId;
                    t.SignOnBehalf((XOService)Int32.MinValue, authData);
                    
                    t._signatureSize = ProtocolConstants.sizeSignature;
                    //t._signature = new byte[ProtocolConstants.sizeSignature];
                }
            }
*/
            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            ReqRemoveFile msg       = new ReqRemoveFile();
            msg._titleId            = TITLE_ID;
            msg._titleVersion       = 1;
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;
            
            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;
                
                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);
                                                               
            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;
                
                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;
                
                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();
                
                hr = req.Send();
                
            }                

            return hr;
        }

        uint EnumerateFiles(bool fromConsole, ulong xboxId, ulong userId, string path, uint start, uint end, out RepEnumerateFiles[] files)
        {
            files = null;
            
            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileEnumerate;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._signatureSize = 0;
            
            ReqEnumerateFiles msg    = new ReqEnumerateFiles();
            msg._titleId             = TITLE_ID;
            msg._titleVersion        = 1;
            msg._resultsStart        = start;
            msg._resultsEnd          = end;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;
            msg._userCountryId       = 103;

            MemoryStream memStream   = new MemoryStream();
            BinaryWriter writer      = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;
            
            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;
                
                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);

                if ( HResult.Succeeded(hr) )
                {
                    memStream = new MemoryStream(respbuf);
                    BinaryReader reader = new BinaryReader(memStream);
                    
                    uint totalFiles = reader.ReadUInt32();
                    uint numFiles = reader.ReadUInt32();
                    files = new RepEnumerateFiles[numFiles];
                    
                        
                    Console.WriteLine("XRLEnumerateFiles: totalFiles: " + totalFiles);
                    Console.WriteLine("XRLEnumerateFiles: numFiles: " + numFiles);
                    
                    for (int i=0; i<numFiles; i++)
                    {
                        files[i] = new RepEnumerateFiles();
                        files[i].ReadFrom(reader);
                        Console.WriteLine("XRLEnumerateFiles: file " + i + ": " + files[i].ToString());
                        Console.WriteLine("");
                    }
                    
                }
                                                               
            }
            else
            {
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;
                
                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;
                
                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();
                
                hr = req.Send();
                
                if ( HResult.Succeeded(hr) )
                {
                    memStream = new MemoryStream(req.ResponseData);
                    BinaryReader reader = new BinaryReader(memStream);
                    
                    uint totalFiles = reader.ReadUInt32();
                    uint numFiles = reader.ReadUInt32();
                    files = new RepEnumerateFiles[numFiles];
                    
                        
                    Console.WriteLine("XRLEnumerateFiles: totalFiles: " + totalFiles);
                    Console.WriteLine("XRLEnumerateFiles: numFiles: " + numFiles);
                    
                    for (int i=0; i<numFiles; i++)
                    {
                        files[i] = new RepEnumerateFiles();
                        files[i].ReadFrom(reader);
                        Console.WriteLine("XRLEnumerateFiles: file " + i + ": " + files[i].ToString());
                        Console.WriteLine("");
                    }
                    
                }
            }                
            
            return hr;
        }                       
        
        
        
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\deprovisionStats\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\LongRunningTest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\Installer.cs ===
using System;
using System.ComponentModel;

using xonline.common.installer;
using xonline.common.mgmt;

namespace xonline.marketplace
{
    [RunInstaller(true)]
    public class MarketplaceInstaller : XomConfiguratorInstall
    {
    }

    [RunInstaller(true)]
    public class MarketplacePerformanceCounterInstaller : XomPerformanceCounterInstall
    {
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cronlib\ICronJob.cs ===
// 
// ICronJob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Web;
using System.Text;
using System.Collections;
using xonline.common.service;

namespace xonline.server.cron.plugins.cronlib 
{
    public interface ICronJob
    {
        void Execute(uint jobId, uint titleId, ref Hashtable args);

        bool ShareHealthBlock
        {
            get;
        }
    }

    public interface ICronJobCommand
    {
        HResult Command(Hashtable args, HttpResponse response);
        HResult Command(Hashtable args, StringBuilder response, uint reqId);
    }

    public class CronJobException : Exception, IRetryableException
    {
        public CronJobException() : base() {}
        public CronJobException(bool retry) : base() 
        {
            _retry = retry;
        }
        public CronJobException(bool retry, string error) : base(error)
        {
            _retry = retry;
        }
        public CronJobException(bool retry, string error, Exception inner) : base(error, inner)
        {
            _retry = retry;
        }

        public bool IsRetryable
        {
            get { return _retry; }
        }
            
        public bool Retry
        {
            get { return _retry; }
            set { _retry = value; }
        }
        
        public override string ToString()
        {
            return base.ToString() + "\r\nRetry: " + Retry;
        }    

        private bool _retry = true;
        
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\cronlib\CronJobExtender.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Threading;

using xonline.common.service;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.sql.sqlclient;

namespace xonline.server.cron.plugins.cronlib
{  
    /// <summary>
    /// Deletegate for handling interrupt changes
    /// </summary>
    /// <param name="o">Object where interrupt is changing</param>
    /// <param name="args">Event arguments</param>
    public delegate void InterruptHandler(object o, InterruptEventArgs args);
   
    /// <summary>
    /// Event arguments for Interrupts
    /// </summary>
    public class InterruptEventArgs : EventArgs
    {
        public bool Interrupted;
        public InterruptEventArgs(bool interrupted)
        {
            this.Interrupted = interrupted;
        }
    }

    /// <summary>
    /// Base implementation class for cron job instances
    /// </summary>
    public abstract class CronJobExtender : ICronJob
    {       
        private bool _interrupted = false;
        private bool _isCurrentlyRunning = false;
        private object lockObject = new object();

        // Interrupt handler
        public event InterruptHandler InterruptEvent;

        /// <summary>
        /// Indicates that the job should cleanly exit
        /// </summary>
        protected bool Interrupted
        {
            get { return _interrupted; }
        }

        /// <summary>
        /// Fires event indicating that an Interrupt has occurred
        /// </summary>
        /// <param name="o"></param>
        private void FireInterruptEvent(object o)
        {
            if (InterruptEvent != null)
            {
                InterruptEvent(o, new InterruptEventArgs( _interrupted));
            }
        }

        /// <summary>
        /// Sets _interrupted flag to allow continued execution
        /// </summary>
        /// <param name="jobId">JobId of running cron instance</param>
        public void Start(uint jobId)
        {
            if (!_isCurrentlyRunning)
            {
                lock (lockObject) // only allow one caller to start the keep alive thread
                {
                    _interrupted = false;
                    _isCurrentlyRunning = true;
                    ThreadPool.QueueUserWorkItem(new WaitCallback(KeepAlive), jobId);
                }
            }
        }

        /// <summary>
        /// Clears _interrupted and _isCurrentlyRunning flag to allow graceful exit of all threads
        /// </summary>
        public void Stop()
        {
            _isCurrentlyRunning = false;
            _interrupted = false;
        }

        /// <summary>
        /// Implementation of Execute method from ICronJob which is virtual to force implementing class to override
        /// </summary>
        /// <param name="jobId">JobId of cron instance running</param>
        /// <param name="titleId">TitleId of cron instance running</param>
        /// <param name="args">XML arguments converted to hashtable</param>
        public virtual void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            // Meant to be overriden
        }

        /// <summary>
        /// Keeps the cron execution task running. If the enabled flag is ever flipped, stop execution.
        /// If we are told to stop runnning (_isCurrentlyRunning), we also will stop the thread.
        /// </summary>
        /// <param name="o">Job instance identifier</param>
        public void KeepAlive(object o)
        {
            uint jobId = (uint)o;

            int sleepInterval = Config.GetIntSetting(Setting.cron_jobCheckInterval) / 2;            
            try
            {
                while (_isCurrentlyRunning && !_interrupted)
                {
                    Thread.Sleep(sleepInterval);
                    using (SqlClient sc = new SqlClient(Interface.npdb))
                    {
                        sc.StoredProc = "dbo.p_cron_keep_alive";
                        sc.AddParameter("@i_job_id", jobId);

                        using (SqlDataReader reader = sc.Execute())
                        {
                            if (reader.Read())
                            {
                                // Save the previous state of Interrupt
                                bool previousInterrupted = _interrupted;
                                _interrupted = reader.GetByte(reader.GetOrdinal("b_enabled")) == 0;
                                // If the state has changed, fire an event
                                if (previousInterrupted != _interrupted)
                                {
                                    FireInterruptEvent(this);
                                }
                                _isCurrentlyRunning = reader.GetInt32(reader.GetOrdinal("ti_currently_running")) == 1;
                            }
                            else
                            {
                                throw new Exception("p_cron_keep_alive failed to return enabled status for jobId = " + jobId);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.CRON_JOB_FAILURE, e, "Failed to keep this job instance alive, jobId = {0}", jobId);
            }
        }

        protected void SetEnable(string state)
        {
            int enableState;
            if (state.Equals("false", StringComparison.InvariantCultureIgnoreCase))
            {
                enableState = 0;
            }
            else if (state.Equals("true", StringComparison.InvariantCultureIgnoreCase))
            {
                enableState = 1;
            }
            else
            {
                return;
            }

            using (SqlClient cmd = new SqlClient(Interface.npdb))
            {
                cmd.StoredProc = "dbo.p_cron_set_enabled";
                cmd.AddParameter("@vc_class", GetType().ToString());
                cmd.AddParameter("@b_enabled", enableState);
                cmd.ExecuteNonQuery();
            }
        }

        public virtual bool ShareHealthBlock
        {
            get { return false; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\LongRunningTest\LongRunningTest.cs ===
using System;
using System.Web;
using System.Collections;
using System.Data;
using System.Xml;
using System.Collections.Generic;
using System.Threading;

using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.common.service;
using xonline.common.config;
using System.Data.SqlClient;

namespace xonline.server.cron.plugins.LongRunningTest
{
    /// <summary>
    /// Main class for testing long running processes
    /// </summary>
    public class LongRunningTest : CronJobExtender, ICronJobCommand
    {
        public override bool ShareHealthBlock
        {
            get { return false; }
        }

        public override void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            base.Start(jobId);

            int totalExecutions = args["totalexecutions"] == null ? 10 : (Int32)args["totalexecutions"];

            while (!Interrupted && totalExecutions > 0)
            {
                if (args["sleeptime"] != null)
                {
                    Thread.Sleep((Int32)args["sleeptime"]);
                }
                else
                {
                    Thread.Sleep(5 * 1000); // 5 second default sleeptime
                }

                --totalExecutions;
            }

            base.Stop();
        }

        public HResult Command(Hashtable args, HttpResponse response)
        {
            switch (((string)args["op"]).ToLower())
            {
                case "setenable":
                    SetEnable((string)args["value"]);
                    response.Write(String.Format("Successfully processed command: [{0}], time:[{1}]", args["op"], DateTime.Now));
                    break;
                default:
                    response.Write(String.Format("Unknown command: [{0}], time:[{1}]", args["op"],DateTime.Now));
                    return HResult.E_INVALIDARG;
            }

            return HResult.S_OK;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregationTest\MsnRRAggregationTest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\deprovisionStats\deprovisionStats.cs ===
// 
// ProvisionDeprovisionStats.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service


// BUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUG
//
//              THIS IS UNTESTED CODE
//  deprovisioning was cut from xbox 360 launch.  This is simply being
//  checked in so the existing work isn't lost.
//
// BUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUGBUG


using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Diagnostics;
using System.Text;
using System.IO;

using xonline.common.mgmt;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.config;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.server.cron.plugins.provisioning;

[assembly: XomAreaDefinition(XomAreaName.provisioning)]

namespace xonline.server.cron.plugins.DeprovisionStats
{

    //NOTE: You must implement ICronJob, but also must have cronlib.dll as a source to get 
    // the correct class reference, otherwise it won't pass the (yourjob is ICronJob) test in cronfd 
    public class DeprovisionStatsJob : ICronJob
    {
        public override bool ShareHealthBlock
        {
            get { return false; }
        }


        public void Execute(uint jobID, uint titleId, ref Hashtable args)
        {

            //log this to let the world know we got called
            Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, "DeprovisionStatsJob Plug-In was called - jobID: " + jobID + " titleID: " + titleId + " args: " + PluginUtil.HashtableToXml( args ) );

            //the XML string should always have EventID, PUID and ComponentID
            if ( args.Count < 3 )
            {
                throw new ApplicationException( "Code Bug: An insufficient number of arguments was supplied to deprovisionStats Plug-in." );
            }

            //take advantage of short-circuit logic evaluation
            //if not ( all values are good )
            if ( !
                (
                ( 
                args.ContainsKey( ProvConst.EventID ) && ( args[ ProvConst.EventID ].ToString().Length > 0 ) 
                ) &&

                ( 
                args.ContainsKey( ProvConst.PUIDKey ) && ( args[ ProvConst.PUIDKey ].ToString().Length > 0 ) 
                ) &&

                ( 
                args.ContainsKey( ProvConst.bstrServiceComponentId ) && ( args[ ProvConst.bstrServiceComponentId ].ToString().Length > 0 ) 
                ) 
                )
                )
            {
                throw new ApplicationException( ArgsString( args ) );
            }

            //the enum variable can be assigned to weird values, so we check the value
            ProvisioningEvent evt = ProvisioningEvent.InvalidEvent;
            evt = (ProvisioningEvent) args[ ProvConst.EventID ];

            if ( ( evt <= ProvisioningEvent.InvalidEvent ) || ( evt >= ProvisioningEvent.MaxEvent ) )
            {
                throw new ApplicationException( ArgsString( args ) );
            }

            Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, "DeprovisionStatsJob executed a " + evt + " job. Params were: " + ArgsString( args ) );
            
            switch ( evt )
            {
                case ProvisioningEvent.Provision:
                    //ignore
                    break;
                case ProvisioningEvent.Disable:
                    //ignore
                    break;
                case ProvisioningEvent.Enable:
                    //ignore
                    break;
                case ProvisioningEvent.Deprovision:
                    RemoveStatsForUser((ulong)args[ProvConst.PUIDKey]);
                    break;
            }
        } // execute

        
        public static string ArgsString( Hashtable argsIn )
        {    
            StringBuilder sb = new StringBuilder( " Args passed in had " + argsIn.Count + " items and they are: \n", 200 );

            foreach (object o in argsIn.Keys )
            {
                sb.Append( "  Key " + o + "  Value: " + argsIn[o] );
            }

            return sb.ToString();
        }
        
        public static void RemoveStatsForUser(ulong userId)
        {
            // get the list of titles this user has played
            uint[] titlesPlayed = GetTitlesPlayed(userId);
            
            foreach (uint titleId in titlesPlayed)
            {
                TitleConfig tcfg = TitleConfig.GetTitle(titleId);
                if (tcfg == null)
                    continue;
                    
                for (int i = 0; i < tcfg.Leaderboards.Count; i++)
                {
                    RemoveUserStats(titleId, ((Leaderboard)tcfg.Leaderboards[i]).Id, userId);
                }
            }
        }            
                
        public static uint[] GetTitlesPlayed(ulong userId)
        {
            EnumTitlesRequest req = new EnumTitlesRequest(userId, userId, 0, UInt16.MaxValue);
            EnumTitlesResponse resp = new EnumTitlesResponse();
            uint[] titles;
            HResult hr;
            
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.Path = req.GetXRL();
            xrlreq.RequestOb = req;
            xrlreq.ResponseOb = resp;
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, userId, XOn.XENON_DASH_TITLE_ID, 0, 0).GetBase64EncodedString();
            
            hr = xrlreq.Send();
            if (HResult.Failed(hr))
            {
                throw new ApplicationException("Getting list of titles failed!  hr = " + hr);
            }
            
            titles = new uint[resp.Titles.Length];
            for (int i = 0; i < resp.Titles.Length; i++)
            {
                titles[i] = resp.Titles[i].TitleId;
            }        
            
            return titles;            
        }
        
        public static void RemoveUserStats(uint titleId, uint lbId, ulong userId)
        {
            MsgReset msg = new MsgReset();
            msg.titleId = titleId;
            msg.userId = userId;
            msg.leaderBoardType = lbId;
            
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            msg.WriteTo(writer);
            
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
            xrlreq.PostData = stream.ToArray();
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, userId, titleId, 0, 0).GetBase64EncodedString();
            xrlreq.Path = "/xstats/xstatsreset.ashx";
            
            HResult hr = xrlreq.Send();
            if (HResult.Failed(hr))
            {
                throw new ApplicationException("Failed to remove user's stats from title " + titleId.ToString("x8") + 
                    " leaderboard " + lbId.ToString("x") + "!  hr = " + hr);
            }
        }
        

    } // class DeprovisionStatsJob



} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\PerfCounters.cs ===
/*
 * PerfCounters.cs
 *
 * Ratings Performance Counter objects
 *
 * Copyright (c) Microsoft Corporation. All Rights Reserved.
 */


using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.installer;
using xonline.common.config;

[assembly: XomIisInstallerAttribute(Interface.cron_int)]

namespace xonline.server.cron.plugins.MSNRRAggregation
{
    /// <summary>
    /// External service communication counters.
    /// </summary>
    [XomPerformanceCounterCategoryAttr( "Cron FD: MSNRR Service Communication Counters", "Xbox Live: MSN Rating Averages plugin-External Communication Counters" )]
    public class SvcCommunicationCounters : XomPerformanceCounterCategory
    {
        static public SvcCommunicationCounters Counters = new SvcCommunicationCounters();

        [XomPerformanceCounterAttr(
        "MSNGetAverages: requests/sec",
        "The number of requests per second made to the MSNGetAverages webservice in the lifespan of the current AppDomain.",
        PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter MSNGetAveragesRequestsPerSecond;

        [XomPerformanceCounterAttr(
        "MSNGetAverages: total requests",
        "Total requests made to the MSN GetAverages webserive in the lifespan of the current AppDomain.",
        PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter MSNGetAveragesRequestsTotal;
    }

    [XomPerformanceCounterCategoryAttr( "Cron FD: MSNRR Content Type Counters", "Xbox Live: MSN Rating Averages plugin-contentType counters" )]
    public class ContentTypeCounters : XomPerformanceCounterCategory
    {
        static public ContentTypeCounters Counters = new ContentTypeCounters();

        public ContentTypeCounters this[string mediatype]
        {
            get
            {
                return (ContentTypeCounters)GetInstance(mediatype);
            }
        }

        // Counters for the last run
        [XomPerformanceCounterAttr(
        "MSNGetAverages: average batch size (last run)",
        "The average batch size for the content type on the last run.",
        PerformanceCounterType.AverageCount64)]
        public PerformanceCounter AverageBatchSizeLastRun;

        [XomPerformanceCounterAttr(
        "MSNGetAverages: average batch size (last run) base",
        "Base counter for average batch size for the content type on the last run.",
        PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageBatchSizeLastRunBase;

        [XomPerformanceCounterAttr(
        "MSNGetAverages: number of batches (last run)",
        "The number of batches retrieved for content type on the last run.",
        PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter NumberOfBatchesLastRun;

        // Counters for ALL TIME
        [XomPerformanceCounterAttr(
        "MSNGetAverages: average batch size (all time)",
        "The average batch size for the content type over all prior runs.",
        PerformanceCounterType.AverageCount64)]
        public PerformanceCounter AverageBatchSizeAllTime;

        [XomPerformanceCounterAttr(
        "MSNGetAverages: average batch size (all time) base",
        "Base counter for average batch size for the content type over all time.",
        PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageBatchSizeAllTimeBase;

        [XomPerformanceCounterAttr(
        "MSNGetAverages: number of batches (all time)",
        "The number of batches retrieved for content type over all time.",
        PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter NumberOfBatchesAllTime;

        // Execution times ...
        [XomPerformanceCounterAttr(
        "MSNGetAverages avg. execution time",
        "MSNGetAverages average request execution time in the current AppDomain.",
        PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageExecutionTime;

        [XomPerformanceCounterAttr(
        "MSNGetAverages avg. execution time base",
        "MSNGetAverages base for the average request execution time in the current AppDomain.",
        PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageExecutionTimeBase;

       
    }
    //TODO : Add client specific performance counters.
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\provisioning\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregation\MSNRRAverages.cs ===
using System;
using System.Collections;
using System.Data;
using System.Xml;
using System.Collections.Generic;
using System.Threading;
using System.Linq;

using xonline.common.plugins;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.common.msnrr;
using xonline.common.venturarr;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.mgmt;
using System.Data.SqlClient;
using System.Text.RegularExpressions;


[assembly: XomAreaDefinition(XomAreaName.msnrraggregationlog)]
[assembly: XomAreaDefinition(XomAreaName.msnrraggregationtrace)]

namespace xonline.server.cron.plugins.MSNRRAggregation
{
    /// <summary>
    /// Main class for Cron Rating Averages job Aggregation
    /// </summary>
    public class MSNRRAverages : ICronJob
    {
        /// <summary>
        /// private variable to hold the content Types
        /// </summary>
        private Dictionary<Int32, Guid> contentTypeMapping = null;
        /// <summary>
        /// Readonly object for synchronization of contentType Dicitonary
        /// </summary>
        private readonly object lockcontentTypesyncRoot = new object();
        /// <summary>
        /// maxRatingcount allowed
        /// </summary>
        private Int32 maxRatingCount = -1;
        /// <summary>
        /// Flagto check Initialization
        /// </summary>
        private bool isInitialized = false;
        /// <summary>
        /// override for MSN Url. This is to be used as a test hook
        /// </summary>
        private string alternateSessionUrl = string.Empty;
        /// <summary>
        /// delegate for event notification
        /// </summary>
        /// <param name="context"></param>
        public delegate void JobCompleted(ContentTypeProcessingContext[] context);
        /// <summary>
        /// delegate for event notification
        /// </summary>
        /// <param name="context"></param>
        public delegate void JobFailed(ContentTypeProcessingContext[] context);
        /// <summary>
        /// Event for Onjobcomplete
        /// </summary>
        public event JobCompleted OnJobComplete = null;
        /// <summary>
        /// Event for OnJobFailed
        /// </summary>
        public event JobFailed OnJobFailed = null;

        public bool ShareHealthBlock
        {
            get { return false; }
        }

        /// <summary>
        /// Method to Initialize the data
        /// </summary>
        private void InitData()
        {
            InitData(null, -1);
        }
        /// <summary>
        /// make sure to call this before calling Execute if you want to override data
        /// </summary>
        public void InitData(string testOverrideContentTypeMapping, int testOverrideMaxRatingCount)
        {
            string contentType = testOverrideContentTypeMapping;
            maxRatingCount = testOverrideMaxRatingCount;

            if (string.IsNullOrEmpty(contentType))
            {
                contentType = Config.GetSetting(Setting.ratings_contenttype_mapping);
            }

            if (maxRatingCount < 0)
            {
                SetMaxRatingCount();
            }

            if (contentTypeMapping == null)
            {
                contentTypeMapping = new Dictionary<Int32, Guid>();
            }

            LoadContentTypeMapping(contentType);
            isInitialized = true;
        }


        /// <summary>
        /// Sets the alternate session url
        /// </summary>
        /// <param name="url"></param>
        public void SetAlternateSessionUrl(string url)
        {
            this.alternateSessionUrl = url;
        }
        /// <summary>
        /// Gets the max rating count
        /// </summary>
        /// <returns></returns>
        private void SetMaxRatingCount()
        {
            try
            {
                maxRatingCount = Convert.ToInt32(Config.GetSetting(Setting.ratings_max_allowable_reviewcount));
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_CRON_NPDB_SETTING_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, string.Format("Error retrieving npdb setting {0}.Exception Text is {1}:", Setting.ratings_max_allowable_reviewcount, ex.ToString()));
            }
        }
        /// <summary>
        /// Load the contentType XML into a dictionary
        /// </summary>
        /// <param name="contentTypeXml"></param>
        private void LoadContentTypeMapping(string contentTypeXml)
        {
            try
            {
                lock (lockcontentTypesyncRoot)
                {
                    contentTypeMapping.Clear();
                    XmlDataDocument xmlDoc = new XmlDataDocument();
                    xmlDoc.LoadXml(contentTypeXml);
                    XmlNodeList xmlNodeList = xmlDoc.SelectNodes("root/contentTypeMapping");
                    foreach (XmlNode var in xmlNodeList)
                    {
                        contentTypeMapping.Add(Convert.ToInt32(var.Attributes["mediatype"].Value), new Guid(var.Attributes["contentTypeId"].Value));
                    }
                }
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_CONTENTTYPE_SETTING_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, string.Format("Error converting the contentTypeMapping values from Config.Exception Text is {0}:", ex.ToString()));
            }
        }
        #region ICronJob Members
        /// <summary>
        /// Execute Implementation for Icronjob interface
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="titleId"></param>
        /// <param name="args"></param>
        public void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            ManualResetEvent[] contentTypeReset = null;
            ContentTypeProcessingContext[] contentTypeAveragesContext = null;

            //Initialize Data required
            if (!isInitialized)
            {
                InitData();
            }

            //Use Venturarr for Aggregates 
            if (Config.GetBoolSetting(Setting.ratings_aggregate_use_ventura))
            {
                contentTypeAveragesContext = new ContentTypeProcessingContext[1];

                // Create the context class. This is used to pass data to the class when
                // processing and to get data back
                ContentTypeProcessingContext context = new ContentTypeProcessingContext();

                // Create a new instance of the 'ContentTypeAverage' class to handle the processing of
                // this content type (media type).
                ContentTypeAverage ratingAverage = new ContentTypeAverage(0, Guid.Empty, maxRatingCount);
                contentTypeAveragesContext[0] = context;

                ratingAverage.GetVenturaRatingAverages(context);
            }
            //Use MSNrr for Aggregates
            else
            {
                lock (lockcontentTypesyncRoot)
                {
                    contentTypeReset = new ManualResetEvent[contentTypeMapping.Count];
                    contentTypeAveragesContext = new ContentTypeProcessingContext[contentTypeMapping.Count];
                    Int32 index = 0;

                    foreach (KeyValuePair<Int32, Guid> item in contentTypeMapping)
                    {
                        // Create the context class. This is used to pass data to the class when
                        // processing and to get data back
                        ContentTypeProcessingContext context = new ContentTypeProcessingContext();
                        context.AlternateSessionUrl = this.alternateSessionUrl;
                        context.MediaTypeId = item.Key;

                        // Create a new instance of the 'ContentTypeAverage' class to handle the processing of
                        // this content type (media type).
                        ContentTypeAverage ratingAverage = new ContentTypeAverage(item.Key, item.Value, maxRatingCount);
                        contentTypeAveragesContext[index++] = context;

                        ratingAverage.GetRatingAverages(context);
                    }
                }
            }

            ContentTypeProcessingContext errorContext = Array.Find(contentTypeAveragesContext,
                                            delegate(ContentTypeProcessingContext c) { return (c.IsJobCompletewithError == true); });
            if (errorContext != null)
            {
                Xom.NtEvent(XEvent.Id.XONLINE_E_RATINGS_CRON_JOB_FAILED,
                    string.Format("Get Rating averages job failed"));

                //the event is a way to access context information for any further processign based on results
                if (OnJobFailed != null)
                {
                    OnJobFailed(contentTypeAveragesContext);
                }
            }
            else
            {
                Xom.NtEvent(XEvent.Id.XONLINE_E_RATINGS_CRON_JOB_SUCCESS,
                    string.Format("Get Rating averages job succeeded"));
                if (OnJobComplete != null)
                {
                    OnJobComplete(contentTypeAveragesContext);
                }
            }
        }
    }
        #endregion

    /// <summary>
    /// Class for getting contentType Averages
    /// </summary>
    public class ContentTypeAverage
    {
        /// <summary>
        /// private variable for contentType Guid
        /// </summary>
        private Guid contentType = Guid.Empty;
        /// <summary>
        /// private variable for mediaTypeId
        /// </summary>
        private Int32 mediaTypeId = 1;
        /// <summary>
        /// max rating count variable
        /// </summary>
        private Int32 maxRatingCount = -1;
        /// <summary>
        /// string representation of mediatypeid
        /// </summary>
        private string mediaTypeString = string.Empty;
        /// <summary>
        /// OverLoaded Constructor
        /// </summary>
        /// <param name="contentType"></param>
        /// <param name="doneAverage"></param>
        public ContentTypeAverage(Int32 mediaTypeId, Guid contentType, Int32 maxRatingCount)
        {
            this.contentType = contentType;
            this.mediaTypeId = mediaTypeId;
            this.maxRatingCount = maxRatingCount;
            this.mediaTypeString = mediaTypeId.ToString();
        }
        /// <summary>
        /// Saves the xmlNodelist to MSN
        /// </summary>
        /// <param name="xmlNodeList"></param>
        private void SaveRatingAverages(XmlNode xmlNodeList)
        {
            string averageXml = xmlNodeList.OuterXml;
            string unProcessedRecordsXml = string.Empty;
            int unprocessedRecordsCount = 0;
            try
            {
                using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                {
                    // This gets all the configs sorted in order of config
                    client.StoredProc = "dbo.RatingAveragesSave";
                    client.AddParameter("@ratingAverageXml", averageXml);
                    client.AddParameter("@maxRatingCount", this.maxRatingCount);
                    client.AddParameter("@mediatypeId", this.mediaTypeId);
                    client.AddParameter(ParameterDirection.Output, "@unProcessedRecordsXml", unProcessedRecordsXml, -1);
                    client.AddParameter(ParameterDirection.Output, "@unprocessedRecordsCount", unprocessedRecordsCount);
                    client.AddParameter(ParameterDirection.ReturnValue, "@hr", 0);
                    client.ExecuteNonQuery();
                    unProcessedRecordsXml = client.GetStringParameter("@unProcessedRecordsXml");
                    unprocessedRecordsCount = client.GetIntParameter("@unprocessedRecordsCount");
                }
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_CRON_SAVE_AVERAGE_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, string.Format("Error occured  saving rating averages for mediatype {0}.Actual exception text is {1}", mediaTypeString, ex.ToString()));
            }
            finally
            {
                //Log the api call
                //Not logging the unprocessed record count as the unprocessed record xml itself is being logged.
                string szLog = string.Join("|", new string[]
                    {
                        "RatingAveragesSave",
                        averageXml.ToString(),
                        mediaTypeString,
                        contentType.ToString(),
                        (string.IsNullOrEmpty(unProcessedRecordsXml))?"None":unProcessedRecordsXml,
                    });
                Xom.Log(XomAreaName.msnrraggregationlog, szLog);
            }
        }
        /// <summary>
        /// Retrieve the transactiondate for mediatype
        /// </summary>
        /// <param name="mediaTypeId"></param>
        /// <returns></returns>
        private DateTime GetTransactionDate(Int32 mediaTypeId)
        {
            DateTime dtReturn = DateTime.MinValue;
            try
            {
                using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                {
                    // This gets all the configs sorted in order of config
                    client.StoredProc = "dbo.RatingTransactionDateGet";
                    client.AddParameter("@mediaTypeId", mediaTypeId);
                    client.AddParameter(ParameterDirection.ReturnValue, "@hr", 0);
                    using (SqlDataReader r = client.Execute())
                    {
                        while (r.Read())
                        {
                            if (!r.IsDBNull(r.GetOrdinal("lastRetrievedDate")))
                            {
                                dtReturn = r.GetDateTime(r.GetOrdinal("lastRetrievedDate")); ;
                            }
                            else
                            {
                                dtReturn = DateTime.MinValue;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, string.Format("Error occured  retireving transaction date {0} for mediatypeid {1}.Actual Exception text is {2}", dtReturn.ToString(), mediaTypeString, ex.ToString()));
            }
            finally
            {
                string szLog = string.Join("|", new string[]
                        {
                            "GetRatingTransactionDate",
                            dtReturn.ToString(),
                            mediaTypeString,
                            contentType.ToString()
                        });
                Xom.Log(XomAreaName.msnrraggregationlog, szLog);
            }
            return dtReturn;
        }

        /// <summary>
        /// Retrieve the transactiondate for mediatype
        /// </summary>
        /// <param name="mediaTypeId"></param>
        /// <returns></returns>
        private void SaveTransactionDate(Int32 mediaTypeId, DateTime transactionDate)
        {
            try
            {
                using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                {
                    // saves the transaction date
                    client.StoredProc = "dbo.RatingTransactionDateSave";
                    client.AddParameter("@mediaTypeId", mediaTypeId);
                    client.AddParameter("@transactionDate", transactionDate);
                    client.AddParameter(ParameterDirection.ReturnValue, "@hr", 0);
                    client.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_CRON_TRANSACTION_DATE_SAVE_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, string.Format("Error occured  saving transaction date for mediatypeid {0}.Actual exception text is {1}", mediaTypeString, ex.ToString()));
            }
            finally
            {
                string szLog = string.Join("|", new string[]
                    {
                        "RatingTransactionDateSave",
                        mediaTypeString,
                        contentType.ToString(),
                        transactionDate.ToString()
                    });
                Xom.Log(XomAreaName.msnrraggregationlog, szLog);
            }
        }

        /// <summary>
        /// Method to retrieve the aggregate ratings for all media of all types, across all not-yet-processes lists from VenturaRR
        /// </summary>
        /// <param name="processingContext">Context information to be passed in and out for a given invocation</param>
        public void GetVenturaRatingAverages(Object processingContext)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ContentTypeProcessingContext context;
            string currentListId = null;
            string previousListId = null;
            string ratingIdRegex = Config.GetSetting(Setting.ratings_aggregate_ventura_listIdRegex);

            // Get the context, validating that it is non-null
            if (processingContext == null)
            {
                Xom.NtEvent(XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, "Processing context is null.Returning without doing any work");
                return;
            }
            else
            {
                context = (ContentTypeProcessingContext)processingContext;
            }

            try
            {
                using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                {
                    // gets the last ListId injested in a previous aggregation run
                    client.StoredProc = "dbo.VenturaAggregateRatingInfoGet";
                    previousListId = (string)client.ExecuteScalar();
                }//end using

                Int32 batchSize = 0;

                // prime the counters
                ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesLastRun.RawValue = 0;

                bool previousListIdNotReached = true;
                int listCount = 0; // starting point
                while (previousListIdNotReached)
                {
                    MediaList ml = VenturaRRClient.GetRatingAveragesListOfLists(listCount.ToString(), "1").FirstOrDefault(); // gets one value

                    if ((ml == null) || (ml.Id == previousListId))
                    {
                        previousListIdNotReached = false;
                        break;
                    }

                    //skipping list if does not pass ID validation
                    Match validateId = Regex.Match(ml.Id, ratingIdRegex, RegexOptions.IgnoreCase);

                    if (validateId.Success)
                    {
                        MediaList mlData = VenturaRRClient.GetRatingAveragesList(ml.Id);

                        //Log the api call
                        string szLog = string.Join("|", new string[]
                            {
                                "GetAverageRatingsfromVentura",
                                 this.contentType.ToString(),
                                 ml.Id,
                                 listCount.ToString()
                            });
                        Xom.Log(XomAreaName.msnrraggregationlog, szLog);
                        
                        //Increment the Service Counters
                        SvcCommunicationCounters.Counters.MSNGetAveragesRequestsPerSecond.Increment();
                        SvcCommunicationCounters.Counters.MSNGetAveragesRequestsTotal.Increment();
                        
                        // Each item represents a rating aggregate which we will put in the Ventura rating aggregate table
                        foreach (Item i in mlData.Items)
                        {
                            try
                            {
                                string[] identifier = i.Id.Split('_'); // ID is in the format of mediaid_countrycode
                                if (identifier.Count() != 2)
                                {
                                    throw new FormatException(string.Format("Item.Id [{0}], does not match the MediaId_CountryCode format", i.Id));
                                }
                                Guid mediaId = new Guid(identifier[0]); // mediaId
                                string countryCode = identifier[1]; // countryCode

                                float ratingAggregate;
                                DateTime lastRatedDate;
                                int numberOfRatings;

                                float.TryParse(i.Properties.Where(x => x.Name == "Rating").FirstOrDefault().Value, out ratingAggregate);
                                ratingAggregate = ratingAggregate * 5; //ratingAggregate

                                DateTime.TryParse(i.Properties.Where(x => x.Name == "LastRated").FirstOrDefault().Value, out lastRatedDate); // lastRatedDate
                                Int32.TryParse(i.Properties.Where(x => x.Name == "Count").FirstOrDefault().Value, out numberOfRatings); //numberOfRatings

                                if(numberOfRatings >= maxRatingCount)
                                {
                                    using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                                    {
                                        // saves the transaction date
                                        client.StoredProc = "dbo.VenturaRatingAveragesSave";
                                        client.AddParameter("@mediaId", mediaId);
                                        client.AddParameter("@countryCode", countryCode);
                                        client.AddParameter("@ratingAggregate", ratingAggregate);
                                        client.AddParameter("@numberOfRatings", numberOfRatings);
                                        client.AddParameter("@lastRatedDate", lastRatedDate);
                                        client.ExecuteNonQuery();
                                    }//end using

                                }

                                //tracking that this is the most current list has been injested into RawCatalogDb
                                if (currentListId == null)
                                {
                                    currentListId = ml.Id;
                                }

                            }
                            catch (FormatException)
                            {
                                //skip cases in which the ID format didn't match MediaId_CountryCode, 
                            }
                        }//end foreach

                        if (mlData != null)
                        {
                            batchSize = mlData.Items.Count;
                            
                            // update the counters for this run
                            ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeLastRun.IncrementBy(batchSize);
                            ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeLastRunBase.Increment();
                            ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesLastRun.Increment();

                            // update the 'all-time' counters
                            ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeAllTime.IncrementBy(batchSize);
                            ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeAllTimeBase.Increment();
                            ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesAllTime.Increment();
                        }
                        
                    }//end if validateId

                    listCount++;
                }//end while

                //Save last injested listId to RawCatalogDB
                if (currentListId != null)
                {
                    using (SqlClient client = new SqlClient(Interface.ContentIngestionCatalogDB))
                    {
                        client.StoredProc = "dbo.VenturaAggregateRatingInfoSave";
                        client.AddParameter("@listId", currentListId);
                        client.ExecuteNonQuery();
                    }//end using
                }

            }//end try
            catch (Exception e)
            {
                ExceptionWithEventId exceptionToLog = null;
                if (e is ExceptionWithEventId)
                {
                    exceptionToLog = (ExceptionWithEventId)e;
                }
                else
                {
                    exceptionToLog = new XRLException(HResult.XONLINE_E_RATINGS_CRON_UNKNOWN_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR,
                    string.Format("Unknown error in retrieving averages from Ventura API. Actual Exception is : {0}", e.ToString()));
                }

                //set the Exception into context and log it in Eventlog.Also set the job completion flag
                context.Exception = exceptionToLog;
                context.IsJobCompletewithError = true;

                Xom.NtEvent(exceptionToLog.EventId, exceptionToLog, exceptionToLog.Message);
            }
            finally
            {
                //Log the api call
                //Not logging the unprocessed record count as the unprocessed record xml itself is being logged.
                string szLog = string.Join("|", new string[]
                    {
                        "RatingAverageBatchCompletionVentura",
                        timeElapsed.MillisecondsElapsed.ToString(),
                        mediaTypeString,
                        contentType.ToString(),
                    });
                Xom.Log(XomAreaName.msnrraggregationlog, szLog);
                ContentTypeCounters.Counters[mediaTypeString].AverageExecutionTime.IncrementBy(timeElapsed.TimeElapsed);
                ContentTypeCounters.Counters[mediaTypeString].AverageExecutionTimeBase.Increment();
            }
        }

        /// <summary>
        /// Method to retrieve the aggregate ratings for media of a particular type (aka 'content type' 
        /// using MSN R&R terminology).
        /// </summary>
        /// <param name="processingContext">Context information to be passed in ant out for a given invocation</param>
        public void GetRatingAverages(Object processingContext)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ContentTypeProcessingContext context = null;
            try
            {

                // Get the context, validating that it is non-null
                if (processingContext == null)
                {
                    Xom.NtEvent(XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR, "Processing context is null.Returning without doing any work");
                    return;
                }
                else
                {
                    context = (ContentTypeProcessingContext)processingContext;
                }

                XmlNode result = null;
                string transactionToken = string.Empty;
                DateTime transactionStartTime = DateTime.Now;
                Int32 batchSize = 0;
                DateTime fromDate = GetTransactionDate(this.mediaTypeId);

                // prime the counters
                ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesLastRun.RawValue = 0;

                //check if there is an alternate session url - if so set it, else reset it to null
                if (!string.IsNullOrEmpty(context.AlternateSessionUrl))
                {
                    MsnRRServiceWrapper.SetAggregatorSessionAlternateUrl(context.AlternateSessionUrl);
                }
                else
                {
                    MsnRRServiceWrapper.ResetAggregatorSessionAlternateUrl();
                }

                do
                {
                    result = null;
                    MsnRRClient.GetRatingAverages(this.contentType, fromDate, ref transactionToken, out transactionStartTime, out result);

                    //Log the api call
                    string szLog = string.Join("|", new string[]
                        {
                            "GetAverageRatingsfromMsn",
                             this.contentType.ToString(),
                             fromDate.ToString(),
                             (string.IsNullOrEmpty(transactionToken))?"Null Transaction Token":transactionToken.ToString()
                        });
                    Xom.Log(XomAreaName.msnrraggregationlog, szLog);

                    //Increment the MSN Counters
                    SvcCommunicationCounters.Counters.MSNGetAveragesRequestsPerSecond.Increment();
                    SvcCommunicationCounters.Counters.MSNGetAveragesRequestsTotal.Increment();

                    //Save the current batch to DB
                    if (result != null)
                    {
                        SaveRatingAverages(result);
                        batchSize = result.ChildNodes.Count;

                        // update the counters for this run
                        ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeLastRun.IncrementBy(batchSize);
                        ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeLastRunBase.Increment();
                        ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesLastRun.Increment();

                        // update the 'all-time' counters
                        ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeAllTime.IncrementBy(batchSize);
                        ContentTypeCounters.Counters[mediaTypeString].AverageBatchSizeAllTimeBase.Increment();
                        ContentTypeCounters.Counters[mediaTypeString].NumberOfBatchesAllTime.Increment();
                    }
                } while (!string.IsNullOrEmpty(transactionToken));

                //Save the transaction date 
                SaveTransactionDate(mediaTypeId, transactionStartTime);
            }
            catch (Exception e)
            {
                ExceptionWithEventId exceptionToLog = null;
                if (e is ExceptionWithEventId)
                {
                    exceptionToLog = (ExceptionWithEventId)e;
                }
                else
                {
                    exceptionToLog = new XRLException(HResult.XONLINE_E_RATINGS_CRON_UNKNOWN_ERROR, XEvent.Id.XONLINE_E_RATINGS_CRON_ERROR,
                    string.Format("Unknown error in retrieving averages for mediatype {0} API.Actual Exception is : {1}", mediaTypeString, e.ToString()));
                }

                //set the Exception into context and log it in Eventlog.Also set the job completion flag
                context.Exception = exceptionToLog;
                context.IsJobCompletewithError = true;

                Xom.NtEvent(exceptionToLog.EventId, exceptionToLog, exceptionToLog.Message);
            }
            finally
            {
                //Log the api call
                string szLog = string.Join("|", new string[]
                    {
                        "RatingAverageBatchCompletion",
                        timeElapsed.MillisecondsElapsed.ToString(),
                        mediaTypeString,
                        contentType.ToString()
                    });
                Xom.Log(XomAreaName.msnrraggregationlog, szLog);
                ContentTypeCounters.Counters[mediaTypeString].AverageExecutionTime.IncrementBy(timeElapsed.TimeElapsed);
                ContentTypeCounters.Counters[mediaTypeString].AverageExecutionTimeBase.Increment();
            }
        }
    }
    /// <summary>
    /// This class will be used to pass data between into and out of processing
    /// </summary>
    public class ContentTypeProcessingContext
    {
        private string alternateSessionUrl;
        private Exception exception;
        private bool isJobCompletewithError = false;
        private int mediaTypeId;
        /// <summary>
        /// Gets the Alternate Session Url
        /// </summary>
        public string AlternateSessionUrl
        {
            get { return alternateSessionUrl; }
            set { alternateSessionUrl = value; }
        }
        /// <summary>
        /// Default Constructor
        /// </summary>
        public ContentTypeProcessingContext()
        {
        }
        /// <summary>
        /// Gets the Isjobcomplete flag
        /// </summary>
        public bool IsJobCompletewithError
        {
            get { return isJobCompletewithError; }
            set { isJobCompletewithError = value; }
        }
        /// <summary>
        /// Gets the Exception if any
        /// </summary>
        public Exception Exception
        {
            get { return exception; }
            set { exception = value; }
        }
        /// <summary>
        /// Gets/Sets the MediaTypeId
        /// </summary>
        public int MediaTypeId
        {
            get { return mediaTypeId; }
            set { mediaTypeId = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\provisioning\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregationTest\MsnRRAggregationTest\Common.cs ===
﻿//------------------------------------------------------------------------------
// <copyright file="Common.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// <author>MattLec</author>
// <owner>JeremyJ</owner>
// <lastModifiedBy>JeremyJ</lastModifiedBy>
// <lastModifiedDate>03/21/2011</lastModifiedDate>
//------------------------------------------------------------------------------

namespace xonline.server.cron.plugins.MSNRRAggregation.test
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Globalization;
    using System.IO;
    using System.Management;
    using System.Net;
    using System.Threading;
    using System.Xml;

    using Microsoft.WindowsAzure;
    using Microsoft.WindowsAzure.StorageClient;

    using ServerTestFramework;
    using ServerTestFramework.LiveService;
    using ServerTestFramework.LiveService.Cron;
    using ServerTestFramework.LiveService.Ratings;
    using ServerTestFramework.LiveService.UserAccount;

    using xonline.common.sql.sqlclient;

    /// <summary>
    /// Provides ContentTypeMapping information for the current environment (from NPDB).
    /// </summary>
    public static class NPDB_MSNContentTypeMappings
    {
        /// <summary>
        /// ContentType mapping for Xbox 360 Games (and Games on Demand)
        /// </summary>
        private static ContentTypeMapping fullXbox360Game = null;

        /// <summary>
        /// ContentType mapping for Game Content
        /// </summary>
        private static ContentTypeMapping gameContent = null;

        /// <summary>
        /// ContentType mapping for Xbox 360 Game Demos
        /// </summary>
        private static ContentTypeMapping xbox360Demo = null;

        /// <summary>
        /// ContentType mapping for Xbox 360 Theme
        /// </summary>
        private static ContentTypeMapping xbox360Theme = null;

        /// <summary>
        /// ContentType mapping for Xbox Original Games
        /// </summary>
        private static ContentTypeMapping xboxOriginalGame = null;

        /// <summary>
        /// ContentType mapping for Xbox 360 Gamer Picture
        /// </summary>
        private static ContentTypeMapping gamerPicture = null;

        /// <summary>
        /// ContentType mapping for Xbox LIVE Arcade Games
        /// </summary>
        private static ContentTypeMapping xboxArcadeGame = null;

        /// <summary>
        /// ContentType mapping for Game Videos
        /// </summary>
        private static ContentTypeMapping gameVideo = null;

        /// <summary>
        /// ContentType mapping for Game Trailers
        /// </summary>
        private static ContentTypeMapping gameTrailer = null;

        /// <summary>
        /// ContentType mapping for Indie Games
        /// </summary>
        private static ContentTypeMapping xnaCommunityGame = null;

        /// <summary>
        /// ContentType mapping for Avatar Items
        /// </summary>
        private static ContentTypeMapping avatarItem = null;

        /// <summary>
        /// List of MediaTypeIds
        /// </summary>
        private static List<int> mediaTypeIdCollection = new List<int>();

        /// <summary>
        /// List of ContentTypeIds
        /// </summary>
        private static List<string> contentTypeIdCollection = new List<string>();

        /// <summary>
        /// Dictionary containing the ContentType mappings
        /// </summary>
        private static Dictionary<int, Guid> contentTypeMappingCollection = new Dictionary<int, Guid>();

        /// <summary>
        /// Initializes static members of the NPDB_MSNContentTypeMappings class
        /// </summary>
        static NPDB_MSNContentTypeMappings()
        {
            string contentTypeXml = Global.XEnv.GetSetting("ratings_contenttype_mapping");
            XmlDataDocument xmlDoc = new XmlDataDocument();
            xmlDoc.LoadXml(contentTypeXml);
            XmlNodeList xmlNodeList = xmlDoc.SelectNodes("root/contentTypeMapping");
            foreach (XmlNode var in xmlNodeList)
            {
                int mediaTypeId = Convert.ToInt32(var.Attributes["mediatype"].Value);
                Guid contentTypeId = new Guid(var.Attributes["contentTypeId"].Value);
                contentTypeMappingCollection.Add(mediaTypeId, contentTypeId);

                switch (mediaTypeId)
                {
                    case 1:
                        {
                            fullXbox360Game = new ContentTypeMapping();
                            fullXbox360Game.MediaTypeId = mediaTypeId;
                            fullXbox360Game.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(fullXbox360Game.ContentTypeId);
                            mediaTypeIdCollection.Add(fullXbox360Game.MediaTypeId);
                            break;
                        }

                    case 18:
                        {
                            gameContent = new ContentTypeMapping();
                            gameContent.MediaTypeId = mediaTypeId;
                            gameContent.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(gameContent.ContentTypeId);
                            mediaTypeIdCollection.Add(gameContent.MediaTypeId);
                            break;
                        }

                    case 19:
                        {
                            xbox360Demo = new ContentTypeMapping();
                            xbox360Demo.MediaTypeId = mediaTypeId;
                            xbox360Demo.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(xbox360Demo.ContentTypeId);
                            mediaTypeIdCollection.Add(xbox360Demo.MediaTypeId);
                            break;
                        }

                    case 20:
                        {
                            xbox360Theme = new ContentTypeMapping();
                            xbox360Theme.MediaTypeId = mediaTypeId;
                            xbox360Theme.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(xbox360Theme.ContentTypeId);
                            mediaTypeIdCollection.Add(xbox360Theme.MediaTypeId);
                            break;
                        }

                    case 21:
                        {
                            xboxOriginalGame = new ContentTypeMapping();
                            xboxOriginalGame.ContentTypeId = contentTypeId.ToString();
                            xboxOriginalGame.MediaTypeId = mediaTypeId;
                            contentTypeIdCollection.Add(xboxOriginalGame.ContentTypeId);
                            mediaTypeIdCollection.Add(xboxOriginalGame.MediaTypeId);
                            break;
                        }

                    case 22:
                        {
                            gamerPicture = new ContentTypeMapping();
                            gamerPicture.MediaTypeId = mediaTypeId;
                            gamerPicture.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(gamerPicture.ContentTypeId);
                            mediaTypeIdCollection.Add(gamerPicture.MediaTypeId);
                            break;
                        }

                    case 23:
                        {
                            xboxArcadeGame = new ContentTypeMapping();
                            xboxArcadeGame.ContentTypeId = contentTypeId.ToString();
                            xboxArcadeGame.MediaTypeId = mediaTypeId;
                            contentTypeIdCollection.Add(xboxArcadeGame.ContentTypeId);
                            mediaTypeIdCollection.Add(xboxArcadeGame.MediaTypeId);
                            break;
                        }

                    case 30:
                        {
                            gameVideo = new ContentTypeMapping();
                            gameVideo.MediaTypeId = mediaTypeId;
                            gameVideo.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(gameVideo.ContentTypeId);
                            mediaTypeIdCollection.Add(gameVideo.MediaTypeId);
                            break;
                        }

                    case 34:
                        {
                            gameTrailer = new ContentTypeMapping();
                            gameTrailer.MediaTypeId = mediaTypeId;
                            gameTrailer.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(gameTrailer.ContentTypeId);
                            mediaTypeIdCollection.Add(gameTrailer.MediaTypeId);
                            break;
                        }

                    case 37:
                        {
                            xnaCommunityGame = new ContentTypeMapping();
                            xnaCommunityGame.MediaTypeId = mediaTypeId;
                            xnaCommunityGame.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(xnaCommunityGame.ContentTypeId);
                            mediaTypeIdCollection.Add(xnaCommunityGame.MediaTypeId);
                            break;
                        }

                    case 47:
                        {
                            avatarItem = new ContentTypeMapping();
                            avatarItem.MediaTypeId = mediaTypeId;
                            avatarItem.ContentTypeId = contentTypeId.ToString();
                            contentTypeIdCollection.Add(avatarItem.ContentTypeId);
                            mediaTypeIdCollection.Add(avatarItem.MediaTypeId);
                            break;
                        }

                    default:
                        {
                            break;
                        }
                }
            }
        }

        /// <summary>
        /// Gets or sets the fullXbox360Game field
        /// </summary>
        public static ContentTypeMapping FullXbox360Game
        {
            get { return NPDB_MSNContentTypeMappings.fullXbox360Game; }
            set { NPDB_MSNContentTypeMappings.fullXbox360Game = value; }
        }

        /// <summary>
        /// Gets or sets the gameContent field
        /// </summary>
        public static ContentTypeMapping GameContent
        {
            get { return NPDB_MSNContentTypeMappings.gameContent; }
            set { NPDB_MSNContentTypeMappings.gameContent = value; }
        }

        /// <summary>
        /// Gets or sets the xbox360Demo field
        /// </summary>
        public static ContentTypeMapping Xbox360Demo
        {
            get { return NPDB_MSNContentTypeMappings.xbox360Demo; }
            set { NPDB_MSNContentTypeMappings.xbox360Demo = value; }
        }

        /// <summary>
        /// Gets or sets the xbox360Theme field
        /// </summary>
        public static ContentTypeMapping Xbox360Theme
        {
            get { return NPDB_MSNContentTypeMappings.xbox360Theme; }
            set { NPDB_MSNContentTypeMappings.xbox360Theme = value; }
        }

        /// <summary>
        /// Gets or sets the xboxOriginalGame field
        /// </summary>
        public static ContentTypeMapping XboxOriginalGame
        {
            get { return NPDB_MSNContentTypeMappings.xboxOriginalGame; }
            set { NPDB_MSNContentTypeMappings.xboxOriginalGame = value; }
        }

        /// <summary>
        /// Gets or sets the gamerPicture field
        /// </summary>
        public static ContentTypeMapping GamerPicture
        {
            get { return NPDB_MSNContentTypeMappings.gamerPicture; }
            set { NPDB_MSNContentTypeMappings.gamerPicture = value; }
        }

        /// <summary>
        /// Gets or sets the xboxArcadeGame field
        /// </summary>
        public static ContentTypeMapping XboxArcadeGame
        {
            get { return NPDB_MSNContentTypeMappings.xboxArcadeGame; }
            set { NPDB_MSNContentTypeMappings.xboxArcadeGame = value; }
        }

        /// <summary>
        /// Gets or sets the gameVideo field
        /// </summary>
        public static ContentTypeMapping GameVideo
        {
            get { return NPDB_MSNContentTypeMappings.gameVideo; }
            set { NPDB_MSNContentTypeMappings.gameVideo = value; }
        }

        /// <summary>
        /// Gets or sets the gameTrailer field
        /// </summary>
        public static ContentTypeMapping GameTrailer
        {
            get { return NPDB_MSNContentTypeMappings.gameTrailer; }
            set { NPDB_MSNContentTypeMappings.gameTrailer = value; }
        }

        /// <summary>
        /// Gets or sets the xnaCommunityGame field
        /// </summary>
        public static ContentTypeMapping XnaCommunityGame
        {
            get { return NPDB_MSNContentTypeMappings.xnaCommunityGame; }
            set { NPDB_MSNContentTypeMappings.xnaCommunityGame = value; }
        }

        /// <summary>
        /// Gets or sets the avatarItem field
        /// </summary>
        public static ContentTypeMapping AvatarItem
        {
            get { return NPDB_MSNContentTypeMappings.avatarItem; }
            set { NPDB_MSNContentTypeMappings.avatarItem = value; }
        }

        /// <summary>
        /// Gets or sets the mediaTypeIdCollection field
        /// </summary>
        public static List<int> MediaTypeIdCollection
        {
            get { return NPDB_MSNContentTypeMappings.mediaTypeIdCollection; }
            set { NPDB_MSNContentTypeMappings.mediaTypeIdCollection = value; }
        }

        /// <summary>
        /// Gets or sets the contentTypeIdCollection field
        /// </summary>
        public static List<string> ContentTypeIdCollection
        {
            get { return NPDB_MSNContentTypeMappings.contentTypeIdCollection; }
            set { NPDB_MSNContentTypeMappings.contentTypeIdCollection = value; }
        }

        /// <summary>
        /// Gets or sets the contentTypeMappingCollection field
        /// </summary>
        public static Dictionary<int, Guid> ContentTypeMappingCollection
        {
            get { return NPDB_MSNContentTypeMappings.contentTypeMappingCollection; }
            set { NPDB_MSNContentTypeMappings.contentTypeMappingCollection = value; }
        }
    }

    /// <summary>
    /// Content Types for special use by CRON Job testing.
    /// </summary>
    public static class CronSpecificContentTypes
    {
        /// <summary>
        /// TestType1 content mapping
        /// </summary>
        private static ContentTypeMapping testType1 = new ContentTypeMapping();

        /// <summary>
        /// TestType2 content mapping
        /// </summary>
        private static ContentTypeMapping testType2 = new ContentTypeMapping();

        /// <summary>
        /// TestType3 content mapping
        /// </summary>
        private static ContentTypeMapping testType3 = new ContentTypeMapping();

        /// <summary>
        /// TestType4 content mapping
        /// </summary>
        private static ContentTypeMapping testType4 = new ContentTypeMapping();

        /// <summary>
        /// OneContentTypeXml field
        /// </summary>
        private static string oneContentTypeXml;

        /// <summary>
        /// TwoContentTypeXml field
        /// </summary>
        private static string twoContentTypeXml;

        /// <summary>
        /// FullXbox360GameOnlyXml field
        /// </summary>
        private static string fullXbox360GameOnlyXml;

        /// <summary>
        /// Initializes static members of the CronSpecificContentTypes class
        /// </summary>
        static CronSpecificContentTypes()
        {
            testType1.MediaTypeId = 1;
            testType2.MediaTypeId = 21;
            testType3.MediaTypeId = 23;
            testType4.MediaTypeId = 37;

            testType1.ContentTypeId = "2593eb84-7072-453f-8e0e-e5d82fff0c32";
            testType2.ContentTypeId = "ce403f76-6c70-49ff-b477-e8d907091453";
            testType3.ContentTypeId = "14c0a6ca-4c2a-48b2-bb39-338081860268";
            testType4.ContentTypeId = "6f04e348-2add-4dc3-9797-d9e8329a098c";

            oneContentTypeXml = String.Format("<root><contentTypeMapping mediatype=\"{0}\" contentTypeId=\"{1}\"/></root>", testType1.MediaTypeId, testType1.ContentTypeId);
            twoContentTypeXml = String.Format("<root><contentTypeMapping mediatype=\"{0}\" contentTypeId=\"{1}\"/></root><contentTypeMapping mediatype=\"{2}\" contentTypeId=\"{3}\"/></root>", testType1.MediaTypeId, testType1.ContentTypeId, testType2.MediaTypeId, testType2.ContentTypeId);
            fullXbox360GameOnlyXml = String.Format("<root><contentTypeMapping mediatype=\"1\" contentTypeId=\"{0}\"/></root>", NPDB_MSNContentTypeMappings.FullXbox360Game.ContentTypeId);
        }

        /// <summary>
        /// Gets or sets the TestType1 field
        /// </summary>
        public static ContentTypeMapping TestType1
        {
            get { return CronSpecificContentTypes.testType1; }
            set { CronSpecificContentTypes.testType1 = value; }
        }

        /// <summary>
        /// Gets or sets the TestType2 field
        /// </summary>
        public static ContentTypeMapping TestType2
        {
            get { return CronSpecificContentTypes.testType2; }
            set { CronSpecificContentTypes.testType2 = value; }
        }

        /// <summary>
        /// Gets or sets the TestType3 field
        /// </summary>
        public static ContentTypeMapping TestType3
        {
            get { return CronSpecificContentTypes.testType3; }
            set { CronSpecificContentTypes.testType3 = value; }
        }

        /// <summary>
        /// Gets or sets the TestType4 field
        /// </summary>
        public static ContentTypeMapping TestType4
        {
            get { return CronSpecificContentTypes.testType4; }
            set { CronSpecificContentTypes.testType4 = value; }
        }

        /// <summary>
        /// Gets or sets the oneContentTypeXml field
        /// </summary>
        public static string OneContentTypeXml
        {
            get { return CronSpecificContentTypes.oneContentTypeXml; }
            set { CronSpecificContentTypes.oneContentTypeXml = value; }
        }

        /// <summary>
        /// Gets or sets the twoContentTypeXml field
        /// </summary>
        public static string TwoContentTypeXml
        {
            get { return CronSpecificContentTypes.twoContentTypeXml; }
            set { CronSpecificContentTypes.twoContentTypeXml = value; }
        }

        /// <summary>
        /// Gets or sets the fullXbox360GameOnlyXml
        /// </summary>
        public static string FullXbox360GameOnlyXml
        {
            get { return CronSpecificContentTypes.fullXbox360GameOnlyXml; }
            set { CronSpecificContentTypes.fullXbox360GameOnlyXml = value; }
        }
    }

    /// <summary>
    /// Common static methods used by test code.
    /// </summary>
    public static class TestUtils
    {
        /// <summary>
        /// A string containing the XML message to trigger Ventura to create a new aggregation list
        /// </summary>
        private const string VenturaCreateNewListMessage = @"<ScheduledTaskInstanceQueueItem xmlns=""http://schemas.datacontract.org/2004/07/Z.Azure.Framework.WorkerRole.ScheduledTasks"" xmlns:i=""http://www.w3.org/2001/XMLSchema-instance"">
  <Id i:nil=""true"" xmlns=""http://schemas.datacontract.org/2004/07/Z.Azure.Storage.Entities""/>
  <PopReceipt i:nil=""true"" xmlns=""http://schemas.datacontract.org/2004/07/Z.Azure.Storage.Entities""/>
  <LogicialQueueTime>2011-03-19T00:36:28.9614086Z</LogicialQueueTime>
  <Parameters>
    <RatingsListCreatorTask xmlns=""http://schemas.datacontract.org/2004/07/Z.Ventura.Ratings.DataFlow"">
      <DataGroup i:nil=""true"" xmlns=""http://schemas.xbox.com/ventura/""/>
      <Locale i:nil=""true"" xmlns=""http://schemas.xbox.com/ventura/""/>
    </RatingsListCreatorTask>
  </Parameters>
  <PartitionKey>xbox203schedratingstasks</PartitionKey>
  <QueueName>xbox203schedratingstasks</QueueName>
  <RowKey>TopMediaTasks.PublishTopMedia.eWzbMAAprE4zZdJy8GgMdGMrtKHSqLMrqp9L2tilTOs</RowKey>
</ScheduledTaskInstanceQueueItem>";

        /// <summary>
        /// Connection string to the LKG storage account
        /// </summary>
        private const string LkgStorageAccount = "DefaultEndpointsProtocol=https;AccountName=dataventuralkgnus;AccountKey=otMWQcPQIkGbs2XUk4eDsbs5U22MCJFaaNFAnVuqnaeJRb/nlJSFS483sRxX+V2QnrFue5WP/8SCsHDLiDZVXQ==";

        /// <summary>
        /// The name of the queue
        /// </summary>
        private const string QueueName = "xbox103schedratingstasks";

        /// <summary>
        /// The titleId used when creating the MSNRRAggregateTest CRON job
        /// </summary>
        private const int MSNRRAggregateTestTitleId = -129071;

        /// <summary>
        /// Disables the MSNRRAggregates CRON job and creates a MSNRRAggregatesTest CRON job
        /// </summary>
        /// <returns>The jobId of the create MSNRRAggregatesTest CRON job</returns>
        public static int AddMSNRRAggregatesTestCronJob()
        {
            int jobId = 0;

            using (SqlClient sqlClient = new SqlClient("npdb", true))
            {
                try
                {
                    sqlClient.StoredProc = "p_cron_add_job";
                    sqlClient.AddParameter("@vc_name", "MSNRRAggregatesTest");
                    sqlClient.AddParameter("@i_title_id", MSNRRAggregateTestTitleId);
                    sqlClient.AddParameter("@vc_assembly", "MSNRRAverages.dll");
                    sqlClient.AddParameter("@vc_class", "xonline.server.cron.plugins.MSNRRAggregation.MSNRRAverages");
                    sqlClient.AddParameter("@txt_args", "<PluginContext />");
                    sqlClient.AddParameter("@dt_exec_next", DateTime.UtcNow.Subtract(TimeSpan.FromDays(1)));
                    sqlClient.AddParameter("@i_interval_secs", 3600);
                    sqlClient.AddParameter("@i_exec_count", 1);
                    sqlClient.AddParameter("@i_exec_timeout", 3600);
                    sqlClient.AddParameter(ParameterDirection.Output, "@i_job_id", 0);

                    sqlClient.ExecuteNonQuery();

                    jobId = sqlClient.GetIntParameter("@i_job_id");
                }
                catch (Exception)
                {
                    throw;
                }
            }

            if (jobId == 0)
            {
                throw new Exception("Unable to add MSNRRAggregatesTest cron job.");
            }

            return jobId;
        }

        /// <summary>
        /// Gets the last written event's time generated UTC to the event CRON host event log 
        /// </summary>
        /// <returns>DateTime object</returns>
        public static DateTime GetLastWrittenEventTimeGeneratedUTC()
        {
            // Set this by default to an extremely low time in the case that there were no events generated
            DateTime lastWrittenEventTimeGenerated = DateTime.MinValue;

            Uri cronUri = new Uri("http://" + Global.XEnv.GetVirtualInterface("cron_int").ToString());

            using (EventLog eventLog = new EventLog("Application", cronUri.Host, "cron"))
            {
                if (eventLog.Entries.Count > 0)
                {
                    lastWrittenEventTimeGenerated = eventLog.Entries[eventLog.Entries.Count - 1].TimeGenerated.ToUniversalTime();
                }
            }

            return lastWrittenEventTimeGenerated;
        }

        /// <summary>
        /// Connects to the CRON host machine and finds events based on the values of the passed in parameters
        /// </summary>
        /// <param name="eventId">The eventId to find (A value of 0 will cause the function to ensure no events were logged)</param>
        /// <param name="generatedAfter">The time to look for events generated after</param>
        /// <param name="generatedBefore">The time to look for events generated before</param>
        /// <returns>The desired event was found (or not found if an eventId of 0 was passed in)</returns>
        public static bool FindCronEventGeneratedByTest(int eventId, DateTime generatedAfter, DateTime generatedBefore)
        {
            Uri cronUri = new Uri("http://" + Global.XEnv.GetVirtualInterface("cron_int").ToString());
            bool foundEvent = false;
            Global.RO.Info("Attempting to find a cron event with eventId {0} generated after {1} and before {2}", eventId, generatedAfter.ToUniversalTime(), generatedBefore.ToUniversalTime());
            using (EventLog eventLog = new EventLog("Application", cronUri.Host, "cron"))
            {
                foreach (EventLogEntry entry in eventLog.Entries)
                {
                    // Masking the top 2 bits off so the instance id will match the event id
                    if (entry.Source == "cron" && (eventId == 0 || (entry.InstanceId & ~0xC0000000) == eventId) &&
                        ((entry.TimeGenerated.ToUniversalTime() >= generatedAfter) && (entry.TimeGenerated.ToUniversalTime() <= generatedBefore)))
                    {
                        Global.RO.Info("Found an event - {0} {1} {2}", entry.InstanceId, entry.TimeGenerated, entry.Message);
                        foundEvent = true;
                        break;
                    }
                }
            }

            return foundEvent;
        }

        /// <summary>
        /// Sets the enabled status of the MSNRRAggregates CRON job
        /// </summary>
        /// <param name="enabled">Whether or not the MSNRRAggregates CRON job should be enabled</param>
        public static void MSNRRAggregatesCronJobSetEnabled(bool enabled)
        {
            // Disable the real CRON job
            using (SqlClient sqlClient = new SqlClient("npdb", true))
            {
                try
                {
                    sqlClient.StoredProc = "p_cron_set_enabled";
                    sqlClient.AddParameter("@vc_class", "xonline.server.cron.plugins.MSNRRAggregation.MSNRRAverages");
                    sqlClient.AddParameter("@b_enabled", (enabled ? 1 : 0));
                    sqlClient.ExecuteNonQuery();
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Waits until the MSNRRAggregatesTest CRON job is executed
        /// </summary>
        public static void WaitUntilMSNRRAggregatesTestCronJobIsExecuted()
        {
            WaitUntilMSNRRAggregatesTestCronJobIsExecuted(10);
        }

        /// <summary>
        /// Waits until the MSNRRAggregatesTest CRON job is executed attempting to check the specified amount of times every 30 seconds
        /// </summary>
        /// <param name="attemptLimit">The amount of attempts to check if the job has executed</param>
        public static void WaitUntilMSNRRAggregatesTestCronJobIsExecuted(int attemptLimit)
        {
            int attempts = 0;
            int sleepTimeSeconds = 30;
            bool jobExecuted = false;

            Global.RO.Info("Waiting for the MSNRRAggregatesTest CRON job to finish executing...");

            while (!jobExecuted)
            {
                using (SqlClient sc = new SqlClient("npdb", true))
                {
                    sc.StoredProc = "dbo.p_cron_find_jobs";
                    sc.AddParameter("@vc_search", "MSNRRAggregatesTest");

                    using (SqlDataReader reader = sc.Execute())
                    {
                        // This would mean the entry is still in the cron jobs table and hasn't been executed
                        if (reader.HasRows)
                        {
                            if (++attempts <= attemptLimit)
                            {
                                Global.RO.Info("The MSNRRAggregatesTest CRON job is not finished executing. Sleeping {0}s... Attempt: {1}/{2}", sleepTimeSeconds, attempts, attemptLimit);
                                Thread.Sleep(TimeSpan.FromSeconds(sleepTimeSeconds));
                            }
                            else
                            {
                                throw new Exception("The MSNRRAggregatesTest CRON job took longer than expected to execute.");
                            }
                        }
                        else
                        {
                            jobExecuted = true;
                            Global.RO.Info("The MSNRRAggregatesTest CRON job appears to have been executed.");
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Waits until the MSNRRAggregates CRON job is not executing
        /// </summary>
        public static void WaitUntilMSNRRAggregatesCronJobIsExecuted()
        {
            // 40 attempts once every 30 seconds totals up to 20 minutes....
            int attemptLimit = 40;
            int attempts = 0;
            int sleepTimeSeconds = 30;
            bool jobExecuted = false;

            Global.RO.Info("Checking to ensure the MSNRRAggregates CRON job is not currently executing...");

            while (!jobExecuted)
            {
                using (SqlClient sc = new SqlClient("npdb", true))
                {
                    sc.StoredProc = "dbo.p_cron_find_jobs";
                    sc.AddParameter("@vc_search", "MSNRRAggregates");

                    using (SqlDataReader reader = sc.Execute())
                    {
                        if (reader.HasRows)
                        {
                            reader.Read();

                            // Checks to see if there is a value in vc_exec_frontdoor
                            if (reader.GetSqlString(10) != String.Empty)
                            {
                                if (++attempts <= attemptLimit)
                                {
                                    Global.RO.Info("The MSNRRAggregates CRON job is currently executing. Sleeping {0}s... Attempt: {1}/{2}", sleepTimeSeconds, attempts, attemptLimit);
                                    Thread.Sleep(TimeSpan.FromSeconds(sleepTimeSeconds));
                                }
                                else
                                {
                                    throw new Exception("The MSNRRAggregates CRON job took longer than expected to execute.");
                                }
                            }
                            else
                            {
                                jobExecuted = true;
                                Global.RO.Info("The MSNRRAggregates CRON job is not currently executing.");
                            }
                        }
                        else
                        {
                            throw new Exception("The MSNRRAggregate CRON job could not be found!");
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Removes the MSNRRAggregatesTest CRON job
        /// </summary>
        /// <param name="msnRRAggregatesJobId">The jobId of the MSNRRAggregatesTest CRON job</param>
        public static void RemoveMSNRRAggregatesTestCronJob(int msnRRAggregatesJobId)
        {
            if (msnRRAggregatesJobId != 0)
            {
                uint hResult = HResult.E_FAIL;

                using (SqlClient sqlClient = new SqlClient("npdb", true))
                {
                    sqlClient.StoredProc = "p_cron_remove_job";
                    sqlClient.AddParameter("@i_job_id", msnRRAggregatesJobId);
                    sqlClient.AddParameter("@i_title_id", MSNRRAggregateTestTitleId);
                    sqlClient.AddParameter(ParameterDirection.ReturnValue, "@hr", HResult.S_OK);

                    sqlClient.ExecuteNonQuery();

                    hResult = (uint)sqlClient.GetIntParameter("@hr");

                    if (hResult != HResult.S_OK)
                    {
                        throw new Exception("Unable to remove the MSNRRAggregate test cron job!");
                    }
                }
            }
        }

        /// <summary>
        /// Recycles the XBL CRON FD IIS application pool
        /// </summary>
        public static void RecycleCRONAppPool()
        {
            RecycleAppPool("cron_int", "cron", "CRON-cron");
        }

        /// <summary>
        /// Recycles the XBL Ratings FD IIS application pool
        /// </summary>
        public static void RecycleRatingsAppPool()
        {
            RecycleAppPool("ratings_int", "ratings", "Ratings-Ratings");
        }

        /// <summary>
        /// Adds a MSNRRAggregatesTest CRON job and waits for the job to execute
        /// </summary>
        /// <param name="msnRRAggregatesTestJobId">The jobId of the job (should be 0 if the job was executed successfully)</param>
        public static void AddAndExecuteMSNRRAggregatesTestJob(out int msnRRAggregatesTestJobId)
        {
            // Ten attempts every 30 seconds = ~5 minutes of waiting for execution
            AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId, 10);
        }

        /// <summary>
        /// Adds a MSNRRAggregatesTest CRON job and waits for the job to execute
        /// </summary>
        /// <param name="msnRRAggregatesTestJobId">The jobId of the job (should be 0 if the job was executed successfully)</param>
        /// <param name="waitAttemptLimit">The number of times to attempt to check whether or not the job was executed</param>
        public static void AddAndExecuteMSNRRAggregatesTestJob(out int msnRRAggregatesTestJobId, int waitAttemptLimit)
        {
            msnRRAggregatesTestJobId = TestUtils.AddMSNRRAggregatesTestCronJob();
            TestUtils.WaitUntilMSNRRAggregatesTestCronJobIsExecuted(waitAttemptLimit);

            // If we've made it here the job must've succeeded
            msnRRAggregatesTestJobId = 0;
        }

        /// <summary>
        /// Sends a message directly to the cloud to trigger the creation of a new aggregate rating list
        /// </summary>
        internal static void SendVenturaCreateNewAggregateListMessage()
        {
            Global.RO.Info("Sending the message directly to the cloud to trigger the creation of a new aggregate rating list...");
            CloudStorageAccount account = CloudStorageAccount.Parse(LkgStorageAccount);

            var queueClient = account.CreateCloudQueueClient();
            var queue = queueClient.GetQueueReference(QueueName);
            string messageContent = VenturaCreateNewListMessage;

            CloudQueueMessage message = new CloudQueueMessage(messageContent);
            queue.AddMessage(message);
            Global.RO.Info("Message sent!");
            Global.RO.Info("Sleeping 15 seconds to ensure the new list is created the the current list is updated...");
            Thread.Sleep(TimeSpan.FromSeconds(15));
        }

        /// <summary>
        /// Creates a XeUser to be used by ratings test cases
        /// </summary>
        /// <param name="userType">A UserType enumator indicating what type of user to create (only Gold and Silver are supported)</param>
        /// <param name="twoLetterCountryCode">Two-letter country code string indicating which country should be used to create the user</param>
        /// <returns>The created XeUser object</returns>
        internal static XeUser CreateRatingsUser(UserType userType, string twoLetterCountryCode)
        {
            XeUser user = null;
            int attemptLimit = 3;
            bool userCreated = false;

            // Added very basic retry logic since user creation can be/is flaky at times and may time out in test environments
            // Since the latest changes introduce a lot of user creation we need to minimize the chances of user creation failures
            // causing the aggregation test cases to fail
            for (int attempts = 1; attempts <= attemptLimit && !userCreated; attempts++)
            {
                try
                {
                    user = new XeUser(true, (XeUser.Country)Enum.Parse(typeof(XeUser.Country), twoLetterCountryCode));
                    switch (userType)
                    {
                        case UserType.Gold:
                            {
                                user.CreateAsGold = true;
                                break;
                            }

                        case UserType.Silver:
                            {
                                // users are silver by default
                                break;
                            }

                        default:
                            {
                                throw new Exception("Unable to create user due to an unsupported UserType being specified.");
                            }
                    }

                    if (user.Create() == 0)
                    {
                        throw new UnexpectedTestResultException("XeUser.Create() failed: " + user.GetDumpString());
                    }

                    UacsCommon.WaitForXCache();

                    userCreated = true;
                }
                catch (Exception e)
                {
                    if (attempts == attemptLimit)
                    {
                        // This was our last attempt. Rethrow!
                        throw new Exception("Failed to create a user!", e);
                    }
                    else
                    {
                        Global.RO.Warn("Unable to create the user. Trying again... Attempts: {0}/{1}", attempts, attemptLimit);
                    }
                }
            }

            return user;
        }

        /// <summary>
        /// Prepares media to be aggregated by rating the the item over 10 times to ensure it is aggregatable
        /// </summary>
        /// <param name="mediaToAggregate">The MediaUserRatingAggregateInfo object to rate</param>
        internal static void PrepareMediaForAggregation(MediaUserRatingAggregateInfo mediaToAggregate)
        {
            // Theoretically this media should already be aggregatable however given the way our test environments are setup this is not guaranteed
            // Rate the item enough times to ensure it has enough ratings to exceed the minimum aggregatable threshold
            int minimumNumberofRatingsToBeAggregated = Global.XEnv.GetIntSetting("ratings_max_allowable_reviewcount");

            for (int x = 0; x <= minimumNumberofRatingsToBeAggregated; x++)
            {
                XeUser user = TestUtils.CreateRatingsUser(UserType.Gold, mediaToAggregate.CountryCode);
                XRLMsnSubmitRating request = new XRLMsnSubmitRating();
                request.Request.userXuid = user.UserPuid;
                request.Request.mediaId = mediaToAggregate.MediaId;
                request.Request.ratingValue = TestUtils.GetRandomRatingValue();
                request.Request.userCountryId = user.CountryId;
                request.Slot.AddService(ServerTestFramework.LiveService.XOService.Ratings);

                // Make the Service Call
                if (!request.Execute())
                {
                    throw new Exception("XRLMsnSubmitRating failed: " + request.GetDumpString());
                }

                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new Exception(String.Format("XRLMsnSubmitRating returned XErr=0x{0:x}", request.XErr));
                }
            }
        }

        /// <summary>
        /// Returns a random valid (1-5) integer
        /// </summary>
        /// <returns>A random integer between 1 and 5 (inclusive)</returns>
        internal static int GetRandomRatingValue()
        {
            return new Random().Next(1, 5);
        }

        /// <summary>
        /// Recycles an IIS application pool and hits a health check based on the parameter values
        /// </summary>
        /// <param name="component">The component that the application pool belongs to</param>
        /// <param name="virtualDirectory">The virtual directory of the component on IIS</param>
        /// <param name="appPool">The name of the actual component application pool</param>
        private static void RecycleAppPool(string component, string virtualDirectory, string appPool)
        {
            try
            {
                Global.RO.Info("Recycling the {0} app pool...", appPool);
                string componentMachineName = Global.XEnv.GetVirtualInterface(component).ToString();

                ConnectionOptions co = new ConnectionOptions();
                co.Impersonation = ImpersonationLevel.Impersonate;
                co.Authentication = AuthenticationLevel.PacketPrivacy;
                string objPath = String.Format("IISApplicationPool.Name='W3SVC/AppPools/{0}'", appPool);
                ManagementScope scope = new ManagementScope(@"\\" + componentMachineName.Split(':')[0] + @"\root\MicrosoftIISV2", co);
                using (ManagementObject mc = new ManagementObject(objPath))
                {
                    mc.Scope = scope;
                    mc.InvokeMethod("Recycle", null, null);
                    Global.RO.Info("Sucessfully recycled the {0} app pool!", appPool);
                }

                Global.RO.Info("Sleeping for 15 seconds after recycling {0} the app pool...", virtualDirectory);
                Thread.Sleep(TimeSpan.FromSeconds(15));

                Global.RO.Info("Pinging: " + String.Format("http://{0}/{1}/health.ashx", componentMachineName, virtualDirectory));

                // Ping the watcher health check
                using (WebClient client = new WebClient())
                {
                    using (Stream stream = client.OpenRead(String.Format("http://{0}/{1}/health.ashx", componentMachineName, virtualDirectory)))
                    {
                        StreamReader reader = new StreamReader(stream);
                        string response = reader.ReadToEnd();
                        reader.Close();
                    }
                }
            }
            catch (Exception e)
            {
                throw new Exception(String.Format("Failed to recycle the {0} app pool! Error: {1}", appPool, e.Message), e);
            }
        }
    }

    /// <summary>
    /// Contains the information for a cron job (key=vc_name), taken from npdb.t_cron_jobs.
    /// </summary>
    public class CronJobInfo
    {
        /// <summary>
        /// The CRON job ID
        /// </summary>
        private int jobId;
        
        /// <summary>
        /// The name of the CRON job
        /// </summary>
        private string jobName;

        /// <summary>
        /// The titleId associated with the CRON job
        /// </summary>
        private int titleId;

        /// <summary>
        /// The plugin assembly to use
        /// </summary>
        private string assembly;

        /// <summary>
        /// The plugin class to reflect
        /// </summary>
        private string className;

        /// <summary>
        /// The text arguments for the plugin
        /// </summary>
        private string textArgs;

        /// <summary>
        /// The next scheduled execution
        /// </summary>
        private DateTime nextScheduledExecution;

        /// <summary>
        /// The next actual execution
        /// </summary>
        private DateTime nextActualExecution;

        /// <summary>
        /// Execution interval in seconds
        /// </summary>
        private int executionIntervalSeconds;

        /// <summary>
        /// Execution count
        /// </summary>
        private int executionCount;

        /// <summary>
        /// Execution timeout in seconds
        /// </summary>
        private int executionTimeoutSeconds;

        /// <summary>
        /// The frontdoor executing the job
        /// </summary>
        private string executingFrontDoor;

        /// <summary>
        /// Is the job enabled
        /// </summary>
        private byte jobEnabled;
        
        /// <summary>
        /// The error text from execution
        /// </summary>
        private string errorText;

        /// <summary>
        /// Gets or sets the jobId field
        /// </summary>
        public int JobId
        {
            get { return this.jobId; }
            set { this.jobId = value; }
        }

        /// <summary>
        /// Gets or sets the jobName field
        /// </summary>
        public string JobName
        {
            get { return this.jobName; }
            set { this.jobName = value; }
        }

        /// <summary>
        /// Gets or sets the titleId field
        /// </summary>
        public int TitleId
        {
            get { return this.titleId; }
            set { this.titleId = value; }
        }

        /// <summary>
        /// Gets or sets the assembly field
        /// </summary>
        public string Assembly
        {
            get { return this.assembly; }
            set { this.assembly = value; }
        }

        /// <summary>
        /// Gets or sets the className field
        /// </summary>
        public string ClassName
        {
            get { return this.className; }
            set { this.className = value; }
        }

        /// <summary>
        /// Gets or sets the textArgs field
        /// </summary>
        public string TextArgs
        {
            get { return this.textArgs; }
            set { this.textArgs = value; }
        }

        /// <summary>
        /// Gets or sets the nextSehduledExecution field
        /// </summary>
        public DateTime NextScheduledExecution
        {
            get { return this.nextScheduledExecution; }
            set { this.nextScheduledExecution = value; }
        }

        /// <summary>
        /// Gets or sets the nextActualExecution
        /// </summary>
        public DateTime NextActualExecution
        {
            get { return this.nextActualExecution; }
            set { this.nextActualExecution = value; }
        }

        /// <summary>
        /// Gets or sets the executionIntervalSeconds field
        /// </summary>
        public int ExecutionIntervalSeconds
        {
            get { return this.executionIntervalSeconds; }
            set { this.executionIntervalSeconds = value; }
        }

        /// <summary>
        /// Gets or sets the executionCount field
        /// </summary>
        public int ExecutionCount
        {
            get { return this.executionCount; }
            set { this.executionCount = value; }
        }

        /// <summary>
        /// Gets or sets the executionTimeoutSeconds field
        /// </summary>
        public int ExecutionTimeoutSeconds
        {
            get { return this.executionTimeoutSeconds; }
            set { this.executionTimeoutSeconds = value; }
        }

        /// <summary>
        /// Gets or sets the executingFrontDoor field
        /// </summary>
        public string ExecutingFrontDoor
        {
            get { return this.executingFrontDoor; }
            set { this.executingFrontDoor = value; }
        }

        /// <summary>
        /// Gets or sets the jobEnabled field
        /// </summary>
        public byte JobEnabled
        {
            get { return this.jobEnabled; }
            set { this.jobEnabled = value; }
        }

        /// <summary>
        /// Gets or sets the errorText field
        /// </summary>
        public string ErrorText
        {
            get { return this.errorText; }
            set { this.errorText = value; }
        }
    }

    /// <summary>
    /// Contains the information for a piece of media that has been rated, taken from rawcatalogdb.t_mediauserratingaggregate
    /// </summary>
    public class MediaUserRatingAggregateInfo
    {
        /// <summary>
        /// The the rated mediaId
        /// </summary>
        private Guid mediaId;

        /// <summary>
        /// The country the mediaId was rated in
        /// </summary>
        private string countryCode;

        /// <summary>
        /// The total number of ratings for the mediaId in the country
        /// </summary>
        private int numberOfRatings;

        /// <summary>
        /// The aggregate rating
        /// </summary>
        private float ratingAggregate;

        /// <summary>
        /// The date the mediaId was last rated in the country
        /// </summary>
        private DateTime lastRatedDate;

        /// <summary>
        /// The last date the aggregate information for the media in the country was modified
        /// </summary>
        private DateTime modifiedDate;

        /// <summary>
        /// Gets or sets the mediaId field
        /// </summary>
        public Guid MediaId
        {
            get { return this.mediaId; }
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the countryCode field
        /// </summary>
        public string CountryCode
        {
            get { return this.countryCode; }
            set { this.countryCode = value; }
        }

        /// <summary>
        /// Gets or sets the numberOfRatings field
        /// </summary>
        public int NumberOfRatings
        {
            get { return this.numberOfRatings; }
            set { this.numberOfRatings = value; }
        }

        /// <summary>
        /// Gets or sets the ratingAggregate field
        /// </summary>
        public float RatingAggregate
        {
            get { return this.ratingAggregate; }
            set { this.ratingAggregate = value; }
        }

        /// <summary>
        /// Gets or sets the lastRatedDate field
        /// </summary>
        public DateTime LastRatedDate
        {
            get { return this.lastRatedDate; }
            set { this.lastRatedDate = value; }
        }

        /// <summary>
        /// Gets or sets the modifiedDate field
        /// </summary>
        public DateTime ModifiedDate
        {
            get { return this.modifiedDate; }
            set { this.modifiedDate = value; }
        }
    }

    /// <summary>
    /// Contains the information for a mediaId/lastRetrieved pairing, taken from rawcatalogdb.t_msnaggregaterating
    /// </summary>
    public class MSNAggregateRatingInfo
    {
        /// <summary>
        /// The mediaTypeId
        /// </summary>
        private int mediaTypeId;

        /// <summary>
        /// The last date the aggregate ratins for the mediaTypeId were retrieved
        /// </summary>
        private DateTime lastRetrievedDate;

        /// <summary>
        /// Gets or sets the mediaTypeid field
        /// </summary>
        public int MediaTypeId
        {
            get { return this.mediaTypeId; }
            set { this.mediaTypeId = value; }
        }

        /// <summary>
        /// Gets or sets the lastRetrievedDate field
        /// </summary>
        public DateTime LastRetrievedDate
        {
            get { return this.lastRetrievedDate; }
            set { this.lastRetrievedDate = value; }
        }
    }

    /// <summary>
    /// Contains a mediaType/ContentType pairing.
    /// </summary>
    public class ContentTypeMapping
    {
        /// <summary>
        /// The mediaTypeId mapped to the contentTypeId
        /// </summary>
        private int mediaTypeId;

        /// <summary>
        /// The contentTypeId mapped to the mediaTypeid
        /// </summary>
        private string contentTypeId;

        /// <summary>
        /// Gets or sets the mediaTypeId field
        /// </summary>
        public int MediaTypeId
        {
            get { return this.mediaTypeId; }
            set { this.mediaTypeId = value; }
        }

        /// <summary>
        /// Gets or sets the contentTypeId field
        /// </summary>
        public string ContentTypeId
        {
            get { return this.contentTypeId; }
            set { this.contentTypeId = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\ProvisioningSample\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregationTest\MsnRRAggregationTest\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MsnRRAggregateTest")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("MsnRRAggregateTest")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("d7144657-853b-4966-bd6a-355b16669e6c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregationTest\MsnRRAggregationTest\MsnRRAggregationTest.cs ===
﻿//------------------------------------------------------------------------------
// <copyright file="MsnRRAggregationTest.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// <author>MattLec</author>
// <owner>JeremyJ</owner>
// <lastModifiedBy>JeremyJ</lastModifiedBy>
// <lastModifiedDate>03/21/2011</lastModifiedDate>
//------------------------------------------------------------------------------

namespace xonline.server.cron.plugins.MSNRRAggregation.test
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Threading;
    using System.Xml;

    using Microsoft.XBox.Live.Server.Emulators.Framework;
    using Microsoft.XBox.Live.Server.Emulators.MSNRR.Aggregator;

    using ServerTestFramework;
    using ServerTestFramework.LiveService;
    using ServerTestFramework.LiveService.Billing;
    using ServerTestFramework.LiveService.Ratings;
    using ServerTestFramework.LiveService.UserAccount;

    using xonline.common.diagnostics;

    /// <summary>
    /// Functional test suite for the MSNRRAverages CRON plugin for user ratings aggregation
    /// </summary>
    [TestGroup, Owner("JeremyJ"), EnvRequirement("Billing,Catalog"), Description("Functional test cases for the MSNRRAverages CRON plugin")]
    public class FunctionalTests : TestNode
    {
        #region MSNRR Aggregation deployment test cases

        /// <summary>
        /// Deployment validation test cases
        /// </summary>
        [TestGroup, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Deployment Test Cases")]
        public class MsnRRAggregationTest_DeploymentTestCases : TestNode
        {
            /// <summary>
            /// Verifies the MSNRRAverages CRON plugin is enabled in NPDB
            /// </summary>
            [TestCase, Owner("JeremyJ"), EnvRequirement("Billing,Catalog"), Description("Verifies that NPDB contains the correct setting that will enable CRON to pick up the job")]
            public void P_VerifyCronJobEnabledInNPDB()
            {
                CronJobInfo job;
                try
                {
                    Global.RO.Info("Attempting to retrieve job from NPDB");
                    job = SqlManager.GetCronJob("MSNRRAggregates");
                    Global.RO.Info("Job Retrieved...");
                }
                catch (InvalidOperationException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: No job named 'MSNRRAggregates' exists in NPDB", e);
                }
                catch (SqlException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: Unable to connect to NPDB", e);
                }

                Global.RO.Info("Validating job details...");
                Assert.AreEqual("MSNRRAggregates", job.JobName, "The job name was not the expected value!");
                Assert.AreEqual("MSNRRAverages.dll", job.Assembly, "The job assembly was not the expected value!");
                Assert.AreEqual("xonline.server.cron.plugins.MSNRRAggregation.MSNRRAverages", job.ClassName, "The job class was not the expected value!");

                // Although the text argument field can be empty or have an empty <PluginContext> xml tag we should expect 
                // it to be the empty tag since that is what is checked in and that value should not be changed
                Assert.AreEqual("<PluginContext />", job.TextArgs, "The job text arguments was not the expected value!");
                Assert.AreEqual(3600, job.ExecutionIntervalSeconds, "The job execution internal was not the expected value!");
                Assert.AreEqual(3600, job.ExecutionTimeoutSeconds, "The job execution timeout was not the expected value!");
                Assert.AreEqual(1, job.JobEnabled, "The job enabled status was not the expected value!");
                Assert.AreEqual(String.Empty, job.ErrorText, "The job error text was not the expected value!"); 
            }

            /// <summary>
            /// Verifies that the MediaUserRatingAggregateTable exists
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Verifies that the RawCatalogDB.MediaUserRatingAggregate table exists and contains the correct columns.")]
            public void P_VerifyMediaUserRatingAggregateTableExists()
            {
                List<MediaUserRatingAggregateInfo> ratingInfo = null;
                try
                {
                    Global.RO.Info("Attempting to retrieve data from ContentIngestionCatalogDB (rawcatalogdb)");
                    ratingInfo = SqlManager.GetAllMediaUserRatingAggregateInfo();
                    Global.RO.Info("Data retrieved...");
                }
                catch (InvalidOperationException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: Database appears to not contain the proper columns.", e);
                }
                catch (SqlException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: Unable to connect to RawCatalogDB", e);
                }

                Global.RO.Info("Validating...");
                Assert.IsTrue(ratingInfo != null, "The List of MediaUserRatingAggregateInfo (ratingInfo) is null!");
            }

            /// <summary>
            /// Verifies the MSNAggregateRatingInfo table exists and contains the correct data
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Verifies that the RawCatalogDB.MSNAggregateRatingInfo table exists and contains the correct data.")]
            public void P_VerifyMSNAggregateRatingInfoTableIsCorrectlyDefined()
            {
                List<MSNAggregateRatingInfo> ratingInfo;

                try
                {
                    Global.RO.Info("Attempting to retrieve data from ContentIngestionCatalogDB (rawcatalogdb)");
                    ratingInfo = SqlManager.GetMSNAggregateRatingInfo(-1);
                    Global.RO.Info("Data retrieved...");
                }
                catch (InvalidOperationException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: Database could not access the table.", e);
                }
                catch (SqlException e)
                {
                    throw new UnexpectedTestResultException("Test FAIL: Unable to connect to RawCatalogDB or the table is locked.", e);
                }

                Global.RO.Info("Validating that all expected mediaTypeIds are defined in NPDB with associated contentTypeIds...");

                // Collect the mediaIds in ratingInfo into a list for comparison, while we're doing our first check.
                List<int> ratingInfoMediaIdList = new List<int>();
                foreach (MSNAggregateRatingInfo data in ratingInfo)
                {
                    if (NPDB_MSNContentTypeMappings.MediaTypeIdCollection.Contains(data.MediaTypeId) == false)
                    {
                        throw new UnexpectedTestResultException(String.Format("NPDB does not contain a ratings_contenttype_mapping definition for mediaId={0}", data.MediaTypeId));
                    }

                    ratingInfoMediaIdList.Add(data.MediaTypeId);
                }

                Global.RO.Info("Validating that all defined mediaId/contentTypeId pairs in NPDB have matching entries in MSNRRAggregateRatingInfo");
                foreach (int mapping in NPDB_MSNContentTypeMappings.MediaTypeIdCollection)
                {
                    if (ratingInfoMediaIdList.Contains(mapping) == false)
                    {
                        throw new UnexpectedTestResultException(String.Format("MSNRRAggregateRatingInfo does not contain a mediaTypeId definition for mediaId={0}", mapping));
                    }
                }
            }
        }

        #endregion

        #region MSNRR Aggregation functional test cases

        /// <summary>
        /// Functional test cases for the MSNRRAverages CRON plugin using the MSNRR backend
        /// </summary>
        [TestGroup, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Functional test cases for the MSNRRAverages CRON plugin using the MSNRR backend")]
        public class MSNRR_MsnRRAggregationTest_FunctionalTestCases : TestNode
        {
            /// <summary>
            /// SettingState object to store the ratings_aggregate_use_ventura value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsAggregateUseVentura;

            /// <summary>
            /// SettingState object to store the ratings_use_msnrr value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsUseMSNRR;

            /// <summary>
            /// SettingState object to store the ratings_use_ventura value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsUseVentura;

            #region PreRun and PostRun

            /// <summary>
            /// Before any test in the test group is run the MSNRRAverages CRON plugin and XBL Ratings FD are configured to only use the MSNRR backend
            /// </summary>
            public override void PreRun()
            {
                // Check to see if the existing MSNRRAverages job is currently executing and if so wait...
                TestUtils.WaitUntilMSNRRAggregatesCronJobIsExecuted();

                // Disable the real cron job to avoid two jobs potentially running at the same time
                TestUtils.MSNRRAggregatesCronJobSetEnabled(false);

                this.previousRatingsAggregateUseVentura = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_aggregate_use_ventura", "false", -1);
                this.previousRatingsUseMSNRR = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_use_msnrr", "true", -1);
                this.previousRatingsUseVentura = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_use_ventura", "false", -1);

                TestUtils.RecycleCRONAppPool();
                TestUtils.RecycleRatingsAppPool();

                // Running the MSNRRAggregatesTest Cron job once to ensure we have the latest ratings 
                // in the MediaUserRatingAggregateInfo table before starting any of the tests
                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }
            }

            /// <summary>
            /// Restores the previous MSNRRAverages CRON plugin and XBL Ratings FD settings to their states prior to the test group being run
            /// </summary>
            public override void PostRun()
            {
                // Re-enable the MSNRRAggregates CRON job
                TestUtils.MSNRRAggregatesCronJobSetEnabled(true);

                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsAggregateUseVentura);
                TestUtils.RecycleCRONAppPool();

                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsUseMSNRR);
                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsUseVentura);
                TestUtils.RecycleRatingsAppPool();
            }

            #endregion

            #region MSNRR Aggregation functional test cases - Positive

            /// <summary>
            /// Submits a rating, runs the MSNRRAggregate job, and validates that the rows in the MediaUserRatingAggregateInfo table are accurate
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Consume all the ratings in MSNRR after submitting a rating for a random aggregatable media")]
            public void P_ConsumeAllRatings()
            {
                MediaUserRatingAggregateInfo itemToRate = SqlManager.GetRandomAggregatedMedia();

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                TestUtils.PrepareMediaForAggregation(itemToRate);

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int preMsnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out preMsnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(preMsnRRAggregatesTestJobId);
                }

                // Get the latest data from the MediaUserRatingAggregateInfo table for the item we just rated
                itemToRate = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                // Submit rating
                XeUser user = TestUtils.CreateRatingsUser(UserType.Gold, itemToRate.CountryCode);
                XRLMsnSubmitRating request = new XRLMsnSubmitRating();
                request.Request.userXuid = user.UserPuid;
                request.Request.mediaId = itemToRate.MediaId;
                request.Request.ratingValue = TestUtils.GetRandomRatingValue();
                request.Request.userCountryId = user.CountryId;
                request.Slot.AddService(ServerTestFramework.LiveService.XOService.Ratings);

                // Make the Service Call
                if (!request.Execute())
                {
                    throw new UnexpectedTestResultException("XRLMsnSubmitRating failed: " + request.GetDumpString());
                }

                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMsnSubmitRating returned XErr=0x{0:x}", request.XErr));
                }

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                MediaUserRatingAggregateInfo postAggregationItem = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Assert.IsTrue(postAggregationItem.NumberOfRatings > itemToRate.NumberOfRatings, String.Format("The number of ratings was not greater than the previous number of ratings! Expected: >'{0}' Got: '{1}'", itemToRate.NumberOfRatings, postAggregationItem.NumberOfRatings));
                Assert.IsTrue(postAggregationItem.LastRatedDate > itemToRate.LastRatedDate, String.Format("The last rated date was not greater than the previous last rated date! Expected: >'{0}' Got: '{1}'", itemToRate.LastRatedDate, postAggregationItem.LastRatedDate));
            }

            /// <summary>
            /// Validates the last retrieved dates are updated as expected
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Validates the last retrieved dates are updated as expected")]
            public void P_LastRetrievedDates()
            {
                MediaUserRatingAggregateInfo itemToRate = SqlManager.GetRandomAggregatedMedia();

                if (itemToRate == null)
                {
                    throw new UnexpectedTestResultException("Unable to retrieve the expected Media ID / Country Code combination from the database! Is there missing test data??");
                }

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                TestUtils.PrepareMediaForAggregation(itemToRate);

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int preMsnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out preMsnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(preMsnRRAggregatesTestJobId);
                }

                // Retrieve the last retrieved dates for all the content types.
                DateTime preLastRetrievedDateFullXbox360Game = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.FullXbox360Game.MediaTypeId);
                DateTime preLastRetrievedDateXboxArcadeGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XboxArcadeGame.MediaTypeId);
                DateTime preLastRetrievedDateXboxOriginalGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XboxOriginalGame.MediaTypeId);
                DateTime preLastRetrievedDateXNACommunityGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XnaCommunityGame.MediaTypeId);

                // Get the latest data from the MediaUserRatingAggregateInfo table for the item we just rated
                itemToRate = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                // Submit rating
                XeUser user = TestUtils.CreateRatingsUser(UserType.Gold, itemToRate.CountryCode);

                XRLMsnSubmitRating request = new XRLMsnSubmitRating();
                request.Request.userXuid = user.UserPuid;
                request.Request.mediaId = itemToRate.MediaId;
                request.Request.ratingValue = TestUtils.GetRandomRatingValue();
                request.Request.userCountryId = user.CountryId;
                request.Slot.AddService(ServerTestFramework.LiveService.XOService.Ratings);

                // Make the Service Call
                if (!request.Execute())
                {
                    throw new UnexpectedTestResultException("XRLMsnSubmitRating failed: " + request.GetDumpString());
                }

                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMsnSubmitRating returned XErr=0x{0:x}", request.XErr));
                }

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                // Execute the Cron Job
                Global.RO.Info("Executing Cron Job a second time...");

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Cron Job Executed!");

                // Retrieve the last retrieved dates for all the content types.
                DateTime postLastRetrievedDateFullXbox360Game = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.FullXbox360Game.MediaTypeId);
                DateTime postLastRetrievedDateXboxArcadeGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XboxArcadeGame.MediaTypeId);
                DateTime postLastRetrievedDateXboxOriginalGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XboxOriginalGame.MediaTypeId);
                DateTime postLastRetrievedDateXNACommunityGame = SqlManager.GetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.XnaCommunityGame.MediaTypeId);

                // Validation
                Global.RO.Info("Validating...");
                Assert.IsTrue(preLastRetrievedDateFullXbox360Game != postLastRetrievedDateFullXbox360Game, String.Format("The last retrieved date for full Xbox 360 (MediaTypeId 1) games was unchanged! Expected: !='{0}' Got: '{1}'", preLastRetrievedDateFullXbox360Game, postLastRetrievedDateFullXbox360Game));
                Assert.IsTrue(preLastRetrievedDateXboxArcadeGame != postLastRetrievedDateXboxArcadeGame, String.Format("The last retrieved date for Xbox LIVE Arcade games (MediaTypeId 23) was unchanged! Expected: !='{0}' Got: '{1}'", preLastRetrievedDateXboxArcadeGame, postLastRetrievedDateXboxArcadeGame));
                Assert.IsTrue(preLastRetrievedDateXboxOriginalGame != postLastRetrievedDateXboxOriginalGame, String.Format("The last retrieved date for Xbox Original games (MediaTypeId 21)was unchanged! Expected: !='{0}' Got: '{1}'", preLastRetrievedDateXboxOriginalGame, postLastRetrievedDateXboxOriginalGame));
                Assert.IsTrue(preLastRetrievedDateXNACommunityGame != postLastRetrievedDateXNACommunityGame, String.Format("The last retrieved date for Indie games (MediaTypeId 37) was unchanged! Expected: !='{0}' Got: '{1}'", preLastRetrievedDateXNACommunityGame, postLastRetrievedDateXNACommunityGame));
            }

        #endregion

            #region MSNRR Aggregation functional test cases - Negative

            /// <summary>
            /// Simulates the inability to connect to the MSNRR backend and looks to see that the appropriate event is thrown
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Handle the case in which a connection to MSNRR cannot be established.")]
            public void N_ConnectionToMsnRRFails()
            {
                // Set up the redirect to the emulator and force a dropped connection.
                Global.RO.Info("Preparing Emulator...");

                Guid contentId = new Guid(CronSpecificContentTypes.TestType1.ContentTypeId);
                DateTime lastDate = DateTime.MinValue;
                string transToken = String.Empty;
                DateTime startTime;
                XmlNode results = null;

                AggregatorEmulator emu = new AggregatorEmulator();
                IAggregatorSoap mock = emu.StartRecording();

                mock.GetRatingAverages(contentId, lastDate, false, ref transToken, out startTime, out results);
                LastCall.On(mock).IgnoresArgument(0).IgnoresArgument(1).IgnoresArgument(2).IgnoresArgument(3).ClosesConnection();
                emu.StopRecording(mock);

                SettingState previousValue = Global.XEnv.OverrideSetting("ALL", "ALL", "msnrr_serviceAggregatorUrl", emu.GetUrl(mock), -1);

                TestUtils.RecycleCRONAppPool();

                Global.RO.Info("Emulator ready!");

                DateTime lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    Global.XEnv.RestoreOverrideSettingState(previousValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                Thread.Sleep(TimeSpan.FromSeconds(30));

                // We're looking for eventId 50957 from Cron
                int expectedEventId = 50957;
                if (!TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, DateTime.MaxValue.ToUniversalTime()))
                {
                    throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                }
            }

            /// <summary>
            /// Verifies the the rows in the MSNAggregateRatingInfo are unchanged when the MSNRRAggregate job fails to run
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that MSNAggregateRatingInfo is not updated when the CRON job fails.")]
            public void N_VerifyMSNAggregateRatingInfoUnchangedOnCompleteFailure()
            {
                // 1) Get all ratings data in the table.
                // 2) Run the CRON Job against the emulator and simulate a failure.
                // 3) Get a new copy of the ratings data in the table.
                // 4) Compare the two -- should be 100% unchanged.

                // Take a snapshot of the data in MSNAggregateRatingInfo
                Global.RO.Info("Saving state of MSNAggregateRatingInfo table...");
                List<MSNAggregateRatingInfo> preTestRunSnapshot = SqlManager.GetMSNAggregateRatingInfo(-1);

                // Set up the redirect to the emulator and force a dropped connection.
                Global.RO.Info("Preparing Emulator...");

                Guid contentId = new Guid(CronSpecificContentTypes.TestType1.ContentTypeId);
                DateTime lastDate = DateTime.MinValue;
                string transToken = String.Empty;
                DateTime startTime;
                XmlNode results = null;

                AggregatorEmulator emu = new AggregatorEmulator();
                IAggregatorSoap mock = emu.StartRecording();

                mock.GetRatingAverages(contentId, lastDate, false, ref transToken, out startTime, out results);
                LastCall.On(mock).IgnoresArgument(0).IgnoresArgument(1).IgnoresArgument(2).IgnoresArgument(3).ClosesConnection();
                emu.StopRecording(mock);

                SettingState previousValue = Global.XEnv.OverrideSetting("ALL", "ALL", "msnrr_serviceAggregatorUrl", emu.GetUrl(mock), -1);

                TestUtils.RecycleCRONAppPool();

                Global.RO.Info("Emulator ready!");

                DateTime lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    Global.XEnv.RestoreOverrideSettingState(previousValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Retrieving final state of MSNAggregateRatingInfo table...");
                List<MSNAggregateRatingInfo> postTestRunSnapshop = SqlManager.GetMSNAggregateRatingInfo(-1);

                Global.RO.Info("Validating...");
                foreach (MSNAggregateRatingInfo info in preTestRunSnapshot)
                {
                    for (int i = 0; i < postTestRunSnapshop.Count; ++i)
                    {
                        if (postTestRunSnapshop[i].MediaTypeId == info.MediaTypeId)
                        {
                            Assert.AreEqual(info.LastRetrievedDate, postTestRunSnapshop[i].LastRetrievedDate, String.Format("The last retrieved aggregate rating info for MediaTypeId {0} changed!", info.MediaTypeId));
                            break;
                        }
                        else if (i == postTestRunSnapshop.Count - 1)
                        {
                            // Error if we searched through all rows and didn't find a match...
                            throw new UnexpectedTestResultException("MSNAggregateRatingInfo table appears to be modified after a failed Import Ratings Job iteration!!!!! Please investigate...");
                        }
                    }
                }
            }

            /// <summary>
            /// Verify that the job fails gracefully when given invalid xml results
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job fails gracefully when given invalid xml results.")]
            public void N_VerifyGracefulFailureWithInvalidXmlResults()
            {
                // Set up the redirect to the emulator and force invalid xml results.
                Global.RO.Info("Preparing Emulator...");

                Guid contentId = new Guid();
                DateTime lastDate = DateTime.Now;

                string transToken = String.Empty;
                string returnedTransToken = String.Empty;

                DateTime startTime = DateTime.Now.AddDays(-2);
                DateTime returnedStartTime = DateTime.Now;

                string expectedXml = "<bogustag><bogusresult>BOGUS</bogusresult></bogustag>";
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(expectedXml);
                XmlNode returnedResults = doc.FirstChild;
                XmlNode results = null;

                AggregatorEmulator emu = new AggregatorEmulator();
                IAggregatorSoap mock = emu.StartRecording();

                mock.GetRatingAverages(contentId, lastDate, false, ref transToken, out startTime, out results);
                LastCall.On(mock).IgnoresArgument(0).IgnoresArgument(1).IgnoresArgument(2).IgnoresArgument(3).OutArguments(null, null, null, returnedTransToken, returnedStartTime, returnedResults);
                emu.StopRecording(mock);

                SettingState previousValue = Global.XEnv.OverrideSetting("ALL", "ALL", "msnrr_serviceAggregatorUrl", emu.GetUrl(mock), -1);

                TestUtils.RecycleCRONAppPool();

                Global.RO.Info("Emulator ready!");

                DateTime lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    Global.XEnv.RestoreOverrideSettingState(previousValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                Thread.Sleep(TimeSpan.FromSeconds(30));

                // We're looking for eventId 50957 from Cron
                int expectedEventId = 50957;
                if (!TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, DateTime.MaxValue.ToUniversalTime()))
                {
                    throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                }
            }

            /// <summary>
            /// Verify that the job fails gracefully when ratings_contenttype_mapping contains well-formed but corrupted XML
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job fails gracefully when ratings_contenttype_mapping contains well-formed but corrupted XML.")]
            public void N_VerifyGracefulFailureWithCorruptedWellFormedMappings()
            {
                // Backup existing contentTypeId data.
                Global.RO.Info("Preserving existing content type mappings...");
                string preTestRatingsContentTypeMappingValue = SqlManager.GetRatingsContentTypeMappingValue();
                Global.RO.Info("Done!");

                DateTime lastWrittenEventGeneratedTime = DateTime.MinValue.ToUniversalTime();
                DateTime jobFinishedRunning = DateTime.MaxValue.ToUniversalTime();
                int msnRRAggregatesTestJobId = 0;

                try
                {
                    Global.RO.Info("Setting invalid content type mappings...");
                    string bogusContentTypeMapping = "<root><bogusTag bogusAttribute=\"1\" /></root>";
                    SqlManager.SetRatingsContentTypeMappingValue(bogusContentTypeMapping);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    Global.RO.Info("Done!");

                    Global.RO.Info("Validating...");
                    Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                    Thread.Sleep(TimeSpan.FromSeconds(30));
                    lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);

                    jobFinishedRunning = DateTime.UtcNow;
                }
                finally
                {
                    SqlManager.SetRatingsContentTypeMappingValue(preTestRatingsContentTypeMappingValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");
                Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                Thread.Sleep(TimeSpan.FromSeconds(30));

                // We should see a success event 15563
                int expectedEventId = 15563;
                if (!TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, jobFinishedRunning))
                {
                    throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                }
            }

            /// <summary>
            /// Verify that the job fails gracefully when ratings_contenttype_mapping contains malformed XML
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job fails gracefully when ratings_contenttype_mapping contains malformed XML.")]
            public void N_VerifyGracefulFailureWithMalformedMappings()
            {
                // Backup existing contentTypeId data.
                Global.RO.Info("Preserving existing content type mappings...");
                string preTestRatingsContentTypeMappingValue = SqlManager.GetRatingsContentTypeMappingValue();
                Global.RO.Info("Done!");

                DateTime lastWrittenEventGeneratedTime = DateTime.MinValue.ToUniversalTime();
                DateTime jobFinishedRunning = DateTime.MaxValue.ToUniversalTime();
                int msnRRAggregatesTestJobId = 0;

                bool foundEvent = false;
                try
                {
                    Global.RO.Info("Setting invalid content type mappings...");
                    string bogusContentTypeMapping = "<root><bogusTag bogusAttribute=\"1\" /><missingCloseTag><stuff></stuff></root>";
                    SqlManager.SetRatingsContentTypeMappingValue(bogusContentTypeMapping);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    Global.RO.Info("Done!");

                    Global.RO.Info("Validating...");
                    Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                    Thread.Sleep(TimeSpan.FromSeconds(30));
                    lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                    msnRRAggregatesTestJobId = TestUtils.AddMSNRRAggregatesTestCronJob();

                    // Since we aren't going to able to wait for the job to execute (it shouldn't execute in this state) 
                    // lets continually look for the expected event with an eventId of 53028
                    int expectedEventId = 53028;
                    Global.RO.Info("Checking for the expected event every 30 seconds for a maximum total time of 5 minutes...");
                    DateTime start = DateTime.Now;
                    while (!foundEvent && DateTime.Now < start.AddMinutes(5))
                    {
                        Global.RO.Info("Sleeping for 30 seconds before looking for the expected event...");
                        Thread.Sleep(TimeSpan.FromSeconds(30));
                        foundEvent = TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, jobFinishedRunning);   
                    }

                    if (foundEvent)
                    {
                        Global.RO.Success("Found an event with the expected eventId ({0})!", expectedEventId);
                    }
                    else
                    {
                        throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                    }
                }
                finally
                {
                    Global.RO.Info("Cleaning up...");
                    SqlManager.SetRatingsContentTypeMappingValue(preTestRatingsContentTypeMappingValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }
            }

            /// <summary>
            /// Verify that the job performs as expected with a lastRetrievedDate that is in the future
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job performs as expected with a lastRetrievedDate that is in the future.")]
            public void N_VerifyWithFutureLastRetrievedDate()
            {
                // 1) Backup the existing date in the db. 
                // 2) Modify date to the future.
                // 3) Run the importRatings job.
                // 4) Check the return value.
                // 5) Restore the database.

                // Backup existing date.
                Global.RO.Info("Preserving existing last retrieved date...");
                string preTestLastRetrievedDate = SqlManager.GetTransactionDateForMediaTypeAsString(NPDB_MSNContentTypeMappings.FullXbox360Game.MediaTypeId);
                Global.RO.Info("Done!");

                List<MediaUserRatingAggregateInfo> preTestSnapshot = SqlManager.GetAllMediaUserRatingAggregateInfo();

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    Global.RO.Info("Setting last retrieved date in the future...");
                     SqlManager.SetTransactionDateToFutureForMediaType(NPDB_MSNContentTypeMappings.FullXbox360Game.MediaTypeId);
                    Global.RO.Info("Done!");

                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    SqlManager.SetTransactionDateForMediaType(NPDB_MSNContentTypeMappings.FullXbox360Game.MediaTypeId, preTestLastRetrievedDate);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                List<MediaUserRatingAggregateInfo> postTestSnapshot = SqlManager.GetAllMediaUserRatingAggregateInfo();

                if (preTestSnapshot.Count != postTestSnapshot.Count)
                {
                    throw new UnexpectedTestResultException("The MediaUserAggregateRatingInfo was not the same size after the test executed. This is unexpected!");
                }

                foreach (MediaUserRatingAggregateInfo preItem in preTestSnapshot)
                {
                    MediaUserRatingAggregateInfo postItem = SqlManager.GetMediaUserRatingAggregateInfo(preItem.MediaId, preItem.CountryCode);
                    if (postItem == null)
                    {
                        throw new UnexpectedTestResultException("Unable to retrieve MediaUserAggregateRatingInfo for validation!");
                    }

                    if (preItem.LastRatedDate != postItem.LastRatedDate)
                    {
                        throw new UnexpectedTestResultException(String.Format("The 'lastRatedDate' field in a record was changed in the MediaUserAggregateRatingInfo table!! Expected: {0}, Actual: {1}", preItem.LastRatedDate.ToString(), postItem.LastRatedDate.ToString()));
                    }

                    if (preItem.ModifiedDate != postItem.ModifiedDate)
                    {
                        throw new UnexpectedTestResultException(String.Format("The 'modifiedDate' field in a record was changed in the MediaUserAggregateRatingInfo table!! Expected: {0}, Actual: {1}", preItem.ModifiedDate.ToString(), postItem.ModifiedDate.ToString()));
                    }
                }
            }

            /// <summary>
            /// Verify that the job fails gracefully when ratings_contenttype_mapping contains a non-existing contentTypeId
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job fails gracefully when ratings_contenttype_mapping contains a non-existing contentTypeId.")]
            public void N_VerifyGracefulFailureWithNonExistingContentTypeId()
            {
                // 1) Backup the existing content type mappings in the db. 
                // 2) Modify to contain a valid contentTypeId that is not known to MSN.
                // 3) Run the importRatings job.
                // 4) Check the return value.
                // 5) Restore the database.

                // Backup existing contentTypeId data.
                Global.RO.Info("Preserving existing content type mappings...");
                string preTestRatingsContentTypeMappingValue = SqlManager.GetRatingsContentTypeMappingValue();
                Global.RO.Info("Done!");

                DateTime lastWrittenEventGeneratedTime = DateTime.MinValue.ToUniversalTime();
                DateTime jobFinishedRunning = DateTime.MaxValue.ToUniversalTime();
                int msnRRAggregatesTestJobId = 0;

                try
                {
                    Global.RO.Info("Setting invalid content type mappings...");
                    string bogusContentTypeMapping = "<root><contentTypeMapping mediatype=\"1\" contentTypeId=\"9d0451ac-badb-adba-dbad-83fc1cce4db8\"/></root>";
                    SqlManager.SetRatingsContentTypeMappingValue(bogusContentTypeMapping);
                    Global.RO.Info("Done!");

                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    Global.RO.Info("Done!");

                    Global.RO.Info("Validating...");
                    Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                    Thread.Sleep(TimeSpan.FromSeconds(30));
                    lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);

                    jobFinishedRunning = DateTime.UtcNow;
                }
                finally
                {
                    SqlManager.SetRatingsContentTypeMappingValue(preTestRatingsContentTypeMappingValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");
                Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                Thread.Sleep(TimeSpan.FromSeconds(30));

                // We should see a success event with an eventId of 40056
                int expectedEventId = 40056;
                if (!TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, jobFinishedRunning))
                {
                    throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                }
            }

        #endregion
        }

        #endregion

        #region Ventura Aggregation functional test cases

        /// <summary>
        /// Functional test cases for the MSNRRAverages CRON plugin using the Ventura backend
        /// </summary>
        [TestGroup, Owner("JeremyJ"), EnvRequirement("Billing,Catalog"), Description("Functional test cases for the MSNRRAverages CRON plugin using the MSNRR backend")]
        public class Ventura_MsnRRAggregationTest_FunctionalTestCases : TestNode
        {
            /// <summary>
            /// SettingState object to store the ratings_aggregate_use_ventura value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsAggregateUseVentura;

            /// <summary>
            /// SettingState object to store the ratings_use_msnrr value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsUseMSNRR;

            /// <summary>
            /// SettingState object to store the ratings_use_ventura value prior to this test group being run
            /// </summary>
            private SettingState previousRatingsUseVentura;

            #region PreRun and PostRun

            /// <summary>
            /// Before any test in the test group is run the MSNRRAverages CRON plugin and XBL Ratings FD are configured to only use the Ventura backend
            /// </summary>
            public override void PreRun()
            {
                // Check to see if the existing MSNRRAverages job is currently executing and if so wait...
                TestUtils.WaitUntilMSNRRAggregatesCronJobIsExecuted();

                // Disable the real cron job to avoid two jobs potentially running at the same time
                TestUtils.MSNRRAggregatesCronJobSetEnabled(false);

                this.previousRatingsAggregateUseVentura = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_aggregate_use_ventura", "true", -1);
                this.previousRatingsUseMSNRR = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_use_msnrr", "false", -1);
                this.previousRatingsUseVentura = Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_use_ventura", "true", -1);

                TestUtils.RecycleCRONAppPool();
                TestUtils.RecycleRatingsAppPool();

                // The following is necessary since the first time we turn on Ventura aggregation the initial update may take awhile
                // Kick off a MSNRRAveragesTest job and wait until it is finished executing
                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId, 40);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }
            }

            /// <summary>
            /// Restores the previous MSNRRAverages CRON plugin and XBL Ratings FD settings to their states prior to the test group being run
            /// </summary>
            public override void PostRun()
            {
                // Re-enable the MSNRRAggregates CRON job
                TestUtils.MSNRRAggregatesCronJobSetEnabled(true);

                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsAggregateUseVentura);
                TestUtils.RecycleCRONAppPool();

                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsUseMSNRR);
                Global.XEnv.RestoreOverrideSettingState(this.previousRatingsUseVentura);
                TestUtils.RecycleRatingsAppPool();
            }

            #endregion

            #region Ventura Aggregation functional test cases - Positive

            /// <summary>
            /// Submits a rating, runs the MSNRRAggregate job, and validates that the rows in the MediaUserRatingAggregateInfo table are accurate
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Consume all the changed ratings in Ventura after submitting a rating for a random aggregatable media.")]
            public void P_ConsumeAllRatings()
            {
                MediaUserRatingAggregateInfo itemToRate = SqlManager.GetRandomAggregatedMedia();

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                TestUtils.PrepareMediaForAggregation(itemToRate);

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int preMsnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out preMsnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(preMsnRRAggregatesTestJobId);
                }

                // Get the latest data from the MediaUserRatingAggregateInfo table for the item we just rated
                itemToRate = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                // Submit rating
                XeUser user = TestUtils.CreateRatingsUser(UserType.Gold, itemToRate.CountryCode);
                XRLMsnSubmitRating request = new XRLMsnSubmitRating();
                request.Request.userXuid = user.UserPuid;
                request.Request.mediaId = itemToRate.MediaId;
                request.Request.ratingValue = TestUtils.GetRandomRatingValue();
                request.Request.userCountryId = user.CountryId;
                request.Slot.AddService(ServerTestFramework.LiveService.XOService.Ratings);

                // Make the Service Call
                if (!request.Execute())
                {
                    throw new UnexpectedTestResultException("XRLMsnSubmitRating failed: " + request.GetDumpString());
                }

                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMsnSubmitRating returned XErr=0x{0:x}", request.XErr));
                }

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                MediaUserRatingAggregateInfo postAggregationItem = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Assert.IsTrue(postAggregationItem.NumberOfRatings > itemToRate.NumberOfRatings, String.Format("The number of ratings was not greater than the previous number of ratings! Expected: >'{0}' Got: '{1}'", itemToRate.NumberOfRatings, postAggregationItem.NumberOfRatings));
                
                // Ideally we'd use greater than rather than not equal however I've seen time differences in Azure that ended up with the time after aggregation being less than prior to aggregation
                Assert.IsTrue(postAggregationItem.LastRatedDate != itemToRate.LastRatedDate, String.Format("The last rated date was equal to the last rated date! Expected: !='{0}' Got: '{1}'", itemToRate.LastRatedDate, postAggregationItem.LastRatedDate));
            }

            /// <summary>
            /// Validates the last retrieved listId is updated as expected
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(1), EnvRequirement("Billing,Catalog"), Description("Validates the last retrieved listId is updated as expected")]
            public void P_ListIdUpdated()
            {
                MediaUserRatingAggregateInfo itemToRate = SqlManager.GetRandomAggregatedMedia();

                if (itemToRate == null)
                {
                    throw new UnexpectedTestResultException("Unable to retrieve the expected Media ID / Country Code combination from the database! Is there missing test data??");
                }

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                TestUtils.PrepareMediaForAggregation(itemToRate);

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                int preMsnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out preMsnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(preMsnRRAggregatesTestJobId);
                }

                Global.RO.Info("The MSNRRAggregatesTest Cron job executed!");

                // Retrieve the list id of the last processed list.
                string preListId = SqlManager.GetVenturaAggregateRatingInfoListId();

                // Get the latest data from the MediaUserRatingAggregateInfo table for the item we just rated
                itemToRate = SqlManager.GetMediaUserRatingAggregateInfo(itemToRate.MediaId, itemToRate.CountryCode);

                Global.RO.Debug("The media to be rated is {0} in the {1} with a count of {2} ratings", itemToRate.MediaId, itemToRate.CountryCode, itemToRate.NumberOfRatings);

                // Submit rating
                XeUser user = TestUtils.CreateRatingsUser(UserType.Gold, itemToRate.CountryCode);

                XRLMsnSubmitRating request = new XRLMsnSubmitRating();
                request.Request.userXuid = user.UserPuid;
                request.Request.mediaId = itemToRate.MediaId;
                request.Request.ratingValue = TestUtils.GetRandomRatingValue();
                request.Request.userCountryId = user.CountryId;
                request.Slot.AddService(ServerTestFramework.LiveService.XOService.Ratings);

                // Make the Service Call
                if (!request.Execute())
                {
                    throw new UnexpectedTestResultException("XRLMsnSubmitRating failed: " + request.GetDumpString());
                }

                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMsnSubmitRating returned XErr=0x{0:x}", request.XErr));
                }

                // Wait for the ratings to get updated
                Global.RO.Info("Sleeping for a minute to ensure the rating is updated...");
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(60));

                // Execute the Cron Job
                Global.RO.Info("Executing Cron Job a second time...");

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Cron Job Executed!");

                // Retrieve the last retrieved listId
                string postListId = SqlManager.GetVenturaAggregateRatingInfoListId();

                // Validation
                Assert.IsTrue(preListId != postListId, String.Format("The last retrieved listId was unchanged! Expected: '{0}' Got: '{1}'", preListId, postListId));
            }

            #endregion

            #region Ventura Aggregation functional test cases - Negative

            /// <summary>
            /// Simulates the inability to connect to the Ventura backend and looks to see that the appropriate event is thrown
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Handle the case in which a connection to MSNRR cannot be established.")]
            public void N_ConnectionToVenturaSDSFails()
            {
                SettingState previousValue = Global.XEnv.OverrideSetting("ALL", "ALL", "venturarr_serviceDirectoryServiceUrl", "http://invalidVenturaSDSUrl.com", -1);

                TestUtils.RecycleCRONAppPool();
                TestUtils.RecycleRatingsAppPool();

                DateTime lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                int msnRRAggregatesTestJobId = 0;

                try
                {
                    TestUtils.SendVenturaCreateNewAggregateListMessage();
                    TestUtils.AddAndExecuteMSNRRAggregatesTestJob(out msnRRAggregatesTestJobId);
                }
                finally
                {
                    Global.XEnv.RestoreOverrideSettingState(previousValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }

                Global.RO.Info("Validating...");

                Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                Thread.Sleep(TimeSpan.FromSeconds(30));

                // We're looking for eventId 15560 from Cron
                int expectedEventId = 15560;
                if (!TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, DateTime.MaxValue.ToUniversalTime()))
                {
                    throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                }
            }

            /// <summary>
            /// Verify that the job fails gracefully when ratings_contenttype_mapping contains malformed XML
            /// </summary>
            [TestCase, Owner("JeremyJ"), TestCasePriority(2), EnvRequirement("Billing,Catalog"), Description("Verify that the job fails gracefully when ratings_contenttype_mapping contains malformed XML.")]
            public void N_VerifyGracefulFailureWithMalformedMappings()
            {
                // Backup existing contentTypeId data.
                Global.RO.Info("Preserving existing content type mappings...");
                string preTestRatingsContentTypeMappingValue = SqlManager.GetRatingsContentTypeMappingValue();
                Global.RO.Info("Done!");

                DateTime lastWrittenEventGeneratedTime = DateTime.MinValue.ToUniversalTime();
                DateTime jobFinishedRunning = DateTime.MaxValue.ToUniversalTime();
                int msnRRAggregatesTestJobId = 0;

                bool foundEvent = false;
                try
                {
                    Global.RO.Info("Setting invalid content type mappings...");
                    string bogusContentTypeMapping = "<root><bogusTag bogusAttribute=\"1\" /><missingCloseTag><stuff></stuff></root>";
                    SqlManager.SetRatingsContentTypeMappingValue(bogusContentTypeMapping);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    Global.RO.Info("Done!");

                    Global.RO.Info("Validating...");
                    Global.RO.Info("Sleeping 30 seconds to ensure any relevant event are written...");
                    Thread.Sleep(TimeSpan.FromSeconds(30));
                    lastWrittenEventGeneratedTime = TestUtils.GetLastWrittenEventTimeGeneratedUTC();

                    msnRRAggregatesTestJobId = TestUtils.AddMSNRRAggregatesTestCronJob();

                    // Since we aren't going to able to wait for the job to execute (it shouldn't execute in this state) 
                    // lets continually look for the expected event with an eventId of 53028
                    int expectedEventId = 53028;
                    Global.RO.Info("Checking for the expected event every 30 seconds for a maximum total time of 5 minutes...");
                    DateTime start = DateTime.Now;
                    while (!foundEvent && DateTime.Now < start.AddMinutes(5))
                    {
                        Global.RO.Info("Sleeping for 30 seconds before looking for the expected event...");
                        Thread.Sleep(TimeSpan.FromSeconds(30));
                        foundEvent = TestUtils.FindCronEventGeneratedByTest(expectedEventId, lastWrittenEventGeneratedTime, jobFinishedRunning);
                    }

                    if (foundEvent)
                    {
                        Global.RO.Success("Found an event with the expected eventId ({0})!", expectedEventId);
                    }
                    else
                    {
                        throw new UnexpectedTestResultException(String.Format("Unable to find an event with the expected eventId ({0})!", expectedEventId));
                    }
                }
                finally
                {
                    Global.RO.Info("Cleaning up...");
                    SqlManager.SetRatingsContentTypeMappingValue(preTestRatingsContentTypeMappingValue);
                    TestUtils.RecycleCRONAppPool();
                    TestUtils.RecycleRatingsAppPool();
                    TestUtils.RemoveMSNRRAggregatesTestCronJob(msnRRAggregatesTestJobId);
                }
            }

            #endregion
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\ProvisioningSample\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\ProvisioningSampleTest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\provisioningtest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\TokenGenerationJob\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\ProvisioningSample\ProvisionSample.cs ===
// 
// ProvisionSample.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service


using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Diagnostics;
using System.Text;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;

//task: CHANGE log area to the name of your .dll file, 
//task: SEARCH & replace through the file
[assembly: XomAreaDefinition(XomAreaName.provisioning)]

//task: CHANGE namespace
namespace xonline.server.cron.plugins.sample
{

    //NOTE: You must implement ICronJob, but also must have cronlib.dll as a source to get 
    // the correct class reference, otherwise it won't pass the (yourjob is ICronJob) test in cronfd 
    public class SampleJob : ICronJob
    {
        public bool ShareHealthBlock
        {
            get { return true; }
        }

        public static   string provConnectionString;
        public const    string ActionsTableName = "Actions";
        
        static SampleJob()
        {
            IInterfaceInfo provisioningdb = Config.GetSingleInterface(Interface.provisioning);
            provConnectionString = provisioningdb.SqlConnectionString;
        }

        public void Execute(uint jobID, uint titleId, ref Hashtable args)
        {

            //log this to let the world know we got called
            Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, "SampleJob Plug-In was called - jobID: " + jobID + " titleID: " + titleId + " args: " + PluginUtil.HashtableToXml( args ) );

            //the XML string should always have EventID, PUID and ComponentID
            if ( args.Count < 3 )
            {
                throw new InvalidSampleTaskException( "Code Bug: An insufficient number of arguments was supplied to Provisioning Plug-in." );
            }

            //take advantage of short-circuit logic evaluation
            //if not ( all values are good )
            if ( !
                (
                ( 
                args.ContainsKey( ProvConst.EventID ) && ( args[ ProvConst.EventID ].ToString().Length > 0 ) 
                ) &&

                ( 
                args.ContainsKey( ProvConst.PUIDKey ) && ( args[ ProvConst.PUIDKey ].ToString().Length > 0 ) 
                ) &&

                ( 
                args.ContainsKey( ProvConst.bstrServiceComponentId ) && ( args[ ProvConst.bstrServiceComponentId ].ToString().Length > 0 ) 
                ) 
                )
                )
            {
                throw new InvalidSampleTaskException( ArgsString( args ) );
            }

            //the enum variable can be assigned to weird values, so we check the value
            ProvisioningEvent evt = ProvisioningEvent.InvalidEvent;
            evt = (ProvisioningEvent) args[ ProvConst.EventID ];

            if ( ( evt <= ProvisioningEvent.InvalidEvent ) || ( evt >= ProvisioningEvent.MaxEvent ) )
            {
                throw new InvalidSampleTaskException( ArgsString( args ) );
            }

            Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, "SampleJob executed a " + evt + " job. Params were: " + ArgsString( args ) );

            switch ( evt )
            {
                case ProvisioningEvent.Provision:
                    //task: ADD Your Provision code here
                    break;
                case ProvisioningEvent.Disable:
                    //task: ADD Your Disable code here
                    break;
                case ProvisioningEvent.Enable:
                    //task: ADD Your Enable code here
                    break;
                case ProvisioningEvent.Deprovision:
                    //task: ADD Your Deprovision code here
                    break;
            }
        } // execute

        
        public static string ArgsString( Hashtable argsIn )
        {    
            StringBuilder sb = new StringBuilder( " Args passed in had " + argsIn.Count + " items and they are: \n", 200 );

            foreach (object o in argsIn.Keys )
            {
                sb.Append( "  Key " + o + "  Value: " + argsIn[o] );
            }

            return sb.ToString();
        }


        //for now, it's been agreed text audit logs should be sufficient.
//        //log a row for look up later about what we did
//        //might be used in other plug-ins at some point.
//        public static void WriteToAuditTable( ) //params go here  
//        {
//            using (SqlConnection auditConn = new SqlConnection( SampleJob.provConnectionString ) )
//            {
//                auditConn.Open();
//                SqlCommand auditCmd = auditConn.CreateCommand();
//                auditCmd.CommandType = CommandType.StoredProcedure;
//                auditCmd.CommandText = "p_WriteToProvisioningAudit";
//
//                //                auditCmd.Parameters.Add( "paramname", SqlDbType.SqlInt );
//                //                auditCmd.Parameters[ "paramname" ].Direction = ParameterDirection.Input;
//
//                auditCmd.ExecuteNonQuery();
//            }
//
//        } // write to audit

    } // class SampleJob


    //task: CHANGE the details of this exception
    public class InvalidSampleTaskException : System.Exception
    {
        const string message = "An Invalid Sample Provisioning Task was encountered. ";
        public InvalidSampleTaskException( ) :  base( message ) { }
        public InvalidSampleTaskException( string exceptionString ) :  base( message + exceptionString ) { }
    }

    //task: ADD performance counters
    //        [XomPerformanceCounterCategoryAttr( "Cron: Job counters", "Cron service jobs" )]
    //            public class CronJobCounters : XomPerformanceCounterCategory
    //        {
    //            static public CronJobCounters Current = new CronJobCounters();
    //
    //            [XomPerformanceCounterAttr(
    //                 "Job executions/sec", 
    //                 "Job executions per second", 
    //                 PerformanceCounterType.RateOfCountsPerSecond32)]
    //            public PerformanceCounter ExecRate;
    //
    //            [XomPerformanceCounterAttr(
    //                 "Job execution total", 
    //                 "Total number of jobs executed", 
    //                 PerformanceCounterType.NumberOfItems64)]
    //            public PerformanceCounter ExecTotal;
    // 
    //        } 

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\MSNRRAggregationTest\MsnRRAggregationTest\SqlManager.cs ===
﻿//------------------------------------------------------------------------------
// <copyright file="SqlManager.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// <author>MattLec</author>
// <owner>JeremyJ</owner>
// <lastModifiedBy>JeremyJ</lastModifiedBy>
// <lastModifiedDate>03/21/2011</lastModifiedDate>
//------------------------------------------------------------------------------

namespace xonline.server.cron.plugins.MSNRRAggregation.test
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Text;
    
    using ServerTestFramework;

    using xonline.common.sql.sqlclient;

    /// <summary>
    /// SqlManager class
    /// </summary>
    public static class SqlManager
    {
        #region NPDB - Cron related database queries...

        /// <summary>
        /// Retreives the job information for a CRON job named 'jobName'.
        /// </summary>
        /// <param name="jobName">The name of the job to get data for.</param>
        /// <returns>CronJob object.</returns>
        public static CronJobInfo GetCronJob(string jobName)
        {
            CronJobInfo job = null;

            using (SqlClient sqlClient = new SqlClient("npdb", true))
            {
                string cmd = String.Format("SELECT TOP(1) * FROM t_cron_jobs WHERE vc_name='{0}'", jobName);
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        sqlDataReader.Read();
                        job = new CronJobInfo();
                        job.JobId = sqlDataReader.GetInt32(0);
                        job.JobName = sqlDataReader.GetString(1);
                        job.TitleId = sqlDataReader.GetInt32(2);
                        job.Assembly = sqlDataReader.GetString(3);
                        job.ClassName = sqlDataReader.GetString(4);

                        if (sqlDataReader.IsDBNull(5) == false)
                        {
                            job.TextArgs = sqlDataReader.GetString(5);
                        }
                        else
                        {
                            job.TextArgs = null;
                        }

                        job.NextScheduledExecution = sqlDataReader.GetDateTime(6);
                        job.NextActualExecution = sqlDataReader.GetDateTime(7);
                        job.ExecutionIntervalSeconds = sqlDataReader.GetInt32(8);
                        job.ExecutionCount = sqlDataReader.GetInt32(9);
                        job.ExecutionTimeoutSeconds = sqlDataReader.GetInt32(10);
                        job.ExecutingFrontDoor = sqlDataReader.GetString(11);
                        job.JobEnabled = sqlDataReader.GetByte(12);
                        job.ErrorText = sqlDataReader.GetString(13);
                    }
                    else
                    {
                        throw new Exception(String.Format("A CRON job with vc_name='{0}' could NOT be retrieved! SQL Command: {1}", jobName, cmd));
                    }
                }
            }

            return job;
        }

        /// <summary>
        /// Returns the 'ratings_contenttype_mapping' value in t_settings for the current environment.
        /// </summary>
        /// <returns>String containing the content type mapping XML.</returns>
        public static string GetRatingsContentTypeMappingValue()
        {
            return Global.XEnv.GetSetting("ratings_contenttype_mapping");
        }

        /// <summary>
        /// Sets the 'ratings_contenttype_mapping' value for the current environment to 'newValue'.
        /// </summary>
        /// <param name="newValue">The new value for the ratings_contenttype_mapping setting</param>
        public static void SetRatingsContentTypeMappingValue(string newValue)
        {
            Global.XEnv.OverrideSetting("ALL", "ALL", "ratings_contenttype_mapping", newValue, -1);
            Global.XEnv.ForceConfigReload("ratings");
        }

        #endregion

        #region CATALOG - User Ratings related database queries...

        /// <summary>
        /// Retrieves all rows from the MediaUserRatingAggregateInfo table.
        /// </summary>
        /// <returns>Returns a list of MediaUserRatingAggregateInfo objects</returns>
        public static List<MediaUserRatingAggregateInfo> GetAllMediaUserRatingAggregateInfo()
        {
            List<MediaUserRatingAggregateInfo> ratingInfo = null;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("SELECT mediaId, ratingAggregate, countryCode, numberOfRatings, lastRatedDate, modifiedDate FROM MediaUserRatingAggregate");
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        ratingInfo = new List<MediaUserRatingAggregateInfo>();

                        while (sqlDataReader.Read())
                        {
                            MediaUserRatingAggregateInfo row = new MediaUserRatingAggregateInfo();

                            row.MediaId = sqlDataReader.GetGuid(0);
                            row.RatingAggregate = (float)sqlDataReader.GetDecimal(1);
                            row.CountryCode = sqlDataReader.GetString(2);
                            row.NumberOfRatings = sqlDataReader.GetInt32(3);
                            row.LastRatedDate = sqlDataReader.GetDateTime(4);
                            row.ModifiedDate = sqlDataReader.GetDateTime(5);
                            ratingInfo.Add(row);
                        }
                    }
                    else
                    {
                        throw new Exception(String.Format("Could NOT retrieve any data from MediaUserRatingAggregateInfo! SQL Command: {0}", cmd));
                    }
                }
            }

            return ratingInfo;
        }

        /// <summary>
        /// Retrieves a specific MediaUserAggregateRatingInfo object.
        /// </summary>
        /// <param name="mediaId">Media Id to retrieve info for.</param>
        /// <param name="countryCode">Country Code to retrieve info for.</param>
        /// <returns>MediaUserAggregateRatingInfo with data specific to the provided GUID/CountryCode pair, or NULL if no data can be retrieved.</returns>
        public static MediaUserRatingAggregateInfo GetMediaUserRatingAggregateInfo(Guid mediaId, string countryCode)
        {
            MediaUserRatingAggregateInfo ratingInfo = null;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("SELECT TOP(1) mediaId, ratingAggregate, countryCode, numberOfRatings, lastRatedDate, modifiedDate FROM MediaUserRatingAggregate WHERE mediaId='{0}' AND countryCode='{1}'", mediaId.ToString("D"), countryCode.ToUpper());
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        sqlDataReader.Read();
                        ratingInfo = new MediaUserRatingAggregateInfo();
                        ratingInfo.MediaId = sqlDataReader.GetGuid(0);
                        ratingInfo.RatingAggregate = (float)sqlDataReader.GetDecimal(1);
                        ratingInfo.CountryCode = sqlDataReader.GetString(2);
                        ratingInfo.NumberOfRatings = sqlDataReader.GetInt32(3);
                        ratingInfo.LastRatedDate = sqlDataReader.GetDateTime(4);
                        ratingInfo.ModifiedDate = sqlDataReader.GetDateTime(5);
                    }
                    else
                    {
                        throw new Exception(String.Format("Unable to retrieve an aggregate rating for {0} in {1} MediaUserRatingAggregateInfo! SQL Command: {2}", mediaId, countryCode, cmd));
                    }
                }
            }

            return ratingInfo;
        }

        /// <summary>
        /// Gets a random ratable media from the MediaUserRatingAggregateInfo table
        /// </summary>
        /// <returns>A ratable mediaId from the MediaUserRatingAggregateInfo table</returns>
        public static MediaUserRatingAggregateInfo GetRandomAggregatedMedia()
        {
            MediaUserRatingAggregateInfo ratingInfo = null;

            string[] ratableMediaTypeIds = Global.XEnv.MultiSettingRead("ratings_mediatypes");
            StringBuilder whereClause = new StringBuilder(String.Empty);
            if (ratableMediaTypeIds.Length > 0)
            {
                whereClause.Append("WHERE MediaUserRatingAggregate.mediaId = Media.mediaId AND (");
                for (int x = 0; x < ratableMediaTypeIds.Length; x++)
                {
                    if (x != 0)
                    {
                        whereClause.Append(" OR ");
                    }

                    whereClause.Append(String.Format("Media.mediaTypeId='{0}'", ratableMediaTypeIds[x]));
                }

                whereClause.Append(")");
            }

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("SELECT TOP(1) MediaUserRatingAggregate.mediaId, MediaUserRatingAggregate.ratingAggregate, MediaUserRatingAggregate.countryCode, MediaUserRatingAggregate.numberOfRatings, MediaUserRatingAggregate.lastRatedDate, MediaUserRatingAggregate.modifiedDate, Media.mediaTypeId ,NEWID() AS randGuid FROM MediaUserRatingAggregate, Media {0} ORDER BY randGuid", whereClause);
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        sqlDataReader.Read();
                        ratingInfo = new MediaUserRatingAggregateInfo();
                        ratingInfo.MediaId = sqlDataReader.GetGuid(0);
                        ratingInfo.RatingAggregate = (float)sqlDataReader.GetDecimal(1);
                        ratingInfo.CountryCode = sqlDataReader.GetString(2);
                        ratingInfo.NumberOfRatings = sqlDataReader.GetInt32(3);
                        ratingInfo.LastRatedDate = sqlDataReader.GetDateTime(4);
                        ratingInfo.ModifiedDate = sqlDataReader.GetDateTime(5);
                    }
                    else
                    {
                        throw new Exception(String.Format("Unable to retrieve an aggregate rating from the MediaUserRatingAggregateInfo table! SQL Command: {0}", cmd));
                    }
                }
            }

            return ratingInfo;
        }

        /// <summary>
        /// Retrieves information about each media type and its associated last retrieved date.
        /// </summary>
        /// <param name="mediaTypeId">mediaTypeId to request data for, specify -1 for all media types.</param>
        /// <returns>Collection of MSNAggregateRatingInfo objects containing mediaTypeId/lastRetrievedDate pairs.</returns>
        public static List<MSNAggregateRatingInfo> GetMSNAggregateRatingInfo(int mediaTypeId)
        {
            List<MSNAggregateRatingInfo> mediaTypeIdInfo = null;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                StringBuilder cmd = new StringBuilder("SELECT * FROM MSNAggregateRatingInfo");
                if (mediaTypeId != -1)
                {
                    cmd.AppendFormat(" WHERE mediaTypeId='{0}'", mediaTypeId);
                }
                
                sqlClient.Command.CommandText = cmd.ToString();
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        mediaTypeIdInfo = new List<MSNAggregateRatingInfo>();

                        while (sqlDataReader.Read())
                        {
                            MSNAggregateRatingInfo row = new MSNAggregateRatingInfo();
                            row.MediaTypeId = sqlDataReader.GetInt32(0);
                            row.LastRetrievedDate = sqlDataReader.GetDateTime(1);
                            mediaTypeIdInfo.Add(row);
                        }
                    }
                    else
                    {
                        throw new Exception(String.Format("Unable to retrieve any mediaTypeId,lastRetrievedDate pairs! SQL Command: {0}", cmd));
                    }
                }
            }

            return mediaTypeIdInfo;
        }

        /// <summary>
        /// Obtains the lastRetreivedDate for the given Media Type Id.
        /// </summary>
        /// <param name="mediaTypeId">Media Type Id to retrieve the lastRetrievedDate for.</param>
        /// <returns>DateTime containing the last retrieved date, or DateTime.MinValue if not available.</returns>
        public static DateTime GetTransactionDateForMediaType(int mediaTypeId)
        {
            DateTime transactionDate = DateTime.MinValue;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("SELECT * FROM MSNAggregateRatingInfo WHERE mediaTypeId='{0}'", mediaTypeId);
                sqlClient.Command.CommandText = cmd.ToString();
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        while (sqlDataReader.Read())
                        {
                            transactionDate = sqlDataReader.GetDateTime(1);
                        }
                    }
                }
            }

            return transactionDate;
        }

        /// <summary>
        /// Obtains the lastRetrievedDate for the given Media Type Id as a string.
        /// </summary>
        /// <param name="mediaTypeId">Media Type Id to retrieve the lastRetrievedDate for.</param>
        /// <returns>string containing the last retrieved date.</returns>
        public static string GetTransactionDateForMediaTypeAsString(int mediaTypeId)
        {
            DateTime transactionDate = DateTime.MinValue;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("SELECT * FROM MSNAggregateRatingInfo WHERE mediaTypeId='{0}'", mediaTypeId);
                sqlClient.Command.CommandText = cmd.ToString();
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader sqlDataReader = sqlClient.Execute())
                {
                    if (sqlDataReader.HasRows)
                    {
                        while (sqlDataReader.Read())
                        {
                            transactionDate = sqlDataReader.GetDateTime(1);
                        }
                    }
                    else
                    {
                        throw new Exception(String.Format("Unable to get the last retrieved date for MediaTypeId {0}. SQL Command: {1}", mediaTypeId, cmd));
                    }
                }
            }

            return transactionDate.ToString();
        }

        /// <summary>
        /// Sets the lastRetrievedDate for the given mediaId to the string provided.
        /// WARNING: DO NOT USE THIS API UNLESS YOU KNOW WHAT YOU ARE DOING!!!
        /// </summary>
        /// <param name="mediaTypeId">media Id to set a new date for.</param>
        /// <param name="newDate">string to set in the DB</param>
        public static void SetTransactionDateForMediaType(int mediaTypeId, string newDate)
        {
            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                string cmd = String.Format("UPDATE MSNAggregateRatingInfo SET lastRetrievedDate='{0}' WHERE mediaTypeId='{1}'", newDate, mediaTypeId);
                sqlClient.Command.CommandText = cmd.ToString();
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                sqlClient.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Gets the listId from the VenturaAggregateRatingInfo table
        /// </summary>
        /// <returns>A string containing the current listId of the current Ventura aggregate rating list</returns>
        public static string GetVenturaAggregateRatingInfoListId()
        {
            string listId = String.Empty;

            using (SqlClient sqlClient = new SqlClient("ContentIngestionCatalogDB"))
            {
                sqlClient.StoredProc = "VenturaAggregateRatingInfoGet";
                listId = Convert.ToString(sqlClient.ExecuteScalar());
            }

            // The PreRun should've populated the table long before this function is ever called
            if (listId == String.Empty)
            {
                throw new Exception("The VenturaAggregateRatingInfo listId was empty!");
            }

            return listId;
        }

        /// <summary>
        /// Sets the lastRetrievedDate for the given Media Id to 2500-12-31 23:59:59.999
        /// </summary>
        /// <param name="mediaTypeId">Media Id to reset the lastRetrievedDate for.</param>
        internal static void SetTransactionDateToFutureForMediaType(int mediaTypeId)
        {
            SetTransactionDateForMediaType(mediaTypeId, "2500-12-31 23:59:59.999");
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\provisioning\Provisioning.cs ===
// 
// Provisioning.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron Job interfaces
// Xbox Online Service


using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Diagnostics;
using System.Text;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;

[assembly: XomAreaDefinition(XomAreaName.provisioning)]

namespace xonline.server.cron.plugins.provisioning
{

    //NOTE: You must implement ICronJob, but also must have cronlib.dll as a source to get 
    // the correct class reference, otherwise it won't pass the (yourjob is ICronJob) test in cronfd 
    internal class ProvisioningJob : ICronJob
    {
        public static   string provConnectionString;
        public const    string ActionsTableName = "Actions";

        public bool ShareHealthBlock
        {
            get { return false; }
        }
        
        static ProvisioningJob()
        {
            IInterfaceInfo provisioningdb = Config.GetSingleInterface(Interface.provisioning);
            provConnectionString = provisioningdb.SqlConnectionString;
        }

        public void Execute(uint jobID, uint titleId, ref Hashtable args)
        {

            //log this to let the world know we got called
            Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, "Cron called Provisioning - jobID: " + jobID + " titleID: " + titleId + " args: " + PluginUtil.HashtableToXml( args ) );

            //the XML string should always have EventID, PUID and ComponentID
            if ( args.Count < 3 )
            {
                throw new InvalidProvisioningTaskException( "Code Bug: An insufficient number of arguments was supplied to Provisioning Plug-in." );
            }

            //take advantage of short-circuit logic evaluation
            //if not ( all values are good )
            if ( !
                (
                  ( 
                    args.ContainsKey( ProvConst.EventID ) && ( args[ ProvConst.EventID ].ToString().Length > 0 ) 
                   ) &&

                  ( 
                    args.ContainsKey( ProvConst.PUIDKey ) && ( args[ ProvConst.PUIDKey ].ToString().Length > 0 ) 
                   ) &&

                  ( 
                    args.ContainsKey( ProvConst.bstrServiceComponentId ) && ( args[ ProvConst.bstrServiceComponentId ].ToString().Length > 0 ) 
                   ) 
                 )
                )
            {
                throw new InvalidProvisioningTaskException( "Code Bug: Arguments necessary to process the event were not present. Args: " + ArgsString( args ) );
            }

            //the enum variable can be assigned to weird values, so we check the value
            ProvisioningEvent evt = ProvisioningEvent.InvalidEvent;
            evt = (ProvisioningEvent) args[ ProvConst.EventID ];

            if ( ( evt <= ProvisioningEvent.InvalidEvent ) || ( evt >= ProvisioningEvent.MaxEvent ) )
            {
                //XOMTrace(         ice.Desc );
                throw new InvalidProvisioningTaskException( ArgsString( args ) );
            }

            DataSet actionDS;
            //NOTE: It's entirely possible for our Billing Partner to make multiple calls to the Callback
            //server for a single change to a customer's offers (provision, deprovision, etc).
            //I've added code to Callback to look before adding a task, but that's merely a 
            // performance help, it is NO GUARANTEE that a service-specific task won't be called 
            // multiple times.

            //NOTE: ALL SERVICE SPECIFIC TASKS MUST BE IDEMPOTENT, JUST LIKE CALLBACK API'S
            // lookup which actions should be scheduled
            actionDS = GetActionsForEvent( evt );

            // schedule the necessary actions
            ProvisioningJob.ScheduleJobs( actionDS, args );

        } // execute

        
        public static string ArgsString( Hashtable argsIn )
        {    
            StringBuilder sb = new StringBuilder( " Args passed in had " + argsIn.Count + " items and they are: \n", 200 );

            foreach (object o in argsIn.Keys )
            {
                sb.Append( "  Key " + o + "  Value: " + argsIn[o] + "\n" );
            }

            return sb.ToString();
        }

        //we will likely be keeping this in a cached, disconnected fashion, at some point, 
        // so, returning a dataset seemed an obvious choice.
        public static DataSet GetActionsForEvent( ProvisioningEvent eventType )
        {

            DataSet actionDS = null;
            // p_GetActionsForEvent
            using (SqlConnection actionConn = new SqlConnection( ProvisioningJob.provConnectionString ) )
            {
                SqlDataAdapter actionAdp = new SqlDataAdapter();
                actionAdp.TableMappings.Add( "Table", ActionsTableName );
                actionConn.Open();

                SqlCommand actionCmd = actionConn.CreateCommand();
                actionCmd.CommandType = CommandType.StoredProcedure;
                actionCmd.CommandText = "p_GetActionsForEvent";

                actionCmd.Parameters.Add( "@iEventID", SqlDbType.Int ).Value = (int) eventType;
                actionCmd.Parameters[ "@iEventID" ].Direction = ParameterDirection.Input;  
 
                actionAdp.SelectCommand = actionCmd;
                actionDS = new DataSet( ActionsTableName );
                actionAdp.Fill( actionDS );
            }

            return actionDS;
        }

        //log a row for look up later about what we did
        //might be used in other plug-ins at some point.
        public static void WriteToAuditTable( ) //params go here  
        {
            using (SqlConnection auditConn = new SqlConnection( ProvisioningJob.provConnectionString ) )
            {
                auditConn.Open();
                SqlCommand auditCmd = auditConn.CreateCommand();
                auditCmd.CommandType = CommandType.StoredProcedure;
                auditCmd.CommandText = "p_WriteToProvisioningAudit";

//                auditCmd.Parameters.Add( "paramname", SqlDbType.SqlInt );
//                auditCmd.Parameters[ "paramname" ].Direction = ParameterDirection.Input;

                auditCmd.ExecuteNonQuery();
            }

        }

        //since all provision events will do basically the same thing
        //it's factored out here for clarity
        public static void ScheduleJobs( DataSet actionDS, Hashtable args )
        {

            //did we even get data?
            if ( ( actionDS.Tables.Count == 0 ) || ( actionDS.Tables[ ActionsTableName ] == null ) )
            {
                throw new Exception("Dataset does not contain a table called Action, or no data was returned." );
            }

            //make sure all necessary args are present
            if (
                ( ! args.ContainsKey( ProvConst.EventID ) ) ||
                ( ! args.ContainsKey( ProvConst.bstrServiceComponentId ) ) ||
                ( ! args.ContainsKey( ProvConst.PUIDKey ) ) 
                )
            {
                throw new Exception("Some arguments necessary for scheduling jobs were not available. Args present were: " + PluginUtil.HashtableToXml( args ) );
            }

            HResult hr = 0;
            int newJobID = 0;
            foreach( DataRow actionRow in actionDS.Tables[ ActionsTableName ].Rows )
            {
                string newJobName = ProvisioningUtil.CreateServiceSpecificJobName( 
                    ( ProvisioningEvent )   args[ ProvConst.EventID ], 
                    ( long )                args[ ProvConst.PUIDKey ], 
                    ( string )              args[ ProvConst.bstrServiceComponentId ], 
                    ( string )              actionRow["vc_name"], 
                    ( byte )                actionRow["ti_action_id"]
                    );

                //it's more work this way, but if the Provisioning XML schema changes, this will adapt...
                Hashtable argHash = new Hashtable();
                //EventID needs to be an int, since Cron doesn't know about ProvConst ... (bugged)
                argHash.Add( ProvConst.EventID,                  (int)                 args[ ProvConst.EventID ] );
                argHash.Add( ProvConst.bstrServiceComponentId,   (string)              args[ ProvConst.bstrServiceComponentId ] );
                argHash.Add( ProvConst.PUIDKey,                  (string)              args[ ProvConst.PUIDKey ].ToString() );
                argHash.Add( ProvConst.SvcActionPreface,         (string)              actionRow["ti_action_id"].ToString() );

                string xmlParameters = PluginUtil.HashtableToXml( argHash );
                DateTime execTime = System.DateTime.UtcNow.AddSeconds( (int) actionRow["i_execute_interval_seconds"] );

                //because some values are always positive, and SQL doesn't have 
                // a type which is always positive, Steve & Co. decided to make the protocol
                // have a uint, while the db holds it as an int... very annoying... 

//                hr = CronUtil.AddJob(    
//                    newJobName, 
//                    (uint) Math.Abs( (int) actionRow["i_title_id"] ),
//                    (string) actionRow["vc_assembly"],
//                    (string) actionRow["vc_class"],
//                    (uint) Math.Abs( (int) actionRow["i_exec_count"] ),         // 1,   // uint execCount
//                    (uint) Math.Abs( (int) actionRow["i_timeout_seconds"] ),    //10,   // uint timeoutSecs
//                    execTime,                                  //System.DateTime.Now.AddSeconds( (int) actionRow["i_execute_interval_seconds"] ),
//                    (uint) Math.Abs( (int) actionRow["i_interval_seconds"] ),   // 3,  // intervalSecs
//                    xmlParameters, 
//                    out newJobID
//                    );   

                HTTPAuthData fakedAuthData = new HTTPAuthData( );
	            string authData = fakedAuthData.GetBase64EncodedString();

                AddJobRequest  addCronJobReq  = new AddJobRequest();
                AddJobResponse addCronJobResp = new AddJobResponse();
                XRLObject2     resp           = (XRLObject2)addCronJobResp;

                addCronJobReq.name         = newJobName;
                addCronJobReq.titleId      = (uint) Math.Abs( (int) actionRow["i_title_id"] );
                addCronJobReq.assembly     = (string) actionRow["vc_assembly"];
                addCronJobReq.className    = (string) actionRow["vc_class"];
                addCronJobReq.argsXml      = xmlParameters;
                addCronJobReq.execCount    = (uint) Math.Abs( (int) actionRow["i_exec_count"] );
                addCronJobReq.timeoutSecs  = (uint) Math.Abs( (int) actionRow["i_timeout_seconds"] );
                addCronJobReq.nextExec     = execTime;
                addCronJobReq.intervalSecs = (uint) Math.Abs( (int) actionRow["i_interval_seconds"] );

                hr = 0;
                //need make a string here first, since the XomTrace macro has "call length" limitations...
                string logString = "Provisioning create job - jobID: " + newJobID + " titleID: " 
                    + actionRow["i_title_id"] + " assm: " + actionRow["vc_assembly"] 
                    + " class: " + actionRow["vc_class"] + " ExecTime: " + execTime 
                    + "  XMLParams: " + xmlParameters;

                try
                {
                    hr = XRLUtil.PostXrlRequest(XOService.Cron, addCronJobReq.GetXRL(), authData, addCronJobReq, ref resp);
                    //task: WriteToAuditTable()
                }
                catch ( Exception e )
                {
                    //task: WriteToAuditTable() when defined
                    //task: write an event... 
                    Xom.Trace(XomAreaName.provisioning, LogLevel.L_ERROR, e.Message + "\nFAILED CALL: " + logString );
                }
                if (HResult.Succeeded(hr))
                {
                    newJobID = addCronJobResp.jobId;
                }

                Xom.Trace(XomAreaName.provisioning, LogLevel.L_LOW, logString );

            } // foreach

        } // schedulejobs

    } // class


    //task: fill in details for exception
    public class InvalidProvisioningTaskException : System.Exception
    {
        const string message = "An Invalid Provisioning Task was encountered. ";
        public InvalidProvisioningTaskException( ) :  base( message ) { }
        public InvalidProvisioningTaskException( string exceptionString ) :  base( message + exceptionString ) { }
    }

    //task: add performance counters
    //        [XomPerformanceCounterCategoryAttr( "Provisioning: Job counters", "Prov jobs" )]
    //            public class ProvJobCounters : XomPerformanceCounterCategory
    //        {
    //            static public CronJobCounters Current = new CronJobCounters();
    //
    //            [XomPerformanceCounterAttr(
    //                 "Job executions/sec", 
    //                 "Job executions per second", 
    //                 PerformanceCounterType.RateOfCountsPerSecond32)]
    //            public PerformanceCounter ExecRate;
    //
    //            [XomPerformanceCounterAttr(
    //                 "Job execution total", 
    //                 "Total number of jobs executed", 
    //                 PerformanceCounterType.NumberOfItems64)]
    //            public PerformanceCounter ExecTotal;
    // 
    //        } 

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\TokenGenerationJob\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\TokenGenerationJob\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\TokenGenerationJob\TokenGenerateJobPlugin.cs ===
using System;
using System.Web;
using System.Collections;
using System.Data;
using System.Xml;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Threading;

using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.common.billing;
using xonline.common.service;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.token;
using System.Data.SqlClient;

namespace xonline.server.cron.plugins.TokenGeneratePlugIns
{
    /// <summary>
    /// Main class for testing long running processes
    /// </summary>
    public class TokenGeneratePlugIn : CronJobExtender
    {
        public override void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_LOW, string.Format("TokenGeneratePlugIn.Execute: called with jobId: {0}, titleId: 0x{1}...", jobId, titleId.ToString("x")));

            // Get the token job according to my hash bucket number
            int totalBuckets = (args["totalbuckets"] == null) ? 0 : (int)(args["totalbuckets"]);
            int myHashBucketNumber = (args["bucketnumber"] == null) ? -1 : (int)(args["bucketnumber"]);

            // Validate the total bucktes and bucketnumber
            if (totalBuckets <= 0 || totalBuckets > 100 || // More than 100 cron jobs for token generation doesn't seems to make sense.
                myHashBucketNumber < 0 || myHashBucketNumber > (totalBuckets - 1))
            {
                Xom.NtEvent(XEvent.Id.TOKEN_GENERATION_INVALID_CRON_JOB_PARAMETER,
                    "TokenGeneratePlugIn.Execute: totalBuckets ({0}) must be between 0 and 100 and myHashBucketNumber ({1}) must be between 0 and {0}", totalBuckets, myHashBucketNumber
                );

                return;
            }

            Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_NORMAL, string.Format("TokenGeneratePlugIn.Execute: totalBuckets: {0}, myHashBucketNumber: {1}", totalBuckets, myHashBucketNumber));

            // Retrieve a job from pending token jobs that correponding to my bucket number.
            TokenJob myJob = GetTokenJob(myHashBucketNumber, totalBuckets);
            if (myJob != null)
            {
                // add the AlternateBillingUrl or other Behavior Injections
                if (!string.IsNullOrEmpty(myJob.BehaviorInjection))
                {
                    BillingProvider.SetSessionAlternateUrl(myJob.BehaviorInjection);
                }

                try
                {
                    // If job is stale, cleanup any completed progress
                    if (myJob.IsStale)
                    {
                        Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_HIGH, string.Format("TokenGeneratePlugIn.Execute: resetting stale token jobId: {0} ", myJob.Id));
                        myJob.ResetStaleJob();
                    }

                    // Now let's do the real job.
                    Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_NORMAL, string.Format("TokenGeneratePlugIn.Execute: calling GenerateTokens for jobId: {0}", myJob.Id));

                    myJob.GenerateTokens();

                    Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_NORMAL, string.Format("TokenGeneratePlugIn.Execute: jobId {0} is complete and has been delivered.", myJob.Id));
                }
                catch (Exception ex)
                {
                    try
                    {
                        // Record job failure to token job table.
                        HResult hr = XRLException.ToHResult(ex, HResult.XONLINE_E_TOKEN_UNKNOWN_ERROR);

                        // Exception is for Sure Not retryable, then mark job failed
                        // retry for exceptions that are not IRetryableException
                        if (ex is IRetryableException && ((ex as IRetryableException).IsRetryable == false))
                        {
                            myJob.MarkJobFailure(hr, ex.Message);
                        }
                        else // retryable
                        {
                            myJob.RecordJobFailure(hr, ex.Message);
                        }
                    }
                    catch (Exception ex2)
                    {
                        // Record job failure again failed, log an event
                        Xom.NtEvent(XEvent.Id.TOKEN_GENERATION_RECORD_TOKEN_JOB_FAILURE_FAILED, ex2,
                            "RecordJobFailure failed."
                        );
                    }
                    // Log an event and we should be fine to consider this cron job is finished.
                    Xom.NtEvent(XEvent.Id.TOKEN_GENERATION_CRON_JOB_FAILED, ex, "Token job failed.");
                }
                finally
                {
                    // clear Bahavior Injection
                    RequestHeaderBehaviorInjectionMgr.ClearBehaviorInjections();
                }
            }
        }

        private TokenJob GetTokenJob(int myHashBucket, int TotalBuckets)
        {
            // getting a list of all pending job ids from TokenJobs table
            Guid[] pendingJobIds = TokenJob.GetPendingJobIds();

            // calculating hashes for pendingJobIds list
            // and returning the first token job matching the CRON Job bucket number
            foreach (Guid currGuid in pendingJobIds)
            {
                byte[] guidByte = currGuid.ToByteArray();
                Int64 guid64 = BitConverter.ToInt64(guidByte, 0);
                int currJobIdHashBucket = (int)(guid64 % TotalBuckets);
                Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_NORMAL, String.Format("Get token job {0}, bucket number {1} ", currGuid.ToString(), currJobIdHashBucket));
                if (currJobIdHashBucket == myHashBucket)
                {
                    return TokenJob.GetPendingJob(currGuid);
                }
            }

            Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_NORMAL, "TokenGeneratePlugIn.GetTokenJob: no pending jobs found.");

            return null; // no pending job matches found
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\crontest.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Threading;
using System.Xml;

using ServerTestFramework;
using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.comps.common;
using xonline.common.mgmt;
using xonline.server.query.plugins.Sample2;
using xonline.common.stfutil;
using xonline.common.sql.sqlclient;

                           
[assembly: XomAreaDefinition(XomAreaName.crontest)]


namespace xonline.server.comps.test.dvt 
{
    [TestGroup, DVT]
    public class CronDevTest : TestNode
    {    
    
        public const uint PLUGINTEST_ATTR_NONCE                   = 0x00000001;
        public const uint PLUGINTEST_ATTR_START                   = 0x00000002;
        public const uint PLUGINTEST_ATTR_END                     = 0x00000003;

        public const uint PLUGINTEST_ACTION_TIMING_TEST           = 0x00000001;
        
        public const uint CRON_TEST_TITLE_ID                      = 0x000004d2;        

/*    
		public override void Initialize(XmlDocument config)
        {
            // XomLoggingControl.Init();
        }            
                                                 
		public override void DeinitializeSuite()
        {
            // XomLoggingControl.Close();
        }            
*/
        
        
        public uint AddJob(string name, string className, Hashtable args, uint execCount, uint timeoutSecs, DateTime nextExec, uint intervalSecs, out int jobid)
        {
            AddJobRequest  addCronJobReq  = new AddJobRequest();
            AddJobResponse addCronJobResp = new AddJobResponse();
            XRLObject2     xrlo           = (XRLObject2)addCronJobResp;
            uint           hr;
            
            addCronJobReq.name         = name;
            addCronJobReq.titleId      = CRON_TEST_TITLE_ID;
            addCronJobReq.assembly     = "crontest.dll";
            addCronJobReq.className    = className;
            addCronJobReq.argsXml      = (args == null ? "" : PluginUtil.HashtableToXml(args));
            addCronJobReq.execCount    = execCount;
            addCronJobReq.timeoutSecs  = timeoutSecs;
            addCronJobReq.nextExec     = nextExec;
            addCronJobReq.intervalSecs = intervalSecs;
            
    
            hr = XRLUtil.PostXrlRequest(XOService.Cron, addCronJobReq.GetXRL(), new HTTPAuthData(0, 0, 0, 0, 0, 0, 0).GetBase64EncodedString(), addCronJobReq, ref xrlo);
            jobid = addCronJobResp.jobId;
            
            return hr;
            
        }
        
        
        [TestCase]
        public void Add()
        {
            Console.WriteLine( "Adding new job...");
            int jobId;
            
            uint hr = AddJob("Basic test", "xonline.server.cron.test.dvt.CronTest", null, 1, 30, DateTime.UtcNow, 0, out jobId);
            Assert.AreEqual(hr, HResult.S_OK);
            
            Console.WriteLine( "Done.  new job id " + jobId.ToString() );
        }
        
        [TestCase]
        public void ErrorTest()
        {
            Console.WriteLine( "Adding new job...");
            int jobId;
            DateTime execTime = DateTime.UtcNow;
            
            uint hr = AddJob("Basic test", "xonline.server.cron.test.dvt.CronErrorTest", null, 1, 30, execTime, 0, out jobId);
            Assert.AreEqual(hr, HResult.S_OK);
            Console.WriteLine( "Done.  new job id " + jobId.ToString() );
            
            
            using (SqlClient cxn = new SqlClient(Interface.npdb))
            {
                cxn.StoredProc = "p_cron_load_job";
                cxn.AddParameter("@i_job_id", jobId);
                             
                SqlDataReader reader = null;
                for (int i = 0; i < 3; i++)
                {
                    Console.WriteLine( "Waiting for job to complete...");
                    Thread.Sleep(500);
                    
                    Console.WriteLine( "Checking for job results...");
                    reader = cxn.Execute();
                    
                    if (!reader.Read())
                    {
                        throw new Exception("Couldn't find the job that was just added!!");
                    }
                    
                    if ((byte)reader["b_enabled"] == 2)
                    {
                        break;
                    }
                }
            
                
                Assert.AreEqual((byte)reader["b_enabled"], 2);
                Assert.IsTrue((DateTime)reader["dt_exec_next_scheduled"] >= execTime.AddMinutes(2));
            }            
        }
            
        

        [TestCase]
        public void TimingTest()
        {
            uint hr;
            Hashtable ctx = new Hashtable();
            int nonce = (new Random()).Next();
            int jobId;
            DateTime run1, run2;
            
            run1 = DateTime.UtcNow;
            run2 = run1.AddSeconds(1);
            
            
            Console.WriteLine( "Adding timing job #1 to run for 4 s starting at " + run1 + "...");
            
            ctx["seconds"] = 2;
            ctx["nonce"] = nonce;
            
            
            hr = AddJob("Timing test", "xonline.server.cron.test.dvt.CronTimingTest", ctx, 1, 60, run1, 10, out jobId);
            Assert.AreEqual(hr, HResult.S_OK);
            Console.WriteLine( "Done.  new job id " + jobId.ToString() );
            
            Console.WriteLine( "Adding timing job #2 to run for 1 s starting at " + run2 + "...");
            ctx["seconds"] = 1;
            
            // make sure this job runs *after* the first one
            // review: adding a second fails, not sure why yet. 
            hr = AddJob("Timing test", "xonline.server.cron.test.dvt.CronTimingTest", ctx, 1, 60, run2, 10, out jobId);
            Assert.AreEqual(hr, HResult.S_OK);
            Console.WriteLine( "Done.  new job id " + jobId.ToString() );
            
            
            // set up query attributes & specs for search
            
            SearchForTestResults search = new SearchForTestResults();
            SearchForTestResultsResults[] results = null;
            search.Nonce = nonce;
                                                                                                              
            for (int i = 0; i < 3; i++)
            {
                Console.WriteLine( "Waiting for jobs to complete...");
                Thread.Sleep(2 * 1000);
                
                Console.WriteLine( "Checking for job results...");
                hr = search.Execute(CRON_TEST_TITLE_ID, 2, out results);
                Assert.AreEqual(hr, HResult.S_OK);
                
                Console.WriteLine( "Search found " + results.Length+ " results.");
                
                if (results.Length >= 2)
                {
                    break;
                }
                
            }
            
            
            Assert.IsTrue(results != null, "Couldn't find any results!");
            if (results != null)
            {
                Console.WriteLine( "Checking recorded run times..");
                
                Assert.IsTrue(results.Length >= 2, "Not eough results!");
                Assert.IsTrue(results[0].StartTime <= results[1].StartTime, "Start time for first job is after start time for second job!");
                Assert.IsTrue(results[0].EndTime   >  results[1].EndTime,   "End time for first job is before end time for second job!");
                
                Console.WriteLine( "All good!!  Removing entries..");
                
                RemoveTimingEntries removeEntires = new RemoveTimingEntries();
                removeEntires.Nonce = nonce;
                
                hr = removeEntires.Execute(CRON_TEST_TITLE_ID, 0, 0, 2);
                Assert.AreEqual(hr, HResult.S_OK);
                
                
                Console.WriteLine( "Done!");
                
                
            }
        }
        
        bool _stopThreads = false;
        Exception _threadEx = null;
        ManualResetEvent _threadHaultEvent = new ManualResetEvent(true);

        [TestCase]
        public void StressJobPickup()
        {
            Thread[] threads = new Thread[5];
            
            Console.WriteLine("starting stress threads..");
            
            _stopThreads = false;
            _threadEx = null;
            _threadHaultEvent.Reset();
            
            threads[0] = new Thread(new ThreadStart(AddJobsForStress));
            threads[0].Start();
                                                                
            for (int i = 1; i < threads.Length; i++)
            {
                threads[i] = new Thread(new ThreadStart(PickupJobs));
                threads[i].Start();
            }
            
            
            Console.WriteLine("Waiting 30 seconds for something to break..");
            
            _threadHaultEvent.WaitOne(30 * 1000, false);
            _stopThreads = true;
            
            if (_threadEx != null)
            {
                Console.WriteLine("");
                
                // someone threw an Exception!  rethrow it
                throw new Exception("One of the job stress threads threw an exception!", _threadEx);
            }
            
        }
        
        
        
        private void AddJobsForStress()
        {
            SqlConnection cxn = null;
            SqlCommand cmd = null;

            
            try
            {
                IInterfaceInfo npdbInfo = Config.GetSingleInterface(Interface.npdb);
                using (cxn = new SqlConnection("Data Source=" + npdbInfo.IPAddressString + ";Initial Catalog=" + npdbInfo.DBName + ";Integrated Security=SSPI"))
                {
                    cxn.Open();
                    
                    // SP command
                    cmd = new SqlCommand("p_cron_add_job", cxn);
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add(new SqlParameter("@vc_name", ""));
                    cmd.Parameters.Add(new SqlParameter("@i_title_id", 0x1234));
                    cmd.Parameters.Add(new SqlParameter("@vc_assembly", "crontest.dll"));
                    cmd.Parameters.Add(new SqlParameter("@vc_class", "xonline.server.cron.test.dvt.CronTest"));
                    cmd.Parameters.Add(new SqlParameter("@txt_args", DBNull.Value));
                    cmd.Parameters.Add(new SqlParameter("@dt_exec_next", DateTime.UtcNow));
                    cmd.Parameters.Add(new SqlParameter("@i_interval_secs", 5));
                    cmd.Parameters.Add(new SqlParameter("@i_exec_count", 1));
                    cmd.Parameters.Add(new SqlParameter("@i_exec_timeout", 5));
                    cmd.Parameters.Add(new SqlParameter("@i_job_id", 0));
                    cmd.Parameters["@i_job_id"].Direction = ParameterDirection.Output;
                    
                    for (int i = 0; i < 100 && !_stopThreads; i++)
                    {
                        cmd.Parameters["@vc_name"].Value = "job # " + i;
                        cmd.ExecuteNonQuery();
                        
                        Console.Write("+");
                    }
                }                  
            }
            catch(Exception e)
            {
                _threadEx = e;
                _threadHaultEvent.Set();
            }
            
        }

        private void PickupJobs()
        {
            SqlConnection cxn = null;
            SqlCommand cmd = null;
            SqlCommand cmdVerify = null;
            SqlCommand cmdRemove = null;
            
            
            
            try
            {
                IInterfaceInfo npdbInfo = Config.GetSingleInterface(Interface.npdb);
                using (cxn = new SqlConnection("Data Source=" + npdbInfo.IPAddressString + ";Initial Catalog=" + npdbInfo.DBName + ";Integrated Security=SSPI"))
                {
                    cxn.Open();
                    
                    // SP command
                    cmd = new SqlCommand("p_cron_get_next_job", cxn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    
                    cmd.Parameters.Add(new SqlParameter("@dt_time", DateTime.UtcNow));
                    cmd.Parameters.Add(new SqlParameter("@vc_frontdoor", ""));
                    
                    int i = 0;
                    string fdname = "Thread: " + Thread.CurrentThread.GetHashCode().ToString("x");
                    
                    cmdVerify = new SqlCommand();
                    cmdVerify.Connection = cxn;
                    
                    cmdRemove = new SqlCommand("p_cron_remove_job", cxn);
                    cmdRemove.CommandType = CommandType.StoredProcedure;
                    
                    cmdRemove.Parameters.Add(new SqlParameter("@i_job_id", 0));
                    cmdRemove.Parameters.Add(new SqlParameter("@i_title_id", 0x1234));
                    
                    
                    while (!_stopThreads)
                    {
                        cmd.Parameters["@vc_frontdoor"].Value = fdname + " Interval: " + i;
                        int jobId = (int)cmd.ExecuteScalar();
                        
                        
                        if (jobId != 0)
                        {
                            // make sure we reserved this job and nobody else got it too
                            cmdVerify.CommandText = "select vc_exec_frontdoor from t_cron_jobs where i_job_id = " + jobId.ToString();

                            string jobFD = (string)cmdVerify.ExecuteScalar();

                            if (jobFD != (string)cmd.Parameters["@vc_frontdoor"].Value)
                            {
                                throw new Exception("Error: Executing job as " + (string)cmd.Parameters["@vc_frontdoor"].Value + " but picked up job being executed by " + jobFD);
                            }
                            
                            cmdRemove.Parameters["@i_job_id"].Value = jobId;
                            cmdRemove.ExecuteNonQuery();
                            
                            Console.Write("-");
                        }    
                        
                        i++;  
                        
                    }
                }                  
            }
            catch(Exception e)
            {
                _threadEx = e;
                _threadHaultEvent.Set();
            }
        }
            
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\CronAbort.cs ===
using System;
using System.Xml;
using ServerTestFramework;
using System.Data.SqlClient;
using System.Data;

using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;

namespace xonline.server.comps.test.dvt 
{
    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("Cron")]
    public class CronAbortTest
    {
        [TestGroupSetup]
        public void Setup() 
        {
            Global.RO.Info("Inserting cron abort test job");
            string cmd = "INSERT INTO t_cron_jobs(vc_name,i_title_id,vc_assembly,vc_class,txt_args,dt_exec_next_scheduled,dt_exec_next_actual,i_exec_interval_secs,i_exec_count,i_exec_timeout,vc_exec_frontdoor,b_enabled,vc_error_text)"
                        +"VALUES (N'CronAbortTest',-129071,N'crontest.dll',N'xonline.server.cron.test.dvt.CronAbortTest',N'',N'1900-01-01',N'1900-01-01',60,2147483647,300,N'',1,N'')";
            using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
            {
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                sqlClient.ExecuteNonQuery();
            }
        }

        [TestGroupTearDown]
        public void Shutdown() 
        {
            Global.RO.Info("Removing cron abort test job");
            string cmd = "DELETE FROM t_cron_jobs WHERE vc_name = 'CronAbortTest'";
            using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
            {
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                sqlClient.ExecuteNonQuery();
            }
        }

        private static void UpdateEnable(bool enable)
        {
            string cmd = string.Format("UPDATE t_cron_jobs SET b_enabled = {0} WHERE vc_name = 'CronAbortTest'", enable ? 1 : 0);
            using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
            {
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                sqlClient.ExecuteNonQuery();
            }
        }

        private static bool ValidateRunning()
        {
            string cmd = string.Format("SELECT vc_exec_frontdoor FROM t_cron_jobs WHERE vc_name = 'CronAbortTest'");
            using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
            {
                sqlClient.Command.CommandText = cmd;
                sqlClient.Command.CommandType = System.Data.CommandType.Text;
                using (SqlDataReader reader = sqlClient.Execute())
                {
                    if (reader.Read())
                    {
                        return !String.IsNullOrEmpty(reader.GetString(reader.GetOrdinal("vc_exec_frontdoor")));
                    }
                }
            }
            return false;
        }

        [TestCase, TestCasePriority(1)]
        public class P_Cron_Abort : TestBase
        {
            public P_Cron_Abort() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                Global.RO.Info("Waiting for job to start..");
                // Wait for job to be picked up (max 60 seconds)
                System.Threading.Thread.Sleep(61 * 1000);

                // If it is not running, fail
                if (!ValidateRunning())
                {
                    Global.RO.Error("Job is not running!");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                // Disable job
                Global.RO.Info("Update enable status..");
                UpdateEnable(false);

                // Wait for job to be picked up (max 30 seconds)
                Global.RO.Info("Waiting for job to see this and receive event..");
                System.Threading.Thread.Sleep(31 * 1000);

                // If it is still running, fail
                if (ValidateRunning())
                {
                    Global.RO.Error("Job is still running, it should have stopped!");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\provisioningtest\ProvisioningTest.cs ===
// 
// ProvisioningTest.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Online Service
// 

using System;
using System.Collections;
using System.Data;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.server.cron.plugins.provisioning;

//using XBOX.Online.Plugins;
//using XBOX.Online.Protocol.Cron;
//using XBOX.Utilities;



namespace xonline.server.cron.plugins.test
{

    public class PluginTests : TestSuite 
    {
        public override TestBaseGroupList GetTests()
        {
            TestBaseGroupList tbgl = new TestBaseGroupList();
            tbgl.Add( new ProvisioningJobNameTest() );
            tbgl.Add( new ProvisioningJobTest() );
            tbgl.Add( new ServiceJobNameTest() );
            
            return tbgl;
        }
    }


    //
    // NOTE: IN ORDER FOR ALL TESTS TO WORK:
    //       - CRON MUST BE RUNNING
    //       - EXECUTION INTERVAL MUST BE SET LONG ENOUGH FOR THE TEST TO FIND NEW TASKS BEFORE THEY're PROCESSED
    //

    //tests the string creation class
    //- check parameters
    //- confirm string is correct for each type
    // I know, for one line of real code this seems a bit much, but this function 
    // creates a string which is critical to the operation of this feature... 
    // plus, the string may change in the future... 
    [TestFixture]
    public class ProvisioningJobNameTest : TestNode
    {

        [Test]
        public void BadZeroEventParameter()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( 0, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero event value not caught." );
            }
        }

        [Test]
        public void BadMaxEventParameter()
        {
            Console.WriteLine( "BadMaxEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ( ProvisioningEvent.MaxEvent + 1 ), 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Max event value not caught." );
            }
        }

        [Test]
        public void BadZeroPUIDParameter()
        {
            Console.WriteLine( "Starting BadZeroPUIDParameter" );
            //can't be 0, 
            //type checking prevents negative PUID, so no worries about that case
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 0, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero PUID parameter not caught." );
            }

        }

        //per bug 19769 puids can lower than our puid range, but greater than 0
        [Test]
        public void BadMinPUIDParameter()
        {
            Console.WriteLine( "Starting BadMinPUIDParameter" );
            //can't be less than MinValue of PUID
            //type checking makes sure it's less than max PUID ... ;-)
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 0, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Undervalue PUID not caught." );
            }

        }

        [Test]
        public void BadSvcComponentParameter()
        {
            Console.WriteLine( "Starting BadSvcComponentParameter" );
            //string of length ???
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Short service component ID not caught." );
            }            
        }

        //Yeah, this is probably overkill, BUT, I'll be relying on the format of this
        // string to search for stuff, so it's pretty important this format doesn't change casually.
        [Test]
        public void ProvisioningEventIDStringMatch()
        {
            Console.WriteLine( "Starting ProvisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Provision + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Provision Event String did not match." );
            }
        }

        [Test]
        public void DeprovisioningEventIDStringMatch()
        {
            Console.WriteLine( "Starting DeprovisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Deprovision, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Deprovision + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Deprovision Event String did not match." );
            }
        }

        [Test]
        public void DisableServiceEventIDStringMatch()
        {
            Console.WriteLine( "Starting DisableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Disable, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Disable + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Disable Event String did not match." );
            }
        }

        [Test]
        public void EnableServiceEventIDStringMatch()
        {
            Console.WriteLine( "Starting EnableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Enable, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Enable + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Enable Event String did not match." );
            }
        }

    }



    [TestFixture]
    public class ServiceJobNameTest : TestNode
    {
        //tasks going to a service-specific plug-in
        //they get the same info as provisioning plus an "action ID" from NPDB

//        //what tests should I have here?
//        [Test]
//        public void BadActionParameter()
//        {
//            Console.WriteLine( "Starting BadActionParameter" );
//            // can't be negative
//            bool caughtException = false;
//            try
//            {
//                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
//                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
//            }
//            catch ( InvalidServiceTaskNameException )
//            {
//                caughtException = true;
//                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
//            }
//
//            if ( !caughtException )
//            {
//                throw new Exception( "Bad Action parameter not caught." );
//            }
//        }

        [Test]
        public void BadZeroEventParameter()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( 0, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad ZeroEvent parameter not caught." );
            }
        }

        [Test]
        public void BadMaxEventParameter()
        {
            Console.WriteLine( "Starting BadMaxEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ( ProvisioningEvent.MaxEvent + 1 ), 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad MaxEvent parameter not caught." );
            }
        }

        [Test]
        public void BadZeroPUIDParameter()
        {
            Console.WriteLine( "Starting BadZeroPUIDParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 0, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadZeroPUIDParameter not caught." );
            }
        }

        [Test]
        public void BadMinPUIDParameter()
        {
            Console.WriteLine( "Starting BadActionParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395903, "JCUCAAAAAAABAAEA", "Teams", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad Action parameter not caught." );
            }
        }

        [Test]
        public void BadSvcComponentParameter()
        {
            Console.WriteLine( "Starting BadSvcComponentParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "", "Teams", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadSvcComponentParameter not caught." );
            }
        }

        [Test]
        public void BadServiceParameter()
        {
            Console.WriteLine( "Starting BadServiceParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadServiceParameter not caught." );
            }
        }

        //this one reflects a real bug I found during testing!
        //t_cron_jobs.vc_name only allows 100 characters... 
        [Test]
        public void SvcTaskLengthMax()
        {

            Console.WriteLine( "Starting Long Name test..." );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "0123456789012345678901234567890123456789", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Long service task name not caught." );
            }

        } // max length


        //Positive Cases

        //Yeah, this is probably overkill, BUT, I'll be relying on the format of this
        // string to search for stuff, so it's pretty important this format doesn't change casually.
        [Test]
        public void SvcStringMatchProvisioning()
        {
            Console.WriteLine( "Starting ProvisioningEventIDStringMatch" );
                                                                        // ( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Provision + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";
                                    
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Provision Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchDeprovisioning()
        {
            Console.WriteLine( "Starting DeprovisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Deprovision + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Deprovision Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchDisable()
        {
            Console.WriteLine( "Starting DisableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Disable, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Disable + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Disable Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchEnable()
        {
            Console.WriteLine( "Starting EnableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Enable, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Enable + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Enable Event String did not match." );
            }
        }

    }



    //tests to make sure the provisioning job creates the correct jobs for other service-specific plugins
    // based on the event, and the data in the t_provisioning_event_action_mapping table  
    // checks will occur against both the job table 
    // and the audit table 
    // to make sure that the event both occurs and is audited... 
    [TestFixture]
    public class ProvisioningJobTest : TestNode
    {

        // sending valid cron jobs with parameters which are invalid for the provisioning plug-in
        // these test should *not* result in new tasks being added for that user
        // ... and yes, I was lazy and grouped them into 1 function.
        [Test]
        public void ParameterTesting()
        {

            Console.WriteLine( "Starting Provisioning Job Test Parameter Testing... " );

            // call cron with pseudo Provision call to confirm quality checking of parameters
            bool caughtException = false;

            ProvisioningJob pj = new ProvisioningJob();
            Hashtable args = new Hashtable();
            
            // no arguments
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }
            
            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing parameter - first test.");
            }
            else
            {
                Console.WriteLine("Zero Args InvalidProvisioningTaskException was caught.");
            }

            // one argument (of three required)
            caughtException = false;
            args.Add( ProvConst.EventID, ProvisioningEvent.Provision );
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }

            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - second test.");
            }
            else
            {
                Console.WriteLine("One Arg InvalidProvisioningTaskException was caught.");
            }

            //args.Remove( ProvConst.PUIDKey );
            // two arguments (of three required)
            caughtException = false;
            args.Add( ProvConst.PUIDKey, 123456 );
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }
            
            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - third test.");
            }
            else
            {
                Console.WriteLine("Two Args InvalidProvisioningTaskException was caught.");
            }


            //            // two arguments (of four required)
            //            caughtException = false;
            //            args.Add( ProvConst.lPUIDHigh, 123456 );
            //            try
            //            {
            //                //jobID, titleId, args 
            //                pj.Execute( 0, 0, ref args );
            //            }
            //            catch ( InvalidProvisioningTaskException )
            //            {
            //                caughtException = true;
            //            }
            //
            //            if ( !caughtException )
            //            {
            //                throw new Exception("Provision.Execute did not catch missing required parameter - third test.");
            //            }
            //            else
            //            {
            //                Console.WriteLine("Two Args InvalidProvisioningTaskException was caught.");
            //            }
            //
            //            // three arguments (of four required)
            //            caughtException = false;
            //            args.Add( ProvConst.lPUIDLow, 123456 );
            //            try
            //            {
            //                //jobID, titleId, args 
            //                pj.Execute( 0, 0, ref args );
            //            }
            //            catch ( InvalidProvisioningTaskException )
            //            {
            //                caughtException = true;
            //            }
            //
            //            if ( !caughtException )
            //            {
            //                throw new Exception("Provision.Execute did not catch missing required parameter - third test.");
            //            }
            //            else
            //            {
            //                Console.WriteLine("Three Args InvalidProvisioningTaskException was caught.");
            //            }


            // three arguments (of three required), but with the important one with a bad value... 
            caughtException = false;
            args.Add( ProvConst.bstrServiceComponentId, "ABCDEF1234FEDCBA" );
            args[ ProvConst.EventID ] = ProvisioningEvent.MaxEvent;

            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }

            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - fourth test.");
            }
            else
            {
                Console.WriteLine("Four Args, but one bad value --> InvalidProvisioningTaskException was caught.");
            }

            // switch the logic this time, since it should succeed... 

            // should be no exception here.. things will end if they do.  ;-)
            Console.WriteLine("Four Args, all good values.");
            args[ ProvConst.EventID ] = ProvisioningEvent.Provision;

            pj.Execute( 0, 0, ref args );
           
            //            // confirm that no new tasks are created
            //            FindJobsRequest findProvisionJob = new FindJobsRequest();
            //            findProvisionJob.search = ProvisioningUtil.CreateProvisioningJobName( ( ProvisioningEvent ) args[ ProvConst.EventID ], ( long ) args[ ProvConst.PUIDString ], ( string ) args[ ProvConst.bstrServiceComponentId ]);
            //            findProvisionJob.searchLen = ( uint ) findProvisionJob.search.Length;
            //            FindJobsResponse foundProvisionJobs = new FindJobsResponse();
            //            XRLObject2 foundpj = ( XRLObject2 ) foundProvisionJobs;
            //            
            //            XRLUtil.PostXrlRequest( XBOX.Utilities.XOService.Cron, findProvisionJob.GetXRL(), findProvisionJob, ref foundpj );
            //
            //            if ( ( ( FindJobsResponse ) foundpj ).jobCount == 0 )
            //            {
            //                throw new Exception("Provision.Execute did not create job.");
            //            }

        } // parametertest
        


        // Now that we know it will raise an exception for bad/missing parameters,
        // we confirm that it does the right thing when parameters are supplied... 

        // handling of the provision 
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void ProvisionServiceTasks()
        {
            Console.WriteLine( "\nStarting ProvisionServiceTasks...\n" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
//            args.Add( ProvConst.lPUIDHigh, "25332747" );  
//            args.Add( ProvConst.lPUIDLow, "90395914" );
            args.Add( ProvConst.bstrServiceComponentId, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Provision );
//            long PUID = (long) Int64Convert.FromIntPair( System.Convert.ToInt32( args[ ProvConst.lPUIDHigh ] ), System.Convert.ToInt32( args[ ProvConst.lPUIDLow ] ) );
//            args.Add( ProvConst.PUIDKey, PUID );
            args.Add( ProvConst.PUIDKey, 2533274790395914 );
            
            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args ) )
            {
                Console.WriteLine( "--> Provision tasks compared correctly." );
            }
            else
            {
                Console.WriteLine( "--> Provision Tasks DID NOT compare correctly." );
                throw new Exception( "Tasks DID NOT compare correctly." );
            }

        } // provision


        // handling deprovisioning requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void DisableServiceTasks()
        {
            Console.WriteLine( "\nStarting DisableServiceTasks...\n" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
//            args.Add( ProvConst.lPUIDHigh, "25332747" );  
//            args.Add( ProvConst.lPUIDLow, "90395914" );
            args.Add( ProvConst.bstrServiceComponentId, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Disable );
//            long PUID = (long) Int64Convert.FromIntPair( System.Convert.ToInt32( args[ ProvConst.lPUIDHigh ] ), System.Convert.ToInt32( args[ ProvConst.lPUIDLow ] ) );
            args.Add( ProvConst.PUIDKey, 2533274790395914 );

            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }


            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args ) )
            {
                Console.WriteLine( "--> Disable tasks compared correctly." );
            }
            else
            {
                Console.WriteLine( "--> Disable tasks DID NOT compare correctly." );
                throw new Exception( "Tasks DID NOT compare correctly." );
            }

        }


        // handling enableservice requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void EnableServiceTasks()
        {
            Console.WriteLine( "\nStarting EnableServiceTasks...\n" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
//            args.Add( ProvConst.lPUIDHigh, "25332747" );  
//            args.Add( ProvConst.lPUIDLow, "90395914" );
            args.Add( ProvConst.bstrServiceComponentId, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Enable );
//            long PUID = (long) Int64Convert.FromIntPair( System.Convert.ToInt32( args[ ProvConst.lPUIDHigh ] ), System.Convert.ToInt32( args[ ProvConst.lPUIDLow ] ) );
            args.Add( ProvConst.PUIDKey, 2533274790395914 );

            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //sort of pretending to be Cron, calling ProvisioningJob.Execute...
            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args ) )
            {
                Console.WriteLine( "--> Enable tasks compared correctly." );
            }
            else
            {
                Console.WriteLine( "--> Enable Tasks did compare correctly." );
                throw new Exception( "Enable Tasks DID NOT compare correctly." );
            }
        }
    

        // handling disableservice requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void DeprovisionServiceTasks()
        {
            Console.WriteLine( "\nStarting DeprovisionServiceTasks...\n" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();

            Hashtable args = new Hashtable();
            args.Add( ProvConst.bstrServiceComponentId, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Deprovision );
            //long PUID = (long) 108803319973238026;
            //Int64Convert.FromIntPair( System.Convert.ToInt32( args[ ProvConst.lPUIDHigh ] ), System.Convert.ToInt32( args[ ProvConst.lPUIDLow ] ) )
            args.Add( ProvConst.PUIDKey, 2533274790395914 );

            Console.WriteLine("  Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args ) )
            {
                Console.WriteLine( "--> Deprovision tasks compared correctly." );
            }
            else
            {
                Console.WriteLine( "--> DeprovisionTasks DID NOT compare correctly." );
                throw new Exception( "Deprovision Tasks DID NOT compare correctly." );
            }

        }


        public bool GetAndCompareActions( Hashtable args )
        {

            bool comparison = true;

            //find out what the correct tasks should be created
            DataSet actionDS = ProvisioningJob.GetActionsForEvent( ( ProvisioningEvent ) args[ ProvConst.EventID ] );

            //task: CHANGE this to use the *service* specific job name to search for the job,
            //      this of course means that we'll look for the jobs individually while looping through the dataset... 

            // confirm that the appropriate tasks actually were created
            // if the count is the same, and all rows in Jobs are also in the Dataset, then they're the same
            //task: figure out a way to standardize this so it isn't a booby trap for someone changing CreateServiceSpecificJobName
            FindJobsRequest findProvisionJob = new FindJobsRequest();
            findProvisionJob.search = ProvConst.ServiceJobPreface + " " + (int) args[ ProvConst.EventID ] + " " + ProvConst.PUIDKey + "=" + args[ ProvConst.PUIDKey ] + " " + ProvConst.bstrServiceComponentId + "=" + args[ ProvConst.bstrServiceComponentId ] + "%";

            //task: make this more elegant
            //I'm taking a shortcut here, since I know the format of the job name... 
            //ProvisioningUtil.CreateServiceSpecificJobName( evt, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            findProvisionJob.searchLen = ( uint ) findProvisionJob.search.Length;
            FindJobsResponse foundProvisionJobs = new FindJobsResponse();
            XRLObject2 foundpj = ( XRLObject2 ) foundProvisionJobs;
                        
            XRLUtil.PostXrlRequest( xonline.common.service.XOService.Cron, findProvisionJob.GetXRL(), findProvisionJob, ref foundpj );

            //            if ( ( ( FindJobsResponse ) foundpj ).jobCount == 0 )
            //            {
            //                throw new Exception("ProvisionServiceTasks did not create jobs for Provision.");
            //            }

            //print out the dataset 
            Console.WriteLine( "\nJob Intended for creation... " );
            DataPrint.TableToConsole( actionDS.Tables[ ProvisioningJob.ActionsTableName ] );

            Console.WriteLine( "\nLooking for jobs like: \n" + findProvisionJob.search );
            Console.WriteLine( "\nJobs Actually Created... " );
            foreach ( CronJobWire job in ( ( FindJobsResponse ) foundpj ).jobs )
            {
                Console.WriteLine( job.ToString() );
            }

            Console.WriteLine( "" );

            // count is the same
            if ( actionDS.Tables[ ProvisioningJob.ActionsTableName ].Rows.Count != ( ( FindJobsResponse ) foundpj ).jobCount )
            {
                throw new Exception("ProvisionServiceTasks: Job count didn't match between configured and scheduled jobs.");
            }

            Console.WriteLine( "\nComparing configured actions to scheduled Cron jobs... \n" );
            DataRow[] foundRows;
            RemoveJobRequest removeJobReq = new RemoveJobRequest();

            // nested loop to confirm that all jobs in the reference task list actually got created
            // loop through found jobs          
            foreach ( CronJobWire job in ( ( FindJobsResponse ) foundpj ).jobs )
            {

                Hashtable xmlParameters = PluginUtil.XmlToHashtable( job.argsXml );

                string filterExpr = "vc_name='" + job.name + "'";
                Console.WriteLine( "Searching for row matching job name = " + job.name );

                // Use the Select method to query dataset to find all matching jobs
                foundRows = actionDS.Tables[ ProvisioningJob.ActionsTableName ].Select( filterExpr );
                
                if ( foundRows.Length != 1 )
                {
                    Console.WriteLine( "-- No row matching the job was found!" );
                    //exception, something is wrong
                }
                else
                    //if ( foundRows.Length == 1 )
                {
                    Console.WriteLine( "++ Matching row and job!" );

                    //task: compare the other values of the job
                    if (  (string) foundRows[0][ "vc_assembly" ] != job.assembly )
                    {
                        //exception ??
                        comparison = false;
                    }
                    if ( (string) foundRows[0][ "vc_class" ] != job.className )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_title_id" ] != job.titleId )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_exec_interval_seconds" ] != job.intervalSecs )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_exec_count" ] != job.execCount )
                    {
                        //exception??
                        comparison = false;
                    }
                    
                    if ( (uint) foundRows[0][ "i_timeout_seconds" ] != job.timeoutSecs )
                    {
                        //exception??
                        comparison = false;
                    }
 
                    //        ti_action_id tinyint not null,

                } // task found

                // call Remove
                removeJobReq.jobId = job.jobId;
                removeJobReq.titleId = job.titleId;

                XRLUtil.PostXrlRequest( xonline.common.service.XOService.Cron, removeJobReq.GetXRL(), removeJobReq );

            } // for each job
        
            return comparison;

        } // getandcomparejobs

    } //fixture
    
    public class DataPrint
    {
        static DataPrint()
        {
        }

        public static void TableToConsole( DataTable dt )
        {
            foreach(DataColumn dc in dt.Columns)
                Console.Write( dc.ColumnName + " " );

            Console.WriteLine();

            foreach(DataRow dr in dt.Rows)
            {
                foreach(DataColumn dc in dt.Columns)
                {
                    Console.Write( dr[ dc ] + "  " );
                }
                Console.WriteLine();
            }

        } //ToConsole

    }//class

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\plugins\ProvisioningSampleTest\ProvisioningSampleTest.cs ===
// 
// ProvisioningTest.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Online Service
// 

using System;
using System.Collections;
using System.Data;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.cron.plugins;
using xonline.server.cron.plugins.cronlib;
using xonline.server.cron.plugins.provisioning;

namespace xonline.server.cron.plugins.test
{

    public class PluginTests : TestSuite 
    {
        public override TestBaseGroupList GetTests()
        {
            TestBaseGroupList tbgl = new TestBaseGroupList();
            tbgl.Add( new ProvisioningJobTest() );          
            return tbgl;
        }
    }


    //
    // NOTE: IN ORDER FOR TESTS TO WORK:
    //       - CRON MUST BE RUNNING
    //       - EXECUTION INTERVAL MUST BE SET LONG ENOUGH FOR THE TEST TO FIND NEW TASKS BEFORE THEY'RE PROCESSED
    //

    //tests the string creation class
    //- check parameters
    //- confirm string is correct for each type
    // I know, for one line of real code this seems a bit much, but this function 
    // creates a string which is critical to the operation of this feature... 
    // plus, the string may change in the future... 
    [TestFixture]
    public class ProvisioningJobNameTest : TestNode
    {

//        [Test]
//        public void BadNegEventParameter()
//        {
//            // can't be negative
//            bool caughtException = false;
//            try
//            {
//                string testString = ProvisioningUtil.CreateProvisioningJobName( -5, 2533274790395914, "JCUCAAAAAAABAAEA" );
//            }
//            catch ( InvalidProvisioningTaskNameException iptne )
//            {
//                caughtException = true;
//            }
//
//            if ( !caughtException )
//            {
//                throw new Exception( "Neg Event value not caught." );
//            }
//
//            // can't be 0 --> not a provisioning job, since they're all linked to users
//            // can't be outside PUID range... ???    2533274790395904
//
//        }

        [Test]
        public void BadZeroEventParameter()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( 0, 2533274790395914, "JCUCAAAAAAABAAEA" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero event value not caught." );
            }
        }

        [Test]
        public void BadMaxEventParameter()
        {
            Console.WriteLine( "BadMaxEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ( ProvisioningEvent.MaxEvent + 1 ), 2533274790395914, "JCUCAAAAAAABAAEA" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Max event value not caught." );
            }
        }

        [Test]
        public void BadZeroPUIDParameter()
        {
            Console.WriteLine( "Starting BadZeroPUIDParameter" );
            //can't be 0, 
            //type checking prevents negative PUID, so no worries about that case
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 0, "JCUCAAAAAAABAAEA" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero PUID parameter not caught." );
            }

        }

        [Test]
        public void BadMinPUIDParameter()
        {
            Console.WriteLine( "Starting BadMinPUIDParameter" );
            //can't be less than MinValue of PUID
            //type checking makes sure it's less than max PUID ... ;-)
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395903, "JCUCAAAAAAABAAEA" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Undervalue PUID not caught." );
            }

        }

        [Test]
        public void BadSvcComponentParameter()
        {
            Console.WriteLine( "Starting BadSvcComponentParameter" );
            //string of length ???
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUC" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Short service component ID not caught." );
            }            
        }

        //create the job string when 
        [Test]
        public void ProvisioningEventID()
        {
            Console.WriteLine( "Starting ProvisioningEventID" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUCAAAAAAABAAEA" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Provision + " PUID=2533274790395914 svcComponent=JCUCAAAAAAABAAEA";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Provision Event String did not match." );
            }
        }

        [Test]
        public void DeprovisioningEventID()
        {
            Console.WriteLine( "Starting DeprovisioningEventID" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Deprovision + " PUID=2533274790395914 svcComponent=JCUCAAAAAAABAAEA";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Deprovision Event String did not match." );
            }
        }

        [Test]
        public void DisableServiceEventID()
        {
            Console.WriteLine( "Starting DisableServiceEventID" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Disable, 2533274790395914, "JCUCAAAAAAABAAEA" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Disable + " PUID=2533274790395914 svcComponent=JCUCAAAAAAABAAEA";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Disable Event String did not match." );
            }
        }

        [Test]
        public void EnableServiceEventID()
        {
            Console.WriteLine( "Starting EnableServiceEventID" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Enable, 2533274790395914, "JCUCAAAAAAABAAEA" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Enable + " PUID=2533274790395914 svcComponent=JCUCAAAAAAABAAEA";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Enable Event String did not match." );
            }
        }

    }

    [TestFixture]
    public class ServiceJobNameTest : TestNode
    {
        //task: FILL IN TESTS HERE!!!

        //tasks going to a service-specific plug-in
        //they get the same info as provisioning plus an "action ID" from NPDB

        //what tests should I have here?
        [Test]
        public void SvcTaskParameters()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( 0, 2533274790395914, "JCUCAAAAAAABAAEA" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero event value not caught." );
            }
        }

    }

    //tests to make sure the provisioning job creates the correct jobs for other service-specific plugins
    // based on the event, and the data in the t_provisioning_event_action_mapping table  
    // checks will occur against both the job table 
    // and the audit table 
    // to make sure that the event both occurs and is audited... 
    [TestFixture]
    public class ProvisioningJobTest : TestNode
    {

        // sending valid cron jobs with parameters which are invalid for the provisioning plug-in
        // these test should *not* result in new tasks being added for that user
        // ... and yes, I was lazy and grouped them into 1 function.
        [Test]
        public void ParameterTesting()
        {

            Console.WriteLine( "Starting Provisioning Job Test Parameter Testing... " );

            // call cron with pseudo Provision call to confirm quality checking of parameters
            bool caughtException = false;

            ProvisioningJob pj = new ProvisioningJob();
            Hashtable args = new Hashtable();
            
            // no arguments
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }
            
            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing parameter - first test.");
            }
            else
            {
                Console.WriteLine("Zero Args InvalidProvisioningTaskException was caught.");
            }

            // one argument (of three required)
            caughtException = false;
            args.Add( ProvConst.EventID, ProvisioningEvent.Provision );
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }

            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - second test.");
            }
            else
            {
                Console.WriteLine("One Arg InvalidProvisioningTaskException was caught.");
            }

            // two arguments (of three required)
            caughtException = false;
            args.Add( ProvConst.PUIDKey, 123456 );
            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }

            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - third test.");
            }
            else
            {
                Console.WriteLine("Two Args InvalidProvisioningTaskException was caught.");
            }

            // three arguments (of three required), but with the important one with a bad value... 
            caughtException = false;
            args.Add( ProvConst.bstrServiceComponentId, "ABCDEF1234FEDCBA" );
            args[ ProvConst.EventID ] = ProvisioningEvent.MaxEvent;

            try
            {
                //jobID, titleId, args 
                pj.Execute( 0, 0, ref args );
            }
            catch ( InvalidProvisioningTaskException )
            {
                caughtException = true;
            }

            if ( !caughtException )
            {
                throw new Exception("Provision.Execute did not catch missing required parameter - fourth test.");
            }
            else
            {
                Console.WriteLine("Three Args, but one bad value --> InvalidProvisioningTaskException was caught.");
            }

            // switch the logic this time, since it should succeed... 

            // should be no exception here.. things will end if they do.  ;-)
            Console.WriteLine("Three Args, all good values.");
            args[ ProvConst.EventID ] = ProvisioningEvent.Provision;
            args.Remove( ProvConst.PUIDKey );
            pj.Execute( 0, 0, ref args );
           
//            // confirm that no new tasks are created
//            FindJobsRequest findProvisionJob = new FindJobsRequest();
//            findProvisionJob.search = ProvisioningUtil.CreateProvisioningJobName( ( ProvisioningEvent ) args[ ProvConst.EventID ], ( long ) args[ ProvConst.PUIDString ], ( string ) args[ ProvConst.bstrServiceComponentId ]);
//            findProvisionJob.searchLen = ( uint ) findProvisionJob.search.Length;
//            FindJobsResponse foundProvisionJobs = new FindJobsResponse();
//            XRLObject2 foundpj = ( XRLObject2 ) foundProvisionJobs;
//            
//            XRLUtil.PostXrlRequest( XBOX.Utilities.XOService.Cron, findProvisionJob.GetXRL(), findProvisionJob, ref foundpj );
//
//            if ( ( ( FindJobsResponse ) foundpj ).jobCount == 0 )
//            {
//                throw new Exception("Provision.Execute did not create job.");
//            }

        }
        
        // Now that we know it will raise an exception for bad/missing parameters,
        // we confirm that it does the right thing when parameters are supplied... 

        // handling of the provision 
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void ProvisionServiceTasks()
        {
            Console.WriteLine( "Starting ProvisionServiceTasks" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
            args.Add( ProvConst.PUIDKey, "2533274790395914" );
            args.Add( ProvConst.bstrServiceComponentId, "JCUCAAAAAAABAAEA" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Provision );
            
            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args, ProvisioningEvent.Provision ) )
            {
                Console.WriteLine( "--> Provision tasks compared correctly." );
            }
            else
            {
                throw new Exception( "Tasks DID NOT compare correctly." );
            }

        } // provision


        // handling deprovisioning requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void DisableServiceTasks()
        {
            Console.WriteLine( "Starting DisableServiceTasks" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
            args.Add( ProvConst.PUIDKey, "2533274790395914" );
            args.Add( ProvConst.bstrServiceComponentId, "JCUCAAAAAAABAAEA" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Disable );

            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }


            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args, ProvisioningEvent.Disable ) )
            {
                Console.WriteLine( "--> Disable tasks compared correctly." );
            }
            else
            {
                throw new Exception( "Tasks DID NOT compare correctly." );
            }

        }


        // handling enableservice requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void EnableServiceTasks()
        {
            Console.WriteLine( "Starting EnableServiceTasks" );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
            args.Add( ProvConst.PUIDKey, "2533274790395914" );
            args.Add( ProvConst.bstrServiceComponentId, "JCUCAAAAAAABAAEA" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Enable );

            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args, ProvisioningEvent.Enable ) )
            {
                Console.WriteLine( "--> Enable tasks compared correctly." );
            }
            else
            {
                throw new Exception( "Tasks DID NOT compare correctly." );
            }
        }
    

        // handling disableservice requests
        // confirm creation of appropriate tasks based on event_action table
        [Test]
        public void DeprovisionServiceTasks()
        {
            Console.WriteLine( "Starting DeprovisionServiceTasks..." );

            // Call Execute on Provision Job object
            ProvisioningJob pj = new ProvisioningJob();
            
            Hashtable args = new Hashtable();
            args.Add( ProvConst.PUIDKey, "2533274790395914" );
            args.Add( ProvConst.bstrServiceComponentId, "JCUCAAAAAAABAAEA" );
            args.Add( ProvConst.EventID, ProvisioningEvent.Deprovision );

            Console.WriteLine("    Args has " + args.Count + " items and they are: ");
            foreach (object o in args.Keys )
            {
                Console.WriteLine( "    Key " + o + "  Value: " + args[o] + "  " + args[o].GetType() );
            }

            //jobID shouldn't matter, since we don't use it in the provisioning plug-in
            pj.Execute( 0, 0, ref args );

            if ( GetAndCompareActions( args, ProvisioningEvent.Deprovision ) )
            {
                Console.WriteLine( "--> Deprovision tasks compared correctly." );
            }
            else
            {
                throw new Exception( "Tasks DID NOT compare correctly." );
            }

        }


        public bool GetAndCompareActions( Hashtable args, ProvisioningEvent evt )
        {

            bool comparison = true;

            //find out what the correct tasks should be created
            DataSet actionDS = ProvisioningJob.GetActionsForEvent( evt );

            //task: CHANGE this to use the *service* specific job name to search for the job,
            //      this of course means that we'll look for the jobs individually while looping through the dataset... 

            // confirm that the appropriate tasks actually were created
            // if the count is the same, and all rows in Jobs are in Dataset, then they're the same
            FindJobsRequest findProvisionJob = new FindJobsRequest();
            findProvisionJob.search = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUCAAAAAAABAAEA" );
            findProvisionJob.searchLen = ( uint ) findProvisionJob.search.Length;
            FindJobsResponse foundProvisionJobs = new FindJobsResponse();
            XRLObject2 foundpj = ( XRLObject2 ) foundProvisionJobs;
                        
            XRLUtil.PostXrlRequest( xonline.common.service.XOService.Cron, findProvisionJob.GetXRL(), findProvisionJob, ref foundpj );

            //            if ( ( ( FindJobsResponse ) foundpj ).jobCount == 0 )
            //            {
            //                throw new Exception("ProvisionServiceTasks did not create jobs for Provision.");
            //            }

            //print out the dataset 
            Console.WriteLine( "\nPrinting actions... " );
            DataPrint.TableToConsole( actionDS.Tables[ ProvisioningJob.ActionsTableName ] );

            Console.WriteLine( "\nPrinting jobs... " );
            foreach ( CronJobWire job in ( ( FindJobsResponse ) foundpj ).jobs )
            {
                Console.WriteLine( job.ToString() );
            }

            // count is the same
            if ( actionDS.Tables[ ProvisioningJob.ActionsTableName ].Rows.Count != ( ( FindJobsResponse ) foundpj ).jobCount )
            {
                throw new Exception("ProvisionServiceTasks: Job count didn't match between configured and scheduled jobs.");
            }

            Console.WriteLine( "Comparing configured actions to scheduled Cron jobs... " );
            DataRow[] foundRows;
            RemoveJobRequest removeJobReq = new RemoveJobRequest();

            // nested loop to confirm that all jobs in the reference task list actually got created
            // loop through found jobs          
            foreach ( CronJobWire job in ( ( FindJobsResponse ) foundpj ).jobs )
            {

                Hashtable xmlParameters = PluginUtil.XmlToHashtable( job.argsXml );                

                string filterExpr = "name='" + job.name + "'";
                Console.WriteLine( "Searching for row matching job name = " + job.name );

                // Use the Select method to query dataset to find all matching jobs
                foundRows = actionDS.Tables[ ProvisioningJob.ActionsTableName ].Select( filterExpr );
                
                if ( foundRows.Length != 1 )
                {
                    Console.WriteLine( "-- No row matching the job was found!" );
                    //exception, something is wrong
                }
                else
                    //if ( foundRows.Length == 1 )
                {
                    Console.WriteLine( "++ Matching row and job!" );

                    //task: compare the other values of the job
                    if (  (string) foundRows[0][ "vc_assembly" ] != job.assembly )
                    {
                        //exception ??
                        comparison = false;
                    }
                    if ( (string) foundRows[0][ "vc_class" ] != job.className )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_title_id" ] != job.titleId )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_exec_interval_seconds" ] != job.intervalSecs )
                    {
                        //exception??
                        comparison = false;
                    }

                    if ( (uint) foundRows[0][ "i_exec_count" ] != job.execCount )
                    {
                        //exception??
                        comparison = false;
                    }
                    
                    if ( (uint) foundRows[0][ "i_timeout_seconds" ] != job.timeoutSecs )
                    {
                        //exception??
                        comparison = false;
                    }
 
                    //        ti_action_id tinyint not null,

                } // task found

                // call Remove
                removeJobReq.jobId = job.jobId;
                removeJobReq.titleId = job.titleId;

                XRLUtil.PostXrlRequest( xonline.common.service.XOService.Cron, removeJobReq.GetXRL(), removeJobReq );

            } // for each job
        
            return comparison;

        } // getandcomparejobs

    } //fixture
    
    public class DataPrint
    {
        static DataPrint()
        {
        }

        public static void TableToConsole( DataTable dt )
        {
            foreach(DataRow dr in dt.Rows)
            {
                foreach(DataColumn dc in dt.Columns)
                {
                    Console.Write( dr[ dc ] + "  " );
                }
                Console.WriteLine();
            }

        } //ToConsole

    }//class

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt_plugin\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\TestWatcher\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\queryutil.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

using ServerTestFramework;
using stfls = ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;

using xonline.common.stfutil;
using xonline.common.diagnostics;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.server.comps.common;
using xonline.common.mgmt;


[assembly: XomAreaDefinition(XomAreaName.QueryTest)]


namespace xonline.server.query.test.dvt
{
    public class QueryUtil
    {
        public static uint OutputResults(QueryAttribute[] results, uint height, uint width)
        {
            uint        hr = HResult.S_OK;

            for (int i = 0; i < height; i++)
            {
                String output = "";
                
                for (int j = 0; j < width; j++)
                {
                    int index = i * (int)width + j;
                    
                    switch (results[index].Id & XOn.X_ATTRIBUTE_DATATYPE_MASK)
                    {
                    case XOn.X_ATTRIBUTE_DATATYPE_INTEGER: 
                        output += results[index].lValue + " | "; 
                        break;
                        
                    case XOn.X_ATTRIBUTE_DATATYPE_STRING: 
                        output += results[index].strValue + " | "; 
                        break;
                        
                    case XOn.X_ATTRIBUTE_DATATYPE_BLOB: 
                        output += ByteConvert.ToString(results[index].binValue) + " | "; 
                        break;
                    }                  
                }

                Console.WriteLine(output);
            }

            return hr;
        }

        
        public static uint AdvanceCompTime(uint titleId, uint datasetId, ulong compId, int seconds)
        {
            uint hr;
            
            Console.WriteLine("Adjusting time for comp id 0x" + compId.ToString("x") + " by " + seconds + " seconds.");
            
            QueryAttribute[] attribs = new QueryAttribute[1];
            attribs[0] = new QueryAttribute();
            attribs[0].Id = Comp.XONLINE_COMP_ATTR_DEBUG_ADVANCE_TIME;
            attribs[0].lValue = seconds;
            
            hr = SendSelectRequest(titleId, 0, 0, datasetId, compId, Comp.XONLINE_COMP_ACTION_DEBUG_ADVANCE_TIME, attribs, -1);
            return hr;
        }
        
        
        
        
        public static uint TimeWarpServices(uint seconds)
        {            
            uint             hr;
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            byte[]           respData;
           
            Console.WriteLine("Advancing time on query and cron services by " + seconds + " seconds.");


            // 
            // Query Service
            //
            xonline.common.protocol.QueryTimeWarpRequest  qTimeWarpReq = new xonline.common.protocol.QueryTimeWarpRequest ();
            
            qTimeWarpReq.offsetSeconds = seconds;    
            
            qTimeWarpReq.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            writer.Flush();
            

            hr = XRLUtil.PostXrlRequest(XOService.Query, qTimeWarpReq.GetXRL(), -1, GetSGInfoString(0, 0), stream.ToArray(), out respData);            
            if (HResult.Failed(hr))
            {
                goto error;
            }


            // 
            // Cron Service
            //
            xonline.common.protocol.CronTimeWarpRequest    cTimeWarpReq = new xonline.common.protocol.CronTimeWarpRequest();
            
            cTimeWarpReq.offsetSeconds = seconds;    
            
            cTimeWarpReq.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            writer.Flush();

            hr = XRLUtil.PostXrlRequest(XOService.Cron, cTimeWarpReq.GetXRL(), -1, GetSGInfoString(0, 0), stream.ToArray(), out respData);
            if (HResult.Failed(hr))
            {
                goto error;
            }
            
error:
            return hr;
        }

        
        public static uint SendAddRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, QueryAttribute[] attribs, out ulong entityId)
        {
            return SendAddRequest(titleId, userId, teamId, datasetId, attribs, null, null, out entityId);
        }

        public static uint SendAddRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, QueryAttribute[] attribs, WebHeaderCollection headers, out ulong entityId)
        {
            return SendAddRequest(titleId, userId, teamId, datasetId, attribs, headers, null, out entityId);
        }
        
        public static uint SendAddRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, QueryAttribute[] attribs, WebHeaderCollection headers, TeamTickets tickets, out ulong entityId)
        {
            AddRequest       request = new AddRequest();
            AddResponse      resp = new AddResponse();
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            BinaryReader     reader;
            byte[]           respBuf;

            entityId = 0;

            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;
            request.attribCount = (uint)attribs.Length;

            request.attribs = attribs;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }
            
            
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);


            if (HResult.Succeeded(hr))
            {
                reader = new BinaryReader(new MemoryStream(respBuf));
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);
                entityId = resp.entityId;
            }

            return hr;
        }                


        public static uint SendUpdateRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, QueryAttribute[] attribs)
        {
            return SendUpdateRequest(titleId, userId, teamId, datasetId, procIndex, attribs, null);
        }
        
        public static uint SendUpdateRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, QueryAttribute[] attribs, TeamTickets tickets)
        {
            UpdateRequest    request = new UpdateRequest();
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            String           url = String.Empty;
            byte[]           respBuf;

            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;            
            request.procIndex = procIndex;            
            request.attribCount = (uint)attribs.Length;
            request.attribs = attribs;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }
            
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);

            if (HResult.Failed(hr))
            {
                Console.WriteLine("RemoveId failed with hr = " + hr.ToString("x8"));
            }
            

            return hr;
        }                

        
        public static uint SendUpdateIdRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attribs)
        {
            return SendUpdateIdRequest(titleId, userId, teamId, datasetId, procIndex, entityId, attribs, null);
        }
        
        public static uint SendUpdateIdRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, ulong entityId, QueryAttribute[] attribs, TeamTickets tickets)
        {
            UpdateIdRequest  request = new UpdateIdRequest();
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            String           url = String.Empty;
            byte[]           respBuf;

            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;            
            request.procIndex = procIndex;            
            request.entityId = entityId;            
            request.attribCount = (uint)attribs.Length;
            request.attribs = attribs;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }
            
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);

            if (HResult.Failed(hr))
            {
                Console.WriteLine("RemoveId failed with hr = " + hr.ToString("x8"));
            }

            return hr;
        }                

        public static uint SendSelectRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId, uint actionId, QueryAttribute[] attribs, int port)
        {
            return SendSelectRequest(titleId, userId, teamId, datasetId, entityId, actionId, attribs, port, null, null);
        }    
        
        public static uint SendSelectRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId, uint actionId, QueryAttribute[] attribs, int port, WebHeaderCollection headers)
        {
            return SendSelectRequest(titleId, userId, teamId, datasetId, entityId, actionId, attribs, port, headers, null);
        }    
        
        public static uint SendSelectRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId, uint actionId, QueryAttribute[] attribs, int port, WebHeaderCollection headers, TeamTickets tickets)
        {
            SelectRequest   request = new SelectRequest();
            uint            hr;
            MemoryStream    stream = new MemoryStream();
            BinaryWriter    writer = new BinaryWriter(stream);
            byte[]          respBuf;            
            
            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;
            request.entityId = entityId;
            request.actionId = actionId;

            if (null == attribs)
            {
                request.attribCount = 0;
                request.attribs = null;
            }
            else
            {
                request.attribCount = (uint)attribs.Length;
                request.attribs = attribs;
            }
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);           

            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }
            
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);


            return hr;
        }                

        public static uint SendSearchRequest(uint titleId, uint datasetId, uint procIndex, uint page, uint resultsPerPage, QueryAttribute[] attribs, QueryAttributeSpec[] specs, out uint totalResults, out QueryAttribute[] results)
        {
            SearchRequest           request = new SearchRequest();
            SearchResponse          resp = new SearchResponse();
            uint                    hr;
            MemoryStream            stream = new MemoryStream();
            BinaryWriter            writer = new BinaryWriter(stream);
            BinaryReader            reader;
            byte[]                  respBuf;
            
            request.titleId = titleId;
            request.datasetId = datasetId;
            request.procIndex = procIndex;
            request.page = page;
            request.resultsPerPage = resultsPerPage;
            request.specCount = (uint)specs.Length;
            request.attribCount = (uint)attribs.Length;

            request.specs = specs;
            request.attribs = attribs;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);

            totalResults = 0;
            results = null;
            

            if (HResult.Succeeded(hr))
            {
                reader = new BinaryReader(new MemoryStream(respBuf));
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);

                totalResults = resp.totalResults;
                results = resp.attribs;
            }
            
            return hr;
        }                


        public static uint SendFindFromIdsRequest(uint titleId, uint datasetId, uint procIndex, QueryAttributeSpec[] specs, ulong[] entityIds, out uint totalResults, out QueryAttribute[] results)
        {
            FindFromIdsRequest      request = new FindFromIdsRequest();
            FindFromIdsResponse     resp = new FindFromIdsResponse();
            uint                    hr;
            MemoryStream            stream = new MemoryStream();
            BinaryWriter            writer = new BinaryWriter(stream);
            BinaryReader            reader;
            byte[]                  respBuf;
            
            request.titleId = titleId;
            request.datasetId = datasetId;
            request.procIndex = procIndex;
            request.specCount = (uint)specs.Length;
            request.idCount = (uint)entityIds.Length;

            request.specs = specs;
            request.entityIds = entityIds;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);

            totalResults = 0;
            results = null;
            
            if (HResult.Succeeded(hr))
            {
                reader = new BinaryReader(new MemoryStream(respBuf));
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);

                totalResults = resp.returnedResults;
                results = resp.attribs;
            }
            
            return hr;
        }                


        public static uint SendRemoveRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, QueryAttribute[] attribs)
        {
            return SendRemoveRequest(titleId, userId, teamId, datasetId, procIndex, attribs, null);
        }
        
        public static uint SendRemoveRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, uint procIndex, QueryAttribute[] attribs, TeamTickets tickets)
        {
            RemoveRequest           request = new RemoveRequest();
            uint                    hr;
            MemoryStream            stream = new MemoryStream();
            BinaryWriter            writer = new BinaryWriter(stream);
            byte[]                  respBuf;
            
            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;
            request.procIndex = procIndex;            
            request.attribs = attribs;
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            
            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }
            

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);
            if (HResult.Failed(hr))
            {
                Console.WriteLine("RemoveId failed with hr = " + hr.ToString("x8"));
            }

            
            return hr;
        }    

        
        public static uint SendRemoveIdRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId)
        {
            return SendRemoveIdRequest(titleId, userId, teamId, datasetId, entityId, null);
        }
        
        public static uint SendRemoveIdRequest(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId, TeamTickets tickets)
        {
            RemoveIdRequest         request = new RemoveIdRequest();
            uint                    hr;
            MemoryStream            stream = new MemoryStream();
            BinaryWriter            writer = new BinaryWriter(stream);
            byte[]                  respBuf;
            
            request.titleId = titleId;
            request.userId = userId;
            request.teamId = teamId;
            request.datasetId = datasetId;
            request.entityId = entityId;            
            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            
            if (tickets != null)
            {
                tickets.WriteStream(writer);
            }


            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = titleId;
            slot.userPuid0 = userId;
            
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Query, false, request.GetXRL(), stream.ToArray(), out respBuf);

            if (HResult.Failed(hr))
            {
                Console.WriteLine("RemoveId failed with hr = " + hr.ToString("x8"));
            }

            
            return hr;
        }         
        
        
        public static string GetSGInfoString(uint titleId, ulong userId)
        {
            HTTPAuthData authData = new HTTPAuthData(0, 0, 0, userId, titleId, 0, 0);
            return authData.ConstructBase64String();
        }    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt_plugin\crontest.cs ===
// 
// crontest.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Cron plugin test
// Xbox Online Service
// 
// Author: slamb
//

using System;
using System.Threading;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Text;

using ServerTestFramework;
using xonline.common.plugins;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.cron.plugins.cronlib;

[assembly: XomAreaDefinition(XomAreaName.crontest)]

namespace xonline.server.cron.test.dvt 
{
    public class CronTest : ICronJob
    {
        public void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            if (!args.Contains("c")) args["c"] = 0;
            args["c"] = (int)args["c"] + 1;
            
            Xom.Trace(XomAreaName.crontest, LogLevel.L_LOW, "Hello from CronTest!  jobId: " + jobId + "  titleId: " + titleId + " args[c]: " + (int)args["c"]);
            
        }
    }

    public class CronAbortTest : CronJobExtender
    {
        private bool _interrupted = false;

        public override void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            // Create interupt handler to listen for abort events
            InterruptHandler handler = delegate(object obj, InterruptEventArgs eventArgs)
            {
                _interrupted = eventArgs.Interrupted;
            };
            
            InterruptEvent += handler;
            while (!_interrupted)
            {
                Thread.Sleep(500);                
            }

            InterruptEvent -= handler;
        }        
    }
    
    public class CronTimingTest : ICronJob
    {
        
        public const uint PLUGINTEST_ATTR_NONCE                   = 0x00000001;
        public const uint PLUGINTEST_ATTR_START                   = 0x00000002;
        public const uint PLUGINTEST_ATTR_END                     = 0x00000003;
        
        public void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            
            uint hr;
            
            int seconds = (int)args["seconds"];
            int nonce = (int)args["nonce"];
            ulong entityId = 0;
            
            
            // initalize attributes w/ nonce and start time..
            //
            QueryAttribute[] attribs = new QueryAttribute[3];
            attribs[0] = new QueryAttribute();
            attribs[0].Id = PLUGINTEST_ATTR_NONCE;
            attribs[0].lValue = nonce;
            attribs[1] = new QueryAttribute();
            attribs[1].Id = PLUGINTEST_ATTR_START;
            attribs[1].lValue = DateTime.Now.ToFileTime();
            
            // pause for the specified time
            Thread.Sleep(seconds * 1000);
            
            // set end time
            //
            attribs[2] = new QueryAttribute();
            attribs[2].Id = PLUGINTEST_ATTR_END;
            attribs[2].lValue = DateTime.Now.ToFileTime();
            
            // and save
            // 
            
            AddRequest       request = new AddRequest();
            AddResponse      resp = new AddResponse();
            XRLObject2       xrlo = (XRLObject2)resp;

            entityId = 0;

            request.titleId = titleId;
            request.userId = 0;
            request.teamId = 0;
            request.datasetId = 2;
            request.attribCount = (uint)attribs.Length;
            request.attribs = attribs;
            


            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            BinaryReader     reader;
            byte[]           respBuf;

            
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);


            hr = XRLUtil.PostXrlRequest(XOService.Query, request.GetXRL(), -1, GetSGInfoString(titleId, 0), stream.ToArray(), null, out respBuf);


            if (HResult.Succeeded(hr))
            {
                reader = new BinaryReader(new MemoryStream(respBuf));
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);
                entityId = resp.entityId;
            }

                
            Xom.Trace(XomAreaName.crontest, LogLevel.L_LOW, "Added entity " + resp.entityId.ToString("x16") + " for timing test.");
        }
        
        public static string GetSGInfoString(uint titleId, ulong userId)
        {
            HTTPAuthData authData = new HTTPAuthData(0, 0, 0, userId, titleId, 0, 0);
            return authData.ConstructBase64String();
        }    
        
        
        
    }
    
    
    public class CronErrorTest : ICronJob
    {
        public void Execute(uint jobId, uint titleId, ref Hashtable args)
        {
            throw new Exception("Barf");
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\000004d2.cs ===
// Autogenerated from \src\xonline\main\private\ops\query\000004d2.xqs on 8/4/2004 1:38:58 PM// DO NOT MAKE CHANGES TO THIS FILE!  They will not be reflected the next time 
// this file is generated.

using System;
using xonline.common.protocol;
using xonline.server.query.test.dvt;
using xonline.common.service;
using xonline.common;

namespace xonline.server.query.plugins.Sample2
{
    public class AddSmokeTestDataset
    {
        public QueryAttribute[] Attribs;
        public AddSmokeTestDataset()
        {
            Attribs = new QueryAttribute[5];
            Attribs[0] = new QueryAttribute(0x00000001);    // some number
            Attribs[1] = new QueryAttribute(0x00000002);    // some other number
            Attribs[2] = new QueryAttribute(0x00100003);    // a short string
            Attribs[3] = new QueryAttribute(0x00100004);    // a long string
            Attribs[4] = new QueryAttribute(0x00200005);    // a blob
        }

        public long SomeNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public string AShortString
        {
            get { return (string)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public string ALongString
        {
            get { return (string)Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])Attribs[4].Value; }
            set { Attribs[4].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return Dataset.Add(source, titleId, userId, teamId, datasetId, Attribs, out entityId);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return QueryUtil.SendAddRequest(titleId, userId, teamId, datasetId, Attribs, null, out entityId);        
        }
#endif
    }

    public class FindIds
    {
        public static QueryAttributeSpec[] Specs;

        static FindIds()
        {

            Specs = new QueryAttributeSpec[6];
            Specs[0] = new QueryAttributeSpec(0x80000000);       // XONLINE_QUERY_ENTITY_ID
            Specs[1] = new QueryAttributeSpec(0x00000001, 30);    // some number
            Specs[2] = new QueryAttributeSpec(0x00000002, 30);    // some other number
            Specs[3] = new QueryAttributeSpec(0x00100003, 400);   // a short string
            Specs[4] = new QueryAttributeSpec(0x00100004, 400);   // a long string
            Specs[5] = new QueryAttributeSpec(0x00200005, 800);   // a blob
        }

#if XQRY
        public static uint Execute(Source source, uint titleId, uint datasetId, ulong[] entityIds, out FindIdsResults[] results)
        {
            results = null;
            QueryAttribute[,] attribResults;
            uint hr = Dataset.FindFromIds(source, titleId, datasetId, 0x1, entityIds, Specs, out attribResults);

            if (HResult.Succeeded(hr))
            {
                results = new FindIdsResults[attribResults.GetLength(0)];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new FindIdsResults(attribResults, i);
                }
            }

            return hr;    
        }
#else
        public static uint Execute(uint titleId, uint datasetId, ulong[] entityIds, out FindIdsResults[] results)
        {
            uint totalResults;
            results = null;
            QueryAttribute[] attribResults;
            uint hr = QueryUtil.SendFindFromIdsRequest(titleId, datasetId, 0x1, Specs, entityIds, out totalResults, out attribResults);
            if (HResult.Succeeded(hr))
            {
                results = new FindIdsResults[attribResults.Length / Specs.Length];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new FindIdsResults(attribResults, i * Specs.Length);
                }
            }
            
            return hr;    
        }
#endif
    }

    public class FindIdsResults
    {
        QueryAttribute[] _attribs;
        int _startIndex;
        
        public FindIdsResults(QueryAttribute[] attribResults, int startIndex)
        {
            _attribs = attribResults;
            _startIndex = startIndex;
        }
        public FindIdsResults(QueryAttribute[,] attribResults, int index)
        {
            _attribs = new QueryAttribute[attribResults.GetLength(1)];
            for (int i = 0; i < _attribs.Length; i++)
            {
                _attribs[i] = attribResults[index, i];
            }    
            _startIndex = 0;
        }
        public ulong EntityId
        {
            get { return (ulong)((long)_attribs[0 + _startIndex].Value); }
            set { _attribs[0 + _startIndex].Value = value; }
        }

        public long SomeNumber
        {
            get { return (long)_attribs[1 + _startIndex].Value; }
            set { _attribs[1 + _startIndex].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)_attribs[2 + _startIndex].Value; }
            set { _attribs[2 + _startIndex].Value = value; }
        }

        public string AShortString
        {
            get { return (string)_attribs[3 + _startIndex].Value; }
            set { _attribs[3 + _startIndex].Value = value; }
        }

        public string ALongString
        {
            get { return (string)_attribs[4 + _startIndex].Value; }
            set { _attribs[4 + _startIndex].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])_attribs[5 + _startIndex].Value; }
            set { _attribs[5 + _startIndex].Value = value; }
        }

    }

    public class Remove
    {
        public QueryAttribute[] Attribs;

         public Remove()
        {
            Attribs = new QueryAttribute[4];
            Attribs[0] = new QueryAttribute(0x02000002);          // some other number
            Attribs[1] = new QueryAttribute(0x02100003);          // a short string
            Attribs[2] = new QueryAttribute(0x02100004);          // a long string
            Attribs[3] = new QueryAttribute(0x02200005);          // a blob
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public string AShortString
        {
            get { return (string)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public string ALongString
        {
            get { return (string)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Remove(source, titleId, userId, teamId, datasetId, 0x1, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendRemoveRequest(titleId, userId, teamId, datasetId, 0x1, Attribs);        
        }
#endif
    }

    public class RemoveForUser
    {
        public QueryAttribute[] Attribs;

         public RemoveForUser()
        {
            Attribs = new QueryAttribute[0];
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Remove(source, titleId, userId, teamId, datasetId, 0x2, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendRemoveRequest(titleId, userId, teamId, datasetId, 0x2, Attribs);        
        }
#endif
    }

    public class Search
    {
        public QueryAttribute[] Attribs;
        public QueryAttributeSpec[] Specs;

         public Search()
        {
            Attribs = new QueryAttribute[4];
            Attribs[0] = new QueryAttribute(0x02000002);          // some other number
            Attribs[1] = new QueryAttribute(0x02100003);          // a short string
            Attribs[2] = new QueryAttribute(0x02100004);          // a long string
            Attribs[3] = new QueryAttribute(0x02200005);          // a blob

            Specs = new QueryAttributeSpec[6];
            Specs[0] = new QueryAttributeSpec(0x80000000);       // XONLINE_QUERY_ENTITY_ID
            Specs[1] = new QueryAttributeSpec(0x00000001, 30);    // some number
            Specs[2] = new QueryAttributeSpec(0x00000002, 30);    // some other number
            Specs[3] = new QueryAttributeSpec(0x00100003, 400);   // a short string
            Specs[4] = new QueryAttributeSpec(0x00100004, 400);   // a long string
            Specs[5] = new QueryAttributeSpec(0x00200005, 800);   // a blob
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public string AShortString
        {
            get { return (string)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public string ALongString
        {
            get { return (string)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, uint datasetId, out SearchResults[] results)
        {
            uint totalResults;
            return Execute(source, titleId, datasetId, 0, (uint)Int32.MaxValue, out totalResults, out results);
        }

        public uint Execute(Source source, uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out SearchResults[] results)
        {
            results = null;
            QueryAttribute[,] attribResults;
            uint hr = Dataset.Search(source, titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);

            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new SearchResults[attribResults.GetLength(0)];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new SearchResults(attribResults, i);
                }
            }

            return hr;    
        }
#else
        public uint Execute(uint titleId, uint datasetId, out SearchResults[] results)
        {
            uint totalResults;
            return Execute(titleId, datasetId, 0, XOn.XONLINE_QUERY_MAX_PAGE_SIZE, out totalResults, out results);
        }

        public uint Execute(uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out SearchResults[] results)
        {
            results = null;
            QueryAttribute[] attribResults;
            uint hr = QueryUtil.SendSearchRequest(titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);
            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new SearchResults[attribResults.Length / Specs.Length];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new SearchResults(attribResults, i * Specs.Length);
                }
            }
            
            return hr;    
        }
#endif
    }

    public class SearchResults
    {
        QueryAttribute[] _attribs;
        int _startIndex;
        
        public SearchResults(QueryAttribute[] attribResults, int startIndex)
        {
            _attribs = attribResults;
            _startIndex = startIndex;
        }
        public SearchResults(QueryAttribute[,] attribResults, int index)
        {
            _attribs = new QueryAttribute[attribResults.GetLength(1)];
            for (int i = 0; i < _attribs.Length; i++)
            {
                _attribs[i] = attribResults[index, i];
            }    
            _startIndex = 0;
        }
        public ulong EntityId
        {
            get { return (ulong)((long)_attribs[0 + _startIndex].Value); }
            set { _attribs[0 + _startIndex].Value = value; }
        }

        public long SomeNumber
        {
            get { return (long)_attribs[1 + _startIndex].Value; }
            set { _attribs[1 + _startIndex].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)_attribs[2 + _startIndex].Value; }
            set { _attribs[2 + _startIndex].Value = value; }
        }

        public string AShortString
        {
            get { return (string)_attribs[3 + _startIndex].Value; }
            set { _attribs[3 + _startIndex].Value = value; }
        }

        public string ALongString
        {
            get { return (string)_attribs[4 + _startIndex].Value; }
            set { _attribs[4 + _startIndex].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])_attribs[5 + _startIndex].Value; }
            set { _attribs[5 + _startIndex].Value = value; }
        }

    }

    public class UpdateId
    {
        public QueryAttribute[] Attribs;

         public UpdateId()
        {
            Attribs = new QueryAttribute[5];
            Attribs[0] = new QueryAttribute(0x02000001);          // some number
            Attribs[1] = new QueryAttribute(0x02000002);          // some other number
            Attribs[2] = new QueryAttribute(0x02100003);          // a short string
            Attribs[3] = new QueryAttribute(0x02100004);          // a long string
            Attribs[4] = new QueryAttribute(0x02200005);          // a blob
        }

        public long SomeNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public string AShortString
        {
            get { return (string)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public string ALongString
        {
            get { return (string)Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])Attribs[4].Value; }
            set { Attribs[4].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId)
        {
            return Dataset.UpdateId(source, titleId, userId, teamId, datasetId, 0x1, entityId, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId, ulong entityId)
        {
            return QueryUtil.SendUpdateIdRequest(titleId, userId, teamId, datasetId, 0x1, entityId, Attribs);
        }
#endif
    }

    public class UpdateBluk
    {
        public QueryAttribute[] Attribs;

         public UpdateBluk()
        {
            Attribs = new QueryAttribute[5];
            Attribs[0] = new QueryAttribute(0x02000001);          // some number
            Attribs[1] = new QueryAttribute(0x02000002);          // some other number
            Attribs[2] = new QueryAttribute(0x02100003);          // a short string
            Attribs[3] = new QueryAttribute(0x02100004);          // a long string
            Attribs[4] = new QueryAttribute(0x02200005);          // a blob
        }

        public long SomeNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public string AShortString
        {
            get { return (string)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public string ALongString
        {
            get { return (string)Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

        public byte[] ABlob
        {
            get { return (byte[])Attribs[4].Value; }
            set { Attribs[4].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Update(source, titleId, userId, teamId, datasetId, 0x1, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendUpdateRequest(titleId, userId, teamId, datasetId, 0x1, Attribs);
        }
#endif
    }

    public class AddTimingTestDataset
    {
        public QueryAttribute[] Attribs;
        public AddTimingTestDataset()
        {
            Attribs = new QueryAttribute[3];
            Attribs[0] = new QueryAttribute(0x00000001);    // nonce
            Attribs[1] = new QueryAttribute(0x00000002);    // start time
            Attribs[2] = new QueryAttribute(0x00000003);    // end time
        }

        public long Nonce
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public long StartTime
        {
            get { return (long)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public long EndTime
        {
            get { return (long)Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return Dataset.Add(source, titleId, userId, teamId, datasetId, Attribs, out entityId);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return QueryUtil.SendAddRequest(titleId, userId, teamId, datasetId, Attribs, null, out entityId);        
        }
#endif
    }

    public class SearchForTestResults
    {
        public QueryAttribute[] Attribs;
        public QueryAttributeSpec[] Specs;

         public SearchForTestResults()
        {
            Attribs = new QueryAttribute[1];
            Attribs[0] = new QueryAttribute(0x02000001);          // nonce

            Specs = new QueryAttributeSpec[3];
            Specs[0] = new QueryAttributeSpec(0x80000000);       // XONLINE_QUERY_ENTITY_ID
            Specs[1] = new QueryAttributeSpec(0x00000002, 30);    // start time
            Specs[2] = new QueryAttributeSpec(0x00000003, 30);    // end time
        }

        public long Nonce
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, uint datasetId, out SearchForTestResultsResults[] results)
        {
            uint totalResults;
            return Execute(source, titleId, datasetId, 0, (uint)Int32.MaxValue, out totalResults, out results);
        }

        public uint Execute(Source source, uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out SearchForTestResultsResults[] results)
        {
            results = null;
            QueryAttribute[,] attribResults;
            uint hr = Dataset.Search(source, titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);

            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new SearchForTestResultsResults[attribResults.GetLength(0)];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new SearchForTestResultsResults(attribResults, i);
                }
            }

            return hr;    
        }
#else
        public uint Execute(uint titleId, uint datasetId, out SearchForTestResultsResults[] results)
        {
            uint totalResults;
            return Execute(titleId, datasetId, 0, XOn.XONLINE_QUERY_MAX_PAGE_SIZE, out totalResults, out results);
        }

        public uint Execute(uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out SearchForTestResultsResults[] results)
        {
            results = null;
            QueryAttribute[] attribResults;
            uint hr = QueryUtil.SendSearchRequest(titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);
            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new SearchForTestResultsResults[attribResults.Length / Specs.Length];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new SearchForTestResultsResults(attribResults, i * Specs.Length);
                }
            }
            
            return hr;    
        }
#endif
    }

    public class SearchForTestResultsResults
    {
        QueryAttribute[] _attribs;
        int _startIndex;
        
        public SearchForTestResultsResults(QueryAttribute[] attribResults, int startIndex)
        {
            _attribs = attribResults;
            _startIndex = startIndex;
        }
        public SearchForTestResultsResults(QueryAttribute[,] attribResults, int index)
        {
            _attribs = new QueryAttribute[attribResults.GetLength(1)];
            for (int i = 0; i < _attribs.Length; i++)
            {
                _attribs[i] = attribResults[index, i];
            }    
            _startIndex = 0;
        }
        public ulong EntityId
        {
            get { return (ulong)((long)_attribs[0 + _startIndex].Value); }
            set { _attribs[0 + _startIndex].Value = value; }
        }

        public long StartTime
        {
            get { return (long)_attribs[1 + _startIndex].Value; }
            set { _attribs[1 + _startIndex].Value = value; }
        }

        public long EndTime
        {
            get { return (long)_attribs[2 + _startIndex].Value; }
            set { _attribs[2 + _startIndex].Value = value; }
        }

    }

    public class RemoveTimingEntries
    {
        public QueryAttribute[] Attribs;

         public RemoveTimingEntries()
        {
            Attribs = new QueryAttribute[1];
            Attribs[0] = new QueryAttribute(0x02000001);          // nonce
        }

        public long Nonce
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Remove(source, titleId, userId, teamId, datasetId, 0x1, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendRemoveRequest(titleId, userId, teamId, datasetId, 0x1, Attribs);        
        }
#endif
    }

    public class AddUniqueIndexDataset
    {
        public QueryAttribute[] Attribs;
        public AddUniqueIndexDataset()
        {
            Attribs = new QueryAttribute[2];
            Attribs[0] = new QueryAttribute(0x00000001);    // some number
            Attribs[1] = new QueryAttribute(0x00000002);    // some other number
        }

        public long SomeNumber
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public long SomeOtherNumber
        {
            get { return (long)Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return Dataset.Add(source, titleId, userId, teamId, datasetId, Attribs, out entityId);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return QueryUtil.SendAddRequest(titleId, userId, teamId, datasetId, Attribs, null, out entityId);        
        }
#endif
    }

    public class AddTitleServerAddresses
    {
        public QueryAttribute[] Attribs;
        public AddTitleServerAddresses()
        {
            Attribs = new QueryAttribute[5];
            Attribs[0] = new QueryAttribute(0x80200001);    // XONLINE_LSP_ATTR_TSADDR
            Attribs[1] = new QueryAttribute(0x80200002);    // XONLINE_LSP_ATTR_XNKID
            Attribs[2] = new QueryAttribute(0x80200003);    // XONLINE_LSP_ATTR_KEK
            Attribs[3] = new QueryAttribute(0x80100004);    // XONLINE_LSP_ATTR_USER
            Attribs[4] = new QueryAttribute(0x80000005);    // XONLINE_LSP_ATTR_EXTIME
        }

        public byte[] XonlineLspAttrTsaddr
        {
            get { return (byte[])Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

        public byte[] XonlineLspAttrXnkid
        {
            get { return (byte[])Attribs[1].Value; }
            set { Attribs[1].Value = value; }
        }

        public byte[] XonlineLspAttrKek
        {
            get { return (byte[])Attribs[2].Value; }
            set { Attribs[2].Value = value; }
        }

        public string XonlineLspAttrUser
        {
            get { return (string)Attribs[3].Value; }
            set { Attribs[3].Value = value; }
        }

        public long XonlineLspAttrExtime
        {
            get { return (long)Attribs[4].Value; }
            set { Attribs[4].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return Dataset.Add(source, titleId, userId, teamId, datasetId, Attribs, out entityId);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId, out ulong entityId)
        {
            return QueryUtil.SendAddRequest(titleId, userId, teamId, datasetId, Attribs, null, out entityId);        
        }
#endif
    }

    public class AvailableTitleServers
    {
        public QueryAttribute[] Attribs;
        public QueryAttributeSpec[] Specs;

         public AvailableTitleServers()
        {
            Attribs = new QueryAttribute[0];

            Specs = new QueryAttributeSpec[4];
            Specs[0] = new QueryAttributeSpec(0x80000000);       // XONLINE_QUERY_ENTITY_ID
            Specs[1] = new QueryAttributeSpec(0x80200001, 36);    // XONLINE_LSP_ATTR_TSADDR
            Specs[2] = new QueryAttributeSpec(0x80200002, 8);     // XONLINE_LSP_ATTR_XNKID
            Specs[3] = new QueryAttributeSpec(0x80200003, 16);    // XONLINE_LSP_ATTR_KEK
        }

#if XQRY
        public uint Execute(Source source, uint titleId, uint datasetId, out AvailableTitleServersResults[] results)
        {
            uint totalResults;
            return Execute(source, titleId, datasetId, 0, (uint)Int32.MaxValue, out totalResults, out results);
        }

        public uint Execute(Source source, uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out AvailableTitleServersResults[] results)
        {
            results = null;
            QueryAttribute[,] attribResults;
            uint hr = Dataset.Search(source, titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);

            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new AvailableTitleServersResults[attribResults.GetLength(0)];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new AvailableTitleServersResults(attribResults, i);
                }
            }

            return hr;    
        }
#else
        public uint Execute(uint titleId, uint datasetId, out AvailableTitleServersResults[] results)
        {
            uint totalResults;
            return Execute(titleId, datasetId, 0, XOn.XONLINE_QUERY_MAX_PAGE_SIZE, out totalResults, out results);
        }

        public uint Execute(uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out AvailableTitleServersResults[] results)
        {
            results = null;
            QueryAttribute[] attribResults;
            uint hr = QueryUtil.SendSearchRequest(titleId, datasetId, 0x1, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);
            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new AvailableTitleServersResults[attribResults.Length / Specs.Length];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new AvailableTitleServersResults(attribResults, i * Specs.Length);
                }
            }
            
            return hr;    
        }
#endif
    }

    public class AvailableTitleServersResults
    {
        QueryAttribute[] _attribs;
        int _startIndex;
        
        public AvailableTitleServersResults(QueryAttribute[] attribResults, int startIndex)
        {
            _attribs = attribResults;
            _startIndex = startIndex;
        }
        public AvailableTitleServersResults(QueryAttribute[,] attribResults, int index)
        {
            _attribs = new QueryAttribute[attribResults.GetLength(1)];
            for (int i = 0; i < _attribs.Length; i++)
            {
                _attribs[i] = attribResults[index, i];
            }    
            _startIndex = 0;
        }
        public ulong EntityId
        {
            get { return (ulong)((long)_attribs[0 + _startIndex].Value); }
            set { _attribs[0 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrTsaddr
        {
            get { return (byte[])_attribs[1 + _startIndex].Value; }
            set { _attribs[1 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrXnkid
        {
            get { return (byte[])_attribs[2 + _startIndex].Value; }
            set { _attribs[2 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrKek
        {
            get { return (byte[])_attribs[3 + _startIndex].Value; }
            set { _attribs[3 + _startIndex].Value = value; }
        }

    }

    public class AvailableTitleServersFiltered
    {
        public QueryAttribute[] Attribs;
        public QueryAttributeSpec[] Specs;

         public AvailableTitleServersFiltered()
        {
            Attribs = new QueryAttribute[1];
            Attribs[0] = new QueryAttribute(0x02000001);          // currenttime

            Specs = new QueryAttributeSpec[5];
            Specs[0] = new QueryAttributeSpec(0x80000000);       // XONLINE_QUERY_ENTITY_ID
            Specs[1] = new QueryAttributeSpec(0x80200001, 36);    // XONLINE_LSP_ATTR_TSADDR
            Specs[2] = new QueryAttributeSpec(0x80200002, 8);     // XONLINE_LSP_ATTR_XNKID
            Specs[3] = new QueryAttributeSpec(0x80200003, 16);    // XONLINE_LSP_ATTR_KEK
            Specs[4] = new QueryAttributeSpec(0x80100004, 200);   // XONLINE_LSP_ATTR_USER
        }

        public long Currenttime
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, uint datasetId, out AvailableTitleServersFilteredResults[] results)
        {
            uint totalResults;
            return Execute(source, titleId, datasetId, 0, (uint)Int32.MaxValue, out totalResults, out results);
        }

        public uint Execute(Source source, uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out AvailableTitleServersFilteredResults[] results)
        {
            results = null;
            QueryAttribute[,] attribResults;
            uint hr = Dataset.Search(source, titleId, datasetId, 0x2, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);

            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new AvailableTitleServersFilteredResults[attribResults.GetLength(0)];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new AvailableTitleServersFilteredResults(attribResults, i);
                }
            }

            return hr;    
        }
#else
        public uint Execute(uint titleId, uint datasetId, out AvailableTitleServersFilteredResults[] results)
        {
            uint totalResults;
            return Execute(titleId, datasetId, 0, XOn.XONLINE_QUERY_MAX_PAGE_SIZE, out totalResults, out results);
        }

        public uint Execute(uint titleId, uint datasetId, uint page, uint resultsPerPage, out uint totalResults, out AvailableTitleServersFilteredResults[] results)
        {
            results = null;
            QueryAttribute[] attribResults;
            uint hr = QueryUtil.SendSearchRequest(titleId, datasetId, 0x2, page, resultsPerPage, Attribs, Specs, out totalResults, out attribResults);
            if (HResult.Succeeded(hr) && attribResults != null)
            {
                results = new AvailableTitleServersFilteredResults[attribResults.Length / Specs.Length];
                for (int i = 0; i < results.Length; i++)
                {
                    results[i] = new AvailableTitleServersFilteredResults(attribResults, i * Specs.Length);
                }
            }
            
            return hr;    
        }
#endif
    }

    public class AvailableTitleServersFilteredResults
    {
        QueryAttribute[] _attribs;
        int _startIndex;
        
        public AvailableTitleServersFilteredResults(QueryAttribute[] attribResults, int startIndex)
        {
            _attribs = attribResults;
            _startIndex = startIndex;
        }
        public AvailableTitleServersFilteredResults(QueryAttribute[,] attribResults, int index)
        {
            _attribs = new QueryAttribute[attribResults.GetLength(1)];
            for (int i = 0; i < _attribs.Length; i++)
            {
                _attribs[i] = attribResults[index, i];
            }    
            _startIndex = 0;
        }
        public ulong EntityId
        {
            get { return (ulong)((long)_attribs[0 + _startIndex].Value); }
            set { _attribs[0 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrTsaddr
        {
            get { return (byte[])_attribs[1 + _startIndex].Value; }
            set { _attribs[1 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrXnkid
        {
            get { return (byte[])_attribs[2 + _startIndex].Value; }
            set { _attribs[2 + _startIndex].Value = value; }
        }

        public byte[] XonlineLspAttrKek
        {
            get { return (byte[])_attribs[3 + _startIndex].Value; }
            set { _attribs[3 + _startIndex].Value = value; }
        }

        public string XonlineLspAttrUser
        {
            get { return (string)_attribs[4 + _startIndex].Value; }
            set { _attribs[4 + _startIndex].Value = value; }
        }

    }

    public class RemovePreviousServer
    {
        public QueryAttribute[] Attribs;

         public RemovePreviousServer()
        {
            Attribs = new QueryAttribute[1];
            Attribs[0] = new QueryAttribute(0x82200001);          // XONLINE_LSP_ATTR_TSADDR
        }

        public byte[] XonlineLspAttrTsaddr
        {
            get { return (byte[])Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Remove(source, titleId, userId, teamId, datasetId, 0x1, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendRemoveRequest(titleId, userId, teamId, datasetId, 0x1, Attribs);        
        }
#endif
    }

    public class RemoveAllDeadServers
    {
        public QueryAttribute[] Attribs;

         public RemoveAllDeadServers()
        {
            Attribs = new QueryAttribute[1];
            Attribs[0] = new QueryAttribute(0x82000005);          // XONLINE_LSP_ATTR_EXTIME
        }

        public long XonlineLspAttrExtime
        {
            get { return (long)Attribs[0].Value; }
            set { Attribs[0].Value = value; }
        }

#if XQRY
        public uint Execute(Source source, uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return Dataset.Remove(source, titleId, userId, teamId, datasetId, 0x2, Attribs);
        }
#else
        public uint Execute(uint titleId, ulong userId, ulong teamId, uint datasetId)
        {
            return QueryUtil.SendRemoveRequest(titleId, userId, teamId, datasetId, 0x2, Attribs);        
        }
#endif
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\cron\test\dvt\HealthCheck.cs ===
using System;
using System.Xml;
using ServerTestFramework;
using xonline.common.config;
using xonline.common.sql.sqlclient;

namespace xonline.server.comps.test.dvt 
{
    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("Cron")]
    public class CronHealthCheck
    {
        private static string cronHealthUrl = string.Empty;

        [TestGroupSetup]
        public void Setup() 
        { 
            cronHealthUrl = String.Format("http://{0}/cron/health.ashx?op=Status&stylesheet=no",
                Global.XEnv.GetVirtualInterface(VirtualInterface.cron_int)); 
        }

        [TestGroupTearDown]
        public void Shutdown() { }

        private static string ValidateHealthCheck(string status)
        {
            XmlTextReader reader = new XmlTextReader(cronHealthUrl);

            reader.ReadToDescendant("Reports");
            reader.ReadToDescendant("HealthReport");
            do
            {
                reader.MoveToAttribute("Name");
                if (reader.Value.ToLower() == "cronjobinfo")
                {
                    reader.MoveToAttribute("HealthStatus");
                    if (reader.Value.ToLower() == status)
                    {
                        return string.Empty;
                    }
                    else
                    {
                        while(reader.Name.ToLower() != "errordetails")
                        {
                            reader.Read();
                        }

                        reader.Read();
                        return reader.Value;
                    }
                }                
            }
            while (reader.ReadToNextSibling("HealthReport"));
            
            return "Could not find cronjobinfo";
        }

        [TestCase, TestCasePriority(1)]
        public class P_Health_Check_Green : TestBase
        {
            public P_Health_Check_Green() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                string returnResult = ValidateHealthCheck("green");

                if (returnResult != string.Empty)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("Expected green, received these errors instead: " + returnResult);
                }                
            }
        }

        [TestCase, TestCasePriority(1)]
        public class P_Health_Check_Yellow : TestBase
        {
            public P_Health_Check_Yellow() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                // Disable the jobs and validate that health check is yellow
                string cmd = "update t_cron_jobs set b_enabled = 0";
                using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
                {
                    sqlClient.Command.CommandText = cmd;
                    sqlClient.Command.CommandType = System.Data.CommandType.Text;
                    sqlClient.ExecuteNonQuery();
                }

                string returnResult = ValidateHealthCheck("yellow");

                if (returnResult != string.Empty)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("Expected yellow, received these errors instead: " + returnResult);
                }   

                // Re-enable
                cmd = "update t_cron_jobs set b_enabled = 1";
                using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
                {
                    sqlClient.Command.CommandText = cmd;
                    sqlClient.Command.CommandType = System.Data.CommandType.Text;
                    sqlClient.ExecuteNonQuery();
                }
            }
        }

        [TestCase, TestCasePriority(1)]
        public class P_Health_Check_Red : TestBase
        {
            public P_Health_Check_Red() { }

            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                // Insert error text into the error field, validate it is showing as red
                string cmd = "update t_cron_jobs set vc_error_text = 'simulated error'";
                using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
                {
                    sqlClient.Command.CommandText = cmd;
                    sqlClient.Command.CommandType = System.Data.CommandType.Text;
                    sqlClient.ExecuteNonQuery();
                }

                string returnResult = ValidateHealthCheck("red");

                if (returnResult != string.Empty)
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("Expected red, received these errors instead: " + returnResult);
                }   

                // Clear the error text
                cmd = "update t_cron_jobs set vc_error_text = ''";
                using (SqlClient sqlClient = new SqlClient(Interface.npdb, false))
                {
                    sqlClient.Command.CommandText = cmd;
                    sqlClient.Command.CommandType = System.Data.CommandType.Text;
                    sqlClient.ExecuteNonQuery();
                }

            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\abchServerStub.cs ===
using System;
using Microsoft.XBox.Live.Server.Emulators.Framework;

namespace Microsoft.XBox.Live.Server.Emulators.ABCH {
    [Emulate]
    public class abchServerStub : ContextBoundObject, IABCHSoap
    {
        public System.Guid ABAdd(ABInfo abInfo) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        
        public void ABDelete(System.Guid abId)
         {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
       
        
        public void ABUpdate(AB ab) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public AB[] ABFind(long ownerPuid) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABContactUpdate(System.Guid abId, Contact[] contacts, ContactUpdateOptions options) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public ContactFindResult ABContactFind(System.Guid abId, ContactFilter contactFilter) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public System.Guid[] ABContactAdd(System.Guid abId, Contact[] contacts, ContactAddOptions options) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABContactDelete(System.Guid abId, Contact[] contacts, ContactDeleteOptions options)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public System.Guid[] ABGroupAdd(System.Guid abId, GroupInfo[] groupInfo) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABGroupDelete(System.Guid abId, GroupFilter groupFilter) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABGroupUpdate(System.Guid abId, Group[] groups) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public Group[] ABGroupFind(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public System.Guid[] ABGroupContactAdd(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABGroupContactDelete(System.Guid abId, GroupFilter groupFilter, Contact[] contacts) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ABAllowListSet(System.Guid abId, string allowList) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public string ABAllowListGet(System.Guid abId) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public FindResult ABFindAll(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public FindResult ABFindByContacts(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public FindResult ABFindMessengerUsers(System.Guid abId, ABView abView) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public FindResult ABFindByGroups(System.Guid abId, ABView abView, System.Guid[] groupIds) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public FindResult ABFindMeContact(System.Guid abId, ABView abView) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public Category[] AddCategory(System.Guid abId, string[] name) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void DeleteCategory(System.Guid abId, Category[] categories)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UpdateCategory(System.Guid abId, Category[] categories) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AddDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UpdateDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        
        public void ABSetForceFullSyncDate(System.Guid abId) 
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\download_cfg\download_cfg.cs ===
//
// Content Download configurator stub
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Content download service configurator stub
// Xbox Online Service
//
// Author: Michio Nikaido (michion)
//

using xonline.common.config;
using xonline.common.installer;

[assembly: XomDLInstallerAttribute( Interface.download )]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\abchEmulator.cs ===
namespace Microsoft.XBox.Live.Server.Emulators.ABCH
{
    using System;
    using Microsoft.XBox.Live.Server.Emulators.Framework;
    
    public class abchEmulator : EmulatorFacadeBase<IABCHSoap>
    {
        protected override string HandlerName 
        {
            get 
            {
                return "abchEmulator.asmx";
            }
        }
        
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\bdk\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\bdk\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\bdk\BdkEmulator.cs ===
namespace Microsoft.XBox.Live.Server.Emulators.Bdk
{
    using System;
    using Microsoft.XBox.Live.Server.Emulators.Framework;
    
    public class BdkEmulator : EmulatorFacadeBase<IBdkSoap>
    {
        protected override string HandlerName 
        {
            get 
            {
                return "BdkEmulator.asmx";
            }
        }
        
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\bdk\BdkServerStub.cs ===
namespace Microsoft.XBox.Live.Server.Emulators.Bdk {
    using System;
    using Microsoft.XBox.Live.Server.Emulators.Framework;
        
    [Emulate]
    public class BdkServerStub : ContextBoundObject, IBdkSoap
    {
        public BdkSoapHeader BdkSoapHeaderValue;
        
        public void ActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, out string pbstrError)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void AdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void BanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void BanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void BlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void CalculateTax(string version, string callerInfoXml, string accountId, string taxCalculationInfoXml, string orderDetailXml, out string returnOrderDetailXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void CancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CancelRenewal(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, string subscriptionId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CancelSubscriptionEx(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, bool computeOnly, string subscriptionId, string cancelDate, string commentInfoXML, bool closeBalance, out string amountChargedXML, out string subscriptionStatusInfoXML, out int removedServiceInstanceCount, out string removedServiceInstanceSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CancelTransaction(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string transactionId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ChargePaymentInstrument(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string paymentInstrumentId, string chargeInfoXml, out string paymentInstrumentResultsXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CheckCDAvailability(string accountIDBlob, string subscriptionRefIDBlob, out string partnerName)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, out string pbstrErrorXML, out string pbstrResponseXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, out string pbstrErrorXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ConsumeToken(int delegateIdHigh, int delegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string trackingGuid, string tokenID, out string consumedTokenDetailsXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ConvertSubscription(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet)        
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void ConvertSubscriptionEx(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void ConvertSubscriptionEx2(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet, 
                    out string pbstrRedirectOutputInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        
        
        public void CreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void CreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void DeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void DeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void DeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrNewExpirationDate)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void FixExistingAddress(long acctId, short subRefID, short addId, string mappingCombination, int maxReturnRange, double confidenceScoreThreshold, bool readOnlyMode, out bool result, out double confidenceScore, out int tryNumber)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountIdFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, string roleSetXml, bool fullData, int max, out string errorXml, out int moreRows, out int accountInfoCount, out string accountInfoSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, out string pbstrErrorXML, out string pbstrKeyXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, out string errorXml, out string lineItemHistorySetXml, out string mcv)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPaymentMethodTypeProperties(out string paymentTypeInfoSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPermitHistoryForObjectId(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string objectId, out string errorXml, out int permitCount, out string permitSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, out string pbstrPolicyInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetProductClasses(out string productClassSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetProvisioningInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string ObjectId, string BeginDate, string EndDate, int lTargetUserIdHigh, int lTargetUserIdLow, int nDetailLevel, out string ProvisioningInfoXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, out string ReferralEventsInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, out int tokenInfoReturnedCount, out string replacementTokenSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetServiceComponents(string bstrOfferingGUID, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetTokenClassRestrictionInfoForPUID(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string tokenClassRestrictionInfoFilterXML, out string tokenClassRestrictionInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, out string pbstrErrorXML, out string pbstrTokenOrderXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, out string pbstrErrorXML, out string pbstrTokenOrderXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetTransactions(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, string offeringGuid, string transactionId, string filteringCriteriaXml, out string transactionSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void GetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, out string pbstrResultXML, out string pbstrNewLineItemsXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void IssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void IsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plIsBanned)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void MarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void MapAddress(int delegateIdHigh, int delegateIdLow, string addressInfoXML, int maxReturnRange, double confidenceScoreThreshold, out string MapAddressInfoSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void MatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void MigrateOffer(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrOfferingGUID, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void OffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, out string pbstrError)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void OffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, out string pbstrError, out string pbstrNewLineItemXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void OffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, out string newLineItemXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void OrderCDforAccount(string accountIDBlob, string subscriptionRefIDBlob, int surveyResultCode, out long orderId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void OrderCDforAnonymous(string anonymousInfoXml, string category, string requestorInfo, out long orderId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ProcessChargeback(int delegateIdHigh, int delegateIdLow, string lineItemId, int fileId, string fileNamespace, bool recordOnly, string mode, string chargebackInstanceXml, string commentInfoXml, out string chargebackResponseInfoXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void PurchaseItem(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml, out string receiptXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void PurchaseOffering(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        
        public void PurchaseOfferingEx(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        
        public void PurchaseOfferingEx2(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML, 
                    out string pbstrRedirectOutputInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        
        public void ReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, out int reconStatus)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void RegisterPaymentInstrument(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string trackingGuid, string paymentInstrumentInfoXml, string accountInfoXml, string responseOptionsXml, out string paymentInstrumentId, out string requiredPaperWorkUrl, out string paymentInstrumentsResultsXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void RemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void RemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void RemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void RemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, out string lineItemId, out string usageInfoXml, out string amountChargedXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ReportTransactionEvent(long sequenceNumber, string transactionId, string merchantId, string vendorInternalTransactionId, string amountXml, string transactionEventXml, string paymentDetailsXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, out string pbstrErrorXML, out string pbstrAmountChargedSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SearchBillingInfo(int delegateIdHigh, int delegateIdLow, string billingInfoSearchCriteriaXML, out string billingInfoSetXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void StopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void SubmitOrder(string version, Guid trackingGuid, string callerInfoXml, string objectId, string paymentInstrumentInfoXml, string orderDetailXml, out string orderReceiptXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void OffsetOrder(string version, Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, string commentInfoXml, out string orderReceiptXml)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }

        public void SwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void SyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void TestConnection(string bstrInputString, out string pbstrOutputString)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void TransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void UpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, out string pbstrErrorXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, out string pbstrErrorXML, out string pbstrResponseXML)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
        public void ValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber)
        {
            throw new NotImplementedException("This is a stub code. It should not be called directly");
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\emulators\ABCH\abchwsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Microsoft.XBox.Live.Server.Emulators.ABCH {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ABServiceSoap", Namespace="http://www.msn.com/webservices/AddressBook")]
    public interface IABCHSoap {
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         System.Guid ABAdd(ABInfo abInfo) ;
        
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABDelete(System.Guid abId);
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABUpdate(AB ab) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         AB[] ABFind(long ownerPuid) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABContactUpdate(System.Guid abId, Contact[] contacts, ContactUpdateOptions options) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         ContactFindResult ABContactFind(System.Guid abId, ContactFilter contactFilter) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         System.Guid[] ABContactAdd(System.Guid abId, Contact[] contacts, ContactAddOptions options) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABContactDelete(System.Guid abId, Contact[] contacts, ContactDeleteOptions options);
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         System.Guid[] ABGroupAdd(System.Guid abId, GroupInfo[] groupInfo) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABGroupDelete(System.Guid abId, GroupFilter groupFilter) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABGroupUpdate(System.Guid abId, Group[] groups) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         Group[] ABGroupFind(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupContactAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         System.Guid[] ABGroupContactAdd(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupContactDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABGroupContactDelete(System.Guid abId, GroupFilter groupFilter, Contact[] contacts) ;
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAllowListSet", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABAllowListSet(System.Guid abId, string allowList) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAllowListGet", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         string ABAllowListGet(System.Guid abId) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindAll", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         FindResult ABFindAll(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindByContacts", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         FindResult ABFindByContacts(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView);
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindMessengerUsers", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         FindResult ABFindMessengerUsers(System.Guid abId, ABView abView) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindByGroups", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         FindResult ABFindByGroups(System.Guid abId, ABView abView, System.Guid[] groupIds) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindMeContact", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         FindResult ABFindMeContact(System.Guid abId, ABView abView) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         Category[] AddCategory(System.Guid abId, string[] name) ;
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void DeleteCategory(System.Guid abId, Category[] categories);
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void UpdateCategory(System.Guid abId, Category[] categories) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddDynamicItem", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void AddDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateDynamicItem", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void UpdateDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) ;
        
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABSetForceFullSyncDate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
         void ABSetForceFullSyncDate(System.Guid abId) ;
    }        
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABAuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private bool managedGroupRequestField;
        
        private IdentificationHeader callerIdentificationField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public bool ManagedGroupRequest {
            get {
                return this.managedGroupRequestField;
            }
            set {
                this.managedGroupRequestField = value;
            }
        }
        
        /// <remarks/>
        public IdentificationHeader CallerIdentification {
            get {
                return this.callerIdentificationField;
            }
            set {
                this.callerIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class IdentificationHeader {
        
        private long callerPassportIdField;
        
        private string callerPassportNameField;
        
        /// <remarks/>
        public long CallerPassportId {
            get {
                return this.callerPassportIdField;
            }
            set {
                this.callerPassportIdField = value;
            }
        }
        
        /// <remarks/>
        public string CallerPassportName {
            get {
                return this.callerPassportNameField;
            }
            set {
                this.callerPassportNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceInfo {
        
        private Annotation[] annotationsField;
        
        private ServiceHandle handleField;
        
        private string displayNameField;
        
        private bool inverseRequiredField;
        
        private string urlField;
        
        private string rSSUrlField;
        
        private string authorizationCriteriaField;
        
        private bool isBotField;
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle Handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool InverseRequired {
            get {
                return this.inverseRequiredField;
            }
            set {
                this.inverseRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public string RSSUrl {
            get {
                return this.rSSUrlField;
            }
            set {
                this.rSSUrlField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCriteria {
            get {
                return this.authorizationCriteriaField;
            }
            set {
                this.authorizationCriteriaField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBot {
            get {
                return this.isBotField;
            }
            set {
                this.isBotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Annotation {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceHandle {
        
        private short idField;
        
        private ServiceType typeField;
        
        private string foreignIdField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string ForeignId {
            get {
                return this.foreignIdField;
            }
            set {
                this.foreignIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServiceType {
        
        /// <remarks/>
        Namespace,
        
        /// <remarks/>
        Calendar,
        
        /// <remarks/>
        Folder,
        
        /// <remarks/>
        ContactInfo,
        
        /// <remarks/>
        AddressBook,
        
        /// <remarks/>
        Favorites,
        
        /// <remarks/>
        Messenger,
        
        /// <remarks/>
        Space,
        
        /// <remarks/>
        MessageContainer,
        
        /// <remarks/>
        PhotoAlbum,
        
        /// <remarks/>
        List,
        
        /// <remarks/>
        ABCHInternal,
        
        /// <remarks/>
        Invitation,
        
        /// <remarks/>
        SocialNetwork,
        
        /// <remarks/>
        Profile,
        
        /// <remarks/>
        EmailNotifications,
        
        /// <remarks/>
        BlindEmail,
        
        /// <remarks/>
        Classifieds,
        
        /// <remarks/>
        CommunityQuestionAnswer,
        
        /// <remarks/>
        OfficeLiveWebNotification,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NamespaceHandle {
        
        private System.Guid idField;
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long cIDField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassportMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroupMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GuidMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EveryoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RoleMember))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public abstract partial class Member {
        
        private int membershipIdField;
        
        private MemberType typeField;
        
        private NamespaceHandle locationField;
        
        private string displayNameField;
        
        private MemberState stateField;
        
        private Annotation[] annotationsField;
        
        private bool deletedField;
        
        private System.DateTime lastChangedField;
        
        private MemberPropertyTypes changesField;
        
        /// <remarks/>
        public int MembershipId {
            get {
                return this.membershipIdField;
            }
            set {
                this.membershipIdField = value;
            }
        }
        
        /// <remarks/>
        public MemberType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public NamespaceHandle Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public MemberState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        public MemberPropertyTypes Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberType {
        
        /// <remarks/>
        Passport,
        
        /// <remarks/>
        Everyone,
        
        /// <remarks/>
        Phone,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        Group,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Role,
        
        /// <remarks/>
        Service,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberState {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Removed,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberPropertyTypes {
        
        /// <remarks/>
        State = 1,
        
        /// <remarks/>
        Annotations = 2,
        
        /// <remarks/>
        DisplayName = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PhoneMember : Member {
        
        private string phoneNumberField;
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EmailMember : Member {
        
        private string emailField;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceMember : Member {
        
        private ServiceHandle serviceField;
        
        /// <remarks/>
        public ServiceHandle Service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PassportMember : Member {
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long passportIdField;
        
        private long cIDField;
        
        private PassportMemberPropertyTypes passportChangesField;
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long PassportId {
            get {
                return this.passportIdField;
            }
            set {
                this.passportIdField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public PassportMemberPropertyTypes PassportChanges {
            get {
                return this.passportChangesField;
            }
            set {
                this.passportChangesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PassportMemberPropertyTypes {
        
        /// <remarks/>
        IsPassportNameHidden = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GuidMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EveryoneMember : Member {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class RoleMember : Member {
        
        private RoleId idField;
        
        private ServiceHandle definingServiceField;
        
        private int maxRoleRecursionDepthField;
        
        private int maxDegreesSeparationField;
        
        /// <remarks/>
        public RoleId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle DefiningService {
            get {
                return this.definingServiceField;
            }
            set {
                this.definingServiceField = value;
            }
        }
        
        /// <remarks/>
        public int MaxRoleRecursionDepth {
            get {
                return this.maxRoleRecursionDepthField;
            }
            set {
                this.maxRoleRecursionDepthField = value;
            }
        }
        
        /// <remarks/>
        public int MaxDegreesSeparation {
            get {
                return this.maxDegreesSeparationField;
            }
            set {
                this.maxDegreesSeparationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum RoleId {
        
        /// <remarks/>
        Admin,
        
        /// <remarks/>
        AssistantAdmin,
        
        /// <remarks/>
        Member,
        
        /// <remarks/>
        Guest,
        
        /// <remarks/>
        Banned,
        
        /// <remarks/>
        Delegate,
        
        /// <remarks/>
        Allow,
        
        /// <remarks/>
        Block,
        
        /// <remarks/>
        Reverse,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        CalFreeBusy,
        
        /// <remarks/>
        Contributor,
        
        /// <remarks/>
        NamespaceQuota,
        
        /// <remarks/>
        TwoWayRelationship,
        
        /// <remarks/>
        OneWayRelationship,
        
        /// <remarks/>
        ProfileCareer,
        
        /// <remarks/>
        ProfileDating,
        
        /// <remarks/>
        ProfileEducation,
        
        /// <remarks/>
        ProfileGaming,
        
        /// <remarks/>
        ProfileGeneral,
        
        /// <remarks/>
        ProfilePersonalContact,
        
        /// <remarks/>
        ProfileProfessionalContact,
        
        /// <remarks/>
        ProfileSocial,
        
        /// <remarks/>
        ProfileExpression,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Membership {
        
        private RoleId memberRoleField;
        
        private Member[] membersField;
        
        /// <remarks/>
        public RoleId MemberRole {
            get {
                return this.memberRoleField;
            }
            set {
                this.memberRoleField = value;
            }
        }
        
        /// <remarks/>
        public Member[] Members {
            get {
                return this.membersField;
            }
            set {
                this.membersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Service {
        
        private Membership[] membershipsField;
        
        private ServiceInfo infoField;
        
        private ServicePropertyType changesField;
        
        private System.DateTime lastChangeField;
        
        private bool deletedField;
        
        /// <remarks/>
        public Membership[] Memberships {
            get {
                return this.membershipsField;
            }
            set {
                this.membershipsField = value;
            }
        }
        
        /// <remarks/>
        public ServiceInfo Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public ServicePropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServicePropertyType {
        
        /// <remarks/>
        DisplayName = 1,
        
        /// <remarks/>
        Url = 2,
        
        /// <remarks/>
        Annotation = 4,
        
        /// <remarks/>
        RSSUrl = 8,
        
        /// <remarks/>
        IsBot = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NotificationData {
        
        private Service storeServiceField;
        
        private StoreStatusTypes statusField;
        
        private bool statusFieldSpecified;
        
        private System.DateTime lastChangedField;
        
        private bool lastChangedFieldSpecified;
        
        private System.DateTime lastViewedField;
        
        private bool lastViewedFieldSpecified;
        
        private bool gleamField;
        
        private bool gleamFieldSpecified;
        
        private short instanceIdField;
        
        /// <remarks/>
        public Service StoreService {
            get {
                return this.storeServiceField;
            }
            set {
                this.storeServiceField = value;
            }
        }
        
        /// <remarks/>
        public StoreStatusTypes Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastChangedSpecified {
            get {
                return this.lastChangedFieldSpecified;
            }
            set {
                this.lastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastViewed {
            get {
                return this.lastViewedField;
            }
            set {
                this.lastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastViewedSpecified {
            get {
                return this.lastViewedFieldSpecified;
            }
            set {
                this.lastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Gleam {
            get {
                return this.gleamField;
            }
            set {
                this.gleamField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GleamSpecified {
            get {
                return this.gleamFieldSpecified;
            }
            set {
                this.gleamFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short InstanceId {
            get {
                return this.instanceIdField;
            }
            set {
                this.instanceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum StoreStatusTypes {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassportDynamicItem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public abstract partial class DynamicItem {
        
        private DynamicItemType typeField;
        
        private bool deletedField;
        
        private System.DateTime lastChangedField;
        
        /// <remarks/>
        public DynamicItemType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum DynamicItemType {
        
        /// <remarks/>
        Passport,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PassportDynamicItem : DynamicItem {
        
        private string passportNameField;
        
        private long passportIdField;
        
        private long cIDField;
        
        private SpaceStatusType spaceStatusField;
        
        private System.DateTime spaceLastChangedField;
        
        private bool spaceLastChangedFieldSpecified;
        
        private System.DateTime spaceLastViewedField;
        
        private bool spaceLastViewedFieldSpecified;
        
        private bool spaceGleamField;
        
        private ProfileStatusType profileStatusField;
        
        private System.DateTime profileLastChangedField;
        
        private bool profileLastChangedFieldSpecified;
        
        private System.DateTime profileLastViewedField;
        
        private bool profileLastViewedFieldSpecified;
        
        private bool profileGleamField;
        
        private System.DateTime profileLastComparedField;
        
        private bool profileLastComparedFieldSpecified;
        
        private ContactProfileStatusType contactProfileStatusField;
        
        private System.DateTime contactProfileLastChangedField;
        
        private bool contactProfileLastChangedFieldSpecified;
        
        private System.DateTime contactProfileLastViewedField;
        
        private bool contactProfileLastViewedFieldSpecified;
        
        private System.DateTime liveContactLastChangedField;
        
        private bool liveContactLastChangedFieldSpecified;
        
        private System.DateTime contactLastComparedField;
        
        private bool contactLastComparedFieldSpecified;
        
        private NotificationData[] notificationsField;
        
        private PassportDynamicItemPropertyType changesField;
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public long PassportId {
            get {
                return this.passportIdField;
            }
            set {
                this.passportIdField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public SpaceStatusType SpaceStatus {
            get {
                return this.spaceStatusField;
            }
            set {
                this.spaceStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SpaceLastChanged {
            get {
                return this.spaceLastChangedField;
            }
            set {
                this.spaceLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLastChangedSpecified {
            get {
                return this.spaceLastChangedFieldSpecified;
            }
            set {
                this.spaceLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SpaceLastViewed {
            get {
                return this.spaceLastViewedField;
            }
            set {
                this.spaceLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLastViewedSpecified {
            get {
                return this.spaceLastViewedFieldSpecified;
            }
            set {
                this.spaceLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool SpaceGleam {
            get {
                return this.spaceGleamField;
            }
            set {
                this.spaceGleamField = value;
            }
        }
        
        /// <remarks/>
        public ProfileStatusType ProfileStatus {
            get {
                return this.profileStatusField;
            }
            set {
                this.profileStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastChanged {
            get {
                return this.profileLastChangedField;
            }
            set {
                this.profileLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastChangedSpecified {
            get {
                return this.profileLastChangedFieldSpecified;
            }
            set {
                this.profileLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastViewed {
            get {
                return this.profileLastViewedField;
            }
            set {
                this.profileLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastViewedSpecified {
            get {
                return this.profileLastViewedFieldSpecified;
            }
            set {
                this.profileLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ProfileGleam {
            get {
                return this.profileGleamField;
            }
            set {
                this.profileGleamField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastCompared {
            get {
                return this.profileLastComparedField;
            }
            set {
                this.profileLastComparedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastComparedSpecified {
            get {
                return this.profileLastComparedFieldSpecified;
            }
            set {
                this.profileLastComparedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ContactProfileStatusType ContactProfileStatus {
            get {
                return this.contactProfileStatusField;
            }
            set {
                this.contactProfileStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactProfileLastChanged {
            get {
                return this.contactProfileLastChangedField;
            }
            set {
                this.contactProfileLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactProfileLastChangedSpecified {
            get {
                return this.contactProfileLastChangedFieldSpecified;
            }
            set {
                this.contactProfileLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactProfileLastViewed {
            get {
                return this.contactProfileLastViewedField;
            }
            set {
                this.contactProfileLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactProfileLastViewedSpecified {
            get {
                return this.contactProfileLastViewedFieldSpecified;
            }
            set {
                this.contactProfileLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LiveContactLastChanged {
            get {
                return this.liveContactLastChangedField;
            }
            set {
                this.liveContactLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LiveContactLastChangedSpecified {
            get {
                return this.liveContactLastChangedFieldSpecified;
            }
            set {
                this.liveContactLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactLastCompared {
            get {
                return this.contactLastComparedField;
            }
            set {
                this.contactLastComparedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactLastComparedSpecified {
            get {
                return this.contactLastComparedFieldSpecified;
            }
            set {
                this.contactLastComparedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public NotificationData[] Notifications {
            get {
                return this.notificationsField;
            }
            set {
                this.notificationsField = value;
            }
        }
        
        /// <remarks/>
        public PassportDynamicItemPropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum SpaceStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ProfileStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactProfileStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PassportDynamicItemPropertyType {
        
        /// <remarks/>
        SpaceStatus = 1,
        
        /// <remarks/>
        SpaceLastChanged = 2,
        
        /// <remarks/>
        SpaceLastViewed = 4,
        
        /// <remarks/>
        SpaceGleam = 8,
        
        /// <remarks/>
        ProfileStatus = 16,
        
        /// <remarks/>
        ProfileLastChanged = 32,
        
        /// <remarks/>
        ProfileLastViewed = 64,
        
        /// <remarks/>
        ProfileGleam = 128,
        
        /// <remarks/>
        ProfileLastCompared = 256,
        
        /// <remarks/>
        ContactProfileStatus = 512,
        
        /// <remarks/>
        ContactProfileLastChanged = 1024,
        
        /// <remarks/>
        ContactProfileLastViewed = 2048,
        
        /// <remarks/>
        LiveContactLastChanged = 4096,
        
        /// <remarks/>
        ContactLastCompared = 8192,
        
        /// <remarks/>
        Notifications = 16384,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class FindResult {
        
        private Group[] groupsField;
        
        private Contact[] contactsField;
        
        private Category[] categoriesField;
        
        private DynamicItem[] dynamicItemsField;
        
        private AB abField;
        
        /// <remarks/>
        public Group[] groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public Contact[] contacts {
            get {
                return this.contactsField;
            }
            set {
                this.contactsField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public DynamicItem[] DynamicItems {
            get {
                return this.dynamicItemsField;
            }
            set {
                this.dynamicItemsField = value;
            }
        }
        
        /// <remarks/>
        public AB ab {
            get {
                return this.abField;
            }
            set {
                this.abField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Group {
        
        private System.Guid groupIdField;
        
        private GroupInfo groupInfoField;
        
        private GroupPropertyType propertiesChangedField;
        
        private bool fDeletedField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public System.Guid groupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public GroupInfo groupInfo {
            get {
                return this.groupInfoField;
            }
            set {
                this.groupInfoField = value;
            }
        }
        
        /// <remarks/>
        public GroupPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
        
        /// <remarks/>
        public bool fDeleted {
            get {
                return this.fDeletedField;
            }
            set {
                this.fDeletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupInfo {
        
        private Annotation[] annotationsField;
        
        private System.Guid groupTypeField;
        
        private string nameField;
        
        private string clientErrorDataField;
        
        private bool isNotMobileVisibleField;
        
        private Category[] categoriesField;
        
        private bool isPrivateField;
        
        /// <remarks/>
        public Annotation[] annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid groupType {
            get {
                return this.groupTypeField;
            }
            set {
                this.groupTypeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string clientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNotMobileVisible {
            get {
                return this.isNotMobileVisibleField;
            }
            set {
                this.isNotMobileVisibleField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Category {
        
        private short idField;
        
        private string nameField;
        
        private CategoryPropertyType changesField;
        
        private bool changesFieldSpecified;
        
        private bool deletedField;
        
        private bool deletedFieldSpecified;
        
        private System.DateTime lastChangeField;
        
        private bool lastChangeFieldSpecified;
        
        private string clientErrorDataField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public CategoryPropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangesSpecified {
            get {
                return this.changesFieldSpecified;
            }
            set {
                this.changesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeletedSpecified {
            get {
                return this.deletedFieldSpecified;
            }
            set {
                this.deletedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastChangeSpecified {
            get {
                return this.lastChangeFieldSpecified;
            }
            set {
                this.lastChangeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ClientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum CategoryPropertyType {
        
        /// <remarks/>
        Name = 1,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum GroupPropertyType {
        
        /// <remarks/>
        GroupName = 1,
        
        /// <remarks/>
        Annotation = 2,
        
        /// <remarks/>
        IsNotMobileVisible = 4,
        
        /// <remarks/>
        Categories = 8,
        
        /// <remarks/>
        IsPrivate = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Contact {
        
        private System.Guid contactIdField;
        
        private ContactInfo contactInfoField;
        
        private ContactPropertyType propertiesChangedField;
        
        private bool fDeletedField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public System.Guid contactId {
            get {
                return this.contactIdField;
            }
            set {
                this.contactIdField = value;
            }
        }
        
        /// <remarks/>
        public ContactInfo contactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        public ContactPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
        
        /// <remarks/>
        public bool fDeleted {
            get {
                return this.fDeletedField;
            }
            set {
                this.fDeletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactInfo {
        
        private ContactEmail[] emailsField;
        
        private ContactPhone[] phonesField;
        
        private ContactLocation[] locationsField;
        
        private ContactWebSite[] webSitesField;
        
        private Annotation[] annotationsField;
        
        private System.Guid[] groupIdsField;
        
        private System.Guid[] groupIdsDeletedField;
        
        private string clientErrorDataField;
        
        private ContactType contactTypeField;
        
        private string quickNameField;
        
        private string firstNameField;
        
        private string middleNameField;
        
        private string lastNameField;
        
        private string suffixField;
        
        private string nameTitleField;
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private string displayNameField;
        
        private long puidField;
        
        private long cIDField;
        
        private string commentField;
        
        private bool isNotMobileVisibleField;
        
        private bool isMobileIMEnabledField;
        
        private bool isMessengerUserField;
        
        private bool isFavoriteField;
        
        private bool isSmtpField;
        
        private bool hasSpaceField;
        
        private SpotType spotWatchStateField;
        
        private System.DateTime birthdateField;
        
        private ContactEmailType primaryEmailTypeField;
        
        private ContactLocationType primaryLocationField;
        
        private ContactPhoneType primaryPhoneField;
        
        private Category[] categoriesField;
        
        private string fileAsField;
        
        private bool isPrivateField;
        
        private string anniversaryField;
        
        private GenderType genderField;
        
        private TimeZoneRange timeZoneField;
        
        /// <remarks/>
        public ContactEmail[] emails {
            get {
                return this.emailsField;
            }
            set {
                this.emailsField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhone[] phones {
            get {
                return this.phonesField;
            }
            set {
                this.phonesField = value;
            }
        }
        
        /// <remarks/>
        public ContactLocation[] locations {
            get {
                return this.locationsField;
            }
            set {
                this.locationsField = value;
            }
        }
        
        /// <remarks/>
        public ContactWebSite[] webSites {
            get {
                return this.webSitesField;
            }
            set {
                this.webSitesField = value;
            }
        }
        
        /// <remarks/>
        public Annotation[] annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] groupIds {
            get {
                return this.groupIdsField;
            }
            set {
                this.groupIdsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] groupIdsDeleted {
            get {
                return this.groupIdsDeletedField;
            }
            set {
                this.groupIdsDeletedField = value;
            }
        }
        
        /// <remarks/>
        public string clientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
        
        /// <remarks/>
        public ContactType contactType {
            get {
                return this.contactTypeField;
            }
            set {
                this.contactTypeField = value;
            }
        }
        
        /// <remarks/>
        public string quickName {
            get {
                return this.quickNameField;
            }
            set {
                this.quickNameField = value;
            }
        }
        
        /// <remarks/>
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Suffix {
            get {
                return this.suffixField;
            }
            set {
                this.suffixField = value;
            }
        }
        
        /// <remarks/>
        public string NameTitle {
            get {
                return this.nameTitleField;
            }
            set {
                this.nameTitleField = value;
            }
        }
        
        /// <remarks/>
        public string passportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public long puid {
            get {
                return this.puidField;
            }
            set {
                this.puidField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNotMobileVisible {
            get {
                return this.isNotMobileVisibleField;
            }
            set {
                this.isNotMobileVisibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isMobileIMEnabled {
            get {
                return this.isMobileIMEnabledField;
            }
            set {
                this.isMobileIMEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerUser {
            get {
                return this.isMessengerUserField;
            }
            set {
                this.isMessengerUserField = value;
            }
        }
        
        /// <remarks/>
        public bool isFavorite {
            get {
                return this.isFavoriteField;
            }
            set {
                this.isFavoriteField = value;
            }
        }
        
        /// <remarks/>
        public bool isSmtp {
            get {
                return this.isSmtpField;
            }
            set {
                this.isSmtpField = value;
            }
        }
        
        /// <remarks/>
        public bool hasSpace {
            get {
                return this.hasSpaceField;
            }
            set {
                this.hasSpaceField = value;
            }
        }
        
        /// <remarks/>
        public SpotType spotWatchState {
            get {
                return this.spotWatchStateField;
            }
            set {
                this.spotWatchStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime birthdate {
            get {
                return this.birthdateField;
            }
            set {
                this.birthdateField = value;
            }
        }
        
        /// <remarks/>
        public ContactEmailType primaryEmailType {
            get {
                return this.primaryEmailTypeField;
            }
            set {
                this.primaryEmailTypeField = value;
            }
        }
        
        /// <remarks/>
        public ContactLocationType PrimaryLocation {
            get {
                return this.primaryLocationField;
            }
            set {
                this.primaryLocationField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhoneType PrimaryPhone {
            get {
                return this.primaryPhoneField;
            }
            set {
                this.primaryPhoneField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public string FileAs {
            get {
                return this.fileAsField;
            }
            set {
                this.fileAsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
            }
        }
        
        /// <remarks/>
        public string Anniversary {
            get {
                return this.anniversaryField;
            }
            set {
                this.anniversaryField = value;
            }
        }
        
        /// <remarks/>
        public GenderType Gender {
            get {
                return this.genderField;
            }
            set {
                this.genderField = value;
            }
        }
        
        /// <remarks/>
        public TimeZoneRange TimeZone {
            get {
                return this.timeZoneField;
            }
            set {
                this.timeZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactEmail {
        
        private ContactEmailType contactEmailTypeField;
        
        private string emailField;
        
        private bool isMessengerEnabledField;
        
        private ContactEmailPropertyType propertiesChangedField;
        
        /// <remarks/>
        public ContactEmailType contactEmailType {
            get {
                return this.contactEmailTypeField;
            }
            set {
                this.contactEmailTypeField = value;
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerEnabled {
            get {
                return this.isMessengerEnabledField;
            }
            set {
                this.isMessengerEnabledField = value;
            }
        }
        
        /// <remarks/>
        public ContactEmailPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactEmailType {
        
        /// <remarks/>
        ContactEmailPersonal,
        
        /// <remarks/>
        ContactEmailBusiness,
        
        /// <remarks/>
        ContactEmailOther,
        
        /// <remarks/>
        ContactEmailMessenger,
        
        /// <remarks/>
        Messenger2,
        
        /// <remarks/>
        Messenger3,
        
        /// <remarks/>
        Messenger4,
        
        /// <remarks/>
        Passport,
        
        /// <remarks/>
        Messenger5,
        
        /// <remarks/>
        Messenger6,
        
        /// <remarks/>
        Messenger7,
        
        /// <remarks/>
        Messenger8,
        
        /// <remarks/>
        Messenger9,
        
        /// <remarks/>
        Messenger10,
        
        /// <remarks/>
        Messenger11,
        
        /// <remarks/>
        Messenger12,
        
        /// <remarks/>
        Messenger13,
        
        /// <remarks/>
        Messenger14,
        
        /// <remarks/>
        Messenger15,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactEmailPropertyType {
        
        /// <remarks/>
        Email = 1,
        
        /// <remarks/>
        IsMessengerEnabled = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactPhone {
        
        private ContactPhoneType contactPhoneTypeField;
        
        private string numberField;
        
        private bool isMessengerEnabledField;
        
        private string speedDialField;
        
        private ContactPhonePropertyType propertiesChangedField;
        
        /// <remarks/>
        public ContactPhoneType contactPhoneType {
            get {
                return this.contactPhoneTypeField;
            }
            set {
                this.contactPhoneTypeField = value;
            }
        }
        
        /// <remarks/>
        public string number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerEnabled {
            get {
                return this.isMessengerEnabledField;
            }
            set {
                this.isMessengerEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string SpeedDial {
            get {
                return this.speedDialField;
            }
            set {
                this.speedDialField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhonePropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactPhoneType {
        
        /// <remarks/>
        ContactPhonePersonal,
        
        /// <remarks/>
        ContactPhoneBusiness,
        
        /// <remarks/>
        ContactPhoneMobile,
        
        /// <remarks/>
        ContactPhonePager,
        
        /// <remarks/>
        ContactPhoneFax,
        
        /// <remarks/>
        ContactPhoneOther,
        
        /// <remarks/>
        Personal2,
        
        /// <remarks/>
        Business2,
        
        /// <remarks/>
        BusinessFax,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        Assistant,
        
        /// <remarks/>
        Callback,
        
        /// <remarks/>
        Car,
        
        /// <remarks/>
        ISDN,
        
        /// <remarks/>
        OtherFax,
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        Radio,
        
        /// <remarks/>
        Telex,
        
        /// <remarks/>
        TTY,
        
        /// <remarks/>
        MSN,
        
        /// <remarks/>
        IP,
        
        /// <remarks/>
        BusinessMobile,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactPhonePropertyType {
        
        /// <remarks/>
        Number = 1,
        
        /// <remarks/>
        IsMessengerEnabled = 2,
        
        /// <remarks/>
        SpeedDial = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactLocation {
        
        private ContactLocationType contactLocationTypeField;
        
        private string nameField;
        
        private string streetField;
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        private string postalCodeField;
        
        private string officeField;
        
        private string departmentField;
        
        private double latitudeField;
        
        private bool latitudeFieldSpecified;
        
        private double longitudeField;
        
        private bool longitudeFieldSpecified;
        
        private ContactLocationProperty changesField;
        
        /// <remarks/>
        public ContactLocationType contactLocationType {
            get {
                return this.contactLocationTypeField;
            }
            set {
                this.co